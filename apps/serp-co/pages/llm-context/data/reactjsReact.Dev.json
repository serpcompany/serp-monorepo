[
  {
    "owner": "reactjs",
    "repo": "react.dev",
    "content": "TITLE: Declaring and Initializing State Variables\nDESCRIPTION: Example showing how to declare and initialize state variables with the useState Hook. Uses array destructuring to extract current state and setter function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [age, setAge] = useState(42);\n  const [name, setName] = useState('Taylor');\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component in JavaScript\nDESCRIPTION: Defines a simple React component as a JavaScript function that returns JSX markup for a button element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  return (\n    <button>I'm a button</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tic-Tac-Toe Game with Winner Detection\nDESCRIPTION: The complete implementation of a Tic-Tac-Toe game in React, featuring alternating turns, prevention of overwriting squares, and winner detection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Root in JavaScript\nDESCRIPTION: This code snippet demonstrates the process of creating a new React root using the createRoot function. The root is created for a given DOM node, allowing React to manage the DOM within it. After creation, the root can be used to render React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\nconst root = createRoot(domNode);\n```\n\n----------------------------------------\n\nTITLE: Creating Task State and Dispatch Contexts in React - JavaScript\nDESCRIPTION: This snippet shows how to set up two separate contexts using React's createContext: one for sharing the task state and one for the dispatch function. Both contexts have null as initial default values. This approach allows components to consume either the current state or the dispatch function as needed, and is fundamental for reducing prop-drilling in more complex React applications.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete React Tic-Tac-Toe Game\nDESCRIPTION: Main game implementation including Square, Board and Game components with full game logic, move history, and winner calculation. Uses React useState hook for state management and implements interactive gameplay features.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Standalone Reducer Function for Task Management (JavaScript)\nDESCRIPTION: Defines the `tasksReducer` function within its own module (`tasksReducer.js`). This pure function takes the current task list state and an action object, returning the new state based on the action type ('added', 'changed', 'deleted'). This separation improves code modularity and testability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nexport default function tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from ReactDOM.render to ReactDOM.createRoot\nDESCRIPTION: This code example demonstrates how to update the rendering method from the deprecated ReactDOM.render to the new ReactDOM.createRoot API introduced in React 18.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport {render} from 'react-dom';\nrender(<App />, document.getElementById('root'));\n\n// After\nimport {createRoot} from 'react-dom/client';\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Context and Reducer - React JavaScript\nDESCRIPTION: Implements context objects and a provider using React's createContext, useContext, and useReducer hooks. Supplies both tasks state and a dispatcher to its consumers. Includes a local reducer handling 'added', 'changed', and 'deleted' actions. Expects context-aware consumers and initializes with sample tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createContext, useContext, useReducer } from 'react';\\n\\nconst TasksContext = createContext(null);\\n\\nconst TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nexport function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\n```\n\n----------------------------------------\n\nTITLE: Basic useState Hook Syntax\nDESCRIPTION: The fundamental syntax for using the useState Hook in React, showing the destructuring pattern that returns the current state and a setter function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, setState] = useState(initialState)\n```\n\n----------------------------------------\n\nTITLE: Adding Click Functionality to Square Component\nDESCRIPTION: Implements a click handler in the Square component to log clicks to the console, making the component interactive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square({ value }) {\n  function handleClick() {\n    console.log('clicked!');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with useState\nDESCRIPTION: A complete example of a counter component using useState to track a numeric value. Clicking the button increments the count by calling setCount with the updated value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You pressed me {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial State with useState Initializer Function\nDESCRIPTION: A React component demonstrating how to optimize performance by using an initializer function with useState. The createInitialTodos function only runs during initialization, not on re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction createInitialTodos() {\n  const initialTodos = [];\n  for (let i = 0; i < 50; i++) {\n    initialTodos.push({\n      id: i,\n      text: 'Item ' + (i + 1)\n    });\n  }\n  return initialTodos;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(createInitialTodos);\n  const [text, setText] = useState('');\n\n  return (\n    <>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        setTodos([{\n          id: todos.length,\n          text: text\n        }, ...todos]);\n      }}>Add</button>\n      <ul>\n        {todos.map(item => (\n          <li key={item.id}>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative useReducer Implementation in JavaScript\nDESCRIPTION: This snippet shows a slightly more accurate implementation of the useReducer Hook, using a functional update with setState to handle queued dispatches correctly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dispatch(action) {\n  setState((s) => reducer(s, action));\n}\n```\n\n----------------------------------------\n\nTITLE: Tasks Reducer Implementation in JavaScript\nDESCRIPTION: A complete implementation of a tasksReducer function that handles multiple action types (added, changed, deleted) to manipulate a task list. It demonstrates the pattern of taking current state and an action to produce the next state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Function Dependencies in useEffect\nDESCRIPTION: Shows an anti-pattern where a function created during rendering is used as a dependency for useEffect, causing unnecessary re-renders. The function should be declared inside the Effect instead.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  function createOptions() { // 🚩 This function is created from scratch on every re-render\n    return {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n  }\n\n  useEffect(() => {\n    const options = createOptions(); // It's used inside the Effect\n    const connection = createConnection();\n    connection.connect();\n    return () => connection.disconnect();\n  }, [createOptions]); // 🚩 As a result, these dependencies are always different on a re-render\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Managing Todo List State with useState in React (JavaScript)\nDESCRIPTION: Demonstrates a standard React functional component using useState for managing a todo list's state. The code includes functions for adding, updating, and deleting todos, and highlights mutation problems which Immer can solve. Dependencies include React and child components (AddTodo, TaskList). Key props are passed for event handling; inputs are handled directly in state, and the logic is mutative, thus not recommended in production without Immer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\nimport { useImmer } from 'use-immer';\\nimport AddTodo from './AddTodo.js';\\nimport TaskList from './TaskList.js';\\n\\nlet nextId = 3;\\nconst initialTodos = [\\n  { id: 0, title: 'Buy milk', done: true },\\n  { id: 1, title: 'Eat tacos', done: false },\\n  { id: 2, title: 'Brew tea', done: false },\\n];\\n\\nexport default function TaskApp() {\\n  const [todos, setTodos] = useState(\\n    initialTodos\\n  );\\n\\n  function handleAddTodo(title) {\\n    todos.push({\\n      id: nextId++,\\n      title: title,\\n      done: false\\n    });\\n  }\\n\\n  function handleChangeTodo(nextTodo) {\\n    const todo = todos.find(t =>\\n      t.id === nextTodo.id\\n    );\\n    todo.title = nextTodo.title;\\n    todo.done = nextTodo.done;\\n  }\\n\\n  function handleDeleteTodo(todoId) {\\n    const index = todos.findIndex(t =>\\n      t.id === todoId\\n    );\\n    todos.splice(index, 1);\\n  }\\n\\n  return (\\n    <>\\n      <AddTodo\\n        onAddTodo={handleAddTodo}\\n      />\\n      <TaskList\\n        todos={todos}\\n        onChangeTodo={handleChangeTodo}\\n        onDeleteTodo={handleDeleteTodo}\\n      />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Passing State as Props to Child Components\nDESCRIPTION: This code demonstrates how to pass the state variables (filterText and inStockOnly) as props to the SearchBar and ProductTable components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<div>\n  <SearchBar \n    filterText={filterText} \n    inStockOnly={inStockOnly} />\n  <ProductTable \n    products={products}\n    filterText={filterText}\n    inStockOnly={inStockOnly} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Counter Component Using Parameterized useCounter Hook - React JavaScript\nDESCRIPTION: This snippet displays a counter whose updating interval is controlled by a delay state (from a slider), which is passed as an argument to the useCounter Hook. The label and input range allow the user to dynamically adjust the tick duration between 10ms and 2000ms, ensuring the count updates in real-time. Requires useCounter to be implemented to accept and use the delay parameter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n  const [delay, setDelay] = useState(1000);\n  const count = useCounter(delay);\n  return (\n    <>\n      <label>\n        Tick duration: {delay} ms\n        <br />\n        <input\n          type=\"range\"\n          value={delay}\n          min=\"10\"\n          max=\"2000\"\n          onChange={e => setDelay(Number(e.target.value))}\n        />\n      </label>\n      <hr />\n      <h1>Ticks: {count}</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Task Management App with useState in React\nDESCRIPTION: A React component that manages a list of tasks using useState. It includes functions for adding, changing, and deleting tasks, demonstrating how state updates are typically handled directly in event handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, setTasks] = useState(initialTasks);\n\n  function handleAddTask(text) {\n    setTasks([\n      ...tasks,\n      {\n        id: nextId++,\n        text: text,\n        done: false,\n      },\n    ]);\n  }\n\n  function handleChangeTask(task) {\n    setTasks(\n      tasks.map((t) => {\n        if (t.id === task.id) {\n          return task;\n        } else {\n          return t;\n        }\n      })\n    );\n  }\n\n  function handleDeleteTask(taskId) {\n    setTasks(tasks.filter((t) => t.id !== taskId));\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Controlling Video Playback with useEffect in React (JS + CSS)\nDESCRIPTION: Provides a full, working example showing a parent `App` component managing `isPlaying` state and a `VideoPlayer` child component using `useEffect` and `useRef` to control the HTML video element based on the `isPlaying` prop. This demonstrates synchronizing React state with the browser's Media API. Includes related CSS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Passing Props to React Components\nDESCRIPTION: Showcases how to pass data between React components using props, including complex data types like objects and functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getImageUrl } from './utils.js'\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing JSX as Children Props in React\nDESCRIPTION: Illustrates how to pass JSX content as children to a component and how to render that content using the children prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useState from React - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the useState Hook from React, which is essential for defining state variables inside a functional component. You need React library installed as a dependency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variable with useState in React - JavaScript\nDESCRIPTION: Replaces a variable declaration with useState to maintain state across renders. The useState function is called at the top level of a component to create a state variable and its corresponding setter function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [index, setIndex] = useState(0);\n```\n\n----------------------------------------\n\nTITLE: Complete Shopping List Component with Conditional Styling\nDESCRIPTION: A full example of a shopping list component that renders array items with conditional styling based on item properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst products = [\n  { title: 'Cabbage', isFruit: false, id: 1 },\n  { title: 'Garlic', isFruit: false, id: 2 },\n  { title: 'Apple', isFruit: true, id: 3 },\n];\n\nexport default function ShoppingList() {\n  const listItems = products.map(product =>\n    <li\n      key={product.id}\n      style={{\n        color: product.isFruit ? 'magenta' : 'darkgreen'\n      }}\n    >\n      {product.title}\n    </li>\n  );\n\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Values for Props in React\nDESCRIPTION: Demonstrates how to set default values for props in a React component using destructuring.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Avatar({ person, size = 100 }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Task Management with Reducer Pattern\nDESCRIPTION: Implementation of a task management application using the useReducer hook. Demonstrates how to consolidate state logic in a reducer function to handle task addition, modification, and deletion.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask\n        onAddTask={handleAddTask}\n      />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatically Nested Headings with React Context\nDESCRIPTION: This example demonstrates how to use React Context to create automatically nested headings. The Section component tracks the nesting level, and the Heading component uses this context to determine which heading tag to use.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext.Provider value={level + 1}>\n        {children}\n      </LevelContext.Provider>\n    </section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 0:\n      throw Error('Heading must be inside a Section!');\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n      return <h2>{children}</h2>;\n    case 3:\n      return <h3>{children}</h3>;\n    case 4:\n      return <h4>{children}</h4>;\n    case 5:\n      return <h5>{children}</h5>;\n    case 6:\n      return <h6>{children}</h6>;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n```\n\nLANGUAGE: css\nCODE:\n```\n.section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Split Component File Structure\nDESCRIPTION: Demonstrates how to split components into separate files using default exports and imports.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Gallery />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Gallery.js\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the Messenger Component with useReducer in React\nDESCRIPTION: Initializes a messenger app using useReducer with a reducer function and initial state. It renders a ContactList and Chat component, sharing state and dispatch function with child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\nimport { initialState, messengerReducer } from './messengerReducer';\n\nexport default function Messenger() {\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\n  const message = state.message;\n  const contact = contacts.find((c) => c.id === state.selectedId);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedId={state.selectedId}\n        dispatch={dispatch}\n      />\n      <Chat\n        key={contact.id}\n        message={message}\n        contact={contact}\n        dispatch={dispatch}\n      />\n    </div>\n  );\n}\n\nconst contacts = [\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Pending State on Button with useFormStatus in React\nDESCRIPTION: Provides a practical example of using the `pending` property from `useFormStatus` in a `Submit` component. The button's text changes to \"Submitting...\" and it becomes disabled when the parent form is actively submitting. This component must be rendered within a `form` element. Depends on `react-dom` and an external `submitForm` action.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Form State Management with Nested Object in React - JavaScript\nDESCRIPTION: A comprehensive React component example where form state is managed as an object, with handlers updating individual fields via object spread. Each input's value and onChange are bound to a specific property, and all updates replace the entire object to avoid mutation bugs. Dependencies: React, useState. Inputs: User changes in form fields. Outputs: Updated form state and rendered summary. Limitation: Requires a new object for every field change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function Form() {\\n  const [form, setForm] = useState({\\n    firstName: 'Barbara',\\n    lastName: 'Hepworth',\\n    email: 'bhepworth@sculpture.com',\\n  });\\n\\n  return (\\n    <>\\n      <label>\\n        First name:\\n        <input\\n          value={form.firstName}\\n          onChange={e => {\\n            setForm({\\n              ...form,\\n              firstName: e.target.value\\n            });\\n          }}\\n        />\\n      </label>\\n      <label>\\n        Last name:\\n        <input\\n          value={form.lastName}\\n          onChange={e => {\\n            setForm({\\n              ...form,\\n              lastName: e.target.value\\n            });\\n          }}\\n        />\\n      </label>\\n      <label>\\n        Email:\\n        <input\\n          value={form.email}\\n          onChange={e => {\\n            setForm({\\n              ...form,\\n              email: e.target.value\\n            });\\n          }}\\n        />\\n      </label>\\n      <p>\\n        {form.firstName}{' '}\\n        {form.lastName}{' '}\\n        ({form.email})\\n      </p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Dependencies in useEffect Hook\nDESCRIPTION: This example demonstrates how to debug dependencies in a useEffect hook by logging them to the console, which allows you to inspect why an effect might be re-running unexpectedly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  // ..\n}, [serverUrl, roomId]);\n\nconsole.log([serverUrl, roomId]);\n```\n\n----------------------------------------\n\nTITLE: Typing useState Hook in React with TypeScript\nDESCRIPTION: This snippet explains how to use TypeScript to type the useState hook in React, including inferred and explicit typings. It includes handling basic and union types, requiring a basic understanding of TypeScript and React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Infer the type as \"boolean\"\nconst [enabled, setEnabled] = useState(false);\n\n// Explicitly set the type to \"boolean\"\nconst [enabled, setEnabled] = useState<boolean>(false);\n\ntype Status = \"idle\" | \"loading\" | \"success\" | \"error\";\n\nconst [status, setStatus] = useState<Status>(\"idle\");\n\ntype RequestState =\n  | { status: 'idle' }\n  | { status: 'loading' }\n  | { status: 'success', data: any }\n  | { status: 'error', error: Error };\n\nconst [requestState, setRequestState] = useState<RequestState>({ status: 'idle' });\n```\n\n----------------------------------------\n\nTITLE: Generic useInterval Hook Implementation - React JavaScript\nDESCRIPTION: The useInterval Hook provides reusable setInterval logic in React functional components and Hooks. It takes two arguments: a callback to execute on each interval (onTick), and the interval delay in ms. It uses useEffect to create and clean up the interval, and will re-initialize if either argument changes. This implementation prevents memory leaks by clearing intervals on cleanup. Dependencies: useEffect from React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEffect } from 'react';\n\nexport function useInterval(onTick, delay) {\n  useEffect(() => {\n    const id = setInterval(onTick, delay);\n    return () => clearInterval(id);\n  }, [onTick, delay]);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React Tic-Tac-Toe with fully implemented time travel\nDESCRIPTION: Final implementation of the tic-tac-toe game with complete time travel functionality. Users can navigate through the game history and continue play from any previous state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Custom Hooks with useCallback\nDESCRIPTION: Demonstrates best practices for custom hook implementation by wrapping returned functions with useCallback to enable consumers to optimize their rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useRouter() {\n  const { dispatch } = useContext(RouterStateContext);\n\n  const navigate = useCallback((url) => {\n    dispatch({ type: 'navigate', url });\n  }, [dispatch]);\n\n  const goBack = useCallback(() => {\n    dispatch({ type: 'back' });\n  }, [dispatch]);\n\n  return {\n    navigate,\n    goBack,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: React Performance Optimization Example\nDESCRIPTION: Complete example showing how to use useCallback with memo to optimize rendering performance in a shipping form component. Includes artificial slowdown to demonstrate the benefits of memoization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCallback } from 'react';\nimport ShippingForm from './ShippingForm.js';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]);\n\n  return (\n    <div className={theme}>\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n\nfunction post(url, data) {\n  // Imagine this sends a request...\n  console.log('POST /' + url);\n  console.log(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Items in React State\nDESCRIPTION: Shows how to transform specific items in an array using map() to create a new array with modified values while maintaining immutability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet initialShapes = [\n  { id: 0, type: 'circle', x: 50, y: 100 },\n  { id: 1, type: 'square', x: 150, y: 100 },\n  { id: 2, type: 'circle', x: 250, y: 100 },\n];\n\nexport default function ShapeEditor() {\n  const [shapes, setShapes] = useState(initialShapes);\n\n  function handleClick() {\n    const nextShapes = shapes.map(shape => {\n      if (shape.type === 'square') {\n        return shape;\n      } else {\n        return {\n          ...shape,\n          y: shape.y + 50,\n        };\n      }\n    });\n    setShapes(nextShapes);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Move circles down!\n      </button>\n      {shapes.map(shape => (\n        <div\n          key={shape.id}\n          style={{\n          background: 'purple',\n          position: 'absolute',\n          left: shape.x,\n          top: shape.y,\n          borderRadius:\n            shape.type === 'circle'\n              ? '50%' : '',\n          width: 20,\n          height: 20,\n        }} />\n      ))}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ChatRoom Component with Proper Cleanup\nDESCRIPTION: A complete React component that connects to a chat service when mounted and properly disconnects when unmounted, preventing memory leaks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection() {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected.');\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Managing External System Connections with useEffect in React (JavaScript)\nDESCRIPTION: This code example illustrates how to utilize the useEffect Hook to synchronize a component with an external chat system based on props and state. It imports useState and useEffect from React, and a createConnection helper. The ChatRoom component maintains a serverUrl in state, then uses useEffect to connect to a chat room whenever serverUrl or roomId changes, ensuring cleanup with a returned disconnect function. Main parameters are serverUrl and roomId; the effect re-runs when either changes. This pattern is suitable for handling subscriptions, event listeners, or external resource lifecycles in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Context Provider and Consumer\nDESCRIPTION: A complete example showing context creation, providing a value, and consuming it in nested components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useData Hook for Fetching Data\nDESCRIPTION: A custom React Hook that encapsulates data fetching logic. This Hook accepts a URL, fetches data from that URL, and returns the retrieved data while handling cleanup to prevent state updates after unmounting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useData(url) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    if (url) {\n      let ignore = false;\n      fetch(url)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setData(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [url]);\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Input with useState\nDESCRIPTION: Example of a text input component that uses useState to store and update the input value. Demonstrates the controlled component pattern with onChange handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MyInput() {\n  const [text, setText] = useState('hello');\n\n  function handleChange(e) {\n    setText(e.target.value);\n  }\n\n  return (\n    <>\n      <input value={text} onChange={handleChange} />\n      <p>You typed: {text}</p>\n      <button onClick={() => setText('hello')}>\n        Reset\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Chat Room Connections with componentDidUpdate in React Class Components\nDESCRIPTION: This example demonstrates how to properly handle component updates in a ChatRoom component by comparing previous and current props/state to determine when to reset connections. The component initializes a connection on mount, cleans it up on unmount, and properly handles changes to roomId or serverUrl by destroying and recreating the connection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChatRoom extends Component {\n  state = {\n    serverUrl: 'https://localhost:1234'\n  };\n\n  componentDidMount() {\n    this.setupConnection();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.roomId !== prevProps.roomId ||\n      this.state.serverUrl !== prevState.serverUrl\n    ) {\n      this.destroyConnection();\n      this.setupConnection();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyConnection();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Components with JSX\nDESCRIPTION: Demonstrates how to create a Gallery component that renders multiple Profile components using JSX syntax. Shows the basic structure of React components and how they can be nested.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete useCallback Solution with memo\nDESCRIPTION: Complete example showing how useCallback and memo work together to optimize rendering performance by preventing unnecessary child component re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductPage({ productId, referrer, theme }) {\n  // Tell React to cache your function between re-renders...\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]); // ...so as long as these dependencies don't change...\n\n  return (\n    <div className={theme}>\n      {/* ...ShippingForm will receive the same props and can skip re-rendering */}\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Task Application with Context\nDESCRIPTION: Full implementation of a task app using React Context for state management. The component sets up a reducer and context providers to manage tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        <h1>Day off in Kyoto</h1>\n        <AddTask />\n        <TaskList />\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nconst initialTasks = [\n  { id: 0, text: 'Philosopher's Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n```\n\n----------------------------------------\n\nTITLE: Solving Dependency Problems with useCallback in React\nDESCRIPTION: Shows how to use useCallback to memoize a function, making it stable across renders unless its dependencies change, thus preventing unnecessary effect executions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  const createOptions = useCallback(() => {\n    return {\n      serverUrl: 'https://localhost:1234',\n      roomId: roomId\n    };\n  }, [roomId]); // ✅ Only changes when roomId changes\n\n  useEffect(() => {\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [createOptions]); // ✅ Only changes when createOptions changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Counter Button Component\nDESCRIPTION: Complete implementation of a button component that maintains click count state and updates it on click.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Clicked {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Tic-Tac-Toe Game with React Hooks\nDESCRIPTION: A complete implementation of a Tic-Tac-Toe game using React function components and Hooks. The example demonstrates state management, component composition, event handling, and conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: React Task Management Application Setup - JavaScript\nDESCRIPTION: This snippet defines the core structure and business logic of the Task management application in React. It leverages useReducer for centralized task state and defines handler functions to add, update, and remove tasks. The dependencies are React, and the functional components are organized to facilitate reuse, testability, and extensibility. Initial state, reducer logic, and nextId management are all demonstrated, making this ready for integration with Context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <>\n      <h1>Day off in Kyoto</h1>\n      <AddTask\n        onAddTask={handleAddTask}\n      />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  { id: 0, text: 'Philosopher’s Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with React useEffect\nDESCRIPTION: Pattern for fetching data using useEffect with proper cleanup to prevent race conditions. Includes error handling and loading states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n  const [person, setPerson] = useState('Alice');\n  const [bio, setBio] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    setBio(null);\n    fetchBio(person).then(result => {\n      if (!ignore) {\n        setBio(result);\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, [person]);\n\n  return (\n    <>\n      <select value={person} onChange={e => {\n        setPerson(e.target.value);\n      }}>\n        <option value=\"Alice\">Alice</option>\n        <option value=\"Bob\">Bob</option>\n        <option value=\"Taylor\">Taylor</option>\n      </select>\n      <hr />\n      <p><i>{bio ?? 'Loading...'}</i></p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pure React Reducer with Immutable State Update\nDESCRIPTION: Corrected version of the reducer that properly handles state updates by creating a new state object instead of mutating the existing one, following React's immutability principles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'added_todo': {\n      // ✅ Correct: replacing with new state\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          { id: nextId++, text: action.text }\n        ]\n      };\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management with Inline useReducer in React (JavaScript)\nDESCRIPTION: Provides a full example of a `TaskApp` component using the `useReducer` hook with the reducer function (`tasksReducer`) defined inline within the same file. It initializes state, defines handler functions (`handleAddTask`, `handleChangeTask`, `handleDeleteTask`) that dispatch actions, and renders `AddTask` and `TaskList` components. The reducer handles 'added', 'changed', and 'deleted' actions to manage the tasks state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Expressions in JSX\nDESCRIPTION: Demonstrates how to embed JavaScript expressions within JSX using curly braces, allowing dynamic content and styling in React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Online Status with useState and useEffect\nDESCRIPTION: Basic implementation of a custom hook useOnlineStatus using useState and useEffect to track online/offline status. Components demonstrate usage of the hook for displaying status and enabling/disabling a save button.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component with Props\nDESCRIPTION: Example of a simple React component structure with props. The code shows a Greeting component that accepts a name prop and renders it inside an h1 element, and an App component that renders the Greeting with 'world' as the name.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}</h1>;\n}\n\nexport default function App() {\n  return <Greeting name=\"world\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Shared State Between Components\nDESCRIPTION: Implementation showing how to lift state up and share it between multiple button components using props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MyApp() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <h1>Counters that update together</h1>\n      <MyButton count={count} onClick={handleClick} />\n      <MyButton count={count} onClick={handleClick} />\n    </div>\n  );\n}\n\nfunction MyButton({ count, onClick }) {\n  return (\n    <button onClick={onClick}>\n      Clicked {count} times\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  display: block;\n  margin-bottom: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Todo List Array State in React\nDESCRIPTION: A React todo application that demonstrates array state management with immutable updates. It showcases adding, editing, and deleting todos while maintaining proper state patterns.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport AddTodo from './AddTodo.js';\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\nconst initialTodos = [\n  { id: 0, title: 'Buy milk', done: true },\n  { id: 1, title: 'Eat tacos', done: false },\n  { id: 2, title: 'Brew tea', done: false },\n];\n\nexport default function TaskApp() {\n  const [todos, setTodos] = useState(initialTodos);\n\n  function handleAddTodo(title) {\n    setTodos([\n      ...todos,\n      {\n        id: nextId++,\n        title: title,\n        done: false\n      }\n    ]);\n  }\n\n  function handleChangeTodo(nextTodo) {\n    setTodos(todos.map(t => {\n      if (t.id === nextTodo.id) {\n        return nextTodo;\n      } else {\n        return t;\n      }\n    }));\n  }\n\n  function handleDeleteTodo(todoId) {\n    setTodos(\n      todos.filter(t => t.id !== todoId)\n    );\n  }\n\n  return (\n    <>\n      <AddTodo\n        onAddTodo={handleAddTodo}\n      />\n      <TaskList\n        todos={todos}\n        onChangeTodo={handleChangeTodo}\n        onDeleteTodo={handleDeleteTodo}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React App with Component Nesting\nDESCRIPTION: A complete example showing both a button component and an app component that uses it, demonstrating component composition in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  return (\n    <button>\n      I'm a button\n    </button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing a Resetting Interval in React useEffect\nDESCRIPTION: This challenge involves fixing an interval that gets destroyed and re-created every tick. The solution uses an updater function to modify the state based on its previous value, removing the need for the 'count' dependency in the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('✅ Creating an interval');\n    const id = setInterval(() => {\n      console.log('⏰ Interval tick');\n      setCount(c => c + 1);\n    }, 1000);\n    return () => {\n      console.log('❌ Clearing an interval');\n      clearInterval(id);\n    };\n  }, []);\n\n  return <h1>Counter: {count}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modal Dialog Component with useEffect in React\nDESCRIPTION: This example shows how to create a modal dialog component that synchronizes with the browser's native dialog element. It uses useEffect to call showModal() when the dialog should open and close() when it should close.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ModalDialog from './ModalDialog.js';\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(true)}>\n        Open dialog\n      </button>\n      <ModalDialog isOpen={show}>\n        Hello there!\n        <br />\n        <button onClick={() => {\n          setShow(false);\n        }}>Close</button>\n      </ModalDialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Tic-Tac-Toe Game in React\nDESCRIPTION: Full implementation of the tic-tac-toe game including Square, Board, and Game components with state management, move history, and winner calculation logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{/*TODO*/}</ol>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring ShippingForm Component Using a Custom useData Hook\nDESCRIPTION: A simplified version of the ShippingForm component that uses the custom useData Hook to fetch both cities and areas data, making the code more concise and the data flow more explicit.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ShippingForm({ country }) {\n  const cities = useData(`/api/cities?country=${country}`);\n  const [city, setCity] = useState(null);\n  const areas = useData(city ? `/api/areas?city=${city}` : null);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Creating a ModalDialog Component Using the Dialog Element\nDESCRIPTION: This component implements a modal dialog using the HTML dialog element. It uses useEffect to synchronize the isOpen prop with the browser's showModal() and close() methods, ensuring proper lifecycle management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useRef } from 'react';\n\nexport default function ModalDialog({ isOpen, children }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const dialog = ref.current;\n    dialog.showModal();\n    return () => {\n      dialog.close();\n    };\n  }, [isOpen]);\n\n  return <dialog ref={ref}>{children}</dialog>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing React Hook Placement Bug\nDESCRIPTION: Shows how to fix a form component that crashes due to improper Hook placement. The issue occurs because useState is called conditionally, violating React Hook rules. The solution demonstrates correct Hook placement at the component's top level.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [isSent, setIsSent] = useState(false);\n  if (isSent) {\n    return <h1>Thank you!</h1>;\n  } else {\n    // eslint-disable-next-line\n    const [message, setMessage] = useState('');\n    return (\n      <form onSubmit={e => {\n        e.preventDefault();\n        alert(`Sending: \"${message}\"`);\n        setIsSent(true);\n      }}>\n        <textarea\n          placeholder=\"Message\"\n          value={message}\n          onChange={e => setMessage(e.target.value)}\n        />\n        <br />\n        <button type=\"submit\">Send</button>\n      </form>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Static Searchable Product Table - React with JSX\nDESCRIPTION: This React (JSX) snippet statically implements all core components of the product table UI: FilterableProductTable (top-level), SearchBar (search UI), ProductTable (render/filter logic), ProductCategoryRow (category headers), and ProductRow (individual products). The PRODUCTS array provides data, which flows down as props. Dependencies: React. Key parameters include 'products', 'category', and 'product'. Outputs: static JSX UI. Limitations: No interactivity or state; data filtered and rendered as-is based on PRODUCTS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nfunction ProductTable({ products }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction SearchBar() {\n  return (\n    <form>\n      <input type=\"text\" placeholder=\"Search...\" />\n      <label>\n        <input type=\"checkbox\" />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n\nfunction FilterableProductTable({ products }) {\n  return (\n    <div>\n      <SearchBar />\n      <ProductTable products={products} />\n    </div>\n  );\n}\n\nconst PRODUCTS = [\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n];\n\nexport default function App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State with useState in React\nDESCRIPTION: This snippet demonstrates how to initialize state using the useState hook in a React component. It creates a todo list with initial items and allows adding new items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nfunction createInitialTodos() {\n  const initialTodos = [];\n  for (let i = 0; i < 50; i++) {\n    initialTodos.push({\n      id: i,\n      text: 'Item ' + (i + 1)\n    });\n  }\n  return initialTodos;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(createInitialTodos());\n  const [text, setText] = useState('');\n\n  return (\n    <>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        setTodos([{\n          id: todos.length,\n          text: text\n        }, ...todos]);\n      }}>Add</button>\n      <ul>\n        {todos.map(item => (\n          <li key={item.id}>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Actions in React Components\nDESCRIPTION: This code demonstrates how to use the new Actions API in React to handle form submissions. The form uses the 'action' prop to specify a search function that will be called when the form is submitted.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<form action={search}>\n  <input name=\"query\" />\n  <button type=\"submit\">Search</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in React\nDESCRIPTION: Demonstrates how to define and attach an event handler function to respond to user clicks on a button element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Optimized React Todo App with useMemo and memo\nDESCRIPTION: A complete implementation of a React Todo application that uses useMemo and memo to optimize rendering performance. It includes artificially slowed components to demonstrate the performance benefits when switching tabs or toggling theme.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { createTodos } from './utils.js';\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n  const [tab, setTab] = useState('all');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <button onClick={() => setTab('all')}>\n        All\n      </button>\n      <button onClick={() => setTab('active')}>\n        Active\n      </button>\n      <button onClick={() => setTab('completed')}>\n        Completed\n      </button>\n      <br />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <TodoList\n        todos={todos}\n        tab={tab}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport List from './List.js';\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, tab),\n    [todos, tab]\n  );\n  return (\n    <div className={theme}>\n      <p><b>Note: <code>List</code> is artificially slowed down!</b></p>\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n  console.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\n  let startTime = performance.now();\n  while (performance.now() - startTime < 500) {\n    // Do nothing for 500 ms to emulate extremely slow code\n  }\n\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          {item.completed ?\n            <s>{item.text}</s> :\n            item.text\n          }\n        </li>\n      ))}\n    </ul>\n  );\n});\n\nexport default List;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createTodos() {\n  const todos = [];\n  for (let i = 0; i < 50; i++) {\n    todos.push({\n      id: i,\n      text: \"Todo \" + (i + 1),\n      completed: Math.random() > 0.5\n    });\n  }\n  return todos;\n}\n\nexport function filterTodos(todos, tab) {\n  return todos.filter(todo => {\n    if (tab === 'all') {\n      return true;\n    } else if (tab === 'active') {\n      return !todo.completed;\n    } else if (tab === 'completed') {\n      return todo.completed;\n    }\n  });\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.dark {\n  background-color: black;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Concise Nested State Updates in React with useImmer (JavaScript)\nDESCRIPTION: This React functional component shows how to use the useImmer hook from the 'use-immer' library to concisely update properties at any nested depth, using mutable syntax within updater functions. Each handler mutates the draft object, and Immer handles producing the new immutable state. Inputs: input change events; outputs: updated person object. Prerequisites: 'use-immer' installed, React environment. Useful for reducing boilerplate when working with deeply nested state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { useImmer } from 'use-immer';\n\nexport default function Form() {\n  const [person, updatePerson] = useImmer({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    updatePerson(draft => {\n      draft.name = e.target.value;\n    });\n  }\n\n  function handleTitleChange(e) {\n    updatePerson(draft => {\n      draft.artwork.title = e.target.value;\n    });\n  }\n\n  function handleCityChange(e) {\n    updatePerson(draft => {\n      draft.artwork.city = e.target.value;\n    });\n  }\n\n  function handleImageChange(e) {\n    updatePerson(draft => {\n      draft.artwork.image = e.target.value;\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img \n        src={person.artwork.image} \n        alt={person.artwork.title}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Filterable List UI with React and JavaScript\nDESCRIPTION: Implements a filterable list UI using React functional components, with local component state for query and a statically rendered list of foods. The SearchBar maintains its own query state and handles input changes using useState, while List renders all food items without filter logic. Dependencies required are React and the foods and filterItems modules. Props and state are managed only locally in each component, and the input field is controlled but not yet shared.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { foods, filterItems } from './data.js';\n\nexport default function FilterableList() {\n  return (\n    <>\n      <SearchBar />\n      <hr />\n      <List items={foods} />\n    </>\n  );\n}\n\nfunction SearchBar() {\n  const [query, setQuery] = useState('');\n\n  function handleChange(e) {\n    setQuery(e.target.value);\n  }\n\n  return (\n    <label>\n      Search:{' '}\n      <input\n        value={query}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}\n\nfunction List({ items }) {\n  return (\n    <table>\n      <tbody>\n        {items.map(food => (\n          <tr key={food.id}>\n            <td>{food.name}</td>\n            <td>{food.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gallery Component with State Management - JavaScript\nDESCRIPTION: A complete React component demonstrating the initialization and update of a state variable using the useState Hook. If sculptureList is provided, it manages dynamic display logic for a gallery of sculptures, updating the view on each button click.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n\n  function handleClick() {\n    setIndex(index + 1);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n      <p>\n        {sculpture.description}\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for Data Fetching in React\nDESCRIPTION: This snippet demonstrates how to create a custom hook 'useData' for data fetching, which encapsulates the fetching logic and handles race conditions. It also shows how to use this custom hook in a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SearchResults({ query }) {\n  const [page, setPage] = useState(1);\n  const params = new URLSearchParams({ query, page });\n  const results = useData(`/api/search?${params}`);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}\n\nfunction useData(url) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetch(url)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setData(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [url]);\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useContext Hook in React\nDESCRIPTION: The simplest form of the useContext Hook, showing how to read a context value in a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = useContext(SomeContext)\n```\n\n----------------------------------------\n\nTITLE: Updating Quantity with React Actions and Transitions\nDESCRIPTION: This snippet demonstrates how to use React Actions and Transitions to update a quantity value in a checkout scenario. It showcases the use of useTransition and startTransition to handle asynchronous updates efficiently.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useTransition } from \"react\";\nimport { updateQuantity } from \"./api\";\nimport Item from \"./Item\";\nimport Total from \"./Total\";\n\nexport default function App({}) {\n  const [quantity, setQuantity] = useState(1);\n  const [isPending, startTransition] = useTransition();\n\n  const updateQuantityAction = async newQuantity => {\n    // To access the pending state of a transition,\n    // call startTransition again.\n    startTransition(async () => {\n      const savedQuantity = await updateQuantity(newQuantity);\n      startTransition(() => {\n        setQuantity(savedQuantity);\n      });\n    });\n  };\n\n  return (\n    <div>\n      <h1>Checkout</h1>\n      <Item action={updateQuantityAction}/>\n      <hr />\n      <Total quantity={quantity} isPending={isPending} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring refs in a React Component\nDESCRIPTION: Example of importing and using useRef at the top level of a component to declare references for interval tracking and DOM elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n  const intervalRef = useRef(0);\n  const inputRef = useRef(null);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Removing Items from a Shopping Cart in React\nDESCRIPTION: This snippet shows how to remove items from a shopping cart in React. It includes functions to increase and decrease the count of products, and remove products when their count reaches zero.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nconst initialProducts = [{\n  id: 0,\n  name: 'Baklava',\n  count: 1,\n}, {\n  id: 1,\n  name: 'Cheese',\n  count: 5,\n}, {\n  id: 2,\n  name: 'Spaghetti',\n  count: 2,\n}];\n\nexport default function ShoppingCart() {\n  const [\n    products,\n    setProducts\n  ] = useState(initialProducts)\n\n  function handleIncreaseClick(productId) {\n    setProducts(products.map(product => {\n      if (product.id === productId) {\n        return {\n          ...product,\n          count: product.count + 1\n        };\n      } else {\n        return product;\n      }\n    }))\n  }\n\n  function handleDecreaseClick(productId) {\n    let nextProducts = products.map(product => {\n      if (product.id === productId) {\n        return {\n          ...product,\n          count: product.count - 1\n        };\n      } else {\n        return product;\n      }\n    });\n    nextProducts = nextProducts.filter(p =>\n      p.count > 0\n    );\n    setProducts(nextProducts)\n  }\n\n  return (\n    <ul>\n      {products.map(product => (\n        <li key={product.id}>\n          {product.name}\n          {' '}\n          (<b>{product.count}</b>)\n          <button onClick={() => {\n            handleIncreaseClick(product.id);\n          }}>\n            +\n          </button>\n          <button onClick={() => {\n            handleDecreaseClick(product.id);\n          }}>\n            –\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component with Props in React\nDESCRIPTION: Demonstrates a simple Avatar component that receives and uses props for image attributes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/1bX5QH6.jpg\"\n      alt=\"Lin Lanying\"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Final useCounter Hook Using useInterval for Timer Logic - React JavaScript\nDESCRIPTION: This custom useCounter Hook leverages the external useInterval Hook for interval tick management. It creates a count state variable and passes an increment callback (setCount(c => c + 1)) together with the delay to useInterval, which reruns the timer effect as needed. Assumes the useInterval dependency is defined and imported. Input is delay in ms, output is the current count. No resource leaks: useInterval is responsible for proper timer cleanup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n  const [count, setCount] = useState(0);\n  useInterval(() => {\n    setCount(c => c + 1);\n  }, delay);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Filtering with useMemo in React\nDESCRIPTION: This snippet demonstrates how to use useMemo to optimize a filtering operation in a React component. It memoizes the result of filterTodos based on the todos and tab dependencies, preventing unnecessary recalculations when other props change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useMemo } from 'react';\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, tab),\n    [todos, tab]\n  );\n  return (\n    <div className={theme}>\n      <p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ?\n              <s>{todo.text}</s> :\n              todo.text\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Valid JSX in React Bio Component\nDESCRIPTION: Example showing invalid HTML syntax in a React component and how it should be converted to proper JSX. Key changes include using className instead of class, self-closing tags for br, and fixing nested tag order.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React List Rendering with Keys\nDESCRIPTION: Complete example of rendering a list of people with proper key implementation using person.id as the unique identifier\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}</b>\n          {' ' + person.profession + ' '}\n          known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return <ul>{listItems}</ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useOnlineStatus Hook in React\nDESCRIPTION: A custom Hook that encapsulates the network status tracking logic. It uses useState to maintain the online state and useEffect to subscribe to browser events, then returns the current online status for components to consume.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}\n```\n\n----------------------------------------\n\nTITLE: Working with JavaScript Objects in JSX Components\nDESCRIPTION: Advanced example of using JavaScript objects to organize data and styling in a React component. Shows how to reference object properties within JSX using dot notation inside curly braces.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { padding: 0; margin: 0 }\nbody > div > div { padding: 20px; }\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing FilterableProductTable with State and Child Components\nDESCRIPTION: This comprehensive snippet shows the complete implementation of the FilterableProductTable component, including state initialization and rendering of child components with props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly} />\n      <ProductTable \n        products={products}\n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Events with onFocus in React (JSX)\nDESCRIPTION: React prop for handling the event when an element receives focus. Unlike the native browser `focus` event, the React `onFocus` event bubbles. It expects a `FocusEvent` handler function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nonFocus\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting ImageSizeContext in React\nDESCRIPTION: This snippet shows how to create and export a context for image size using React's createContext function. The default value is set to 500.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const ImageSizeContext = createContext(500);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Dispatch Function from Context\nDESCRIPTION: Shows how to access the dispatch function from context and use it to update the task list by dispatching actions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AddTask() {\n  const [text, setText] = useState('');\n  const dispatch = useContext(TasksDispatchContext);\n  // ...\n  return (\n    // ...\n    <button onClick={() => {\n      setText('');\n      dispatch({\n        type: 'added',\n        id: nextId++,\n        text: text,\n      });\n    }}>Add</button>\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Creating Server Function in Server Component\nDESCRIPTION: Demonstrates how to define a Server Function within a Server Component using the 'use server' directive and pass it to a Client Component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Server Component\nimport Button from './Button';\n\nfunction EmptyNote () {\n  async function createNoteAction() {\n    // Server Function\n    'use server';\n    \n    await db.notes.create();\n  }\n\n  return <Button onClick={createNoteAction}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Errors using ErrorBoundaries in React\nDESCRIPTION: This snippet handles form submission errors by wrapping a form with Error Boundaries using the `react-error-boundary` package. When errors occur during submission, a fallback message is displayed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\n\\nexport default function Search() {\\n  function search() {\\n    throw new Error(\\\"search error\\\");\\n  }\\n  return (\\n    <ErrorBoundary\\n      fallback={<p>There was an error while submitting the form</p>}\\n    >\\n      <form action={search}>\\n        <input name=\\\"query\\\" />\\n        <button type=\\\"submit\\\">Search</button>\\n      </form>\\n    </ErrorBoundary>\\n  );\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-dom\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\n  },\\n  \\\"main\\\": \\\"/index.js\\\",\\n  \\\"devDependencies\\\": {}\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Server-side Rendering with useEffect\nDESCRIPTION: A pattern for displaying different content on the server versus the client using useState and useEffect. This approach allows hydration to work correctly while switching to client-specific rendering after mount.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyComponent() {\n  const [didMount, setDidMount] = useState(false);\n\n  useEffect(() => {\n    setDidMount(true);\n  }, []);\n\n  if (didMount) {\n    // ... return client-only JSX ...\n  }  else {\n    // ... return initial JSX ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useImperativeHandle to Expose Custom Methods in React\nDESCRIPTION: Shows how to use the `useImperativeHandle` hook within a `forwardRef` component. It takes the forwarded `ref` and returns an object with custom methods (`focus`, `scrollIntoView`) that operate on the internal `inputRef`. This effectively hides the underlying DOM node and exposes a controlled API.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input {...props} ref={inputRef} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with createRef (JSX)\nDESCRIPTION: A complete example of a Form class component using createRef to manage a reference to an input element. It demonstrates how to create the ref, assign it to an input, and use it to focus the input programmatically.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createRef.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization with useMemo\nDESCRIPTION: Example demonstrating how to optimize performance by skipping expensive calculations using useMemo\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab, theme }) {\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Room Connections\nDESCRIPTION: This JavaScript snippet illustrates handling real-time chat room connections. It uses `useState` for server URL management and `useEffect` to establish connections based on state changes. Dependencies include `createConnection` for managing the connection lifecycle and `showNotification` for displaying messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Contexts in React Components\nDESCRIPTION: Shows how to import contexts from a separate file and use them in different components, both for reading context values and providing them to child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.js\nimport { ThemeContext } from './Contexts.js';\n\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// App.js\nimport { ThemeContext, AuthContext } from './Contexts.js';\n\nfunction App() {\n  // ...\n  return (\n    <ThemeContext.Provider value={theme}>\n      <AuthContext.Provider value={currentUser}>\n        <Page />\n      </AuthContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Component in React\nDESCRIPTION: This snippet shows the ChatRoom component implementation. It uses useEffect to manage the chat connection and useEffectEvent to handle messages without causing unnecessary reconnections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function ChatRoom({ roomId, createConnection, onMessage }) {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.on('message', (msg) => onMessage(msg));\n    connection.connect();\n    return () => connection.disconnect();\n  }, [createConnection, onMessage]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple React Contexts Implementation\nDESCRIPTION: Shows how to use multiple independent contexts (ThemeContext and CurrentUserContext) in a single application. Implements theme switching and user authentication functionality using separate context providers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <ThemeContext.Provider value={theme}>\n      <CurrentUserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser\n        }}\n      >\n        <WelcomePanel />\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={theme === 'dark'}\n            onChange={(e) => {\n              setTheme(e.target.checked ? 'dark' : 'light')\n            }}\n          />\n          Use dark mode\n        </label>\n      </CurrentUserContext.Provider>\n    </ThemeContext.Provider>\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events to Update State - JavaScript\nDESCRIPTION: Illustrates a function that updates a state variable using its setter function. The handleClick function, when triggered by a user action, increments the current index, causing the component to re-render with updated state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick() {\n  setIndex(index + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Task Management App with Reducer and Context\nDESCRIPTION: Implements a task management application using React's useReducer and Context APIs together. Shows state management pattern for complex applications with shared state and actions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n  return (\n    <TasksProvider>\n      <h1>Day off in Kyoto</h1>\n      <AddTask />\n      <TaskList />\n    </TasksProvider>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider\n        value={dispatch}\n      >\n        {children}\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n\nexport function useTasks() {\n  return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n  return useContext(TasksDispatchContext);\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nconst initialTasks = [\n  { id: 0, text: 'Philosopher's Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useContext } from 'react';\nimport { useTasksDispatch } from './TasksContext.js';\n\nexport default function AddTask({ onAddTask }) {\n  const [text, setText] = useState('');\n  const dispatch = useTasksDispatch();\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        dispatch({\n          type: 'added',\n          id: nextId++,\n          text: text,\n        });\n      }}>Add</button>\n    </>\n  );\n}\n\nlet nextId = 3;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useContext } from 'react';\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n  const tasks = useTasks();\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useTasksDispatch();\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            dispatch({\n              type: 'changed',\n              task: {\n                ...task,\n                text: e.target.value\n              }\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          dispatch({\n            type: 'changed',\n            task: {\n              ...task,\n              done: e.target.checked\n            }\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => {\n        dispatch({\n          type: 'deleted',\n          id: task.id\n        });\n      }}>\n        Delete\n      </button>\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Correct Immutable State Update in Reducer\nDESCRIPTION: The correct way to update state in a reducer by creating and returning a new object rather than mutating the existing state, ensuring immutability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'incremented_age': {\n      // ✅ Instead, return a new object\n      return {\n        ...state,\n        age: state.age + 1\n      };\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing the useChatRoom Custom Hook\nDESCRIPTION: This custom Hook encapsulates the Effect that manages chat room connections. It accepts serverUrl and roomId parameters, establishes a connection when dependencies change, and handles cleanup on unmount or dependency changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport function useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, serverUrl]);\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Filter Data and Logic for Lists in JavaScript\nDESCRIPTION: Supplies a data module exporting a helper function and an array of food objects for list display and search. The filterItems function filters an array of item objects by matching the search query with any word in the name property, case-insensitive. The foods array comprises objects with id, name, and description fields and is used as input for list rendering and filtering. No external dependencies are required; output type is a filtered array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function filterItems(items, query) {\n  query = query.toLowerCase();\n  return items.filter(item =>\n    item.name.split(' ').some(word =>\n      word.toLowerCase().startsWith(query)\n    )\n  );\n}\n\nexport const foods = [{\n  id: 0,\n  name: 'Sushi',\n  description: 'Sushi is a traditional Japanese dish of prepared vinegared rice'\n}, {\n  id: 1,\n  name: 'Dal',\n  description: 'The most common way of preparing dal is in the form of a soup to which onions, tomatoes and various spices may be added'\n}, {\n  id: 2,\n  name: 'Pierogi',\n  description: 'Pierogi are filled dumplings made by wrapping unleavened dough around a savoury or sweet filling and cooking in boiling water'\n}, {\n  id: 3,\n  name: 'Shish kebab',\n  description: 'Shish kebab is a popular meal of skewered and grilled cubes of meat.'\n}, {\n  id: 4,\n  name: 'Dim sum',\n  description: 'Dim sum is a large range of small dishes that Cantonese people traditionally enjoy in restaurants for breakfast and lunch'\n}];\n```\n\n----------------------------------------\n\nTITLE: Complete TodoList Implementation with Initializer Function\nDESCRIPTION: A full implementation of a TodoList component using useReducer with an initializer function. This pattern creates initial state only once during initialization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\n\nfunction createInitialState(username) {\n  const initialTodos = [];\n  for (let i = 0; i < 50; i++) {\n    initialTodos.push({\n      id: i,\n      text: username + \"'s task #\" + (i + 1)\n    });\n  }\n  return {\n    draft: '',\n    todos: initialTodos,\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'changed_draft': {\n      return {\n        draft: action.nextDraft,\n        todos: state.todos,\n      };\n    };\n    case 'added_todo': {\n      return {\n        draft: '',\n        todos: [{\n          id: state.todos.length,\n          text: state.draft\n        }, ...state.todos]\n      }\n    }\n  }\n  throw Error('Unknown action: ' + action.type);\n}\n\nexport default function TodoList({ username }) {\n  const [state, dispatch] = useReducer(\n    reducer,\n    username,\n    createInitialState\n  );\n  return (\n    <>\n      <input\n        value={state.draft}\n        onChange={e => {\n          dispatch({\n            type: 'changed_draft',\n            nextDraft: e.target.value\n          })\n        }}\n      />\n      <button onClick={() => {\n        dispatch({ type: 'added_todo' });\n      }}>Add</button>\n      <ul>\n        {state.todos.map(item => (\n          <li key={item.id}>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Context with State for Theme Switching\nDESCRIPTION: A complete example demonstrating how to create a theme switcher using context and state, with a checkbox to toggle between light and dark themes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Form />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={theme === 'dark'}\n          onChange={(e) => {\n            setTheme(e.target.checked ? 'dark' : 'light')\n          }}\n        />\n        Use dark mode\n      </label>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <Button>Sign up</Button>\n      <Button>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n```\n\n----------------------------------------\n\nTITLE: Full Suspense-enabled Router Implementation\nDESCRIPTION: This code snippet provides a complete implementation of a Suspense-enabled router using React. It includes components for different pages, layout, and navigation logic using useTransition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState, useTransition } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>\n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n  const [isPending, startTransition] = useTransition();\n\n  function navigate(url) {\n    startTransition(() => {\n      setPage(url);\n    });\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout isPending={isPending}>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Re-renders with useCallback and useMemo in React Context\nDESCRIPTION: This snippet shows how to optimize re-renders when passing objects and functions via context. It uses useCallback to memoize the login function and useMemo to memoize the context value object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCallback, useMemo } from 'react';\n\nfunction MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const login = useCallback((response) => {\n    storeCredentials(response.credentials);\n    setCurrentUser(response.user);\n  }, []);\n\n  const contextValue = useMemo(() => ({\n    currentUser,\n    login\n  }), [currentUser, login]);\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      <Page />\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCallback in a React Component\nDESCRIPTION: Example of using useCallback to cache a form submission handler function in a product page component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCallback } from 'react';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]);\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Items to JSX Elements\nDESCRIPTION: Using JavaScript's map() method to transform an array of strings into an array of JSX list item elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst listItems = people.map(person => <li>{person}</li>);\n```\n\n----------------------------------------\n\nTITLE: Basic useReducer Hook Syntax\nDESCRIPTION: The basic syntax for using the useReducer Hook, showing the function signature with the reducer, initial state argument, and optional init function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with React StrictMode (JavaScript)\nDESCRIPTION: This snippet demonstrates the simplest usage of the React <StrictMode> component by wrapping an <App /> component within it. It is designed to be used during development for identifying common bugs early by enabling extra checks and warnings in the <App /> subtree. No dependencies are required beyond React, and no additional input parameters are used.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<StrictMode>\\n  <App />\\n</StrictMode>\n```\n\n----------------------------------------\n\nTITLE: Properly Specifying Reactive Dependencies in useEffect\nDESCRIPTION: This example demonstrates how to correctly declare dependencies in a useEffect hook. When using reactive values like props or state in the effect body, they must be included in the dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ChatRoom({ roomId }) { // This is a reactive value\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // This is a reactive value too\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // This Effect reads these reactive values\n    connection.connect();\n    return () => connection.disconnect();\n  }, [serverUrl, roomId]); // ✅ So you must specify them as dependencies of your Effect\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Gallery Component with Multiple State Variables in React\nDESCRIPTION: This code snippet demonstrates a React component called Gallery that uses two state variables (index and showMore) to display and navigate through a list of sculptures. It showcases how to handle button clicks, conditionally render content, and update state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Clock Component Using Destructuring\nDESCRIPTION: Alternative implementation using prop destructuring for cleaner code while maintaining proper prop updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Clock({ color, time }) {\n  return (\n    <h1 style={{ color: color }}>\n      {time}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Task State and Dispatch via Context Providers in React - JavaScript\nDESCRIPTION: This snippet shows how to wrap the app component tree with TasksContext and TasksDispatchContext providers, supplying the current tasks state and dispatch function to the React context. It demonstrates how to import and use both contexts, ensuring descendant components can access state or dispatch via useContext. Requirements: React and the exported contexts. All child components below these Providers can now consume either the state or updater without manual prop passing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n  // ...\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        ...\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Tooltip Component with Dynamic Positioning via useLayoutEffect\nDESCRIPTION: This `Tooltip` component (`Tooltip.js`) uses `useLayoutEffect` to measure its own height after rendering but before browser paint. It receives the target element's rectangle (`targetRect`) as a prop. Based on the measured height and `targetRect`, it calculates the optimal `tooltipX` and `tooltipY` coordinates, attempting to position itself above the target, falling back to below if space is insufficient. It uses `createPortal` to render the tooltip directly into the `document.body`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useRef, useLayoutEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n    console.log('Measured tooltip height: ' + height);\n  }, []);\n\n  let tooltipX = 0;\n  let tooltipY = 0;\n  if (targetRect !== null) {\n    tooltipX = targetRect.left;\n    tooltipY = targetRect.top - tooltipHeight;\n    if (tooltipY < 0) {\n      // It doesn't fit above, so place below.\n      tooltipY = targetRect.bottom;\n    }\n  }\n\n  return createPortal(\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n      {children}\n    </TooltipContainer>,\n    document.body\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Form States Using a Component Catalog\nDESCRIPTION: A React pattern for displaying a component in all its possible visual states simultaneously, creating a living styleguide or storybook. This example maps through an array of statuses and renders the Form component with each status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from './Form.js';\n\nlet statuses = [\n  'empty',\n  'typing',\n  'submitting',\n  'success',\n  'error',\n];\n\nexport default function App() {\n  return (\n    <>\n      {statuses.map(status => (\n        <section key={status}>\n          <h4>Form ({status}):</h4>\n          <Form status={status} />\n        </section>\n      ))}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler Beta with npm\nDESCRIPTION: Command to install the React Compiler Beta and its ESLint plugin using npm. This installs the build-time optimization tool and linting rules for React applications.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta\n```\n\n----------------------------------------\n\nTITLE: Converting Stateful Class Component to Function Component with Hooks\nDESCRIPTION: Example of migrating a Counter class component with state to a function component using useState hook, including event handler conversions and state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [name, setName] = useState('Taylor');\n  const [age, setAge] = useState(42);\n\n  function handleNameChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleAgeChange() {\n    setAge(age + 1);\n  }\n\n  return (\n    <>\n      <input\n        value={name}\n        onChange={handleNameChange}\n      />\n      <button onClick={handleAgeChange}>\n        Increment age\n      </button>\n      <p>Hello, {name}. You are {age}.</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form State Management in React\nDESCRIPTION: A quiz form component demonstrating state-driven UI updates with error handling and async form submission. Uses useState hook to manage form status, answer input, and error states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [answer, setAnswer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('typing');\n\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('submitting');\n    try {\n      await submitForm(answer);\n      setStatus('success');\n    } catch (err) {\n      setStatus('typing');\n      setError(err);\n    }\n  }\n\n  function handleTextareaChange(e) {\n    setAnswer(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={answer}\n          onChange={handleTextareaChange}\n          disabled={status === 'submitting'}\n        />\n        <br />\n        <button disabled={\n          answer.length === 0 ||\n          status === 'submitting'\n        }>\n          Submit\n        </button>\n        {error !== null &&\n          <p className=\"Error\">\n            {error.message}\n          </p>\n        }\n      </form>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stopwatch with Ref and State in React\nDESCRIPTION: This example shows a more complete stopwatch implementation using both ref (for interval ID) and state (for timing).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n  const intervalRef = useRef(null);\n\n  function handleStart() {\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setNow(Date.now());\n    }, 10);\n  }\n\n  function handleStop() {\n    clearInterval(intervalRef.current);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n      <button onClick={handleStop}>\n        Stop\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React Checkout Example with Transition Ordering Issues\nDESCRIPTION: A complete example demonstrating how state updates in transitions can get out of order when using async functions, particularly with network requests that complete in a different order than they were initiated.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useTransition } from \"react\";\nimport { updateQuantity } from \"./api\";\nimport Item from \"./Item\";\nimport Total from \"./Total\";\n\nexport default function App({}) {\n  const [quantity, setQuantity] = useState(1);\n  const [isPending, startTransition] = useTransition();\n  // Store the actual quantity in separate state to show the mismatch.\n  const [clientQuantity, setClientQuantity] = useState(1);\n  \n  const updateQuantityAction = newQuantity => {\n    setClientQuantity(newQuantity);\n\n    // Access the pending state of the transition,\n    // by wrapping in startTransition again.\n    startTransition(async () => {\n      const savedQuantity = await updateQuantity(newQuantity);\n      startTransition(() => {\n        setQuantity(savedQuantity);\n      });\n    });\n  };\n\n  return (\n    <div>\n      <h1>Checkout</h1>\n      <Item action={updateQuantityAction}/>\n      <hr />\n      <Total clientQuantity={clientQuantity} savedQuantity={quantity} isPending={isPending} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {startTransition} from 'react';\n\nexport default function Item({action}) {\n  function handleChange(e) {\n    // Update the quantity in an Action.\n    startTransition(() => {\n      action(e.target.value);\n    });\n  }  \n  return (\n    <div className=\"item\">\n      <span>Eras Tour Tickets</span>\n      <label htmlFor=\"name\">Quantity: </label>\n      <input\n        type=\"number\"\n        onChange={handleChange}\n        defaultValue={1}\n        min={1}\n      />\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst intl = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nexport default function Total({ clientQuantity, savedQuantity, isPending }) {\n  return (\n    <div className=\"total\">\n      <span>Total:</span>\n      <div>\n        <div>\n          {isPending\n            ? \"🌀 Updating...\"\n            : `${intl.format(savedQuantity * 9999)}`}\n        </div>\n        <div className=\"error\">\n          {!isPending &&\n            clientQuantity !== savedQuantity &&\n            `Wrong total, expected: ${intl.format(clientQuantity * 9999)}`}\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet firstRequest = true;\nexport async function updateQuantity(newName) {\n  return new Promise((resolve, reject) => {\n    if (firstRequest === true) {\n      firstRequest = false;\n      setTimeout(() => {\n        firstRequest = true;\n        resolve(newName);\n        // Simulate every other request being slower\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        resolve(newName);\n      }, 50);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Re-rendering for Slow UI Components in React\nDESCRIPTION: This example shows how to use useDeferredValue as a performance optimization for slow UI components. It defers the update of a slow list component to prioritize input responsiveness.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useDeferredValue } from 'react';\nimport SlowList from './SlowList.js';\n\nexport default function App() {\n  const [text, setText] = useState('');\n  const deferredText = useDeferredValue(text);\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <SlowList text={deferredText} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Idempotent Time Display with useEffect in React\nDESCRIPTION: This example demonstrates how to create an idempotent time display component using useState and useEffect hooks, properly synchronizing the date outside of the render phase.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nfunction useTime() {\n  // 1. Keep track of the current date's state. `useState` receives an initializer function as its\n  //    initial state. It only runs once when the hook is called, so only the current date at the\n  //    time the hook is called is set first.\n  const [time, setTime] = useState(() => new Date());\n\n  useEffect(() => {\n    // 2. Update the current date every second using `setInterval`.\n    const id = setInterval(() => {\n      setTime(new Date()); // ✅ Good: non-idempotent code no longer runs in render\n    }, 1000);\n    // 3. Return a cleanup function so we don't leak the `setInterval` timer.\n    return () => clearInterval(id);\n  }, []);\n\n  return time;\n}\n\nexport default function Clock() {\n  const time = useTime();\n  return <span>{time.toLocaleString()}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management with useReducer in React\nDESCRIPTION: Main application component that implements task management using useReducer hook. Includes functionality for adding, updating, and deleting tasks with a reducer function for state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <>\n      <h1>Day off in Kyoto</h1>\n      <AddTask\n        onAddTask={handleAddTask}\n      />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Chat Room Hook with useEffect\nDESCRIPTION: This example demonstrates how to extract useEffect logic into a custom Hook called useChatRoom. The Hook encapsulates connection management logic, making the component code more declarative and reusable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { useChatRoom } from './useChatRoom.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Component to a Root\nDESCRIPTION: This code snippet shows how to render a React component using the render method on a React root. It displays a piece of JSX into the React root's DOM node, effectively managing the DOM updates as needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Resetting Component State with Keys in React\nDESCRIPTION: This snippet shows how to use the key prop to make React treat components as distinct entities even when rendered in the same position. Using different keys forces React to destroy and recreate component state when switching between them.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA ? (\n        <Counter key=\"Taylor\" person=\"Taylor\" />\n      ) : (\n        <Counter key=\"Sarah\" person=\"Sarah\" />\n      )}\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  font-size: 18px;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Initial City Data in React Component using useEffect\nDESCRIPTION: This React functional component `ShippingForm` uses the `useEffect` hook to fetch a list of cities based on the `country` prop when the component mounts or when the `country` prop changes. It utilizes the `useState` hook to manage the `cities` and `city` state. A cleanup function with an `ignore` flag is included to prevent state updates after the component unmounts or before the fetch completes if the dependency changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfunction ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  const [city, setCity] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]); // ✅ All dependencies declared\n\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hook with useSyncExternalStore in React\nDESCRIPTION: Demonstrates how to create a custom Hook, useOnlineStatus, using useSyncExternalStore for tracking the online status of the network in React. This pattern allows different components to access the same external store without duplicating logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n  return isOnline;\n}\n\nfunction getSnapshot() {\n  // ...\n}\n\nfunction subscribe(callback) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React Counter with Updater Function\nDESCRIPTION: Shows how to use updater functions to correctly apply multiple state updates in sequence. Each update has access to the latest pending state value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Suspense in React\nDESCRIPTION: Complete implementation of lazy loading a component with Suspense to show a loading fallback while the component is being loaded.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <h2>Preview</h2>\n  <MarkdownPreview />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Message Reducer Implementation\nDESCRIPTION: Reducer function that handles state updates for message drafts, contact selection, and message sending operations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialState = {\n  selectedId: 0,\n  message: 'Hello',\n};\n\nexport function messengerReducer(state, action) {\n  switch (action.type) {\n    case 'changed_selection': {\n      return {\n        ...state,\n        selectedId: action.contactId,\n        message: '',\n      };\n    }\n    case 'edited_message': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    case 'sent_message': {\n      return {\n        ...state,\n        message: '',\n      };\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Fragment Example\nDESCRIPTION: Example of using React Fragment to wrap multiple JSX elements without adding extra DOM nodes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img \n    src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n    alt=\"Hedy Lamarr\" \n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</>\n```\n\n----------------------------------------\n\nTITLE: Solution: Preserving Form State with Unified Rendering (React)\nDESCRIPTION: This solution fixes the disappearing text issue by ensuring the Form component always renders at the same position in the component tree, regardless of whether the hint is shown or hidden.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  return (\n    <div>\n      {showHint &&\n        <p><i>Hint: Your favorite city?</i></p>\n      }\n      <Form />\n      {showHint ? (\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      ) : (\n        <button onClick={() => {\n          setShowHint(true);\n        }}>Show hint</button>\n      )}\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ntextarea { display: block; margin: 10px 0; }\n```\n\n----------------------------------------\n\nTITLE: Building an Interactive Gallery Component with React State\nDESCRIPTION: A complete implementation of an image gallery that uses React state to track the current image index and whether to show additional details. The component includes handlers for navigating through images and toggling visibility of details.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n  const hasNext = index < sculptureList.length - 1;\n\n  function handleNextClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    } else {\n      setIndex(0);\n    }\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i>\n        by {sculpture.artist}\n      </h2>\n      <h3>\n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img\n        src={sculpture.url}\n        alt={sculpture.alt}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Main Messenger Component Implementation\nDESCRIPTION: Core React component that sets up the messenger interface using useReducer and manages contact selection and message display.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\nimport { initialState, messengerReducer } from './messengerReducer';\n\nexport default function Messenger() {\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\n  const message = state.message;\n  const contact = contacts.find((c) => c.id === state.selectedId);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedId={state.selectedId}\n        dispatch={dispatch}\n      />\n      <Chat\n        key={contact.id}\n        message={message}\n        contact={contact}\n        dispatch={dispatch}\n      />\n    </div>\n  );\n}\n\nconst contacts = [\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\n];\n```\n\n----------------------------------------\n\nTITLE: Using Effect Events with Asynchronous Logic in React\nDESCRIPTION: This snippet shows how to use Effect Events with asynchronous logic inside an Effect. It demonstrates the importance of passing the URL explicitly to maintain the correct context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst onVisit = useEffectEvent(visitedUrl => {\n  logVisit(visitedUrl, numberOfItems);\n});\n\nuseEffect(() => {\n  setTimeout(() => {\n    onVisit(url);\n  }, 5000); // Delay logging visits\n}, [url]);\n```\n\n----------------------------------------\n\nTITLE: Video Player with Correct Dependency Array in React\nDESCRIPTION: Shows the correct implementation of useEffect with isPlaying in the dependency array, causing the effect to only re-run when the isPlaying prop changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  }, [isPlaying]);\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput, button { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Passing and Reading Props in React Components\nDESCRIPTION: Shows how to pass props from a parent component to a child component and how to read those props in the child component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <div>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi', \n          imageId: 'YfeOqp2'\n        }}\n      />\n      <Avatar\n        size={80}\n        person={{\n          name: 'Aklilu Lemma', \n          imageId: 'OKS67lh'\n        }}\n      />\n      <Avatar\n        size={50}\n        person={{ \n          name: 'Lin Lanying',\n          imageId: '1bX5QH6'\n        }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Table with Filtering Logic\nDESCRIPTION: This snippet shows the ProductTable component implementation, which includes logic for filtering products based on the filterText and inStockOnly props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ProductTable({ products, filterText, inStockOnly }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (\n      product.name.toLowerCase().indexOf(\n        filterText.toLowerCase()\n      ) === -1\n    ) {\n      return;\n    }\n    if (inStockOnly && !product.stocked) {\n      return;\n    }\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator in React\nDESCRIPTION: Using the conditional (ternary) operator to conditionally render content in JSX. This example shows how to conditionally add text within a component rather than returning entirely different JSX trees.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  <li className=\"item\">\n    {isPacked ? name + ' ✅' : name}\n  </li>\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Controlled Inputs with a Single Event Handler in React (JavaScript)\nDESCRIPTION: This React functional component demonstrates how to use a single event handler to manage the state of multiple input fields for first name, last name, and email. Using the spread operator and computed property names, the handleChange function updates only the input field that triggered the change. The component uses useState from 'react' and shows the updated values live. Inputs are controlled, their values tied to the corresponding properties in the state object, and changes propagate using setPerson. Prerequisites are a React environment with functional component support.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleChange(e) {\n    setPerson({\n      ...person,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          name=\"firstName\"\n          value={person.firstName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          name=\"lastName\"\n          value={person.lastName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          name=\"email\"\n          value={person.email}\n          onChange={handleChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMemo to Minimize Props Changes in React\nDESCRIPTION: This snippet shows how to use useMemo to prevent unnecessary re-renders in a memoized component by creating a stable reference to an object prop, ensuring it doesn't change identity on every parent re-render unless its dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page() {\n  const [name, setName] = useState('Taylor');\n  const [age, setAge] = useState(42);\n\n  const person = useMemo(\n    () => ({ name, age }),\n    [name, age]\n  );\n\n  return <Profile person={person} />;\n}\n\nconst Profile = memo(function Profile({ person }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting State with Key in React\nDESCRIPTION: This example shows how to reset a component's state by changing its key. The Form component is re-created from scratch when the key changes, resetting its internal state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [version, setVersion] = useState(0);\n\n  function handleReset() {\n    setVersion(version + 1);\n  }\n\n  return (\n    <>\n      <button onClick={handleReset}>Reset</button>\n      <Form key={version} />\n    </>\n  );\n}\n\nfunction Form() {\n  const [name, setName] = useState('Taylor');\n\n  return (\n    <>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <p>Hello, {name}.</p>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Building a React Chat Form Demonstrating State Snapshots - JavaScript\nDESCRIPTION: Implements a chat form component in React using useState for managing recipients and message content. Demonstrates state snapshotting by showing that a delayed function (setTimeout/alert) captures the current state as it was during the event, even after it might have changed. Dependencies: React's useState. Inputs include user interactions with form elements. Outputs include an alert showing whom the message was sent to and what was said, reflecting state at form submission, not after.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        To:{' '}\n        <select\n          value={to}\n          onChange={e => setTo(e.target.value)}>\n          <option value=\"Alice\">Alice</option>\n          <option value=\"Bob\">Bob</option>\n        </select>\n      </label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing isPlaying Prop to VideoPlayer Component in React\nDESCRIPTION: Demonstrates passing an `isPlaying` boolean prop to a custom `VideoPlayer` component. This pattern allows controlling the video's playback state from its parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<VideoPlayer isPlaying={isPlaying} />;\n```\n\n----------------------------------------\n\nTITLE: Migrating PureComponent to a Functional Component with React.memo\nDESCRIPTION: This snippet demonstrates migrating a class component that used `PureComponent` to a functional component. The functional component `Greeting` is wrapped with `React.memo` to achieve similar performance optimization by memoizing the component and skipping re-renders if its props haven't changed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { memo, useState } from 'react';\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n  return <h3>Hello{name && ', '}{name}!</h3>;\n});\n\nexport default function MyApp() {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <>\n      <label>\n        Name{': '}\n        <input value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        Address{': '}\n        <input value={address} onChange={e => setAddress(e.target.value)} />\n      </label>\n      <Greeting name={name} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Arrays in React State Using Pure JavaScript\nDESCRIPTION: Demonstrates how to update an array of artwork items in React state using map() to create new arrays. The component maintains a list of artworks with seen/unseen status that can be toggled via checkboxes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [list, setList] = useState(\n    initialList\n  );\n\n  function handleToggle(artworkId, nextSeen) {\n    setList(list.map(artwork => {\n      if (artwork.id === artworkId) {\n        return { ...artwork, seen: nextSeen };\n      } else {\n        return artwork;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={list}\n        onToggle={handleToggle} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Components in React\nDESCRIPTION: Demonstrates how to nest a previously defined component (MyButton) inside another component (MyApp) using JSX syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Feedback Form with Status Enum Pattern in React\nDESCRIPTION: An improved feedback form implementation using a single 'status' state variable with enumerated values ('typing', 'sending', 'sent') to avoid contradictory states and ensure proper state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('typing');\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('sending');\n    await sendMessage(text);\n    setStatus('sent');\n  }\n\n  const isSending = status === 'sending';\n  const isSent = status === 'sent';\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button\n        disabled={isSending}\n        type=\"submit\"\n      >\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: React Profile Page Component with Suspense\nDESCRIPTION: Example of a React component structure showing how to use Suspense for data loading in a profile page layout. Demonstrates the component hierarchy and Suspense boundary for Posts component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Sidebar>\n        <Friends />\n        <Photos />\n      </Sidebar>\n      <Suspense fallback={<PostsGlimmer />}>\n        <Posts />\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using React <Suspense> to Show a Fallback for a Component in JavaScript\nDESCRIPTION: Illustrates how to use `<Suspense>` to wrap a specific component (`<Albums />`) that might suspend during rendering, for instance, while fetching data. It specifies a `fallback` component (`<Loading />`) that React will display until the `Albums` component has loaded its necessary code and data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <Albums />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Using 'use' with Promise and Context in React Components\nDESCRIPTION: Shows how to use the 'use' function in a component to read values from both a Promise and a Context. Unlike Hooks, 'use' can be called inside loops and conditionals.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { use } from 'react';\n\nfunction MessageComponent({ messagePromise }) {\n  const message = use(messagePromise);\n  const theme = use(ThemeContext);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing useInterval Hook with Effect Event in React\nDESCRIPTION: This snippet shows an improved implementation of the useInterval hook using useEffectEvent to wrap the callback, preventing unnecessary re-synchronization of the effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useInterval(callback, delay) {\n  const onTick = useEffectEvent(callback);\n  useEffect(() => {\n    const id = setInterval(onTick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Error Recovery Implementation\nDESCRIPTION: Demonstrates a full implementation of error handling with fallback content for both shell and streaming errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  try {\n    const stream = await renderToReadableStream(<App />, {\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    return new Response(stream, {\n      headers: { 'content-type': 'text/html' },\n    });\n  } catch (error) {\n    return new Response('<h1>Something went wrong</h1>', {\n      status: 500,\n      headers: { 'content-type': 'text/html' },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Messenger Reducer in React\nDESCRIPTION: Defines the initial state and reducer function for the messenger application. The reducer handles actions for changing contact selection and editing message content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialState = {\n  selectedId: 0,\n  message: 'Hello',\n};\n\nexport function messengerReducer(state, action) {\n  switch (action.type) {\n    case 'changed_selection': {\n      return {\n        ...state,\n        selectedId: action.contactId,\n        message: '',\n      };\n    }\n    case 'edited_message': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pure Rendering Solution for StoryTray\nDESCRIPTION: Fixed version using pure rendering approach by separately rendering the Create Story item without mutating the stories array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function StoryTray({ stories }) {\n  return (\n    <ul>\n      {stories.map(story => (\n        <li key={story.id}>\n          {story.label}\n        </li>\n      ))}\n      <li>Create Story</li>\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Object State via React Context\nDESCRIPTION: Demonstrates how to manage and update an object state through React Context. Uses useState and useContext hooks to manage a currentUser object that can be accessed and modified by child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    >\n      <Form />\n    </CurrentUserContext.Provider>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n}\n\n.panel {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n\n.button {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React Product Filtering Application\nDESCRIPTION: Full implementation of a product filtering application with components for filtering, displaying categories, and managing product data with state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly} \n        onFilterTextChange={setFilterText} \n        onInStockOnlyChange={setInStockOnly} />\n      <ProductTable \n        products={products} \n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n\nfunction ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nfunction ProductTable({ products, filterText, inStockOnly }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (\n      product.name.toLowerCase().indexOf(\n        filterText.toLowerCase()\n      ) === -1\n    ) {\n      return;\n    }\n    if (inStockOnly && !product.stocked) {\n      return;\n    }\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction SearchBar({\n  filterText,\n  inStockOnly,\n  onFilterTextChange,\n  onInStockOnlyChange\n}) {\n  return (\n    <form>\n      <input \n        type=\"text\" \n        value={filterText} placeholder=\"Search...\" \n        onChange={(e) => onFilterTextChange(e.target.value)} />\n      <label>\n        <input \n          type=\"checkbox\" \n          checked={inStockOnly} \n          onChange={(e) => onInStockOnlyChange(e.target.checked)} />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n\nconst PRODUCTS = [\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n];\n\nexport default function App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React Form Implementation\nDESCRIPTION: Full implementation of a React form with state management, event handlers, and error handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [answer, setAnswer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('typing');\n\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('submitting');\n    try {\n      await submitForm(answer);\n      setStatus('success');\n    } catch (err) {\n      setStatus('typing');\n      setError(err);\n    }\n  }\n\n  function handleTextareaChange(e) {\n    setAnswer(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={answer}\n          onChange={handleTextareaChange}\n          disabled={status === 'submitting'}\n        />\n        <br />\n        <button disabled={\n          answer.length === 0 ||\n          status === 'submitting'\n        }>\n          Submit\n        </button>\n        {error !== null &&\n          <p className=\"Error\">\n            {error.message}\n          </p>\n        }\n      </form>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.Error { color: red; }\n```\n\n----------------------------------------\n\nTITLE: Using Interfaces for Prop Types in React Components\nDESCRIPTION: This snippet illustrates the use of TypeScript interfaces to define prop types for React components, enabling more readable and manageable type definitions. The setup assumes a functioning React and TypeScript environment.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyButtonProps {\n  /** The text to display inside the button */\n  title: string;\n  /** Whether the button can be interacted with */\n  disabled: boolean;\n}\n\nfunction MyButton({ title, disabled }: MyButtonProps) {\n  return (\n    <button disabled={disabled}>{title}</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton title=\"I'm a disabled button\" disabled={true}/>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Input Component with Ref Forwarding\nDESCRIPTION: A React input component that accepts and forwards a ref to the underlying DOM input element. This enables parent components to directly access the DOM node for operations like focus().\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SearchInput({ ref }) {\n  return (\n    <input\n      ref={ref}\n      placeholder=\"Looking for something?\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Form Submission Pattern in React\nDESCRIPTION: This refactored solution moves the message sending logic directly into the submit event handler, which is a better pattern for handling form submissions. This avoids unintended side effects when component state changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Form() {\n  const [showForm, setShowForm] = useState(true);\n  const [message, setMessage] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setShowForm(false);\n    sendMessage(message);\n  }\n\n  if (!showForm) {\n    return (\n      <>\n        <h1>Thanks for using our services!</h1>\n        <button onClick={() => {\n          setMessage('');\n          setShowForm(true);\n        }}>\n          Open chat\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\" disabled={message === ''}>\n        Send\n      </button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  console.log('Sending message: ' + message);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Overwriting Existing Squares in Tic-Tac-Toe\nDESCRIPTION: Adds logic to prevent players from overwriting squares that are already filled by returning early from the handleClick function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick(i) {\n  if (squares[i]) {\n    return;\n  }\n  const nextSquares = squares.slice();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateful Gallery Component in React\nDESCRIPTION: This code defines the Gallery component, which uses React hooks (useState) to manage its state. It includes functionality to navigate through sculptures and toggle additional details.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <section>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers and Custom Components in React\nDESCRIPTION: This snippet demonstrates how to create custom components with event handlers in React. It shows the implementation of a Toolbar component with custom event props, and a reusable Button component that accepts an onClick prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Components in React JSX\nDESCRIPTION: Demonstrates the correct way to use components in React by rendering them in JSX, as opposed to calling them directly as functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction BlogPost() {\n  return <Layout><Article /></Layout>; // ✅ Good: Only use components in JSX\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction BlogPost() {\n  return <Layout>{Article()}</Layout>; // 🔴 Bad: Never call them directly\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a DOM ref in React\nDESCRIPTION: Example of creating a ref to manipulate a DOM element, initializing with null since the DOM node doesn't exist during initial render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n  const inputRef = useRef(null);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Properly Managing useEffect Dependencies in React Chat Room\nDESCRIPTION: A complete example showing how to properly implement a chat room component with useEffect that correctly handles dependencies. The createOptions function is defined inside the Effect to avoid unnecessary reconnections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    function createOptions() {\n      return {\n        serverUrl: serverUrl,\n        roomId: roomId\n      };\n    }\n\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Messenger App with Persistent Input State (React)\nDESCRIPTION: This example shows a messenger app with a contact list and chat interface. When switching between contacts, the input text is preserved because the Chat component maintains its position in the tree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n  { id: 1, name: 'Alice', email: 'alice@mail.com' },\n  { id: 2, name: 'Bob', email: 'bob@mail.com' }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ContactList({\n  selectedContact,\n  contacts,\n  onSelect\n}) {\n  return (\n    <section className=\"contact-list\">\n      <ul>\n        {contacts.map(contact =>\n          <li key={contact.id}>\n            <button onClick={() => {\n              onSelect(contact);\n            }}>\n              {contact.name}\n            </button>\n          </li>\n        )}\n      </ul>\n    </section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n  const [text, setText] = useState('');\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={text}\n        placeholder={'Chat to ' + contact.name}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button>Send to {contact.email}</button>\n    </section>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.chat, .contact-list {\n  float: left;\n  margin-bottom: 20px;\n}\nul, li {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli button {\n  width: 100px;\n  padding: 10px;\n  margin-right: 10px;\n}\ntextarea {\n  height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Entry Point: Hydrating App from Server HTML – React DOM Client – JavaScript\nDESCRIPTION: This full entry-point JavaScript code for a typical hydrated React app demonstrates importing hydrateRoot and the main App component, as well as including CSS. It hydrates the DOM using hydrateRoot, connecting the root DOM node to the top-level App component. This file expects prior server rendering of HTML into the app root, and imports other project files as dependencies. Inputs: DOM element via getElementById, React component. No output (side-effect: app becomes interactive).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './styles.css';\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(\n  document.getElementById('root'),\n  <App />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering and Editing Todo List with Child Components in React (JavaScript)\nDESCRIPTION: Defines a TaskList component that renders todos and passes event handlers to each Task. The inner Task component supports inline editing of task titles and toggling completion. React's useState manages editing state locally. Key dependencies: parent-provided event handlers, React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function TaskList({\\n  todos,\\n  onChangeTodo,\\n  onDeleteTodo\\n}) {\\n  return (\\n    <ul>\\n      {todos.map(todo => (\\n        <li key={todo.id}>\\n          <Task\\n            todo={todo}\\n            onChange={onChangeTodo}\\n            onDelete={onDeleteTodo}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ todo, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let todoContent;\\n  if (isEditing) {\\n    todoContent = (\\n      <>\\n        <input\\n          value={todo.title}\\n          onChange={e => {\\n            onChange({\\n              ...todo,\\n              title: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    todoContent = (\\n      <>\\n        {todo.title}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\"checkbox\"\\n        checked={todo.done}\\n        onChange={e => {\\n          onChange({\\n            ...todo,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {todoContent}\\n      <button onClick={() => onDelete(todo.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Connection with React useEffect\nDESCRIPTION: Example showing how to properly manage chat room connections using useEffect. Demonstrates fixing an issue where the connection unnecessarily reconnects on every keystroke by adding appropriate dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Packing List Component with Items in React\nDESCRIPTION: A React component example showing a packing list with items. The Item component displays a name from props, and the PackingList component renders a list of items with different isPacked states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tasks Reducer with Switch Statement in React\nDESCRIPTION: A tasks reducer implementation using a switch statement, which is the conventional approach for reducer functions. It includes separate case blocks for each action type and proper error handling for unknown actions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controlled Select Box in React\nDESCRIPTION: Conceptual code showing how to create a controlled select box in React. It uses the `useState` hook to manage the selected value, binds this state to the select's `value` prop, and updates the state via the `onChange` event handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction FruitPicker() {\n  const [selectedFruit, setSelectedFruit] = useState('orange'); // Declare a state variable...\n  // ...\n  return (\n    <select\n      value={selectedFruit} // ...force the select's value to match the state variable...\n      onChange={e => setSelectedFruit(e.target.value)} // ... and update the state variable on any change!\n    >\n      <option value=\"apple\">Apple</option>\n      <option value=\"banana\">Banana</option>\n      <option value=\"orange\">Orange</option>\n    </select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State in FilterableProductTable Component\nDESCRIPTION: This snippet shows how to add state to the FilterableProductTable component using the useState Hook. It initializes two state variables: filterText and inStockOnly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);  \n```\n\n----------------------------------------\n\nTITLE: Map Widget Integration with React\nDESCRIPTION: This complete React component integrates a map widget using refs and portals. It includes importing necessary modules, setting up state and refs, and rendering React content into the map's popup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createMapWidget, addPopupToMapWidget } from './map-widget.js';\n\nexport default function Map() {\n  const containerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [popupContainer, setPopupContainer] = useState(null);\n\n  useEffect(() => {\n    if (mapRef.current === null) {\n      const map = createMapWidget(containerRef.current);\n      mapRef.current = map;\n      const popupDiv = addPopupToMapWidget(map);\n      setPopupContainer(popupDiv);\n    }\n  }, []);\n\n  return (\n    <div style={{ width: 250, height: 250 }} ref={containerRef}>\n      {popupContainer !== null && createPortal(\n        <p>Hello from React!</p>,\n        popupContainer\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Component Promise Resolution Example\nDESCRIPTION: Demonstrates how to resolve a Promise in a Server Component using await to fetch and pass data to a Client Component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function App() {\n  const messageContent = await fetchMessage();\n  return <Message messageContent={messageContent} />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating handleClick to Support Alternating Turns in Tic-Tac-Toe\nDESCRIPTION: Modifies the handleClick function to alternate between X and O players by checking the xIsNext state and toggling it after each move.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    //...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Effect Events for Flexible Dependency Management in React\nDESCRIPTION: This snippet demonstrates the use of Effect Events to separate reactive and non-reactive parts of the Effect. It allows including the latest numberOfItems without making it a dependency of the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ url }) {\n  const { items } = useContext(ShoppingCartContext);\n  const numberOfItems = items.length;\n\n  const onVisit = useEffectEvent(visitedUrl => {\n    logVisit(visitedUrl, numberOfItems);\n  });\n\n  useEffect(() => {\n    onVisit(url);\n  }, [url]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React ChatRoom Component with Effect\nDESCRIPTION: ChatRoom component implementing useEffect hook to manage chat room connections, showing the bug where createConnection dependency is missing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function ChatRoom({ roomId, createConnection }) {\n  useEffect(() => {\n    const connection = createConnection(roomId);\n    connection.connect();\n    return () => connection.disconnect();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useActionState with Component Structure\nDESCRIPTION: Example showing how to integrate useActionState in a component, including how to connect it to a form and access the state values returned by the action.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActionState } from 'react';\nimport { action } from './actions.js';\n\nfunction MyComponent() {\n  const [state, formAction] = useActionState(action, null);\n  // ...\n  return (\n    <form action={formAction}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cleanup Function to useEffect\nDESCRIPTION: Implementing a proper cleanup function that disconnects the connection when the component unmounts or before the effect runs again.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n  return () => {\n    connection.disconnect();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Correct: Synchronous State Update to e.target.value - JavaScript\nDESCRIPTION: This snippet demonstrates the correct handling of controlled input in React, updating the state variable to exactly match e.target.value synchronously in the event handler. Dependencies are React and a state variable firstName. It prevents caret position issues and ensures consistent form behavior.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleChange(e) {\n  // ✅ Updating a controlled input to e.target.value synchronously\n  setFirstName(e.target.value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Hook for Chat Room Connections\nDESCRIPTION: This snippet defines the custom hook `useChatRoom` which uses `useEffect` to handle reactivity and connection management for chat rooms. It requires server URL and room ID as parameters and abstracts the underlying useEffect logic used in `ChatRoom`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nexport function useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Down Events with onKeyDown in React (JSX)\nDESCRIPTION: React prop for handling the event when a keyboard key is pressed down. It expects a `KeyboardEvent` handler function and corresponds to the browser's `keydown` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyDown\n```\n\n----------------------------------------\n\nTITLE: Optimizing useChatRoom Hook with useEffectEvent\nDESCRIPTION: This code optimizes the useChatRoom Hook by wrapping the onReceiveMessage handler with useEffectEvent. This prevents unnecessary re-connections when the component re-renders, improving performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useEffectEvent } from 'react';\n// ...\n\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n  const onMessage = useEffectEvent(onReceiveMessage);\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      onMessage(msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useOptimistic in React 19\nDESCRIPTION: Example demonstrating the usage of the new useOptimistic hook for handling optimistic UI updates during data mutations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChangeName({currentName, onUpdateName}) {\n  const [optimisticName, setOptimisticName] = useOptimistic(currentName);\n\n  const submitAction = async formData => {\n    const newName = formData.get(\"name\");\n    setOptimisticName(newName);\n    const updatedName = await updateName(newName);\n    onUpdateName(updatedName);\n  };\n\n  return (\n    <form action={submitAction}>\n      <p>Your name is: {optimisticName}</p>\n      <p>\n        <label>Change Name:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          disabled={currentName !== optimisticName}\n        />\n      </p>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Effect for Chat Room Connection\nDESCRIPTION: Example demonstrating how to use an Effect to maintain chat room connection synchronization. The Effect runs whenever the roomId changes to ensure proper connection state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  // ...\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React TodoList Component Calling Slow Filter Function Directly\nDESCRIPTION: This `TodoList` component receives `todos`, `theme`, and `tab` as props. On every render, it calls the `filterTodos` function (which is artificially slowed down in this example's context) to compute `visibleTodos`. It then renders the filtered list within a div styled by the `theme`. Because `filterTodos` is called directly without memoization, it re-runs even if only the `theme` changes, causing performance degradation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/TodoList.js active\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = filterTodos(todos, tab);\n  return (\n    <div className={theme}>\n      <ul>\n        <p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ?\n              <s>{todo.text}</s> :\n              todo.text\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Chat Room Component Implementation\nDESCRIPTION: Main React component implementing a chat room with delayed notifications. Uses useEffect and useEffectEvent hooks to manage connections and show welcome messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(connectedRoomId => {\n    showNotification('Welcome to ' + connectedRoomId, theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    let notificationTimeoutId;\n    connection.on('connected', () => {\n      notificationTimeoutId = setTimeout(() => {\n        onConnected(roomId);\n      }, 2000);\n    });\n    connection.connect();\n    return () => {\n      connection.disconnect();\n      if (notificationTimeoutId !== undefined) {\n        clearTimeout(notificationTimeoutId);\n      }\n    };\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Nested Section Implementation\nDESCRIPTION: Full implementation of automatic level management using React Context, including Page, Section, and Heading components\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting React Component to External Chat System in JavaScript\nDESCRIPTION: This code snippet demonstrates how to connect a React component to an external chat system using the useEffect Hook. Dependencies such as serverUrl and roomId are specified so that connections are made when these values change. The setup function connects to the chat server and the cleanup function disconnects from it. The createConnection function from chat.js is imported and used to facilitate the connection lifecycle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n  // ...\n}\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Elements Using Fragment Short Syntax in React Component (JavaScript)\nDESCRIPTION: This React functional component named Post demonstrates returning multiple elements grouped in a Fragment using the <>...</> syntax. No dependencies are needed aside from React. The function returns components PostTitle and PostBody as siblings, which is required because a React component can only return a single root element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nfunction Post() {\n  return (\n    <>\n      <PostTitle />\n      <PostBody />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing useWindowListener Custom Hook in React\nDESCRIPTION: A custom hook that manages window event listeners with proper cleanup. Takes an event type and listener function as parameters and handles adding/removing event listeners using useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useWindowListener(eventType, listener) {\n  useEffect(() => {\n    window.addEventListener(eventType, listener);\n    return () => {\n      window.removeEventListener(eventType, listener);\n    };\n  }, [eventType, listener]);\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Using useCallback with Dependency Array\nDESCRIPTION: Shows the corrected version of the previous example with a proper dependency array, ensuring the function only changes when relevant dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ProductPage({ productId, referrer }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]); // ✅ Does not return a new function unnecessarily\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Using useImperativeHandle for Controlled Ref Exposure\nDESCRIPTION: Shows how to restrict exposed DOM functionality using useImperativeHandle to create a custom ref interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from \"react\";\n\nfunction MyInput({ ref }) {\n  const realInputRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    // Only expose focus and nothing else\n    focus() {\n      realInputRef.current.focus();\n    },\n  }));\n  return <input ref={realInputRef} />;\n};\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Form State Structure in React\nDESCRIPTION: Example demonstrating state structure optimization by removing redundant state variables and calculating derived values during render instead of storing them in state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const fullName = firstName + ' ' + lastName;\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let's check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Packing List with Conditional Checkmarks using Logical AND in React\nDESCRIPTION: A complete React component using the logical AND (&&) operator to conditionally show checkmarks only for packed items. This demonstrates a clean way to conditionally include small pieces of JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useRef Hook Usage in React\nDESCRIPTION: The basic syntax for using the useRef Hook to create a ref object with an initial value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = useRef(initialValue)\n```\n\n----------------------------------------\n\nTITLE: Updating a Hydrated React Root Component with `root.render`\nDESCRIPTION: This JavaScript snippet demonstrates hydrating a root element using `hydrateRoot` and then subsequently updating the rendered component using `root.render`. It calls `root.render` repeatedly within a `setInterval` callback, passing an incrementing `counter` prop to the `App` component. This shows how to update the UI after initial hydration, preserving existing component state (like text typed into an input).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport './styles.css';\nimport App from './App.js';\n\nconst root = hydrateRoot(\n  document.getElementById('root'),\n  <App counter={0} />\n);\n\nlet i = 0;\nsetInterval(() => {\n  root.render(<App counter={i} />);\n  i++;\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Managing Form State and Status with React DOM Hooks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to manage form state and track form submission status in a React web application using react-dom specific Hooks. It showcases useActionState to handle updates to a count, and useFormStatus to determine whether the form is currently pending submission, disabling the Submit button accordingly. Dependencies include React, the react-dom package, and the presence of useActionState and useFormStatus Hooks. The Form component accepts an action prop, manages an internal count state, and delegates UI updates based on both user interaction and the asynchronous status of the form. Expected inputs are a valid action function and user events; outputs include dynamic UI updates reflecting count changes and submission status. This pattern is limited to browser environments and will not work in non-web implementations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Form({ action }) {\\n  async function increment(n) {\\n    return n + 1;\\n  }\\n  const [count, incrementFormAction] = useActionState(increment, 0);\\n  return (\\n    <form action={action}>\\n      <button formAction={incrementFormAction}>Count: {count}</button>\\n      <Button />\\n    </form>\\n  );\\n}\\n\\nfunction Button() {\\n  const { pending } = useFormStatus();\\n  return (\\n    <button disabled={pending} type=\"submit\">\\n      Submit\\n    </button>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Playback Using Ref - React JavaScript\nDESCRIPTION: This snippet implements a play/pause toggle for an HTML <video> element in React by storing a ref to the video node. Button clicks flip the isPlaying state and imperatively call play() or pause() on the video node via the ref. Event handlers for onPlay/onPause keep the UI state in sync with playback state. Dependencies: React, useRef, useState. Inputs include user button clicks; outputs are video playback state changes and UI updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const ref = useRef(null);\n\n  function handleClick() {\n    const nextIsPlaying = !isPlaying;\n    setIsPlaying(nextIsPlaying);\n\n    if (nextIsPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <video\n        width=\"250\"\n        ref={ref}\n        onPlay={() => setIsPlaying(true)}\n        onPause={() => setIsPlaying(false)}\n      >\n        <source\n          src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Context Definition\nDESCRIPTION: Creation of the LevelContext using React's createContext API\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n```\n\n----------------------------------------\n\nTITLE: Using useCallback and useMemo for Component Optimization\nDESCRIPTION: Example showing how to use useCallback and useMemo hooks to optimize component rendering by caching function references and computed values. The code demonstrates memoization of both a computation result and an event handler function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMemo, useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer }) {\n  const product = useData('/product/' + productId);\n\n  const requirements = useMemo(() => { // Calls your function and caches its result\n    return computeRequirements(product);\n  }, [product]);\n\n  const handleSubmit = useCallback((orderDetails) => { // Caches your function itself\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]);\n\n  return (\n    <div className={theme}>\n      <ShippingForm requirements={requirements} onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Reducer Function with Switch Statement\nDESCRIPTION: A more complete reducer function using a switch statement to handle different action types. Each case calculates and returns the next state based on the action type.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'incremented_age': {\n      return {\n        name: state.name,\n        age: state.age + 1\n      };\n    }\n    case 'changed_name': {\n      return {\n        name: action.nextName,\n        age: state.age\n      };\n    }\n  }\n  throw Error('Unknown action: ' + action.type);\n}\n```\n\n----------------------------------------\n\nTITLE: Final React Component with JSX\nDESCRIPTION: Complete example of a React component using proper JSX syntax with closed tags and correct attribute names.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img \n        src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n        alt=\"Hedy Lamarr\" \n        className=\"photo\" \n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve the spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Video Player with React State Using useEffect\nDESCRIPTION: This example shows how to use useEffect to synchronize an HTML5 video player with React state. The Effect watches for changes to the isPlaying prop and calls play() or pause() on the video element accordingly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }, [isPlaying]);\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods in React Class Components\nDESCRIPTION: Shows how to implement componentDidMount, componentDidUpdate, and componentWillUnmount to manage subscriptions and connections in a class component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChatRoom extends Component {\n  state = {\n    serverUrl: 'https://localhost:1234'\n  };\n\n  componentDidMount() {\n    this.setupConnection();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.roomId !== prevProps.roomId ||\n      this.state.serverUrl !== prevState.serverUrl\n    ) {\n      this.destroyConnection();\n      this.setupConnection();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyConnection();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Race Condition Prevention in React Data Fetching\nDESCRIPTION: Shows how to prevent race conditions when fetching data in React using useEffect. Implements a cleanup function with an ignore flag to handle out-of-order responses from async operations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n  const [person, setPerson] = useState('Alice');\n  const [bio, setBio] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    setBio(null);\n    fetchBio(person).then(result => {\n      if (!ignore) {\n        setBio(result);\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, [person]);\n\n  return (\n    <>\n      <select value={person} onChange={e => {\n        setPerson(e.target.value);\n      }}>\n        <option value=\"Alice\">Alice</option>\n        <option value=\"Bob\">Bob</option>\n        <option value=\"Taylor\">Taylor</option>\n      </select>\n      <hr />\n      <p><i>{bio ?? 'Loading...'}</i></p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Class Component with Lifecycle Methods to Function Component\nDESCRIPTION: Shows how to convert a ChatRoom class component with lifecycle methods (componentDidMount, componentDidUpdate, componentWillUnmount) to a function component using useState and useEffect hooks. The component manages a chat room connection based on roomId and serverUrl.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Errors with useActionState\nDESCRIPTION: Complete example of a form that displays error messages returned by a server action, demonstrating state management and pending status handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActionState, useState } from \"react\";\nimport { addToCart } from \"./actions.js\";\n\nfunction AddToCartForm({itemID, itemTitle}) {\n  const [message, formAction, isPending] = useActionState(addToCart, null);\n  return (\n    <form action={formAction}>\n      <h2>{itemTitle}</h2>\n      <input type=\"hidden\" name=\"itemID\" value={itemID} />\n      <button type=\"submit\">Add to Cart</button>\n      {isPending ? \"Loading...\" : message}\n    </form>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <AddToCartForm itemID=\"1\" itemTitle=\"JavaScript: The Definitive Guide\" />\n      <AddToCartForm itemID=\"2\" itemTitle=\"JavaScript: The Good Parts\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useContext Hook in React\nDESCRIPTION: Example of using the useContext Hook to access context values provided by a parent component. This snippet shows how to read a theme value from ThemeContext.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Lists in React\nDESCRIPTION: This snippet demonstrates how to render a nested list of recipes and ingredients using the map function in React. It loops through an array of recipes and their ingredients to create a structured list.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { recipes } from './data.js';\n\nexport default function RecipeList() {\n  return (\n    <div>\n      <h1>Recipes</h1>\n      {recipes.map(recipe =>\n        <div key={recipe.id}>\n          <h2>{recipe.name}</h2>\n          <ul>\n            {recipe.ingredients.map(ingredient =>\n              <li key={ingredient}>\n                {ingredient}\n              </li>\n            )}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Room Component with Reactive Dependencies\nDESCRIPTION: This comprehensive example demonstrates a chat room component with proper dependency management. The effect correctly re-connects when serverUrl or roomId changes, but not when message state changes since it's not used in the effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_25\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n      <label>\n        Your message:{' '}\n        <input value={message} onChange={e => setMessage(e.target.value)} />\n      </label>\n    </>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n        <button onClick={() => setShow(!show)}>\n          {show ? 'Close chat' : 'Open chat'}\n        </button>\n      </label>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId}/>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Lifting State for Filterable Lists with React and JavaScript\nDESCRIPTION: Refactors the list filtering logic in React by moving the query state and its update handler to the FilterableList parent component, then passing them as props to SearchBar. When the input changes, the list updates dynamically to display only matching items determined by filterItems. This approach ensures synchronization between input and results, improves reusability, and demonstrates the React 'lifting state up' pattern. React and the data module are required; filtered results update in real time based on user input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { foods, filterItems } from './data.js';\n\nexport default function FilterableList() {\n  const [query, setQuery] = useState('');\n  const results = filterItems(foods, query);\n\n  function handleChange(e) {\n    setQuery(e.target.value);\n  }\n\n  return (\n    <>\n      <SearchBar\n        query={query}\n        onChange={handleChange}\n      />\n      <hr />\n      <List items={results} />\n    </>\n  );\n}\n\nfunction SearchBar({ query, onChange }) {\n  return (\n    <label>\n      Search:{' '}\n      <input\n        value={query}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nfunction List({ items }) {\n  return (\n    <table>\n      <tbody> \n        {items.map(food => (\n          <tr key={food.id}>\n            <td>{food.name}</td>\n            <td>{food.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of Fragments with Keys in React (JavaScript)\nDESCRIPTION: This React example shows mapping over an array of posts and rendering each inside an explicit Fragment with a required key prop. This pattern is necessary for list rendering when wrapping multiple sibling elements without adding extra DOM nodes. React must be imported; PostTitle and PostBody are child components. Data is supplied via the posts array. The key attribute ensures stable identity for efficient updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nfunction Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Objects in React State with Spread Syntax - JavaScript\nDESCRIPTION: Implements a React form for editing a nested person/artwork object using useState. Each change handler creates a shallow copy of the state object (using spread syntax) to ensure immutability before updating nested fields. Inputs are text fields for various properties, output is a UI reflecting the changes and displaying the image. No additional dependencies beyond React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img\n        src={person.artwork.image}\n        alt={person.artwork.title}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Multiple Resources in React\nDESCRIPTION: Example of preloading both a stylesheet and a font file when rendering a component, demonstrating how to optimize loading of related resources.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/style.css\", {as: \"style\"});\n  preload(\"https://example.com/font.woff2\", {as: \"font\"});\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Updater Function to Queue State Updates in React - JavaScript\nDESCRIPTION: Shows the correct usage of the useState setter function by passing an updater function, ensuring each queued update receives the latest state. Three setAge(a => a + 1) calls increment the state value by 3. Inputs: Button click. Dependencies: setAge function and state variable. Outputs: State is incremented as expected. Best practice for multiple, sequential state updates in a single React event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick() {\\n  setAge(a => a + 1); // setAge(42 => 43)\\n  setAge(a => a + 1); // setAge(43 => 44)\\n  setAge(a => a + 1); // setAge(44 => 45)\\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between React Components\nDESCRIPTION: Implementation of state lifting pattern where parent component manages shared state between child components, demonstrated through an accordion component with active panel tracking.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Accordion() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel\n        title=\"About\"\n        isActive={activeIndex === 0}\n        onShow={() => setActiveIndex(0)}\n      >\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel\n        title=\"Etymology\"\n        isActive={activeIndex === 1}\n        onShow={() => setActiveIndex(1)}\n      >\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant State and Effect for Derived Data in React\nDESCRIPTION: This snippet demonstrates how to calculate a full name from first and last name without using an Effect. It shows the inefficient approach with an Effect and the optimized approach using direct calculation during rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [fullName, setFullName] = useState('');\n  useEffect(() => {\n    setFullName(firstName + ' ' + lastName);\n  }, [firstName, lastName]);\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n  // ✅ Good: calculated during rendering\n  const fullName = firstName + ' ' + lastName;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using flushSync for Immediate DOM Updates\nDESCRIPTION: Example showing how to import flushSync from react-dom and use it to immediately apply state updates to the DOM.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/flushSync.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { flushSync } from 'react-dom';\n\nflushSync(() => {\n  setSomething(123);\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Asynchronous Data Fetching with React's cache Function\nDESCRIPTION: This example demonstrates how to use React's cache function to optimize asynchronous data fetching. It shows how the fetchData function is wrapped with cache, allowing subsequent calls to getData to reuse the same Promise, reducing redundant network requests.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData() {\n  return await fetch(`https://...`);\n}\n\nconst getData = cache(fetchData);\n\nasync function MyComponent() {\n  getData();\n  // ... some computational work  \n  await getData();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context Values in React\nDESCRIPTION: Shows how to wrap components with context providers to supply dynamic values. This example uses state to manage theme and user data, which are then provided to child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [theme, setTheme] = useState('dark');\n  const [currentUser, setCurrentUser] = useState({ name: 'Taylor' });\n\n  // ...\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <AuthContext.Provider value={currentUser}>\n        <Page />\n      </AuthContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Form Handling with Server Functions\nDESCRIPTION: Demonstrates implementation of a form submission handler using a server function with FormData.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function requestUsername(formData) {\n  'use server';\n  const username = formData.get('username');\n  // ...\n}\n\nexport default function App() {\n  return (\n    <form action={requestUsername}>\n      <input type=\"text\" name=\"username\" />\n      <button type=\"submit\">Request</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Split Lists of Scientists in React\nDESCRIPTION: This snippet demonstrates how to split a list of scientists into two categories (Chemists and Everyone Else) using the filter() method and rendering them in separate sections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const chemists = people.filter(person =>\n    person.profession === 'chemist'\n  );\n  const everyoneElse = people.filter(person =>\n    person.profession !== 'chemist'\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <h2>Chemists</h2>\n      <ul>\n        {chemists.map(person =>\n          <li key={person.id}>\n            <img\n              src={getImageUrl(person)}\n              alt={person.name}\n            />\n            <p>\n              <b>{person.name}:</b>\n              {' ' + person.profession + ' '}\n              known for {person.accomplishment}\n            </p>\n          </li>\n        )}\n      </ul>\n      <h2>Everyone Else</h2>\n      <ul>\n        {everyoneElse.map(person =>\n          <li key={person.id}>\n            <img\n              src={getImageUrl(person)}\n              alt={person.name}\n            />\n            <p>\n              <b>{person.name}:</b>\n              {' ' + person.profession + ' '}\n              known for {person.accomplishment}\n            </p>\n          </li>\n        )}\n      </ul>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Derived State from Props in React Class Component\nDESCRIPTION: Shows how to use static getDerivedStateFromProps to update state based on prop changes. The example resets email state when userID prop changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass Form extends Component {\n  state = {\n    email: this.props.defaultEmail,\n    prevUserID: this.props.userID\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    // Any time the current user changes,\n    // Reset any parts of state that are tied to that user.\n    // In this simple example, that's just the email.\n    if (props.userID !== state.prevUserID) {\n      return {\n        prevUserID: props.userID,\n        email: props.defaultEmail\n      };\n    }\n    return null;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Connections for a Chat Application\nDESCRIPTION: This snippet defines the utility function `createConnection` for a chat application. It validates the server URL and room ID, providing connection methods `connect`, `disconnect`, and event handling. It showcases the usage of callbacks to simulate receiving messages at random intervals.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection({ serverUrl, roomId }) {\n  // A real implementation would actually connect to the server\n  if (typeof serverUrl !== 'string') {\n    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n  }\n  if (typeof roomId !== 'string') {\n    throw Error('Expected roomId to be a string. Received: ' + roomId);\n  }\n  let intervalId;\n  let messageCallback;\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n      clearInterval(intervalId);\n      intervalId = setInterval(() => {\n        if (messageCallback) {\n          if (Math.random() > 0.5) {\n            messageCallback('hey')\n          } else {\n            messageCallback('lol');\n          }\n        }\n      }, 3000);\n    },\n    disconnect() {\n      clearInterval(intervalId);\n      messageCallback = null;\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl + '');\n    },\n    on(event, callback) {\n      if (messageCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'message') {\n        throw Error('Only \"message\" event is supported.');\n      }\n      messageCallback = callback;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timer with Adjustable Delay using Effect Events in React (JavaScript)\nDESCRIPTION: This React component uses useState, useEffect, and experimental useEffectEvent to implement an adjustable timer. The delay and increment values can be changed by the user, but updating the delay does not affect the running interval due to the use of stale closure; the setInterval is not recreated on delay change, causing the bug. Key parameters are count (displayed), increment (by how much count increases per tick), and delay (interval period, adjustable by buttons), with controls for each. Dependencies include React experimental API, and all logic is contained within the component. Output is a rendered, interactive timer UI, but delay adjustments have no effect until problem is fixed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n  const [delay, setDelay] = useState(100);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(c => c + increment);\\n  });\\n\\n  const onMount = useEffectEvent(() => {\\n    return setInterval(() => {\\n      onTick();\\n    }, delay);\\n  });\\n\\n  useEffect(() => {\\n    const id = onMount();\\n    return () => {\\n      clearInterval(id);\\n    }\\n  }, []);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n      <p>\\n        Increment delay:\\n        <button disabled={delay === 100} onClick={() => {\\n          setDelay(d => d - 100);\\n        }}>–100 ms</button>\\n        <b>{delay} ms</b>\\n        <button onClick={() => {\\n          setDelay(d => d + 100);\\n        }}>+100 ms</button>\\n      </p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing a Child Component with React.memo\nDESCRIPTION: This code demonstrates wrapping the `List` component with `React.memo`. This higher-order component tells React to skip re-rendering `List` if its props (in this case, `items`) have not changed since the last render. This optimization works effectively only if the props passed to it have stable references.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js {3,5}\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n  // ...\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Contexts from a Separate File in React\nDESCRIPTION: Demonstrates how to create and export contexts from a dedicated file, allowing them to be imported and used across different components in the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Contexts.js\nimport { createContext } from 'react';\n\nexport const ThemeContext = createContext('light');\nexport const AuthContext = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Hook in Multiple React Components\nDESCRIPTION: Example showing how to use the custom useOnlineStatus Hook in both a StatusBar and SaveButton component, demonstrating how custom Hooks allow for logic reuse across different UI components without duplication.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <SaveButton />\n      <StatusBar />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Individual JSX Nodes with useMemo in React\nDESCRIPTION: This snippet demonstrates how to wrap individual JSX nodes in useMemo to prevent unnecessary re-renders. By memoizing the List component's JSX node based on visibleTodos dependency, React will skip re-rendering when the dependency hasn't changed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList({ todos, tab, theme }) {\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  const children = useMemo(() => <List items={visibleTodos} />, [visibleTodos]);\n  return (\n    <div className={theme}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useTransition in a Component\nDESCRIPTION: Demonstrates how to import `useTransition` from React and call it at the top level of a functional component (`TabContainer`). This sets up the component to use transitions for state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useTransition } from 'react';\n\nfunction TabContainer() {\n  const [isPending, startTransition] = useTransition();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Counter Component Using useReducer\nDESCRIPTION: A complete example of a Counter component that uses useReducer to manage state. The reducer handles an 'incremented_age' action to update the age value in state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  if (action.type === 'incremented_age') {\n    return {\n      age: state.age + 1\n    };\n  }\n  throw Error('Unknown action.');\n}\n\nexport default function Counter() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  return (\n    <>\n      <button onClick={() => {\n        dispatch({ type: 'incremented_age' })\n      }}>\n        Increment age\n      </button>\n      <p>Hello! You are {state.age}.</p>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Editable Task List with Context Actions - React JavaScript\nDESCRIPTION: Displays a list of tasks retrieved from context and allows editing or deleting each task. Uses state for UI (edit mode), and dispatches 'changed' and 'deleted' actions. Relies on TasksContext for state and mutator access. Requires parent context provider, and outputs interactive task elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useContext } from 'react';\\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useTasks();\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useTasksDispatch();\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\"checkbox\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized State Updates in Event Handlers\nDESCRIPTION: Demonstrates the correct way to update both component and parent state within event handlers, ensuring synchronous updates in a single render pass.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Toggle({ onChange }) {\n  const [isOn, setIsOn] = useState(false);\n\n  function updateToggle(nextIsOn) {\n    // ✅ Good: Perform all updates during the event that caused them\n    setIsOn(nextIsOn);\n    onChange(nextIsOn);\n  }\n\n  function handleClick() {\n    updateToggle(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      updateToggle(true);\n    } else {\n      updateToggle(false);\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding JavaScript Variables in JSX Content\nDESCRIPTION: Demonstrates using JavaScript variables within JSX content by embedding them with curly braces inside an h1 element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Arrays with Immer in React\nDESCRIPTION: This snippet demonstrates how to use Immer to update nested arrays in React state. It shows a bucket list application where users can toggle the 'seen' status of artworks in two separate lists.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useImmer } from 'use-immer';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, updateMyList] = useImmer(\n    initialList\n  );\n  const [yourList, updateYourList] = useImmer(\n    initialList\n  );\n\n  function handleToggleMyList(id, nextSeen) {\n    updateMyList(draft => {\n      const artwork = draft.find(a =>\n        a.id === id\n      );\n      artwork.seen = nextSeen;\n    });\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    updateYourList(draft => {\n      const artwork = draft.find(a =>\n        a.id === artworkId\n      );\n      artwork.seen = nextSeen;\n    });\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={myList}\n        onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList\n        artworks={yourList}\n        onToggle={handleToggleYourList} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode Application-wide in React (JavaScript)\nDESCRIPTION: This snippet enables Strict Mode for an entire React application by importing StrictMode and wrapping the root component (<App />) during rendering. It makes use of React's createRoot API, requiring React and react-dom/client as dependencies. The root.render() method takes the StrictMode-wrapped component as input and renders it to a DOM element with id=\"root\". Outputs include extra development-time checks for all components under <StrictMode>.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\n```\n\n----------------------------------------\n\nTITLE: Nested ThemeContext Providers Example - React JSX\nDESCRIPTION: Provides a minimal JSX sample of nested ThemeContext providers for context value override demonstration. Shows literal provider usage with different values for different component subtrees. No dependencies; used for illustrating provider nesting only.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ThemeContext.Provider value=\"dark\">\\n  ...\\n  <ThemeContext.Provider value=\"light\">\\n    <Footer />\\n  </ThemeContext.Provider>\\n  ...\\n</ThemeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Array in React State\nDESCRIPTION: Demonstrates removing items from array state using filter() method to create a new array without the target item.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [artists, setArtists] = useState(initialArtists);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>\n            {artist.name}{' '}\n            <button onClick={() => {\n              setArtists(\n                artists.filter(a =>\n                  a.id !== artist.id\n                )\n              );\n            }}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Router with React Transitions\nDESCRIPTION: This snippet shows how to create a simple router component using React's useState and useTransition hooks. It demonstrates how to wrap page navigation in a transition for improved user experience.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Router() {\n  const [page, setPage] = useState('/');\n  const [isPending, startTransition] = useTransition();\n\n  function navigate(url) {\n    startTransition(() => {\n      setPage(url);\n    });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Stopwatch Implementation using useRef and useState\nDESCRIPTION: A complete stopwatch component that combines useRef for storing interval IDs with useState for time values that need to trigger renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n  const intervalRef = useRef(null);\n\n  function handleStart() {\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setNow(Date.now());\n    }, 10);\n  }\n\n  function handleStop() {\n    clearInterval(intervalRef.current);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n      <button onClick={handleStop}>\n        Stop\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying and Managing Task List in React - JavaScript\nDESCRIPTION: This code provides a TaskList component that maps over an array of tasks and renders each as a Task child, passing change/delete handlers as props. Each Task component allows editing the task text, marking as done, editing mode, and deletion. It uses useState for managing edit state per task and is driven by props for input and output. Dependencies are limited to React with useState. Key parameters are task objects, change/delete callbacks, and stateful editing UI. Output is a fully interactive list of tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TaskList({\n  tasks,\n  onChangeTask,\n  onDeleteTask\n}) {\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task\n            task={task}\n            onChange={onChangeTask}\n            onDelete={onDeleteTask}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task, onChange, onDelete }) {\n  const [isEditing, setIsEditing] = useState(false);\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            onChange({\n              ...task,\n              text: e.target.value\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          onChange({\n            ...task,\n            done: e.target.checked\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => onDelete(task.id)}>\n        Delete\n      </button>\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context for Heading Levels in React\nDESCRIPTION: This snippet demonstrates how to create a context for managing heading levels in a React application. It uses the createContext function from React to define a LevelContext with a default value of 1.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n```\n\n----------------------------------------\n\nTITLE: Managing State in React Class Components\nDESCRIPTION: Shows how to define and update state in a class component using the state property and setState method, including an event handler example.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter extends Component {\n  state = {\n    age: 42,\n  };\n\n  handleAgeChange = () => {\n    this.setState({\n      age: this.state.age + 1 \n    });\n  };\n\n  render() {\n    return (\n      <>\n        <button onClick={this.handleAgeChange}>\n        Increment age\n        </button>\n        <p>You are {this.state.age}.</p>\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Effect Cleanup Implementation in React\nDESCRIPTION: This example demonstrates the correct pattern for implementing cleanup in a useEffect hook. The cleanup function disconnects the connection established in the setup phase, providing proper resource management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => {\n    connection.disconnect();\n  };\n}, [serverUrl, roomId]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Connection with useEffect in React\nDESCRIPTION: This snippet demonstrates a React application that connects to a chat room using useEffect. It shows proper cleanup with disconnect on unmount, and how React verifies synchronization by remounting components in development.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending the Messenger Reducer with a Dedicated Message Sending Action\nDESCRIPTION: Adds a new 'sent_message' action type to the reducer to handle message sending specifically, separating it from message editing actions for better semantic clarity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialState = {\n  selectedId: 0,\n  message: 'Hello',\n};\n\nexport function messengerReducer(state, action) {\n  switch (action.type) {\n    case 'changed_selection': {\n      return {\n        ...state,\n        selectedId: action.contactId,\n        message: '',\n      };\n    }\n    case 'edited_message': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    case 'sent_message': {\n      return {\n        ...state,\n        message: '',\n      };\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Hooks in React Components and Custom Hooks\nDESCRIPTION: This snippet demonstrates the correct way to use Hooks at the top level of a function component and a custom Hook. It shows the usage of useState in both contexts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/rules-of-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter() {\n  // ✅ Good: top-level in a function component\n  const [count, setCount] = useState(0);\n  // ...\n}\n\nfunction useWindowWidth() {\n  // ✅ Good: top-level in a custom Hook\n  const [width, setWidth] = useState(window.innerWidth);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Application with State Preservation\nDESCRIPTION: A React chat application demonstrating basic state management where the input state persists between recipient changes. Uses useState hook for managing the selected contact and chat text.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { name: 'Taylor', email: 'taylor@mail.com' },\n  { name: 'Alice', email: 'alice@mail.com' },\n  { name: 'Bob', email: 'bob@mail.com' }\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Size Based on Props in React\nDESCRIPTION: This snippet demonstrates how to create an Avatar component that adjusts the image size based on a size prop. It uses conditional logic to determine the appropriate thumbnail size.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n  let thumbnailSize = 's';\n  if (size > 90) {\n    thumbnailSize = 'b';\n  }\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person, thumbnailSize)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <>\n      <Avatar\n        size={40}\n        person={{ \n          name: 'Gregorio Y. Zara', \n          imageId: '7vQD0fP'\n        }}\n      />\n      <Avatar\n        size={120}\n        person={{ \n          name: 'Gregorio Y. Zara', \n          imageId: '7vQD0fP'\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Effect Dependencies with useCallback in React\nDESCRIPTION: Demonstrates the problem of using a function as a dependency in useEffect, and how useCallback can solve it by memoizing the function to prevent unnecessary effect executions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  function createOptions() {\n    return {\n      serverUrl: 'https://localhost:1234',\n      roomId: roomId\n    };\n  }\n\n  useEffect(() => {\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Wrapping a State Update with startTransition\nDESCRIPTION: Illustrates using the `startTransition` function to wrap a state update (`setTab`). This marks the state change triggered by `selectTab` as a non-blocking transition, allowing the UI to remain responsive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction TabContainer() {\n  const [isPending, startTransition] = useTransition();\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n    startTransition(() => {\n      setTab(nextTab);\n    });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useState Hook Logic in JavaScript\nDESCRIPTION: A simplified implementation of React's useState Hook showing how state pairs are managed in an array and how component re-rendering works. Includes a Gallery component example that manages state for a sculpture slideshow.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet componentHooks = [];\nlet currentHookIndex = 0;\n\nfunction useState(initialState) {\n  let pair = componentHooks[currentHookIndex];\n  if (pair) {\n    currentHookIndex++;\n    return pair;\n  }\n\n  pair = [initialState, setState];\n\n  function setState(nextState) {\n    pair[0] = nextState;\n    updateDOM();\n  }\n\n  componentHooks[currentHookIndex] = pair;\n  currentHookIndex++;\n  return pair;\n}\n\nfunction Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return {\n    onNextClick: handleNextClick,\n    onMoreClick: handleMoreClick,\n    header: `${sculpture.name} by ${sculpture.artist}`,\n    counter: `${index + 1} of ${sculptureList.length}`,\n    more: `${showMore ? 'Hide' : 'Show'} details`,\n    description: showMore ? sculpture.description : null,\n    imageSrc: sculpture.url,\n    imageAlt: sculpture.alt\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using StrictMode to Reveal Effect Bugs Early\nDESCRIPTION: Wrapping the application in StrictMode to trigger the extra setup+cleanup cycle during development, which helps identify the missing cleanup function earlier in the development process.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory-Efficient State Updates with Immer in React\nDESCRIPTION: This component manages a hierarchical travel plan with recursive deletion of completed items. It uses useImmer to efficiently update state, removing deleted items and their children from the object to improve memory usage.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useImmer } from 'use-immer';\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {\n  const [plan, updatePlan] = useImmer(initialTravelPlan);\n\n  function handleComplete(parentId, childId) {\n    updatePlan(draft => {\n      // Remove from the parent place's child IDs.\n      const parent = draft[parentId];\n      parent.childIds = parent.childIds\n        .filter(id => id !== childId);\n\n      // Forget this place and all its subtree.\n      deleteAllChildren(childId);\n      function deleteAllChildren(id) {\n        const place = draft[id];\n        place.childIds.forEach(deleteAllChildren);\n        delete draft[id];\n      }\n    });\n  }\n\n  const root = plan[0];\n  const planetIds = root.childIds;\n  return (\n    <>\n      <h2>Places to visit</h2>\n      <ol>\n        {planetIds.map(id => (\n          <PlaceTree\n            key={id}\n            id={id}\n            parentId={0}\n            placesById={plan}\n            onComplete={handleComplete}\n          />\n        ))}\n      </ol>\n    </>\n  );\n}\n\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\n  const place = placesById[id];\n  const childIds = place.childIds;\n  return (\n    <li>\n      {place.title}\n      <button onClick={() => {\n        onComplete(parentId, id);\n      }}>\n        Complete\n      </button>\n      {childIds.length > 0 &&\n        <ol>\n          {childIds.map(childId => (\n            <PlaceTree\n              key={childId}\n              id={childId}\n              parentId={id}\n              placesById={placesById}\n              onComplete={onComplete}\n            />\n          ))}\n        </ol>\n      }\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Context with State in React\nDESCRIPTION: Example showing how to update context values by combining context with state, allowing dynamic changes to the provided context value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyPage() {\n  const [theme, setTheme] = useState('dark');\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Form />\n      <Button onClick={() => {\n        setTheme('light');\n      }}>\n        Switch to light theme\n      </Button>\n    </ThemeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hook for Select Options in React\nDESCRIPTION: This custom hook useSelectOptions manages the state for select options, fetching data from an API based on the provided URL. It returns the list of options, the selected ID, and a function to update the selection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { fetchData } from './api.js';\n\nexport function useSelectOptions(url) {\n  const [list, setList] = useState(null);\n  const [selectedId, setSelectedId] = useState('');\n  useEffect(() => {\n    if (url === null) {\n      return;\n    }\n\n    let ignore = false;\n    fetchData(url).then(result => {\n      if (!ignore) {\n        setList(result);\n        setSelectedId(result[0].id);\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, [url]);\n  return [list, selectedId, setSelectedId];\n}\n```\n\n----------------------------------------\n\nTITLE: Example App Component Structure for Server Rendering\nDESCRIPTION: Example of a React root component that returns a complete HTML document structure, which is required for server-side rendering. This component includes the html, head, and body tags needed for a complete document.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <html>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/styles.css\"></link>\n        <title>My app</title>\n      </head>\n      <body>\n        <Router />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Creation\nDESCRIPTION: Shows a simple example of creating and exporting a React component that renders a congratulatory message.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Congratulations() {\n  return (\n    <h1>Good job!</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TasksProvider Component\nDESCRIPTION: Creates a provider component that combines reducer state management with context providers to share state with child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        {children}\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription with Cleanup\nDESCRIPTION: Adding an event listener in useEffect and properly removing it in the cleanup function to avoid memory leaks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  function handleScroll(e) {\n    console.log(window.scrollX, window.scrollY);\n  }\n  window.addEventListener('scroll', handleScroll);\n  return () => window.removeEventListener('scroll', handleScroll);\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Updating State in an Event Handler\nDESCRIPTION: Example of updating state in response to a user interaction by calling the set function in an event handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleClick() {\n  setName('Robin');\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component Using Custom Ref Handle\nDESCRIPTION: Example of a parent Form component that uses a ref to call a custom method exposed by the child MyInput component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n  const ref = useRef(null);\n\n  function handleClick() {\n    ref.current.focus();\n    // This won't work because the DOM node isn't exposed:\n    // ref.current.style.opacity = 0.5;\n  }\n\n  return (\n    <form>\n      <MyInput placeholder=\"Enter your name\" ref={ref} />\n      <button type=\"button\" onClick={handleClick}>\n        Edit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating act Import from react-dom/test-utils to react\nDESCRIPTION: This snippet shows how to update the import statement for the 'act' function, moving it from react-dom/test-utils to the main react package.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n- import {act} from 'react-dom/test-utils'\n+ import {act} from 'react';\n```\n\n----------------------------------------\n\nTITLE: Migrating from createRef to useRef in Function Component (JSX)\nDESCRIPTION: An example showing how to convert a class component using createRef to a function component using useRef. This demonstrates the equivalent functionality using modern React hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createRef.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Image Carousel with useRef and flushSync for Smooth Scrolling\nDESCRIPTION: An improved React image carousel that uses useRef and flushSync to ensure the DOM is updated before scrolling to the active image. This ensures the scrollIntoView operation targets the correct element after state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport default function CatFriends() {\n  const selectedRef = useRef(null);\n  const [index, setIndex] = useState(0);\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => {\n          flushSync(() => {\n            if (index < catList.length - 1) {\n              setIndex(index + 1);\n            } else {\n              setIndex(0);\n            }\n          });\n          selectedRef.current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest',\n            inline: 'center'\n          });            \n        }}>\n          Next\n        </button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat, i) => (\n            <li\n              key={cat.id}\n              ref={index === i ?\n                selectedRef :\n                null\n              }\n            >\n              <img\n                className={\n                  index === i ?\n                    'active'\n                    : ''\n                }\n                src={cat.imageUrl}\n                alt={'Cat #' + cat.id}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nconst catList = [];\nfor (let i = 0; i < 10; i++) {\n  catList.push({\n    id: i,\n    imageUrl: 'https://loremflickr.com/250/200/cat?lock=' + i\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for React <Suspense> in JavaScript\nDESCRIPTION: Demonstrates the fundamental usage of the `<Suspense>` component in React. It shows how to wrap a child component (`SomeComponent`) and provide a `fallback` UI (`<Loading />`) to display while the child is loading or suspended. This is the core syntax presented in the introduction.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <SomeComponent />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Input Focus Implementation with React Refs\nDESCRIPTION: Complete example showing how to focus an input element using refs and a button click handler\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Textarea Value with React State - JavaScript\nDESCRIPTION: This JavaScript code presents an example of a controlled React component for a textarea field. It declares a state variable 'postContent', uses it as the value of the textarea, and updates it on every keystroke, ensuring the UI always reflects the current state. The dependencies are React and the useState hook. The textarea receives user input, and the current value is always available in state. The code must be embedded in a React environment with the necessary imports.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction NewPost() {\n  const [postContent, setPostContent] = useState(''); // Declare a state variable...\n  // ...\n  return (\n    <textarea\n      value={postContent} // ...force the input's value to match the state variable...\n      onChange={e => setPostContent(e.target.value)} // ... and update the state variable on any edits!\n    />\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Logical AND Operator in React\nDESCRIPTION: Using the logical AND (&&) operator to conditionally render content only when a condition is true. This approach is often used when you want to render something or nothing based on a condition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  <li className=\"item\">\n    {name} {isPacked && '✅'}\n  </li>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing useOptimistic in a React Component in JavaScript\nDESCRIPTION: This code snippet shows a React component using the useOptimistic Hook to implement optimistic UI updates. It includes user-provided functions to handle state updates and a UI form that updates immediately as actions are dispatched.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useOptimistic.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useOptimistic } from 'react';\n\nfunction AppContainer() {\n  const [optimisticState, addOptimistic] = useOptimistic(\n    state,\n    // updateFn\n    (currentState, optimisticValue) => {\n      // merge and return new state\n      // with optimistic value\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling useEffect in React Functional Components (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage pattern for calling the useEffect Hook inside a React functional component. The call to useEffect accepts a setup function (with optional cleanup) and a dependency array to control when the effect is executed. No imports or state are shown in this reference syntax example. It serves as a concise illustration for developers to understand how useEffect should be written.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(setup, dependencies?)\n```\n\n----------------------------------------\n\nTITLE: Pure React Component with Props\nDESCRIPTION: The corrected version of the Cup component that receives guest number as a prop, making it pure and predictable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Key Value as Separate Prop in React JSX\nDESCRIPTION: This snippet demonstrates how to pass the 'key' value as a separate prop to a component in React. Since 'key' is a special prop used by React internally, it's not accessible within the component. To make the value available, it needs to be passed as a different prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/special-props.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ListItemWrapper key={result.id} id={result.id} />\n```\n\n----------------------------------------\n\nTITLE: Updating State with the Set Function\nDESCRIPTION: Demonstrates how to update state using the set function returned by useState. Shows both direct value updates and functional updates that reference the previous state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [name, setName] = useState('Edward');\n\nfunction handleClick() {\n  setName('Taylor');\n  setAge(a => a + 1);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing jumpTo function for time travel in React Game\nDESCRIPTION: Implementation of the jumpTo function that updates the currentMove state variable and sets xIsNext based on the move number. This enables time travel in the game by allowing users to jump to previous game states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Game() {\n  // ...\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Element Height with useLayoutEffect in React\nDESCRIPTION: This snippet demonstrates using `useLayoutEffect` to measure the height of a DOM element referenced by `useRef` immediately after it's rendered but before the browser repaints. The measured height is stored in state using `useState`. The empty dependency array `[]` ensures this effect runs only once after the initial render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useRef, useLayoutEffect } from 'react';\n\nfunction Tooltip() {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n  }, []);\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Preloading Data Using React `cache`\nDESCRIPTION: Demonstrates a data preloading pattern. A parent component (`Page`) calls the cached async function (`getUser`) early, initiating the data fetch. The child component (`Profile`) later calls the same cached function; if the data is already fetched and cached, it reads directly from the cache, reducing wait time.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx [[2, 6, \"await getUser(id)\"], [1, 17, \"getUser(id)\"]]\nconst getUser = cache(async (id) => {\n  return await db.user.query(id);\n});\n\nasync function Profile({id}) {\n  const user = await getUser(id);\n  return (\n    <section>\n      <img src={user.profilePic} />\n      <h2>{user.name}</h2>\n    </section>\n  );\n}\n\nfunction Page({id}) {\n  // ✅ Good: start fetching the user data\n  getUser(id);\n  // ... some computational work\n  return (\n    <>\n      <Profile id={id} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Event Handlers Using Action Dispatching in React\nDESCRIPTION: Refactored event handlers that dispatch actions instead of directly setting state. This is the first step of moving from useState to useReducer, where actions describe what the user did rather than how to update the state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleAddTask(text) {\n  dispatch({\n    type: 'added',\n    id: nextId++,\n    text: text,\n  });\n}\n\nfunction handleChangeTask(task) {\n  dispatch({\n    type: 'changed',\n    task: task,\n  });\n}\n\nfunction handleDeleteTask(taskId) {\n  dispatch({\n    type: 'deleted',\n    id: taskId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Imported Reducer with useReducer in React (JavaScript)\nDESCRIPTION: Shows a refactored `TaskApp` component that imports the `tasksReducer` function from a separate file (`tasksReducer.js`). This demonstrates separating state logic from the component for better organization, while the component's core functionality (using `useReducer` and dispatching actions) remains the same.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport tasksReducer from './tasksReducer.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Independent Gallery Components in React\nDESCRIPTION: This snippet shows how to render multiple instances of the Gallery component, each with its own isolated state. It demonstrates that changing the state of one instance does not affect the others.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from './Gallery.js';\n\nexport default function Page() {\n  return (\n    <div className=\"Page\">\n      <Gallery />\n      <Gallery />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useEffect Hook in React\nDESCRIPTION: Imports the `useEffect` Hook from the 'react' library. This is the first step required to use Effects within a React functional component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Connection Effect in React\nDESCRIPTION: Demonstrates how to create an Effect that manages a chat room connection, including connection setup and cleanup. The Effect synchronizes with a chat server based on the roomId prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up React Context Providers\nDESCRIPTION: Shows how to wrap components with Context Providers to make tasks and dispatch functions available throughout the component tree without prop drilling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<TasksContext.Provider value={tasks}>\n  <TasksDispatchContext.Provider value={dispatch}>\n    <h1>Day off in Kyoto</h1>\n    <AddTask />\n    <TaskList />\n  </TasksDispatchContext.Provider>\n</TasksContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Complete List Component with Filtering and Mapping\nDESCRIPTION: A full React component that filters an array of people for chemists and renders them as a list with images and details.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const chemists = people.filter(person =>\n    person.profession === 'chemist'\n  );\n  const listItems = chemists.map(person =>\n    <li>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return <ul>{listItems}</ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing calculateWinner Function for Tic-Tac-Toe\nDESCRIPTION: A helper function that checks if a player has won the game by examining all possible winning combinations of three squares in a row.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useChatRoom Hook to Accept onReceiveMessage Handler\nDESCRIPTION: This snippet shows how to modify the useChatRoom Hook to accept an onReceiveMessage handler as a parameter. It updates the useEffect dependency array to include the new handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      onReceiveMessage(msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Playback with React Refs and State (Solution)\nDESCRIPTION: This React component demonstrates controlling an HTML5 video element using `useRef` to access the DOM node and `useState` to manage the playback state. The `handleClick` function toggles the state and calls the `play()` or `pause()` method on the video element via the ref. It also includes `onPlay` and `onPause` event handlers on the video element to synchronize the component's state with the browser's native controls.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const ref = useRef(null);\n\n  function handleClick() {\n    const nextIsPlaying = !isPlaying;\n    setIsPlaying(nextIsPlaying);\n\n    if (nextIsPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <video\n        width=\"250\"\n        ref={ref}\n        onPlay={() => setIsPlaying(true)}\n        onPause={() => setIsPlaying(false)}\n      >\n        <source\n          src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n    </>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Resource Preloading APIs Implementation in React\nDESCRIPTION: Demonstrates the usage of new React 19 resource preloading APIs including prefetchDNS, preconnect, preload, and preinit. These APIs enable optimizing resource loading for better page performance by preloading fonts, scripts, and stylesheets.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prefetchDNS, preconnect, preload, preinit } from 'react-dom'\nfunction MyComponent() {\n  preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly\n  preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font\n  preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet\n  prefetchDNS('https://...') // when you may not actually request anything from this host\n  preconnect('https://...') // when you will request something but aren't sure what\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Reactive from Non-Reactive Logging Logic\nDESCRIPTION: This example shows how to log visit data when roomId changes while including the current notificationCount without making the effect reactive to notificationCount changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Chat({ roomId, notificationCount }) {\n  const onVisit = useEffectEvent(visitedRoomId => {\n    logVisit(visitedRoomId, notificationCount);\n  });\n\n  useEffect(() => {\n    onVisit(roomId);\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from findDOMNode to Refs in React Components\nDESCRIPTION: This snippet shows how to replace the deprecated findDOMNode method with a ref-based approach for accessing DOM nodes in React components. It demonstrates the change in the context of an AutoselectingInput component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\nimport {findDOMNode} from 'react-dom';\n\nfunction AutoselectingInput() {\n  useEffect(() => {\n    const input = findDOMNode(this);\n    input.select()\n  }, []);\n\n  return <input defaultValue=\"Hello\" />;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// After\nfunction AutoselectingInput() {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current.select();\n  }, []);\n\n  return <input ref={ref} defaultValue=\"Hello\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data-Fetching Albums Component with React.use\nDESCRIPTION: A component that uses React.use to fetch albums data for an artist, demonstrating the Suspense integration for data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Albums({ artistId }) {\n  const albums = use(fetchData(`/${artistId}/albums`));\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Functions with useMemo in React\nDESCRIPTION: Using useMemo to memoize a function by returning another function from the calculation. This approach prevents the function from being recreated on every render unless its dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page({ productId, referrer }) {\n  const handleSubmit = useMemo(() => {\n    return (orderDetails) => {\n      post('/product/' + productId + '/buy', {\n        referrer,\n        orderDetails\n      });\n    };\n  }, [productId, referrer]);\n\n  return <Form onSubmit={handleSubmit} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Page Component Implementation\nDESCRIPTION: Full implementation of the Page component showing nested sections and headings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  return (\n    <Section level={1}>\n      <Heading>Title</Heading>\n      <Section level={2}>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section level={3}>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section level={4}>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Children with RowList Component\nDESCRIPTION: Complete example showing how to wrap each child in a Row container using Children.map\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n  return (\n    <div className=\"RowList\">\n      {Children.map(children, child =>\n        <div className=\"Row\">\n          {child}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in React Components\nDESCRIPTION: Demonstrates how to use the useContext hook to consume context values within functional components. Examples are provided for both ThemeContext and AuthContext.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ...\n}\n\nfunction Profile() {\n  const currentUser = useContext(AuthContext);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State for Popup Container in React\nDESCRIPTION: The snippet demonstrates initializing a state variable `popupContainer` using React's `useState` to hold the DOM node, where the portal will render the popup content. This setup is crucial for integrating React components with third-party widgets.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [popupContainer, setPopupContainer] = useState(null);\n```\n\n----------------------------------------\n\nTITLE: Styling Form Labels and Inputs - CSS\nDESCRIPTION: CSS rules to display labels as block elements and space out inputs for the form component managing object state. No dependencies; ensures the form components are visually clear.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\\ninput { margin-left: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Exposing a Ref to a Custom React Component - JavaScript\nDESCRIPTION: Demonstrates how a parent component can forward a ref to a custom child component (MyInput) so it can focus its internal input. The MyInput component accepts and forwards the ref prop to its <input>. The parent attaches its ref and invokes focus() directly. Dependency: React, useRef. Limitation: For correct ref forwarding, MyInput should be wrapped with React.forwardRef in production.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n};\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using renderToPipeableStream with a React Component\nDESCRIPTION: Example showing how to use renderToPipeableStream to render a React component to HTML and stream it in a Node.js application. This includes setting content headers and piping the output to the response.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\nconst { pipe } = renderToPipeableStream(<App />, {\n  bootstrapScripts: ['/main.js'],\n  onShellReady() {\n    response.setHeader('content-type', 'text/html');\n    pipe(response);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: React Button with Click Handler\nDESCRIPTION: Implementation of a button component with a click event handler that shows an alert message.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-right: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing useDeferredValue in a Search Component\nDESCRIPTION: Example of implementing useDeferredValue in a SearchPage component to defer the query value updates. This pattern is useful for improving performance in search interfaces.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State in React Accordion Component\nDESCRIPTION: Shows how to initialize and manage active panel state in an Accordion component using the useState hook. The state tracks the active panel index.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [activeIndex, setActiveIndex] = useState(0);\n```\n\n----------------------------------------\n\nTITLE: Toggling Element Presence and Direct DOM Removal using React Refs\nDESCRIPTION: This React component demonstrates two ways to handle element visibility: standard conditional rendering with `useState` and direct DOM manipulation using `useRef` and the `remove()` API. It highlights the potential conflict and application crash when mixing React state management with direct, uncontrolled DOM removal.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Counter() {\n  const [show, setShow] = useState(true);\n  const ref = useRef(null);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setShow(!show);\n        }}>\n        Toggle with setState\n      </button>\n      <button\n        onClick={() => {\n          ref.current.remove();\n        }}>\n        Remove from the DOM\n      </button>\n      {show && <p ref={ref}>Hello world</p>}\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\np,\nbutton {\n  display: block;\n  margin: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing hydrateRoot and Hydrating an App Root – React DOM Client – JavaScript\nDESCRIPTION: This snippet shows the standard pattern for importing hydrateRoot from react-dom/client, acquiring a DOM root by ID, and hydrating it with a React component, typically used in the application entry point. The code ensures React takes control of the existing server-rendered HTML and begins managing events and state. Dependencies: react-dom/client. Inputs: a DOM element, a React node. No output is returned. This pattern is foundational for SSR hydration in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\nconst root = hydrateRoot(domNode, reactNode);\n```\n\n----------------------------------------\n\nTITLE: Comparing Single vs Multiple State Variables in React\nDESCRIPTION: Two approaches to managing related state: using separate state variables with useState or combining them into a single object. Each approach has different implications for state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [x, setX] = useState(0);\nconst [y, setY] = useState(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Size Toggle with Context in React\nDESCRIPTION: This snippet demonstrates how to use React Context to manage and pass down the image size state, replacing prop drilling. It includes components for rendering a list of places with images that can be resized.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useContext } from 'react';\nimport { places } from './data.js';\nimport { getImageUrl } from './utils.js';\nimport { ImageSizeContext } from './Context.js';\n\nexport default function App() {\n  const [isLarge, setIsLarge] = useState(false);\n  const imageSize = isLarge ? 150 : 100;\n  return (\n    <ImageSizeContext\n      value={imageSize}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isLarge}\n          onChange={e => {\n            setIsLarge(e.target.checked);\n          }}\n        />\n        Use large images\n      </label>\n      <hr />\n      <List />\n    </ImageSizeContext>\n  )\n}\n\nfunction List() {\n  const listItems = places.map(place =>\n    <li key={place.id}>\n      <Place place={place} />\n    </li>\n  );\n  return <ul>{listItems}</ul>;\n}\n\nfunction Place({ place }) {\n  return (\n    <>\n      <PlaceImage place={place} />\n      <p>\n        <b>{place.name}</b>\n        {': ' + place.description}\n      </p>\n    </>\n  );\n}\n\nfunction PlaceImage({ place }) {\n  const imageSize = useContext(ImageSizeContext);\n  return (\n    <img\n      src={getImageUrl(place)}\n      alt={place.name}\n      width={imageSize}\n      height={imageSize}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Client ID Consistency with useId\nDESCRIPTION: These JavaScript snippets ensure consistent IDs across server and client by using the same identifierPrefix for hydration on the client and server rendering, bridging the React server-side and client-side rendered component trees.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useId.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Server\nimport { renderToPipeableStream } from 'react-dom/server';\n\nconst { pipe } = renderToPipeableStream(\n  <App />,\n  { identifierPrefix: 'react-app1' }\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Client\nimport { hydrateRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\nconst root = hydrateRoot(\n  domNode,\n  reactNode,\n  { identifierPrefix: 'react-app1' }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Composing Custom Hooks for Cursor Trailing Effect in React\nDESCRIPTION: This example demonstrates how to create and compose custom Hooks in React. It uses usePointerPosition to track cursor coordinates and useDelayedValue to create a delayed version of a value, resulting in a trailing dots effect following the cursor.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePointerPosition } from './usePointerPosition.js';\nimport { useDelayedValue } from './useDelayedValue.js';\n\nexport default function Canvas() {\n  const pos1 = usePointerPosition();\n  const pos2 = useDelayedValue(pos1, 100);\n  const pos3 = useDelayedValue(pos2, 200);\n  const pos4 = useDelayedValue(pos3, 100);\n  const pos5 = useDelayedValue(pos4, 50);\n  return (\n    <>\n      <Dot position={pos1} opacity={1} />\n      <Dot position={pos2} opacity={0.8} />\n      <Dot position={pos3} opacity={0.6} />\n      <Dot position={pos4} opacity={0.4} />\n      <Dot position={pos5} opacity={0.2} />\n    </>\n  );\n}\n\nfunction Dot({ position, opacity }) {\n  return (\n    <div style={{\n      position: 'absolute',\n      backgroundColor: 'pink',\n      borderRadius: '50%',\n      opacity,\n      transform: `translate(${position.x}px, ${position.y}px)`,\n      pointerEvents: 'none',\n      left: -20,\n      top: -20,\n      width: 40,\n      height: 40,\n    }} />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  useEffect(() => {\n    function handleMove(e) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n  }, []);\n  return position;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useDelayedValue(value, delay) {\n  const [delayedValue, setDelayedValue] = useState(value);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDelayedValue(value);\n    }, delay);\n  }, [value, delay]);\n\n  return delayedValue;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { min-height: 300px; }\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Events in React Components\nDESCRIPTION: Illustrates handling of focus events in React, including onFocus and onBlur. It shows how to detect focus on child elements, parent elements, and focus entering or leaving the whole subtree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FocusExample() {\n  return (\n    <div\n      tabIndex={1}\n      onFocus={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('focused parent');\n        } else {\n          console.log('focused child', e.target.name);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus entered parent');\n        }\n      }}\n      onBlur={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('unfocused parent');\n        } else {\n          console.log('unfocused child', e.target.name);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus left parent');\n        }\n      }}\n    >\n      <label>\n        First name:\n        <input name=\"firstName\" />\n      </label>\n      <label>\n        Last name:\n        <input name=\"lastName\" />\n      </label>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Double Interval in React Effect\nDESCRIPTION: Demonstrates how to properly handle interval cleanup in a React useEffect hook to prevent memory leaks and double execution. Uses clearInterval in the cleanup function to properly manage intervals.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    function onTick() {\n      setCount(c => c + 1);\n    }\n\n    const intervalId = setInterval(onTick, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hook in React Components\nDESCRIPTION: Illustrates how to utilize the custom Hook useOnlineStatus within React components, such as StatusBar and SaveButton, to manage UI behavior based on the network's online status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <SaveButton />\n      <StatusBar />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing renderToString from Client Code\nDESCRIPTION: Demonstrates how to replace client-side usage of renderToString with createRoot and DOM manipulation to avoid including server packages in client bundles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToString.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚩 Unnecessary: using renderToString on the client\nimport { renderToString } from 'react-dom/server';\n\nconst html = renderToString(<MyIcon />);\nconsole.log(html); // For example, \"<svg>...</svg>\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Action Prop in a React Tab Button - JavaScript\nDESCRIPTION: This snippet defines a TabButton functional component that allows a parent component to provide a callback through the action prop, which is then wrapped in useTransition to mark state updates as transitions. Dependencies include React and its useTransition hook. The code demonstrates conditional rendering based on an isActive boolean prop and invokes the provided action in a React transition on button click. Inputs are action (function), children (ReactNode), and isActive (boolean); output is JSX for the tab button or a bolded label if active.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function TabButton({ action, children, isActive }) {\n  const [isPending, startTransition] = useTransition();\n  if (isActive) {\n    return <b>{children}</b>\n  }\n  return (\n    <button onClick={() => {\n      startTransition(() => {\n        action();\n      });\n    }}>\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useOptimistic React Hook in JavaScript\nDESCRIPTION: This code snippet demonstrates the basic initialization of the useOptimistic React Hook in a React component. It is used to manage and update the UI optimistically, accepting the current state and a function that returns the optimistic state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useOptimistic.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [optimisticState, addOptimistic] = useOptimistic(state, updateFn);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Independent State in Multiple Counter Components\nDESCRIPTION: This example shows two Counter components rendered side by side, each with its own independent state. It illustrates how React isolates state between components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  return (\n    <div>\n      <Counter />\n      <Counter />\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Packing List with Hidden Packed Items in React\nDESCRIPTION: A React component that filters items from the packing list by returning null for packed items. This demonstrates how to completely omit elements from rendering based on a condition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return null;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Profile Editor Component\nDESCRIPTION: This snippet shows how to create a profile editor component in React. It uses multiple useState hooks to manage form inputs and editing state, demonstrating conditional rendering based on state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function EditProfile() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [firstName, setFirstName] = useState('Jane');\n  const [lastName, setLastName] = useState('Jacobs');\n\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      setIsEditing(!isEditing);\n    }}>\n      <label>\n        First name:{' '}\n        {isEditing ? (\n          <input\n            value={firstName}\n            onChange={e => {\n              setFirstName(e.target.value)\n            }}\n          />\n        ) : (\n          <b>{firstName}</b>\n        )}\n      </label>\n      <label>\n        Last name:{' '}\n        {isEditing ? (\n          <input\n            value={lastName}\n            onChange={e => {\n              setLastName(e.target.value)\n            }}\n          />\n        ) : (\n          <b>{lastName}</b>\n        )}\n      </label>\n      <button type=\"submit\">\n        {isEditing ? 'Save' : 'Edit'} Profile\n      </button>\n      <p><i>Hello, {firstName} {lastName}!</i></p>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Chat Room Example - JavaScript\nDESCRIPTION: This example provides a complete interactive chat application using React. It includes state management for server URL and room ID, and demonstrates dynamic changes to Effect dependencies as the chat room or server URL changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of 'use' with Context in React\nDESCRIPTION: A comprehensive example showing a React application using the 'use' API to read context values in different components, demonstrating its flexibility in conditional statements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createContext, use } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  )\n}\n\nfunction Form() {\n  return (\n    <Panel title=\"Welcome\">\n      <Button show={true}>Sign up</Button>\n      <Button show={false}>Log in</Button>\n    </Panel>\n  );\n}\n\nfunction Panel({ title, children }) {\n  const theme = use(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ show, children }) {\n  if (show) {\n    const theme = use(ThemeContext);\n    const className = 'button-' + theme;\n    return (\n      <button className={className}>\n        {children}\n      </button>\n    );\n  }\n  return false\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.panel-light,\n.panel-dark {\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 20px;\n}\n.panel-light {\n  color: #222;\n  background: #fff;\n}\n\n.panel-dark {\n  color: #fff;\n  background: rgb(23, 32, 42);\n}\n\n.button-light,\n.button-dark {\n  border: 1px solid #777;\n  padding: 5px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.button-dark {\n  background: #222;\n  color: #fff;\n}\n\n.button-light {\n  background: #fff;\n  color: #222;\n}\n```\n\n----------------------------------------\n\nTITLE: useCounter Hook Implementation Using useEffect-based Interval - React JavaScript\nDESCRIPTION: This useCounter implementation contains internal interval logic (setInterval/clearInterval) alongside state management. It increments a count by one every delay milliseconds, taking delay as an argument. It is written as an intermediate step, before fully extracting interval logic. Assumes only React's useState/useEffect are required.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useCounter(delay) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed React Request Counter with Updater Functions\nDESCRIPTION: Corrected implementation using updater functions to properly handle async state updates and prevent race conditions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(p => p + 1);\n    await delay(3000);\n    setPending(p => p - 1);\n    setCompleted(c => c + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy     \n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Class Component to Function Component in React\nDESCRIPTION: Example of migrating a simple Greeting class component to a function component, demonstrating props handling and component structure changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\nexport default function App() {\n  return (\n    <>\n      <Greeting name=\"Sara\" />\n      <Greeting name=\"Cahal\" />\n      <Greeting name=\"Edite\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tic-Tac-Toe Board Implementation with Turn Logic\nDESCRIPTION: The complete Board component implementation with alternating turns and prevention of overwriting squares.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    if (squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Image Carousel in React with useState\nDESCRIPTION: A React component that implements a basic image carousel. The component uses useState to track the currently active image and provides a 'Next' button to cycle through images.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function CatFriends() {\n  const [index, setIndex] = useState(0);\n  return (\n    <>\n      <nav>\n        <button onClick={() => {\n          if (index < catList.length - 1) {\n            setIndex(index + 1);\n          } else {\n            setIndex(0);\n          }\n        }}>\n          Next\n        </button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat, i) => (\n            <li key={cat.id}>\n              <img\n                className={\n                  index === i ?\n                    'active' :\n                    ''\n                }\n                src={cat.imageUrl}\n                alt={'Cat #' + cat.id}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nconst catList = [];\nfor (let i = 0; i < 10; i++) {\n  catList.push({\n    id: i,\n    imageUrl: 'https://loremflickr.com/250/200/cat?lock=' + i\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Form Updates with useOptimistic Hook in React\nDESCRIPTION: This example showcases the `useOptimistic` Hook used for updating user interfaces optimistically. When a form is submitted, it reflects changes immediately with a 'Sending...' label, giving a feel of responsiveness while waiting for server confirmation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useOptimistic, useState, useRef } from \\\"react\\\";\\nimport { deliverMessage } from \\\"./actions.js\\\";\\n\\nfunction Thread({ messages, sendMessage }) {\\n  const formRef = useRef();\\n  async function formAction(formData) {\\n    addOptimisticMessage(formData.get(\\\"message\\\"));\\n    formRef.current.reset();\\n    await sendMessage(formData);\\n  }\\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\\n    messages,\\n    (state, newMessage) => [\\n      ...state,\\n      {\\n        text: newMessage,\\n        sending: true\\n      }\\n    ]\\n  );\\n\\n  return (\\n    <>\\n      {optimisticMessages.map((message, index) => (\\n        <div key={index}>\\n          {message.text}\\n          {!!message.sending && <small> (Sending...)</small>}\\n        </div>\\n      ))}\\n      <form action={formAction} ref={formRef}>\\n        <input type=\\\"text\\\" name=\\\"message\\\" placeholder=\\\"Hello!\\\" />\\n        <button type=\\\"submit\\\">Send</button>\\n      </form>\\n    </>\\n  );\\n}\\n\\nexport default function App() {\\n  const [messages, setMessages] = useState([\\n    { text: \\\"Hello there!\\\", sending: false, key: 1 }\\n  ]);\\n  async function sendMessage(formData) {\\n    const sentMessage = await deliverMessage(formData.get(\\\"message\\\"));\\n    setMessages((messages) => [...messages, { text: sentMessage }]);\\n  }\\n  return <Thread messages={messages} sendMessage={sendMessage} />;\\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function deliverMessage(message) {\\n  await new Promise((res) => setTimeout(res, 1000));\\n  return message;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form State Management in React\nDESCRIPTION: Example showing how state updates trigger re-renders in a form component. Uses useState hook to manage form submission state and message content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel, textarea { margin-bottom: 10px; display: block; }\n```\n\n----------------------------------------\n\nTITLE: Implementing useChatRoom Hook with Hardcoded Message Handler\nDESCRIPTION: This snippet shows the initial implementation of the useChatRoom custom Hook with a hardcoded message handler. It uses useEffect to manage the chat room connection and handle incoming messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n}\n```\n\n----------------------------------------\n\nTITLE: React Canvas Component with State Management\nDESCRIPTION: Main component implementing a draggable box with color selection. Demonstrates proper state updates using immutable patterns to fix mutation issues.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport Background from './Background.js';\nimport Box from './Box.js';\n\nconst initialPosition = {\n  x: 0,\n  y: 0\n};\n\nexport default function Canvas() {\n  const [shape, setShape] = useState({\n    color: 'orange',\n    position: initialPosition\n  });\n\n  function handleMove(dx, dy) {\n    setShape({\n      ...shape,\n      position: {\n        x: shape.position.x + dx,\n        y: shape.position.y + dy,\n      }\n    });\n  }\n\n  function handleColorChange(e) {\n    setShape({\n      ...shape,\n      color: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <select\n        value={shape.color}\n        onChange={handleColorChange}\n      >\n        <option value=\"orange\">orange</option>\n        <option value=\"lightpink\">lightpink</option>\n        <option value=\"aliceblue\">aliceblue</option>\n      </select>\n      <Background\n        position={initialPosition}\n      />\n      <Box\n        color={shape.color}\n        position={shape.position}\n        onMove={handleMove}\n      >\n        Drag me!\n      </Box>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Style Component Usage in React\nDESCRIPTION: Demonstrates the basic usage of the style component in React to add inline CSS that makes paragraphs red.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/style.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<style>{` p { color: red; } `}</style>\n```\n\n----------------------------------------\n\nTITLE: Styling the Chat Application with CSS\nDESCRIPTION: Provides styling for the chat application, including layout for the chat and contact list sections, button styling, and textarea dimensions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.chat,\n.contact-list {\n  float: left;\n  margin-bottom: 20px;\n}\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli button {\n  width: 100px;\n  padding: 10px;\n  margin-right: 10px;\n}\ntextarea {\n  height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Single and Multiple Select Boxes with State in React\nDESCRIPTION: Complete React component example demonstrating controlled single and multiple select boxes. It uses `useState` to manage the state for both select types. The `onChange` handler for the multiple select correctly extracts an array of values from `e.target.selectedOptions`. The selected values are displayed reactively.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function FruitPicker() {\n  const [selectedFruit, setSelectedFruit] = useState('orange');\n  const [selectedVegs, setSelectedVegs] = useState(['corn', 'tomato']);\n  return (\n    <>\n      <label>\n        Pick a fruit:\n        <select\n          value={selectedFruit}\n          onChange={e => setSelectedFruit(e.target.value)}\n        >\n          <option value=\"apple\">Apple</option>\n          <option value=\"banana\">Banana</option>\n          <option value=\"orange\">Orange</option>\n        </select>\n      </label>\n      <hr />\n      <label>\n        Pick all your favorite vegetables:\n        <select\n          multiple={true}\n          value={selectedVegs}\n          onChange={e => {\n            const options = [...e.target.selectedOptions];\n            const values = options.map(option => option.value);\n            setSelectedVegs(values);\n          }}\n        >\n          <option value=\"cucumber\">Cucumber</option>\n          <option value=\"corn\">Corn</option>\n          <option value=\"tomato\">Tomato</option>\n        </select>\n      </label>\n      <hr />\n      <p>Your favorite fruit: {selectedFruit}</p>\n      <p>Your favorite vegetables: {selectedVegs.join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Improved State Reset with Key Prop in React Components\nDESCRIPTION: This solution uses a two-component approach to reset state without Effects. By wrapping the form in a parent component that passes a key prop based on the contact ID, React automatically recreates the form component with fresh state when a different contact is selected.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function EditContact(props) {\n  return (\n    <EditForm\n      {...props}\n      key={props.savedContact.id}\n    />\n  );\n}\n\nfunction EditForm({ savedContact, onSave }) {\n  const [name, setName] = useState(savedContact.name);\n  const [email, setEmail] = useState(savedContact.email);\n\n  return (\n    <section>\n      <label>\n        Name:{' '}\n        <input\n          type=\"text\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </label>\n      <label>\n        Email:{' '}\n        <input\n          type=\"email\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </label>\n      <button onClick={() => {\n        const updatedData = {\n          id: savedContact.id,\n          name: name,\n          email: email\n        };\n        onSave(updatedData);\n      }}>\n        Save\n      </button>\n      <button onClick={() => {\n        setName(savedContact.name);\n        setEmail(savedContact.email);\n      }}>\n        Reset\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Context in React\nDESCRIPTION: Demonstrates how to create a context using the createContext function. The function takes a default value as an argument and returns a context object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeContext = createContext(defaultValue)\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple React Components on a Page\nDESCRIPTION: This snippet demonstrates how to create multiple React roots and render different components into separate DOM nodes on a page that isn't fully built with React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head><title>My app</title></head>\n  <body>\n    <nav id=\"navigation\"></nav>\n    <main>\n      <p>This paragraph is not rendered by React (open index.html to verify).</p>\n      <section id=\"comments\"></section>\n    </main>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { createRoot } from 'react-dom/client';\nimport { Comments, Navigation } from './Components.js';\n\nconst navDomNode = document.getElementById('navigation');\nconst navRoot = createRoot(navDomNode); \nnavRoot.render(<Navigation />);\n\nconst commentDomNode = document.getElementById('comments');\nconst commentRoot = createRoot(commentDomNode); \ncommentRoot.render(<Comments />);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function Navigation() {\n  return (\n    <ul>\n      <NavLink href=\"/\">Home</NavLink>\n      <NavLink href=\"/about\">About</NavLink>\n    </ul>\n  );\n}\n\nfunction NavLink({ href, children }) {\n  return (\n    <li>\n      <a href={href}>{children}</a>\n    </li>\n  );\n}\n\nexport function Comments() {\n  return (\n    <>\n      <h2>Comments</h2>\n      <Comment text=\"Hello!\" author=\"Sophie\" />\n      <Comment text=\"How are you?\" author=\"Sunil\" />\n    </>\n  );\n}\n\nfunction Comment({ text, author }) {\n  return (\n    <p>{text} — <i>{author}</i></p>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nnav ul { padding: 0; margin: 0; }\nnav ul li { display: inline-block; margin-right: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Prop Forwarding in React Component\nDESCRIPTION: This example demonstrates incorrect prop forwarding that can cause unknown-prop warnings. The 'layout' prop is incorrectly passed to the div element, which doesn't understand this prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/unknown-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyDiv(props) {\n  if (props.layout === 'horizontal') {\n    // BAD! Because you know for sure \"layout\" is not a prop that <div> understands.\n    return <div {...props} style={getHorizontalStyle()} />\n  } else {\n    // BAD! Because you know for sure \"layout\" is not a prop that <div> understands.\n    return <div {...props} style={getVerticalStyle()} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Controlled Form with Multiple Nested Update Handlers in React (JavaScript)\nDESCRIPTION: This React component implements a form for editing a nested person object, with dedicated event handlers for updating each nested field while maintaining immutability. Each handler function (for name, title, city, image) uses the spread operator to create new objects for both the person and the nested artwork. Inputs are input events for each field; output is an updated person state. Dependencies: useState, React functional component. Limitations include verbosity for deeply nested objects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img \n        src={person.artwork.image} \n        alt={person.artwork.title}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating State in React\nDESCRIPTION: This snippet demonstrates how React calls initializer and updater functions twice in Strict Mode. It shows the structure of a TodoList component with state initialization and an update function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList() {\n  // This component function will run twice for every render.\n\n  const [todos, setTodos] = useState(() => {\n    // This initializer function will run twice during initialization.\n    return createTodos();\n  });\n\n  function handleClick() {\n    setTodos(prevTodos => {\n      // This updater function will run twice for every click.\n      return [...prevTodos, createTodo()];\n    });\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Writing Pure React Components Using Props (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to convert an impure React component into a pure one by using props. Each Cup receives its own guest number as a prop, avoiding mutation or side effects. Dependencies: React, with no external modules required. The component returns a heading displaying the guest number; input is supplied as a prop, output is a deterministic heading. This approach is robust, predictable, and suitable for all scalable UI scenarios.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Cup({ guest }) {\\n  return <h2>Tea cup for guest #{guest}</h2>;\\n}\\n\\nexport default function TeaSet() {\\n  return (\\n    <>\\n      <Cup guest={1} />\\n      <Cup guest={2} />\\n      <Cup guest={3} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a ref to a DOM element in React\nDESCRIPTION: Example showing how to attach a ref to an input element using the ref attribute in JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  return <input ref={inputRef} />;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic useEffect Hook in React\nDESCRIPTION: Shows the basic syntax for calling the `useEffect` Hook at the top level of a functional component. The callback function passed to `useEffect` contains the code that will run after every render of the component by default.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyComponent() {\n  useEffect(() => {\n    // Code here will run after *every* render\n  });\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed State Updates with Direct Value and Updater\nDESCRIPTION: Demonstrates combining direct state value updates with updater functions and how React processes them in sequence.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setNumber(n => n + 1);\n      }}>Increase the number</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Connection Utility Functions\nDESCRIPTION: A utility module that creates a connection object with connect and disconnect methods for chat functionality. It tracks the number of active connections for debugging purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet connections = 0;\n\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n      connections++;\n      console.log('Active connections: ' + connections);\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n      connections--;\n      console.log('Active connections: ' + connections);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Children Props in React with TypeScript\nDESCRIPTION: Demonstrates how to type children props in React components using TypeScript, showing both React.ReactNode and React.ReactElement approaches.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ninterface ModalRendererProps {\n  title: string;\n  children: React.ReactNode;\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\ninterface ModalRendererProps {\n  title: string;\n  children: React.ReactElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Item Selection with Avoided Duplication in React\nDESCRIPTION: Illustrates how to manage menu item selections by storing the selected item's ID instead of the entire object, preventing state duplication. The example includes dynamic updates to item titles with React's useState hook and efficient rendering using IDs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedId, setSelectedId] = useState(0);\n\n  const selectedItem = items.find(item =>\n    item.id === selectedId\n  );\n\n  function handleItemChange(id, e) {\n    setItems(items.map(item => {\n      if (item.id === id) {\n        return {\n          ...item,\n          title: e.target.value,\n        };\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2>\n      <ul>\n        {items.map((item, index) => (\n          <li key={item.id}>\n            <input\n              value={item.title}\n              onChange={e => {\n                handleItemChange(item.id, e)\n              }}\n            />\n            {' '}\n            <button onClick={() => {\n              setSelectedId(item.id);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Element Visibility with IntersectionObserver in React\nDESCRIPTION: This example demonstrates how to use IntersectionObserver API with useEffect to track when an element is fully visible in the viewport. It includes a Box component that changes the page's background color when fully visible.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Box from './Box.js';\n\nexport default function App() {\n  return (\n    <>\n      <LongSection />\n      <Box />\n      <LongSection />\n      <Box />\n      <LongSection />\n    </>\n  );\n}\n\nfunction LongSection() {\n  const items = [];\n  for (let i = 0; i < 50; i++) {\n    items.push(<li key={i}>Item #{i} (keep scrolling)</li>);\n  }\n  return <ul>{items}</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing forwardRef with MyInput Component\nDESCRIPTION: Example showing how to implement forwardRef with a custom input component that forwards refs to an underlying DOM input element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n  return (\n    <label>\n      {props.label}\n      <input ref={ref} />\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Hydrating Server-Rendered HTML – React DOM Client – JavaScript\nDESCRIPTION: This concise JavaScript snippet illustrates the standard usage of hydrateRoot for bootstrapping a server-rendered app on the client. It imports hydrateRoot and hydrates the DOM element with id 'root' using the <App /> component. This call establishes React's management of the DOM based on the server markup and is typically used once at application startup. Dependencies: react-dom/client, a root element present in the DOM, server-generated HTML. Inputs: DOM element, top-level React component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\n\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\n----------------------------------------\n\nTITLE: Complete Fixed Chat Room Implementation with StrictMode\nDESCRIPTION: The complete and correct implementation of the chat room functionality with proper cleanup in the Effect hook, all wrapped in StrictMode to help catch similar issues early in development.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Component with Direct Database Access\nDESCRIPTION: Server Component implementation showing direct database access during render without client-side fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport db from './database';\n\nasync function Note({id}) {\n  const note = await db.notes.get(id);\n  return (\n    <div>\n      <Author id={note.authorId} />\n      <p>{note}</p>\n    </div>\n  );\n}\n\nasync function Author({id}) {\n  const author = await db.authors.get(id);\n  return <span>By: {author.name}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Pure Profile Component with Proper Props\nDESCRIPTION: A corrected version of the Profile component that follows React's principles by passing data through props instead of shared variables. This ensures each component instance renders with its own data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Panel from './Panel.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function Profile({ person }) {\n  return (\n    <Panel>\n      <Header person={person} />\n      <Avatar person={person} />\n    </Panel>\n  )\n}\n\nfunction Header({ person }) {\n  return <h1>{person.name}</h1>;\n}\n\nfunction Avatar({ person }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={50}\n      height={50}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete useCallback Example with Dependency Array\nDESCRIPTION: A complete example showing useCallback implementation with defined dependencies, highlighting both the function and the dependency list.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer, theme }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }, [productId, referrer]);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Component for Adding Tasks in React - JavaScript\nDESCRIPTION: This component, AddTask, provides a controlled input field and button to add new tasks via a callback prop, onAddTask. It manages its own text input state and clears the field after a task is submitted. The only dependency is React, specifically useState. Input is the new task text (string), and output is a handler call to the provided function. It assumes an onAddTask function prop is passed in from the parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        onAddTask(text);\n      }}>Add</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events in React Components\nDESCRIPTION: Demonstrates handling of pointer events in React, including onPointerEnter, onPointerLeave, onPointerDown, onPointerMove, and onPointerUp.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PointerExample() {\n  return (\n    <div\n      onPointerEnter={e => console.log('onPointerEnter (parent)')}\n      onPointerLeave={e => console.log('onPointerLeave (parent)')}\n      style={{ padding: 20, backgroundColor: '#ddd' }}\n    >\n      <div\n        onPointerDown={e => console.log('onPointerDown (first child)')}\n        onPointerEnter={e => console.log('onPointerEnter (first child)')}\n        onPointerLeave={e => console.log('onPointerLeave (first child)')}\n        onPointerMove={e => console.log('onPointerMove (first child)')}\n        onPointerUp={e => console.log('onPointerUp (first child)')}\n        style={{ padding: 20, backgroundColor: 'lightyellow' }}\n      >\n        First child\n      </div>\n      <div\n        onPointerDown={e => console.log('onPointerDown (second child)')}\n        onPointerEnter={e => console.log('onPointerEnter (second child)')}\n        onPointerLeave={e => console.log('onPointerLeave (second child)')}\n        onPointerMove={e => console.log('onPointerMove (second child)')}\n        onPointerUp={e => console.log('onPointerUp (second child)')}\n        style={{ padding: 20, backgroundColor: 'lightblue' }}\n      >\n        Second child\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Valid JSX Syntax\nDESCRIPTION: Illustrates the process of converting standard HTML to JSX, highlighting the differences and necessary adjustments for React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img\n        src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n        alt=\"Hedy Lamarr\"\n        className=\"photo\"\n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React App Component Example\nDESCRIPTION: A simple React functional component example that renders a welcome message for an admin tool, demonstrating what a basic Create React App starting point might look like.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <div>\n      <h1>Welcome to the Admin Tool!</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data-Fetching Biography Component with React.use\nDESCRIPTION: A component that fetches artist biography data using React.use, enabling Suspense integration for handling loading states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Biography({ artistId }) {\n  const bio = use(fetchData(`/${artistId}/bio`));\n  return (\n    <section>\n      <p className=\"bio\">{bio}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffectEvent for Prop Event Handlers\nDESCRIPTION: This solution uses useEffectEvent to wrap the prop event handler, preventing it from being included in the effect's dependency array while still accessing its latest value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId, onReceiveMessage }) {\n  const [messages, setMessages] = useState([]);\n\n  const onMessage = useEffectEvent(receivedMessage => {\n    onReceiveMessage(receivedMessage);\n  });\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React Components\nDESCRIPTION: Illustrates how to conditionally render content in React components using JavaScript operators like &&. This example shows dynamic UI updates based on component props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Chat Room Connection with React useEffect (JavaScript)\nDESCRIPTION: Demonstrates how to use the React useEffect hook to synchronize chat room server connections when the roomId prop changes. The component establishes and tears down a connection using a provided utility, ensuring correct lifecycle handling tied to the roomId. Requires React and a helper method for server connection management; inputs are dynamic props, and outputs are side effects (logs/connection states) and JSX UI. All code is written in JavaScript using React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Key Implementation in List Items\nDESCRIPTION: Simple example showing how to use a key prop in a list item\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<li key={person.id}>...</li>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Artist Page with Nested Suspense\nDESCRIPTION: A component that displays artist information with nested Suspense boundaries for different content sections (biography and albums), showing a glimmer loading state for the albums section.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react';\nimport Albums from './Albums.js';\nimport Biography from './Biography.js';\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Biography artistId={artist.id} />\n      <Suspense fallback={<AlbumsGlimmer />}>\n        <Panel>\n          <Albums artistId={artist.id} />\n        </Panel>\n      </Suspense>\n    </>\n  );\n}\n\nfunction AlbumsGlimmer() {\n  return (\n    <div className=\"glimmer-panel\">\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Form Submission in React.js\nDESCRIPTION: Shows a React component for handling client-side form submissions. Uses a functional component to handle a search event, displaying an alert with the search query entered by the user. The form is reset after submission.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Search() {\\n  function search(formData) {\\n    const query = formData.get(\\\"query\\\");\\n    alert(`You searched for '${query}'`);\\n  }\\n  return (\\n    <form action={search}>\\n      <input name=\\\"query\\\" />\\n      <button type=\\\"submit\\\">Search</button>\\n    </form>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Using cache for Cross-Component Memoization in Server Components\nDESCRIPTION: This example shows how to use cache in Server Components to share memoized work across multiple component instances. Unlike useMemo, cache allows the second WeatherReport instance to reuse the result from the first component's cached fetch.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst cachedFetchReport = cache(fetchReport);\n\nfunction WeatherReport({city}) {\n  const report = cachedFetchReport(city);\n  // ...\n}\n\nfunction App() {\n  const city = \"Los Angeles\";\n  return (\n    <>\n      <WeatherReport city={city} />\n      <WeatherReport city={city} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with Different Payloads\nDESCRIPTION: Example showing how to dispatch different types of actions with payloads from component event handlers, including both simple actions and those with additional data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [state, dispatch] = useReducer(reducer, { name: 'Taylor', age: 42 });\n  \n  function handleButtonClick() {\n    dispatch({ type: 'incremented_age' });\n  }\n\n  function handleInputChange(e) {\n    dispatch({\n      type: 'changed_name',\n      nextName: e.target.value\n    });\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing useMemo in TodoList Component\nDESCRIPTION: Example showing how to implement useMemo in a TodoList component to cache filtered todos based on dependencies\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, tab),\n    [todos, tab]\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing React Event Object in onClick Handler\nDESCRIPTION: Demonstrates how to access the React event object in an onClick handler. The React event object is a synthetic event that conforms to the same standard as underlying DOM events but fixes browser inconsistencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={e => {\n  console.log(e); // React event object\n}} />\n```\n\n----------------------------------------\n\nTITLE: Counter with Updater Function for Cumulative State in React - JavaScript\nDESCRIPTION: Provides a React counter component that correctly queues multiple state updates using the updater functional approach (setScore(s => s + 1)). This fixes sequential increment bugs by always referencing the latest state. Requires React useState. Input: button clicks. Output: Score reflects all queued increments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [score, setScore] = useState(0);\n\n  function increment() {\n    setScore(s => s + 1);\n  }\n\n  return (\n    <>\n      <button onClick={() => increment()}>+1</button>\n      <button onClick={() => {\n        increment();\n        increment();\n        increment();\n      }}>+3</button>\n      <h1>Score: {score}</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Player with useEffect in React\nDESCRIPTION: Demonstrates a React component that plays or pauses a video based on the isPlaying prop using useEffect without a dependency array, causing it to run after every render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput, button { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Associating Labels with Inputs in React\nDESCRIPTION: Explains how to properly associate a label with an input for better accessibility and functionality. Utilizes the useId hook from React to generate unique IDs for inputs. The example highlights the importance of label-input association.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useId } from 'react';\n\nexport default function Form() {\n  const ageInputId = useId();\n  return (\n    <>\n      <label>\n        Your first name:\n        <input name=\"firstName\" />\n      </label>\n      <hr />\n      <label htmlFor={ageInputId}>Your age:</label>\n      <input id={ageInputId} name=\"age\" type=\"number\" />\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Effect with Empty Dependencies - JavaScript\nDESCRIPTION: Illustrates a useEffect with an empty dependency array, demonstrating use when reactive values are not involved. It shows how to ensure code executes only upon component mounting and unmounting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering and Hydrating Entire Document as React Component – JavaScript\nDESCRIPTION: This example shows how to write an App React component that returns an entire HTML document (including <html>, <head>, and <body> tags), a pattern used for full-document SSR rendering and hydration. Used in frameworks or advanced server rendering setups, it allows React to manage the full document tree. Inputs: none. Output: a React function component to be passed to hydrateRoot. Must be rendered and hydrated in environments that support full-document hydration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App() {\n  return (\n    <html>\n      <head>\n        <meta charSet=\\\"utf-8\\\" />\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\n        <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\"></link>\n        <title>My app</title>\n      </head>\n      <body>\n        <Router />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typing useReducer Hook in React with TypeScript\nDESCRIPTION: This example shows how to use TypeScript types with the useReducer hook in React, demonstrating the use of interfaces and state management in a functional component. The code assumes a basic understanding of React and TypeScript.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useReducer} from 'react';\n\ninterface State {\n   count: number \n};\n\ntype CounterAction =\n  | { type: \"reset\" }\n  | { type: \"setCount\"; value: State[\"count\"] }\n\nconst initialState: State = { count: 0 };\n\nfunction stateReducer(state: State, action: CounterAction): State {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"setCount\":\n      return { ...state, count: action.value };\n    default:\n      throw new Error(\"Unknown action\");\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n\n  const addFive = () => dispatch({ type: \"setCount\", value: state.count + 5 });\n  const reset = () => dispatch({ type: \"reset\" });\n\n  return (\n    <div>\n      <h1>Welcome to my counter</h1>\n\n      <p>Count: {state.count}</p>\n      <button onClick={addFive}>Add 5</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Using Imperative Handles in React Component\nDESCRIPTION: Presents a full example demonstrating the interaction between a parent component (`Form`) and a child component (`MyInput`) using refs and imperative handles. The `Form` component accesses the `focus` method exposed by `MyInput` via `useImperativeHandle`. Includes the necessary CSS for basic styling. Direct DOM manipulation attempts from the parent are commented out as they won't work.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useRef } from 'react';\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n  const ref = useRef(null);\n\n  function handleClick() {\n    ref.current.focus();\n    // This won't work because the DOM node isn't exposed:\n    // ref.current.style.opacity = 0.5;\n  }\n\n  return (\n    <form>\n      <MyInput placeholder=\"Enter your name\" ref={ref} />\n      <button type=\"button\" onClick={handleClick}>\n        Edit\n      </button>\n    </form>\n  );\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// src/MyInput.js\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input {...props} ref={inputRef} />;\n});\n\nexport default MyInput;\n```\n\nLANGUAGE: css\nCODE:\n```\ninput {\n  margin: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a 3x3 Board Grid with Numbered Squares - JavaScript\nDESCRIPTION: This code defines a functional React component that returns a tic-tac-toe board composed of three rows and three buttons per row, each with unique numbers (1-9). The layout uses React Fragments to wrap multiple rows, and each row is given the class 'board-row' for CSS styling. Inputs/outputs: no props or state, pure rendering. Assumes 'square' and 'board-row' CSS classes are defined. Dependencies: React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Square() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">1</button>\\n        <button className=\\\"square\\\">2</button>\\n        <button className=\\\"square\\\">3</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">4</button>\\n        <button className=\\\"square\\\">5</button>\\n        <button className=\\\"square\\\">6</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">7</button>\\n        <button className=\\\"square\\\">8</button>\\n        <button className=\\\"square\\\">9</button>\\n      </div>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context Value to Components\nDESCRIPTION: Example of providing a context value to components using the Context.Provider component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyPage() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Form() {\n  // ... renders buttons inside ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Promises with the 'use' API in React 19\nDESCRIPTION: Demonstrates how to read a promise with the new 'use' API, which suspends the component until the promise resolves. The example shows using Suspense to provide a fallback while loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\n\nfunction Comments({commentsPromise}) {\n  // `use` will suspend until the promise resolves.\n  const comments = use(commentsPromise);\n  return comments.map(comment => <p key={comment.id}>{comment}</p>);\n}\n\nfunction Page({commentsPromise}) {\n  // When `use` suspends in Comments,\n  // this Suspense boundary will be shown.\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Comments commentsPromise={commentsPromise} />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form Component with Conditional Rendering in React\nDESCRIPTION: A simple React form component that renders different content based on a status prop. It demonstrates conditional rendering by showing a success message when the status is 'success', or displaying the form otherwise.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Form({\n  status = 'empty'\n}) {\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form>\n        <textarea />\n        <br />\n        <button>\n          Submit\n        </button>\n      </form>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Form with Error Display in React\nDESCRIPTION: This snippet demonstrates how to handle form submission with error messaging before the JavaScript bundle loads. It uses the `useActionState` hook to manage the submission state and display errors returned by the server function. The `signup` function attempts to register a new user and catches any errors that occur during the process.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActionState } from \"react\";\nimport { signUpNewUser } from \"./api\";\n\nexport default function Page() {\n  async function signup(prevState, formData) {\n    \"use server\";\n    const email = formData.get(\"email\");\n    try {\n      await signUpNewUser(email);\n      alert(`Added \"${email}\"`);\n    } catch (err) {\n      return err.toString();\n    }\n  }\n  const [message, signupAction] = useActionState(signup, null);\n  return (\n    <>\n      <h1>Signup for my newsletter</h1>\n      <p>Signup with the same email twice to see an error</p>\n      <form action={signupAction} id=\"signup-form\">\n        <label htmlFor=\"email\">Email: </label>\n        <input name=\"email\" id=\"email\" placeholder=\"react@example.com\" />\n        <button>Sign up</button>\n        {!!message && <p>{message}</p>}\n      </form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Visually Indicating Stale Data with Conditional Styling in React\nDESCRIPTION: Demonstrates how to wrap the `SearchResults` component in a `div` and apply conditional styling. When the immediate `query` state differs from the `deferredQuery` (meaning new data is loading but stale data is shown), the opacity is set to 0.5, visually indicating the stale state to the user.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<div style={{\n  opacity: query !== deferredQuery ? 0.5 : 1 // condition added\n}}>\n  <SearchResults query={deferredQuery} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Biography Component with Data Fetching\nDESCRIPTION: Component that fetches and displays artist biography using React's use hook with Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Biography({ artistId }) {\n  const bio = use(fetchData(`/${artistId}/bio`));\n  return (\n    <section>\n      <p className=\"bio\">{bio}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Solution - Using Primitive Props\nDESCRIPTION: Better implementation that removes the options object completely and uses primitive props for better optimization\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ roomId, serverUrl }) {\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple State Variables in a React Form - JavaScript\nDESCRIPTION: This snippet demonstrates how to use React's useState hook to manage two independent state variables (name and age) in a single functional component. The code includes an input to change the name and a button to increment the age, with a summary displayed in a paragraph. Dependencies: React and hooks (useState) imported from 'react'. Inputs: user text input and button click events. Outputs: updated UI reflecting state changes. The pattern is simple, but each useState call provides an isolated piece of state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function Form() {\\n  const [name, setName] = useState('Taylor');\\n  const [age, setAge] = useState(42);\\n\\n  return (\\n    <>\\n      <input\\n        value={name}\\n        onChange={e => setName(e.target.value)}\\n      />\\n      <button onClick={() => setAge(age + 1)}>\\n        Increment age\\n      </button>\\n      <p>Hello, {name}. You are {age}.</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Form with Conditional Field Focus Based on Props - React JavaScript\nDESCRIPTION: Extends a form component to utilize the shouldFocus prop for inputs to control which field receives focus when the form is displayed. The state is used to toggle form visibility and manage first and last name values. This structure demonstrates conditional logic in rendering and interaction.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n  const [show, setShow] = useState(false);\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n  const [upper, setUpper] = useState(false);\n  const name = firstName + ' ' + lastName;\n  return (\n    <>\n      <button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n      <br />\n      <hr />\n      {show && (\n        <>\n          <label>\n            Enter your first name:\n            <MyInput\n              value={firstName}\n              onChange={e => setFirstName(e.target.value)}\n              shouldFocus={true}\n            />\n          </label>\n          <label>\n            Enter your last name:\n            <MyInput\n              value={lastName}\n              onChange={e => setLastName(e.target.value)}\n              shouldFocus={false}\n            />\n          </label>\n          <p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n        </>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Asynchronous Data Fetches with React `cache`\nDESCRIPTION: Illustrates using `cache` with an asynchronous function (`fetchTemperature`) to fetch data. Multiple components (`AnimatedWeatherCard`, `MinimalWeatherCard`) calling the cached function (`getTemperature`) with the same `city` argument will share the same fetched data snapshot, ensuring only one API request is made per city per server render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[1, 4, \"city\"], [1, 5, \"fetchTemperature(city)\"], [2, 4, \"getTemperature\"], [2, 9, \"getTemperature\"], [1, 9, \"city\"], [2, 14, \"getTemperature\"], [1, 14, \"city\"]]\nimport {cache} from 'react';\nimport {fetchTemperature} from './api.js';\n\nconst getTemperature = cache(async (city) => {\n\treturn await fetchTemperature(city);\n});\n\nasync function AnimatedWeatherCard({city}) {\n\tconst temperature = await getTemperature(city);\n\t// ...\n}\n\nasync function MinimalWeatherCard({city}) {\n\tconst temperature = await getTemperature(city);\n\t// ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing usePointerPosition Hook in React\nDESCRIPTION: This snippet defines a custom hook usePointerPosition that tracks the current pointer position using useState and useEffect. It adds and removes an event listener for pointer movement.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  useEffect(() => {\n    function handleMove(e) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n  }, []);\n  return position;\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Solution by Moving Functions Inside Effects\nDESCRIPTION: Demonstrates a better pattern of defining functions inside useEffect to eliminate the need for useCallback and reduce dependency management complexity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    function createOptions() { // ✅ No need for useCallback or function dependencies!\n      return {\n        serverUrl: 'https://localhost:1234',\n        roomId: roomId\n      };\n    }\n\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ Only changes when roomId changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Complete Tic-Tac-Toe Application with Lifted State\nDESCRIPTION: A full implementation of the tic-tac-toe game with state lifted to the Board component. Includes both the game logic and CSS styling to render the game board.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value }) {\n  return <button className=\"square\">{value}</button>;\n}\n\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} />\n        <Square value={squares[1]} />\n        <Square value={squares[2]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} />\n        <Square value={squares[4]} />\n        <Square value={squares[5]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} />\n        <Square value={squares[7]} />\n        <Square value={squares[8]} />\n      </div>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Inputs with State in React\nDESCRIPTION: Explains how to create controlled components in React by using state variables for managing input values. Uses the useState hook from React to synchronize component state with UI changes, enforcing stricter input management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [age, setAge] = useState('20');\n  const ageAsNumber = Number(age);\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={firstName}\n          onChange={e => setFirstName(e.target.value)}\n        />\n      </label>\n      <label>\n        Age:\n        <input\n          value={age}\n          onChange={e => setAge(e.target.value)}\n          type=\"number\"\n        />\n        <button onClick={() => setAge(ageAsNumber + 10)}>\n          Add 10 years\n        </button>\n      </label>\n      {firstName !== '' &&\n        <p>Your name is {firstName}.</p>\n      }\n      {ageAsNumber > 0 &&\n        <p>Your age is {ageAsNumber}.</p>\n      }\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin: 5px; }\np { font-weight: bold; }\n```\n\n----------------------------------------\n\nTITLE: Implementing React App with Theme Toggle\nDESCRIPTION: Main App component that manages dark mode state and renders ProductPage with theme prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ProductPage from './ProductPage.js';\n\nexport default function App() {\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <ProductPage\n        referrerId=\"wizard_of_oz\"\n        productId={123}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Using 'use' to Read Promise Data\nDESCRIPTION: Example of a client component that receives a Promise as a prop from a server component and uses the 'use' API to read its resolved value while handling the loading state with Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// message.js\n'use client';\n\nimport { use } from 'react';\n\nexport function Message({ messagePromise }) {\n  const messageContent = use(messagePromise);\n  return <p>Here is the message: {messageContent}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct useMemo Usage with Component Extraction - React Components\nDESCRIPTION: Proper implementation showing how to extract a separate component and use useMemo at the top level for each item.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ReportList({ items }) {\n  return (\n    <article>\n      {items.map(item =>\n        <Report key={item.id} item={item} />\n      )}\n    </article>\n  );\n}\n\nfunction Report({ item }) {\n  // ✅ Call useMemo at the top level:\n  const data = useMemo(() => calculateReport(item), [item]);\n  return (\n    <figure>\n      <Chart data={data} />\n    </figure>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useEffect with setTimeout in React\nDESCRIPTION: This snippet demonstrates the use of useEffect hook with setTimeout to log input text after a delay. It includes cleanup functionality to cancel pending timeouts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nfunction Playground() {\n  const [text, setText] = useState('a');\n\n  useEffect(() => {\n    function onTimeout() {\n      console.log('⏰ ' + text);\n    }\n\n    console.log('🔵 Schedule \"' + text + '\" log');\n    const timeoutId = setTimeout(onTimeout, 3000);\n\n    return () => {\n      console.log('🟡 Cancel \"' + text + '\" log');\n      clearTimeout(timeoutId);\n    };\n  }, [text]);\n\n  return (\n    <>\n      <label>\n        What to log:{' '}\n        <input\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n      </label>\n      <h1>{text}</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Unmount' : 'Mount'} the component\n      </button>\n      {show && <hr />}\n      {show && <Playground />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced ColorSwitch Component with Event Handling\nDESCRIPTION: Improved version of the ColorSwitch component that implements click handling and prevents event propagation to parent elements using e.stopPropagation().\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ColorSwitch({\n  onChangeColor\n}) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onChangeColor();\n    }}>\n      Change color\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel State Control in React Accordion\nDESCRIPTION: Demonstrates passing state and event handlers as props to control Panel components within an Accordion. Shows how to manage which panel is active using index-based state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <Panel\n    isActive={activeIndex === 0}\n    onShow={() => setActiveIndex(0)}\n  >\n    ...\n  </Panel>\n  <Panel\n    isActive={activeIndex === 1}\n    onShow={() => setActiveIndex(1)}\n  >\n    ...\n  </Panel>\n</>\n```\n\n----------------------------------------\n\nTITLE: Add Task Component Using Context\nDESCRIPTION: A component that allows adding new tasks by accessing the dispatch function from context. It uses a local state for the input field and dispatches an 'added' action when the Add button is clicked.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useContext } from 'react';\nimport { TasksDispatchContext } from './TasksContext.js';\n\nexport default function AddTask() {\n  const [text, setText] = useState('');\n  const dispatch = useContext(TasksDispatchContext);\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        dispatch({\n          type: 'added',\n          id: nextId++,\n          text: text,\n        }); \n      }}>Add</button>\n    </>\n  );\n}\n\nlet nextId = 3;\n```\n\n----------------------------------------\n\nTITLE: Form Component with Ref Usage\nDESCRIPTION: Example showing how to use a forwarded ref in a parent Form component to control child input focus.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const ref = useRef(null);\n\n  function handleClick() {\n    ref.current.focus();\n  }\n\n  return (\n    <form>\n      <MyInput label=\"Enter your name:\" ref={ref} />\n      <button type=\"button\" onClick={handleClick}>\n        Edit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffect with Empty Dependency Array in React\nDESCRIPTION: This snippet demonstrates how to use the useEffect hook with an empty dependency array, causing the effect to run only after the initial render. It includes a chat room example where the connection is established once and not affected by re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'music';\n\nfunction ChatRoom() {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <label>\n        Your message:{' '}\n        <input value={message} onChange={e => setMessage(e.target.value)} />\n      </label>\n    </>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling an Image into View with Ref and DOM Manipulation - JavaScript/CSS\nDESCRIPTION: This React example shows how to scroll a specific image into view by attaching a ref to a <ul> element and using querySelectorAll to locate the desired image within the list. Upon button press, the corresponding image element is scrolled smoothly into view using its scrollIntoView method. Dependencies: React, useRef, standard DOM API. Key parameters: listRef (ref), index (image number). The layout is styled with accompanying CSS to ensure scrolling and arrange list items horizontally.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n  const listRef = useRef(null);\n\n  function scrollToIndex(index) {\n    const listNode = listRef.current;\n    // This line assumes a particular DOM structure:\n    const imgNode = listNode.querySelectorAll('li > img')[index];\n    imgNode.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToIndex(0)}>\n          Neo\n        </button>\n        <button onClick={() => scrollToIndex(1)}>\n          Millie\n        </button>\n        <button onClick={() => scrollToIndex(2)}>\n          Bella\n        </button>\n      </nav>\n      <div>\n        <ul ref={listRef}>\n          <li>\n            <img\n              src=\"https://placecats.com/neo/300/200\"\n              alt=\"Neo\"\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/millie/200/200\"\n              alt=\"Millie\"\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/bella/199/200\"\n              alt=\"Bella\"\n            />\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\ndiv {\n  width: 100%;\n  overflow: hidden;\n}\n\nnav {\n  text-align: center;\n}\n\nbutton {\n  margin: .25rem;\n}\n\nul,\nli {\n  list-style: none;\n  white-space: nowrap;\n}\n\nli {\n  display: inline;\n  padding: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Mail Client with State Management Issue\nDESCRIPTION: This code implements a mail client where letters can be highlighted and starred. It has a bug where highlighting disappears after starring an item due to reference equality checks against recreated objects in state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { initialLetters } from './data.js';\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n  const [letters, setLetters] = useState(initialLetters);\n  const [highlightedLetter, setHighlightedLetter] = useState(null);\n\n  function handleHover(letter) {\n    setHighlightedLetter(letter);\n  }\n\n  function handleStar(starred) {\n    setLetters(letters.map(letter => {\n      if (letter.id === starred.id) {\n        return {\n          ...letter,\n          isStarred: !letter.isStarred\n        };\n      } else {\n        return letter;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h2>Inbox</h2>\n      <ul>\n        {letters.map(letter => (\n          <Letter\n            key={letter.id}\n            letter={letter}\n            isHighlighted={\n              letter === highlightedLetter\n            }\n            onHover={handleHover}\n            onToggleStar={handleStar}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modern Class Field Syntax in React Components\nDESCRIPTION: Shows how to use public class field syntax as a modern alternative to constructors for initializing state and defining methods in class components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter extends Component {\n  state = { counter: 0 };\n\n  handleClick = () => {\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Context in Heading Component\nDESCRIPTION: Shows how to consume context value using useContext Hook in a Heading component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing React Component Return Statement\nDESCRIPTION: Shows how to properly structure return statements in React components to avoid unexpected behavior. Demonstrates both single-line and multi-line return syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Profile() {\n  return (\n    <img \n      src=\"https://i.imgur.com/jA8hHMpm.jpg\" \n      alt=\"Katsuko Saruhashi\" \n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nimg { height: 180px; }\n```\n\n----------------------------------------\n\nTITLE: Full Message Component Implementation with 'use' and Suspense\nDESCRIPTION: A complete client component implementation that uses 'use' with a Promise and Suspense to handle the loading state, demonstrating how to properly integrate Promise handling in React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n\"use client\";\n\nimport { use, Suspense } from \"react\";\n\nfunction Message({ messagePromise }) {\n  const messageContent = use(messagePromise);\n  return <p>Here is the message: {messageContent}</p>;\n}\n\nexport function MessageContainer({ messagePromise }) {\n  return (\n    <Suspense fallback={<p>⌛Downloading message...</p>}>\n      <Message messagePromise={messagePromise} />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation in React\nDESCRIPTION: Shows how to prevent event bubbling using e.stopPropagation() in a reusable Button component\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <Button onClick={() => alert('Playing!')}>\n        Play Movie\n      </Button>\n      <Button onClick={() => alert('Uploading!')}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.Toolbar {\n  background: #aaa;\n  padding: 5px;\n}\nbutton { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator\nDESCRIPTION: Demonstrates inline conditional rendering using the JavaScript ternary operator (condition ? true : false) within JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<div>\n  {isLoggedIn ? (\n    <AdminPanel />\n  ) : (\n    <LoginForm />\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Structure for Profile Editor\nDESCRIPTION: The HTML markup that provides the structure for a profile editing form with togglable input fields, text displays, and a submit button that switches between edit and save modes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form\">\n  <label>\n    First name:\n    <b id=\"firstNameText\">Jane</b>\n    <input\n      id=\"firstNameInput\"\n      value=\"Jane\"\n      style=\"display: none\">\n  </label>\n  <label>\n    Last name:\n    <b id=\"lastNameText\">Jacobs</b>\n    <input\n      id=\"lastNameInput\"\n      value=\"Jacobs\"\n      style=\"display: none\">\n  </label>\n  <button type=\"submit\" id=\"editButton\">Edit Profile</button>\n  <p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n</form>\n\n<style>\n* { box-sizing: border-box; }\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\nlabel { display: block; margin-bottom: 20px; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Function Recreation Problem Without useCallback\nDESCRIPTION: Example showing the problem of function recreation on every render without using useCallback, which breaks memo optimization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductPage({ productId, referrer, theme }) {\n  // Every time the theme changes, this will be a different function...\n  function handleSubmit(orderDetails) {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }\n  \n  return (\n    <div className={theme}>\n      {/* ... so ShippingForm's props will never be the same, and it will re-render every time */}\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hydrated React Root with render – React DOM Client – JavaScript\nDESCRIPTION: This short code snippet demonstrates calling the render method on a hydrated React root to update the component tree. Typically, a new React node or JSX element such as <App /> is provided. This triggers React's diffing and update logic for the already attached root. Prerequisites: hydrated root object, created via hydrateRoot. Input: new React node/component. Output: undefined. Note: Should only be called after hydration completes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Reducer Pattern in JavaScript\nDESCRIPTION: An example that shows how to use the array reduce() method with a tasks reducer function to process a series of actions and generate a final state. This demonstrates the conceptual similarity between array reduction and React reducers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport tasksReducer from './tasksReducer.js';\n\nlet initialState = [];\nlet actions = [\n  {type: 'added', id: 1, text: 'Visit Kafka Museum'},\n  {type: 'added', id: 2, text: 'Watch a puppet show'},\n  {type: 'deleted', id: 1},\n  {type: 'added', id: 3, text: 'Lennon Wall pic'},\n];\n\nlet finalState = actions.reduce(tasksReducer, initialState);\n\nconst output = document.getElementById('output');\noutput.textContent = JSON.stringify(finalState, null, 2);\n```\n\n----------------------------------------\n\nTITLE: Letter Component for React Mail Client\nDESCRIPTION: A React component representing an individual letter in the mail client interface. Each letter has a checkbox that can be toggled to select it.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Letter({\n  letter,\n  onToggle,\n  isSelected,\n}) {\n  return (\n    <li className={\n      isSelected ? 'selected' : ''\n    }>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isSelected}\n          onChange={() => {\n            onToggle(letter.id);\n          }}\n        />\n        {letter.subject}\n      </label>\n    </li>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Component with Props\nDESCRIPTION: This code shows the SearchBar component, which renders the search input and checkbox. It uses the filterText and inStockOnly props to set the values of the form elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction SearchBar({ filterText, inStockOnly }) {\n  return (\n    <form>\n      <input \n        type=\"text\" \n        value={filterText} \n        placeholder=\"Search...\"/>\n      <label>\n        <input \n          type=\"checkbox\" \n          checked={inStockOnly} />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Options in a Select Box with React\nDESCRIPTION: This snippet demonstrates how to use the <option> component within a <select> element in React. It shows the basic structure for creating a dropdown menu with multiple options.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/option.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<select>\n  <option value=\"someOption\">Some option</option>\n  <option value=\"otherOption\">Other option</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Focusing an Input Using React useRef - JavaScript\nDESCRIPTION: This React component demonstrates focusing a text input programmatically by creating a ref with useRef and attaching it to an <input> element. When the button is clicked, the input is focused by calling focus() on the current value of the ref. Dependencies: React and useRef. Key parameters: inputRef (a ref object). The input receives no initial value, and the user must interact with the button to trigger focus.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Card Component with Children Prop in React\nDESCRIPTION: This example shows how to create a reusable Card component that accepts children as a prop. It demonstrates how to use the children prop to pass different JSX content to the Card component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <div>\n      <Card>\n        <h1>Photo</h1>\n        <img\n          className=\"avatar\"\n          src=\"https://i.imgur.com/OKS67lhm.jpg\"\n          alt=\"Aklilu Lemma\"\n          width={100}\n          height={100}\n        />\n      </Card>\n      <Card>\n        <h1>About</h1>\n        <p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>\n      </Card>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Context Reading with 'use' in React\nDESCRIPTION: Demonstrates how 'use' can be called inside conditionals like 'if', making it more flexible than useContext which must be called at the top level.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction HorizontalRule({ show }) {\n  if (show) {\n    const theme = use(ThemeContext);\n    return <hr className={theme} />;\n  }\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Immer for Simplified State Updates in React\nDESCRIPTION: A React component demonstrating the use of Immer with useImmer hook to simplify state updates with mutable syntax while maintaining immutability under the hood. It manages a list of artwork items with toggle functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { useImmer } from 'use-immer';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [list, updateList] = useImmer(initialList);\n\n  function handleToggle(artworkId, nextSeen) {\n    updateList(draft => {\n      const artwork = draft.find(a =>\n        a.id === artworkId\n      );\n      artwork.seen = nextSeen;\n    });\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={list}\n        onToggle={handleToggle} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Global Browser Events with React in JavaScript\nDESCRIPTION: This snippet shows how to listen to global events in the browser DOM using the useEffect Hook. The example tracks mouse movements using the pointermove event. An event listener is added within the effect and removed during the component's cleanup phase. Updates on cursor position are rendered by altering the state to move a visual dot on the screen.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    function handleMove(e) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n    window.addEventListener('pointermove', handleMove);\n    return () => {\n      window.removeEventListener('pointermove', handleMove);\n    };\n  }, []);\n\n  return (\n    <div style={{\n      position: 'absolute',\n      backgroundColor: 'pink',\n      borderRadius: '50%',\n      opacity: 0.6,\n      transform: `translate(${position.x}px, ${position.y}px)`,\n      pointerEvents: 'none',\n      left: -20,\n      top: -20,\n      width: 40,\n      height: 40,\n    }} />\n  );\n}\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  min-height: 300px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Flattened Travel Plan with Normalized State in React\nDESCRIPTION: This snippet demonstrates a React component that renders a travel plan using a flattened, normalized state structure. It uses a recursive component to render the hierarchical structure based on IDs and a lookup object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { initialTravelPlan } from './places.js';\n\nfunction PlaceTree({ id, placesById }) {\n  const place = placesById[id];\n  const childIds = place.childIds;\n  return (\n    <li>\n      {place.title}\n      {childIds.length > 0 && (\n        <ol>\n          {childIds.map(childId => (\n            <PlaceTree\n              key={childId}\n              id={childId}\n              placesById={placesById}\n            />\n          ))}\n        </ol>\n      )}\n    </li>\n  );\n}\n\nexport default function TravelPlan() {\n  const [plan, setPlan] = useState(initialTravelPlan);\n  const root = plan[0];\n  const planetIds = root.childIds;\n  return (\n    <>\n      <h2>Places to visit</h2>\n      <ol>\n        {planetIds.map(id => (\n          <PlaceTree\n            key={id}\n            id={id}\n            placesById={plan}\n          />\n        ))}\n      </ol>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple Progress Indicator in React\nDESCRIPTION: This snippet demonstrates how to render a basic progress indicator using the <progress> element in React. The value prop is set to 0.5, representing 50% progress.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/progress.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<progress value={0.5} />\n```\n\n----------------------------------------\n\nTITLE: Optimizing Todo List with useMemo in React\nDESCRIPTION: This solution eliminates the unnecessary Effect by using useMemo to cache the result of getVisibleTodos(). The calculation only reruns when the todos or showActive state changes, not when typing in the input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useMemo } from 'react';\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(initialTodos);\n  const [showActive, setShowActive] = useState(false);\n  const [text, setText] = useState('');\n  const visibleTodos = useMemo(\n    () => getVisibleTodos(todos, showActive),\n    [todos, showActive]\n  );\n\n  function handleAddClick() {\n    setText('');\n    setTodos([...todos, createTodo(text)]);\n  }\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showActive}\n          onChange={e => setShowActive(e.target.checked)}\n        />\n        Show only active todos\n      </label>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={handleAddClick}>\n        Add\n      </button>\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ? <s>{todo.text}</s> : todo.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ListSection Component in React\nDESCRIPTION: This snippet shows how to create a reusable ListSection component to reduce code duplication when rendering multiple lists of scientists.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nfunction ListSection({ title, people }) {\n  return (\n    <>\n      <h2>{title}</h2>\n      <ul>\n        {people.map(person =>\n          <li key={person.id}>\n            <img\n              src={getImageUrl(person)}\n              alt={person.name}\n            />\n            <p>\n              <b>{person.name}:</b>\n              {' ' + person.profession + ' '}\n              known for {person.accomplishment}\n            </p>\n          </li>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default function List() {\n  const chemists = people.filter(person =>\n    person.profession === 'chemist'\n  );\n  const everyoneElse = people.filter(person =>\n    person.profession !== 'chemist'\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ListSection\n        title=\"Chemists\"\n        people={chemists}\n      />\n      <ListSection\n        title=\"Everyone Else\"\n        people={everyoneElse}\n      />\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade-In Animation with useEffect in React\nDESCRIPTION: This example demonstrates using useEffect to control a fade-in animation. It creates a Welcome component that uses a ref to access the DOM node and applies an animation effect when the component mounts, cleaning up when it unmounts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { FadeInAnimation } from './animation.js';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const animation = new FadeInAnimation(ref.current);\n    animation.start(1000);\n    return () => {\n      animation.stop();\n    };\n  }, []);\n\n  return (\n    <h1\n      ref={ref}\n      style={{\n        opacity: 0,\n        color: 'white',\n        padding: 50,\n        textAlign: 'center',\n        fontSize: 50,\n        backgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n      }}\n    >\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Clock App with Color Selection in React\nDESCRIPTION: A complete React application that implements a clock with color selection functionality. Uses useState and useEffect hooks to manage state and time updates, while providing a select input for color changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport Clock from './Clock.js';\n\nfunction useTime() {\n  const [time, setTime] = useState(() => new Date());\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  return time;\n}\n\nexport default function App() {\n  const time = useTime();\n  const [color, setColor] = useState('lightcoral');\n  return (\n    <div>\n      <p>\n        Pick a color:{' '}\n        <select value={color} onChange={e => setColor(e.target.value)}>\n          <option value=\"lightcoral\">lightcoral</option>\n          <option value=\"midnightblue\">midnightblue</option>\n          <option value=\"rebeccapurple\">rebeccapurple</option>\n        </select>\n      </p>\n      <Clock color={color} time={time.toLocaleTimeString()} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hook for Chat Room Management\nDESCRIPTION: This component snippet demonstrates the usage of a custom hook `useChatRoom` for connection management. The hook abstracts the useEffect logic, allowing the `ChatRoom` component to maintain focus on rendering and UI state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useChatRoom } from './useChatRoom.js';\n\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Form Submission using Server Functions in React\nDESCRIPTION: Demonstrates submitting a form with server-side logic using React and Server Functions. The form uses hidden fields to send data to the server function for processing, which is useful when JavaScript is disabled or code hasn't loaded.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { updateCart } from './lib.js';\\n\\nfunction AddToCart({productId}) {\\n  async function addToCart(formData) {\\n    'use server'\\n    const productId = formData.get('productId')\\n    await updateCart(productId)\\n  }\\n  return (\\n    <form action={addToCart}>\\n        <input type=\\\"hidden\\\" name=\\\"productId\\\" value={productId} />\\n        <button type=\\\"submit\\\">Add to Cart</button>\\n    </form>\\n\\n  );\\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { updateCart } from './lib.js';\\n\\nfunction AddToCart({productId}) {\\n  async function addToCart(productId, formData) {\\n    \\\"use server\\\";\\n    await updateCart(productId)\\n  }\\n  const addProductToCart = addToCart.bind(null, productId);\\n  return (\\n    <form action={addProductToCart}>\\n      <button type=\\\"submit\\\">Add to Cart</button>\\n    </form>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Enhanced React 18 Strict Mode Component Lifecycle\nDESCRIPTION: This code snippet shows the enhanced component lifecycle in React 18's Strict Mode, which now includes simulated unmounting and remounting to help identify effects that assume they're only mounted or destroyed once.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n* React mounts the component.\n    * Layout effects are created.\n    * Effect effects are created.\n* React simulates unmounting the component.\n    * Layout effects are destroyed.\n    * Effects are destroyed.\n* React simulates mounting the component with the previous state.\n    * Layout effect setup code runs\n    * Effect setup code runs\n```\n\n----------------------------------------\n\nTITLE: Fixed Pure Clock Component in React\nDESCRIPTION: A corrected version of the clock component that follows React's pure function principles. Instead of manipulating the DOM directly, it calculates the className value and includes it in the returned JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Clock({ time }) {\n  let hours = time.getHours();\n  let className;\n  if (hours >= 0 && hours <= 6) {\n    className = 'night';\n  } else {\n    className = 'day';\n  }\n  return (\n    <h1 className={className}>\n      {time.toLocaleTimeString()}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Chat Room Selection in React\nDESCRIPTION: This snippet manages chat room selection using React Hooks. It uses the `useState` hook to store the selected chat room ID and renders a dropdown for selection. Upon changing the selection, it updates the chat room state. It imports and uses the ChatRoom component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Item Component Implementation\nDESCRIPTION: Shows a full implementation of a React component using conditional rendering with variables and if statements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  let itemContent = name;\n  if (isPacked) {\n    itemContent = name + \" ✅\";\n  }\n  return (\n    <li className=\"item\">\n      {itemContent}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Event Handlers in React\nDESCRIPTION: Demonstrates how to handle form input changes and update parent component state through passed callback functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SearchBar({\n  filterText,\n  inStockOnly,\n  onFilterTextChange,\n  onInStockOnlyChange\n}) {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={filterText}\n        placeholder=\"Search...\"\n        onChange={(e) => onFilterTextChange(e.target.value)}\n      />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={inStockOnly}\n          onChange={(e) => onInStockOnlyChange(e.target.checked)}\n```\n\n----------------------------------------\n\nTITLE: Controlling Non-React Widget with useEffect\nDESCRIPTION: Example showing how to control an external map widget using React state and useEffect. Demonstrates proper initialization and state synchronization with a third-party component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { MapWidget } from './map-widget.js';\n\nexport default function Map({ zoomLevel }) {\n  const containerRef = useRef(null);\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    if (mapRef.current === null) {\n      mapRef.current = new MapWidget(containerRef.current);\n    }\n\n    const map = mapRef.current;\n    map.setZoom(zoomLevel);\n  }, [zoomLevel]);\n\n  return (\n    <div\n      style={{ width: 200, height: 200 }}\n      ref={containerRef}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing State Update in React useEffect Hook\nDESCRIPTION: This snippet demonstrates a Timer component with a bug where the increment value doesn't update properly in the Effect. The fix involves adding the 'increment' variable to the Effect's dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + increment);\n    }, 1000);\n    return () => {\n      clearInterval(id);\n    };\n  }, [increment]);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Simplified Implementation of startTransition in React\nDESCRIPTION: A conceptual implementation showing how React might handle transitions internally, using a flag to mark state updates that occur during the execution of the transition callback.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// A simplified version of how React works\n\nlet isInsideTransition = false;\n\nfunction startTransition(scope) {\n  isInsideTransition = true;\n  scope();\n  isInsideTransition = false;\n}\n\nfunction setState() {\n  if (isInsideTransition) {\n    // ... schedule a Transition state update ...\n  } else {\n    // ... schedule an urgent state update ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Todo List App with Artificially Slowed Rendering in React\nDESCRIPTION: A React application demonstrating the performance impact when a component is artificially slowed down without using useMemo. The example shows how all interactions become slow when a new array is created on each render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createTodos } from './utils.js';\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n  const [tab, setTab] = useState('all');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <button onClick={() => setTab('all')}>\n        All\n      </button>\n      <button onClick={() => setTab('active')}>\n        Active\n      </button>\n      <button onClick={() => setTab('completed')}>\n        Completed\n      </button>\n      <br />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <TodoList\n        todos={todos}\n        tab={tab}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.js';\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = filterTodos(todos, tab);\n  return (\n    <div className={theme}>\n      <p><b>Note: <code>List</code> is artificially slowed down!</b></p>\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n  console.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\n  let startTime = performance.now();\n  while (performance.now() - startTime < 500) {\n    // Do nothing for 500 ms to emulate extremely slow code\n  }\n\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          {item.completed ?\n            <s>{item.text}</s> :\n            item.text\n          }\n        </li>\n      ))}\n    </ul>\n  );\n});\n\nexport default List;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createTodos() {\n  const todos = [];\n  for (let i = 0; i < 50; i++) {\n    todos.push({\n      id: i,\n      text: \"Todo \" + (i + 1),\n      completed: Math.random() > 0.5\n    });\n  }\n  return todos;\n}\n\nexport function filterTodos(todos, tab) {\n  return todos.filter(todo => {\n    if (tab === 'all') {\n      return true;\n    } else if (tab === 'active') {\n      return !todo.completed;\n    } else if (tab === 'completed') {\n      return todo.completed;\n    }\n  });\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.dark {\n  background-color: black;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Rendered HTML for React Hydration Example\nDESCRIPTION: This HTML snippet shows the server-generated content within the root element (`<div id=\"root\">`) that will be hydrated by React on the client. It includes dynamic content (a date) which might cause a hydration mismatch.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"><h1>Current Date: <!-- -->01/01/2020</h1></div>\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data with Fetch in React - JavaScript\nDESCRIPTION: This JavaScript snippet defines a React functional component that displays a form for editing a post, including a textarea for post content. On form submission, it prevents the default page reload, reads the form data using the FormData API, submits the data to an API endpoint via fetch, and logs the structured data to the console. Dependencies include React and browser FormData/fetch APIs. The main parameters are the form event and the form fields (postTitle, postContent), with inputs from the form and no explicit output except side effects (console and network requests).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function EditPost() {\n  function handleSubmit(e) {\n    // Prevent the browser from reloading the page\n    e.preventDefault();\n\n    // Read the form data\n    const form = e.target;\n    const formData = new FormData(form);\n\n    // You can pass formData as a fetch body directly:\n    fetch('/some-api', { method: form.method, body: formData });\n\n    // Or you can work with it as a plain object:\n    const formJson = Object.fromEntries(formData.entries());\n    console.log(formJson);\n  }\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit}>\n      <label>\n        Post title: <input name=\"postTitle\" defaultValue=\"Biking\" />\n      </label>\n      <label>\n        Edit your post:\n        <textarea\n          name=\"postContent\"\n          defaultValue=\"I really enjoyed biking yesterday!\"\n          rows={4}\n          cols={40}\n        />\n      </label>\n      <hr />\n      <button type=\"reset\">Reset edits</button>\n      <button type=\"submit\">Save post</button>\n    </form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixed Gallery Implementation with Navigation Controls\nDESCRIPTION: Improved version with proper boundary checking and previous/next navigation buttons. Includes disabled states for buttons when at the start or end of the gallery.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  let hasPrev = index > 0;\n  let hasNext = index < sculptureList.length - 1;\n\n  function handlePrevClick() {\n    if (hasPrev) {\n      setIndex(index - 1);\n    }\n  }\n\n  function handleNextClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    }\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button\n        onClick={handlePrevClick}\n        disabled={!hasPrev}\n      >\n        Previous\n      </button>\n      <button\n        onClick={handleNextClick}\n        disabled={!hasNext}\n      >\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Asset-Aware App Component Using Asset Map - React with JavaScript\nDESCRIPTION: Shows how to modify the root `App` component to accept an `assetMap` prop. This allows injecting dynamically generated asset URLs (such as hashed CSS/JS files) into the head of the HTML, ensuring consistency with the build output. The prop `assetMap` must be provided by the server and hydrated on the client for consistency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App({ assetMap }) {\n  return (\n    <html>\n      <head>\n        <title>My app</title>\n        <link rel=\"stylesheet\" href={assetMap['styles.css']}></link>\n      </head>\n      ...\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Winner Check in handleClick Function\nDESCRIPTION: Updates the handleClick function to check if there's already a winner before allowing additional moves.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick(i) {\n  if (squares[i] || calculateWinner(squares)) {\n    return;\n  }\n  const nextSquares = squares.slice();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Projecting Complex Data to Boolean Props in React\nDESCRIPTION: This snippet shows how to transform complex data into simpler boolean props before passing them to memoized components. This reduces the likelihood of re-renders by focusing only on relevant state changes rather than detailed data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction GroupsLanding({ person }) {\n  const hasGroups = person.groups !== null;\n  return <CallToAction hasGroups={hasGroups} />;\n}\n\nconst CallToAction = memo(function CallToAction({ hasGroups }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Packing List with Text Styling using Ternary Operator in React\nDESCRIPTION: A React component that uses the ternary operator to conditionally apply styling to list items. Packed items have their text wrapped in a <del> tag to strike them out, while unpacked items are displayed normally.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {isPacked ? (\n        <del>\n          {name + ' ✅'}\n        </del>\n      ) : (\n        name\n      )}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Packing List Component with Derived State in React\nDESCRIPTION: The corrected version of the packing list component that eliminates redundant state by calculating totals directly from the items array. This fixes the bug where counters weren't properly updated when items were deleted.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport AddItem from './AddItem.js';\nimport PackingList from './PackingList.js';\n\nlet nextId = 3;\nconst initialItems = [\n  { id: 0, title: 'Warm socks', packed: true },\n  { id: 1, title: 'Travel journal', packed: false },\n  { id: 2, title: 'Watercolors', packed: false },\n];\n\nexport default function TravelPlan() {\n  const [items, setItems] = useState(initialItems);\n\n  const total = items.length;\n  const packed = items\n    .filter(item => item.packed)\n    .length;\n\n  function handleAddItem(title) {\n    setItems([\n      ...items,\n      {\n        id: nextId++,\n        title: title,\n        packed: false\n      }\n    ]);\n  }\n\n  function handleChangeItem(nextItem) {\n    setItems(items.map(item => {\n      if (item.id === nextItem.id) {\n        return nextItem;\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  function handleDeleteItem(itemId) {\n    setItems(\n      items.filter(item => item.id !== itemId)\n    );\n  }\n\n  return (\n    <>  \n      <AddItem\n        onAddItem={handleAddItem}\n      />\n      <PackingList\n        items={items}\n        onChangeItem={handleChangeItem}\n        onDeleteItem={handleDeleteItem}\n      />\n      <hr />\n      <b>{packed} out of {total} packed!</b>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete React Accordion Implementation\nDESCRIPTION: Full implementation of an Accordion component with controlled Panel subcomponents, showing state management and event handling between parent and children components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Accordion() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel\n        title=\"About\"\n        isActive={activeIndex === 0}\n        onShow={() => setActiveIndex(0)}\n      >\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel\n        title=\"Etymology\"\n        isActive={activeIndex === 1}\n        onShow={() => setActiveIndex(1)}\n      >\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({\n  title,\n  children,\n  isActive,\n  onShow\n}) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={onShow}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nh3, p { margin: 5px 0px; }\n.panel {\n  padding: 10px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript Functions within JSX\nDESCRIPTION: Example of calling a JavaScript function within JSX using curly braces. This demonstrates how to format a date dynamically inside component rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst today = new Date();\n\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat(\n    'en-US',\n    { weekday: 'long' }\n  ).format(date);\n}\n\nexport default function TodoList() {\n  return (\n    <h1>To Do List for {formatDate(today)}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a List Item Component in React\nDESCRIPTION: This example shows how to extract a Recipe component from a nested list rendering. It demonstrates passing props and using the spread operator to simplify component usage.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { recipes } from './data.js';\n\nfunction Recipe({ id, name, ingredients }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <ul>\n        {ingredients.map(ingredient =>\n          <li key={ingredient}>\n            {ingredient}\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default function RecipeList() {\n  return (\n    <div>\n      <h1>Recipes</h1>\n      {recipes.map(recipe =>\n        <Recipe {...recipe} key={recipe.id} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using renderToStaticMarkup in JavaScript\nDESCRIPTION: Demonstrates the basic import and usage of `renderToStaticMarkup` from `react-dom/server`. It shows how to render a simple React component, like `<Page />`, into a static HTML string. This is a minimal example for server-side rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToStaticMarkup.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst html = renderToStaticMarkup(<Page />);\n```\n\n----------------------------------------\n\nTITLE: Updating handlePlay function to support time travel in React Game\nDESCRIPTION: Modified handlePlay function that preserves history only up to the current move when making a new move after going back in time. It also updates currentMove to point to the latest history entry.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handlePlay(nextSquares) {\n  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n  setHistory(nextHistory);\n  setCurrentMove(nextHistory.length - 1);\n  setXIsNext(!xIsNext);\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced TabButton with useTransition\nDESCRIPTION: Improved version of TabButton component using useTransition hook to show pending state in the button itself rather than replacing entire container during loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTransition } from 'react';\n\nexport default function TabButton({ action, children, isActive }) {\n  const [isPending, startTransition] = useTransition();\n  if (isActive) {\n    return <b>{children}</b>\n  }\n  if (isPending) {\n    return <b className=\"pending\">{children}</b>;\n  }\n  return (\n    <button onClick={() => {\n      startTransition(() => {\n        action();\n      });\n    }}>\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Full TodosApp Implementation\nDESCRIPTION: Complete example of a TodosApp component using useSyncExternalStore with a todos store implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\nimport { todosStore } from './todoStore.js';\n\nexport default function TodosApp() {\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n  return (\n    <>\n      <button onClick={() => todosStore.addTodo()}>Add todo</button>\n      <hr />\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Suspense Boundary Implementation in React\nDESCRIPTION: Demonstrates the basic structure of a Suspense boundary wrapping multiple components that may suspend. Shows how components are grouped together for loading state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <Biography />\n  <Panel>\n    <Albums />\n  </Panel>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Using preinit for Eager Script Loading in React (JavaScript)\nDESCRIPTION: This snippet demonstrates a direct call to preinit, passing a URL string and an options object specifying the resource as a script. It initiates an early fetch and execution of the script. No imports or setup are needed—this code assumes preinit is in scope. Useful for scenarios outside of component files. Expects a URL and an object with at least {as: \"script\"}. Returns nothing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinit.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\npreinit(\"https://example.com/script.js\", {as: \"script\"});\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Null Ref with Conditional Rendering in Child Component (React)\nDESCRIPTION: Illustrates a more complex case of conditional rendering causing a `null` ref. The `input` element is inside a `Panel` component whose rendering depends on `isExpanded` (tied to `showInput`). If the `Panel` doesn't render its children, the `ref` is not attached, leading to a `null` ref for `MyInput`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst MyInput = forwardRef(function MyInput({ label, showInput }, ref) {\n  return (\n    <label>\n      {label}\n      <Panel isExpanded={showInput}>\n        <input ref={ref} />\n      </Panel>\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Receiving Props for Root Updates\nDESCRIPTION: A simple React functional component that receives a `counter` prop and renders it within an `<h1>` tag alongside an `<input>` element. This component is used in the example demonstrating updates to a hydrated root via `root.render`, showcasing state preservation in the input field during re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App({counter}) {\n  return (\n    <>\n      <h1>Hello, world! {counter}</h1>\n      <input placeholder=\"Type something here\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in a React Class Component\nDESCRIPTION: Shows how to implement the required render method in a React class component. The method returns JSX to specify what should appear on the screen.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Preservation with Conditional Rendering in React\nDESCRIPTION: Example showing how React preserves state when rendering the same component at the same position, even with different props. The component includes a counter with fancy styling toggle and hover effects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  return (\n    <div>\n      {isFancy ? (\n        <Counter isFancy={true} /> \n      ) : (\n        <Counter isFancy={false} /> \n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.fancy {\n  border: 5px solid gold;\n  color: #ff6767;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Component with itemProp for Specific Item Metadata\nDESCRIPTION: This snippet demonstrates how to use the <meta> component with the itemProp prop to annotate specific items within the document. In this case, React will not place these annotations in the document <head> but will render them inline.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/meta.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<section itemScope>\n  <h3>Annotating specific items</h3>\n  <meta itemProp=\"description\" content=\"API reference for using <meta> with itemProp\" />\n  <p>...</p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Using startTransition in Tab Component\nDESCRIPTION: Demonstrates how to use startTransition to handle tab switching in a React component. The state update is wrapped in startTransition to make it non-blocking.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/startTransition.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n    startTransition(() => {\n      setTab(nextTab);\n    });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Status Tracking with useState and useEffect in React\nDESCRIPTION: A component that tracks network connectivity status using useState to maintain the online state and useEffect to subscribe to online/offline events. It displays either '✅ Online' or '❌ Disconnected' based on the current status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function StatusBar() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructor Method in React Class Components\nDESCRIPTION: Demonstrates how to use the constructor method to initialize state and bind methods in a class component, which runs before the component mounts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Row List with Render Props in React\nDESCRIPTION: This example demonstrates how to use render props to create a flexible row list component. It shows passing additional data (id and index) to the render prop function and using it for conditional styling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n  return (\n    <RowList\n      rowIds={['first', 'second', 'third']}\n      renderRow={(id, index) => {\n        return (\n          <Row isHighlighted={index % 2 === 0}>\n            <p>This is the {id} item.</p>\n          </Row> \n        );\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Fragment } from 'react';\n\nexport function RowList({ rowIds, renderRow }) {\n  return (\n    <div className=\"RowList\">\n      <h1 className=\"RowListHeader\">\n        Total rows: {rowIds.length}\n      </h1>\n      {rowIds.map((rowId, index) =>\n        <Fragment key={rowId}>\n          {renderRow(rowId, index)}\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nexport function Row({ children, isHighlighted }) {\n  return (\n    <div className={[\n      'Row',\n      isHighlighted ? 'RowHighlighted' : ''\n    ].join(' ')}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useCallback Hook Syntax in React\nDESCRIPTION: The basic syntax for the useCallback Hook in React, showing how to cache a function definition between re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cachedFn = useCallback(fn, dependencies)\n```\n\n----------------------------------------\n\nTITLE: Optimizing React Timer with useEffectEvent\nDESCRIPTION: This snippet shows how to fix a freezing counter issue in a React Timer component. It uses the experimental useEffectEvent hook to extract the tick logic, preventing unnecessary Effect re-synchronization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  const onTick = useEffectEvent(() => {\n    setCount(c => c + increment);\n  });\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      onTick();\n    }, 1000);\n    return () => {\n      clearInterval(id);\n    };\n  }, []);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Testing component render with act in JavaScript\nDESCRIPTION: The example illustrates rendering a TestComponent within an act call and making assertions post-render. This ensures that all updates are flushed before checks, thus mimicking React's behavior in a real browser environment.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/act.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nit ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Object State in React Form\nDESCRIPTION: A React component that demonstrates how to update nested state objects immutably in a form. It maintains a person object with nested artwork data and shows proper state update patterns using the spread operator.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img \n        src={person.artwork.image} \n        alt={person.artwork.title}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React.lazy with Dynamic Import\nDESCRIPTION: Example of importing the lazy function from React and using it with dynamic import to create a lazy-loaded component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n```\n\n----------------------------------------\n\nTITLE: Exposing Selective DOM Methods with useImperativeHandle\nDESCRIPTION: Example showing how to expose only specific methods from a DOM element using useImperativeHandle and a separate ref for the DOM node.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input ref={inputRef} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Modal Dialog with Proper Cleanup\nDESCRIPTION: Using useEffect to show a modal dialog and properly cleaning up by closing it when the component unmounts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const dialog = dialogRef.current;\n  dialog.showModal();\n  return () => dialog.close();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using useEffect without Dependency Array in React\nDESCRIPTION: This example shows how to use useEffect without a dependency array, causing the effect to run after every render. It demonstrates a chat room component where the effect re-runs on every state change, including message updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }); // No dependency array at all\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n      <label>\n        Your message:{' '}\n        <input value={message} onChange={e => setMessage(e.target.value)} />\n      </label>\n    </>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n        <button onClick={() => setShow(!show)}>\n          {show ? 'Close chat' : 'Open chat'}\n        </button>\n      </label>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId}/>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning a React Tooltip using useLayoutEffect\nDESCRIPTION: This React component (`Tooltip`) displays tooltip content near a target element defined by `targetRect`. It uses `useRef` to get a reference to the tooltip's DOM node and `useState` to store its measured height. Crucially, it employs `useLayoutEffect` to measure the tooltip's height (`ref.current.getBoundingClientRect().height`) synchronously after rendering but before the browser paints. This allows it to accurately calculate the `tooltipY` position, trying to place it above the target (`targetRect.top - tooltipHeight`). If there isn't enough space above (`tooltipY < 0`), it positions the tooltip below the target (`targetRect.bottom`). `createPortal` is used to render the tooltip directly into the `document.body`, ensuring it isn't constrained by parent element styling or overflow.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useLayoutEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n  }, []);\n\n  let tooltipX = 0;\n  let tooltipY = 0;\n  if (targetRect !== null) {\n    tooltipX = targetRect.left;\n    tooltipY = targetRect.top - tooltipHeight;\n    if (tooltipY < 0) {\n      // It doesn't fit above, so place below.\n      tooltipY = targetRect.bottom;\n    }\n  }\n\n  return createPortal(\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n      {children}\n    </TooltipContainer>,\n    document.body\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Option in React Select\nDESCRIPTION: Sets an initial selected option in a select box using the defaultValue prop. This demonstrates how to pre-select an option other than the first one when the component renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FruitPicker() {\n  return (\n    <label>\n      Pick a fruit:\n      <select name=\"selectedFruit\" defaultValue=\"orange\">\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </select>\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nselect { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Extracting Context Providers into Components\nDESCRIPTION: Demonstrates how to refactor multiple context providers into a single component to improve code organization. Creates a MyProviders component that encapsulates the context provider hierarchy while maintaining state management in the parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyProviders({ children, theme, setTheme }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <ThemeContext.Provider value={theme}>\n      <CurrentUserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser\n        }}\n      >\n        {children}\n      </CurrentUserContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events in React\nDESCRIPTION: This example shows how to use various pointer event handlers in React, including onPointerEnter, onPointerMove, onPointerDown, onPointerUp, and onPointerLeave. Each event is logged to the console when triggered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onPointerEnter={e => console.log('onPointerEnter')}\n  onPointerMove={e => console.log('onPointerMove')}\n  onPointerDown={e => console.log('onPointerDown')}\n  onPointerUp={e => console.log('onPointerUp')}\n  onPointerLeave={e => console.log('onPointerLeave')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Declaring createRef in a Class Component (JavaScript)\nDESCRIPTION: Example of how to declare a ref using createRef in a React class component. This snippet shows the basic syntax for creating a ref object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createRef.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyInput extends Component {\n  inputRef = createRef();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Semantically Meaningful Action for Message Sending in React\nDESCRIPTION: Updates the Chat component to dispatch a dedicated 'sent_message' action when sending a message, which better represents the user's intention than reusing the 'edited_message' action.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={message}\n        placeholder={'Chat to ' + contact.name}\n        onChange={(e) => {\n          dispatch({\n            type: 'edited_message',\n            message: e.target.value,\n          });\n        }}\n      />\n      <br />\n      <button\n        onClick={() => {\n          alert(`Sending \"${message}\" to ${contact.email}`);\n          dispatch({\n            type: 'sent_message',\n          });\n        }}>\n        Send to {contact.email}\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Third-Party Map Widget\nDESCRIPTION: This code initializes a third-party map widget and retrieves a DOM node to act as a container for a React portal. It uses React's `useEffect` to ensure the map widget initializes only once, fetching the popup container for React rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n  if (mapRef.current === null) {\n    const map = createMapWidget(containerRef.current);\n    mapRef.current = map;\n    const popupDiv = addPopupToMapWidget(map);\n    setPopupContainer(popupDiv);\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Post Component with Custom Imperative Handle\nDESCRIPTION: Implementation of a Post component that composes functionality from child components and exposes a custom scrollAndFocusAddComment method via useImperativeHandle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from 'react';\nimport CommentList from './CommentList.js';\nimport AddComment from './AddComment.js';\n\nfunction Post({ ref }) {\n  const commentsRef = useRef(null);\n  const addCommentRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      scrollAndFocusAddComment() {\n        commentsRef.current.scrollToBottom();\n        addCommentRef.current.focus();\n      }\n    };\n  }, []);\n\n  return (\n    <>\n      <article>\n        <p>Welcome to my blog!</p>\n      </article>\n      <CommentList ref={commentsRef} />\n      <AddComment ref={addCommentRef} />\n    </>\n  );\n};\n\nexport default Post;\n```\n\n----------------------------------------\n\nTITLE: Contact List Component Implementation\nDESCRIPTION: Component that renders the list of contacts and handles contact selection through dispatch actions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ContactList({contacts, selectedId, dispatch}) {\n  return (\n    <section className=\"contact-list\">\n      <ul>\n        {contacts.map((contact) => (\n          <li key={contact.id}>\n            <button\n              onClick={() => {\n                dispatch({\n                  type: 'changed_selection',\n                  contactId: contact.id,\n                });\n              }}>\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Travel Plan Data Structure in React\nDESCRIPTION: This module defines the initial travel plan data structure used by the TravelPlan component. It organizes locations hierarchically with parent-child relationships using IDs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialTravelPlan = {\n  0: {\n    id: 0,\n    title: '(Root)',\n    childIds: [1, 42, 46],\n  },\n  1: {\n    id: 1,\n    title: 'Earth',\n    childIds: [2, 10, 19, 26, 34]\n  },\n  2: {\n    id: 2,\n    title: 'Africa',\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\n  }, \n  3: {\n    id: 3,\n    title: 'Botswana',\n    childIds: []\n  },\n  4: {\n    id: 4,\n    title: 'Egypt',\n    childIds: []\n  },\n  5: {\n    id: 5,\n    title: 'Kenya',\n    childIds: []\n  },\n  6: {\n    id: 6,\n    title: 'Madagascar',\n    childIds: []\n  }, \n  7: {\n    id: 7,\n    title: 'Morocco',\n    childIds: []\n  },\n  8: {\n    id: 8,\n    title: 'Nigeria',\n    childIds: []\n  },\n  9: {\n    id: 9,\n    title: 'South Africa',\n    childIds: []\n  },\n  10: {\n    id: 10,\n    title: 'Americas',\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \n  },\n  11: {\n    id: 11,\n    title: 'Argentina',\n    childIds: []\n  },\n  12: {\n    id: 12,\n    title: 'Brazil',\n    childIds: []\n  },\n  13: {\n    id: 13,\n    title: 'Barbados',\n    childIds: []\n  }, \n  14: {\n    id: 14,\n    title: 'Canada',\n    childIds: []\n  },\n  15: {\n    id: 15,\n    title: 'Jamaica',\n    childIds: []\n  },\n  16: {\n    id: 16,\n    title: 'Mexico',\n    childIds: []\n  },\n  17: {\n    id: 17,\n    title: 'Trinidad and Tobago',\n    childIds: []\n  },\n  18: {\n    id: 18,\n    title: 'Venezuela',\n    childIds: []\n  },\n  19: {\n    id: 19,\n    title: 'Asia',\n    childIds: [20, 21, 22, 23, 24, 25,],   \n  },\n  20: {\n    id: 20,\n    title: 'China',\n    childIds: []\n  },\n  21: {\n    id: 21,\n    title: 'India',\n    childIds: []\n  },\n  22: {\n    id: 22,\n    title: 'Singapore',\n    childIds: []\n  },\n  23: {\n    id: 23,\n    title: 'South Korea',\n    childIds: []\n  },\n  24: {\n    id: 24,\n    title: 'Thailand',\n    childIds: []\n  },\n  25: {\n    id: 25,\n    title: 'Vietnam',\n    childIds: []\n  },\n  26: {\n    id: 26,\n    title: 'Europe',\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \n  },\n  27: {\n    id: 27,\n    title: 'Croatia',\n    childIds: []\n  },\n  28: {\n    id: 28,\n    title: 'France',\n    childIds: []\n  },\n  29: {\n    id: 29,\n    title: 'Germany',\n    childIds: []\n  },\n  30: {\n    id: 30,\n    title: 'Italy',\n    childIds: []\n  },\n  31: {\n    id: 31,\n    title: 'Portugal',\n    childIds: []\n  },\n  32: {\n    id: 32,\n    title: 'Spain',\n    childIds: []\n  },\n  33: {\n    id: 33,\n    title: 'Turkey',\n    childIds: []\n  },\n  34: {\n    id: 34,\n    title: 'Oceania',\n    childIds: [35, 36, 37, 38, 39, 40,, 41],   \n  },\n  35: {\n    id: 35,\n    title: 'Australia',\n    childIds: []\n  },\n  36: {\n    id: 36,\n    title: 'Bora Bora (French Polynesia)',\n    childIds: []\n  },\n  37: {\n    id: 37,\n    title: 'Easter Island (Chile)',\n    childIds: []\n  },\n  38: {\n    id: 38,\n    title: 'Fiji',\n    childIds: []\n  },\n  39: {\n    id: 39,\n    title: 'Hawaii (the USA)',\n    childIds: []\n  },\n  40: {\n    id: 40,\n    title: 'New Zealand',\n    childIds: []\n  },\n  41: {\n    id: 41,\n    title: 'Vanuatu',\n    childIds: []\n  },\n  42: {\n    id: 42,\n    title: 'Moon',\n    childIds: [43, 44, 45]\n  },\n  43: {\n    id: 43,\n    title: 'Rheita',\n    childIds: []\n  },\n  44: {\n    id: 44,\n    title: 'Piccolomini',\n    childIds: []\n  },\n  45: {\n    id: 45,\n    title: 'Tycho',\n    childIds: []\n  },\n  46: {\n    id: 46,\n    title: 'Mars',\n    childIds: [47, 48]\n  },\n  47: {\n    id: 47,\n    title: 'Corn Town',\n    childIds: []\n  },\n  48: {\n    id: 48,\n    title: 'Green Hill',\n    childIds: []\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useReducer in a Component\nDESCRIPTION: A basic implementation of useReducer in a React component, showing how to import the Hook, define a reducer function, and use it within the component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  // ...\n}\n\nfunction MyComponent() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler for Chat Message\nDESCRIPTION: Example showing how to implement a message sending event handler in a chat room component. The handler only runs in response to specific user interactions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n  // ...\n  function handleSendClick() {\n    sendMessage(message);\n  }\n  // ...\n  return (\n    <>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Hydration for Two-Pass Rendering\nDESCRIPTION: This JavaScript snippet initializes the React application using `hydrateRoot`, attaching the `App` component to the server-rendered HTML. This setup is used in conjunction with the two-pass rendering technique demonstrated in the corresponding `App.js`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\n----------------------------------------\n\nTITLE: Using useEffect Hook in React\nDESCRIPTION: Example of using the useEffect Hook to connect a component to an external system. This snippet demonstrates creating and managing a chat connection based on a roomId prop, with proper cleanup on unmount or when roomId changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Deferring UI Updates with useDeferredValue in React - JavaScript\nDESCRIPTION: This snippet shows how to declare and use the useDeferredValue hook in a React component to create a deferred version of user input, helping to manage updates that should \"lag\" behind fast-changing values. It demonstrates importing useState and useDeferredValue from react, updating local state, and deriving a deferredQuery variable. Intended for use with expensive renders or slow data fetching, it does not render UI but establishes the deferred value for use elsewhere.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Uncontrolled Select Values on Form Submit in React\nDESCRIPTION: Demonstrates handling form submission in React for uncontrolled single and multiple select elements. It uses `e.preventDefault()` to stop page reload, reads form data using `new FormData(e.target)`, and shows how to process this data (e.g., for fetch requests or logging). Select inputs use the `defaultValue` prop for initial selection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default function EditPost() {\n  function handleSubmit(e) {\n    // Prevent the browser from reloading the page\n    e.preventDefault();\n    // Read the form data\n    const form = e.target;\n    const formData = new FormData(form);\n    // You can pass formData as a fetch body directly:\n    fetch('/some-api', { method: form.method, body: formData });\n    // You can generate a URL out of it, as the browser does by default:\n    console.log(new URLSearchParams(formData).toString());\n    // You can work with it as a plain object.\n    const formJson = Object.fromEntries(formData.entries());\n    console.log(formJson); // (!) This doesn't include multiple select values\n    // Or you can get an array of name-value pairs.\n    console.log([...formData.entries()]);\n  }\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit}>\n      <label>\n        Pick your favorite fruit:\n        <select name=\"selectedFruit\" defaultValue=\"orange\">\n          <option value=\"apple\">Apple</option>\n          <option value=\"banana\">Banana</option>\n          <option value=\"orange\">Orange</option>\n        </select>\n      </label>\n      <label>\n        Pick all your favorite vegetables:\n        <select\n          name=\"selectedVegetables\"\n          multiple={true}\n          defaultValue={['corn', 'tomato']}\n        >\n          <option value=\"cucumber\">Cucumber</option>\n          <option value=\"corn\">Corn</option>\n          <option value=\"tomato\">Tomato</option>\n        </select>\n      </label>\n      <hr />\n      <button type=\"reset\">Reset</button>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Profile Component with Dynamic Styling\nDESCRIPTION: A complete example of a React profile component that displays user information with dynamic styling based on JavaScript variables.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  name: 'Hedy Lamarr',\n  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n  imageSize: 90,\n};\n\nexport default function Profile() {\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <img\n        className=\"avatar\"\n        src={user.imageUrl}\n        alt={'Photo of ' + user.name}\n        style={{\n          width: user.imageSize,\n          height: user.imageSize\n        }}\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.avatar {\n  border-radius: 50%;\n}\n\n.large {\n  border: 4px solid gold;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React to Readable Stream with Server Response\nDESCRIPTION: This JavaScript snippet demonstrates the use of `renderToReadableStream` from 'react-dom/server' to asynchronously render a React element (`<App />`) into a Readable Web Stream and respond with HTML content. It uses server-side options such as `bootstrapScripts` to ensure client-side hydration with the `hydrateRoot` function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderToReadableStream } from 'react-dom/server';\n\nasync function handler(request) {\n  const stream = await renderToReadableStream(<App />, {\n    bootstrapScripts: ['/main.js']\n  });\n  return new Response(stream, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Router with Transitions in React\nDESCRIPTION: This snippet demonstrates a basic router implementation using React's useState and useTransition hooks. It handles navigation between pages and wraps page transitions in a Suspense boundary.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState, useTransition } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>\n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n  const [isPending, startTransition] = useTransition();\n\n  function navigate(url) {\n    startTransition(() => {\n      setPage(url);\n    });\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout isPending={isPending}>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Asset Mapping\nDESCRIPTION: The JavaScript example demonstrates how to render a React tree with `renderToReadableStream`, incorporating an asset map for dynamic resource paths. It also sets up a global variable on the client side for hydration consistency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// You'd need to get this JSON from your build tooling, e.g. read it from the build output.\nconst assetMap = {\n  'styles.css': '/styles.123456.css',\n  'main.js': '/main.123456.js'\n};\n\nasync function handler(request) {\n  const stream = await renderToReadableStream(<App assetMap={assetMap} />, {\n    // Careful: It's safe to stringify() this because this data isn't user-generated.\n    bootstrapScriptContent: `window.assetMap = ${JSON.stringify(assetMap)};`,\n    bootstrapScripts: [assetMap['/main.js']],\n  });\n  return new Response(stream, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Repeated State Updates Without Updater Function in React - JavaScript\nDESCRIPTION: This snippet illustrates an anti-pattern: directly updating state multiple times in a handler (setAge(age + 1) called three times) will only result in a single increment because all three updates use the same stale value. Inputs: Button click. Dependencies: variable 'age', setAge. Output: 'age' is incremented only once. Demonstrates a key React state update caveat and motivates the use of updater functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleClick() {\\n  setAge(age + 1); // setAge(42 + 1)\\n  setAge(age + 1); // setAge(42 + 1)\\n  setAge(age + 1); // setAge(42 + 1)\\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Exports\nDESCRIPTION: Shows how to use both default and named exports in the same file, with corresponding import syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport Gallery from './Gallery.js';\nimport { Profile } from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Profile />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Gallery.js\nexport function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Rendering with useSyncExternalStore\nDESCRIPTION: Shows how to add server rendering support to the useOnlineStatus Hook by providing a getServerSnapshot function as the third argument to useSyncExternalStore, ensuring that the data generated during server rendering matches the client.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return isOnline;\n}\n\nfunction getSnapshot() {\n  return navigator.onLine;\n}\n\nfunction getServerSnapshot() {\n  return true; // Always show \"Online\" for server-generated HTML\n}\n\nfunction subscribe(callback) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pure React Recipe Component\nDESCRIPTION: A pure React component that calculates recipe quantities based on the number of drinkers, demonstrating how components should return consistent JSX for the same props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Recipe({ drinkers }) {\n  return (\n    <ol>    \n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'ref' as a Prop in Function Components\nDESCRIPTION: Shows how to access 'ref' as a prop in function components in React 19, eliminating the need for forwardRef in new components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyInput({placeholder, ref}) {\n  return <input placeholder={placeholder} ref={ref} />\n}\n\n//...\n<MyInput ref={ref} />\n```\n\n----------------------------------------\n\nTITLE: Using Props in React Class Components\nDESCRIPTION: Demonstrates how to access props in a class component using this.props, and how to pass props when using the component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n\n<Greeting name=\"Taylor\" />\n```\n\n----------------------------------------\n\nTITLE: React App with Cross-Component Focus Management using useRef\nDESCRIPTION: An enhanced React application that implements focus management between separate components. Uses useRef to create a reference to the input field that can be accessed from the button's click handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\nimport SearchButton from './SearchButton.js';\nimport SearchInput from './SearchInput.js';\n\nexport default function Page() {\n  const inputRef = useRef(null);\n  return (\n    <>\n      <nav>\n        <SearchButton onClick={() => {\n          inputRef.current.focus();\n        }} />\n      </nav>\n      <SearchInput ref={inputRef} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Event Propagation in React Components\nDESCRIPTION: Demonstrates event bubbling in React with a toolbar component containing buttons. Shows how events propagate from child elements to parent elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <button onClick={() => alert('Playing!')}>\n        Play Movie\n      </button>\n      <button onClick={() => alert('Uploading!')}>\n        Upload Image\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.Toolbar {\n  background: #aaa;\n  padding: 5px;\n}\nbutton { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with Separators in React\nDESCRIPTION: This snippet shows how to render a list of poem lines with separators between each line. It uses React Fragments to group elements without adding extra DOM nodes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fragment } from 'react';\n\nconst poem = {\n  lines: [\n    'I write, erase, rewrite',\n    'Erase again, and then',\n    'A poppy blooms.'\n  ]\n};\n\nexport default function Poem() {\n  return (\n    <article>\n      {poem.lines.map((line, i) =>\n        <Fragment key={i}>\n          {i > 0 && <hr />}\n          <p>{line}</p>\n        </Fragment>\n      )}\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter as a Client Component in React\nDESCRIPTION: This snippet demonstrates a Counter component that uses state and event handlers, requiring it to be a Client Component with the 'use client' directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useState } from 'react';\n\nexport default function Counter({initialValue = 0}) {\n  const [countValue, setCountValue] = useState(initialValue);\n  const increment = () => setCountValue(countValue + 1);\n  const decrement = () => setCountValue(countValue - 1);\n  return (\n    <>\n      <h2>Count Value: {countValue}</h2>\n      <button onClick={increment}>+1</button>\n      <button onClick={decrement}>-1</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into React Array State\nDESCRIPTION: Demonstrates how to insert an item at a specific index in an array using spread syntax and slice(). The example shows adding a new artist at index 1 while maintaining state immutability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(\n    initialArtists\n  );\n\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n      // Items before the insertion point:\n      ...artists.slice(0, insertAt),\n      // New item:\n      { id: nextId++, name: name },\n      // Items after the insertion point:\n      ...artists.slice(insertAt)\n    ];\n    setArtists(nextArtists);\n    setName('');\n  }\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={handleClick}>\n        Insert\n      </button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-left: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Albums Component with Data Fetching\nDESCRIPTION: Component that fetches and displays artist albums using React's use hook with Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Albums({ artistId }) {\n  const albums = use(fetchData(`/${artistId}/albums`));\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Memoized Component with Internal State\nDESCRIPTION: Demonstrates that even memoized components will re-render when their internal state changes, showing that memoization only prevents re-renders from parent component updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <>\n      <label>\n        Name{': '}\n        <input value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        Address{': '}\n        <input value={address} onChange={e => setAddress(e.target.value)} />\n      </label>\n      <Greeting name={name} />\n    </>\n  );\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log('Greeting was rendered at', new Date().toLocaleTimeString());\n  const [greeting, setGreeting] = useState('Hello');\n  return (\n    <>\n      <h3>{greeting}{name && ', '}{name}!</h3>\n      <GreetingSelector value={greeting} onChange={setGreeting} />\n    </>\n  );\n});\n\nfunction GreetingSelector({ value, onChange }) {\n  return (\n    <>\n      <label>\n        <input\n          type=\"radio\"\n          checked={value === 'Hello'}\n          onChange={e => onChange('Hello')}\n        />\n        Regular greeting\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          checked={value === 'Hello and welcome'}\n          onChange={e => onChange('Hello and welcome')}\n        />\n        Enthusiastic greeting\n      </label>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values for Inputs in React\nDESCRIPTION: Illustrates how to set initial values for text inputs using the defaultValue attribute and for checkboxes and radio buttons using the defaultChecked attribute. Demonstrates setting default states for form elements in React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function MyForm() {\n  return (\n    <>\n      <label>\n        Text input: <input name=\"myInput\" defaultValue=\"Some initial value\" />\n      </label>\n      <hr />\n      <label>\n        Checkbox: <input type=\"checkbox\" name=\"myCheckbox\" defaultChecked={true} />\n      </label>\n      <hr />\n      <p>\n        Radio buttons:\n        <label>\n          <input type=\"radio\" name=\"myRadio\" value=\"option1\" />\n          Option 1\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"myRadio\"\n            value=\"option2\"\n            defaultChecked={true} \n          />\n          Option 2\n        </label>\n        <label>\n          <input type=\"radio\" name=\"myRadio\" value=\"option3\" />\n          Option 3\n        </label>\n      </p>\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Correctly Updating State in React useEffect using Updater Function\nDESCRIPTION: This corrected `ChatRoom` component demonstrates how to update state based on the previous state within `useEffect` without adding the state variable itself to the dependencies. It uses the updater function form of `setMessages` (`setMessages(msgs => [...msgs, receivedMessage])`), which receives the latest state (`msgs`) automatically. This avoids reading the `messages` variable directly in the Effect, allowing its removal from the dependency array and preventing unnecessary reconnections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js {7,10}\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Posts with Nested Fragments in React (JavaScript)\nDESCRIPTION: This example defines a Blog component that renders multiple Post components as siblings using the Fragment shorthand. The Post component groups PostTitle and PostBody inside a Fragment. React is required, and all components demonstrate returning grouped JSX elements. Inputs include post titles and bodies; output is multiple blog posts without unnecessary DOM wrappers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nexport default function Blog() {\n  return (\n    <>\n      <Post title=\"An update\" body=\"It's been a while since I posted...\" />\n      <Post title=\"My new blog\" body=\"I am starting a new blog!\" />\n    </>\n  )\n}\n\nfunction Post({ title, body }) {\n  return (\n    <>\n      <PostTitle title={title} />\n      <PostBody body={body} />\n    </>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Heading Levels with React Context\nDESCRIPTION: Demonstrates using React Context to manage heading levels in a nested component structure. Shows how Section components track and increment heading levels without prop drilling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext.Provider value={level + 1}>\n        {children}\n      </LevelContext.Provider>\n    </section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 0:\n      throw Error('Heading must be inside a Section!');\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n      return <h2>{children}</h2>;\n    case 3:\n      return <h3>{children}</h3>;\n    case 4:\n      return <h4>{children}</h4>;\n    case 5:\n      return <h5>{children}</h5>;\n    case 6:\n      return <h6>{children}</h6>;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n```\n\nLANGUAGE: css\nCODE:\n```\n.section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Object Dependencies in React useEffect\nDESCRIPTION: This example demonstrates how to remove unnecessary object dependencies in a useEffect hook. It creates the options object inside the effect instead of during rendering, reducing unnecessary effect re-runs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining React useDeferredValue and Visual Cues for Stale Data (App.js)\nDESCRIPTION: The complete `App` component implementing the deferred value pattern. It uses `useState` for the immediate query, `useDeferredValue` to get the deferred query, and computes an `isStale` boolean. The `SearchResults` component receives the `deferredQuery` and is wrapped in a `div` whose opacity is controlled by `isStale`, providing feedback while avoiding the main Suspense fallback.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState, useDeferredValue } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query);\n  const isStale = query !== deferredQuery;\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <div style={{ opacity: isStale ? 0.5 : 1 }}>\n          <SearchResults query={deferredQuery} />\n        </div>\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining a React Class Component\nDESCRIPTION: Demonstrates how to import the Component class from the React package and extend it to create a custom component with a render method.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Like Button with Server Function in React\nDESCRIPTION: This snippet demonstrates how to create a Like button component that calls a Server Function to increment likes. It uses React hooks like useState and useTransition for state management and to handle the asynchronous nature of the Server Function call.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport incrementLike from './actions';\nimport { useState, useTransition } from 'react';\n\nfunction LikeButton() {\n  const [isPending, startTransition] = useTransition();\n  const [likeCount, setLikeCount] = useState(0);\n\n  const onClick = () => {\n    startTransition(async () => {\n      const currentCount = await incrementLike();\n      setLikeCount(currentCount);\n    });\n  };\n\n  return (\n    <>\n      <p>Total Likes: {likeCount}</p>\n      <button onClick={onClick} disabled={isPending}>Like</button>;\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useTransition in a Form Component\nDESCRIPTION: Demonstrates calling `useTransition` at the top level of a `CheckoutForm` component. It highlights the returned `isPending` state and `startTransition` function, preparing the component for transition-based updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {useState, useTransition} from 'react';\n\nfunction CheckoutForm() {\n  const [isPending, startTransition] = useTransition();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Clipboard Events in React\nDESCRIPTION: Demonstrates how to handle clipboard events in React using onCopy, onCut, and onPaste event handlers. These handlers receive a React event object with ClipboardEvent properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n<input\n  onCopy={e => console.log('onCopy')}\n  onCut={e => console.log('onCut')}\n  onPaste={e => console.log('onPaste')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Suspense-Enabled Search App with React - JavaScript\nDESCRIPTION: This React App component implements a search interface for albums, using Suspense to display a fallback while results are loading. It manages the query state using useState, passes it to a SearchResults child, and shows a loading indicator via a Suspense fallback. Dependencies include React (with Suspense and hooks), the SearchResults component, and suitable data-fetching logic. Inputs: user text; Outputs: a list of albums matching the query.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Suspense, useState } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={query} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Gallery Implementation in React\nDESCRIPTION: Basic implementation of a gallery component showing sculptures with next button and show/hide details functionality. Contains a bug where clicking next on the last item causes a crash.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Correct Function Storage in React State\nDESCRIPTION: This snippet demonstrates the correct way to store functions in React state by wrapping them in arrow functions. This prevents React from calling the functions and allows them to be stored as intended.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst [fn, setFn] = useState(() => someFunction);\n\nfunction handleClick() {\n  setFn(() => someOtherFunction);\n}\n```\n\n----------------------------------------\n\nTITLE: Example React Application Structure with Tooltip Buttons\nDESCRIPTION: This is the main application component (`App.js`) demonstrating the usage of a custom `ButtonWithTooltip` component. It renders several buttons, each configured with different tooltip content, showcasing how the tooltip might behave in various layout scenarios.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n  return (\n    <div>\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>\n            This tooltip does not fit above the button.\n            <br />\n            This is why it's displayed below instead!\n          </div>\n        }\n      >\n        Hover over me (tooltip above)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Reducer Function Template in React\nDESCRIPTION: A skeleton template for a reducer function that takes the current state and an action object as arguments, and returns the next state. This is the foundation for implementing useReducer in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction yourReducer(state, action) {\n  // return next state for React to set\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Cache Miss by Using Primitive Arguments\nDESCRIPTION: This example shows how to fix cache misses by passing primitive values instead of objects to a memoized function. Since primitives are compared by value rather than reference, this ensures proper cache hits between different component instances.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cache} from 'react';\n\nconst calculateNorm = cache((x, y, z) => {\n  // ...\n});\n\nfunction MapMarker(props) {\n  // ✅ Good: Pass primitives to memoized function\n  const length = calculateNorm(props.x, props.y, props.z);\n  // ...\n}\n\nfunction App() {\n  return (\n    <>\n      <MapMarker x={10} y={10} z={10} />\n      <MapMarker x={10} y={10} z={10} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Values Outside Component to Remove Dependencies\nDESCRIPTION: This example demonstrates how to remove a dependency by moving a value outside the component. When serverUrl is no longer a reactive value inside the component, it doesn't need to be in the dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234'; // Not a reactive value anymore\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State with useReducer in React (JavaScript)\nDESCRIPTION: Illustrates how to initialize state using the `useReducer` hook. It takes a reducer function (`tasksReducer`) and an initial state (`initialTasks`) as arguments. It returns the current state (`tasks`) and a `dispatch` function used to send actions to the reducer for state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n```\n\n----------------------------------------\n\nTITLE: Example of State Reset Due to Conditional Rendering (React)\nDESCRIPTION: This example demonstrates a form input that loses its state when a hint button is clicked. The issue occurs because the Form component changes position in the component tree due to conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  if (showHint) {\n    return (\n      <div>\n        <p><i>Hint: Your favorite city?</i></p>\n        <Form />\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Form />\n      <button onClick={() => {\n        setShowHint(true);\n      }}>Show hint</button>\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ntextarea { display: block; margin: 10px 0; }\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Null Ref Due to Conditional Rendering in React\nDESCRIPTION: Demonstrates how conditional rendering can lead to a `null` ref. If the `showInput` prop is `false`, the `input` element receiving the `ref` is not rendered, and thus the ref forwarded by `MyInput` remains `null`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst MyInput = forwardRef(function MyInput({ label, showInput }, ref) {\n  return (\n    <label>\n      {label}\n      {showInput && <input ref={ref} />}\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Full React App Setup and Root Rendering\nDESCRIPTION: This set of code snippets illustrates the setup of a full React application, creating a single root for rendering the main component, App, and the use of createRoot and root.render methods. Additionally, it demonstrates inclusion of external files like styles.css and modular component setup with useState hook for interactive elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head><title>My app</title></head>\n  <body>\n    <!-- This is the DOM node -->\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport App from './App.js';\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  return (\n    <>\n      <h1>Hello, world!</h1>\n      <Counter />\n    </>\n  );\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      You clicked me {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shipping Form Component\nDESCRIPTION: Memoized ShippingForm component with form handling and artificial performance delay for demonstration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo, useState } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n  const [count, setCount] = useState(1);\n\n  console.log('[ARTIFICIALLY SLOW] Rendering <ShippingForm />');\n  let startTime = performance.now();\n  while (performance.now() - startTime < 500) {\n    // Do nothing for 500 ms to emulate extremely slow code\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const orderDetails = {\n      ...Object.fromEntries(formData),\n      count\n    };\n    onSubmit(orderDetails);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p><b>Note: <code>ShippingForm</code> is artificially slowed down!</b></p>\n      <label>\n        Number of items:\n        <button type=\"button\" onClick={() => setCount(count - 1)}>–</button>\n        {count}\n        <button type=\"button\" onClick={() => setCount(count + 1)}>+</button>\n      </label>\n      <label>\n        Street:\n        <input name=\"street\" />\n      </label>\n      <label>\n        City:\n        <input name=\"city\" />\n      </label>\n      <label>\n        Postal code:\n        <input name=\"zipCode\" />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n});\n\nexport default ShippingForm;\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Use startTransition with setTimeout in React\nDESCRIPTION: Shows the proper way to wrap a delayed state update in a transition by placing the startTransition call inside the setTimeout callback.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(() => {\n  startTransition(() => {\n    // ✅ Setting state *during* startTransition call\n    setPage('/about');\n  });\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Sending POST Requests with React Effect Hooks\nDESCRIPTION: This snippet demonstrates how to properly handle POST requests in a React component using Effect hooks. It shows the correct way to send analytics events and form submissions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  // ✅ Good: This logic should run because the component was displayed\n  useEffect(() => {\n    post('/analytics/event', { eventName: 'visit_form' });\n  }, []);\n\n  // 🔴 Avoid: Event-specific logic inside an Effect\n  const [jsonToSubmit, setJsonToSubmit] = useState(null);\n  useEffect(() => {\n    if (jsonToSubmit !== null) {\n      post('/api/register', jsonToSubmit);\n    }\n  }, [jsonToSubmit]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setJsonToSubmit({ firstName, lastName });\n  }\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  // ✅ Good: This logic runs because the component was displayed\n  useEffect(() => {\n    post('/analytics/event', { eventName: 'visit_form' });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // ✅ Good: Event-specific logic is in the event handler\n    post('/api/register', { firstName, lastName });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding State to React Class Component\nDESCRIPTION: Demonstrates state management in a class component using setState. Includes input handling and state updates with a counter implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\n\nexport default class Counter extends Component {\n  state = {\n    name: 'Taylor',\n    age: 42,\n  };\n\n  handleNameChange = (e) => {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleAgeChange = () => {\n    this.setState({\n      age: this.state.age + 1 \n    });\n  };\n\n  render() {\n    return (\n      <>\n        <input\n          value={this.state.name}\n          onChange={this.handleNameChange}\n        />\n        <button onClick={this.handleAgeChange}>\n          Increment age\n        </button>\n        <p>Hello, {this.state.name}. You are {this.state.age}.</p>\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Data from Server to Client with 'use' in React\nDESCRIPTION: Shows how to stream data from a Server Component to a Client Component by passing a Promise as a prop, which can then be read with the 'use' API to access resolved values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { fetchMessage } from './lib.js';\nimport { Message } from './message.js';\n\nexport default function App() {\n  const messagePromise = fetchMessage();\n  return (\n    <Suspense fallback={<p>waiting for message...</p>}>\n      <Message messagePromise={messagePromise} />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Albums Data Fetching Component\nDESCRIPTION: Component that fetches and displays a list of albums using React's use hook and suspense-enabled data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Albums({ artistId }) {\n  const albums = use(fetchData(`/${artistId}/albums`));\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Todo List State with useImmer (Mutative Approach) in React (JavaScript)\nDESCRIPTION: Implements todo list state management in React using useImmer, allowing mutative logic within updater functions on a draft state. Each handler updates the list by directly mutating the draft (e.g., push, splice, field assignment). Requires use-immer, React, and related child components as dependencies; inputs and outputs align with traditional React patterns.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\nimport { useImmer } from 'use-immer';\\nimport AddTodo from './AddTodo.js';\\nimport TaskList from './TaskList.js';\\n\\nlet nextId = 3;\\nconst initialTodos = [\\n  { id: 0, title: 'Buy milk', done: true },\\n  { id: 1, title: 'Eat tacos', done: false },\\n  { id: 2, title: 'Brew tea', done: false },\\n];\\n\\nexport default function TaskApp() {\\n  const [todos, updateTodos] = useImmer(\\n    initialTodos\\n  );\\n\\n  function handleAddTodo(title) {\\n    updateTodos(draft => {\\n      draft.push({\\n        id: nextId++,\\n        title: title,\\n        done: false\\n      });\\n    });\\n  }\\n\\n  function handleChangeTodo(nextTodo) {\\n    updateTodos(draft => {\\n      const todo = draft.find(t =>\\n        t.id === nextTodo.id\\n      );\\n      todo.title = nextTodo.title;\\n      todo.done = nextTodo.done;\\n    });\\n  }\\n\\n  function handleDeleteTodo(todoId) {\\n    updateTodos(draft => {\\n      const index = draft.findIndex(t =>\\n        t.id === todoId\\n      );\\n      draft.splice(index, 1);\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <AddTodo\\n        onAddTodo={handleAddTodo}\\n      />\\n      <TaskList\\n        todos={todos}\\n        onChangeTodo={handleChangeTodo}\\n        onDeleteTodo={handleDeleteTodo}\\n      />\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating a ref value in React event handler\nDESCRIPTION: Example showing how to store an interval ID in a ref when starting a timer. This does not trigger a re-render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleStartClick() {\n  const intervalId = setInterval(() => {\n    // ...\n  }, 1000);\n  intervalRef.current = intervalId;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Cached Results Between Components\nDESCRIPTION: Shows how multiple components (`Profile` and `TeamReport`) can share the results of an expensive computation (`calculateUserMetrics`) by calling the same cached function (`getUserMetrics`) defined outside the components. This avoids redundant computations for the same input `user`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[1, 7, \"getUserMetrics(user)\"],[2, 13, \"getUserMetrics(user)\"]]\nimport {cache} from 'react';\nimport calculateUserMetrics from 'lib/user';\n\nconst getUserMetrics = cache(calculateUserMetrics);\n\nfunction Profile({user}) {\n  const metrics = getUserMetrics(user);\n  // ...\n}\n\nfunction TeamReport({users}) {\n  for (let user in users) {\n    const metrics = getUserMetrics(user);\n    // ...\n  }\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Complex State Update Sequence\nDESCRIPTION: Shows how React processes a sequence of different state updates including direct values and updater functions, demonstrating the final state calculation process.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setNumber(n => n + 1);\n        setNumber(42);\n      }}>Increase the number</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Class Component in React\nDESCRIPTION: Example of creating an error boundary component that catches rendering errors and displays fallback UI. Includes error state management and error logging functionality using getDerivedStateFromError and componentDidCatch lifecycle methods.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    logErrorToMyService(\n      error,\n      // Example \"componentStack\":\n      //   in ComponentThatThrows (created by App)\n      //   in ErrorBoundary (created by App)\n      //   in div (created by App)\n      //   in App\n      info.componentStack,\n      // Warning: `captureOwnerStack` is not available in production.\n      React.captureOwnerStack(),\n    );\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Textarea With onChange in React - JavaScript\nDESCRIPTION: This snippet demonstrates the recommended pattern in React for a controlled textarea, where the value prop is updated via the onChange handler. It ensures live user input by setting the value to a state variable and updating it on each keystroke. Dependencies are React and the relevant state setter function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ Good: controlled text area with onChange\n<textarea value={something} onChange={e => setSomething(e.target.value)} />\n\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Definition\nDESCRIPTION: Demonstrates how to create a simple React component that renders an image, including the export statement and JSX markup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3Am.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fruit Picker Component with React Select and Options\nDESCRIPTION: This example shows how to create a functional component that renders a select box with multiple fruit options. It demonstrates the proper use of labels and the structure of a form element with select and options.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/option.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function FruitPicker() {\n  return (\n    <label>\n      Pick a fruit:\n      <select name=\"selectedFruit\">\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </select>\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Batching in React 18\nDESCRIPTION: Shows how React 18 automatically batches state updates in timeouts and other contexts, reducing the number of re-renders compared to previous versions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before: only React events were batched.\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will render twice, once for each state update (no batching)\n}, 1000);\n\n// After: updates inside of timeouts, promises,\n// native event handlers or any other event are batched.\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will only re-render once at the end (that's batching!)\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: React Counter Component with Configurable Delay and useCounter Hook - React JavaScript\nDESCRIPTION: This component demonstrates use of a slider to select the timer interval (delay) in milliseconds, passing that value into the useCounter Hook. The delay is controlled via a useState hook tied to an input range element, making the counter's ticking interval dynamic in response to user input. The displayed heading shows the current tick count. It requires the useCounter function to accept a delay parameter and assumes correct export/import from './useCounter.js'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n  const [delay, setDelay] = useState(1000);\n  const count = useCounter();\n  return (\n    <>\n      <label>\n        Tick duration: {delay} ms\n        <br />\n        <input\n          type=\"range\"\n          value={delay}\n          min=\"10\"\n          max=\"2000\"\n          onChange={e => setDelay(Number(e.target.value))}\n        />\n      </label>\n      <hr />\n      <h1>Ticks: {count}</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCounter Hook in React\nDESCRIPTION: This snippet defines a custom hook useCounter that uses useState and useInterval to create a counter that increments at a specified interval.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n  const [count, setCount] = useState(0);\n  useInterval(() => {\n    setCount(c => c + 1);\n  }, delay);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Using setState in a React Class Component\nDESCRIPTION: Demonstrates how to use setState to update the state of a React class component. It shows both object and function forms of setState.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass Form extends Component {\n  state = {\n    name: 'Taylor',\n  };\n\n  handleNameChange = (e) => {\n    const newName = e.target.value;\n    this.setState({\n      name: newName\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <input value={this.state.name} onChange={this.handleNameChange} />\n        <p>Hello, {this.state.name}.</p>\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop in React\nDESCRIPTION: Demonstrates how to implement HTML Drag and Drop API in React using event handlers like onDragStart, onDragEnd, onDragEnter, onDragLeave, onDragOver, and onDrop. These handlers receive a React event object with DragEvent properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <div\n    draggable={true}\n    onDragStart={e => console.log('onDragStart')}\n    onDragEnd={e => console.log('onDragEnd')}\n  >\n    Drag source\n  </div>\n\n  <div\n    onDragEnter={e => console.log('onDragEnter')}\n    onDragLeave={e => console.log('onDragLeave')}\n    onDragOver={e => { e.preventDefault(); console.log('onDragOver'); }}\n    onDrop={e => console.log('onDrop')}\n  >\n    Drop target\n  </div>\n</>\n```\n\n----------------------------------------\n\nTITLE: React Animal List Component with Buggy Ref Callback\nDESCRIPTION: Implementation of an animal list component that demonstrates a memory leak due to missing cleanup in the ref callback. The component allows filtering between cats and dogs with scroll functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AnimalFriends() {\n  const itemsRef = useRef([]);\n  const [animalList, setAnimalList] = useState(setupAnimalList);\n  const [animal, setAnimal] = useState('cat');\n\n  function scrollToAnimal(index) {\n    const list = itemsRef.current;\n    const {node} = list[index];\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n  \n  const animals = animalList.filter(a => a.type === animal)\n  \n  return (\n    // Component JSX\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Button Component with Hover-Triggered Tooltip\nDESCRIPTION: This component (`ButtonWithTooltip.js`) wraps a standard HTML button. It uses `useRef` to get a reference to the button element and `useState` to manage the tooltip's target rectangle (`targetRect`). On pointer enter, it calculates the button's position and size using `getBoundingClientRect` and updates the state to show the `Tooltip` component. On pointer leave, it resets the state to hide the tooltip.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n  const [targetRect, setTargetRect] = useState(null);\n  const buttonRef = useRef(null);\n  return (\n    <>\n      <button\n        {...rest}\n        ref={buttonRef}\n        onPointerEnter={() => {\n          const rect = buttonRef.current.getBoundingClientRect();\n          setTargetRect({\n            left: rect.left,\n            top: rect.top,\n            right: rect.right,\n            bottom: rect.bottom,\n          });\n        }}\n        onPointerLeave={() => {\n          setTargetRect(null);\n        }}\n      />\n      {targetRect !== null && (\n        <Tooltip targetRect={targetRect}>\n          {tooltipContent}\n        </Tooltip>\n      )\n    }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Chat Room in React\nDESCRIPTION: This JavaScript function defines a React component 'ChatRoom' that connects to a chat server based on the room ID passed as a prop. It uses `useState` for managing the message input and `useEffect` to manage the server connection. Dependencies include React hooks like 'useState' and 'useEffect'. The component uses a dynamic options object, which can cause unnecessary effect synchronizations if not handled properly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Chains of Computations in React Effect Hooks\nDESCRIPTION: This snippet illustrates the problem with chaining Effects for state updates and provides a more efficient solution using event handlers and rendering calculations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Game() {\n  const [card, setCard] = useState(null);\n  const [goldCardCount, setGoldCardCount] = useState(0);\n  const [round, setRound] = useState(1);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other\n  useEffect(() => {\n    if (card !== null && card.gold) {\n      setGoldCardCount(c => c + 1);\n    }\n  }, [card]);\n\n  useEffect(() => {\n    if (goldCardCount > 3) {\n      setRound(r => r + 1)\n      setGoldCardCount(0);\n    }\n  }, [goldCardCount]);\n\n  useEffect(() => {\n    if (round > 5) {\n      setIsGameOver(true);\n    }\n  }, [round]);\n\n  useEffect(() => {\n    alert('Good game!');\n  }, [isGameOver]);\n\n  function handlePlaceCard(nextCard) {\n    if (isGameOver) {\n      throw Error('Game already ended.');\n    } else {\n      setCard(nextCard);\n    }\n  }\n\n  // ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Game() {\n  const [card, setCard] = useState(null);\n  const [goldCardCount, setGoldCardCount] = useState(0);\n  const [round, setRound] = useState(1);\n\n  // ✅ Calculate what you can during rendering\n  const isGameOver = round > 5;\n\n  function handlePlaceCard(nextCard) {\n    if (isGameOver) {\n      throw Error('Game already ended.');\n    }\n\n    // ✅ Calculate all the next state in the event handler\n    setCard(nextCard);\n    if (nextCard.gold) {\n      if (goldCardCount <= 3) {\n        setGoldCardCount(goldCardCount + 1);\n      } else {\n        setGoldCardCount(0);\n        setRound(round + 1);\n        if (round === 5) {\n          alert('Good game!');\n        }\n      }\n    }\n  }\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Resetting Component State with Keys in a Messenger App (React)\nDESCRIPTION: This example demonstrates using a key prop on the Chat component to reset its state (input text) when switching between contacts, preventing accidental message sending to the wrong recipient.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat key={to.id} contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n  { id: 1, name: 'Alice', email: 'alice@mail.com' },\n  { id: 2, name: 'Bob', email: 'bob@mail.com' }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ContactList({\n  selectedContact,\n  contacts,\n  onSelect\n}) {\n  return (\n    <section className=\"contact-list\">\n      <ul>\n        {contacts.map(contact =>\n          <li key={contact.id}>\n            <button onClick={() => {\n              onSelect(contact);\n            }}>\n              {contact.name}\n            </button>\n          </li>\n        )}\n      </ul>\n    </section>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n  const [text, setText] = useState('');\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={text}\n        placeholder={'Chat to ' + contact.name}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button>Send to {contact.email}</button>\n    </section>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.chat, .contact-list {\n  float: left;\n  margin-bottom: 20px;\n}\nul, li {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli button {\n  width: 100px;\n  padding: 10px;\n  margin-right: 10px;\n}\ntextarea {\n  height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: PieChart Component with Dynamic Style Generation\nDESCRIPTION: A complete example of a PieChart component that generates dynamic CSS styles based on provided color props, creates a unique ID with useId hook, and renders an inline stylesheet.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/style.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\nimport { useId } from 'react';\n\nfunction PieChart({data, colors}) {\n  const id = useId();\n  const stylesheet = colors.map((color, index) =>\n    `#${id} .color-${index}: \\{ color: \"${color}\"; \\}`\n  ).join();\n  return (\n    <>\n      <style href={\"PieChart-\" + JSON.stringify(colors)} precedence=\"medium\">\n        {stylesheet}\n      </style>\n      <svg id={id}>\n        …\n      </svg>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <ShowRenderedHTML>\n      <PieChart data=\"...\" colors={['red', 'green', 'blue']} />\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested State with the use-immer React Hook - JavaScript\nDESCRIPTION: Illustrates editing a nested person/artwork object with the useImmer hook, simplifying immutable updates by allowing direct mutation of a draft object. Requires 'use-immer', 'immer', React, and related scripts. Change handlers modify the draft state directly. Input: changes in text fields. Output: UI and image update per state. Useful for reducing repetitive spread code in large or deep state trees.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useImmer } from 'use-immer';\n\nexport default function Form() {\n  const [person, updatePerson] = useImmer({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    updatePerson(draft => {\n      draft.name = e.target.value;\n    });\n  }\n\n  function handleTitleChange(e) {\n    updatePerson(draft => {\n      draft.artwork.title = e.target.value;\n    });\n  }\n\n  function handleCityChange(e) {\n    updatePerson(draft => {\n      draft.artwork.city = e.target.value;\n    });\n  }\n\n  function handleImageChange(e) {\n    updatePerson(draft => {\n      draft.artwork.image = e.target.value;\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img\n        src={person.artwork.image}\n        alt={person.artwork.title}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bundle Structure With Code Splitting in React Applications\nDESCRIPTION: This snippet shows how code splitting divides an application into smaller bundles, allowing users to download only the code needed for their current view and improving initial load performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n- core.js      25kb\n- home.js      25kb\n- dashboard.js 25kb\n```\n\n----------------------------------------\n\nTITLE: Focusing an Input Field on Button Click using React Refs (Solution)\nDESCRIPTION: This React component uses the `useRef` hook to create a reference (`inputRef`) to the input DOM element. An `onClick` handler is added to the 'Search' button, which, when triggered, calls the `focus()` method on the referenced input element (`inputRef.current.focus()`), programmatically setting the focus.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Page() {\n  const inputRef = useRef(null);\n  return (\n    <>\n      <nav>\n        <button onClick={() => {\n          inputRef.current.focus();\n        }}>\n          Search\n        </button>\n      </nav>\n      <input\n        ref={inputRef}\n        placeholder=\"Looking for something?\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Defining Product Data Structure for React UI - JSON\nDESCRIPTION: This snippet defines the sample data structure returned from a JSON API, listing products categorized as 'Fruits' or 'Vegetables' with attributes for category, price, stocked status, and name. It establishes the expected data schema that will feed into the React components, forming a basis for UI rendering. Dependencies: None beyond consuming framework's ability to parse JSON. Inputs: None (example literal); Outputs: Array of product objects. Limitation: Sample data, not full API interaction.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\" },\n  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\" },\n  { category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },\n  { category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },\n  { category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\" },\n  { category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Optimized Chat Room Connection with Proper Effect Dependencies in React\nDESCRIPTION: This refactored code moves the options object creation inside the Effect to ensure it only depends on the roomId string, preventing unnecessary reconnections when typing in the input field.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection({ serverUrl, roomId }) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing useReducer Hook in JavaScript\nDESCRIPTION: This snippet shows the basic structure of the useReducer Hook implementation. It uses useState internally and needs to implement the dispatch function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useReducer(reducer, initialState) {\n  const [state, setState] = useState(initialState);\n\n  function dispatch(action) {\n    // ???\n  }\n\n  return [state, dispatch];\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Fetching with Effects\nDESCRIPTION: Example showing traditional client-side data fetching pattern using Effects to load markdown content, including API endpoint implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport marked from 'marked';\nimport sanitizeHtml from 'sanitize-html';\n\nfunction Page({page}) {\n  const [content, setContent] = useState('');\n  useEffect(() => {\n    fetch(`/api/content/${page}`).then((data) => {\n      setContent(data.content);\n    });\n  }, [page]);\n  \n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Performing Side Effects During Render in React (JS + CSS)\nDESCRIPTION: Illustrates an incorrect approach where DOM manipulation (`play()`/`pause()`) is attempted directly within the component's render body using a `useRef`. This is incorrect because rendering should be pure, and it might crash as the DOM element referenced by the ref might not exist yet during the initial render. Includes related CSS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  if (isPlaying) {\n    ref.current.play();  // Calling these while rendering isn't allowed.\n  } else {\n    ref.current.pause(); // Also, this crashes.\n  }\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Panels with Lifted State in React\nDESCRIPTION: This snippet demonstrates the beginning of lifting state up by removing local state from Panel components and passing hardcoded isActive values from the parent Accordion component. This is step 2 in the process of lifting state up.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Accordion() {\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel title=\"About\" isActive={true}>\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel title=\"Etymology\" isActive={true}>\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({ title, children, isActive }) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={() => setIsActive(true)}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Counter with Delayed Alert\nDESCRIPTION: Shows how state values remain fixed within a render even with setTimeout, demonstrating state snapshots.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setTimeout(() => {\n          alert(number);\n        }, 3000);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useState with setTimeout in React\nDESCRIPTION: This code snippet demonstrates a chat input that captures text with useState and attempts to send it after a 3-second delay. It illustrates how React state works as a snapshot, where the alert shows the state value at the time of the button click rather than the current value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n  const [text, setText] = useState('');\n\n  function handleSend() {\n    setTimeout(() => {\n      alert('Sending: ' + text);\n    }, 3000);\n  }\n\n  return (\n    <>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button\n        onClick={handleSend}>\n        Send\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Counter Without Updater Function for State - JavaScript\nDESCRIPTION: Defines a Counter component which, incorrectly, passes the next state directly to setAge in its increment handler. The '+3' button does not increment by 3 because stale state is used. Dependencies: React, useState. Inputs: Button clicks. Outputs: Age may only increment by 1 even after multiple calls. Demonstrates a common mistake when managing sequential updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [age, setAge] = useState(42);\\n\\n  function increment() {\\n    setAge(age + 1);\\n  }\\n\\n  return (\\n    <>\\n      <h1>Your age: {age}</h1>\\n      <button onClick={() => {\\n        increment();\\n        increment();\\n        increment();\\n      }}>+3</button>\\n      <button onClick={() => {\\n        increment();\\n      }}>+1</button>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Position-Based State Preservation in React\nDESCRIPTION: Advanced example showing how React preserves state based on component position in the UI tree, even when using different return clauses with conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  if (isFancy) {\n    return (\n      <div>\n        <Counter isFancy={true} />\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isFancy}\n            onChange={e => {\n              setIsFancy(e.target.checked)\n            }}\n          />\n          Use fancy styling\n        </label>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Counter isFancy={false} />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.fancy {\n  border: 5px solid gold;\n  color: #ff6767;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Specified Effect Dependencies in React\nDESCRIPTION: An example showing the useEffect hook with properly specified dependencies. The roomId is correctly listed as a dependency since it's used within the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Error Handlers with React `hydrateRoot`\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate custom error handling functions (imported from `./reportError.js`) into the React hydration process. The `onCaughtError`, `onRecoverableError`, and `onUncaughtError` options are passed to `hydrateRoot` to specify the custom handlers for different types of errors encountered during rendering or hydration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from \"react-dom/client\";\nimport App from \"./App.js\";\nimport {\n  onCaughtErrorProd,\n  onRecoverableErrorProd,\n  onUncaughtErrorProd,\n} from \"./reportError\";\n\nconst container = document.getElementById(\"root\");\nhydrateRoot(container, <App />, {\n  // Keep in mind to remove these options in development to leverage\n  // React's default handlers or implement your own overlay for development.\n  // The handlers are only specfied unconditionally here for demonstration purposes.\n  onCaughtError: onCaughtErrorProd,\n  onRecoverableError: onRecoverableErrorProd,\n  onUncaughtError: onUncaughtErrorProd,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React Render with createRoot in JavaScript\nDESCRIPTION: This snippet demonstrates how to trigger the initial render of a React application using createRoot and render methods. It shows the basic setup for rendering a component to the DOM.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from './Image.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Image />);\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Source for React Gallery Component\nDESCRIPTION: Defines an array of sculpture objects that serve as the data source for the gallery component. Each object contains information about a sculpture including name, artist, description, image URL, and alt text.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism's geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection with Set in React Mail Client\nDESCRIPTION: An optimized solution for multiple selection that uses a Set data structure instead of an array for better performance with the has() operation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { letters } from './data.js';\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n  const [selectedIds, setSelectedIds] = useState(\n    new Set()\n  );\n\n  const selectedCount = selectedIds.size;\n\n  function handleToggle(toggledId) {\n    // Create a copy (to avoid mutation).\n    const nextIds = new Set(selectedIds);\n    if (nextIds.has(toggledId)) {\n      nextIds.delete(toggledId);\n    } else {\n      nextIds.add(toggledId);\n    }\n    setSelectedIds(nextIds);\n  }\n\n  return (\n    <>\n      <h2>Inbox</h2>\n      <ul>\n        {letters.map(letter => (\n          <Letter\n            key={letter.id}\n            letter={letter}\n            isSelected={\n              selectedIds.has(letter.id)\n            }\n            onToggle={handleToggle}\n          />\n        ))}\n        <hr />\n        <p>\n          <b>\n            You selected {selectedCount} letters\n          </b>\n        </p>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State with useState in React (JavaScript)\nDESCRIPTION: Demonstrates initializing component state using the `useState` hook. It accepts an initial state (`initialTasks`) and returns the state variable (`tasks`) and its setter function (`setTasks`). This snippet shows the pattern being replaced by `useReducer` in the example.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst [tasks, setTasks] = useState(initialTasks);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object References and Pointers in Nested Objects (JavaScript)\nDESCRIPTION: These JavaScript snippets illustrate how supposedly 'nested' objects are actually references to separate objects, which can be shared between multiple parent objects. Mutating a property in a shared nested object affects all references. This is foundational for understanding immutability and why nested objects require copying in React state updates. There are no specific dependencies and these examples are vanilla JavaScript.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nlet obj = {\n  name: 'Niki de Saint Phalle',\n  artwork: {\n    title: 'Blue Nana',\n    city: 'Hamburg',\n    image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  }\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nlet obj1 = {\n  title: 'Blue Nana',\n  city: 'Hamburg',\n  image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n};\n\nlet obj2 = {\n  name: 'Niki de Saint Phalle',\n  artwork: obj1\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nlet obj1 = {\n  title: 'Blue Nana',\n  city: 'Hamburg',\n  image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n};\n\nlet obj2 = {\n  name: 'Niki de Saint Phalle',\n  artwork: obj1\n};\n\nlet obj3 = {\n  name: 'Copycat',\n  artwork: obj1\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes in React\nDESCRIPTION: Demonstrates how to apply CSS classes to React elements using the className attribute, which is React's equivalent of the HTML class attribute.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<img className=\"avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Listener with React useEffect\nDESCRIPTION: Demonstrates how to implement conditional event listener subscription using useEffect. Shows two approaches: conditional state updates and conditional event subscription based on a boolean flag.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  useEffect(() => {\n    function handleMove(e) {\n      if (canMove) {\n        setPosition({ x: e.clientX, y: e.clientY });\n      }\n    }\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n  }, [canMove]);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)} \n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Serialized Asset Map as Inline Script for Hydration Consistency - React with JavaScript\nDESCRIPTION: Expands on asset map injection by also adding an inline script (`bootstrapScriptContent`) that exposes the asset map on `window.assetMap` for client access. This ensures both server and client render the App with identical asset mapping, guarding against hydration mismatch. Assumes included asset map is not user-generated and is safe to `JSON.stringify`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// You'd need to get this JSON from your build tooling.\nconst assetMap = {\n  'styles.css': '/styles.123456.css',\n  'main.js': '/main.123456.js'\n};\n\nasync function handler(request) {\n  const {prelude} = await prerender(<App assetMap={assetMap} />, {\n    // Careful: It's safe to stringify() this because this data isn't user-generated.\n    bootstrapScriptContent: `window.assetMap = ${JSON.stringify(assetMap)};`,\n    bootstrapScripts: [assetMap['/main.js']],\n  });\n  return new Response(prelude, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed React Todo App with Immutable Updates\nDESCRIPTION: Corrected implementation using immutable state updates with array spread operator for adding todos, map() for updating todos, and filter() for deleting todos.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport AddTodo from './AddTodo.js';\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\nconst initialTodos = [\n  { id: 0, title: 'Buy milk', done: true },\n  { id: 1, title: 'Eat tacos', done: false },\n  { id: 2, title: 'Brew tea', done: false },\n];\n\nexport default function TaskApp() {\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAddTodo(title) {\n    setTodos([\n      ...todos,\n      {\n        id: nextId++,\n        title: title,\n        done: false\n      }\n    ]);\n  }\n\n  function handleChangeTodo(nextTodo) {\n    setTodos(todos.map(t => {\n      if (t.id === nextTodo.id) {\n        return nextTodo;\n      } else {\n        return t;\n      }\n    }));\n  }\n\n  function handleDeleteTodo(todoId) {\n    setTodos(\n      todos.filter(t => t.id !== todoId)\n    );\n  }\n\n  return (\n    <>\n      <AddTodo\n        onAddTodo={handleAddTodo}\n      />\n      <TaskList\n        todos={todos}\n        onChangeTodo={handleChangeTodo}\n        onDeleteTodo={handleDeleteTodo}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Task Context with useContext\nDESCRIPTION: Shows how to use the useContext hook to access the tasks list from any component in the tree without receiving it as a prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function TaskList() {\n  const tasks = useContext(TasksContext);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Passing State to Child Components in React Board\nDESCRIPTION: The Board component passes the squares state values to each Square component as props. Each Square receives the value corresponding to its position in the game board.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} />\n        <Square value={squares[1]} />\n        <Square value={squares[2]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} />\n        <Square value={squares[4]} />\n        <Square value={squares[5]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} />\n        <Square value={squares[7]} />\n        <Square value={squares[8]} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State with useState\nDESCRIPTION: Example showing how to declare a state variable using useState hook in a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  const [count, setCount] = useState(0);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Basic forwardRef Usage\nDESCRIPTION: Basic example of using forwardRef to create a component that can receive and forward a ref.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeComponent = forwardRef(render)\n```\n\n----------------------------------------\n\nTITLE: Detecting Errors During React Streaming\nDESCRIPTION: Example of tracking errors that occur during the streaming process. Uses a boolean flag to detect errors occurring in components outside the shell and sets the appropriate status code.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  try {\n    let didError = false;\n    const stream = await renderToReadableStream(<App />, {\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        didError = true;\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    return new Response(stream, {\n      status: didError ? 500 : 200,\n      headers: { 'content-type': 'text/html' },\n    });\n  } catch (error) {\n    return new Response('<h1>Something went wrong</h1>', {\n      status: 500,\n      headers: { 'content-type': 'text/html' },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Browser API Subscription Example\nDESCRIPTION: Example demonstrating how to subscribe to browser's online/offline status using useSyncExternalStore.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\n\nexport default function ChatIndicator() {\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction getSnapshot() {\n  return navigator.onLine;\n}\n\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props with TypeScript in React\nDESCRIPTION: This snippet demonstrates how to define types for React component props using TypeScript, showing both inline types for components and using interfaces for cleaner definitions. It requires a TypeScript environment and React setup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyButton({ title }: { title: string }) {\n  return (\n    <button>{title}</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton title=\"I'm a button\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Main Form Component with Conditional Behavior - React JavaScript\nDESCRIPTION: Demonstrates a form component utilizing useState to conditionally display elements and manage input values. It shows how to toggle form visibility and reactively update states based on user interaction. This snippet is used to understand how the input focus is managed within a parent component, using state for conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n  const [show, setShow] = useState(false);\n  const [name, setName] = useState('Taylor');\n  const [upper, setUpper] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n      <br />\n      <hr />\n      {show && (\n        <>\n          <label>\n            Enter your name:\n            <MyInput\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={upper}\n              onChange={e => setUpper(e.target.checked)}\n            />\n            Make it uppercase\n          </label>\n          <p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n        </>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Room Component Implementation\nDESCRIPTION: Full implementation of a chat room component showing both event handlers and Effects working together, including room selection and connection management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  function handleSendClick() {\n    sendMessage(message);\n  }\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput, select { margin-right: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic React Router with Suspense Boundaries\nDESCRIPTION: A complete React application demonstrating the problem of content hiding due to Suspense boundaries. The example shows a music browser app where navigating to an artist page causes the entire UI to show a loading spinner.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>\n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n\n  function navigate(url) {\n    setPage(url);\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Context Hooks\nDESCRIPTION: Exports custom hooks that provide easier access to the tasks context and dispatch function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useTasks() {\n  return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n  return useContext(TasksDispatchContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Hooks in React Components and Custom Hooks\nDESCRIPTION: Demonstrates the proper way to use hooks at the top level of function components and custom hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-hook-call-warning.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter() {\n  // ✅ Good: top-level in a function component\n  const [count, setCount] = useState(0);\n  // ...\n}\n\nfunction useWindowWidth() {\n  // ✅ Good: top-level in a custom Hook\n  const [width, setWidth] = useState(window.innerWidth);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Using startTransition in React for State Updates\nDESCRIPTION: Shows the proper way to use startTransition by ensuring state updates happen during the function call, not after it completes or in an asynchronous callback.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition(() => {\n  // ✅ Setting state *during* startTransition call\n  setPage('/about');\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple State Variables in a Component\nDESCRIPTION: Example of declaring multiple state variables in a component by calling useState multiple times. Shows state initialization with primitive values and via a function call.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [age, setAge] = useState(28);\n  const [name, setName] = useState('Taylor');\n  const [todos, setTodos] = useState(() => createTodos());\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Defining Cached Function in a Module\nDESCRIPTION: Demonstrates the correct pattern for sharing a cache: defining the cached function (`cache(calculateWeekReport)`) in a dedicated JavaScript module (`getWeekReport.js`) and exporting it.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[3, 5, \"export default cache(calculateWeekReport)\"]]\n// getWeekReport.js\nimport {cache} from 'react';\nimport {calculateWeekReport} from './report';\n\nexport default cache(calculateWeekReport);\n```\n```\n\n----------------------------------------\n\nTITLE: Complete useOnlineStatus Custom Hook with useDebugValue\nDESCRIPTION: A complete implementation of a custom Hook that uses useDebugValue to provide a readable label in DevTools. The Hook tracks the online status of the browser.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDebugValue.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSyncExternalStore, useDebugValue } from 'react';\n\nexport function useOnlineStatus() {\n  const isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n  return isOnline;\n}\n\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with Immer for State Management\nDESCRIPTION: This snippet shows a React component using Immer to manage state for a draggable box. It demonstrates how to update nested object properties immutably using the useImmer hook.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useImmer } from 'use-immer';\nimport Background from './Background.js';\nimport Box from './Box.js';\n\nconst initialPosition = {\n  x: 0,\n  y: 0\n};\n\nexport default function Canvas() {\n  const [shape, updateShape] = useImmer({\n    color: 'orange',\n    position: initialPosition\n  });\n\n  function handleMove(dx, dy) {\n    updateShape(draft => {\n      draft.position.x += dx;\n      draft.position.y += dy;\n    });\n  }\n\n  function handleColorChange(e) {\n    updateShape(draft => {\n      draft.color = e.target.value;\n    });\n  }\n\n  return (\n    <>\n      <select\n        value={shape.color}\n        onChange={handleColorChange}\n      >\n        <option value=\"orange\">orange</option>\n        <option value=\"lightpink\">lightpink</option>\n        <option value=\"aliceblue\">aliceblue</option>\n      </select>\n      <Background\n        position={initialPosition}\n      />\n      <Box\n        color={shape.color}\n        position={shape.position}\n        onMove={handleMove}\n      >\n        Drag me!\n      </Box>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Search Button and Input Field in React (Initial Challenge)\nDESCRIPTION: This basic React component renders a navigation button labeled 'Search' and an input field. The objective is to implement functionality where clicking the button sets focus to the input field, which requires using a ref.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <button>Search</button>\n      </nav>\n      <input\n        placeholder=\"Looking for something?\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Hydrating the Prerendered HTML Document on the Client - React with JavaScript\nDESCRIPTION: Demonstrates client-side hydration of a server-generated HTML document. Uses `hydrateRoot` from `react-dom/client` to attach React event handlers and make the static content interactive. Requires the `App` component to match what was rendered on the server, and assumes access to the same asset and prop context to prevent hydration mismatches.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n```\n\n----------------------------------------\n\nTITLE: Reusable AddTodo Input Component in React (JavaScript)\nDESCRIPTION: Implements a controlled input component for adding todos to the list, managing its own local state via useState. On Add button click, it clears the input and calls the parent's add callback with the entered title. Requires React as a dependency and expects an onAddTodo prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function AddTodo({ onAddTodo }) {\\n  const [title, setTitle] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\"Add todo\"\\n        value={title}\\n        onChange={e => setTitle(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setTitle('');\\n        onAddTodo(title);\\n      }}>Add</button>\\n    </>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Full Document Structure in React\nDESCRIPTION: In this React component example, `App` represents the entire HTML document structure including `<html>`, `<head>`, and `<body>` tags, ensuring proper server-side rendering to HTML. Includes necessary HTML metadata and external resource links, required for robust document setup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function App() {\n  return (\n    <html>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/styles.css\"></link>\n        <title>My app</title>\n      </head>\n      <body>\n        <Router />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CommentList Component with Scrolling Functionality\nDESCRIPTION: Implementation of a CommentList component that exposes a scrollToBottom method via useImperativeHandle for programmatic scrolling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction CommentList({ ref }) {\n  const divRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      scrollToBottom() {\n        const node = divRef.current;\n        node.scrollTop = node.scrollHeight;\n      }\n    };\n  }, []);\n\n  let comments = [];\n  for (let i = 0; i < 50; i++) {\n    comments.push(<p key={i}>Comment #{i}</p>);\n  }\n\n  return (\n    <div className=\"CommentList\" ref={divRef}>\n      {comments}\n    </div>\n  );\n}\n\nexport default CommentList;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Context Declarations\nDESCRIPTION: Defines two React contexts for tasks state and dispatch function using createContext.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Rendering an External Asynchronous Script in a React Component\nDESCRIPTION: Provides an example of a React functional component (`Map`) rendering an external script (`map-api.js`) using the `<script>` component. It utilizes the `async` prop for non-blocking loading and the `onLoad` prop to execute code after the script finishes loading. React may de-duplicate this script if rendered multiple times with the same `src`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/script.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nfunction Map({lat, long}) {\n  return (\n    <>\n      <script async src=\"map-api.js\" onLoad={() => console.log('script loaded')} />\n      <div id=\"map\" data-lat={lat} data-long={long} />\n    </>\n  );\n}\n\nexport default function Page() {\n  return (\n    <ShowRenderedHTML>\n      <Map />\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Logging in React Production Build\nDESCRIPTION: This snippet demonstrates how to implement custom error logging in a React production build using onCaughtError, onUncaughtError, and onRecoverableError options with createRoot.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reportError({ type, error, errorInfo }) {\n  // The specific implementation is up to you.\n  // `console.error()` is only used for demonstration purposes.\n  console.error(type, error, \"Component Stack: \");\n  console.error(\"Component Stack: \", errorInfo.componentStack);\n}\n\nexport function onCaughtErrorProd(error, errorInfo) {\n  if (error.message !== \"Known error\") {\n    reportError({ type: \"Caught\", error, errorInfo });\n  }\n}\n\nexport function onUncaughtErrorProd(error, errorInfo) {\n  reportError({ type: \"Uncaught\", error, errorInfo });\n}\n\nexport function onRecoverableErrorProd(error, errorInfo) {\n  reportError({ type: \"Recoverable\", error, errorInfo });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App.js\";\nimport {\n  onCaughtErrorProd,\n  onRecoverableErrorProd,\n  onUncaughtErrorProd,\n} from \"./reportError\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container, {\n  // Keep in mind to remove these options in development to leverage\n  // React's default handlers or implement your own overlay for development.\n  // The handlers are only specfied unconditionally here for demonstration purposes.\n  onCaughtError: onCaughtErrorProd,\n  onRecoverableError: onRecoverableErrorProd,\n  onUncaughtError: onUncaughtErrorProd,\n});\nroot.render(<App />);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, useState } from \"react\";\n\nfunction Boom() {\n  foo.bar = \"baz\";\n}\n\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default function App() {\n  const [triggerUncaughtError, settriggerUncaughtError] = useState(false);\n  const [triggerCaughtError, setTriggerCaughtError] = useState(false);\n\n  return (\n    <>\n      <button onClick={() => settriggerUncaughtError(true)}>\n        Trigger uncaught error\n      </button>\n      {triggerUncaughtError && <Boom />}\n      <button onClick={() => setTriggerCaughtError(true)}>\n        Trigger caught error\n      </button>\n      {triggerCaughtError && (\n        <ErrorBoundary>\n          <Boom />\n        </ErrorBoundary>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Chat Input: Storing Timeout IDs with Refs in React - JavaScript\nDESCRIPTION: Refactors chat input component to use a ref to persist the timeoutId between renders, ensuring the Undo button reliably cancels the pending alert. Dependencies: 'useState' and 'useRef' from React. Receives user input and button clicks, shows an alert after a delay or cancels if undone. Limitations: pending timer is not shown explicitly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const timeoutRef = useRef(null);\n\n  function handleSend() {\n    setIsSending(true);\n    timeoutRef.current = setTimeout(() => {\n      alert('Sent!');\n      setIsSending(false);\n    }, 3000);\n  }\n\n  function handleUndo() {\n    setIsSending(false);\n    clearTimeout(timeoutRef.current);\n  }\n\n  return (\n    <>\n      <input\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button\n        disabled={isSending}\n        onClick={handleSend}>\n        {isSending ? 'Sending...' : 'Send'}\n      </button>\n      {isSending &&\n        <button onClick={handleUndo}>\n          Undo\n        </button>\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Objects in React Array State\nDESCRIPTION: Demonstrates proper handling of nested object updates within arrays using immutable patterns. Shows how to avoid state mutation issues when multiple arrays reference the same objects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, setMyList] = useState(initialList);\n  const [yourList, setYourList] = useState(\n    initialList\n  );\n\n  function handleToggleMyList(artworkId, nextSeen) {\n    setMyList(myList.map(artwork => {\n      if (artwork.id === artworkId) {\n        // Create a *new* object with changes\n        return { ...artwork, seen: nextSeen };\n      } else {\n        // No changes\n        return artwork;\n      }\n    }));\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    setYourList(yourList.map(artwork => {\n      if (artwork.id === artworkId) {\n        // Create a *new* object with changes\n        return { ...artwork, seen: nextSeen };\n      } else {\n        // No changes\n        return artwork;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={myList}\n        onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList\n        artworks={yourList}\n        onToggle={handleToggleYourList} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing StoryTray Component with Array Cloning (Pure Function) - ReactJS (JavaScript)\nDESCRIPTION: This snippet demonstrates the recommended fix for the impure `StoryTray` component by cloning the `stories` array using `.slice()` before pushing the 'Create Story' object. This ensures the function is pure and the original prop remains unchanged, preventing duplicated entries on re-renders. It applies to any situation where you need to append to props data immutably.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function StoryTray({ stories }) {\\n  const items = stories.slice(); // Clone the array\\n  // ✅ Good: Pushing into a new array\\n  items.push({ id: 'create', label: 'Create Story' });\n```\n\n----------------------------------------\n\nTITLE: Using useEffect to Synchronize Prop with DOM Methods in React\nDESCRIPTION: Demonstrates the correct way to synchronize the `isPlaying` prop with the video element's `play()` and `pause()` methods. The logic is placed inside a `useEffect` Hook, ensuring it runs *after* the component renders and the DOM element (`ref.current`) is available.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useRef } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Effect with Proper Cleanup Function\nDESCRIPTION: The corrected implementation that adds a cleanup function to the Effect. This properly disconnects from previous chat rooms when switching rooms or unmounting, preventing memory leaks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => connection.disconnect();\n}, [roomId]);\n```\n\n----------------------------------------\n\nTITLE: Using Children.forEach for Custom Child Processing\nDESCRIPTION: Shows how to use Children.forEach to iterate over children and create a custom array with separators between items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nexport default function SeparatorList({ children }) {\n  const result = [];\n  Children.forEach(children, (child, index) => {\n    result.push(child);\n    result.push(<hr key={index} />);\n  });\n  result.pop();\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Rendered HTML Placeholder for Client-Specific Content\nDESCRIPTION: This HTML snippet shows the initial server-rendered content (`<h1>Is Server</h1>`) within the root element. This content will be replaced on the client after hydration by using a two-pass rendering technique.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"><h1>Is Server</h1></div>\n```\n\n----------------------------------------\n\nTITLE: Safe Mutation in useMemo Calculation in React\nDESCRIPTION: A correct approach where mutation only happens on a new object created during the calculation, preserving the purity of the component and avoiding side effects on props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n  const visibleTodos = useMemo(() => {\n    const filtered = filterTodos(todos, tab);\n    // ✅ Correct: mutating an object you created during the calculation\n    filtered.push({ id: 'last', text: 'Go for a walk!' });\n    return filtered;\n  }, [todos, tab]);\n```\n\n----------------------------------------\n\nTITLE: Creating an Add Task Input Component in React (JavaScript)\nDESCRIPTION: Defines the `AddTask` component, a controlled component using `useState` to manage the input field's state. It accepts an `onAddTask` callback prop, which is called with the current input text when the 'Add' button is clicked, allowing the parent component to handle the task addition logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function AddTask({onAddTask}) {\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button\n        onClick={() => {\n          setText('');\n          onAddTask(text);\n        }}>\n        Add\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Game Component Structure in React\nDESCRIPTION: Defines the basic structure of the Game component that will manage the board state and game history. Includes the initial component layout with placeholders for game information.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_39\n\nLANGUAGE: js\nCODE:\n```\nfunction Board() {\n  // ...\n}\n\nexport default function Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <ol>{/*TODO*/}</ol>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Artist Page with Suspense in React\nDESCRIPTION: This snippet shows the ArtistPage component, which displays artist information and uses Suspense for the Albums component. It includes a fallback UI for the albums section while loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react';\nimport Albums from './Albums.js';\nimport Biography from './Biography.js';\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Biography artistId={artist.id} />\n      <Suspense fallback={<AlbumsGlimmer />}>\n        <Panel>\n          <Albums artistId={artist.id} />\n        </Panel>\n      </Suspense>\n    </>\n  );\n}\n\nfunction AlbumsGlimmer() {\n  return (\n    <div className=\"glimmer-panel\">\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Solution with Default Exports - Profile Component\nDESCRIPTION: The Profile component in its own file using a default export pattern.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Effect with Empty Dependency Array\nDESCRIPTION: This example shows an effect with an empty dependency array that runs only once after the initial render. This is appropriate when the effect doesn't use any reactive values from the component scope.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234'; // Not a reactive value anymore\nconst roomId = 'music'; // Not a reactive value anymore\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating Prerendered App with Asset Map on the Client - React with JavaScript\nDESCRIPTION: Shows how to hydrate the app on the client by passing the preloaded `window.assetMap` to the root `App` component as a prop. This ensures consistency between the server-rendered and client-hydrated versions of the application, preventing mismatches and hydration errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App assetMap={window.assetMap} />);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PureComponent Re-render Optimization in JavaScript\nDESCRIPTION: This example illustrates how `PureComponent` prevents re-renders. The `Greeting` component, extending `PureComponent`, only re-renders when its `name` prop changes. Changes to the `address` state in the parent `MyApp` component do not trigger a re-render of `Greeting` because `address` is not passed as a prop to it, and its `name` prop remains the same.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { PureComponent, useState } from 'react';\n\nclass Greeting extends PureComponent {\n  render() {\n    console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n    return <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;\n  }\n}\n\nexport default function MyApp() {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <>\n      <label>\n        Name{': '}\n        <input value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        Address{': '}\n        <input value={address} onChange={e => setAddress(e.target.value)} />\n      </label>\n      <Greeting name={name} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useActionState Hook in React 19\nDESCRIPTION: Example demonstrating the usage of the new useActionState hook for handling form submissions and state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [error, submitAction, isPending] = useActionState(\n  async (previousState, newName) => {\n    const error = await updateName(newName);\n    if (error) {\n      return error;\n    }\n    return null;\n  },\n  null,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Built-in Form Element with Action in React JavaScript\nDESCRIPTION: This snippet demonstrates rendering a basic form in React using the built-in `<form>` HTML component. The form has an input field for queries and a submit button. When submitted, it triggers an action specified in the `action` prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<form action={search}>\\n    <input name=\\\"query\\\" />\\n    <button type=\\\"submit\\\">Search</button>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Albums in React with Suspense\nDESCRIPTION: This snippet shows the Albums component that fetches and displays a list of albums for an artist. It uses the use hook for data fetching, which is compatible with Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Albums({ artistId }) {\n  const albums = use(fetchData(`/${artistId}/albums`));\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Tracking with useEffect\nDESCRIPTION: Example of using useEffect to track page visits for analytics purposes, demonstrating proper dependency tracking with URL changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  logVisit(url); // Sends a POST request\n}, [url]);\n```\n\n----------------------------------------\n\nTITLE: Fixing Input Auto-Focus on Component Mount - React JavaScript\nDESCRIPTION: The snippet illustrates how to focus an input field using the useRef and useEffect hooks in React so that the input is automatically focused when the component mounts. The dependency array is set to empty in the useEffect hook to ensure it only runs on the first mount. Dependencies include React hooks and appropriate component structure.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ value, onChange }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  return (\n    <input\n      ref={ref}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React App with Counter Component – JavaScript\nDESCRIPTION: This React component file defines the main App function, including a heading and a Counter button that uses useState for interaction. On hydration, React binds event handlers and state logic, making the button function as intended after initial server rendering. Dependencies: react (useState). Inputs: none. Output: a React functional component. Intended as example content for hydration test.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  return (\n    <>\n      <h1>Hello, world!</h1>\n      <Counter />\n    </>\n  );\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      You clicked me {count} times\n    </button>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Class Component Definition in React\nDESCRIPTION: Shows the minimal syntax for defining a React component as a class by extending Component and implementing the required render method.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Memoization with Input Fields\nDESCRIPTION: A comprehensive example showing how memo prevents re-renders when unrelated props change. The Greeting component only re-renders when name changes, not when address changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <>\n      <label>\n        Name{': '}\n        <input value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        Address{': '}\n        <input value={address} onChange={e => setAddress(e.target.value)} />\n      </label>\n      <Greeting name={name} />\n    </>\n  );\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n  return <h3>Hello{name && ', '}{name}!</h3>;\n});\n```\n\n----------------------------------------\n\nTITLE: Context Provider Implementation\nDESCRIPTION: Shows how to provide context value in the Section component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n  return (\n    <section className=\"section\">\n      <LevelContext value={level}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo Component with Edit, Delete and Checkbox in React JSX\nDESCRIPTION: A React component that renders a todo item with edit and delete buttons, and a checkbox to mark the todo as done. The component supports toggling between display and edit modes, and updates todo state through callbacks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n      <>\n        {todo.title}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={todo.done}\n        onChange={e => {\n          onChange({\n            ...todo,\n            done: e.target.checked\n          });\n        }}\n      />\n      {todoContent}\n      <button onClick={() => onDelete(todo.id)}>\n        Delete\n      </button>\n    </label>\n  );\n```\n\n----------------------------------------\n\nTITLE: Resetting Detail Form in React Contact Manager\nDESCRIPTION: This component manages a list of contacts and allows editing contact details. It uses the 'key' prop on the EditContact component to reset the form when switching between contacts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ContactList from './ContactList.js';\nimport EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n  const [\n    contacts,\n    setContacts\n  ] = useState(initialContacts);\n  const [\n    selectedId,\n    setSelectedId\n  ] = useState(0);\n  const selectedContact = contacts.find(c =>\n    c.id === selectedId\n  );\n\n  function handleSave(updatedData) {\n    const nextContacts = contacts.map(c => {\n      if (c.id === updatedData.id) {\n        return updatedData;\n      } else {\n        return c;\n      }\n    });\n    setContacts(nextContacts);\n  }\n\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedId={selectedId}\n        onSelect={id => setSelectedId(id)}\n      />\n      <hr />\n      <EditContact\n        key={selectedId}\n        initialData={selectedContact}\n        onSave={handleSave}\n      />\n    </div>\n  )\n}\n\nconst initialContacts = [\n  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n  { id: 1, name: 'Alice', email: 'alice@mail.com' },\n  { id: 2, name: 'Bob', email: 'bob@mail.com' }\n];\n```\n\n----------------------------------------\n\nTITLE: Using useMemo Hook in React\nDESCRIPTION: Example of using the useMemo Hook to cache expensive calculations for performance optimization. This snippet shows caching the filtered todos list that only recalculates when the 'todos' or 'tab' dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList({ todos, tab, theme }) {\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Checkbox with useState\nDESCRIPTION: Example of a checkbox component using useState to track a boolean state. Shows how to update the state based on the checkbox's checked property.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MyCheckbox() {\n  const [liked, setLiked] = useState(true);\n\n  function handleChange(e) {\n    setLiked(e.target.checked);\n  }\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={liked}\n          onChange={handleChange}\n        />\n        I liked this\n      </label>\n      <p>You {liked ? 'liked' : 'did not like'} this.</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting State with Keys in React Components\nDESCRIPTION: Demonstrates how to reset component state when a prop changes by using a key prop. This approach is more efficient than using Effects as it causes React to treat components with different keys as entirely separate instances.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ProfilePage({ userId }) {\n  return (\n    <Profile\n      userId={userId}\n      key={userId}\n    />\n  );\n}\n\nfunction Profile({ userId }) {\n  // ✅ This and any other state below will reset on key change automatically\n  const [comment, setComment] = useState('');\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic UI Updates for Form Submission in React using JavaScript\nDESCRIPTION: This snippet demonstrates optimistic UI updates during form submission in a React component using the useOptimistic Hook. It immediately reflects user's actions in the UI with a 'sending' label, while the actual submission occurs in the background.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useOptimistic.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useOptimistic, useState, useRef } from \"react\";\nimport { deliverMessage } from \"./actions.js\";\n\nfunction Thread({ messages, sendMessage }) {\n  const formRef = useRef();\n  async function formAction(formData) {\n    addOptimisticMessage(formData.get(\"message\"));\n    formRef.current.reset();\n    await sendMessage(formData);\n  }\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [\n      ...state,\n      {\n        text: newMessage,\n        sending: true\n      }\n    ]\n  );\n\n  return (\n    <>\n      {optimisticMessages.map((message, index) => (\n        <div key={index}>\n          {message.text}\n          {!!message.sending && <small> (Sending...)</small>}\n        </div>\n      ))}\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"message\" placeholder=\"Hello!\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nexport default function App() {\n  const [messages, setMessages] = useState([\n    { text: \"Hello there!\", sending: false, key: 1 }\n  ]);\n  async function sendMessage(formData) {\n    const sentMessage = await deliverMessage(formData.get(\"message\"));\n    setMessages((messages) => [...messages, { text: sentMessage }]);\n  }\n  return <Thread messages={messages} sendMessage={sendMessage} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of useLayoutEffect in React\nDESCRIPTION: This snippet shows the basic function signature for the `useLayoutEffect` hook in React. It accepts a setup function, which contains the effect logic and may return a cleanup function, and an optional array of dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nuseLayoutEffect(setup, dependencies?)\n```\n\n----------------------------------------\n\nTITLE: React ChatRoom Component\nDESCRIPTION: ChatRoom component handling connection management with useEffect and useEffectEvent for proper event handling and dependency tracking.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport {\n  createEncryptedConnection,\n  createUnencryptedConnection,\n} from './chat.js';\n\nexport default function ChatRoom({ roomId, isEncrypted, onMessage }) {\n  const onReceiveMessage = useEffectEvent(onMessage);\n\n  useEffect(() => {\n    function createConnection() {\n      const options = {\n        serverUrl: 'https://localhost:1234',\n        roomId: roomId\n      };\n      if (isEncrypted) {\n        return createEncryptedConnection(options);\n      } else {\n        return createUnencryptedConnection(options);\n      }\n    }\n\n    const connection = createConnection();\n    connection.on('message', (msg) => onReceiveMessage(msg));\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, isEncrypted]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Server-Side Rendering in a Node.js Route Handler\nDESCRIPTION: A complete example of implementing server-side rendering in a Node.js route handler using renderToPipeableStream. The code shows how to set up streaming with proper headers and error handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\napp.use('/', (request, response) => {\n  const { pipe } = renderToPipeableStream(<App />, {\n    bootstrapScripts: ['/main.js'],\n    onShellReady() {\n      response.setHeader('content-type', 'text/html');\n      pipe(response);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example of a Server-Only React Component with Async Data Fetching\nDESCRIPTION: Demonstrates how to create a server-only React component that asynchronously fetches data from a database and passes it to client components. Shows the React Server Components pattern for data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/creating-a-react-app.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This component runs *only* on the server (or during the build).\nasync function Talks({ confId }) {\n  // 1. You're on the server, so you can talk to your data layer. API endpoint not required.\n  const talks = await db.Talks.findAll({ confId });\n\n  // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.\n  const videos = talks.map(talk => talk.video);\n\n  // 3. Pass the data down to the components that will run in the browser.\n  return <SearchableVideoList videos={videos} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Data Fetching Logic into Multiple React useEffect Hooks\nDESCRIPTION: This refactored `ShippingForm` component correctly separates the logic for fetching cities and areas into two distinct `useEffect` hooks. The first Effect fetches `cities` based on the `country` prop, and the second Effect fetches `areas` based on the `city` state. This separation ensures that each Effect only re-runs when its specific dependencies change, preventing unnecessary API calls.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js {19-33}\nfunction ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]); // ✅ All dependencies declared\n\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n  useEffect(() => {\n    if (city) {\n      let ignore = false;\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [city]); // ✅ All dependencies declared\n\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Using scrollIntoView in React for Element Scrolling\nDESCRIPTION: Demonstrates how to scroll an element into view using the scrollIntoView DOM API. This snippet shows the basic syntax for smooth scrolling with specific alignment options.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnode.scrollIntoView({\n  behavior: 'smooth',\n  block: 'nearest',\n  inline: 'center'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing componentWillUnmount for Cleanup in React Class Components\nDESCRIPTION: This code snippet demonstrates the complete lifecycle pattern for managing external resources in a ChatRoom component, focusing on the componentWillUnmount method. The component establishes connections on mount, updates them when props/state change, and properly cleans up resources when unmounting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChatRoom extends Component {\n  state = {\n    serverUrl: 'https://localhost:1234'\n  };\n\n  componentDidMount() {\n    this.setupConnection();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.roomId !== prevProps.roomId ||\n      this.state.serverUrl !== prevState.serverUrl\n    ) {\n      this.destroyConnection();\n      this.setupConnection();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyConnection();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Game Component State Management in React\nDESCRIPTION: This snippet demonstrates how to simplify the Game component's state by removing redundant state variables. It calculates xIsNext based on currentMove, reducing potential synchronization issues.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with useEffect in React\nDESCRIPTION: This component renders a welcome message with a fade-in animation. The animation duration is controlled by a slider. The issue is that changing the duration re-triggers the animation unnecessarily.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { FadeInAnimation } from './animation.js';\n\nfunction Welcome({ duration }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const animation = new FadeInAnimation(ref.current);\n    animation.start(duration);\n    return () => {\n      animation.stop();\n    };\n  }, [duration]);\n\n  return (\n    <h1\n      ref={ref}\n      style={{\n        opacity: 0,\n        color: 'white',\n        padding: 50,\n        textAlign: 'center',\n        fontSize: 50,\n        backgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n      }}\n    >\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [duration, setDuration] = useState(1000);\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"range\"\n          min=\"100\"\n          max=\"3000\"\n          value={duration}\n          onChange={e => setDuration(Number(e.target.value))}\n        />\n        <br />\n        Fade in duration: {duration} ms\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome duration={duration} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Children with Children.map\nDESCRIPTION: Shows how to map over children elements and wrap each child in a div with a Row class\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mappedChildren = Children.map(children, child =>\n  <div className=\"Row\">\n    {child}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Box Component in React\nDESCRIPTION: This snippet defines a Box component that can be dragged using pointer events. It manages its own state for tracking pointer coordinates and calls a callback to update its position.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Box({\n  children,\n  color,\n  position,\n  onMove\n}) {\n  const [\n    lastCoordinates,\n    setLastCoordinates\n  ] = useState(null);\n\n  function handlePointerDown(e) {\n    e.target.setPointerCapture(e.pointerId);\n    setLastCoordinates({\n      x: e.clientX,\n      y: e.clientY,\n    });\n  }\n\n  function handlePointerMove(e) {\n    if (lastCoordinates) {\n      setLastCoordinates({\n        x: e.clientX,\n        y: e.clientY,\n      });\n      const dx = e.clientX - lastCoordinates.x;\n      const dy = e.clientY - lastCoordinates.y;\n      onMove(dx, dy);\n    }\n  }\n\n  function handlePointerUp(e) {\n    setLastCoordinates(null);\n  }\n\n  return (\n    <div\n      onPointerDown={handlePointerDown}\n      onPointerMove={handlePointerMove}\n      onPointerUp={handlePointerUp}\n      style={{\n        width: 100,\n        height: 100,\n        cursor: 'grab',\n        backgroundColor: color,\n        position: 'absolute',\n        border: '1px solid black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transform: `translate(\n          ${position.x}px,\n          ${position.y}px\n        )`,\n      }}\n    >{children}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using startTransition for Actions in a Button\nDESCRIPTION: Shows how to use `startTransition` within an event handler (`onClick`) for a button. The function passed to `startTransition` (containing `submitAction()`) is termed an 'Action'. The `isPending` state is used to disable the button during the transition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction SubmitButton({ submitAction }) {\n  const [isPending, startTransition] = useTransition();\n\n  return (\n    <button\n      disabled={isPending}\n      onClick={() => {\n        startTransition(() => {\n          submitAction();\n        });\n      }}\n    >\n      Submit\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Document Items Using <link> and itemProp in React - JavaScript\nDESCRIPTION: This code snippet shows how to use the <link> element with itemProp inside a regular React-rendered section to semantically annotate portions of the document, such as linking an author. Unlike stylesheet links, these annotations are not hoisted to the document <head> but are rendered at the specified location. No special dependencies are required beyond React. Inputs include any itemProp attributes, and outputs are <link> tags placed within the content structure. Limitation: <link> items with itemProp stay in flow and do not affect stylesheet order.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<section itemScope>\\n  <h3>Annotating specific items</h3>\\n  <link itemProp=\\\"author\\\" href=\\\"http://example.com/\\\" />\\n  <p>...</p>\\n</section>\\n\n```\n\n----------------------------------------\n\nTITLE: Enhanced Solution: Using a Custom Hook for Select Options\nDESCRIPTION: This improved solution extracts the data fetching logic into a custom hook called useSelectOptions. This reduces repetition while maintaining separate effects for each dependency chain, creating a more reusable and cleaner implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useSelectOptions } from './useSelectOptions.js';\n\nexport default function Page() {\n  const [\n    planetList,\n    planetId,\n    setPlanetId\n  ] = useSelectOptions('/planets');\n\n  const [\n    placeList,\n    placeId,\n    setPlaceId\n  ] = useSelectOptions(planetId ? `/planets/${planetId}/places` : null);\n\n  return (\n    <>\n      <label>\n        Pick a planet:{' '}\n        <select value={planetId} onChange={e => {\n          setPlanetId(e.target.value);\n        }}>\n          {planetList?.map(planet =>\n            <option key={planet.id} value={planet.id}>{planet.name}</option>\n          )}\n        </select>\n      </label>\n      <label>\n        Pick a place:{' '}\n        <select value={placeId} onChange={e => {\n          setPlaceId(e.target.value);\n        }}>\n          {placeList?.map(place =>\n            <option key={place.id} value={place.id}>{place.name}</option>\n          )}\n        </select>\n```\n\n----------------------------------------\n\nTITLE: Complete Input Component with Props Forwarding\nDESCRIPTION: Detailed implementation of MyInput component showing props destructuring and forwarding both props and ref.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n  const { label, ...otherProps } = props;\n  return (\n    <label>\n      {label}\n      <input {...otherProps} ref={ref} />\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Batching behavior before React 18\nDESCRIPTION: Example demonstrating how batching worked before React 18, where only updates inside React event handlers were batched, but updates in timeouts, promises, or native events were not batched.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Before React 18 only React events were batched\n\nfunction handleClick() {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will only re-render once at the end (that's batching!)\n}\n\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will render twice, once for each state update (no batching)\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Form Actions with useActionState in React 19\nDESCRIPTION: Example showing simplified form handling using the new useActionState hook and form Actions in React 19.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChangeName({ name, setName }) {\n  const [error, submitAction, isPending] = useActionState(\n    async (previousState, formData) => {\n      const error = await updateName(formData.get(\"name\"));\n      if (error) {\n        return error;\n      }\n      redirect(\"/path\");\n      return null;\n    },\n    null,\n  );\n\n  return (\n    <form action={submitAction}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\" disabled={isPending}>Update</button>\n      {error && <p>{error}</p>}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline and External Scripts in React/JSX\nDESCRIPTION: Shows how to render both an inline script using children and an external script using the `src` prop with the `<script>` component in React/JSX. It illustrates the two primary ways to include scripts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/script.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script> alert(\"hi!\") </script>\n<script src=\"script.js\" />\n```\n\n----------------------------------------\n\nTITLE: Toggling Fancy Styling in a React App\nDESCRIPTION: This JavaScript snippet demonstrates toggling between fancy and regular styling for a Counter component in a React app. It uses a checkbox to toggle between different styles while maintaining functional component behavior. The snippet depends on React and useState.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  return (\n    <div>\n      {isFancy ? (\n        <div>\n          <Counter isFancy={true} /> \n        </div>\n      ) : (\n        <section>\n          <Counter isFancy={false} />\n        </section>\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Profilers in React Component Tree\nDESCRIPTION: Example showing how to nest Profiler components to measure different levels of the component tree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Profiler.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<App>\n  <Profiler id=\"Sidebar\" onRender={onRender}>\n    <Sidebar />\n  </Profiler>\n  <Profiler id=\"Content\" onRender={onRender}>\n    <Content>\n      <Profiler id=\"Editor\" onRender={onRender}>\n        <Editor />\n      </Profiler>\n      <Preview />\n    </Content>\n  </Profiler>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Form Re-rendering in React\nDESCRIPTION: Example showing how to optimize form performance by preventing unnecessary re-renders of page content on every keystroke\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [firstName, setFirstName] = useState('');\n  return (\n    <>\n      <form>\n        <input value={firstName} onChange={e => setFirstName(e.target.value)} />\n      </form>\n      <PageContent />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Specific HTML Elements\nDESCRIPTION: Example demonstrating how to render a React component inside a specific HTML element using createRoot. This is the recommended approach for integrating React into parts of an existing page.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  return <h1>Hello from React!</h1>;\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Ref with forwardRef in React\nDESCRIPTION: Demonstrates defining a React component using `forwardRef` and creating an internal `useRef` (`inputRef`) to hold the reference to the actual DOM input element. This setup is a prerequisite for using `useImperativeHandle`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst MyInput = forwardRef(function MyInput(props, ref) {\n  const inputRef = useRef(null);\n\n  // ...\n\n  return <input {...props} ref={inputRef} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Implementation in React\nDESCRIPTION: Example showing proper implementation of a controlled checkbox with onChange handler\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<input type=\"checkbox\" checked={something} onChange={e => setSomething(e.target.checked)} />\n```\n\n----------------------------------------\n\nTITLE: Initializing React Applications with Effect Hooks\nDESCRIPTION: This snippet shows how to properly initialize a React application using Effect hooks, avoiding issues with development mode and ensuring one-time execution of initialization logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  // 🔴 Avoid: Effects with logic that should only ever run once\n  useEffect(() => {\n    loadDataFromLocalStorage();\n    checkAuthToken();\n  }, []);\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet didInit = false;\n\nfunction App() {\n  useEffect(() => {\n    if (!didInit) {\n      didInit = true;\n      // ✅ Only runs once per app load\n      loadDataFromLocalStorage();\n      checkAuthToken();\n    }\n  }, []);\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') { // Check if we're running in the browser.\n   // ✅ Only runs once per app load\n  checkAuthToken();\n  loadDataFromLocalStorage();\n}\n\nfunction App() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Counter with Updater Function for State - JavaScript\nDESCRIPTION: Defines a React functional component Counter that uses the updater function form of setAge in its increment handler, allowing the '+3' button to correctly increase the age by 3. Dependency: React, useState. Inputs: Button clicks. Outputs: Age output increments correctly, demonstrating correct state update queuing. Limitation: Only manages one number state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [age, setAge] = useState(42);\\n\\n  function increment() {\\n    setAge(a => a + 1);\\n  }\\n\\n  return (\\n    <>\\n      <h1>Your age: {age}</h1>\\n      <button onClick={() => {\\n        increment();\\n        increment();\\n        increment();\\n      }}>+3</button>\\n      <button onClick={() => {\\n        increment();\\n      }}>+1</button>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Items in a Shopping Cart with React\nDESCRIPTION: This snippet demonstrates how to update items in a shopping cart using React state. It includes a function to increase the count of a product when the '+' button is clicked.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nconst initialProducts = [{\n  id: 0,\n  name: 'Baklava',\n  count: 1,\n}, {\n  id: 1,\n  name: 'Cheese',\n  count: 5,\n}, {\n  id: 2,\n  name: 'Spaghetti',\n  count: 2,\n}];\n\nexport default function ShoppingCart() {\n  const [\n    products,\n    setProducts\n  ] = useState(initialProducts)\n\n  function handleIncreaseClick(productId) {\n    setProducts(products.map(product => {\n      if (product.id === productId) {\n        return {\n          ...product,\n          count: product.count + 1\n        };\n      } else {\n        return product;\n      }\n    }))\n  }\n\n  return (\n    <ul>\n      {products.map(product => (\n        <li key={product.id}>\n          {product.name}\n          {' '}\n          (<b>{product.count}</b>)\n          <button onClick={() => {\n            handleIncreaseClick(product.id);\n          }}>\n            +\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Adjacent JSX Elements Using Fragments - JavaScript\nDESCRIPTION: This JavaScript example shows how to correctly render multiple adjacent JSX elements from a functional component by enclosing them within a React Fragment (<> ... </>). This avoids the syntax error seen in the previous snippet and allows for clean grouping of UI elements. Requires React version 16.2 or later due to fragment support. No special input/outputs; just renders two button elements in sequence.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Square() {\\n  return (\\n    <>\\n      <button className=\\\"square\\\">X</button>\\n      <button className=\\\"square\\\">X</button>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Heading Component with Level Props\nDESCRIPTION: This code defines a Heading component that renders different heading levels (h1 to h6) based on the level prop passed to it. It uses a switch statement to determine which heading tag to render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Heading({ level, children }) {\n  switch (level) {\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n      return <h2>{children}</h2>;\n    case 3:\n      return <h3>{children}</h3>;\n    case 4:\n      return <h4>{children}</h4>;\n    case 5:\n      return <h5>{children}</h5>;\n    case 6:\n      return <h6>{children}</h6>;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React PureComponent\nDESCRIPTION: This snippet shows a simple React class component `Greeting` that extends `PureComponent`. Extending `PureComponent` provides a default implementation of `shouldComponentUpdate` that performs a shallow comparison of props and state to potentially skip re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass Greeting extends PureComponent {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: forwardRef Without Passing Ref Down in React\nDESCRIPTION: Highlights a common error when using `forwardRef`: the component receives the `ref` prop but fails to forward it to an underlying DOM element or another ref-accepting component. This results in the parent component receiving `null` for the ref.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst MyInput = forwardRef(function MyInput({ label }, ref) {\n  return (\n    <label>\n      {label}\n      <input />\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Context Conditionally with the 'use' API\nDESCRIPTION: Shows how to read Context conditionally with the 'use' API, allowing context access after early returns, which wouldn't be possible with useContext.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport ThemeContext from './ThemeContext'\n\nfunction Heading({children}) {\n  if (children == null) {\n    return null;\n  }\n  \n  // This would not work with useContext\n  // because of the early return.\n  const theme = use(ThemeContext);\n  return (\n    <h1 style={{color: theme.color}}>\n      {children}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in React Select\nDESCRIPTION: Enables multiple selection in a select box using the multiple prop. Shows how to set default selected values as an array when multiple selection is enabled.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FruitPicker() {\n  return (\n    <label>\n      Pick some fruits:\n      <select\n        name=\"selectedFruit\"\n        defaultValue={['orange', 'banana']}\n        multiple={true}\n      >\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </select>\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nselect { display: block; margin-top: 10px; width: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Typing Style Props in React with TypeScript\nDESCRIPTION: Shows how to type style props in React components using TypeScript, utilizing the React.CSSProperties type.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ninterface MyComponentProps {\n  style: React.CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Adding a Second useEffect for Dependent Data Fetching\nDESCRIPTION: This solution adds a second useEffect hook that fetches places from the selected planet whenever planetId changes. It implements proper cleanup and dependency management to ensure the correct data is loaded when selecting different planets.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { fetchData } from './api.js';\n\nexport default function Page() {\n  const [planetList, setPlanetList] = useState([])\n  const [planetId, setPlanetId] = useState('');\n\n  const [placeList, setPlaceList] = useState([]);\n  const [placeId, setPlaceId] = useState('');\n\n  useEffect(() => {\n    let ignore = false;\n    fetchData('/planets').then(result => {\n      if (!ignore) {\n        console.log('Fetched a list of planets.');\n        setPlanetList(result);\n        setPlanetId(result[0].id); // Select the first planet\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (planetId === '') {\n      // Nothing is selected in the first box yet\n      return;\n    }\n\n    let ignore = false;\n    fetchData('/planets/' + planetId + '/places').then(result => {\n      if (!ignore) {\n        console.log('Fetched a list of places on \"' + planetId + '\".');\n        setPlaceList(result);\n        setPlaceId(result[0].id); // Select the first place\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, [planetId]);\n\n  return (\n    <>\n      <label>\n        Pick a planet:{' '}\n        <select value={planetId} onChange={e => {\n          setPlanetId(e.target.value);\n        }}>\n          {planetList.map(planet =>\n            <option key={planet.id} value={planet.id}>{planet.name}</option>\n          )}\n        </select>\n      </label>\n      <label>\n        Pick a place:{' '}\n        <select value={placeId} onChange={e => {\n          setPlaceId(e.target.value);\n        }}>\n          {placeList.map(place =>\n            <option key={place.id} value={place.id}>{place.name}</option>\n          )}\n        </select>\n      </label>\n      <hr />\n      <p>You are going to: {placeId || '???'} on {planetId || '???'} </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Counter Hook in a React Component - React JavaScript\nDESCRIPTION: This snippet shows how to use a custom useCounter Hook within a functional React component. The component calls useCounter and displays the returned count. This usage demonstrates separation of stateful logic from UI, requiring useCounter to return a numeric counter value. Assumes useCounter is implemented and exported correctly from './useCounter.js', and that no other dependencies are required within this component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n  const count = useCounter();\n  return <h1>Seconds passed: {count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Code in React Server-Side Rendering\nDESCRIPTION: This snippet shows how to set the appropriate HTTP status code based on whether an error occurred during server-side rendering, using a flag to track errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet didError = false;\n\nconst { pipe } = renderToPipeableStream(<App />, {\n  bootstrapScripts: ['/main.js'],\n  onShellReady() {\n    response.statusCode = didError ? 500 : 200;\n    response.setHeader('content-type', 'text/html');\n    pipe(response);\n  },\n  onShellError(error) {\n    response.statusCode = 500;\n    response.setHeader('content-type', 'text/html');\n    response.send('<h1>Something went wrong</h1>'); \n  },\n  onError(error) {\n    didError = true;\n    console.error(error);\n    logServerCrashReport(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handler in Board Component\nDESCRIPTION: Creates a handleClick function in the Board component to update the squares state when a square is clicked. Uses Array.slice() to create a copy of the state before updating it.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick() {\n    const nextSquares = squares.slice();\n    nextSquares[0] = \"X\";\n    setSquares(nextSquares);\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Click Counter Implementation using useRef\nDESCRIPTION: A complete example of a click counter component that uses useRef to track the number of clicks without re-rendering the component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom HTML Elements in React JSX\nDESCRIPTION: Demonstrates the syntax for rendering a custom HTML element in React. React identifies tags containing a dash as custom elements, serializing all props to string attributes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<my-element>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Hydration Setup\nDESCRIPTION: Illustrates the proper setup for hydrating server-rendered React applications using hydrateRoot instead of createRoot to preserve initial HTML and maintain state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(\n  document.getElementById('root'),\n  <App />\n);\n```\n\n----------------------------------------\n\nTITLE: Utility Functions with Artificially Slowed Filtering (JavaScript)\nDESCRIPTION: This file contains utility functions. `createTodos` generates an array of 50 todo objects. `filterTodos` filters this array based on the `tab` ('all', 'active', 'completed'). Crucially, this version includes an artificial 500ms delay using a `while` loop with `performance.now()` to simulate a computationally expensive filtering operation, demonstrating the performance impact when called frequently without memoization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/utils.js\nexport function createTodos() {\n  const todos = [];\n  for (let i = 0; i < 50; i++) {\n    todos.push({\n      id: i,\n      text: \"Todo \" + (i + 1),\n      completed: Math.random() > 0.5\n    });\n  }\n  return todos;\n}\n\nexport function filterTodos(todos, tab) {\n  console.log('[ARTIFICIALLY SLOW] Filtering ' + todos.length + ' todos for \"' + tab + '\" tab.');\n  let startTime = performance.now();\n  while (performance.now() - startTime < 500) {\n    // Do nothing for 500 ms to emulate extremely slow code\n  }\n\n  return todos.filter(todo => {\n    if (tab === 'all') {\n      return true;\n    } else if (tab === 'active') {\n      return !todo.completed;\n    } else if (tab === 'completed') {\n      return todo.completed;\n    }\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling for React Chat Interface\nDESCRIPTION: CSS styling for the chat interface components, adding spacing and layout formatting for input fields and buttons.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_33\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Components and Preserving State in React\nDESCRIPTION: This snippet demonstrates how React preserves state when a component is temporarily removed and then re-added to the UI. It uses a checkbox to toggle the rendering of a second Counter component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [showB, setShowB] = useState(true);\n  return (\n    <div>\n      <Counter />\n      {showB && <Counter />} \n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showB}\n          onChange={e => {\n            setShowB(e.target.checked)\n          }}\n        />\n        Render the second counter\n      </label>\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Travel Plan Component with Nested State Management in React\nDESCRIPTION: React component that manages a hierarchical travel plan structure. It implements functionality to remove places from the plan while maintaining parent-child relationships in the state tree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {\n  const [plan, setPlan] = useState(initialTravelPlan);\n\n  function handleComplete(parentId, childId) {\n    const parent = plan[parentId];\n    // Create a new version of the parent place\n    // that doesn't include this child ID.\n    const nextParent = {\n      ...parent,\n      childIds: parent.childIds\n        .filter(id => id !== childId)\n    };\n    // Update the root state object...\n    setPlan({\n      ...plan,\n      // ...so that it has the updated parent.\n      [parentId]: nextParent\n    });\n  }\n\n  const root = plan[0];\n  const planetIds = root.childIds;\n  return (\n    <>\n      <h2>Places to visit</h2>\n      <ol>\n        {planetIds.map(id => (\n          <PlaceTree\n            key={id}\n            id={id}\n            parentId={0}\n            placesById={plan}\n            onComplete={handleComplete}\n          />\n        ))}\n      </ol>\n    </>\n  );\n}\n\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\n  const place = placesById[id];\n  const childIds = place.childIds;\n  return (\n    <li>\n      {place.title}\n      <button onClick={() => {\n        onComplete(parentId, id);\n      }}>\n        Complete\n      </button>\n      {childIds.length > 0 &&\n        <ol>\n          {childIds.map(childId => (\n            <PlaceTree\n              key={childId}\n              id={childId}\n              parentId={id}\n              placesById={placesById}\n              onComplete={onComplete}\n            />\n          ))}\n        </ol>\n      }\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component with Object State Updates\nDESCRIPTION: Implementation of a form component showing proper object state updates using spread syntax\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleFirstNameChange(e) {\n    setPerson({\n      ...person,\n      firstName: e.target.value\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPerson({\n      ...person,\n      lastName: e.target.value\n    });\n  }\n\n  function handleEmailChange(e) {\n    setPerson({\n      ...person,\n      email: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={person.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={person.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          value={person.email}\n          onChange={handleEmailChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in React\nDESCRIPTION: Details how to capture form input values when submitting a form using JavaScript. Utilizes FormData API to handle form data and demonstrates preventing default form submission behavior in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function MyForm() {\n  function handleSubmit(e) {\n    // Prevent the browser from reloading the page\n    e.preventDefault();\n\n    // Read the form data\n    const form = e.target;\n    const formData = new FormData(form);\n\n    // You can pass formData as a fetch body directly:\n    fetch('/some-api', { method: form.method, body: formData });\n\n    // Or you can work with it as a plain object:\n    const formJson = Object.fromEntries(formData.entries());\n    console.log(formJson);\n  }\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit}>\n      <label>\n        Text input: <input name=\"myInput\" defaultValue=\"Some initial value\" />\n      </label>\n      <hr />\n      <label>\n        Checkbox: <input type=\"checkbox\" name=\"myCheckbox\" defaultChecked={true} />\n      </label>\n      <hr />\n      <p>\n        Radio buttons:\n        <label><input type=\"radio\" name=\"myRadio\" value=\"option1\" /> Option 1</label>\n        <label><input type=\"radio\" name=\"myRadio\" value=\"option2\" defaultChecked={true} /> Option 2</label>\n        <label><input type=\"radio\" name=\"myRadio\" value=\"option3\" /> Option 3</label>\n      </p>\n      <hr />\n      <button type=\"reset\">Reset form</button>\n      <button type=\"submit\">Submit form</button>\n    </form>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Basic React Counter with State Update\nDESCRIPTION: Demonstrates basic state management with useState hook and immediate state value access in an event handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        alert(number);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useId Hook in React 18\nDESCRIPTION: New Hook for generating unique IDs in React applications, providing a reliable way to generate stable IDs across server and client rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseId\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Rendering Syntax\nDESCRIPTION: Demonstrates the correct syntax for rendering React components using root.render, showing both incorrect function passing and correct component syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚩 Wrong: App is a function, not a Component.\nroot.render(App);\n\n// ✅ Correct: <App /> is a component.\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Fixed Animation Implementation with useEffectEvent in React\nDESCRIPTION: This solution fixes the retriggering issue by using useEffectEvent to extract the non-reactive animation start logic. This way the animation doesn't restart when the duration state changes, but still uses the current duration value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { FadeInAnimation } from './animation.js';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nfunction Welcome({ duration }) {\n  const ref = useRef(null);\n\n  const onAppear = useEffectEvent(animation => {\n    animation.start(duration);\n  });\n\n  useEffect(() => {\n    const animation = new FadeInAnimation(ref.current);\n    onAppear(animation);\n    return () => {\n      animation.stop();\n    };\n  }, []);\n\n  return (\n    <h1\n      ref={ref}\n      style={{\n        opacity: 0,\n        color: 'white',\n        padding: 50,\n        textAlign: 'center',\n        fontSize: 50,\n        backgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n      }}\n    >\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [duration, setDuration] = useState(1000);\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"range\"\n          min=\"100\"\n          max=\"3000\"\n          value={duration}\n          onChange={e => setDuration(Number(e.target.value))}\n        />\n        <br />\n        Fade in duration: {duration} ms\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome duration={duration} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preiniting a Script Resource during React Render (JavaScript)\nDESCRIPTION: This snippet shows importing preinit from react-dom and calling it inside a React function component to eagerly fetch and execute a script. No additional dependencies besides react-dom. The function preinit is invoked during rendering, preparing the script resource for immediate use. Requires a valid script URL and {as: \"script\"} in options. Returns nothing; side effect is resource preloading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinit.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Composition Start Capture Events with onCompositionStartCapture in React (JSX)\nDESCRIPTION: React prop for handling the start of an IME composition session during the event capture phase. This is the capture phase version of `onCompositionStart`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionStartCapture\n```\n\n----------------------------------------\n\nTITLE: Destructuring useFormStatus Hook Result in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for calling the `useFormStatus` Hook and destructuring its returned object to access the `pending`, `data`, `method`, and `action` properties. This Hook provides status information about the nearest parent form's submission.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { pending, data, method, action } = useFormStatus();\n```\n\n----------------------------------------\n\nTITLE: Mock Asynchronous Form Action in JavaScript\nDESCRIPTION: Defines a simple asynchronous function `submitForm` that simulates a network request delay using `Promise` and `setTimeout`. This function is intended to be used as the `action` prop for `<form>` elements in the accompanying React examples.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport async function submitForm(query) {\n    await new Promise((res) => setTimeout(res, 1000));\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Portal for Popups\nDESCRIPTION: The snippet illustrates using `createPortal` from `react-dom` to render a React component inside the `popupContainer` when it becomes available. This enables embedding React content in non-React-managed DOM nodes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  <div style={{ width: 250, height: 250 }} ref={containerRef}>\n    {popupContainer !== null && createPortal(\n      <p>Hello from React!</p>,\n      popupContainer\n    )}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Smart Tooltip Positioning\nDESCRIPTION: The ButtonWithTooltip component uses React refs to track its own position and manages tooltip visibility. It captures pointer events to detect when to show/hide the tooltip and passes its position information to the Tooltip component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n  const [targetRect, setTargetRect] = useState(null);\n  const buttonRef = useRef(null);\n  return (\n    <>\n      <button\n        {...rest}\n        ref={buttonRef}\n        onPointerEnter={() => {\n          const rect = buttonRef.current.getBoundingClientRect();\n          setTargetRect({\n            left: rect.left,\n            top: rect.top,\n            right: rect.right,\n            bottom: rect.bottom,\n          });\n        }}\n        onPointerLeave={() => {\n          setTargetRect(null);\n        }}\n      />\n      {targetRect !== null && (\n        <Tooltip targetRect={targetRect}>\n          {tooltipContent}\n        </Tooltip>\n      )\n    }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Tooltip Positioning Container Component\nDESCRIPTION: This simple presentational component (`TooltipContainer.js`) is responsible for applying the calculated position to the tooltip content. It uses absolute positioning and CSS `transform: translate3d` to place the tooltip element at the specified `x` and `y` coordinates passed as props. It also receives a `contentRef` to attach to the inner div for measurement purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: 0,\n        top: 0,\n        transform: `translate3d(${x}px, ${y}px, 0)`\n      }}\n    >\n      <div ref={contentRef} className=\"tooltip\">\n        {children}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Solution with Named Exports - Profile Component\nDESCRIPTION: The Profile component in its own file using a named export pattern.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating State Based on Previous State in React useEffect\nDESCRIPTION: This snippet shows how to update state based on its previous value within a useEffect hook. It uses a state updater function to increment a counter, avoiding unnecessary effect re-runs and dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCount(c => c + 1); // ✅ Pass a state updater\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, []); // ✅ Now count is not a dependency\n\n  return <h1>{count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs to Focus an Input Element in React\nDESCRIPTION: Complete example of using a ref to programmatically focus an input element when a button is clicked in a React component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Hook vs Regular Function Implementation\nDESCRIPTION: Demonstrates the difference between an incorrectly prefixed Hook and a proper regular function implementation for sorting items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 🔴 Avoid: A Hook that doesn't use Hooks\nfunction useSorted(items) {\n  return items.slice().sort();\n}\n\n// ✅ Good: A regular function that doesn't use Hooks\nfunction getSorted(items) {\n  return items.slice().sort();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Suspending Component with `use` Hook in React (JavaScript)\nDESCRIPTION: Defines the `Albums` component, which uses the `use` hook (a feature for integrating Promises with Suspense) to fetch data via the `fetchData` utility. Calling `use` with a Promise that hasn't resolved yet will cause the component to suspend, triggering the nearest ancestor `<Suspense>` boundary's fallback. Once the data is fetched, it renders a list of albums.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Albums({ artistId }) {\n  const albums = use(fetchData(`/${artistId}/albums`));\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with if/else in React\nDESCRIPTION: A basic conditional rendering example using if/else statements. When an item is packed (isPacked is true), it renders the name with a checkmark; otherwise, it renders just the name.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\n----------------------------------------\n\nTITLE: Fixing State Management in React List - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to properly manage component state in a list of contacts by associating state with unique contact IDs, rather than indices, ensuring consistent behavior even when list order changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport Contact from './Contact.js';\n\nexport default function ContactList() {\n  const [reverse, setReverse] = useState(false);\n\n  const displayedContacts = [...contacts];\n  if (reverse) {\n    displayedContacts.reverse();\n  }\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={reverse}\n          onChange={e => {\n            setReverse(e.target.checked)\n          }}\n        />{' '}\n        Show in reverse order\n      </label>\n      <ul>\n        {displayedContacts.map(contact =>\n          <li key={contact.id}>\n            <Contact contact={contact} />\n          </li>\n        )}\n      </ul>\n    </>\n  );\n}\n\nconst contacts = [\n  { id: 0, name: 'Alice', email: 'alice@mail.com' },\n  { id: 1, name: 'Bob', email: 'bob@mail.com' },\n  { id: 2, name: 'Taylor', email: 'taylor@mail.com' }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Contact({ contact }) {\n  const [expanded, setExpanded] = useState(false);\n  return (\n    <>\n      <p><b>{contact.name}</b></p>\n      {expanded &&\n        <p><i>{contact.email}</i></p>\n      }\n      <button onClick={() => {\n        setExpanded(!expanded);\n      }}>\n        {expanded ? 'Hide' : 'Show'} email\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React TypeScript Definitions\nDESCRIPTION: This snippet provides the command to install TypeScript type definitions for React. It helps in adding type safety and autocompletion features to React projects. Prerequisites include having Node.js and npm installed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection with Array in React Mail Client\nDESCRIPTION: A solution that modifies the mail client to support multiple selections by using an array of selectedIds instead of a single selectedId value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { letters } from './data.js';\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  const selectedCount = selectedIds.length;\n\n  function handleToggle(toggledId) {\n    // Was it previously selected?\n    if (selectedIds.includes(toggledId)) {\n      // Then remove this ID from the array.\n      setSelectedIds(selectedIds.filter(id =>\n        id !== toggledId\n      ));\n    } else {\n      // Otherwise, add this ID to the array.\n      setSelectedIds([\n        ...selectedIds,\n        toggledId\n      ]);\n    }\n  }\n\n  return (\n    <>\n      <h2>Inbox</h2>\n      <ul>\n        {letters.map(letter => (\n          <Letter\n            key={letter.id}\n            letter={letter}\n            isSelected={\n              selectedIds.includes(letter.id)\n            }\n            onToggle={handleToggle}\n          />\n        ))}\n        <hr />\n        <p>\n          <b>\n            You selected {selectedCount} letters\n          </b>\n        </p>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Function with useActionState\nDESCRIPTION: Implementation showing how to use useActionState with Server Functions for managing state and pending status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport {updateName} from './actions';\n\nfunction UpdateName() {\n  const [state, submitAction, isPending] = useActionState(updateName, {error: null});\n\n  return (\n    <form action={submitAction}>\n      <input type=\"text\" name=\"name\" disabled={isPending}/>\n      {state.error && <span>Failed: {state.error}</span>}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Children to Array with Children.toArray\nDESCRIPTION: Shows how to convert the children prop to a regular JavaScript array for array manipulation operations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nexport default function ReversedList({ children }) {\n  const result = Children.toArray(children);\n  result.reverse();\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggleable CSS Classes in React\nDESCRIPTION: This snippet demonstrates how to toggle CSS classes on elements based on component state. It uses the useState hook to manage the active state and conditional class name assignment.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Picture() {\n  const [isActive, setIsActive] = useState(false);\n\n  let backgroundClassName = 'background';\n  let pictureClassName = 'picture';\n  if (isActive) {\n    pictureClassName += ' picture--active';\n  } else {\n    backgroundClassName += ' background--active';\n  }\n\n  return (\n    <div\n      className={backgroundClassName}\n      onClick={() => setIsActive(false)}\n    >\n      <img\n        onClick={e => {\n          e.stopPropagation();\n          setIsActive(true);\n        }}\n        className={pictureClassName}\n        alt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n        src=\"https://i.imgur.com/5qwVYb1.jpeg\"\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Rendered HTML for React Hydration with Input State\nDESCRIPTION: This HTML shows server-generated content including a counter and an input field. This structure will be hydrated, and subsequent updates using `root.render` will preserve the state of the input field.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"><h1>Hello, world! <!-- -->0</h1><input placeholder=\"Type something here\"/></div>\n```\n\n----------------------------------------\n\nTITLE: Using memo to Prevent Unnecessary Component Re-rendering\nDESCRIPTION: This example demonstrates using React's memo function to prevent a component from re-rendering when its props haven't changed. Unlike useMemo which memoizes specific computations, memo memoizes the entire component render based on props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nfunction WeatherReport({record}) {\n  const avgTemp = calculateAvg(record); \n  // ...\n}\n\nconst MemoWeatherReport = memo(WeatherReport);\n\nfunction App() {\n  const record = getRecord();\n  return (\n    <>\n      <MemoWeatherReport record={record} />\n      <MemoWeatherReport record={record} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Profiler onRender Callback Implementation\nDESCRIPTION: Implementation of the onRender callback function that receives performance metrics when components render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Profiler.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {\n  // Aggregate or log render timings...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions to Pass Parameters to Event Handlers\nDESCRIPTION: Demonstrates using an arrow function to properly pass the square index to the handleClick function without causing infinite re-renders. This pattern allows passing parameters to event handlers in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  // ...\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Room Implementation with Effect Event\nDESCRIPTION: Full example showing how to use useEffectEvent to handle non-reactive theme updates in notifications\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      onConnected();\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using createRef in a Class Component (JavaScript)\nDESCRIPTION: Demonstration of how to use createRef to create multiple refs in a class component. This example shows how to declare refs for both an interval and an input element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createRef.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRef, Component } from 'react';\n\nclass MyComponent extends Component {\n  intervalRef = createRef();\n  inputRef = createRef();\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary Component in React\nDESCRIPTION: Example of implementing an error boundary wrapper around a Profile component with a fallback error message UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<ErrorBoundary fallback={<p>Something went wrong</p>}>\n  <Profile />\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Using useRef for Values Persisting Between Renders in React\nDESCRIPTION: This snippet demonstrates how to use the useRef hook to store and update values that persist between renders without triggering re-rendering. It shows a counter implementation where clicks update a ref value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = useRef(0);\n```\n\n----------------------------------------\n\nTITLE: React Component Demonstrating Error Boundaries and Triggering Errors\nDESCRIPTION: This React component (`App.js`) is designed to demonstrate error handling. It includes buttons to trigger both uncaught errors (by rendering a component `Boom` that causes a runtime error) and caught errors (by rendering `Boom` inside an `ErrorBoundary`). The `ErrorBoundary` component catches rendering errors in its children and displays a fallback UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, useState } from \"react\";\n\nfunction Boom() {\n  foo.bar = \"baz\";\n}\n\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default function App() {\n  const [triggerUncaughtError, settriggerUncaughtError] = useState(false);\n  const [triggerCaughtError, setTriggerCaughtError] = useState(false);\n\n  return (\n    <>\n      <button onClick={() => settriggerUncaughtError(true)}>\n        Trigger uncaught error\n      </button>\n      {triggerUncaughtError && <Boom />}\n      <button onClick={() => setTriggerCaughtError(true)}>\n        Trigger caught error\n      </button>\n      {triggerCaughtError && (\n        <ErrorBoundary>\n          <Boom />\n        </ErrorBoundary>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Button Component with Pending State - React JavaScript\nDESCRIPTION: This enhanced TabButton React component snippet utilizes the isPending flag from useTransition to visually indicate when the component is in a pending state, rendering the tab label with a pending class if a transition is active. It switches between rendering a bolded label, a pending state, or a button based on isActive and isPending props. Dependencies are identical to the previous TabButton definition, requiring React and useTransition. Key parameters are action, children, and isActive, returning a JSX element adjusted for current state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useTransition } from 'react';\n\nexport default function TabButton({ action, children, isActive }) {\n  const [isPending, startTransition] = useTransition();\n  if (isActive) {\n    return <b>{children}</b>\n  }\n  if (isPending) {\n    return <b className=\"pending\">{children}</b>;\n  }\n  return (\n    <button onClick={() => {\n      startTransition(() => {\n        action();\n      });\n    }}>\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Play/Pause Toggle Button in React (Initial Challenge)\nDESCRIPTION: This initial React component setup includes a video element and a button intended to control playback. It uses `useState` to track the playing state (`isPlaying`) but lacks the necessary `useRef` hook and DOM manipulation logic to actually call the video element's `play()` and `pause()` methods.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  function handleClick() {\n    const nextIsPlaying = !isPlaying;\n    setIsPlaying(nextIsPlaying);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <video width=\"250\">\n        <source\n          src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n    </>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Declaring React Project Dependencies for Timer Example (JSON)\nDESCRIPTION: The package.json provides all required dependencies and scripts to run, build, and test the React timer application, using experimental versions of React and react-dom. It ensures compatibility with the sample timer code and is necessary for any developer wishing to reproduce the environment. Scripts for starting, building, testing, and ejecting the app are provided.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSyncExternalStore Hook Usage\nDESCRIPTION: Basic syntax example of using the useSyncExternalStore Hook to subscribe to an external store.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)\n```\n\n----------------------------------------\n\nTITLE: React Form with Delayed Message\nDESCRIPTION: Demonstrates how React preserves state values in event handlers even with asynchronous operations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        To:{' '}\n        <select\n          value={to}\n          onChange={e => setTo(e.target.value)}>\n          <option value=\"Alice\">Alice</option>\n          <option value=\"Bob\">Bob</option>\n        </select>\n      </label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLayoutEffect for Pre-Paint Layout Measurement in React Tooltip\nDESCRIPTION: This snippet illustrates how `useLayoutEffect` is used within a `Tooltip` component to measure its height using `getBoundingClientRect` after the initial render but before the browser repaints. This measurement allows the component to re-render immediately with the correct height, ensuring accurate positioning without visual flickering. The empty dependency array `[]` signifies the effect runs once after the initial mount.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// {5-8}\nfunction Tooltip() {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0); // You don't know real height yet\n\n  useLayoutEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height); // Re-render now that you know the real height\n  }, []);\n\n  // ...use tooltipHeight in the rendering logic below...\n}\n```\n\n----------------------------------------\n\nTITLE: StoryTray Component With Hover-based Re-render and Prop Mutation (Impure) - ReactJS (JavaScript)\nDESCRIPTION: This version of `StoryTray` introduces a hover effect that changes the background color using an internal `isHover` state and pointer event handlers. However, it still mutates the `stories` prop by pushing directly into the array, causing 'Create Story' to be appended repeatedly on every hover-triggered re-render. This highlights how UI updates can exacerbate issues with impure components. Dependencies: React hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function StoryTray({ stories }) {\\n  const [isHover, setIsHover] = useState(false);\\n  const items = stories;\\n  items.push({ id: 'create', label: 'Create Story' });\\n  return (\\n    <ul\\n      onPointerEnter={() => setIsHover(true)}\\n      onPointerLeave={() => setIsHover(false)}\\n      style={{\\n        backgroundColor: isHover ? '#ddd' : '#fff'\\n      }}\\n    >\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing List Splitting with Manual Array Construction in React\nDESCRIPTION: This snippet demonstrates an optimized approach to splitting the list of scientists by manually constructing arrays, which can be more efficient for larger datasets or complex filtering logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nlet chemists = [];\nlet everyoneElse = [];\npeople.forEach(person => {\n  if (person.profession === 'chemist') {\n    chemists.push(person);\n  } else {\n    everyoneElse.push(person);\n  }\n});\n\nfunction ListSection({ title, people }) {\n  return (\n    <>\n      <h2>{title}</h2>\n      <ul>\n        {people.map(person =>\n          <li key={person.id}>\n            <img\n              src={getImageUrl(person)}\n              alt={person.name}\n            />\n            <p>\n              <b>{person.name}:</b>\n              {' ' + person.profession + ' '}\n              known for {person.accomplishment}\n            </p>\n          </li>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default function List() {\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ListSection\n        title=\"Chemists\"\n        people={chemists}\n      />\n      <ListSection\n        title=\"Everyone Else\"\n        people={everyoneElse}\n      />\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Todo List State with useImmer (Hybrid Approach) in React (JavaScript)\nDESCRIPTION: Demonstrates a hybrid Immer usage: handleAddTodo uses mutative draft logic, but handleChangeTodo and handleDeleteTodo utilize non-mutative array map/filter techniques. This showcases Immer's flexibility to support both coding styles. Relies on use-immer, React, and child components. State updates are safe from mutation errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\nimport { useImmer } from 'use-immer';\\nimport AddTodo from './AddTodo.js';\\nimport TaskList from './TaskList.js';\\n\\nlet nextId = 3;\\nconst initialTodos = [\\n  { id: 0, title: 'Buy milk', done: true },\\n  { id: 1, title: 'Eat tacos', done: false },\\n  { id: 2, title: 'Brew tea', done: false },\\n];\\n\\nexport default function TaskApp() {\\n  const [todos, updateTodos] = useImmer(\\n    initialTodos\\n  );\\n\\n  function handleAddTodo(title) {\\n    updateTodos(draft => {\\n      draft.push({\\n        id: nextId++,\\n        title: title,\\n        done: false\\n      });\\n    });\\n  }\\n\\n  function handleChangeTodo(nextTodo) {\\n    updateTodos(todos.map(todo => {\\n      if (todo.id === nextTodo.id) {\\n        return nextTodo;\\n      } else {\\n        return todo;\\n      }\\n    }));\\n  }\\n\\n  function handleDeleteTodo(todoId) {\\n    updateTodos(\\n      todos.filter(t => t.id !== todoId)\\n    );\\n  }\\n\\n  return (\\n    <>\\n      <AddTodo\\n        onAddTodo={handleAddTodo}\\n      />\\n      <TaskList\\n        todos={todos}\\n        onChangeTodo={handleChangeTodo}\\n        onDeleteTodo={handleDeleteTodo}\\n      />\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: React App Component Setup without useMemo (Slow Example)\nDESCRIPTION: This React functional component `App` manages state for the current tab ('all', 'active', 'completed') and a dark mode theme toggle. It renders buttons to change the tab, a checkbox for the theme, and passes the initial `todos` array along with the current `tab` and `theme` state to the `TodoList` component. This version does not use `useMemo`, contributing to potential performance issues when `TodoList` performs expensive calculations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/App.js\nimport { useState } from 'react';\nimport { createTodos } from './utils.js';\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n  const [tab, setTab] = useState('all');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <button onClick={() => setTab('all')}>\n        All\n      </button>\n      <button onClick={() => setTab('active')}>\n        Active\n      </button>\n      <button onClick={() => setTab('completed')}>\n        Completed\n      </button>\n      <br />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <TodoList\n        todos={todos}\n        tab={tab}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Event Handlers by Removing useEffect Dependencies (JavaScript, Solution 1)\nDESCRIPTION: This improved React snippet adjusts the useEffect by removing its dependencies array, causing the effect to re-run and resubscribe the event handler on every render. While this addresses the stale handler bug by always capturing the latest value of canMove, it has the performance cost of unnecessary resubscriptions. Main dependencies remain React's hooks; the inputs and outputs are as before. Limitation: resubscriptions on every re-render, which is functional but suboptimal.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  function handleMove(e) {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n  });\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)} \n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Quantity without React Actions\nDESCRIPTION: This snippet shows a traditional approach to updating a quantity value without using React Actions. It manually manages the pending state and updates, which can lead to multiple updates and a potentially slower user experience.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from \"react\";\nimport { updateQuantity } from \"./api\";\nimport Item from \"./Item\";\nimport Total from \"./Total\";\n\nexport default function App({}) {\n  const [quantity, setQuantity] = useState(1);\n  const [isPending, setIsPending] = useState(false);\n\n  const onUpdateQuantity = async newQuantity => {\n    // Manually set the isPending State.\n    setIsPending(true);\n    const savedQuantity = await updateQuantity(newQuantity);\n    setIsPending(false);\n    setQuantity(savedQuantity);\n  };\n\n  return (\n    <div>\n      <h1>Checkout</h1>\n      <Item onUpdateQuantity={onUpdateQuantity}/>\n      <hr />\n      <Total quantity={quantity} isPending={isPending} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref to Access DOM Nodes in React\nDESCRIPTION: Example showing how to create and use a ref to access and manipulate a DOM node in a React component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n  // ...\n  return (\n    <input ref={inputRef} />\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Props of a React Element\nDESCRIPTION: Shows how to use cloneElement to override props of an existing React element, specifically adding an isHighlighted prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cloneElement } from 'react';\n\n// ...\nconst clonedElement = cloneElement(\n  <Row title=\"Cabbage\" />,\n  { isHighlighted: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Preiniting an External Script in a React Component (JavaScript)\nDESCRIPTION: This example also imports preinit from react-dom, using it inside a function component to eagerly fetch and execute an external script before returning JSX. It covers the typical pattern of script preinit within a React element tree. Requires 'react-dom' as a dependency. The key input is the script URL and an options object with {as: \"script\"}. No return value; immediate side effect on the browser.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinit.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n  return ...;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Biography Data Fetching Component\nDESCRIPTION: Component that fetches and displays artist biography data using React's use hook and suspense-enabled data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function Biography({ artistId }) {\n  const bio = use(fetchData(`/${artistId}/bio`));\n  return (\n    <section>\n      <p className=\"bio\">{bio}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ref Cleanup Function in React Component (JavaScript)\nDESCRIPTION: Shows how to return a cleanup function within a `ref` callback in a React component. This function executes when the referenced element is removed from the DOM, replacing the previous behavior of calling the ref with `null`. This feature applies to DOM refs, class component refs, and `useImperativeHandle`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js {7-9}\n<input\n  ref={(ref) => {\n    // ref created\n\n    // NEW: return a cleanup function to reset\n    // the ref when element is removed from DOM.\n    return () => {\n      // ref cleanup\n    };\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Deferring Search Query Update with React useDeferredValue\nDESCRIPTION: Shows a modification to the `App` component using the `useDeferredValue` hook. The `query` state updates immediately on input change, reflecting in the input field. However, `deferredQuery` (passed to `SearchResults`) retains its previous value until the data for the new `query` has finished loading. This prevents the Suspense fallback from showing immediately, displaying stale results instead.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query); // introduced\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={deferredQuery} /> {/* uses deferredQuery */}\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Objects for Tasks Management\nDESCRIPTION: Creates two separate context objects - one for the tasks data and another for the dispatch function that allows components to update tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing Game History UI with React's map Method\nDESCRIPTION: Implementation of the Game component that displays move history as clickable buttons. The code maps over the history array to create list items with buttons that will allow players to jump to previous game states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_42\n\nLANGUAGE: js\nCODE:\n```\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // TODO\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Related Resources in React Components\nDESCRIPTION: Example showing how to annotate a document with links to related resources like an icon and pingback URL from within a React component. React will place these in the document <head> regardless of where they're rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nexport default function BlogPage() {\n  return (\n    <ShowRenderedHTML>\n      <link rel=\"icon\" href=\"favicon.ico\" />\n      <link rel=\"pingback\" href=\"http://www.example.com/xmlrpc.php\" />\n      <h1>My Blog</h1>\n      <p>...</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Array of Objects as Children in React\nDESCRIPTION: This snippet demonstrates how to pass an array of objects as a prop to a React component and render them as children. It uses the map function to iterate over the array and create child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n  return (\n    <RowList rows={[\n      { id: 'first', content: <p>This is the first item.</p> },\n      { id: 'second', content: <p>This is the second item.</p> },\n      { id: 'third', content: <p>This is the third item.</p> }\n    ]} />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function RowList({ rows }) {\n  return (\n    <div className=\"RowList\">\n      {rows.map(row => (\n        <div className=\"Row\" key={row.id}>\n          {row.content}\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Composition Example\nDESCRIPTION: Shows how to compose multiple components together, demonstrating a Gallery component that renders multiple Profile components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ref Callback Function with Cleanup in React\nDESCRIPTION: Example of implementing a ref callback function in React that logs when a DOM node is attached and provides a cleanup function that runs when the node is removed. This pattern allows for managing DOM node references with proper cleanup and is particularly useful for lists of dynamic elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n<div ref={(node) => {\n  console.log('Attached', node);\n\n  return () => {\n    console.log('Clean up', node)\n  }\n}}>\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Conditional Classes with classnames in React\nDESCRIPTION: Advanced example of using the classnames library to manage multiple conditional CSS classes based on component props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nimport cn from 'classnames';\n\nfunction Row({ isSelected, size }) {\n  return (\n    <div className={cn('row', {\n      selected: isSelected,\n      large: size === 'large',\n      small: size === 'small',\n    })}>\n      ...\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMemo with Object Dependencies in React\nDESCRIPTION: An example showing an inefficient useMemo implementation that depends on an object created in the component body. This approach defeats the purpose of memoization since the object is recreated on every render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Dropdown({ allItems, text }) {\n  const searchOptions = { matchMode: 'whole-word', text };\n\n  const visibleItems = useMemo(() => {\n    return searchItems(allItems, searchOptions);\n  }, [allItems, searchOptions]); // 🚩 Caution: Dependency on an object created in the component body\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Effect Isolation in React\nDESCRIPTION: This code snippet shows how Effects are isolated for each render, capturing the state value from their corresponding render. It uses the ChatRoom component as an example.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to {roomId}!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Naming Convention Fix\nDESCRIPTION: Illustrates the importance of using capital letters for React component names. Shows a Gallery component that renders multiple Profile components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nimg { margin: 0 10px 10px 0; }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React `cache`\nDESCRIPTION: Demonstrates the basic syntax for using the `cache` function from React. It wraps an existing function `fn` to create a new function `cachedFn` that memoizes results based on its arguments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst cachedFn = cache(fn);\n```\n```\n\n----------------------------------------\n\nTITLE: Proper Usage of Effect Events in Custom Hooks\nDESCRIPTION: The correct pattern for using Effect Events in custom hooks - declare them locally within the hook next to the Effect that uses them, rather than passing them as arguments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Timer() {\n  const [count, setCount] = useState(0);\n  useTimer(() => {\n    setCount(count + 1);\n  }, 1000);\n  return <h1>{count}</h1>\n}\n\nfunction useTimer(callback, delay) {\n  const onTick = useEffectEvent(() => {\n    callback();\n  });\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      onTick(); // ✅ Good: Only called locally inside an Effect\n    }, delay);\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay]); // No need to specify \"onTick\" (an Effect Event) as a dependency\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Component Using Composed useCounter and useInterval Hooks - React JavaScript\nDESCRIPTION: This snippet shows a component using a final useCounter implementation that delegates interval functionality to a generic useInterval Hook. It simply displays a numeric count that increases every second. Requires useCounter to import and use useInterval. Reusable and decouples UI from state logic completely.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n  const count = useCounter(1000);\n  return <h1>Seconds passed: {count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Actions with startTransition\nDESCRIPTION: Provides an example of using `startTransition` to wrap an asynchronous operation (`updateQuantity`) within an `onSubmit` handler. It shows how to initiate the transition, await the async call, and then use another nested `startTransition` to update the state (`setQuantity`) with the result, ensuring the UI remains responsive throughout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {useState, useTransition} from 'react';\nimport {updateQuantity} from './api';\n\nfunction CheckoutForm() {\n  const [isPending, startTransition] = useTransition();\n  const [quantity, setQuantity] = useState(1);\n\n  function onSubmit(newQuantity) {\n    startTransition(async function () {\n      const savedQuantity = await updateQuantity(newQuantity);\n      startTransition(() => {\n        setQuantity(savedQuantity);\n      });\n    });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Crawler Requests in React Server-Side Rendering\nDESCRIPTION: This snippet shows how to differentiate between regular users and crawlers during server-side rendering, waiting for all content to load before sending the response to crawlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet didError = false;\nlet isCrawler = // ... depends on your bot detection strategy ...\n\nconst { pipe } = renderToPipeableStream(<App />, {\n  bootstrapScripts: ['/main.js'],\n  onShellReady() {\n    if (!isCrawler) {\n      response.statusCode = didError ? 500 : 200;\n      response.setHeader('content-type', 'text/html');\n      pipe(response);\n    }\n  },\n  onShellError(error) {\n    response.statusCode = 500;\n    response.setHeader('content-type', 'text/html');\n    response.send('<h1>Something went wrong</h1>'); \n  },\n  onAllReady() {\n    if (isCrawler) {\n      response.statusCode = didError ? 500 : 200;\n      response.setHeader('content-type', 'text/html');\n      pipe(response);      \n    }\n  },\n  onError(error) {\n    didError = true;\n    console.error(error);\n    logServerCrashReport(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Indicating Stale Content with useDeferredValue in React\nDESCRIPTION: This snippet demonstrates how to use useDeferredValue to visually indicate when search results are stale while a new query is loading. It applies an opacity style to dim the results and includes a transition for a smooth effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState, useDeferredValue } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query);\n  const isStale = query !== deferredQuery;\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <div style={{\n          opacity: isStale ? 0.5 : 1,\n          transition: isStale ? 'opacity 0.2s 0.2s linear' : 'opacity 0s 0s linear'\n        }}>\n          <SearchResults query={deferredQuery} />\n        </div>\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Control with Refs\nDESCRIPTION: Example of using refs to control input focus from a parent component through a button click handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nexport default function MyForm() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Animation Events in React\nDESCRIPTION: Shows how to handle CSS animation events in React components using onAnimationStart, onAnimationIteration, and onAnimationEnd event handlers. These handlers receive a React event object with AnimationEvent properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onAnimationStart={e => console.log('onAnimationStart')}\n  onAnimationIteration={e => console.log('onAnimationIteration')}\n  onAnimationEnd={e => console.log('onAnimationEnd')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Problematic Effect Pattern in React\nDESCRIPTION: This snippet demonstrates a problematic pattern where a form submission triggers a state change that then causes a useEffect to send a message. This creates issues when the state's initial value changes, causing unintended message sends.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Form() {\n  const [showForm, setShowForm] = useState(true);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (!showForm) {\n      sendMessage(message);\n    }\n  }, [showForm, message]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setShowForm(false);\n  }\n\n  if (!showForm) {\n    return (\n      <>\n        <h1>Thanks for using our services!</h1>\n        <button onClick={() => {\n          setMessage('');\n          setShowForm(true);\n        }}>\n          Open chat\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\" disabled={message === ''}>\n        Send\n      </button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  console.log('Sending message: ' + message);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining useState with useRef to Access Latest Values in React\nDESCRIPTION: This improved solution combines useState for rendering with useRef to track the most current input value. By updating both state and ref in the change handler, the timeout can access the latest text value even after the state has changed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n\n  function handleChange(e) {\n    setText(e.target.value);\n    textRef.current = e.target.value;\n  }\n\n  function handleSend() {\n    setTimeout(() => {\n      alert('Sending: ' + textRef.current);\n    }, 3000);\n  }\n\n  return (\n    <>\n      <input\n        value={text}\n        onChange={handleChange}\n      />\n      <button\n        onClick={handleSend}>\n        Send\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Online Status with useSyncExternalStore\nDESCRIPTION: Improved implementation using useSyncExternalStore API to handle edge cases and server-side rendering. The hook provides better handling of initial states and network status synchronization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\n\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n\nexport function useOnlineStatus() {\n  return useSyncExternalStore(\n    subscribe,\n    () => navigator.onLine, // How to get the value on the client\n    () => true // How to get the value on the server\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component with Pending State Indicator in React\nDESCRIPTION: This snippet defines a Layout component that wraps the main content and includes a header. It uses the isPending prop to adjust the header's opacity during transitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Layout({ children, isPending }) {\n  return (\n    <div className=\"layout\">\n      <section className=\"header\" style={{\n        opacity: isPending ? 0.7 : 1\n      }}>\n        Music Browser\n      </section>\n      <main>\n        {children}\n      </main>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React.dev Project Dependencies\nDESCRIPTION: Commands for navigating to the project directory and installing npm dependencies using Yarn.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd react.dev\nyarn\n```\n\n----------------------------------------\n\nTITLE: useDebugValue with Formatting Function\nDESCRIPTION: Example showing how to use a formatting function with useDebugValue to defer expensive formatting operations until the component is actually inspected in DevTools.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDebugValue.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseDebugValue(date, date => date.toDateString());\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement Example\nDESCRIPTION: Code showing how to measure calculation performance using console.time\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time('filter array');\nconst visibleTodos = filterTodos(todos, tab);\nconsole.timeEnd('filter array');\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Context with Default Value - React JavaScript\nDESCRIPTION: Declares ThemeContext with either a null or string as fallback value, illustrating how useContext will return the default outside a provider. Examples show usage with both 'null' and 'light' default values. Requires React's createContext function; suitable for context value documentation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ThemeContext = createContext(null);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ThemeContext = createContext('light');\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Component Lifecycle in React 18\nDESCRIPTION: Illustrates the new development-only mounting behavior in Strict Mode, showing how components are mounted, unmounted, and remounted to help detect side effect issues.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n* React mounts the component.\n  * Layout effects are created.\n  * Effects are created.\n* React simulates unmounting the component.\n  * Layout effects are destroyed.\n  * Effects are destroyed.\n* React simulates mounting the component with the previous state.\n  * Layout effects are created.\n  * Effects are created.\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If-Else\nDESCRIPTION: Shows how to conditionally render different components using standard JavaScript if-else statements based on a user's login status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet content;\nif (isLoggedIn) {\n  content = <AdminPanel />;\n} else {\n  content = <LoginForm />;\n}\nreturn (\n  <div>\n    {content}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using preconnect in a React Event Handler\nDESCRIPTION: Demonstrates how to use the preconnect function within an event handler in React. This approach allows for preconnecting before transitioning to a new page or state where external resources will be needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preconnect.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preconnect } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preconnect('http://example.com');\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Container with Suspense Loading\nDESCRIPTION: Implementation of a tab container component using React Suspense for loading states. Shows basic approach where entire container is replaced with loading indicator during data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState } from 'react';\nimport TabButton from './TabButton.js';\nimport AboutTab from './AboutTab.js';\nimport PostsTab from './PostsTab.js';\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n  const [tab, setTab] = useState('about');\n  return (\n    <Suspense fallback={<h1>🌀 Loading...</h1>}>\n      <TabButton\n        isActive={tab === 'about'}\n        action={() => setTab('about')}\n      >\n        About\n      </TabButton>\n      <TabButton\n        isActive={tab === 'posts'}\n        action={() => setTab('posts')}\n      >\n        Posts\n      </TabButton>\n      <TabButton\n        isActive={tab === 'contact'}\n        action={() => setTab('contact')}\n      >\n        Contact\n      </TabButton>\n      <hr />\n      {tab === 'about' && <AboutTab />}\n      {tab === 'posts' && <PostsTab />}\n      {tab === 'contact' && <ContactTab />}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Select Boxes in React\nDESCRIPTION: This code shows a React component with two select boxes - one for planets and one for places on the selected planet. The first version is incomplete, missing the implementation to fetch and display places based on the selected planet.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { fetchData } from './api.js';\n\nexport default function Page() {\n  const [planetList, setPlanetList] = useState([])\n  const [planetId, setPlanetId] = useState('');\n\n  const [placeList, setPlaceList] = useState([]);\n  const [placeId, setPlaceId] = useState('');\n\n  useEffect(() => {\n    let ignore = false;\n    fetchData('/planets').then(result => {\n      if (!ignore) {\n        console.log('Fetched a list of planets.');\n        setPlanetList(result);\n        setPlanetId(result[0].id); // Select the first planet\n      }\n    });\n    return () => {\n      ignore = true;\n    }\n  }, []);\n\n  return (\n    <>\n      <label>\n        Pick a planet:{' '}\n        <select value={planetId} onChange={e => {\n          setPlanetId(e.target.value);\n        }}>\n          {planetList.map(planet =>\n            <option key={planet.id} value={planet.id}>{planet.name}</option>\n          )}\n        </select>\n      </label>\n      <label>\n        Pick a place:{' '}\n        <select value={placeId} onChange={e => {\n          setPlaceId(e.target.value);\n        }}>\n          {placeList.map(place =>\n            <option key={place.id} value={place.id}>{place.name}</option>\n          )}\n        </select>\n      </label>\n      <hr />\n      <p>You are going to: {placeId || '???'} on {planetId || '???'} </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Asynchronous Data Fetching with Caching in JavaScript (Context: Deferred Value)\nDESCRIPTION: This is the mock data fetching logic used in the deferred value example. It remains the same as in the first example, providing cached, asynchronous data fetching with an artificial delay to simulate network latency, which is crucial for demonstrating the behavior of `useDeferredValue` and Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: the way you would do data fetching depends on\n// the framework that you use together with Suspense.\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n  if (!cache.has(url)) {\n    cache.set(url, getData(url));\n  }\n  return cache.get(url);\n}\n\nasync function getData(url) {\n  if (url.startsWith('/search?q=')) {\n    return await getSearchResults(url.slice('/search?q='.length));\n  } else {\n    throw Error('Not implemented');\n  }\n}\n\nasync function getSearchResults(query) {\n  // Add a fake delay to make waiting noticeable.\n  await new Promise(resolve => {\n    setTimeout(resolve, 500);\n  });\n\n  const allAlbums = [{\n    id: 13,\n    title: 'Let It Be',\n    year: 1970\n  }, {\n    id: 12,\n    title: 'Abbey Road',\n    year: 1969\n  }, {\n    id: 11,\n    title: 'Yellow Submarine',\n    year: 1969\n  }, {\n    id: 10,\n    title: 'The Beatles',\n    year: 1968\n  }, {\n    id: 9,\n    title: 'Magical Mystery Tour',\n    year: 1967\n  }, {\n    id: 8,\n    title: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n    year: 1967\n  }, {\n    id: 7,\n    title: 'Revolver',\n    year: 1966\n  }, {\n    id: 6,\n    title: 'Rubber Soul',\n    year: 1965\n  }, {\n    id: 5,\n    title: 'Help!',\n    year: 1965\n  }, {\n    id: 4,\n    title: 'Beatles For Sale',\n    year: 1964\n  }, {\n    id: 3,\n    title: 'A Hard Day\\'s Night',\n    year: 1964\n  }, {\n    id: 2,\n    title: 'With The Beatles',\n    year: 1963\n  }, {\n    id: 1,\n    title: 'Please Please Me',\n    year: 1963\n  }];\n\n  const lowerQuery = query.trim().toLowerCase();\n  return allAlbums.filter(album => {\n    const lowerTitle = album.title.toLowerCase();\n    return (\n      lowerTitle.startsWith(lowerQuery) ||\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\n    )\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating a DOM element with a ref in React\nDESCRIPTION: Example showing how to use a ref to call the focus() method on an input element in an event handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  function handleClick() {\n    inputRef.current.focus();\n  }\n```\n\n----------------------------------------\n\nTITLE: Optimizing Expensive Calculations with useMemo in React\nDESCRIPTION: This snippet shows how to use useMemo to cache expensive calculations in a React component. It demonstrates the inefficient approach with state and Effect, and the optimized approach using useMemo.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  useEffect(() => {\n    setVisibleTodos(getFilteredTodos(todos, filter));\n  }, [todos, filter]);\n\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  // ✅ This is fine if getFilteredTodos() is not slow.\n  const visibleTodos = getFilteredTodos(todos, filter);\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  const visibleTodos = useMemo(() => {\n    // ✅ Does not re-run unless todos or filter change\n    return getFilteredTodos(todos, filter);\n  }, [todos, filter]);\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  // ✅ Does not re-run getFilteredTodos() unless todos or filter change\n  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging useMemo Dependencies with Console Logging\nDESCRIPTION: A technique for debugging useMemo re-computation issues by logging dependencies to the console and inspecting why they're changing between renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  console.log([todos, tab]);\n```\n\n----------------------------------------\n\nTITLE: AddTodo Component for React Todo List\nDESCRIPTION: A component for adding new todos to the list. It manages its own input field state and communicates with the parent component through the onAddTodo callback when adding a new item.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n  const [title, setTitle] = useState('');\n  return (\n    <>\n      <input\n        placeholder=\"Add todo\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n      />\n      <button onClick={() => {\n        setTitle('');\n        onAddTodo(title);\n      }}>Add</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Artist Page Component with Suspense Implementation\nDESCRIPTION: Complete implementation of an artist page component using Suspense to manage loading states for biography and albums data. Includes a loading indicator component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react';\nimport Albums from './Albums.js';\nimport Biography from './Biography.js';\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<Loading />}>\n        <Biography artistId={artist.id} />\n        <Panel>\n          <Albums artistId={artist.id} />\n        </Panel>\n      </Suspense>\n    </>\n  );\n}\n\nfunction Loading() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flattened Travel Plan Data Structure in JavaScript\nDESCRIPTION: This snippet shows the initial travel plan data structure using a flattened, normalized object. Each place is stored as a separate entry with an ID, and relationships are maintained through childIds arrays.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialTravelPlan = {\n  0: {\n    id: 0,\n    title: '(Root)',\n    childIds: [1, 42, 46],\n  },\n  1: {\n    id: 1,\n    title: 'Earth',\n    childIds: [2, 10, 19, 26, 34]\n  },\n  2: {\n    id: 2,\n    title: 'Africa',\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\n  }, \n  3: {\n    id: 3,\n    title: 'Botswana',\n    childIds: []\n  },\n  4: {\n    id: 4,\n    title: 'Egypt',\n    childIds: []\n  },\n  5: {\n    id: 5,\n    title: 'Kenya',\n    childIds: []\n  },\n  6: {\n    id: 6,\n    title: 'Madagascar',\n    childIds: []\n  }, \n  7: {\n    id: 7,\n    title: 'Morocco',\n    childIds: []\n  },\n  8: {\n    id: 8,\n    title: 'Nigeria',\n    childIds: []\n  },\n  9: {\n    id: 9,\n    title: 'South Africa',\n    childIds: []\n  },\n  10: {\n    id: 10,\n    title: 'Americas',\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \n  },\n  11: {\n    id: 11,\n    title: 'Argentina',\n    childIds: []\n  },\n  12: {\n    id: 12,\n    title: 'Brazil',\n    childIds: []\n  },\n  13: {\n    id: 13,\n    title: 'Barbados',\n    childIds: []\n  }, \n  14: {\n    id: 14,\n    title: 'Canada',\n    childIds: []\n  },\n  15: {\n    id: 15,\n    title: 'Jamaica',\n    childIds: []\n  },\n  16: {\n    id: 16,\n    title: 'Mexico',\n    childIds: []\n  },\n  17: {\n    id: 17,\n    title: 'Trinidad and Tobago',\n    childIds: []\n  },\n  18: {\n    id: 18,\n    title: 'Venezuela',\n    childIds: []\n  },\n  19: {\n    id: 19,\n    title: 'Asia',\n    childIds: [20, 21, 22, 23, 24, 25],   \n  },\n  20: {\n    id: 20,\n    title: 'China',\n    childIds: []\n  },\n  21: {\n    id: 21,\n    title: 'India',\n    childIds: []\n  },\n  22: {\n    id: 22,\n    title: 'Singapore',\n    childIds: []\n  },\n  23: {\n    id: 23,\n    title: 'South Korea',\n    childIds: []\n  },\n  24: {\n    id: 24,\n    title: 'Thailand',\n    childIds: []\n  },\n  25: {\n    id: 25,\n    title: 'Vietnam',\n    childIds: []\n  },\n  26: {\n    id: 26,\n    title: 'Europe',\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \n  },\n  27: {\n    id: 27,\n    title: 'Croatia',\n    childIds: []\n  },\n  28: {\n    id: 28,\n    title: 'France',\n    childIds: []\n  },\n  29: {\n    id: 29,\n    title: 'Germany',\n    childIds: []\n  },\n  30: {\n    id: 30,\n    title: 'Italy',\n    childIds: []\n  },\n  31: {\n    id: 31,\n    title: 'Portugal',\n    childIds: []\n  },\n  32: {\n    id: 32,\n    title: 'Spain',\n    childIds: []\n  },\n  33: {\n    id: 33,\n    title: 'Turkey',\n    childIds: []\n  },\n  34: {\n    id: 34,\n    title: 'Oceania',\n    childIds: [35, 36, 37, 38, 39, 40, 41],   \n  },\n  35: {\n    id: 35,\n    title: 'Australia',\n    childIds: []\n  },\n  36: {\n    id: 36,\n    title: 'Bora Bora (French Polynesia)',\n    childIds: []\n  },\n  37: {\n    id: 37,\n    title: 'Easter Island (Chile)',\n    childIds: []\n  },\n  38: {\n    id: 38,\n    title: 'Fiji',\n    childIds: []\n  },\n  39: {\n    id: 40,\n    title: 'Hawaii (the USA)',\n    childIds: []\n  },\n  40: {\n    id: 40,\n    title: 'New Zealand',\n    childIds: []\n  },\n  41: {\n    id: 41,\n    title: 'Vanuatu',\n    childIds: []\n  },\n  42: {\n    id: 42,\n    title: 'Moon',\n    childIds: [43, 44, 45]\n  },\n  43: {\n    id: 43,\n    title: 'Rheita',\n    childIds: []\n  },\n  44: {\n    id: 44,\n    title: 'Piccolomini',\n    childIds: []\n  },\n  45: {\n    id: 45,\n    title: 'Tycho',\n    childIds: []\n  },\n  46: {\n    id: 46,\n    title: 'Mars',\n    childIds: [47, 48]\n  },\n  47: {\n    id: 47,\n    title: 'Corn Town',\n    childIds: []\n  },\n  48: {\n    id: 48,\n    title: 'Green Hill',\n    childIds: []\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Problematic Effect Dependency Causing Frequent Reconnections\nDESCRIPTION: Shows how including a function as a dependency in useEffect without memoization causes the effect to run on every render since the function reference changes each time.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n  useEffect(() => {\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [createOptions]); // 🔴 Problem: This dependency changes on every render\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Props in React List Component\nDESCRIPTION: Demonstrates passing data using render props pattern where List component accepts a renderItem prop to render individual items with highlighting functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function List({ items, renderItem }) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return (\n    <div className=\"List\">\n      {items.map((item, index) => {\n        const isHighlighted = index === selectedIndex;\n        return renderItem(item, isHighlighted);\n      })}\n\n```\n\n----------------------------------------\n\nTITLE: Basic DNS Prefetching with `prefetchDNS` in JavaScript\nDESCRIPTION: This snippet shows the basic syntax for calling `prefetchDNS` with a URL string. It hints to the browser that it should look up the IP address for the specified domain (`https://example.com`) in advance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/prefetchDNS.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nprefetchDNS(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Solution with Named Exports - Gallery Component\nDESCRIPTION: The Gallery component updated to import Profile from its new location using named export syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Profile } from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the 'use' API in React\nDESCRIPTION: Demonstrates the basic syntax for using the 'use' function to read a value from a resource like a Promise or context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst value = use(resource);\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Turn State in React Tic-Tac-Toe\nDESCRIPTION: Adds state to track which player's turn is next (X or O) using the useState hook in a React component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task App with useImmerReducer in React\nDESCRIPTION: This code demonstrates how to use useImmerReducer from the Immer library to manage a task list application with add, change, and delete functionality. The reducer leverages Immer's draft object to allow for simpler, mutation-style syntax while maintaining immutability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { useImmerReducer } from 'use-immer';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nfunction tasksReducer(draft, action) {\n  switch (action.type) {\n    case 'added': {\n      draft.push({\n        id: action.id,\n        text: action.text,\n        done: false,\n      });\n      break;\n    }\n    case 'changed': {\n      const index = draft.findIndex((t) => t.id === action.task.id);\n      draft[index] = action.task;\n      break;\n    }\n    case 'deleted': {\n      return draft.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useImmerReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search with React Suspense Fallback (App.js)\nDESCRIPTION: Defines the main `App` component managing search input state (`query`). It uses React's `Suspense` component to wrap the `SearchResults` component. When `SearchResults` suspends (e.g., while fetching data), the `<h2>Loading...</h2>` fallback UI is rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, useState } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={query} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRef with Required Argument in TypeScript\nDESCRIPTION: Examples of how to use useRef in React 19, which now requires an argument. It shows both correct and incorrect usage, as well as comparisons with createContext.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error: Expected 1 argument but saw none\nuseRef();\n// Passes\nuseRef(undefined);\n// @ts-expect-error: Expected 1 argument but saw none\ncreateContext();\n// Passes\ncreateContext(undefined);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Calling `cache` Inside a Component\nDESCRIPTION: Demonstrates a common pitfall where `cache` is called directly inside a component (`Temperature`). This is incorrect because it creates a new memoized function and a separate cache on every render, preventing effective caching and sharing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[1, 7, \"getWeekReport\"], [1, 7, \"cache(calculateWeekReport)\"], [1, 8, \"getWeekReport\"]]\n// Temperature.js\nimport {cache} from 'react';\nimport {calculateWeekReport} from './report';\n\nexport function Temperature({cityData}) {\n  // 🚩 Wrong: Calling `cache` in component creates new `getWeekReport` for each render\n  const getWeekReport = cache(calculateWeekReport);\n  const report = getWeekReport(cityData);\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Form Submissions in React\nDESCRIPTION: This example illustrates how forms can handle multiple submission actions based on user interaction with different buttons. The snippet shows how to define distinct actions for each button using `formAction` prop, allowing separate handling for actions like publishing content or saving drafts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Search() {\n  function publish(formData) {\n    const content = formData.get(\"content\");\n    const button = formData.get(\"button\");\n    alert(`'${content}' was published with the '${button}' button`);\n  }\n\n  function save(formData) {\n    const content = formData.get(\"content\");\n    alert(`Your draft of '${content}' has been saved!`);\n  }\n\n  return (\n    <form action={publish}>\n      <textarea name=\"content\" rows={4} cols={40} />\n      <br />\n      <button type=\"submit\" name=\"button\" value=\"submit\">Publish</button>\n      <button formAction={save}>Save draft</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tasks Reducer with If/Else Logic in React\nDESCRIPTION: A complete tasks reducer implementation using if/else conditionals to handle different action types. The reducer contains all the state update logic that was previously in the component's event handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tasksReducer(tasks, action) {\n  if (action.type === 'added') {\n    return [\n      ...tasks,\n      {\n        id: action.id,\n        text: action.text,\n        done: false,\n      },\n    ];\n  } else if (action.type === 'changed') {\n    return tasks.map((t) => {\n      if (t.id === action.task.id) {\n        return action.task;\n      } else {\n        return t;\n      }\n    });\n  } else if (action.type === 'deleted') {\n    return tasks.filter((t) => t.id !== action.id);\n  } else {\n    throw Error('Unknown action: ' + action.type);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tic-Tac-Toe Game Implementation in React\nDESCRIPTION: This snippet contains the full implementation of the tic-tac-toe game in React. It includes the Square, Board, and Game components, as well as the game logic for determining a winner.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Implementation for Promise Handling\nDESCRIPTION: Shows how to implement error handling for Promises using Error Boundary and Suspense components in a Client Component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport { use, Suspense } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport function MessageContainer({ messagePromise }) {\n  return (\n    <ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>\n      <Suspense fallback={<p>⌛Downloading message...</p>}>\n        <Message messagePromise={messagePromise} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n}\n\nfunction Message({ messagePromise }) {\n  const content = use(messagePromise);\n  return <p>Here is the message: {content}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Website to React DevTools\nDESCRIPTION: HTML script tag that needs to be added to the head section of your website to connect to the standalone React Developer Tools. The highlighted line shows the script that connects to the local DevTools server.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-developer-tools.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"http://localhost:8097\"></script>\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Inline Styles in React Components\nDESCRIPTION: Example of using the style attribute in React to apply dynamic, data-dependent inline styles to a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n<img\n  className=\"avatar\"\n  style={{\n    width: user.imageSize,\n    height: user.imageSize\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handling to Square Component in React\nDESCRIPTION: Updates the Square component to include an onClick event handler that will be passed down from the parent. The component now accepts both value and onSquareClick props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square({ value }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating PropTypes to TypeScript\nDESCRIPTION: Example showing how to migrate from PropTypes to TypeScript interfaces for component props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport PropTypes from 'prop-types';\n\nfunction Heading({text}) {\n  return <h1>{text}</h1>;\n}\nHeading.propTypes = {\n  text: PropTypes.string,\n};\nHeading.defaultProps = {\n  text: 'Hello, world!',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\ninterface Props {\n  text?: string;\n}\nfunction Heading({text = 'Hello, world!'}: Props) {\n  return <h1>{text}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Parent-Controlled Component Implementation\nDESCRIPTION: Shows how to implement a fully controlled component where state is managed by the parent component through props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Toggle({ isOn, onChange }) {\n  function handleClick() {\n    onChange(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      onChange(true);\n    } else {\n      onChange(false);\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of startTransition with Async/Await in React\nDESCRIPTION: Shows how to properly wrap state updates after an await in a new startTransition call to ensure they're treated as transitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition(async () => {\n  await someAsyncFunction();\n  // ✅ Using startTransition *after* await\n  startTransition(() => {\n    setPage('/about');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact List Component in React\nDESCRIPTION: Renders a list of contacts as buttons. When a contact is selected, it dispatches a 'changed_selection' action to update the state in the parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ContactList({contacts, selectedId, dispatch}) {\n  return (\n    <section className=\"contact-list\">\n      <ul>\n        {contacts.map((contact) => (\n          <li key={contact.id}>\n            <button\n              onClick={() => {\n                dispatch({\n                  type: 'changed_selection',\n                  contactId: contact.id,\n                });\n              }}>\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useDeferredValue for Stale Result Rendering in React App - JavaScript\nDESCRIPTION: This App component uses useDeferredValue to create a deferred version of the query state and passes it to SearchResults, ensuring stale results are shown in the UI until the latest fetch completes. It demonstrates integrating useState, useDeferredValue, Suspense, and fallback rendering for smooth UX. Dependencies: React (and its hooks, Suspense), and a Suspense-friendly SearchResults child. Inputs: user input text; Outputs: search UI with deferred result rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const deferredQuery = useDeferredValue(query);\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={deferredQuery} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inline Script within a React Component\nDESCRIPTION: Demonstrates embedding an inline script (e.g., for analytics tracking) directly within a React functional component (`Tracking`) using the `<script>` component's children. Inline scripts like this are not de-duplicated or moved to the document head by React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/script.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nfunction Tracking() {\n  return (\n    <script>\n      ga('send', 'pageview');\n    </script>\n  );\n}\n\nexport default function Page() {\n  return (\n    <ShowRenderedHTML>\n      <h1>My Website</h1>\n      <Tracking />\n      <p>Welcome</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Panel Component for Content Display\nDESCRIPTION: A wrapper component that provides styling and structure for displaying content in a panel format.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Panel({ children }) {\n  return (\n    <section className=\"panel\">\n      {children}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Asset Rendering Configuration\nDESCRIPTION: Demonstrates server-side setup for rendering React components with dynamic asset paths using renderToPipeableStream.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetMap = {\n  'styles.css': '/styles.123456.css',\n  'main.js': '/main.123456.js'\n};\n\napp.use('/', (request, response) => {\n  const { pipe } = renderToPipeableStream(<App assetMap={assetMap} />, {\n    bootstrapScripts: [assetMap['main.js']],\n    onShellReady() {\n      response.setHeader('content-type', 'text/html');\n      pipe(response);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Server Action with Structured Response\nDESCRIPTION: Shows how a server action can return structured data objects with success status and additional information for more complex UI interactions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\";\n\nexport async function addToCart(prevState, queryData) {\n  const itemID = queryData.get('itemID');\n  if (itemID === \"1\") {\n    return {\n      success: true,\n      cartSize: 12,\n    };\n  } else {\n    return {\n      success: false,\n      message: \"The item is sold out.\",\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Lazy Component Declaration at Module Level\nDESCRIPTION: Example of correct usage where a lazy component is declared at the top level of the module, preventing state reset issues.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from 'react';\n\n// ✅ Good: Declare lazy components outside of your components\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\nfunction Editor() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitions with startTransition API\nDESCRIPTION: Demonstrates how to use startTransition to mark state updates as non-urgent, allowing React to prioritize urgent updates like user input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { startTransition } from 'react';\n\n// Urgent: Show what was typed\nsetInputValue(input);\n\n// Mark any state updates inside as transitions\nstartTransition(() => {\n  // Transition: Show the results\n  setSearchQuery(input);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Components in Different Positions in React\nDESCRIPTION: This snippet demonstrates how to render two different Counter components based on state, placing them in different positions in the DOM. When the state changes, one Counter is removed and another is added, causing state to reset.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA &&\n        <Counter person=\"Taylor\" />\n      }\n      {!isPlayerA &&\n        <Counter person=\"Sarah\" />\n      }\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  font-size: 18px;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Preloading HTML Output Example\nDESCRIPTION: Shows the resulting HTML structure generated by React's resource preloading APIs, demonstrating how preloading directives are translated into appropriate link and script tags in the document head.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <!-- links/scripts are prioritized by their utility to early loading, not call order -->\n    <link rel=\"prefetch-dns\" href=\"https://...\">\n    <link rel=\"preconnect\" href=\"https://...\">\n    <link rel=\"preload\" as=\"font\" href=\"https://.../path/to/font.woff\">\n    <link rel=\"preload\" as=\"style\" href=\"https://.../path/to/stylesheet.css\">\n    <script async=\"\" src=\"https://.../path/to/some/script.js\"></script>\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fixed React Component Using useEffectEvent for Non-reactive Logic\nDESCRIPTION: The corrected version of the component uses useEffectEvent to handle the non-reactive parts of the logic, allowing proper reactivity to canMove changes without requiring it as a dependency in the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"experimental\",\n    \"react-dom\": \"experimental\",\n    \"react-scripts\": \"latest\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  const onMove = useEffectEvent(e => {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('pointermove', onMove);\n    return () => window.removeEventListener('pointermove', onMove);\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  height: 200px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Movement with Delayed Values in React\nDESCRIPTION: This snippet demonstrates a React component that creates a staggered movement effect using multiple delayed positions. It uses custom hooks for pointer position and delayed values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePointerPosition } from './usePointerPosition.js';\n\nfunction useDelayedValue(value, delay) {\n  // TODO: Implement this Hook\n  return value;\n}\n\nexport default function Canvas() {\n  const pos1 = usePointerPosition();\n  const pos2 = useDelayedValue(pos1, 100);\n  const pos3 = useDelayedValue(pos2, 200);\n  const pos4 = useDelayedValue(pos3, 100);\n  const pos5 = useDelayedValue(pos3, 50);\n  return (\n    <>\n      <Dot position={pos1} opacity={1} />\n      <Dot position={pos2} opacity={0.8} />\n      <Dot position={pos3} opacity={0.6} />\n      <Dot position={pos4} opacity={0.4} />\n      <Dot position={pos5} opacity={0.2} />\n    </>\n  );\n}\n\nfunction Dot({ position, opacity }) {\n  return (\n    <div style={{\n      position: 'absolute',\n      backgroundColor: 'pink',\n      borderRadius: '50%',\n      opacity,\n      transform: `translate(${position.x}px, ${position.y}px)`,\n      pointerEvents: 'none',\n      left: -20,\n      top: -20,\n      width: 40,\n      height: 40,\n    }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFormStatus to Disable a Submit Button in React\nDESCRIPTION: Illustrates how to use the `useFormStatus` Hook within a child component (`Submit`) rendered inside a `<form>`. The `pending` property from the Hook's return value is used to disable the submit button while the form submission is in progress. Requires `react-dom` for the Hook and assumes an `action` function is defined elsewhere.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useFormStatus } from \"react-dom\";\nimport action from './actions';\n\nfunction Submit() {\n  const status = useFormStatus();\n  return <button disabled={status.pending}>Submit</button>\n}\n\nexport default function App() {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Composition Solution for Todo List in React\nDESCRIPTION: This alternative solution extracts the input form into a separate NewTodo component, isolating the text state so that changes to it don't cause the parent TodoList component to re-render and recalculate visible todos.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useMemo } from 'react';\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(initialTodos);\n  const [showActive, setShowActive] = useState(false);\n  const visibleTodos = getVisibleTodos(todos, showActive);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showActive}\n          onChange={e => setShowActive(e.target.checked)}\n        />\n        Show only active todos\n      </label>\n      <NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ? <s>{todo.text}</s> : todo.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nfunction NewTodo({ onAdd }) {\n  const [text, setText] = useState('');\n\n  function handleAddClick() {\n    setText('');\n    onAdd(createTodo(text));\n  }\n\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={handleAddClick}>\n        Add\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting User Data with taintObjectReference in React\nDESCRIPTION: Example showing how to taint a user object in a data fetching function to prevent the entire user object from being passed to client components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintObjectReference.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {experimental_taintObjectReference} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Chat Component with Text Input in React\nDESCRIPTION: Creates a chat interface with a textarea for writing messages and a send button. The textarea value is controlled by the state from the parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={message}\n        placeholder={'Chat to ' + contact.name}\n        onChange={(e) => {\n          dispatch({\n            type: 'edited_message',\n            message: e.target.value,\n          });\n        }}\n      />\n      <br />\n      <button>Send to {contact.email}</button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Effects Running After Every Render in React\nDESCRIPTION: This example shows how an effect runs after every render when a dependency array is missing. The effect will re-run after each component render because no dependencies are specified to limit when it should execute.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  // ...\n}); // 🚩 No dependency array: re-runs after every render!\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Context to Modern Context API\nDESCRIPTION: Example showing how to migrate from Legacy Context to the modern React Context API.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport PropTypes from 'prop-types';\n\nclass Parent extends React.Component {\n  static childContextTypes = {\n    foo: PropTypes.string.isRequired,\n  };\n\n  getChildContext() {\n    return { foo: 'bar' };\n  }\n\n  render() {\n    return <Child />;\n  }\n}\n\nclass Child extends React.Component {\n  static contextTypes = {\n    foo: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return <div>{this.context.foo}</div>;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\nconst FooContext = React.createContext();\n\nclass Parent extends React.Component {\n  render() {\n    return (\n      <FooContext value='bar'>\n        <Child />\n      </FooContext>\n    );\n  }\n}\n\nclass Child extends React.Component {\n  static contextType = FooContext;\n\n  render() {\n    return <div>{this.context}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Environment for React 18 with act()\nDESCRIPTION: This code snippet shows how to configure the testing environment to support React 18's act() testing API by setting the global IS_REACT_ACT_ENVIRONMENT flag to true in the test setup file.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// In your test setup file\nglobalThis.IS_REACT_ACT_ENVIRONMENT = true;\n```\n\n----------------------------------------\n\nTITLE: Grouping Text and Components with Fragment in React (JavaScript)\nDESCRIPTION: The DateRangePicker component demonstrates grouping both text nodes and elements using a Fragment. This allows for mixed content (plain text and components) to be grouped and returned together from a function. React and DatePicker are requirements, and start/end dates are provided as props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nfunction DateRangePicker({ start, end }) {\n  return (\n    <>\n      From\n      <DatePicker date={start} />\n      to\n      <DatePicker date={end} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Context with the 'use' API in React\nDESCRIPTION: Example showing how to read a context value using the 'use' API, which offers more flexibility than useContext since it can be used in conditionals.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { use } from 'react';\n\nfunction Button() {\n  const theme = use(ThemeContext);\n  // ... \n```\n\n----------------------------------------\n\nTITLE: Storing Previous Render Information in React State\nDESCRIPTION: This snippet demonstrates how to store and compare information from previous renders using state. It tracks whether a count has increased or decreased since the last render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function CountLabel({ count }) {\n  const [prevCount, setPrevCount] = useState(count);\n  const [trend, setTrend] = useState(null);\n  if (prevCount !== count) {\n    setPrevCount(count);\n    setTrend(count > prevCount ? 'increasing' : 'decreasing');\n  }\n  return (\n    <>\n      <h1>{count}</h1>\n      {trend && <p>The count is {trend}</p>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic React Class Component\nDESCRIPTION: Shows how to create a basic React class component by extending Component class and implementing the render method. The component accepts a name prop and displays a greeting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications with Toastify\nDESCRIPTION: This snippet demonstrates the use of the third-party library `toastify-js` to display notifications. It defines a function `showNotification` that configures and shows a toast notification based on the provided message and theme.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme = 'dark') {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Custom Event Handler Props\nDESCRIPTION: Advanced example showing how to pass event handlers as props between components with custom naming conventions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-right: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing the Letter Component with Event Handlers\nDESCRIPTION: This Letter component renders individual mail items with hovering and starring functionality. It receives props to handle highlighting and interaction events for each letter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Letter({\n  letter,\n  isHighlighted,\n  onHover,\n  onToggleStar,\n}) {\n  return (\n    <li\n      className={\n        isHighlighted ? 'highlighted' : ''\n      }\n      onFocus={() => {\n        onHover(letter);        \n      }}\n      onPointerMove={() => {\n        onHover(letter);\n      }}\n    >\n      <button onClick={() => {\n        onToggleStar(letter);\n      }}>\n        {letter.isStarred ? 'Unstar' : 'Star'}\n      </button>\n      {letter.subject}\n    </li>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Arrays in React State Using Immer\nDESCRIPTION: Shows how to simplify array updates in React state using the Immer library. This version achieves the same functionality as the pure JavaScript example but with more straightforward state mutation syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { useImmer } from 'use-immer';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [list, updateList] = useImmer(initialList);\n\n  function handleToggle(artworkId, nextSeen) {\n    updateList(draft => {\n      const artwork = draft.find(a =>\n        a.id === artworkId\n      );\n      artwork.seen = nextSeen;\n    });\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={list}\n        onToggle={handleToggle} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component with Artificial Delay\nDESCRIPTION: A modified version of the Tooltip component that includes an artificial delay to highlight the flickering issue with useEffect. The delay simulates slow rendering and makes the positioning problem more noticeable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  // This artificially slows down rendering\n  let now = performance.now();\n  while (performance.now() - now < 100) {\n    // Do nothing for a bit...\n  }\n\n  useEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n  }, []);\n\n  let tooltipX = 0;\n  let tooltipY = 0;\n  if (targetRect !== null) {\n    tooltipX = targetRect.left;\n    tooltipY = targetRect.top - tooltipHeight;\n    if (tooltipY < 0) {\n      // It doesn't fit above, so place below.\n      tooltipY = targetRect.bottom;\n    }\n  }\n\n  return createPortal(\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n      {children}\n    </TooltipContainer>,\n    document.body\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Dot Component - Incorrect Implementation\nDESCRIPTION: Example showing incorrect object mutation in a component that tracks pointer position\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        position.x = e.clientX;\n        position.y = e.clientY;\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Derived Values During Rendering in React\nDESCRIPTION: This snippet shows the recommended way to compute derived values in React components - by calculating them directly during rendering instead of using Effects and additional state variables.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n  // ✅ Good: calculated during rendering\n  const fullName = firstName + ' ' + lastName;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Position Tracking with React State\nDESCRIPTION: A component that tracks mouse position by using a single state object to store both x and y coordinates. This demonstrates grouping related state that changes together.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { margin: 0; padding: 0; height: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Logging and Setting State with React useState - JavaScript\nDESCRIPTION: Demonstrates React state snapshot behavior where setting state does not update the value immediately within an event handler or synchronous code. No dependencies are required beyond React. The snippet logs the count, requests a state update with setCount, and logs again, showing that state remains unchanged synchronously. Expected input: current value of count and updated value. Output: logs to console showing consistent value until re-render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(count);  // 0\nsetCount(count + 1); // Request a re-render with 1\nconsole.log(count);  // Still 0!\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense for Content Streaming\nDESCRIPTION: Demonstrates how to use Suspense boundaries to implement progressive content loading in a profile page component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Suspense fallback={<BigSpinner />}>\n        <Sidebar>\n          <Friends />\n          <Photos />\n        </Sidebar>\n        <Suspense fallback={<PostsGlimmer />}>\n          <Posts />\n        </Suspense>\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Implementation Without Initializer Function\nDESCRIPTION: An inefficient TodoList implementation that calls createInitialState on every render, which is wasteful especially with expensive initialization logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReducer } from 'react';\n\nfunction createInitialState(username) {\n  const initialTodos = [];\n  for (let i = 0; i < 50; i++) {\n    initialTodos.push({\n      id: i,\n      text: username + \"'s task #\" + (i + 1)\n    });\n  }\n  return {\n    draft: '',\n    todos: initialTodos,\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'changed_draft': {\n      return {\n        draft: action.nextDraft,\n        todos: state.todos,\n      };\n    };\n    case 'added_todo': {\n      return {\n        draft: '',\n        todos: [{\n          id: state.todos.length,\n          text: state.draft\n        }, ...state.todos]\n      }\n    }\n  }\n  throw Error('Unknown action: ' + action.type);\n}\n\nexport default function TodoList({ username }) {\n  const [state, dispatch] = useReducer(\n    reducer,\n    createInitialState(username)\n  );\n  return (\n    <>\n      <input\n        value={state.draft}\n        onChange={e => {\n          dispatch({\n            type: 'changed_draft',\n            nextDraft: e.target.value\n          })\n        }}\n      />\n      <button onClick={() => {\n        dispatch({ type: 'added_todo' });\n      }}>Add</button>\n      <ul>\n        {state.todos.map(item => (\n          <li key={item.id}>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Stylesheet Links with React - JavaScript\nDESCRIPTION: This React code snippet demonstrates rendering the same stylesheet link from multiple component instances. React ensures that only a single <link rel=\"stylesheet\"> referencing the same resource is inserted in the document <head>, automatically deduplicating identical links. Requires React and a ShowRenderedHTML wrapper. The component repeats <link rel=\"stylesheet\" href=\"styles.css\" precedence=\"medium\" />, input is instances of Component, output is that only one \"styles.css\" is included. Limitations: deduplication occurs only for identical href/precedence combinations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\\n\\nexport default function HomePage() {\\n  return (\\n    <ShowRenderedHTML>\\n      <Component />\\n      <Component />\\n      ...\\n    </ShowRenderedHTML>\\n  );\\n}\\n\\nfunction Component() {\\n  return <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\" precedence=\\\"medium\\\" />;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using useMemo to Prevent Effect Dependencies from Changing Too Often\nDESCRIPTION: Example demonstrating how to use useMemo to memoize an options object that's passed to a useEffect dependency. This prevents the Effect from reconnecting to a chat room on every render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  const options = useMemo(() => {\n    return {\n      serverUrl: 'https://localhost:1234',\n      roomId: roomId\n    };\n  }, [roomId]); // ✅ Only changes when roomId changes\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]); // ✅ Only changes when options changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Reading Context in a Button Component\nDESCRIPTION: Example showing how to use useContext to read a theme context value in a Button component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\n\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ... \n```\n\n----------------------------------------\n\nTITLE: Passing Values to Square Components in Board\nDESCRIPTION: Updates the Board component to pass unique value props to each Square, creating a numbered tic-tac-toe board.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value=\"1\" />\n        <Square value=\"2\" />\n        <Square value=\"3\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"4\" />\n        <Square value=\"5\" />\n        <Square value=\"6\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"7\" />\n        <Square value=\"8\" />\n        <Square value=\"9\" />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stylesheet Deduplication in React (JavaScript)\nDESCRIPTION: Illustrates that React 19 automatically deduplicates stylesheet `<link>` tags rendered within components. Even if a component rendering a specific stylesheet (like `ComponentOne` which renders foo and bar stylesheets) is used multiple times within an application, the corresponding `<link>` tags will only be included once in the final document's `<head>`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js {5}\nfunction App() {\n  return <>\n    <ComponentOne />\n    ...\n    <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM\n  </>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output with Bootstrap Scripts\nDESCRIPTION: Example of the HTML output generated by renderToPipeableStream, showing how React injects the doctype and bootstrap script tags into the rendered HTML.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <!-- ... HTML from your components ... -->\n</html>\n<script src=\"/main.js\" async=\"\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slow List Component with React.memo\nDESCRIPTION: This code snippet shows the implementation of a SlowList component wrapped in React.memo for optimization. It artificially slows down rendering to demonstrate the effect of useDeferredValue.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from 'react';\n\nconst SlowList = memo(function SlowList({ text }) {\n  console.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\n\n  let items = [];\n  for (let i = 0; i < 250; i++) {\n    items.push(<SlowItem key={i} text={text} />);\n  }\n  return (\n    <ul className=\"items\">\n      {items}\n    </ul>\n  );\n});\n\nfunction SlowItem({ text }) {\n  let startTime = performance.now();\n  while (performance.now() - startTime < 1) {\n    // Do nothing for 1 ms per item to emulate extremely slow code\n  }\n\n  return (\n    <li className=\"item\">\n      Text: {text}\n    </li>\n  )\n}\n\nexport default SlowList;\n```\n\n----------------------------------------\n\nTITLE: Creating a Positioned Tooltip Container Component\nDESCRIPTION: The TooltipContainer component handles the absolute positioning of tooltips. It applies transform for positioning and receives coordinates and a content ref from the Tooltip component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: 0,\n        top: 0,\n        transform: `translate3d(${x}px, ${y}px, 0)`\n      }}\n    >\n      <div ref={contentRef} className=\"tooltip\">\n        {children}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Connection with Unnecessary Effect Dependencies in React\nDESCRIPTION: This example demonstrates a React component with an Effect that re-connects to a chat server when an options object is recreated, causing unnecessary reconnections when typing in the input field.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  const options = {\n    serverUrl: serverUrl,\n    roomId: roomId\n  };\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection({ serverUrl, roomId }) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props with JSX Spread Syntax in React\nDESCRIPTION: Shows how to use the spread syntax to forward all props from a parent component to a child component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Profile(props) {\n  return (\n    <div className=\"card\">\n      <Avatar {...props} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Independent Panels with Local State in React\nDESCRIPTION: This snippet shows a React implementation of an Accordion component with two Panel components, each with its own independent isActive state. When a panel's Show button is clicked, only that specific panel expands.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Panel({ title, children }) {\n  const [isActive, setIsActive] = useState(false);\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={() => setIsActive(true)}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}\n\nexport default function Accordion() {\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel title=\"About\">\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel title=\"Etymology\">\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Class Components with Context to Function Components\nDESCRIPTION: Demonstrates converting Panel and Button class components that use React context (this.context) to function components using the useContext hook. The components apply theme-based styling from context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nfunction Panel({ title, children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'panel-' + theme;\n  return (\n    <section className={className}>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children }) {\n  const theme = useContext(ThemeContext);\n  const className = 'button-' + theme;\n  return (\n    <button className={className}>\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Function Definition File\nDESCRIPTION: Example of defining a standalone Server Function in a separate file with the 'use server' directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\";\n\nexport async function createNote() {\n  await db.notes.create();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title in a Contact Page Component\nDESCRIPTION: Example showing how to set the document title within a component, where React will place it in the document head regardless of where it's rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/title.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nexport default function ContactUsPage() {\n  return (\n    <ShowRenderedHTML>\n      <title>My Site: Contact Us</title>\n      <h1>Contact Us</h1>\n      <p>Email us at support@example.com</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Array in React State - Correct Example\nDESCRIPTION: Shows proper way to add items to array state using spread operator to create a new array, maintaining immutability principles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        setArtists([\n          ...artists,\n          { id: nextId++, name: name }\n        ]);\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useImperativeHandle with an Empty Object\nDESCRIPTION: Basic structure of using useImperativeHandle to customize a ref handle but without actual implementation details.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  useImperativeHandle(ref, () => {\n    return {\n      // ... your methods ...\n    };\n  }, []);\n\n  return <input />;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Asynchronous Search Results with React Suspense - JavaScript\nDESCRIPTION: This SearchResults component uses React's use hook to read album data asynchronously from a promise returned by fetchData. If the query is empty, it renders nothing; otherwise, it displays a list of albums or a message if none match. Depends on a Suspense-enabled React setup, fetchData for retrieving data, and correct query prop handling. Input: query string; Output: unordered list of album results or a 'No matches' message.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function SearchResults({ query }) {\n  if (query === '') {\n    return null;\n  }\n  const albums = use(fetchData(`/search?q=${query}`));\n  if (albums.length === 0) {\n    return <p>No matches for <i>\"{query}\"</i></p>;\n  }\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Effect with Theme Dependency Issue\nDESCRIPTION: Example showing problematic implementation where theme changes cause unnecessary Effect re-runs\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => {\n      connection.disconnect()\n    };\n  }, [roomId, theme]); // ✅ All dependencies declared\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Form State Management Example in React\nDESCRIPTION: This snippet demonstrates a form where `fullName` is derived from `firstName` and `lastName` instead of being stored as state. Dependencies include React and useState hook. Inputs include `firstName` and `lastName` from user input, and the output displays the full name inline.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const fullName = firstName + ' ' + lastName;\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typing useContext Hook in React with TypeScript\nDESCRIPTION: Demonstrates how to use the useContext Hook with TypeScript, including creating a context, provider, and consumer hook. It shows type inference and explicit typing for context values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext, useContext, useState } from 'react';\n\ntype Theme = \"light\" | \"dark\" | \"system\";\nconst ThemeContext = createContext<Theme>(\"system\");\n\nconst useGetTheme = () => useContext(ThemeContext);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <MyComponent />\n    </ThemeContext.Provider>\n  )\n}\n\nfunction MyComponent() {\n  const theme = useGetTheme();\n\n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Impure Profile Component with Shared Variable\nDESCRIPTION: An example of an impure component that uses a shared variable (currentPerson) to pass data between components instead of props. This causes bugs when multiple instances of the component are rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Panel from './Panel.js';\nimport { getImageUrl } from './utils.js';\n\nlet currentPerson;\n\nexport default function Profile({ person }) {\n  currentPerson = person;\n  return (\n    <Panel>\n      <Header />\n      <Avatar />\n    </Panel>\n  )\n}\n\nfunction Header() {\n  return <h1>{currentPerson.name}</h1>;\n}\n\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(currentPerson)}\n      alt={currentPerson.name}\n      width={50}\n      height={50}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator in React\nDESCRIPTION: React component demonstrating the use of ternary operator to conditionally render checkmark or cross icons based on isPacked prop. Shows a packing list with items that can be marked as packed or unpacked.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked ? '✅' : '❌'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using preloadModule in a React Component (JavaScript)\nDESCRIPTION: Illustrates importing `preloadModule` from the `react-dom` package and calling it inside a React functional component (`AppRoot`) to initiate the download of an ESM module. Requires `react-dom` dependency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preloadModule.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { preloadModule } from 'react-dom';\n\nfunction AppRoot() {\n  preloadModule(\"https://example.com/module.js\", {as: \"script\"});\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Wheel Events in React Components\nDESCRIPTION: Example of using the onWheel event handler in a React component to detect mouse wheel or trackpad scrolling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onWheel={e => console.log('onWheel')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sending with Existing Action Types in React\nDESCRIPTION: Adds functionality to the Send button that shows an alert with the message and recipient, then dispatches an 'edited_message' action with an empty string to clear the input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={message}\n        placeholder={'Chat to ' + contact.name}\n        onChange={(e) => {\n          dispatch({\n            type: 'edited_message',\n            message: e.target.value,\n          });\n        }}\n      />\n      <br />\n      <button\n        onClick={() => {\n          alert(`Sending \"${message}\" to ${contact.email}`);\n          dispatch({\n            type: 'edited_message',\n            message: '',\n          });\n        }}>\n        Send to {contact.email}\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating useIntersectionObserver Custom Hook in React\nDESCRIPTION: A custom hook that implements intersection observer functionality to detect when an element enters the viewport. Takes a ref as parameter and returns boolean indicating intersection state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useIntersectionObserver(ref) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const div = ref.current;\n    const observer = new IntersectionObserver(entries => {\n      const entry = entries[0];\n      setIsIntersecting(entry.isIntersecting);\n    }, {\n       threshold: 1.0\n    });\n    observer.observe(div);\n    return () => {\n      observer.disconnect();\n    }\n  }, [ref]);\n\n  return isIntersecting;\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Square Component in React\nDESCRIPTION: The Square component is simplified to accept a value prop from the parent Board. State management is removed from the component as it's now handled by the parent.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square({value}) {\n  return <button className=\"square\">{value}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Tab Container with Action Props - React JavaScript\nDESCRIPTION: This sample shows a TabContainer React component, managing active tab state and rendering multiple TabButton child components, each configured with an action prop that updates the current tab state. Requires React useState, TabButton, and specific tab panel components as dependencies. The component conditionally renders tab contents based on the selected tab, passing contextual callbacks to each TabButton. Inputs are none; outputs are a composed set of tab buttons and conditional tab content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport TabButton from './TabButton.js';\nimport AboutTab from './AboutTab.js';\nimport PostsTab from './PostsTab.js';\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n  const [tab, setTab] = useState('about');\n  return (\n    <>\n      <TabButton\n        isActive={tab === 'about'}\n        action={() => setTab('about')}\n      >\n        About\n      </TabButton>\n      <TabButton\n        isActive={tab === 'posts'}\n        action={() => setTab('posts')}\n      >\n        Posts (slow)\n      </TabButton>\n      <TabButton\n        isActive={tab === 'contact'}\n        action={() => setTab('contact')}\n      >\n        Contact\n      </TabButton>\n      <hr />\n      {tab === 'about' && <AboutTab />}\n      {tab === 'posts' && <PostsTab />}\n      {tab === 'contact' && <ContactTab />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Error Types in React Server-Side Rendering\nDESCRIPTION: This code demonstrates how to handle different types of errors during server-side rendering by using custom Error subclasses and determining the appropriate status code based on the error type.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet didError = false;\nlet caughtError = null;\n\nfunction getStatusCode() {\n  if (didError) {\n    if (caughtError instanceof NotFoundError) {\n      return 404;\n    } else {\n      return 500;\n    }\n  } else {\n    return 200;\n  }\n}\n\nconst { pipe } = renderToPipeableStream(<App />, {\n  bootstrapScripts: ['/main.js'],\n  onShellReady() {\n    response.statusCode = getStatusCode();\n    response.setHeader('content-type', 'text/html');\n    pipe(response);\n  },\n  onShellError(error) {\n   response.statusCode = getStatusCode();\n   response.setHeader('content-type', 'text/html');\n   response.send('<h1>Something went wrong</h1>'); \n  },\n  onError(error) {\n    didError = true;\n    caughtError = error;\n    console.error(error);\n    logServerCrashReport(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Travel Plan with Deeply Nested State in React\nDESCRIPTION: This snippet demonstrates a React component that renders a nested travel plan using a deeply nested state structure. It uses recursive rendering to display the hierarchical structure of places.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { initialTravelPlan } from './places.js';\n\nfunction PlaceTree({ place }) {\n  const childPlaces = place.childPlaces;\n  return (\n    <li>\n      {place.title}\n      {childPlaces.length > 0 && (\n        <ol>\n          {childPlaces.map(place => (\n            <PlaceTree key={place.id} place={place} />\n          ))}\n        </ol>\n      )}\n    </li>\n  );\n}\n\nexport default function TravelPlan() {\n  const [plan, setPlan] = useState(initialTravelPlan);\n  const planets = plan.childPlaces;\n  return (\n    <>\n      <h2>Places to visit</h2>\n      <ol>\n        {planets.map(place => (\n          <PlaceTree key={place.id} place={place} />\n        ))}\n      </ol>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref in React Component\nDESCRIPTION: This code demonstrates how to create a ref using the useRef Hook, initializing it with a value of 0.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = useRef(0);\n```\n\n----------------------------------------\n\nTITLE: Using React Suspense with Server Components\nDESCRIPTION: Shows how to implement loading states with React Suspense when fetching data with Server Components, allowing you to specify fallback UI while data is loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/creating-a-react-app.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<TalksLoading />}>\n  <Talks confId={conf.id} />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Implementing MyInput with useImperativeHandle\nDESCRIPTION: Implementation of the MyInput component that exposes custom focus and scrollIntoView methods via useImperativeHandle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction MyInput({ ref, ...props }) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input {...props} ref={inputRef} />;\n};\n\nexport default MyInput;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for React and Non-React Content\nDESCRIPTION: Shows the HTML structure used to combine React-rendered content with non-React server markup, providing mounting points for both the main React app and portaled content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head><title>My app</title></head>\n  <body>\n    <h1>Welcome to my hybrid app</h1>\n    <div class=\"parent\">\n      <div class=\"sidebar\">\n        This is server non-React markup\n        <div id=\"sidebar-content\"></div>\n      </div>\n      <div id=\"root\"></div>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting react act environment globally in JavaScript\nDESCRIPTION: This configuration snippet sets a global environment variable `IS_REACT_ACT_ENVIRONMENT` to true, ensuring that act is used correctly within a testing framework. This setup is necessary to avoid environment-related warnings when using act.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/act.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nglobal.IS_REACT_ACT_ENVIRONMENT=true\n```\n\n----------------------------------------\n\nTITLE: Running types-react-codemod for React 19 Migration\nDESCRIPTION: Commands to run the types-react-codemod tool for migrating TypeScript code to React 19. It includes the main preset and an additional codemod for handling unsound access to element.props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx types-react-codemod@latest preset-19 ./path-to-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx types-react-codemod@latest react-element-default-any-props ./path-to-your-react-ts-files\n```\n\n----------------------------------------\n\nTITLE: Building an InspirationGenerator Component with State Management\nDESCRIPTION: A component that manages state for cycling through inspirational quotes. It uses useState hook to track the current quote index and includes a button to navigate to the next quote.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport quotes from './quotes';\nimport FancyText from './FancyText';\n\nexport default function InspirationGenerator({children}) {\n  const [index, setIndex] = React.useState(0);\n  const quote = quotes[index];\n  const next = () => setIndex((index + 1) % quotes.length);\n\n  return (\n    <>\n      <p>Your inspirational quote is:</p>\n      <FancyText text={quote} />\n      <button onClick={next}>Inspire me again</button>\n      {children}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMemo to Cache Calculation for Memoized Child Component\nDESCRIPTION: This optimized `TodoList` component wraps the `filterTodos` call in `useMemo`. The hook caches the result (`visibleTodos`). As long as the dependencies (`todos`, `tab`) remain the same between renders, `useMemo` returns the *same cached array reference*. This stable reference allows the child `List` component (wrapped in `React.memo`) to correctly compare props and skip re-rendering when only unrelated state like `theme` changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js {2-3,5,9-10}\nexport default function TodoList({ todos, tab, theme }) {\n  // Tell React to cache your calculation between re-renders...\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, tab),\n    [todos, tab] // ...so as long as these dependencies don't change...\n  );\n  return (\n    <div className={theme}>\n      {/* ...List will receive the same props and can skip re-rendering */}\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating a Memoized Component Using React Context\nDESCRIPTION: This example demonstrates how a memoized component still re-renders when a context it consumes changes, even though it doesn't re-render when its props remain the same. The component uses useContext to access a theme value and renders differently based on it.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext, memo, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('dark');\n\n  function handleClick() {\n    setTheme(theme === 'dark' ? 'light' : 'dark'); \n  }\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <button onClick={handleClick}>\n        Switch theme\n      </button>\n      <Greeting name=\"Taylor\" />\n    </ThemeContext.Provider>\n  );\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n  const theme = useContext(ThemeContext);\n  return (\n    <h3 className={theme}>Hello, {name}!</h3>\n  );\n});\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  margin-bottom: 16px;\n}\n\n.light {\n  color: black;\n  background-color: white;\n}\n\n.dark {\n  color: white;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Variables in JSX Attributes with Curly Braces\nDESCRIPTION: Example showing how to use JavaScript variables within JSX by replacing quotes with curly braces. This allows for dynamic values in the src and alt attributes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Synchronization Processes with useEffect\nDESCRIPTION: Example of separating unrelated logic into different Effects. Shows how to properly organize logging visits and chat connection as independent processes that depend on roomId.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n  }, [roomId]);\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    // ...\n  }, [roomId]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDebugValue Syntax\nDESCRIPTION: The basic syntax for the useDebugValue Hook, showing its function signature with optional format parameter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDebugValue.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseDebugValue(value, format?)\n```\n\n----------------------------------------\n\nTITLE: Creating Theme and Auth Contexts in React\nDESCRIPTION: Shows how to create multiple contexts for different purposes, such as theme and authentication. Each context is created with its own default value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createContext.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\nconst AuthContext = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Down Events with onMouseDown in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointing device button (like a mouse button) is pressed down on an element. It expects a `MouseEvent` handler function and corresponds to the browser's `mousedown` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseDown\n```\n\n----------------------------------------\n\nTITLE: Basic useActionState Usage in React\nDESCRIPTION: Demonstrates the basic syntax and implementation of the useActionState Hook, which returns state, a form action, and a pending indicator for handling form submissions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, formAction, isPending] = useActionState(fn, initialState, permalink?);\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Element with createElement in React\nDESCRIPTION: Example of using createElement to create an h1 HTML element with a className prop and a text child node. This demonstrates basic element creation without JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createElement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing State Mutations in React Component\nDESCRIPTION: An example of a form component with incorrect state update implementations. The code demonstrates three common bugs: directly mutating state without using setState, not properly spreading object properties when updating state, and how these issues affect component rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [player, setPlayer] = useState({\n    firstName: 'Ranjani',\n    lastName: 'Shettar',\n    score: 10,\n  });\n\n  function handlePlusClick() {\n    player.score++;\n  }\n\n  function handleFirstNameChange(e) {\n    setPlayer({\n      ...player,\n      firstName: e.target.value,\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPlayer({\n      lastName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Score: <b>{player.score}</b>\n        {' '}\n        <button onClick={handlePlusClick}>\n          +1\n        </button>\n      </label>\n      <label>\n        First name:\n        <input\n          value={player.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={player.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; margin-bottom: 10px; }\ninput { margin-left: 5px; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Refactored Profile Component with Individual Props\nDESCRIPTION: First solution approach using a Profile component with individual props for each piece of data. Demonstrates proper component extraction and prop passing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile({\n  imageId,\n  name,\n  profession,\n  awards,\n  discovery,\n  imageSize = 70\n}) {\n  return (\n    <section className=\"profile\">\n      <h2>{name}</h2>\n      <img\n        className=\"avatar\"\n        src={getImageUrl(imageId)}\n        alt={name}\n        width={imageSize}\n        height={imageSize}\n      />\n      <ul>\n        <li><b>Profession:</b> {profession}</li>\n        <li>\n          <b>Awards: {awards.length} </b>\n          ({awards.join(', ')})\n        </li>\n        <li>\n          <b>Discovered: </b>\n          {discovery}\n        </li>\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Page Visits with useEffect in React\nDESCRIPTION: This snippet shows a basic implementation of logging page visits using the useEffect hook. It demonstrates the initial approach without any props or state dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page() {\n  useEffect(() => {\n    logVisit();\n  }, []);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with useEffect in React\nDESCRIPTION: This snippet demonstrates a basic implementation of data fetching using useEffect in a React component. It fetches search results based on a query and page number, but does not handle race conditions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    // 🔴 Avoid: Fetching without cleanup logic\n    fetchResults(query, page).then(json => {\n      setResults(json);\n    });\n  }, [query, page]);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Server Implementation with prerenderToNodeStream\nDESCRIPTION: Complete example of server-side implementation using prerenderToNodeStream with routing handler\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerenderToNodeStream } from 'react-dom/static';\n\n// The route handler syntax depends on your backend framework\napp.use('/', async (request, response) => {\n  const { prelude } = await prerenderToNodeStream(<App />, {\n    bootstrapScripts: ['/main.js'],\n  });\n\n  response.setHeader('Content-Type', 'text/plain');\n  prelude.pipe(response);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events in React\nDESCRIPTION: This snippet demonstrates various mouse event handlers in React, including onClick, onMouseEnter, onMouseOver, onMouseDown, onMouseUp, and onMouseLeave. Each event is logged to the console when triggered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onClick={e => console.log('onClick')}\n  onMouseEnter={e => console.log('onMouseEnter')}\n  onMouseOver={e => console.log('onMouseOver')}\n  onMouseDown={e => console.log('onMouseDown')}\n  onMouseUp={e => console.log('onMouseUp')}\n  onMouseLeave={e => console.log('onMouseLeave')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Custom Rendering in React\nDESCRIPTION: This snippet illustrates the use of render props in React to customize the rendering of components. It shows how to pass functions as props to control the rendering of headers and content in a tab switcher.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabSwitcher from './TabSwitcher.js';\n\nexport default function App() {\n  return (\n    <TabSwitcher\n      tabIds={['first', 'second', 'third']}\n      getHeader={tabId => {\n        return tabId[0].toUpperCase() + tabId.slice(1);\n      }}\n      renderContent={tabId => {\n        return <p>This is the {tabId} item.</p>;\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TabSwitcher({ tabIds, getHeader, renderContent }) {\n  const [selectedId, setSelectedId] = useState(tabIds[0]);\n  return (\n    <>\n      {tabIds.map((tabId) => (\n        <button\n          key={tabId}\n          onClick={() => setSelectedId(tabId)}\n        >\n          {getHeader(tabId)}\n        </button>\n      ))}\n      <hr />\n      <div key={selectedId}>\n        <h3>{getHeader(selectedId)}</h3>\n        {renderContent(selectedId)}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asset Paths in React with Props\nDESCRIPTION: A code snippet showing a React component `App` that utilizes an `assetMap` prop to dynamically include hashed asset URLs like CSS and JS, ensuring accurate resource references in server-side rendered HTML.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function App({ assetMap }) {\n  return (\n    <html>\n      <head>\n        <title>My app</title>\n        <link rel=\"stylesheet\" href={assetMap['styles.css']}></link>\n      </head>\n      ...\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Ref Value in React\nDESCRIPTION: This example shows a button component that increments a ref value on each click without triggering a re-render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Complete Content Loading for Crawlers\nDESCRIPTION: Technique for optimizing server-side rendering for web crawlers by waiting for all content to load before returning the response. This ensures crawlers see the complete page rather than progressive rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  try {\n    let didError = false;\n    const stream = await renderToReadableStream(<App />, {\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        didError = true;\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    let isCrawler = // ... depends on your bot detection strategy ...\n    if (isCrawler) {\n      await stream.allReady;\n    }\n    return new Response(stream, {\n      status: didError ? 500 : 200,\n      headers: { 'content-type': 'text/html' },\n    });\n  } catch (error) {\n    return new Response('<h1>Something went wrong</h1>', {\n      status: 500,\n      headers: { 'content-type': 'text/html' },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Importing Shared Cached Function (Precipitation)\nDESCRIPTION: Shows how the `Precipitation` component also imports the same shared cached function (`getWeekReport`) from the dedicated module (`./getWeekReport.js`), enabling cache sharing with the `Temperature` component for the same `cityData`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[3, 2, \"getWeekReport\", 0], [3, 5, \"getWeekReport\"]]\n// Precipitation.js\nimport getWeekReport from './getWeekReport';\n\nexport default function Precipitation({cityData}) {\n  const report = getWeekReport(cityData);\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Correcting `root.render` Usage with `hydrateRoot` Options\nDESCRIPTION: This JavaScript snippet highlights a common mistake when using `hydrateRoot` and `root.render`. It shows the incorrect approach of passing root options (like `onUncaughtError`) as a second argument to `root.render`, which only accepts the component as its single argument. The correct method is to pass the options directly to `hydrateRoot` during initialization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚩 Wrong: root.render only takes one argument.\nroot.render(App, {onUncaughtError});\n\n// ✅ Correct: pass options to createRoot.\nconst root = hydrateRoot(container, <App />, {onUncaughtError});\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode for a Portion of the React App (JavaScript)\nDESCRIPTION: This snippet shows how to selectively enable Strict Mode in only a part of a React application by wrapping a subtree of components (such as <Sidebar /> and <Content />) with <StrictMode> in the JSX returned by the App functional component. Dependencies include React and all referenced components (Header, Sidebar, Content, Footer). It demonstrates granular StrictMode enforcement, leaving some parts of the tree (Header, Footer) unaffected. No special parameters are required; expected output is improved warning coverage for components inside the <StrictMode> subtree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { StrictMode } from 'react';\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Header />\\n      <StrictMode>\\n        <main>\\n          <Sidebar />\\n          <Content />\\n        </main>\\n      </StrictMode>\\n      <Footer />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Panel Components with CSS\nDESCRIPTION: CSS styles for the Panel components in the Accordion example, providing basic styling for headings, paragraphs and panel containers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nh3, p { margin: 5px 0px; }\n.panel {\n  padding: 10px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Leave Events with onMouseLeave in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointer moves out of the boundaries of an element. It expects a `MouseEvent` handler function. This event does not bubble and does not have a capture phase; propagation occurs between the element being left and the one being entered (`onMouseEnter`).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseLeave\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple Inline Script in React/JSX\nDESCRIPTION: Demonstrates rendering a basic inline JavaScript alert using the `<script>` component within a React context (JSX). This is a minimal example showing the syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/script.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<script> alert(\"hi!\") </script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods in React Class Component\nDESCRIPTION: Shows implementation of component lifecycle methods (componentDidMount, componentDidUpdate, componentWillUnmount) in a ChatRoom component that manages chat connections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default class ChatRoom extends Component {\n  state = {\n    serverUrl: 'https://localhost:1234'\n  };\n\n  componentDidMount() {\n    this.setupConnection();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.roomId !== prevProps.roomId ||\n      this.state.serverUrl !== prevState.serverUrl\n    ) {\n      this.destroyConnection();\n      this.setupConnection();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyConnection();\n  }\n\n  setupConnection() {\n    this.connection = createConnection(\n      this.state.serverUrl,\n      this.props.roomId\n    );\n    this.connection.connect();    \n  }\n\n  destroyConnection() {\n    this.connection.disconnect();\n    this.connection = null;\n  }\n\n  render() {\n    return (\n      <>\n        <label>\n          Server URL:{' '}\n          <input\n            value={this.state.serverUrl}\n            onChange={e => {\n              this.setState({\n                serverUrl: e.target.value\n              });\n            }}\n          />\n        </label>\n        <h1>Welcome to the {this.props.roomId} room!</h1>\n      </>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Button Implementation\nDESCRIPTION: Shows how a Client Component receives and handles a Server Function reference.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nexport default function Button({onClick}) { \n  console.log(onClick); \n  // {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNoteAction'}\n  return <button onClick={() => onClick()}>Create Empty Note</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Bug Example in React\nDESCRIPTION: Example of incorrect implementation of a controlled input without an onChange handler\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<input value={something} />\n```\n\n----------------------------------------\n\nTITLE: Common ARIA Prop Validation Examples\nDESCRIPTION: Examples of common ARIA property usage issues in React, including misspelled attributes and incorrect property names that trigger warnings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-aria-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect - will trigger warning\n<div aria-labeledby=\"label\" /> // Misspelled\n<div aria-activedescendent=\"\" /> // Misspelled\n<div aria-role=\"button\" /> // Incorrect property\n\n// Correct usage\n<div aria-labelledby=\"label\" />\n<div aria-activedescendant=\"\" />\n<div role=\"button\" />\n```\n\n----------------------------------------\n\nTITLE: Dependency Array Issue with isMuted State\nDESCRIPTION: This snippet demonstrates adding isMuted to the dependency array of the effect, which correctly satisfies the rules of hooks but causes the chat connection to reset whenever isMuted changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n      if (!isMuted) {\n        playSound();\n      }\n    });\n    return () => connection.disconnect();\n  }, [roomId, isMuted]); // ✅ All dependencies declared\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Reused Mock Chat Connection with Event Listener (JavaScript)\nDESCRIPTION: Reiterates the mock chat connection utility, here for use with the experimental effect event example. Allows event callback registration for a single 'connected' event, controlled connection and disconnection. Used in combination with React components to simulate asynchronous chat connection establishment with lifecycle cleanup. Designed for demonstration code, not production use.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  let connectedCallback;\n  let timeout;\n  return {\n    connect() {\n      timeout = setTimeout(() => {\n        if (connectedCallback) {\n          connectedCallback();\n        }\n      }, 100);\n    },\n    on(event, callback) {\n      if (connectedCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'connected') {\n        throw Error('Only \"connected\" event is supported.');\n      }\n      connectedCallback = callback;\n    },\n    disconnect() {\n      clearTimeout(timeout);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Animation Loop with useAnimationLoop Hook\nDESCRIPTION: A more modular animation handling approach using the custom hooks useFadeIn and useAnimationLoop, separating concerns of animating frames specifically and managing the animation loop. Dependencies include React's useState, useEffect, and a useEffectEvent function for frame drawing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useFadeIn(ref, 1000);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useFadeIn(ref, duration) {\n  const [isRunning, setIsRunning] = useState(true);\n\n  useAnimationLoop(isRunning, (timePassed) => {\n    const progress = Math.min(timePassed / duration, 1);\n    ref.current.style.opacity = progress;\n    if (progress === 1) {\n      setIsRunning(false);\n    }\n  });\n}\n\nfunction useAnimationLoop(isRunning, drawFrame) {\n  const onFrame = useEffectEvent(drawFrame);\n\n  useEffect(() => {\n    if (!isRunning) {\n      return;\n    }\n\n    const startTime = performance.now();\n    let frameId = null;\n\n    function tick(now) {\n      const timePassed = now - startTime;\n      onFrame(timePassed);\n      frameId = requestAnimationFrame(tick);\n    }\n\n    tick();\n    return () => cancelAnimationFrame(frameId);\n  }, [isRunning]);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Debounced Button: Timer ID Per Component with useRef in React - JavaScript\nDESCRIPTION: Fixes debouncing flaw by using a ref to store the timeoutId per component instance, isolating timers for each button. Requires 'useRef' from React. Each button can independently manage its own debounced handler. Input: button presses; output: alert appears after a delay, regardless of other buttons. Avoids cross-component interference.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction DebouncedButton({ onClick, children }) {\n  const timeoutRef = useRef(null);\n  return (\n    <button onClick={() => {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => {\n        onClick();\n      }, 1000);\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Dashboard() {\n  return (\n    <>\n      <DebouncedButton\n        onClick={() => alert('Spaceship launched!')}\n      >\n        Launch the spaceship\n      </DebouncedButton>\n      <DebouncedButton\n        onClick={() => alert('Soup boiled!')}\n      >\n        Boil the soup\n      </DebouncedButton>\n      <DebouncedButton\n        onClick={() => alert('Lullaby sung!')}\n      >\n        Sing a lullaby\n      </DebouncedButton>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Tic-Tac-Toe Board with React Components in JavaScript\nDESCRIPTION: This React.js code snippet defines a Tic-Tac-Toe board using functional components. The Board component manages the state of the 9-square array and updates this state when a square is clicked, causing a re-render and updating the display. It utilizes the useState hook for state management and implements immutability by creating a new array on state changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Board() {\n  // ...\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    nextSquares[i] = 'X';\n    setSquares(nextSquares);\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Mail Client with ID-Based Highlighting\nDESCRIPTION: The solution fixes the highlighting issue by tracking letter IDs instead of object references. This prevents the highlighting from disappearing after state updates create new letter objects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { initialLetters } from './data.js';\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n  const [letters, setLetters] = useState(initialLetters);\n  const [highlightedId, setHighlightedId ] = useState(null);\n\n  function handleHover(letterId) {\n    setHighlightedId(letterId);\n  }\n\n  function handleStar(starredId) {\n    setLetters(letters.map(letter => {\n      if (letter.id === starredId) {\n        return {\n          ...letter,\n          isStarred: !letter.isStarred\n        };\n      } else {\n        return letter;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h2>Inbox</h2>\n      <ul>\n        {letters.map(letter => (\n          <Letter\n            key={letter.id}\n            letter={letter}\n            isHighlighted={\n              letter.id === highlightedId\n            }\n            onHover={handleHover}\n            onToggleStar={handleStar}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Gallery Component Implementation\nDESCRIPTION: Original React component showing a Gallery with duplicate profile sections for scientists. Contains hardcoded values and repetitive markup that needs refactoring.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getImageUrl } from './utils.js';\n\nexport default function Gallery() {\n  return (\n    <div>\n      <h1>Notable Scientists</h1>\n      <section className=\"profile\">\n        <h2>Maria Skłodowska-Curie</h2>\n        <img\n          className=\"avatar\"\n          src={getImageUrl('szV5sdG')}\n          alt=\"Maria Skłodowska-Curie\"\n          width={70}\n          height={70}\n        />\n        <ul>\n          <li>\n            <b>Profession: </b> \n            physicist and chemist\n          </li>\n          <li>\n            <b>Awards: 4 </b> \n            (Nobel Prize in Physics, Nobel Prize in Chemistry, Davy Medal, Matteucci Medal)\n          </li>\n          <li>\n            <b>Discovered: </b>\n            polonium (chemical element)\n          </li>\n        </ul>\n      </section>\n      <section className=\"profile\">\n        <h2>Katsuko Saruhashi</h2>\n        <img\n          className=\"avatar\"\n          src={getImageUrl('YfeOqp2')}\n          alt=\"Katsuko Saruhashi\"\n          width={70}\n          height={70}\n        />\n        <ul>\n          <li>\n            <b>Profession: </b> \n            geochemist\n          </li>\n          <li>\n            <b>Awards: 2 </b> \n            (Miyake Prize for geochemistry, Tanaka Prize)\n          </li>\n          <li>\n            <b>Discovered: </b>\n            a method for measuring carbon dioxide in seawater\n          </li>\n        </ul>\n      </section>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unmounting a React Root\nDESCRIPTION: This snippet demonstrates how to unmount a React root using the unmount method. It is useful for situations where the DOM node or its ancestors might be removed from the DOM by other scripts, ensuring proper cleanup of React-managed resources.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Initial React Chat Implementation with Bug\nDESCRIPTION: Original implementation showing a chat room component that incorrectly reconnects when theme changes due to object dependency in useEffect\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n  const [isDark, setIsDark] = useState(false);\n  const [roomId, setRoomId] = useState('general');\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  const options = {\n    serverUrl: serverUrl,\n    roomId: roomId\n  };\n\n  return (\n    <div className={isDark ? 'dark' : 'light'}>\n      <button onClick={() => setIsDark(!isDark)}>\n        Toggle theme\n      </button>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom options={options} />\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Element IDs with useId Hook\nDESCRIPTION: This JavaScript snippet outlines how to generate a shared prefix for related elements in a form. The useId Hook initializes a base ID which is then concatenated with specific suffixes for various form fields, ensuring that each element's ID remains unique yet related.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useId.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useId } from 'react';\n\nexport default function Form() {\n  const id = useId();\n  return (\n    <form>\n      <label htmlFor={id + '-firstName'}>First Name:</label>\n      <input id={id + '-firstName'} type=\"text\" />\n      <hr />\n      <label htmlFor={id + '-lastName'}>Last Name:</label>\n      <input id={id + '-lastName'} type=\"text\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Dependencies in Page Visit Logging Effect\nDESCRIPTION: This snippet shows an attempt to include both URL and number of cart items in the logging Effect. It demonstrates the problem of unwanted reactivity with the numberOfItems dependency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ url }) {\n  const { items } = useContext(ShoppingCartContext);\n  const numberOfItems = items.length;\n\n  useEffect(() => {\n    logVisit(url, numberOfItems);\n  }, [url]); // 🔴 React Hook useEffect has a missing dependency: 'numberOfItems'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple List in HTML\nDESCRIPTION: A basic HTML unordered list with multiple list items showing names and professions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ul>\n  <li>Creola Katherine Johnson: mathematician</li>\n  <li>Mario José Molina-Pasquel Henríquez: chemist</li>\n  <li>Mohammad Abdus Salam: physicist</li>\n  <li>Percy Lavon Julian: chemist</li>\n  <li>Subrahmanyan Chandrasekhar: astrophysicist</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Conditional Input Focusing Based on Props - React JavaScript\nDESCRIPTION: Shows a modification to conditionally focus an input only when a given shouldFocus prop is true. The focus logic is encapsulated within a useEffect hook and the prop is included in the dependencies array to handle prop value changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ shouldFocus, value, onChange }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (shouldFocus) {\n      ref.current.focus();\n    }\n  }, [shouldFocus]);\n\n  return (\n    <input\n      ref={ref}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gallery Component with Multiple Images in JSX\nDESCRIPTION: This snippet shows a more complex React component that renders a gallery of images. It demonstrates component composition and the use of multiple instances of a child component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Fetching with Waterfalls\nDESCRIPTION: Example demonstrating inefficient client-side data fetching pattern with component waterfalls.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Note({id}) {\n  const [note, setNote] = useState('');\n  useEffect(() => {\n    fetch(`/api/notes/${id}`).then(data => {\n      setNote(data.note);\n    });\n  }, [id]);\n  \n  return (\n    <div>\n      <Author id={note.authorId} />\n      <p>{note}</p>\n    </div>\n  );\n}\n\nfunction Author({id}) {\n  const [author, setAuthor] = useState('');\n  useEffect(() => {\n    fetch(`/api/authors/${id}`).then(data => {\n      setAuthor(data.author);\n    });\n  }, [id]);\n\n  return <span>By: {author.name}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component for State Visualization in React\nDESCRIPTION: A Form component that receives a status prop and renders different UI elements accordingly. Used in conjunction with the component catalog to demonstrate all possible visual states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Form({ status }) {\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n  return (\n    <form>\n      <textarea disabled={\n        status === 'submitting'\n      } />\n      <br />\n      <button disabled={\n        status === 'empty' ||\n        status === 'submitting'\n      }>\n        Submit\n      </button>\n      {status === 'error' &&\n        <p className=\"Error\">\n          Good guess but a wrong answer. Try again!\n        </p>\n      }\n    </form>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nsection { border-bottom: 1px solid #aaa; padding: 20px; }\nh4 { color: #222; }\nbody { margin: 0; }\n.Error { color: red; }\n```\n\n----------------------------------------\n\nTITLE: Adding currentMove state variable in React Game component\nDESCRIPTION: Implementation of a new state variable 'currentMove' in the Game component to track which step the user is currently viewing. The default value is set to 0, indicating the beginning of the game.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[history.length - 1];\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement with useMemo\nDESCRIPTION: Example showing how to measure performance with useMemo implementation\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time('filter array');\nconst visibleTodos = useMemo(() => {\n  return filterTodos(todos, tab); // Skipped if todos and tab haven't changed\n}, [todos, tab]);\nconsole.timeEnd('filter array');\n```\n\n----------------------------------------\n\nTITLE: Importing and Using memo with a Function Component\nDESCRIPTION: Demonstrates how to import the memo function from React and use it to create a memoized version of a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Card Component with Title Prop in React\nDESCRIPTION: This snippet shows an improved version of the Card component that accepts both a title prop and children. It demonstrates how to combine fixed props with flexible content using the children prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Card({ children, title }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <h1>{title}</h1>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <div>\n      <Card title=\"Photo\">\n        <img\n          className=\"avatar\"\n          src=\"https://i.imgur.com/OKS67lhm.jpg\"\n          alt=\"Aklilu Lemma\"\n          width={100}\n          height={100}\n        />\n      </Card>\n      <Card title=\"About\">\n        <p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>\n      </Card>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Constants from State in React\nDESCRIPTION: A pattern for creating readable constants derived from state values without introducing additional state variables. This enables semantic code while preventing state synchronization issues.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst isSending = status === 'sending';\nconst isSent = status === 'sent';\n```\n\n----------------------------------------\n\nTITLE: Using useCallback for Function Memoization in React\nDESCRIPTION: A more concise approach using useCallback instead of useMemo to memoize functions. This is functionally equivalent to the useMemo approach but avoids the need for nested functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page({ productId, referrer }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails\n    });\n  }, [productId, referrer]);\n\n  return <Form onSubmit={handleSubmit} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading a Responsive Image in React\nDESCRIPTION: Example of preloading an image with responsive options, using imageSrcSet and imageSizes to specify different image sizes for different screen sizes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"/banner.png\", {\n    as: \"image\",\n    imageSrcSet: \"/banner512.png 512w, /banner1024.png 1024w\",\n    imageSizes: \"(max-width: 512px) 512px, 1024px\",\n  });\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Letter Component with ID-Based Event Handlers\nDESCRIPTION: Updated Letter component that passes IDs instead of object references to event handlers. This prevents issues with object identity changes after state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Letter({\n  letter,\n  isHighlighted,\n  onHover,\n  onToggleStar,\n}) {\n  return (\n    <li\n      className={\n        isHighlighted ? 'highlighted' : ''\n      }\n      onFocus={() => {\n        onHover(letter.id);        \n      }}\n      onPointerMove={() => {\n        onHover(letter.id);\n      }}\n    >\n      <button onClick={() => {\n        onToggleStar(letter.id);\n      }}>\n        {letter.isStarred ? 'Unstar' : 'Star'}\n      </button>\n      {letter.subject}\n    </li>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with hydrateRoot\nDESCRIPTION: Example showing how to hydrate server-rendered HTML on the client side using hydrateRoot from react-dom/client to make the page interactive after loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n```\n\n----------------------------------------\n\nTITLE: Inefficient State Update Using Effects in React\nDESCRIPTION: This code snippet demonstrates an anti-pattern to avoid: using an Effect to update derived state. The Effect is unnecessary as the fullName can be calculated directly during rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [fullName, setFullName] = useState('');\n  useEffect(() => {\n    setFullName(firstName + ' ' + lastName);\n  }, [firstName, lastName]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Code Splitting with Router in React\nDESCRIPTION: This example demonstrates using a router's lazy loading feature to implement code splitting efficiently, downloading route components in parallel rather than waiting for render time.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Home from './Home';\nimport Dashboard from './Dashboard';\n\n// ✅ Routes are downloaded before rendering\nconst router = createBrowserRouter([\n  {path: '/', lazy: () => import('./Home')},\n  {path: '/dashboard', lazy: () => import('Dashboard')}\n]);\n```\n\n----------------------------------------\n\nTITLE: Notifying Parent Components with useEffect (Anti-pattern)\nDESCRIPTION: Shows an incorrect implementation of notifying parent components about state changes using useEffect, which can lead to unnecessary render passes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Toggle({ onChange }) {\n  const [isOn, setIsOn] = useState(false);\n\n  // 🔴 Avoid: The onChange handler runs too late\n  useEffect(() => {\n    onChange(isOn);\n  }, [isOn, onChange])\n\n  function handleClick() {\n    setIsOn(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      setIsOn(true);\n    } else {\n      setIsOn(false);\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tab Switcher with Array of Objects in React\nDESCRIPTION: This example shows how to create a tab switcher component that accepts an array of tab objects. It demonstrates state management for selected tabs and rendering of tab content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabSwitcher from './TabSwitcher.js';\n\nexport default function App() {\n  return (\n    <TabSwitcher tabs={[\n      {\n        id: 'first',\n        header: 'First',\n        content: <p>This is the first item.</p>\n      },\n      {\n        id: 'second',\n        header: 'Second',\n        content: <p>This is the second item.</p>\n      },\n      {\n        id: 'third',\n        header: 'Third',\n        content: <p>This is the third item.</p>\n      }\n    ]} />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TabSwitcher({ tabs }) {\n  const [selectedId, setSelectedId] = useState(tabs[0].id);\n  const selectedTab = tabs.find(tab => tab.id === selectedId);\n  return (\n    <>\n      {tabs.map(tab => (\n        <button\n          key={tab.id}\n          onClick={() => setSelectedId(tab.id)}\n        >\n          {tab.header}\n        </button>\n      ))}\n      <hr />\n      <div key={selectedId}>\n        <h3>{selectedTab.header}</h3>\n        {selectedTab.content}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Filtered Todos to a Child List Component (React)\nDESCRIPTION: This snippet shows a modification to the `TodoList` component where the calculated `visibleTodos` array is passed as the `items` prop to a child component named `List`. This sets the stage for demonstrating how changes in parent state can trigger re-renders in child components, even if the data relevant to the child hasn't changed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js {5}\nexport default function TodoList({ todos, tab, theme }) {\n  // ...\n  return (\n    <div className={theme}>\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Solution with Default Exports - Gallery Component\nDESCRIPTION: The Gallery component updated to import Profile from its new location using default export syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Toggle with Imperative DOM Manipulation in JavaScript\nDESCRIPTION: A JavaScript implementation that manipulates the DOM imperatively to toggle between edit and view modes of a profile form, showing and hiding appropriate elements based on the current mode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n  if (editButton.textContent === 'Edit Profile') {\n    editButton.textContent = 'Save Profile';\n    hide(firstNameText);\n    hide(lastNameText);\n    show(firstNameInput);\n    show(lastNameInput);\n  } else {\n    editButton.textContent = 'Edit Profile';\n    hide(firstNameInput);\n    hide(lastNameInput);\n    show(firstNameText);\n    show(lastNameText);\n  }\n}\n\nfunction handleFirstNameChange() {\n  firstNameText.textContent = firstNameInput.value;\n  helloText.textContent = (\n    'Hello ' +\n    firstNameInput.value + ' ' +\n    lastNameInput.value + '!'\n  );\n}\n\nfunction handleLastNameChange() {\n  lastNameText.textContent = lastNameInput.value;\n  helloText.textContent = (\n    'Hello ' +\n    firstNameInput.value + ' ' +\n    lastNameInput.value + '!'\n  );\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nlet form = document.getElementById('form');\nlet editButton = document.getElementById('editButton');\nlet firstNameInput = document.getElementById('firstNameInput');\nlet firstNameText = document.getElementById('firstNameText');\nlet lastNameInput = document.getElementById('lastNameInput');\nlet lastNameText = document.getElementById('lastNameText');\nlet helloText = document.getElementById('helloText');\nform.onsubmit = handleFormSubmit;\nfirstNameInput.oninput = handleFirstNameChange;\nlastNameInput.oninput = handleLastNameChange;\n```\n\n----------------------------------------\n\nTITLE: Importing useState Hook in React\nDESCRIPTION: Basic import statement for the useState hook from React library.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n```\n\n----------------------------------------\n\nTITLE: React Root with StrictMode for Double Rendering - ReactJS (JavaScript)\nDESCRIPTION: This shows a typical React app entry point wrapped in `<StrictMode>`, which triggers double rendering in development to help catch bugs in impure components. It requires React v16.3 or above, and both 'react', 'react-dom/client' packages. The entry hooks up the application to a root DOM element and renders the `App` component inside StrictMode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Image Component in JSX\nDESCRIPTION: This code defines a simple React functional component that renders an image. It demonstrates the basic structure of a React component using JSX syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Unwanted Fallbacks Using startTransition in React\nDESCRIPTION: This code example shows how to use the startTransition API to prevent a Suspense boundary from showing a fallback when updating content that's already visible to the user. This creates a smoother user experience during data loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleNextPageClick() {\n  // If this update suspends, don't hide the already displayed content\n  startTransition(() => {\n    setCurrentPage(currentPage + 1);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in React 19\nDESCRIPTION: Example showing how to implement custom error handling with createRoot in React 19.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = createRoot(container, {\n  onUncaughtError: (error, errorInfo) => {\n    // ... log error report\n  },\n  onCaughtError: (error, errorInfo) => {\n    // ... log error report\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Opting out of automatic batching with flushSync in React 18\nDESCRIPTION: Example showing how to use flushSync to opt out of automatic batching in React 18, which forces React to update the DOM immediately after the enclosed update.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { flushSync } from 'react-dom';\n\nfunction handleClick() {\n  flushSync(() => {\n    setCounter(c => c + 1);\n  });\n  // React has updated the DOM by now\n  flushSync(() => {\n    setFlag(f => !f);\n  });\n  // React has updated the DOM by now\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Events in React\nDESCRIPTION: This snippet demonstrates how to use touch event handlers in React, including onTouchStart, onTouchMove, onTouchEnd, and onTouchCancel. Each event is logged to the console when triggered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onTouchStart={e => console.log('onTouchStart')}\n  onTouchMove={e => console.log('onTouchMove')}\n  onTouchEnd={e => console.log('onTouchEnd')}\n  onTouchCancel={e => console.log('onTouchCancel')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components to Static HTML using prerender\nDESCRIPTION: Demonstrates how to use the prerender function from react-dom/static to generate static HTML from React components. The code shows how to set up bootstrapScripts and read the output stream.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerender } from 'react-dom/static';\n\nasync function renderToString() {\n  const {prelude} = await prerender(<App />, {\n    bootstrapScripts: ['/main.js']\n  });\n  \n  const reader = prelude.getReader();\n  let content = '';\n  while (true) {\n    const {done, value} = await reader.read();\n    if (done) {\n      return content;\n    }\n    content += Buffer.from(value).toString('utf8');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Server Components Example App\nDESCRIPTION: Complete example showing how 'use client' affects component rendering in a React Server Components app, including module dependencies and component hierarchy.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport FancyText from './FancyText';\nimport InspirationGenerator from './InspirationGenerator';\nimport Copyright from './Copyright';\n\nexport default function App() {\n  return (\n    <>\n      <FancyText title text=\"Get Inspired App\" />\n      <InspirationGenerator>\n        <Copyright year={2004} />\n      </InspirationGenerator>\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport { useState } from 'react';\nimport inspirations from './inspirations';\nimport FancyText from './FancyText';\n\nexport default function InspirationGenerator({children}) {\n  const [index, setIndex] = useState(0);\n  const quote = inspirations[index];\n  const next = () => setIndex((index + 1) % inspirations.length);\n\n  return (\n    <>\n      <p>Your inspirational quote is:</p>\n      <FancyText text={quote} />\n      <button onClick={next}>Inspire me again</button>\n      {children}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Search Results with React 'use' Hook (SearchResults.js)\nDESCRIPTION: This component receives a `query` prop and fetches corresponding album data using a custom `fetchData` function via the experimental `use` hook. It displays the results as a list or shows a 'No matches' message. If the query is empty, it renders nothing. The `use(fetchData(...))` call will trigger the nearest Suspense boundary if the data is not yet available.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function SearchResults({ query }) {\n  if (query === '') {\n    return null;\n  }\n  const albums = use(fetchData(`/search?q=${query}`));\n  if (albums.length === 0) {\n    return <p>No matches for <i>\"{query}\"</i></p>;\n  }\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of React Application Using createElement\nDESCRIPTION: A complete React application built entirely with createElement, showing how to create both custom components and HTML elements with various props and nested children.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createElement.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello ',\n    createElement('i', null, name),\n    '. Welcome!'\n  );\n}\n\nexport default function App() {\n  return createElement(\n    Greeting,\n    { name: 'Taylor' }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Arguments Mutation\nDESCRIPTION: Demonstrates proper handling of hook arguments with immutability patterns.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useIconStyle(icon) {\n  const theme = useContext(ThemeContext);\n  if (icon.enabled) {\n    icon.className = computeStyle(icon, theme); // 🔴 Bad: never mutate hook arguments directly\n  }\n  return icon;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useIconStyle(icon) {\n  const theme = useContext(ThemeContext);\n  const newIcon = { ...icon }; // ✅ Good: make a copy instead\n  if (icon.enabled) {\n    newIcon.className = computeStyle(icon, theme);\n  }\n  return newIcon;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw HTML with dangerouslySetInnerHTML in React\nDESCRIPTION: Demonstrates how to use dangerouslySetInnerHTML to render raw HTML in React components. It includes a warning about potential security risks and shows a safer implementation using a Markdown parser.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nconst markup = { __html: '<p>some raw html</p>' };\nreturn <div dangerouslySetInnerHTML={markup} />;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport MarkdownPreview from './MarkdownPreview.js';\n\nexport default function MarkdownEditor() {\n  const [postContent, setPostContent] = useState('_Hello,_ **Markdown**!');\n  return (\n    <>\n      <label>\n        Enter some markdown:\n        <textarea\n          value={postContent}\n          onChange={e => setPostContent(e.target.value)}\n        />\n      </label>\n      <hr />\n      <MarkdownPreview markdown={postContent} />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nfunction renderMarkdownToHTML(markdown) {\n  // This is ONLY safe because the output HTML\n  // is shown to the same user, and because you\n  // trust this Markdown parser to not have bugs.\n  const renderedHTML = md.render(markdown);\n  return {__html: renderedHTML};\n}\n\nexport default function MarkdownPreview({ markdown }) {\n  const markup = renderMarkdownToHTML(markdown);\n  return <div dangerouslySetInnerHTML={markup} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffectEvent to Avoid Reactive Dependencies\nDESCRIPTION: Example of using the experimental useEffectEvent Hook to read the latest props and state without causing the Effect to re-run when those values change. This pattern is useful for logging that depends only on specific props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ url, shoppingCart }) {\n  const onVisit = useEffectEvent(visitedUrl => {\n    logVisit(visitedUrl, shoppingCart.length)\n  });\n\n  useEffect(() => {\n    onVisit(url);\n  }, [url]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calling hydrateRoot with Target DOM Node – React DOM Client – JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the core usage of hydrateRoot from react-dom/client to attach React components to an existing DOM node whose HTML was generated by React on the server. It takes a target DOM node (usually by id) and the root React node/component, and optionally accepts configuration options for error handling and hydration-specific behaviors. Dependencies: react-dom/client package. Inputs: domNode (DOM element), reactNode (React element). Returns: a root object with render and unmount methods. Intended for bootstrapping the client-side of a server-rendered React app.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst root = hydrateRoot(domNode, reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: Alternative Optimization Using React.memo\nDESCRIPTION: Demonstrates an alternative approach to avoid unnecessary renders by using React.memo to memoize the entire component instead of just the callback function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ReportList({ items }) {\n  // ...\n}\n\nconst Report = memo(function Report({ item }) {\n  function handleClick() {\n    sendReport(item);\n  }\n\n  return (\n    <figure>\n      <Chart onClick={handleClick} />\n    </figure>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Form with Theme Dependency\nDESCRIPTION: Demonstrates how adding theme as a dependency can cause unwanted notifications when theme changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [submitted, setSubmitted] = useState(false);\n  const theme = useContext(ThemeContext);\n\n  useEffect(() => {\n    if (submitted) {\n      // 🔴 Avoid: Event-specific logic inside an Effect\n      post('/api/register');\n      showNotification('Successfully registered!', theme);\n    }\n  }, [submitted, theme]);\n```\n\n----------------------------------------\n\nTITLE: Basic useMemo Hook Usage\nDESCRIPTION: Basic syntax example showing how to use the useMemo Hook in React\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cachedValue = useMemo(calculateValue, dependencies)\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission with useTransition in React 19\nDESCRIPTION: Example demonstrating form submission using the new useTransition hook in React 19 for handling pending states automatically.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UpdateName({}) {\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isPending, startTransition] = useTransition();\n\n  const handleSubmit = () => {\n    startTransition(async () => {\n      const error = await updateName(name);\n      if (error) {\n        setError(error);\n        return;\n      } \n      redirect(\"/path\");\n    })\n  };\n\n  return (\n    <div>\n      <input value={name} onChange={(event) => setName(event.target.value)} />\n      <button onClick={handleSubmit} disabled={isPending}>\n        Update\n      </button>\n      {error && <p>{error}</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating State Based on Previous State within React useEffect (Initial Problematic Approach)\nDESCRIPTION: This `ChatRoom` component uses `useEffect` to set up a connection and listen for messages. When a message is received, it updates the `messages` state by creating a new array containing the previous messages and the new one (`[...messages, receivedMessage]`). This approach requires reading the `messages` state variable inside the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js {2,6-8}\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages([...messages, receivedMessage]);\n    });\n    // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Fallback Context Value - React JavaScript\nDESCRIPTION: Sets up a ThemeContext with a fallback value ('light'), so components outside a provider default to it. MyApp toggles theme between 'dark' and 'light' and passes it to a provider. All children use the context to assign classNames for dynamic styling. Requires React and local context creation. Inputs: user clicks for toggling; Outputs: themed components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext('light');\\n\\nexport default function MyApp() {\\n  const [theme, setTheme] = useState('light');\\n  return (\\n    <>\\n      <ThemeContext.Provider value={theme}>\\n        <Form />\\n      </ThemeContext.Provider>\\n      <Button onClick={() => {\\n        setTheme(theme === 'dark' ? 'light' : 'dark');\\n      }}>\\n        Toggle theme\\n      </Button>\\n    </>\\n  )\\n}\\n\\nfunction Form({ children }) {\\n  return (\\n    <Panel title=\"Welcome\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n    </Panel>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children, onClick }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className} onClick={onClick}>\\n      {children}\\n    </button>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler Dependencies with NPM\nDESCRIPTION: Command to install React Compiler and ESLint plugin using NPM package manager\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D babel-plugin-react-compiler@rc eslint-plugin-react-hooks@^6.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Hydrating the Entire Document with hydrateRoot – React DOM Client – JavaScript\nDESCRIPTION: This snippet demonstrates hydrating the global document object as the root for a React App component, used when the entire document markup is under React's control. hydrateRoot is called with document and the imported App, supplying full-document hydration across browsers that support it. Dependencies: react-dom/client, App component. Inputs: document, React component. Used in advanced SSR hydration cases.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic useEffect with Connection\nDESCRIPTION: A simple implementation of useEffect that creates a connection but doesn't properly clean it up, which could lead to memory leaks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic React Counter with Multiple State Updates\nDESCRIPTION: Demonstrates how React batches multiple state updates in an event handler. Shows that calling setNumber three times with a direct value doesn't increment three times due to closure and batching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n```\n\n----------------------------------------\n\nTITLE: Explicit Return for Objects in useMemo in React\nDESCRIPTION: The recommended approach for returning objects from useMemo calculations with an explicit return statement, which is clearer and less prone to errors than the parentheses approach.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n  // ✅ This works and is explicit\n  const searchOptions = useMemo(() => {\n    return {\n      matchMode: 'whole-word',\n      text: text\n    };\n  }, [text]);\n```\n\n----------------------------------------\n\nTITLE: Using Data Library for Simplified Data Fetching\nDESCRIPTION: Shows a simplified approach to data fetching using a dedicated data fetching library that handles caching and request deduplication.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList() {\n  const todos = useSomeDataLibrary(`/api/user/${userId}/todos`);\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with Asset Mapping\nDESCRIPTION: Demonstrates client-side hydration with `hydrateRoot` using an `assetMap` for correct resource references, ensuring no hydration errors by passing consistent props between server and client rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App assetMap={window.assetMap} />);\n```\n\n----------------------------------------\n\nTITLE: Fixing Cache Miss by Sharing Object References\nDESCRIPTION: This example demonstrates another approach to fix cache misses by ensuring the same object reference is passed to multiple component instances. By creating the object once in the parent component and passing it down as a prop, cache hits are guaranteed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cache} from 'react';\n\nconst calculateNorm = cache((vector) => {\n  // ...\n});\n\nfunction MapMarker(props) {\n  // ✅ Good: Pass the same `vector` object\n  const length = calculateNorm(props.vector);\n  // ...\n}\n\nfunction App() {\n  const vector = [10, 10, 10];\n  return (\n    <>\n      <MapMarker vector={vector} />\n      <MapMarker vector={vector} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Rendering with useInsertionEffect in JavaScript\nDESCRIPTION: Demonstrates how to modify a CSS-in-JS custom hook (`useCSS`) using `useInsertionEffect` to accommodate server-side rendering (SSR). Since `useInsertionEffect` only runs on the client, this example collects necessary CSS rules into a `Set` (`collectedRulesSet`) during server rendering by checking if `typeof window === 'undefined'`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useInsertionEffect.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nlet collectedRulesSet = new Set();\n\nfunction useCSS(rule) {\n  if (typeof window === 'undefined') {\n    collectedRulesSet.add(rule);\n  }\n  useInsertionEffect(() => {\n    // ...\n  });\n  return rule;\n}\n```\n\n----------------------------------------\n\nTITLE: Broken Chat Input: Storing Timeout IDs in React Component Local Variables - JavaScript\nDESCRIPTION: Implements a React chat input with Send and Undo functionality, but incorrectly stores the timeoutId as a regular local variable. This causes Undo to fail due to variable reinitialization on each render. Requires React, dependencies are 'useState'. Inputs are form values and clicks; output is a 'Sent!' alert. Limitations: timer cannot be reliably canceled.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  let timeoutID = null;\n\n  function handleSend() {\n    setIsSending(true);\n    timeoutID = setTimeout(() => {\n      alert('Sent!');\n      setIsSending(false);\n    }, 3000);\n  }\n\n  function handleUndo() {\n    setIsSending(false);\n    clearTimeout(timeoutID);\n  }\n\n  return (\n    <>\n      <input\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button\n        disabled={isSending}\n        onClick={handleSend}>\n        {isSending ? 'Sending...' : 'Send'}\n      </button>\n      {isSending &&\n        <button onClick={handleUndo}>\n          Undo\n        </button>\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using preconnect in a React Component\nDESCRIPTION: Shows how to import the preconnect function from react-dom and use it within a React component. This example demonstrates calling preconnect during component rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preconnect.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n  preconnect(\"https://example.com\");\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSS Transitions in React Components\nDESCRIPTION: Example of using the onTransitionEnd event handler in a React component to detect when a CSS transition has completed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onTransitionEnd={e => console.log('onTransitionEnd')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Composition Events in React\nDESCRIPTION: Shows how to handle input method editor (IME) composition events in React using onCompositionStart, onCompositionUpdate, and onCompositionEnd handlers. These receive a React event object with CompositionEvent properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n<input\n  onCompositionStart={e => console.log('onCompositionStart')}\n  onCompositionUpdate={e => console.log('onCompositionUpdate')}\n  onCompositionEnd={e => console.log('onCompositionEnd')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldComponentUpdate in React Class Component\nDESCRIPTION: Example showing how to implement shouldComponentUpdate lifecycle method in a Rectangle class component to optimize rendering performance by comparing current and next props/state values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass Rectangle extends Component {\n  state = {\n    isHovered: false\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.position.x === this.props.position.x &&\n      nextProps.position.y === this.props.position.y &&\n      nextProps.size.width === this.props.size.width &&\n      nextProps.size.height === this.props.size.height &&\n      nextState.isHovered === this.state.isHovered\n    ) {\n      // Nothing has changed, so a re-render is unnecessary\n      return false;\n    }\n    return true;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDeferredValue Hook Usage Syntax\nDESCRIPTION: The basic syntax for using the useDeferredValue Hook in React, which returns a deferred version of the provided value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst deferredValue = useDeferredValue(value)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Custom Error Overlay with Owner Stack\nDESCRIPTION: Shows how to intercept console.error calls and include the Owner Stack in a custom error overlay for improved debugging.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/captureOwnerStack.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureOwnerStack } from \"react\";\nimport { instrumentedConsoleError } from \"./errorOverlay\";\n\nconst originalConsoleError = console.error;\nconsole.error = function patchedConsoleError(...args) {\n  originalConsoleError.apply(console, args);\n  const ownerStack = captureOwnerStack();\n  onConsoleError({\n    // Keep in mind that in a real application, console.error can be\n    // called with multiple arguments which you should account for.\n    consoleMessage: args[0],\n    ownerStack,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of preloadModule in JavaScript\nDESCRIPTION: Demonstrates the fundamental call to `preloadModule` with a module URL and the required `as: 'script'` option. This hints the browser to start downloading the specified ESM module.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preloadModule.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\npreloadModule(\"https://example.com/module.js\", {as: \"script\"});\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Structure\nDESCRIPTION: Initial React component structure showing where HTML markup should be placed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function TodoList() {\n  return (\n    // ???\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with hydrateRoot\nDESCRIPTION: This JavaScript snippet illustrates client-side hydration using `hydrateRoot` from 'react-dom/client'. It makes the server-rendered HTML interactive by attaching event listeners, using the root component `<App />`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Hover-Triggered Tooltip State in React\nDESCRIPTION: This React component (`ButtonWithTooltip`) wraps a standard HTML button. It uses `useState` to manage the tooltip's trigger state (`targetRect`) based on the button's position and `useRef` to access the button's DOM node. On pointer enter, it calculates the button's bounding rectangle (`getBoundingClientRect`) and updates the state to trigger the tooltip display; on pointer leave, it hides the tooltip by setting the state back to `null`. It passes the calculated position (`targetRect`) and tooltip content to the nested `Tooltip` component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n  const [targetRect, setTargetRect] = useState(null);\n  const buttonRef = useRef(null);\n  return (\n    <>\n      <button\n        {...rest}\n        ref={buttonRef}\n        onPointerEnter={() => {\n          const rect = buttonRef.current.getBoundingClientRect();\n          setTargetRect({\n            left: rect.left,\n            top: rect.top,\n            right: rect.right,\n            bottom: rect.bottom,\n          });\n        }}\n        onPointerLeave={() => {\n          setTargetRect(null);\n        }}\n      />\n      {targetRect !== null && (\n        <Tooltip targetRect={targetRect}>\n          {tooltipContent}\n        </Tooltip>\n      )\n    }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Fragments to Variables and Passing as Props in React (JavaScript)\nDESCRIPTION: This code shows assigning JSX grouped with a Fragment to a variable and passing it as a prop to another component, demonstrating Fragments' interoperability as first-class elements. Use this pattern to organize and reuse groups of elements. React is required; AlertDialog, OKButton, and CancelButton are expected to be defined elsewhere.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nfunction CloseDialog() {\n  const buttons = (\n    <>\n      <OKButton />\n      <CancelButton />\n    </>\n  );\n  return (\n    <AlertDialog buttons={buttons}>\n      Are you sure you want to leave this page?\n    </AlertDialog>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Enter Events with onMouseEnter in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointer moves into the boundaries of an element. It expects a `MouseEvent` handler function. This event does not bubble and does not have a capture phase; propagation occurs between the element being left (`onMouseLeave`) and the one being entered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseEnter\n```\n\n----------------------------------------\n\nTITLE: Buggy Score Increment Example in React - JavaScript\nDESCRIPTION: Shows a React counter component with a bug: multiple sequential setState calls referencing the previous state result in only a single increment. Uses useState and event handlers. Input: button clicks. Output: Score updates in the UI. Highlights why setScore(score + 1) does not create cumulative updates in the same event cycle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [score, setScore] = useState(0);\n\n  function increment() {\n    setScore(score + 1);\n  }\n\n  return (\n    <>\n      <button onClick={() => increment()}>+1</button>\n      <button onClick={() => {\n        increment();\n        increment();\n        increment();\n      }}>+3</button>\n      <h1>Score: {score}</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Square Component in React\nDESCRIPTION: Defines a Square component that renders a button with a value prop. This is the initial step in creating the tic-tac-toe game board.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square() {\n  return <button className=\"square\">1</button>;\n}\n\nexport default function Board() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential State Update Logging in React - JavaScript\nDESCRIPTION: Logs sequential setScore calls and their effects on the state value within the same synchronous code block. Demonstrates that each setScore call still sees the old state due to state batching in React. Only React is required. Input: initial score value. Output: Repeated console logs showing score remains the same before re-render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0\n```\n\n----------------------------------------\n\nTITLE: Preloading a Stylesheet in React\nDESCRIPTION: Example of using the preload function to eagerly fetch a CSS stylesheet when rendering a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/style.css\", {as: \"style\"});\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense with Client-Only Components in React\nDESCRIPTION: This snippet demonstrates how to use Suspense to wrap components that should only render on the client side. It shows how to throw an error during server rendering to prevent server-side execution while providing a fallback UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <Chat />\n</Suspense>\n\nfunction Chat() {\n  if (typeof window === 'undefined') {\n    throw Error('Chat should only render on the client.');\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic use client Declaration in React\nDESCRIPTION: Demonstrates basic usage of 'use client' directive to mark a React component and its dependencies for client-side execution.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport { useState } from 'react';\nimport { formatDate } from './formatters';\nimport Button from './button';\n\nexport default function RichTextEditor({ timestamp, text }) {\n  const date = formatDate(timestamp);\n  // ...\n  const editButton = <Button />;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Suspense Implementation\nDESCRIPTION: Demonstrates the basic structure of nested Suspense components with fallback elements for progressive content loading.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<BigSpinner />}>\n  <Biography />\n  <Suspense fallback={<AlbumsGlimmer />}>\n    <Panel>\n      <Albums />\n    </Panel>\n  </Suspense>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating React 18 Strict Mode Component Lifecycle\nDESCRIPTION: This code snippet shows the component lifecycle events in React 18's Strict Mode, illustrating how React now simulates unmounting and remounting components to help identify effects that assume they're only mounted or destroyed once.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n* React mounts the component.\n    * Layout effects are created.\n    * Effect effects are created.\n```\n\n----------------------------------------\n\nTITLE: Replacing Module Pattern Factories with Regular Functions in React\nDESCRIPTION: This example shows how to convert a component using the deprecated module pattern factory to a regular function component. The factory pattern is removed in favor of a simpler function that directly returns JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nfunction FactoryComponent() {\n  return { render() { return <div />; } }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\nfunction FactoryComponent() {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Page Content with React in JavaScript\nDESCRIPTION: Example showing how to replace the entire content of a page with a React component using createRoot. This is for demonstration purposes and not recommended for actual integration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Textarea in React\nDESCRIPTION: The simplest way to render a textarea component in React, using the built-in browser component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<textarea />\n```\n\n----------------------------------------\n\nTITLE: Displaying Inputs with React\nDESCRIPTION: Demonstrates rendering different types of inputs using React components, such as text inputs, checkboxes, and radio buttons. No external dependencies required as it utilizes basic React components. The example showcases methods to render inputs using JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function MyForm() {\n  return (\n    <>\n      <label>\n        Text input: <input name=\"myInput\" />\n      </label>\n      <hr />\n      <label>\n        Checkbox: <input type=\"checkbox\" name=\"myCheckbox\" />\n      </label>\n      <hr />\n      <p>\n        Radio buttons:\n        <label>\n          <input type=\"radio\" name=\"myRadio\" value=\"option1\" />\n          Option 1\n        </label>\n        <label>\n          <input type=\"radio\" name=\"myRadio\" value=\"option2\" />\n          Option 2\n        </label>\n        <label>\n          <input type=\"radio\" name=\"myRadio\" value=\"option3\" />\n          Option 3\n        </label>\n      </p>\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Tainting Environment Variables in React Server Components\nDESCRIPTION: Example demonstrating how to prevent environment variables from being passed to client components by tainting the process.env object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintObjectReference.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {experimental_taintObjectReference} from 'react';\n\nexperimental_taintObjectReference(\n  'Do not pass ALL environment variables to the client.',\n  process.env\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Game Status in Tic-Tac-Toe Board\nDESCRIPTION: Adds logic to display the current game status, showing either which player's turn is next or declaring a winner.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Board() {\n  // ...\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected JSX with Proper Object Property Reference\nDESCRIPTION: Fixed version of the previous example, correctly accessing the name property of the person object instead of trying to render the entire object in JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { padding: 0; margin: 0 }\nbody > div > div { padding: 20px; }\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Updating a Nested Object in React State Using Spread Syntax (JavaScript)\nDESCRIPTION: This code demonstrates the recommended immutable update of a deeply nested property in a React state object. By copying the nested artwork object and updating the city property, then copying the parent person object, state is replaced safely. This approach avoids mutating existing state. Inputs are previous person/artwork state, outputs are new objects with the updated city property. Prerequisites: React environment.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst nextArtwork = { ...person.artwork, city: 'New Delhi' };\nconst nextPerson = { ...person, artwork: nextArtwork };\nsetPerson(nextPerson);\n```\n\n----------------------------------------\n\nTITLE: Chat Server Connection Logic - JavaScript\nDESCRIPTION: This snippet provides the logic for connecting and disconnecting to a chat server. It is used within the ChatRoom component examples to simulate server interactions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced JSX Conditional Rendering\nDESCRIPTION: Demonstrates using conditional rendering with more complex JSX elements including the del tag.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  let itemContent = name;\n  if (isPacked) {\n    itemContent = (\n      <del>\n        {name + \" ✅\"}\n      </del>\n    );\n  }\n  return (\n    <li className=\"item\">\n      {itemContent}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing a Cached Function to a Child Component\nDESCRIPTION: Example showing how to pass a function wrapped with useCallback to a child component to optimize rendering performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductPage({ productId, referrer, theme }) {\n  // ...\n  return (\n    <div className={theme}>\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Triggering Animations with Cleanup\nDESCRIPTION: Managing animations in useEffect with proper cleanup by resetting the animation to its initial state when the component unmounts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const node = ref.current;\n  node.style.opacity = 1; // Trigger the animation\n  return () => {\n    node.style.opacity = 0; // Reset to the initial value\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Providing Asset Map to Prerender and Injecting Bootstrap Script - React with JavaScript\nDESCRIPTION: Illustrates setting up an asset map and passing it to the prerendered component and prerender options. It injects the correct hashed asset URLs for styles and scripts, reads the asset map from tooling output, and ensures both server and client use the same mapping. This prevents hydration errors and supports cache-busting via hashed filenames.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// You'd need to get this JSON from your build tooling, e.g. read it from the build output.\nconst assetMap = {\n  'styles.css': '/styles.123456.css',\n  'main.js': '/main.123456.js'\n};\n\nasync function handler(request) {\n  const {prelude} = await prerender(<App assetMap={assetMap} />, {\n    bootstrapScripts: [assetMap['/main.js']]\n  });\n  return new Response(prelude, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FancyText Component with Conditional Rendering in React\nDESCRIPTION: A component that renders text with different styling based on whether it's a title or not. It applies different CSS classes conditionally to create styled headings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function FancyText({title, text}) {\n  return title\n    ? <h1 className='fancy title'>{text}</h1>\n    : <h3 className='fancy cursive'>{text}</h3>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring renderToPipeableStream with Error Handling in React\nDESCRIPTION: This code configures renderToPipeableStream with callbacks for shell readiness, shell errors, and general errors, demonstrating how to handle different scenarios during server-side rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { pipe } = renderToPipeableStream(<App />, {\n  bootstrapScripts: ['/main.js'],\n  onShellReady() {\n    response.setHeader('content-type', 'text/html');\n    pipe(response);\n  },\n  onShellError(error) {\n    response.statusCode = 500;\n    response.setHeader('content-type', 'text/html');\n    response.send('<h1>Something went wrong</h1>'); \n  },\n  onError(error) {\n    console.error(error);\n    logServerCrashReport(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading State Without Reactivity in useEffect (Problem Example)\nDESCRIPTION: An example showing how directly reading the isMuted state in an effect causes unnecessary reconnections when the mute state changes, as isMuted must be included in the dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n      if (!isMuted) {\n        playSound();\n      }\n    });\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Reactive State Management with useEffect - JavaScript\nDESCRIPTION: This snippet demonstrates the management of state in a React component by adding `serverUrl` as a dependency to useEffect. The state variable, serverUrl, which can change over time, necessitates its inclusion in dependencies to ensure the Effect re-synchronizes correctly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ChatRoom({ roomId }) { // Props change over time\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Your Effect reads props and state\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, serverUrl]); // So you tell React that this Effect \"depends on\" on props and state\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning and Accessing Ref Values in React - JavaScript\nDESCRIPTION: Demonstrates immediate mutation and reading of a ref's current property in React, highlighting that refs behave as regular JavaScript objects, and mutations are synchronous. No dependencies are required. Input is direct assignment and output is console logging the same value. Avoids reading/writing during render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nref.current = 5;\nconsole.log(ref.current); // 5\n```\n\n----------------------------------------\n\nTITLE: Server and Client Component Composition\nDESCRIPTION: Example showing how to compose Server Components with interactive Client Components using the use client directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Server Component\nimport Expandable from './Expandable';\n\nasync function Notes() {\n  const notes = await db.notes.getAll();\n  return (\n    <div>\n      {notes.map(note => (\n        <Expandable key={note.id}>\n          <p note={note} />\n        </Expandable>\n      ))}\n    </div>\n  )\n}\n\n// Client Component\n\"use client\"\n\nexport default function Expandable({children}) {\n  const [expanded, setExpanded] = useState(false);\n  return (\n    <div>\n      <button\n        onClick={() => setExpanded(!expanded)}\n      >\n        Toggle\n      </button>\n      {expanded && children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Image URL Utility Function\nDESCRIPTION: Helper function that generates image URLs based on an image ID and optional size parameter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getImageUrl(imageId, size = 's') {\n  return (\n    'https://i.imgur.com/' +\n    imageId +\n    size +\n    '.jpg'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Dependency Changes in useCallback\nDESCRIPTION: Shows how to debug useCallback dependency issues by logging dependencies to the console and using browser developer tools to inspect changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n  const handleSubmit = useCallback((orderDetails) => {\n    // ..\n  }, [productId, referrer]);\n\n  console.log([productId, referrer]);\n```\n\n----------------------------------------\n\nTITLE: Custom Form Input Hook Implementation\nDESCRIPTION: Implementation of a custom Hook for managing form input state and handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport function useFormInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  const inputProps = {\n    value: value,\n    onChange: handleChange\n  };\n\n  return inputProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Asynchronously Updating State in onChange Handler - JavaScript\nDESCRIPTION: This snippet highlights a bug where the setFirstName state update is done asynchronously, causing controlled input issues such as caret jumping. State updates for controlled components should happen synchronously during the onChange event. Dependencies are React and a state variable firstName.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleChange(e) {\n  // 🔴 Bug: updating an input asynchronously\n  setTimeout(() => {\n    setFirstName(e.target.value);\n  }, 100);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Linter Suppression\nDESCRIPTION: This example shows an incorrect practice of suppressing the dependency linter. This can lead to bugs as it misleads React about the effect's dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n  // ...\n  // 🔴 Avoid suppressing the linter like this:\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Server Error Handling with renderToReadableStream\nDESCRIPTION: Shows how to implement error logging and handling when streaming React content on the server.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  const stream = await renderToReadableStream(<App />, {\n    bootstrapScripts: ['/main.js'],\n    onError(error) {\n      console.error(error);\n      logServerCrashReport(error);\n    }\n  });\n  return new Response(stream, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies for React Chat Example (JSON)\nDESCRIPTION: Specifies expected npm dependencies and scripts for running the React chat app. Dependencies include react, react-dom, react-scripts, and toastify-js, necessary for building, starting, and testing the React application. The scripts section allows easy local development and testing via npm. To use, include this in the project's root as package.json.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"toastify-js\": \"1.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected JSX Version of Bio Component\nDESCRIPTION: The fixed version of the Bio component with proper JSX syntax, including correct class attribute (className), self-closing tags, and proper nesting of elements within a single parent div.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Bio() {\n  return (\n    <div>\n      <div className=\"intro\">\n        <h1>Welcome to my website!</h1>\n      </div>\n      <p className=\"summary\">\n        You can find my thoughts here.\n        <br /><br />\n        <b>And <i>pictures</i></b> of scientists!\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Task Addition Component in React\nDESCRIPTION: Component for adding new tasks with controlled input form handling using useState hook.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input\n        placeholder=\"Add task\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={() => {\n        setText('');\n        onAddTask(text);\n      }}>Add</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Solution Using memo HOC - React Component\nDESCRIPTION: Alternative approach using React.memo instead of useMemo to prevent unnecessary re-renders of list items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ReportList({ items }) {\n  // ...\n}\n\nconst Report = memo(function Report({ item }) {\n  const data = calculateReport(item);\n  return (\n    <figure>\n      <Chart data={data} />\n    </figure>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: React Form with Pending State using useFormStatus Hook\nDESCRIPTION: Illustrates a form in React using a `useFormStatus` Hook to provide feedback on submission. Specifically, the component reflects a transition between submitting and not submitting states of a form, showing 'Submitting...' during the process.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormStatus } from \\\"react-dom\\\";\\nimport { submitForm } from \\\"./actions.js\\\";\\n\\nfunction Submit() {\\n  const { pending } = useFormStatus();\\n  return (\\n    <button type=\\\"submit\\\" disabled={pending}>\\n      {pending ? \\\"Submitting...\\\" : \\\"Submit\\\"}\\n    </button>\\n  );\\n}\\n\\nfunction Form({ action }) {\\n  return (\\n    <form action={action}>\\n      <Submit />\\n    </form>\\n  );\\n}\\n\\nexport default function App() {\\n  return <Form action={submitForm} />;\\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function submitForm(query) {\\n    await new Promise((res) => setTimeout(res, 1000));\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Metadata Tags Natively in React Component (JavaScript)\nDESCRIPTION: Demonstrates React 19's native support for rendering document metadata tags (`<title>`, `<meta>`, `<link>`) directly within any component. React automatically hoists these tags to the document's `<head>`, simplifying metadata management for client-only apps, streaming SSR, and Server Components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js {5-8}\nfunction BlogPost({post}) {\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <title>{post.title}</title>\n      <meta name=\"author\" content=\"Josh\" />\n      <link rel=\"author\" href=\"https://twitter.com/joshcstory/\" />\n      <meta name=\"keywords\" content={post.keywords} />\n      <p>\n        Eee equals em-see-squared...\n      </p>\n    </article>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Structured Information After Form Submission\nDESCRIPTION: Example showing how to return and display structured information (objects) from a server action, with conditional rendering based on success status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActionState, useState } from \"react\";\nimport { addToCart } from \"./actions.js\";\n\nfunction AddToCartForm({itemID, itemTitle}) {\n  const [formState, formAction] = useActionState(addToCart, {});\n  return (\n    <form action={formAction}>\n      <h2>{itemTitle}</h2>\n      <input type=\"hidden\" name=\"itemID\" value={itemID} />\n      <button type=\"submit\">Add to Cart</button>\n      {formState?.success &&\n        <div className=\"toast\">\n          Added to cart! Your cart now has {formState.cartSize} items.\n        </div>\n      }\n      {formState?.success === false &&\n        <div className=\"error\">\n          Failed to add to cart: {formState.message}\n        </div>\n      }\n    </form>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <AddToCartForm itemID=\"1\" itemTitle=\"JavaScript: The Definitive Guide\" />\n      <AddToCartForm itemID=\"2\" itemTitle=\"JavaScript: The Good Parts\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Primitive Values from Objects in React Effect\nDESCRIPTION: This snippet demonstrates how to extract primitive values from an object prop to use as dependencies in a useEffect hook, avoiding unnecessary re-connections when the parent component re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ options }) {\n  const [message, setMessage] = useState('');\n\n  const { roomId, serverUrl } = options;\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component with useActionState Hook\nDESCRIPTION: Implementation of a client component that uses useActionState to handle server function responses.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport { useActionState } from 'react';\nimport requestUsername from './requestUsername';\n\nfunction UsernameForm() {\n  const [state, action] = useActionState(requestUsername, null, 'n/a');\n\n  return (\n    <>\n      <form action={action}>\n        <input type=\"text\" name=\"username\" />\n        <button type=\"submit\">Request</button>\n      </form>\n      <p>Last submission request returned: {state}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of a useCounter Hook - React JavaScript\nDESCRIPTION: This snippet implements a custom useCounter Hook, which provides a counter value that automatically increments every second. It uses the useState and useEffect Hooks from React: useState holds the counter state, and useEffect sets up a setInterval timer and ensures cleanup with clearInterval. The delay is hardcoded at 1000ms and is not configurable. Outputs the current count as a number, and no parameters or special configuration is required. Dependencies are useState and useEffect from React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useCounter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing an Impure Clock Component in React\nDESCRIPTION: Example of an impure React clock component that directly manipulates the DOM. The component tries to set a CSS class based on the time of day but uses imperative DOM manipulation instead of the proper declarative approach.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Clock({ time }) {\n  let hours = time.getHours();\n  if (hours >= 0 && hours <= 6) {\n    document.getElementById('time').className = 'night';\n  } else {\n    document.getElementById('time').className = 'day';\n  }\n  return (\n    <h1 id=\"time\">\n      {time.toLocaleTimeString()}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generalizing Click Handler to Work with Any Square\nDESCRIPTION: Updates the handleClick function to accept an index parameter, allowing it to update any square in the board. This makes the function reusable for all squares.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    nextSquares[i] = \"X\";\n    setSquares(nextSquares);\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding keys to list items in React Game component\nDESCRIPTION: Implementation of adding a key prop to list items in a React component to resolve React's key warning. The move index is used as a key since moves have a sequential order and won't be reordered, deleted, or inserted in the middle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst moves = history.map((squares, move) => {\n  //...\n  return (\n    <li key={move}>\n      <button onClick={() => jumpTo(move)}>{description}</button>\n    </li>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Fade-In Animation with React and JavaScript\nDESCRIPTION: This React functional component utilizes the requestAnimationFrame API to create a manual fade-in animation effect. It manages the animation state using the useEffect hook and updates the opacity of the DOM element directly. Dependencies include React's useState, useEffect, and useRef hooks. Required parameters include a reference to the DOM node and the duration for the animation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const duration = 1000;\n    const node = ref.current;\n\n    let startTime = performance.now();\n    let frameId = null;\n\n    function onFrame(now) {\n      const timePassed = now - startTime;\n      const progress = Math.min(timePassed / duration, 1);\n      onProgress(progress);\n      if (progress < 1) {\n        // We still have more frames to paint\n        frameId = requestAnimationFrame(onFrame);\n      }\n    }\n\n    function onProgress(progress) {\n      node.style.opacity = progress;\n    }\n\n    function start() {\n      onProgress(0);\n      startTime = performance.now();\n      frameId = requestAnimationFrame(onFrame);\n    }\n\n    function stop() {\n      cancelAnimationFrame(frameId);\n      startTime = null;\n      frameId = null;\n    }\n\n    start();\n    return () => stop();\n  }, []);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Client-Specific Content Post-Hydration in React\nDESCRIPTION: This React component demonstrates a two-pass rendering technique to show different content on the client than what was rendered on the server. It uses `useState` to track if the component is running on the client (`isClient`) and `useEffect` to set this state to `true` after the initial render. The component initially renders 'Is Server' (matching the server) and then re-renders with 'Is Client' after hydration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return (\n    <h1>\n      {isClient ? 'Is Client' : 'Is Server'}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Alert Button with Props\nDESCRIPTION: Example of a button component that uses props to customize the alert message shown on click.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <AlertButton message=\"Playing!\">\n        Play Movie\n      </AlertButton>\n      <AlertButton message=\"Uploading!\">\n        Upload Image\n      </AlertButton>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-right: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Broken Debounced Button: Timer ID Shared Across React Components - JavaScript\nDESCRIPTION: Defines a debounced button component where a handler timer is stored in a module-scoped variable, causing all button instances to share the same debounce timer. Leads to interference between buttons. No React hooks are used. Inputs are button presses; only the most recent button press triggers its action after a delay. Limitation: multiple debounced buttons cannot work independently.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nlet timeoutID;\n\nfunction DebouncedButton({ onClick, children }) {\n  return (\n    <button onClick={() => {\n      clearTimeout(timeoutID);\n      timeoutID = setTimeout(() => {\n        onClick();\n      }, 1000);\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Dashboard() {\n  return (\n    <>\n      <DebouncedButton\n        onClick={() => alert('Spaceship launched!')}\n      >\n        Launch the spaceship\n      </DebouncedButton>\n      <DebouncedButton\n        onClick={() => alert('Soup boiled!')}\n      >\n        Boil the soup\n      </DebouncedButton>\n      <DebouncedButton\n        onClick={() => alert('Lullaby sung!')}\n      >\n        Sing a lullaby\n      </DebouncedButton>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Buttons in a React App\nDESCRIPTION: This React functional component (`App`) serves as the main entry point, demonstrating the usage of the `ButtonWithTooltip` component. It renders several buttons, each configured with different tooltip content, to showcase how the tooltip positions itself based on available space.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n  return (\n    <div>\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>\n            This tooltip does not fit above the button.\n            <br />\n            This is why it's displayed below instead!\n          </div>\n        }\n      >\n        Hover over me (tooltip above)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Labels and Inputs for Readability - CSS\nDESCRIPTION: This CSS snippet applies display and margin styles to label and input elements in a form. Labels are displayed as block elements, while inputs receive a 5-pixel margin for better spacing and readability. There are no dependencies. The selectors are 'label' and 'input', and this should be included in the relevant stylesheet to ensure consistent form appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin: 5px; }\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Chat Room Selection Component with Missing Cleanup\nDESCRIPTION: An enhanced version of the chat room implementation that allows users to select different rooms from a dropdown menu. The issue becomes more apparent as users switch between rooms without disconnecting from previous ones.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Expo App for React Native\nDESCRIPTION: Terminal command to initialize a new Expo project for building React Native applications across Android, iOS, and web platforms.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/creating-a-react-app.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Expensive Calculation Memoization Example\nDESCRIPTION: Example demonstrating how React Compiler handles memoization of expensive calculations in components\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// **Not** memoized by React Compiler, since this is not a component or hook\nfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }\n\n// Memoized by React Compiler since this is a component\nfunction TableContainer({ items }) {\n  // This function call would be memoized:\n  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useImperativeHandle in a Component\nDESCRIPTION: Example of importing the useImperativeHandle Hook and using it to customize a ref handle in a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  useImperativeHandle(ref, () => {\n    return {\n      // ... your methods ...\n    };\n  }, []);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Reading a ref value in React event handler\nDESCRIPTION: Example showing how to read an interval ID from a ref to clear it when stopping a timer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleStopClick() {\n  const intervalId = intervalRef.current;\n  clearInterval(intervalId);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting React Components\nDESCRIPTION: Shows how to split React components into separate files and import/export them. This example demonstrates file organization for larger React applications.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing useMemo Dependencies with Object.is\nDESCRIPTION: A technique for comparing dependencies from different renders using Object.is in the browser console to identify which dependency is causing unnecessary recalculations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n```\n\n----------------------------------------\n\nTITLE: Processing Children with Children.forEach\nDESCRIPTION: Shows how to iterate over children and build a new array with separators between items\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nfunction SeparatorList({ children }) {\n  const result = [];\n  Children.forEach(children, (child, index) => {\n    result.push(child);\n    result.push(<hr key={index} />);\n  });\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Optimizing Event Handler with Effect Scope and Proper Dependencies (JavaScript, Solution 2)\nDESCRIPTION: This snippet moves the event handler into the useEffect scope and lists canMove as a dependency, ensuring the event handler always receives the latest state with minimal resubscriptions. This approach is optimal, only resubscribing when canMove changes, which is the intended synchronization between UI and event listeners. Key dependencies: React hooks, especially useEffect and useState. Inputs are pointer events, with outputs moving the dot. Limitation: Re-subscribes only when canMove changes, resulting in better performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  useEffect(() => {\n    function handleMove(e) {\n      if (canMove) {\n        setPosition({ x: e.clientX, y: e.clientY });\n      }\n    }\n\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n  }, [canMove]);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)} \n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of Fragments with Keys and Supporting Components in React (JavaScript)\nDESCRIPTION: This expanded example defines the posts array and uses React's Fragment to group elements in a list, each Fragment assigned a key. The Blog component exports a default function, mapping over posts. PostTitle and PostBody receive props and render post details. import { Fragment } from 'react' is required. Outputs blog post groups without extra DOM elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nimport { Fragment } from 'react';\n\nconst posts = [\n  { id: 1, title: 'An update', body: \"It's been a while since I posted...\" },\n  { id: 2, title: 'My new blog', body: 'I am starting a new blog!' }\n];\n\nexport default function Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing FadeInAnimation Class in JavaScript\nDESCRIPTION: This class handles the fade-in animation logic using requestAnimationFrame. It controls the opacity of a DOM node over time based on the provided duration, handling animation start, frame updates, and cleanup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport class FadeInAnimation {\n  constructor(node) {\n    this.node = node;\n  }\n  start(duration) {\n    this.duration = duration;\n    if (this.duration === 0) {\n      // Jump to end immediately\n      this.onProgress(1);\n    } else {\n      this.onProgress(0);\n      // Start animating\n      this.startTime = performance.now();\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onFrame() {\n    const timePassed = performance.now() - this.startTime;\n    const progress = Math.min(timePassed / this.duration, 1);\n    this.onProgress(progress);\n    if (progress < 1) {\n      // We still have more frames to paint\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onProgress(progress) {\n    this.node.style.opacity = progress;\n  }\n  stop() {\n    cancelAnimationFrame(this.frameId);\n    this.startTime = null;\n    this.frameId = null;\n    this.duration = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining useEffect Dependencies in React - JavaScript\nDESCRIPTION: This snippet illustrates the useEffect hook with the `roomId` as a dependency, demonstrating why serverUrl isn't included. It shows how the serverUrl remains constant while `roomId` varies on re-renders due to its reactive nature as a prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refined Chat Connection Handling with useEffectEvent (JavaScript, Experimental React)\nDESCRIPTION: Showcases the use of the experimental useEffectEvent React API to decouple event-driven logic (such as notifications) from resource synchronization (server connection) effects. Ensures that theme changes do not cause unnecessary reconnections, limiting the effect's dependencies only to roomId. Integrates mock connection, UI, and notification logic. Requires the experimental React build and toastify-js for full functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      onConnected();\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'} \n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Launching React DevTools from Terminal\nDESCRIPTION: Terminal command to open the standalone React Developer Tools after installation. This launches the DevTools server that your website will connect to.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-developer-tools.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreact-devtools\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with Image URL\nDESCRIPTION: The snippet demonstrates initializing a React component with a static image URL directly within the JSX tag. Dependencies include React and JSX syntax. Key parameters include 'name', 'theme', and 'imageUrl'. The component renders a styled 'TodoList' with static content within a div styled via the 'theme' object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components to Static HTML with prerenderToNodeStream\nDESCRIPTION: Demonstrates how to use prerenderToNodeStream to render a React application to static HTML with bootstrap scripts. The code creates a Promise-based wrapper around the stream to collect the HTML output.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerenderToNodeStream } from 'react-dom/static';\n\nasync function renderToString() {\n  const {prelude} = await prerenderToNodeStream(<App />, {\n    bootstrapScripts: ['/main.js']\n  });\n  \n  return new Promise((resolve, reject) => {\n    let data = '';\n    prelude.on('data', chunk => {\n      data += chunk;\n    });\n    prelude.on('end', () => resolve(data));\n    prelude.on('error', reject);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Update Batching in React\nDESCRIPTION: Example demonstrating how multiple state updates within the same event handler are batched. Shows why consecutive setState calls with the same value don't accumulate.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n```\n\n----------------------------------------\n\nTITLE: Explicit children prop in TypeScript with React 18\nDESCRIPTION: Example showing how to explicitly define the children prop in TypeScript interfaces with React 18, which is now required in the updated type definitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyButtonProps {\n  color: string;\n  children?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Immutably Updating Nested State Using a Single setPerson Call (JavaScript)\nDESCRIPTION: This JavaScript snippet showcases updating a nested object in React state in a single operation. The spread operator is used at each level to copy objects and selectively override the city property. Inputs: current person object; outputs: new person object with updated artwork.city. Prerequisite: React useState and setPerson.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nsetPerson({\n  ...person, // Copy other fields\n  artwork: { // but replace the artwork\n    ...person.artwork, // with the same one\n    city: 'New Delhi' // but in New Delhi!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React Root and Rendering App - ReactJS (JavaScript)\nDESCRIPTION: This code initializes a React application by importing the necessary dependencies and creating the application root. It uses `createRoot` from 'react-dom/client' to attach the React tree to the DOM element with the id 'root', then renders the top-level `App` component. Required dependencies: 'react', 'react-dom/client', and presence of a 'root' DOM element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(<App />);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Item Addition Component for React Packing List\nDESCRIPTION: A React component for adding new items to the packing list. It manages its own state for the input field and calls the provided callback when a new item is added.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function AddItem({ onAddItem }) {\n  const [title, setTitle] = useState('');\n  return (\n    <>\n      <input\n        placeholder=\"Add item\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n      />\n      <button onClick={() => {\n        setTitle('');\n        onAddItem(title);\n      }}>Add</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Modal Dialog with a Portal in React\nDESCRIPTION: Shows how to use createPortal to implement a modal dialog that floats above the rest of the page, avoiding issues with container styles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport ModalContent from './ModalContent.js';\n\nexport default function PortalExample() {\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShowModal(true)}>\n        Show modal using a portal\n      </button>\n      {showModal && createPortal(\n        <ModalContent onClose={() => setShowModal(false)} />,\n        document.body\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Server Connection Utility\nDESCRIPTION: The 'createConnection' function in JavaScript serves as a mock utility to simulate connecting and disconnecting from a chat server. It does not establish real network connections but demonstrates logging actions in the console for connect and disconnect events. It accepts an object with 'serverUrl' and 'roomId' keys to configure the connection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection({ serverUrl, roomId }) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Heading Component with Context\nDESCRIPTION: Full implementation of the Heading component using context to determine heading level.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n      return <h2>{children}</h2>;\n    case 3:\n      return <h3>{children}</h3>;\n    case 4:\n      return <h4>{children}</h4>;\n    case 5:\n      return <h5>{children}</h5>;\n    case 6:\n      return <h6>{children}</h6>;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Clock Component Using Direct Props\nDESCRIPTION: Corrected implementation that directly uses the color prop instead of storing it in state, allowing the component to update properly when props change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Clock(props) {\n  return (\n    <h1 style={{ color: props.color }}>\n      {props.time}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary React State\nDESCRIPTION: Demonstrates how to refactor a component by removing unnecessary state usage. Shows that regular variables can be used instead of state when data doesn't need to persist between renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [name, setName] = useState('');\n\n  function handleClick() {\n    setName(prompt('What is your name?'));\n    alert(`Hello, ${name}!`);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Greet\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Panel Component Implementation\nDESCRIPTION: Simple wrapper component that provides styling for content panels.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Panel({ children }) {\n  return (\n    <section className=\"panel\">\n      {children}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using startTransition in React 18\nDESCRIPTION: Implementation of startTransition as a version of useTransition without pending feedback, allowing separation of urgent updates from transitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition\n```\n\n----------------------------------------\n\nTITLE: Using useSyncExternalStore Hook in React\nDESCRIPTION: Hook designed to help external store libraries integrate with React, providing better support for external state management solutions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseSyncExternalStore\n```\n\n----------------------------------------\n\nTITLE: Providing Labels for Select Boxes in React\nDESCRIPTION: Demonstrates two approaches to labeling select elements: wrapping select in a label tag and using htmlFor with ID association. Uses useId hook to generate unique IDs for proper label association.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useId } from 'react';\n\nexport default function Form() {\n  const vegetableSelectId = useId();\n  return (\n    <>\n      <label>\n        Pick a fruit:\n        <select name=\"selectedFruit\">\n          <option value=\"apple\">Apple</option>\n          <option value=\"banana\">Banana</option>\n          <option value=\"orange\">Orange</option>\n        </select>\n      </label>\n      <hr />\n      <label htmlFor={vegetableSelectId}>\n        Pick a vegetable:\n      </label>\n      <select id={vegetableSelectId} name=\"selectedVegetable\">\n        <option value=\"cucumber\">Cucumber</option>\n        <option value=\"corn\">Corn</option>\n        <option value=\"tomato\">Tomato</option>\n      </select>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nselect { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: React Request Counter Implementation\nDESCRIPTION: Implementation of a request tracking system with pending and completed states. Shows async state updates with a delay function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(pending + 1);\n    await delay(3000);\n    setPending(pending - 1);\n    setCompleted(completed + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy     \n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Toggle Using useState for Render State in React - JavaScript\nDESCRIPTION: Corrects previous toggle implementation by using useState for the button state, allowing React to re-render and update display correctly. Requires 'useState' from React. Takes button clicks to switch label between 'On' and 'Off'. Ensures UI and state are synchronized.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Toggle() {\n  const [isOn, setIsOn] = useState(false);\n\n  return (\n    <button onClick={() => {\n      setIsOn(!isOn);\n    }}>\n      {isOn ? 'On' : 'Off'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Double Click Capture Events with onDoubleClickCapture in React (JSX)\nDESCRIPTION: React prop for handling double-click events during the capture phase. This is the capture phase version of `onDoubleClick`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nonDoubleClickCapture\n```\n\n----------------------------------------\n\nTITLE: Basic Task and List Styling - CSS\nDESCRIPTION: Applies simple margins and removes default styles for task list elements and buttons. No dependencies. Ensures clean layout with consistent spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Basic Title Component in React with Example\nDESCRIPTION: Simple example of using the <title> component to set the document title in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<title>My Blog</title>\n```\n\n----------------------------------------\n\nTITLE: Typing useMemo Hook in React with TypeScript\nDESCRIPTION: Illustrates how to use the useMemo Hook with TypeScript, showing type inference and explicit typing options.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// The type of visibleTodos is inferred from the return value of filterTodos\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stopwatch with State in React\nDESCRIPTION: This code snippet demonstrates a basic stopwatch implementation using state to track start time and current time.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n\n  function handleStart() {\n    // Start counting.\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    setInterval(() => {\n      // Update the current time every 10ms.\n      setNow(Date.now());\n    }, 10);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Press Capture Events (Deprecated) with onKeyPressCapture in React (JSX)\nDESCRIPTION: Deprecated React prop for handling key press events during the capture phase. Use `onKeyDownCapture` or the capture version of `onBeforeInput` instead. This was the capture phase version of `onKeyPress`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyPressCapture\n```\n\n----------------------------------------\n\nTITLE: Controlling Stylesheet Precedence with React Components - JavaScript\nDESCRIPTION: This React code demonstrates how to render multiple <link rel=\"stylesheet\"> tags within React components, explicitly assigning a custom precedence attribute to each. Components FirstComponent, SecondComponent, and ThirdComponent each add a stylesheet link with \"first\" or \"second\" precedence values. React groups links with the same precedence in the <head> to control overriding order. The code requires a React environment and assumes the existence of ShowRenderedHTML. Inputs are components that insert <link> tags, outputs are ordered stylesheet inclusions in the <head>. Limitations: precedence ordering is determined by first discovery, and the sample uses arbitrary precedence names.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\\n\\nexport default function HomePage() {\\n  return (\\n    <ShowRenderedHTML>\\n      <FirstComponent />\\n      <SecondComponent />\\n      <ThirdComponent/>\\n      ...\\n    </ShowRenderedHTML>\\n  );\\n}\\n\\nfunction FirstComponent() {\\n  return <link rel=\\\"stylesheet\\\" href=\\\"first.css\\\" precedence=\\\"first\\\" />;\\n}\\n\\nfunction SecondComponent() {\\n  return <link rel=\\\"stylesheet\\\" href=\\\"second.css\\\" precedence=\\\"second\\\" />;\\n}\\n\\nfunction ThirdComponent() {\\n  return <link rel=\\\"stylesheet\\\" href=\\\"third.css\\\" precedence=\\\"first\\\" />;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending React PureComponent\nDESCRIPTION: This snippet demonstrates how to import `PureComponent` from the 'react' library and use it as the base class for a component (`Greeting`). This setup enables the component to benefit from the built-in shallow comparison optimization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { PureComponent } from 'react';\n\nclass Greeting extends PureComponent {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing <Suspense> with Fallback in a React Component (JavaScript)\nDESCRIPTION: Shows the `ArtistPage` component which renders artist information and utilizes the `<Suspense>` component from React. It wraps the `Albums` component, providing a `Loading` component as the `fallback` UI. This demonstrates how to integrate Suspense within a component hierarchy to handle asynchronous loading states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Suspense } from 'react';\nimport Albums from './Albums.js';\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<Loading />}>\n        <Albums artistId={artist.id} />\n      </Suspense>\n    </>\n  );\n}\n\nfunction Loading() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Components with Non-React Server Markup\nDESCRIPTION: Demonstrates how to use createPortal to render React components into specific parts of a page that includes non-React server-rendered content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPortal } from 'react-dom';\n\nconst sidebarContentEl = document.getElementById('sidebar-content');\n\nexport default function App() {\n  return (\n    <>\n      <MainContent />\n      {createPortal(\n        <SidebarContent />,\n        sidebarContentEl\n      )}\n    </>\n  );\n}\n\nfunction MainContent() {\n  return <p>This part is rendered by React</p>;\n}\n\nfunction SidebarContent() {\n  return <p>This part is also rendered by React!</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Independent Counter Components Example\nDESCRIPTION: Example showing multiple counter buttons with independent states and CSS styling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Counters that update separately</h1>\n      <MyButton />\n      <MyButton />\n    </div>\n  );\n}\n\nfunction MyButton() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Clicked {count} times\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  display: block;\n  margin-bottom: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Prop Handling Using Spread Syntax in React\nDESCRIPTION: This snippet shows the correct way to handle props using the spread syntax. It extracts the 'layout' prop and passes the rest to the div element, avoiding unknown-prop warnings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/unknown-prop.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyDiv(props) {\n  const { layout, ...rest } = props\n  if (layout === 'horizontal') {\n    return <div {...rest} style={getHorizontalStyle()} />\n  } else {\n    return <div {...rest} style={getVerticalStyle()} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Effect Cleanup Function Implementation\nDESCRIPTION: Demonstrates the cleanup function that handles stopping synchronization by disconnecting from the chat server.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    // ...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning null in React\nDESCRIPTION: A React component that demonstrates conditionally returning nothing (null) when a condition is met. If an item is packed, it won't be rendered at all in the list.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (isPacked) {\n  return null;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\n----------------------------------------\n\nTITLE: Basic memo API Syntax in React\nDESCRIPTION: Shows the basic syntax for creating memoized components with React's memo API. The function accepts a component and an optional comparison function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n```\n\n----------------------------------------\n\nTITLE: Configuration of Package Dependencies for React Todo App with Immer\nDESCRIPTION: Package.json configuration for a React application using Immer and use-immer libraries for immutable state management. Includes standard React scripts for development, building, testing, and ejecting the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using preload in a React Component\nDESCRIPTION: Example of importing the preload function from react-dom and using it within a React component to preload a font resource.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/font.woff2\", {as: \"font\"});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Data for Mail Client\nDESCRIPTION: This file provides the initial data structure for the mail client application. It exports an array of letter objects, each with an ID, subject, and starred status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialLetters = [{\n  id: 0,\n  subject: 'Ready for adventure?',\n  isStarred: true,\n}, {\n  id: 1,\n  subject: 'Time to check in!',\n  isStarred: false,\n}, {\n  id: 2,\n  subject: 'Festival Begins in Just SEVEN Days!',\n  isStarred: false,\n}];\n```\n\n----------------------------------------\n\nTITLE: Initializing React Hydration with `hydrateRoot`\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of `hydrateRoot` from `react-dom/client`. It imports the root component (`App`) and uses `hydrateRoot` to attach the React application to the server-rendered HTML element with the ID 'root'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements with Fragment Short Syntax in React (JavaScript)\nDESCRIPTION: This code snippet demonstrates using the shorthand Fragment syntax (<></>) to group multiple child components without introducing an extra DOM node. There are no external dependencies required beyond React itself. It is typically used in functional components to return more than one element as siblings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\njojs\n<>\n  <OneChild />\n  <AnotherChild />\n</>\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting React Component Example\nDESCRIPTION: Demonstrates how to properly export a React component using export default. Shows a Profile component that renders an image.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/lICfvbD.jpg\"\n      alt=\"Aklilu Lemma\"\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nimg { height: 181px; }\n```\n\n----------------------------------------\n\nTITLE: TaskList Component with Editable Task Items\nDESCRIPTION: A component that renders a list of todo items with functionality to edit, toggle completion status, and delete tasks. It uses local state for managing edit mode for each task.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TaskList({\n  todos,\n  onChangeTodo,\n  onDeleteTodo\n}) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          <Task\n            todo={todo}\n            onChange={onChangeTodo}\n            onDelete={onDeleteTodo}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n  const [isEditing, setIsEditing] = useState(false);\n  let todoContent;\n  if (isEditing) {\n    todoContent = (\n      <>\n        <input\n          value={todo.title}\n          onChange={e => {\n            onChange({\n              ...todo,\n              title: e.target.value\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    todoContent = (\n      <>\n        {todo.title}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={todo.done}\n        onChange={e => {\n          onChange({\n            ...todo,\n            done: e.target.checked\n          });\n        }}\n      />\n      {todoContent}\n      <button onClick={() => onDelete(todo.id)}>\n        Delete\n      </button>\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Form Component with Multiple Visual States in React\nDESCRIPTION: An enhanced version of the form component that handles multiple states (empty, submitting, error, success) with conditional rendering and button/textarea disabling based on the current status prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Form({\n  // Try 'submitting', 'error', 'success':\n  status = 'empty'\n}) {\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form>\n        <textarea disabled={\n          status === 'submitting'\n        } />\n        <br />\n        <button disabled={\n          status === 'empty' ||\n          status === 'submitting'\n        }>\n          Submit\n        </button>\n        {status === 'error' &&\n          <p className=\"Error\">\n            Good guess but a wrong answer. Try again!\n          </p>\n        }\n      </form>\n      </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.Error { color: red; }\n```\n\n----------------------------------------\n\nTITLE: Styling Scoreboard Component\nDESCRIPTION: This CSS snippet provides additional styling for the Counter component in a scoreboard application. It defines the font size for headers and layout settings for the counter including hover effects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\nh1 {\n  font-size: 18px;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Application State Initialization with useState - ReactJS (JavaScript)\nDESCRIPTION: This snippet defines a functional `App` component that utilizes React's `useState` hook to manage an array of story objects. The array is initialized with two stories and passed as a prop to a `StoryTray` child component. Key parameters are the initial `stories` array and the `setStories` state setter; input is static, while output is a rendered UI containing the `StoryTray`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\nimport StoryTray from './StoryTray.js';\\n\\nlet initialStories = [\\n  {id: 0, label: \\\"Ankit's Story\\\" },\\n  {id: 1, label: \\\"Taylor's Story\\\" },\\n];\\n\\nexport default function App() {\\n  let [stories, setStories] = useState(initialStories)\\n  return (\\n    <div\\n      style={{\\n        width: '100%',\\n        height: '100%',\\n        textAlign: 'center',\\n      }}\\n    >\\n      <StoryTray stories={stories} />\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: StoryTray Component with Array Cloning and Hover (Pure Function) - ReactJS (JavaScript)\nDESCRIPTION: This snippet fixes both prop mutation and adds hover-based re-rendering. It clones the `stories` array before modifying to ensure purity, then adds internal `isHover` state to toggle background color on pointer events. Dependencies are React's `useState`. Inputs: `stories` prop, pointer events. Outputs: Styled and correctly updated list without prop mutation or duplication. Ensures future-proof, bug-free behavior in Strict Mode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\\n\\nexport default function StoryTray({ stories }) {\\n  const [isHover, setIsHover] = useState(false);\\n  const items = stories.slice(); // Clone the array\\n  items.push({ id: 'create', label: 'Create Story' });\\n  return (\\n    <ul\\n      onPointerEnter={() => setIsHover(true)}\\n      onPointerLeave={() => setIsHover(false)}\\n      style={{\\n        backgroundColor: isHover ? '#ddd' : '#fff'\\n      }}\\n    >\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: First Solution - Destructuring Object Props\nDESCRIPTION: First fix that destructures the options object and uses primitive values as dependencies in useEffect\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ options }) {\n  const { roomId, serverUrl } = options;\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return <h1>Welcome to the {options.roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Array to useEffect\nDESCRIPTION: Adding an empty dependency array to the useEffect hook to ensure the connection is only established on component mount.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Initializing useTransition Hook in React\nDESCRIPTION: This snippet shows the basic syntax for calling the `useTransition` Hook in a React component. It destructures the returned array into `isPending`, a boolean indicating if a transition is active, and `startTransition`, a function to wrap state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst [isPending, startTransition] = useTransition()\n```\n\n----------------------------------------\n\nTITLE: Using React DOM Static 'prerender' API for Static Site Generation\nDESCRIPTION: Demonstrates the new 'prerender' API from react-dom/static for generating static HTML. This API waits for all data to load before returning the static HTML stream.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerender } from 'react-dom/static';\n\nasync function handler(request) {\n  const {prelude} = await prerender(<App />, {\n    bootstrapScripts: ['/main.js']\n  });\n  return new Response(prelude, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Clock Component Implementation\nDESCRIPTION: Initial implementation of a Clock component that fails to update when the color prop changes because it stores the prop value in state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Clock(props) {\n  const [color, setColor] = useState(props.color);\n  return (\n    <h1 style={{ color: color }}>\n      {props.time}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Investigating Stale State in Event Handlers with React useEffect (JavaScript)\nDESCRIPTION: This snippet illustrates a React component where an event handler (handleMove) relies on a piece of state (canMove). The useEffect suppresses linter warnings for missing dependencies, causing the effect to capture 'canMove' only on the initial render. As a result, toggling the checkbox fails to properly update the handler's access to updated state, leading to a persistent bug. Key dependencies include React's useEffect and useState. The main inputs are mouse events, and the UI output is a moving pink dot. Limitation: effect does not synchronize with state changes due to improper dependency management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  function handleMove(e) {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)} \n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: List Item with React Key Property\nDESCRIPTION: Example of correctly implementing a list item with a key prop in React. The key helps React identify which items have changed, been added, or been removed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_45\n\nLANGUAGE: js\nCODE:\n```\n<li key={user.id}>\n  {user.name}: {user.taskCount} tasks left\n</li>\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref in React Component\nDESCRIPTION: Example of declaring a ref using the useRef Hook\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myRef = useRef(null);\n```\n\n----------------------------------------\n\nTITLE: Initial State Setup with useState\nDESCRIPTION: Basic state initialization using useState hooks for form answer and error handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst [answer, setAnswer] = useState('');\nconst [error, setError] = useState(null);\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Update with If Statement\nDESCRIPTION: Shows how to conditionally modify content using a standard if statement based on a boolean flag.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (isPacked) {\n  itemContent = name + \" ✅\";\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Container Implementation with startTransition\nDESCRIPTION: Shows another example of implementing tab container functionality using startTransition to manage state updates in a non-blocking way.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/startTransition.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n    startTransition(() => {\n      setTab(nextTab);\n    });\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Progressive Enhancement with useActionState\nDESCRIPTION: Shows how to implement progressive enhancement using useActionState with a permalink URL.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport {updateName} from './actions';\n\nfunction UpdateName() {\n  const [, submitAction] = useActionState(updateName, null, `/name/update`);\n\n  return (\n    <form action={submitAction}>\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Counter Component Buttons and Headers - CSS\nDESCRIPTION: CSS styles for the counter component ensuring buttons and headings are block elements with margins, and buttons have larger font size. No dependencies; used in conjunction with the JavaScript counter examples.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { display: block; margin: 10px; font-size: 20px; }\\nh1 { display: block; margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Using renderToString with Suspense in React DOM Server\nDESCRIPTION: renderToString now handles server-side suspense by emitting fallback HTML for Suspense boundaries and retrying rendering on the client, rather than throwing errors. Streaming APIs are recommended instead.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nrenderToString(<Component />)\n```\n\n----------------------------------------\n\nTITLE: Basic Link Element Usage in React\nDESCRIPTION: Simple example of using the built-in browser <link> component in React to link to a favicon.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<link rel=\"icon\" href=\"favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Form Submission Effect\nDESCRIPTION: Shows an incorrect implementation of form submission logic using useEffect instead of event handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (submitted) {\n      // 🔴 Avoid: Event-specific logic inside an Effect\n      post('/api/register');\n      showNotification('Successfully registered!');\n    }\n  }, [submitted]);\n```\n\n----------------------------------------\n\nTITLE: Using useMemo for Component-Local Computation Caching\nDESCRIPTION: This example demonstrates using useMemo for caching expensive computations within a client component. The useMemo hook ensures the calculation is only performed when the record dependency changes, but the cache is local to each component instance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nfunction WeatherReport({record}) {\n  const avgTemp = useMemo(() => calculateAvg(record), record);\n  // ...\n}\n\nfunction App() {\n  const record = getRecord();\n  return (\n    <>\n      <WeatherReport record={record} />\n      <WeatherReport record={record} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Suppressing Effect Dependencies Linter\nDESCRIPTION: Demonstrates the incorrect approach of suppressing the React hooks dependency linter, which can lead to bugs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  // ...\n  // 🔴 Avoid suppressing the linter like this:\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useFormStatus in Child Component in React\nDESCRIPTION: Demonstrates the correct pattern for using `useFormStatus`: call the Hook within a component (`Submit`) that is rendered as a child inside the `<form>` element. This allows the Hook to correctly track the submission status of the parent `form` defined in the `Form` component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction Submit() {\n  // ✅ `pending` will be derived from the form that wraps the Submit component\n  const { pending } = useFormStatus(); \n  return <button disabled={pending}>...</button>;\n}\n\nfunction Form() {\n  // This is the <form> `useFormStatus` tracks\n  return (\n    <form action={submit}>\n      <Submit />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context in React Class Component\nDESCRIPTION: Example showing how to use static contextType to access context value in a class component. The component reads theme context and applies it to button className.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass Button extends Component {\n  static contextType = ThemeContext;\n\n  render() {\n    const theme = this.context;\n    const className = 'button-' + theme;\n    return (\n      <button className={className}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Combining Multiple Fetches in a Single React useEffect\nDESCRIPTION: This snippet demonstrates an anti-pattern where a single `useEffect` hook in the `ShippingForm` component attempts to synchronize two independent processes: fetching cities based on the `country` prop and fetching areas based on the selected `city` state. Adding `city` to the dependency array causes unnecessary refetching of cities whenever the `city` changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js {15-24,28}\nfunction ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    // 🔴 Avoid: A single Effect synchronizes two independent processes\n    if (city) {\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [country, city]); // ✅ All dependencies declared\n\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component with Manual Level\nDESCRIPTION: Initial implementation showing manual level prop passing through Section components\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  return (\n    <Section level={1}>\n      ...\n      <Section level={2}>\n        ...\n        <Section level={3}>\n          ...\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Update in React\nDESCRIPTION: This snippet shows an incorrect way of updating state by mutating the previous state directly. This impure updater function can lead to unexpected behavior when called twice in Strict Mode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nsetTodos(prevTodos => {\n  // 🚩 Mistake: mutating state\n  prevTodos.push(createTodo());\n});\n```\n\n----------------------------------------\n\nTITLE: SVG Attribute Naming Conventions in React JSX\nDESCRIPTION: Explains the attribute naming conventions for SVG elements in React JSX. Standard attributes use camelCase (e.g., `tabIndex` for `tabindex`), and namespaced attributes omit the colon (e.g., `xlinkHref` for `xlink:href`).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ntabIndex\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkActuate\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkArcrole\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkHref\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkRole\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkShow\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkTitle\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxlinkType\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxmlBase\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxmlLang\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxmlSpace\n```\n\nLANGUAGE: jsx\nCODE:\n```\nxmlnsXlink\n```\n\n----------------------------------------\n\nTITLE: Inline Function Definition in Parent Component\nDESCRIPTION: An example showing how a parent component passes a new function on every render, causing the child component's effect to re-run frequently.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<ChatRoom\n  roomId={roomId}\n  onReceiveMessage={receivedMessage => {\n    // ...\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React DevTools using Package Managers\nDESCRIPTION: Command line instructions for installing the React Developer Tools npm package globally using either Yarn or npm package managers. This is typically used for browsers like Safari that don't have a dedicated extension.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-developer-tools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools\n```\n\n----------------------------------------\n\nTITLE: Implementing useEffectEvent Hook in React\nDESCRIPTION: Basic syntax for using the experimental useEffectEvent Hook in React. This Hook allows extraction of non-reactive logic into Effect Events. It's currently only available in experimental versions of React and should not be used in production.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_useEffectEvent.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSomething = useEffectEvent(callback)\n```\n\n----------------------------------------\n\nTITLE: React Component Structure with Suspense\nDESCRIPTION: Shows a React component structure for a profile page that implements Suspense for data loading. This example demonstrates how to organize components and handle loading states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Sidebar>\n        <Friends />\n        <Photos />\n      </Sidebar>\n      <Suspense fallback={<PostsGlimmer />}>\n        <Posts />\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs with useId Hook\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and utilize the useId Hook from React to generate unique IDs for elements in a component. It illustrates passing the generated ID to attributes like aria-describedby to relate elements for accessibility purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useId.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useId } from 'react';\n\nfunction PasswordField() {\n  const passwordHintId = useId();\n  return (\n    <>\n      <label>\n        Password:\n        <input\n          type=\"password\"\n          aria-describedby={passwordHintId}\n        />\n      </label>\n      <p id={passwordHintId}>\n        The password should contain at least 18 characters\n      </p>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <h2>Choose password</h2>\n      <PasswordField />\n      <h2>Confirm password</h2>\n      <PasswordField />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Store Subscription\nDESCRIPTION: Example showing how to implement subscription to an external todos store using useSyncExternalStore.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Styles with useInsertionEffect in a CSS-in-JS Hook (JavaScript)\nDESCRIPTION: Shows a more complete example of using `useInsertionEffect` within a custom `useCSS` hook for a CSS-in-JS library. It injects `<style>` tags into the document head and uses a `Set` (`isInserted`) to avoid adding the same style rule multiple times. This hook is then consumed by a `Button` component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useInsertionEffect.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Inside your CSS-in-JS library\nlet isInserted = new Set();\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // As explained earlier, we don't recommend runtime injection of <style> tags.\n    // But if you have to do it, then it's important to do in useInsertionEffect.\n    if (!isInserted.has(rule)) {\n      isInserted.add(rule);\n      document.head.appendChild(getStyleForRule(rule));\n    }\n  });\n  return rule;\n}\n\nfunction Button() {\n  const className = useCSS('...');\n  return <div className={className} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context as a Provider Directly\nDESCRIPTION: Demonstrates the new ability to render Context directly as a provider in React 19, instead of using Context.Provider syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst ThemeContext = createContext('');\n\nfunction App({children}) {\n  return (\n    <ThemeContext value=\"dark\">\n      {children}\n    </ThemeContext>\n  );  \n}\n```\n\n----------------------------------------\n\nTITLE: Styling Todo List Components with CSS\nDESCRIPTION: CSS styles for the todo list components, including button margin and removing default list styling for cleaner appearance. These styles ensure consistent spacing and presentation of the todo items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency by Making It Non-Reactive\nDESCRIPTION: An example showing how to remove a dependency by moving the value outside of the component, making it non-reactive. This allows for an empty dependency array since the value won't change on re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'music'; // Not a reactive value anymore\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Tasks using Context Dispatch - React JavaScript\nDESCRIPTION: Defines a controlled input for new tasks, dispatches an 'added' action to the context's reducer on button click, and resets the text field. Uses useState and context hooks. Expects context provider from TasksContext.js and auto-increments task IDs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useContext } from 'react';\\nimport { useTasksDispatch } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useTasksDispatch();\\n  return (\\n    <>\\n      <input\\n        placeholder=\"Add task\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\n```\n\n----------------------------------------\n\nTITLE: Specifying ID Prefix in React\nDESCRIPTION: This JavaScript snippet demonstrates how to specify a unique identifier prefix for multiple React applications rendered on the same page, ensuring that IDs generated by useId do not clash by configuring them in the createRoot method.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useId.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport App from './App.js';\nimport './styles.css';\n\nconst root1 = createRoot(document.getElementById('root1'), {\n  identifierPrefix: 'my-first-app-'\n});\nroot1.render(<App />);\n\nconst root2 = createRoot(document.getElementById('root2'), {\n  identifierPrefix: 'my-second-app-'\n});\nroot2.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Counting Children with Children.count\nDESCRIPTION: Demonstrates using Children.count to calculate the number of direct child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nexport default function RowList({ children }) {\n  return (\n    <div className=\"RowList\">\n      <h1 className=\"RowListHeader\">\n        Total rows: {Children.count(children)}\n      </h1>\n      {Children.map(children, child =>\n        <div className=\"Row\">\n          {child}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook in Square Component\nDESCRIPTION: Introduces the useState hook to manage the state of each Square, allowing it to update its own value when clicked.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square() {\n  const [value, setValue] = useState(null);\n\n  function handleClick() {\n    setValue('X');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Progress Indicators with Various States in React\nDESCRIPTION: This example shows how to create multiple progress indicators with different states, including zero progress, partial progress, custom max value, completion, and indeterminate state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/progress.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function App() {\n  return (\n    <>\n      <progress value={0} />\n      <progress value={0.5} />\n      <progress value={0.7} />\n      <progress value={75} max={100} />\n      <progress value={1} />\n      <progress value={null} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in React Components\nDESCRIPTION: Shows how to handle keyboard events in React components, specifically onKeyDown and onKeyUp events. It demonstrates logging the key and code properties of the event object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function KeyboardExample() {\n  return (\n    <label>\n      First name:\n      <input\n        name=\"firstName\"\n        onKeyDown={e => console.log('onKeyDown:', e.key, e.code)}\n        onKeyUp={e => console.log('onKeyUp:', e.key, e.code)}\n      />\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Draggable Box Component\nDESCRIPTION: Implements a draggable box component with pointer event handling for drag functionality. Manages coordinates state and movement calculations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Box({\n  children,\n  color,\n  position,\n  onMove\n}) {\n  const [\n    lastCoordinates,\n    setLastCoordinates\n  ] = useState(null);\n\n  function handlePointerDown(e) {\n    e.target.setPointerCapture(e.pointerId);\n    setLastCoordinates({\n      x: e.clientX,\n      y: e.clientY,\n    });\n  }\n\n  function handlePointerMove(e) {\n    if (lastCoordinates) {\n      setLastCoordinates({\n        x: e.clientX,\n        y: e.clientY,\n      });\n      const dx = e.clientX - lastCoordinates.x;\n      const dy = e.clientY - lastCoordinates.y;\n      onMove(dx, dy);\n    }\n  }\n\n  function handlePointerUp(e) {\n    setLastCoordinates(null);\n  }\n\n  return (\n    <div\n      onPointerDown={handlePointerDown}\n      onPointerMove={handlePointerMove}\n      onPointerUp={handlePointerUp}\n      style={{\n        width: 100,\n        height: 100,\n        cursor: 'grab',\n        backgroundColor: color,\n        position: 'absolute',\n        border: '1px solid black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transform: `translate(\n          ${position.x}px,\n          ${position.y}px\n        )`,\n      }}\n    >{children}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Targeted React Integration\nDESCRIPTION: Example HTML structure showing how to prepare a page for partial React integration by adding id attributes to specific elements where React components will be rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head><title>My app</title></head>\n  <body>\n    <p>This paragraph is a part of HTML.</p>\n    <nav id=\"navigation\"></nav>\n    <p>This paragraph is also a part of HTML.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Profiler with Specific Component Measurement\nDESCRIPTION: Example showing how to wrap specific components with Profiler to measure their individual performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Profiler.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<App>\n  <Profiler id=\"Sidebar\" onRender={onRender}>\n    <Sidebar />\n  </Profiler>\n  <PageContent />\n</App>\n```\n\n----------------------------------------\n\nTITLE: Basic Lazy Component Declaration in React\nDESCRIPTION: The basic syntax for declaring a lazy-loaded React component using the lazy function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeComponent = lazy(load)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Chat Room Connection in React (With Bug)\nDESCRIPTION: This code snippet shows a React component that connects to a chat room when mounted but contains a bug: it's missing a cleanup function to disconnect when unmounted or when dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n  }, []);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State in Parent Board Component in React\nDESCRIPTION: Creates a state variable 'squares' in the Board component using useState hook. The state is initialized as an array of 9 null values representing empty squares in a tic-tac-toe board.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using currentMove to render current game state in React Game\nDESCRIPTION: Update to the Game component to render the board using the currently selected move from history, rather than always rendering the final move. This change allows the game board to reflect the state at any selected point in history.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Input State Update Bug Examples in React\nDESCRIPTION: Examples of incorrect ways to update input state that cause caret jumping issues\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleChange(e) {\n  setFirstName(e.target.value.toUpperCase());\n}\n\nfunction handleChange(e) {\n  setTimeout(() => {\n    setFirstName(e.target.value);\n  }, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pattern: Using useCallback in a Loop\nDESCRIPTION: Demonstrates an incorrect pattern where useCallback is used inside a map loop, which violates React's rules of hooks that require hooks to be called at the top level.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ReportList({ items }) {\n  return (\n    <article>\n      {items.map(item => {\n        // 🔴 You can't call useCallback in a loop like this:\n        const handleClick = useCallback(() => {\n          sendReport(item)\n        }, [item]);\n\n        return (\n          <figure key={item.id}>\n            <Chart onClick={handleClick} />\n          </figure>\n        );\n      })}\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic List Refs Management\nDESCRIPTION: Advanced example showing how to manage refs for dynamic lists using ref callbacks and a Map\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState } from \"react\";\n\nexport default function CatFriends() {\n  const itemsRef = useRef(null);\n  const [catList, setCatList] = useState(setupCatList);\n\n  function scrollToCat(cat) {\n    const map = getMap();\n    const node = map.get(cat);\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n\n  function getMap() {\n    if (!itemsRef.current) {\n      itemsRef.current = new Map();\n    }\n    return itemsRef.current;\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToCat(catList[0])}>Neo</button>\n        <button onClick={() => scrollToCat(catList[5])}>Millie</button>\n        <button onClick={() => scrollToCat(catList[9])}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat) => (\n            <li\n              key={cat}\n              ref={(node) => {\n                const map = getMap();\n                map.set(cat, node);\n\n                return () => {\n                  map.delete(cat);\n                };\n              }}\n            >\n              <img src={cat} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Down Capture Events with onMouseDownCapture in React (JSX)\nDESCRIPTION: React prop for handling mouse down events during the capture phase. This is the capture phase version of `onMouseDown`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseDownCapture\n```\n\n----------------------------------------\n\nTITLE: Using initialValue with useDeferredValue Hook in React (JavaScript)\nDESCRIPTION: Example of using the `useDeferredValue` hook in React with the optional `initialValue` argument. This allows specifying a value to be used during the initial component render, while the actual `deferredValue` is processed in a subsequent background re-render, improving perceived performance for components that depend on deferred data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[1, 1, \"deferredValue\"], [1, 4, \"deferredValue\"], [2, 4, \"''\"]]\nfunction Search({deferredValue}) {\n  // On initial render the value is ''.\n  // Then a re-render is scheduled with the deferredValue.\n  const value = useDeferredValue(deferredValue, '');\n  \n  return (\n    <Results query={value} />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Chat Room Component with Theme Selection in React\nDESCRIPTION: This JSX code snippet renders a chat room interface with options to select a room and toggle between light and dark themes. It uses state management to track the selected room and theme preferences.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Squares Array State in Tic-Tac-Toe\nDESCRIPTION: Shows what the squares array state might look like during gameplay, with 'X' and 'O' values representing player moves and null values for empty squares.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n['O', null, 'X', 'X', 'X', 'O', 'O', null, null]\n```\n\n----------------------------------------\n\nTITLE: Handling Key Up Capture Events with onKeyUpCapture in React (JSX)\nDESCRIPTION: React prop for handling key up events during the capture phase. This is the capture phase version of `onKeyUp`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyUpCapture\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Array in React State - Incorrect Example\nDESCRIPTION: Demonstrates incorrect way of updating arrays using push() which mutates state directly. Shows why mutation should be avoided in React state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        artists.push({\n          id: nextId++,\n          name: name,\n        });\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Chat Room and Notifying on Theme Change (JavaScript + React + Toastify)\nDESCRIPTION: An advanced React code example showing how useEffect synchronizes both roomId and theme changes for a chat connection. Integrates a notification system using Toastify to provide feedback upon connection, wiring up both chat logic and UI theme handling. Depends on external connection and notification modules, and illustrates how overlapping dependencies can trigger re-connection side effects inadvertently. Intended for demonstration and not production; may re-connect unnecessarily when theme changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, theme]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'} \n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Move Events with onMouseMove in React (JSX)\nDESCRIPTION: React prop for handling the event fired continuously when a pointer is moving while over an element. It expects a `MouseEvent` handler function and corresponds to the browser's `mousemove` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseMove\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Syntax in JSX\nDESCRIPTION: Shows how to use React Fragment syntax (<>...</>) to return multiple elements without adding an extra DOM node, which is a requirement in JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction AboutPage() {\n  return (\n    <>\n      <h1>About</h1>\n      <p>Hello there.<br />How do you do?</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Section Usage without Context\nDESCRIPTION: Example of JSX markup before implementing context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Section>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Effect Synchronization Start Implementation\nDESCRIPTION: Shows the core logic for starting the synchronization process in an Effect, creating and establishing a connection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    // ...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Chat Application\nDESCRIPTION: Simple CSS styles for the chat application UI components, adding margin and spacing to input elements and buttons for better visual appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: React Main App Component\nDESCRIPTION: Main App component implementing theme switching, room selection, and encryption toggle functionality with state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ChatRoom from './ChatRoom.js';\nimport { showNotification } from './notifications.js';\n\nexport default function App() {\n  const [isDark, setIsDark] = useState(false);\n  const [roomId, setRoomId] = useState('general');\n  const [isEncrypted, setIsEncrypted] = useState(false);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isEncrypted}\n          onChange={e => setIsEncrypted(e.target.checked)}\n        />\n        Enable encryption\n      </label>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        isEncrypted={isEncrypted}\n        onMessage={msg => {\n          showNotification('New message: ' + msg, isDark ? 'dark' : 'light');\n        }}\n      />\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Replacing unmountComponentAtNode with root.unmount\nDESCRIPTION: This example demonstrates how to update the component unmounting process from using the deprecated unmountComponentAtNode to the new root.unmount() method introduced with createRoot and hydrateRoot.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nunmountComponentAtNode(document.getElementById('root'));\n\n// After\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Out Events with onMouseOut in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointer moves out of an element or one of its children. It expects a `MouseEvent` handler function and corresponds to the browser's `mouseout` event. Note that this event bubbles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseOut\n```\n\n----------------------------------------\n\nTITLE: Migrating from unmountComponentAtNode to root.unmount in React 18\nDESCRIPTION: Code comparison showing how to migrate from the old unmountComponentAtNode API to the new root.unmount method in React 18.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Before\nunmountComponentAtNode(container);\n\n// After\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Room Component with Correct Dependencies\nDESCRIPTION: A full implementation of a chat room component that correctly specifies roomId as a dependency, allowing the Effect to re-synchronize when the room selection changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Including Note Block in Markdown\nDESCRIPTION: This snippet demonstrates how to include a note block in Markdown format, specifically used in React documentation to highlight important information about the Canary release channel.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/05/03/react-canaries.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Note>\n\nStrictly speaking, Canary is not a *new* release channel--it used to be called Next. However, we've decided to rename it to avoid confusion with Next.js. We're announcing it as a *new* release channel to communicate the new expectations, such as Canaries being an officially supported way to use React.\n\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Todo List App with React memo but Without Artificial Slowdown\nDESCRIPTION: A normal-speed implementation of the same Todo List app, using React.memo to memoize the List component. This example shows how code without memoization can still work fine for many use cases when there's no artificial slowdown.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createTodos } from './utils.js';\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n  const [tab, setTab] = useState('all');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <button onClick={() => setTab('all')}>\n        All\n      </button>\n      <button onClick={() => setTab('active')}>\n        Active\n      </button>\n      <button onClick={() => setTab('completed')}>\n        Completed\n      </button>\n      <br />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <TodoList\n        todos={todos}\n        tab={tab}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.js';\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = filterTodos(todos, tab);\n  return (\n    <div className={theme}>\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from 'react';\n\nfunction List({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          {item.completed ?\n            <s>{item.text}</s> :\n            item.text\n          }\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default memo(List);\n```\n\n----------------------------------------\n\nTITLE: React Component Structure Example\nDESCRIPTION: Shows how React components can be composed and nested to create page layouts, demonstrating a typical documentation page structure.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n```\n\n----------------------------------------\n\nTITLE: Context Creation\nDESCRIPTION: Shows how to create a new context with a default value.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Shorthand in JSX\nDESCRIPTION: Demonstrates the shorthand syntax for React.Fragment, which allows grouping of multiple JSX nodes without adding extra DOM elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/components.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>...</>\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Root Component for Suspense Demo in JavaScript (React)\nDESCRIPTION: Defines the main `App` component for the interactive Sandpack demo. It uses React's `useState` hook to manage the visibility of the `ArtistPage` component, rendering it only after a button is clicked. This component sets up the scenario where `<Suspense>` will be utilized in child components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\nimport ArtistPage from './ArtistPage.js';\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  if (show) {\n    return (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  } else {\n    return (\n      <button onClick={() => setShow(true)}>\n        Open The Beatles artist page\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useCounter Hook with Hardcoded Delay - React JavaScript\nDESCRIPTION: This useCounter implementation increments a stateful counter every second with setInterval inside useEffect. The delay is fixed at 1000ms, ignoring any configurable delay, and the effect runs only once after mount. It takes no parameters and provides only a counter value, suitable for simple use cases but not adaptable to variable ticking intervals. Dependencies: React's useState and useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useCounter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming to Board and Rendering the Number Grid - JavaScript\nDESCRIPTION: This final JavaScript snippet defines a 'Board' component (renamed from 'Square') that returns the complete tic-tac-toe grid. The code structure is identical to the previous multi-row/multi-square example but formalizes the component naming, clarifying its role. It renders nine squares in three rows, each styled as per previously defined CSS. Inputs/outputs: none; this is a static board layout. Dependencies: React and appropriate styles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">1</button>\\n        <button className=\\\"square\\\">2</button>\\n        <button className=\\\"square\\\">3</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">4</button>\\n        <button className=\\\"square\\\">5</button>\\n        <button className=\\\"square\\\">6</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">7</button>\\n        <button className=\\\"square\\\">8</button>\\n        <button className=\\\"square\\\">9</button>\\n      </div>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing useMemo by Moving Object Creation Inside Calculation\nDESCRIPTION: The most efficient approach where the object creation happens inside the useMemo calculation function, eliminating the need for a separate memoized object and directly depending on primitive values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Dropdown({ allItems, text }) {\n  const visibleItems = useMemo(() => {\n    const searchOptions = { matchMode: 'whole-word', text };\n    return searchItems(allItems, searchOptions);\n  }, [allItems, text]); // ✅ Only changes when allItems or text changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Basic React Gallery Component Implementation\nDESCRIPTION: Example of a Gallery component with a nested Profile component, showing basic component composition in a single file.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nimg { margin: 0 10px 10px 0; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Notification System Implementation\nDESCRIPTION: Toast notification implementation using Toastify-js with theme support for displaying chat messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Layout Component for the Music Browser\nDESCRIPTION: A simple Layout component that provides the application structure with a header and main content area.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Layout({ children }) {\n  return (\n    <div className=\"layout\">\n      <section className=\"header\">\n        Music Browser\n      </section>\n      <main>\n        {children}\n      </main>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Non-React Widgets with useEffect\nDESCRIPTION: Using useEffect to interact with external UI widgets that aren't written in React, such as setting the zoom level on a map component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const map = mapRef.current;\n  map.setZoomLevel(zoomLevel);\n}, [zoomLevel]);\n```\n\n----------------------------------------\n\nTITLE: Nested Suspense Boundaries\nDESCRIPTION: Illustrates how to create a more granular loading sequence using nested Suspense boundaries.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Suspense fallback={<BigSpinner />}>\n        <Sidebar>\n          <Friends />\n          <Photos />\n        </Sidebar>\n        <Suspense fallback={<PostsGlimmer />}>\n          <Posts />\n        </Suspense>\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Valid React Elements Check\nDESCRIPTION: Comprehensive examples showing various valid React elements using both JSX and createElement.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/isValidElement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isValidElement, createElement } from 'react';\n\n// ✅ JSX tags are React elements\nconsole.log(isValidElement(<p />)); // true\nconsole.log(isValidElement(<MyComponent />)); // true\n\n// ✅ Values returned by createElement are React elements\nconsole.log(isValidElement(createElement('p'))); // true\nconsole.log(isValidElement(createElement(MyComponent))); // true\n```\n\n----------------------------------------\n\nTITLE: React App Component Setup without useMemo (Normal Speed Example)\nDESCRIPTION: This is the same `App` component setup as the previous example, managing tab and theme state and rendering `TodoList`. It's presented again in the context where the `filterTodos` function it relies on (in `utils.js`) does *not* have an artificial slowdown. This setup still lacks `useMemo`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/App.js\nimport { useState } from 'react';\nimport { createTodos } from './utils.js';\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n  const [tab, setTab] = useState('all');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <button onClick={() => setTab('all')}>\n        All\n      </button>\n      <button onClick={() => setTab('active')}>\n        Active\n      </button>\n      <button onClick={() => setTab('completed')}>\n        Completed\n      </button>\n      <br />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Dark mode\n      </label>\n      <hr />\n      <TodoList\n        todos={todos}\n        tab={tab}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Task Management Styling\nDESCRIPTION: CSS styling for the task management interface components including buttons and list items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: React Todo App Implementation with Mutations\nDESCRIPTION: Initial implementation of a todo app with incorrect mutation-based state updates, showing handleAddTodo using push(), handleChangeTodo using direct property assignment, and handleDeleteTodo using splice().\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport AddTodo from './AddTodo.js';\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\nconst initialTodos = [\n  { id: 0, title: 'Buy milk', done: true },\n  { id: 1, title: 'Eat tacos', done: false },\n  { id: 2, title: 'Brew tea', done: false },\n];\n\nexport default function TaskApp() {\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAddTodo(title) {\n    todos.push({\n      id: nextId++,\n      title: title,\n      done: false\n    });\n  }\n\n  function handleChangeTodo(nextTodo) {\n    const todo = todos.find(t =>\n      t.id === nextTodo.id\n    );\n    todo.title = nextTodo.title;\n    todo.done = nextTodo.done;\n  }\n\n  function handleDeleteTodo(todoId) {\n    const index = todos.findIndex(t =>\n      t.id === todoId\n    );\n    todos.splice(index, 1);\n  }\n\n  return (\n    <>\n      <AddTodo\n        onAddTodo={handleAddTodo}\n      />\n      <TaskList\n        todos={todos}\n        onChangeTodo={handleChangeTodo}\n        onDeleteTodo={handleDeleteTodo}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Profiler Component Usage in React\nDESCRIPTION: Basic example of wrapping a React component with the Profiler component to measure rendering performance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Profiler.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Profiler id=\"App\" onRender={onRender}>\n  <App />\n</Profiler>\n```\n\n----------------------------------------\n\nTITLE: Image URL Utility Function\nDESCRIPTION: Utility function to generate image URLs for person objects\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getImageUrl(person) {\n  return (\n    'https://i.imgur.com/' +\n    person.imageId +\n    's.jpg'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting State During Render in React\nDESCRIPTION: Shows how to adjust state based on prop changes during rendering, using a previous value comparison pattern. This approach is more efficient than using Effects but should be used sparingly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction List({ items }) {\n  const [isReverse, setIsReverse] = useState(false);\n  const [selection, setSelection] = useState(null);\n\n  // Better: Adjust the state while rendering\n  const [prevItems, setPrevItems] = useState(items);\n  if (items !== prevItems) {\n    setPrevItems(items);\n    setSelection(null);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using act function with React in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the act function to apply pending updates in a component before making assertions in a test. It shows wrapping a rendering function within an await act call to ensure that all component updates are processed, which is necessary for accurate testing results.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/act.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nawait act(async actFn)\n```\n\n----------------------------------------\n\nTITLE: Sculpture Data Structure Definition\nDESCRIPTION: Defines the data structure for sculpture information including name, artist, description, image URL, and alt text for a gallery application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, ...]\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Capture Events with onDropCapture in React (JSX)\nDESCRIPTION: React prop for handling drop events during the capture phase. This is the capture phase version of `onDrop`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nonDropCapture\n```\n\n----------------------------------------\n\nTITLE: Implementing a Render-Agnostic Component in React\nDESCRIPTION: This FancyText component doesn't use any server or client-only features, making it agnostic to where it renders. It doesn't require the 'use client' directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FancyText({title, text}) {\n  return title\n    ? <h1 className='fancy title'>{text}</h1>\n    : <h3 className='fancy cursive'>{text}</h3>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Tree to Static HTML Stream - React with JavaScript\nDESCRIPTION: Shows a full implementation of an `async handler` function for rendering a React application to static HTML using `prerender`. This snippet demonstrates importing the API, passing a root React component and script paths, and returning a streamed response. Dependencies include `react-dom/static` and a compatible server environment. Key parameters are the root JSX node and the bootstrap script list, ensuring scripts for hydration are injected into the output HTML.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prerender } from 'react-dom/static';\n\nasync function handler(request) {\n  const {prelude} = await prerender(<App />, {\n    bootstrapScripts: ['/main.js']\n  });\n  return new Response(prelude, {\n    headers: { 'content-type': 'text/html' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events with onDrop in React (JSX)\nDESCRIPTION: React prop for handling the event when an element or text selection is dropped onto a valid drop target. It expects a `DragEvent` handler function and corresponds to the browser's `drop` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nonDrop\n```\n\n----------------------------------------\n\nTITLE: Desktop Notifications for Chat App using Toastify (JavaScript)\nDESCRIPTION: Defines a notification function compatible with Toastify.js to display ephemeral messages at the top right of the viewport with theme support. Accepts the text message and theme ('light' or 'dark') as parameters, customizing color scheme accordingly. Requires toastify-js as a dependency and corresponding CSS imports. Integrates with React chat event handlers to provide UI feedback on connection events.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Dynamic Image URL in JSX\nDESCRIPTION: Illustrates the composition of a dynamic image URL using multiple object properties within JSX. Initially, it demonstrates incorrect usage which is later amended to correctly construct the URL using concatenation within curly braces. This allows for dynamic changes to individual URL elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst baseUrl = 'https://i.imgur.com/';\nconst person = {\n  name: 'Gregorio Y. Zara',\n  imageId: '7vQD0fP',\n  imageSize: 's',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"{baseUrl}{person.imageId}{person.imageSize}.jpg\"\n        alt={person.name}\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Naming for Custom Elements in React JSX\nDESCRIPTION: Illustrates the attribute naming convention for custom elements in React. Unlike standard React elements that use `className` and `htmlFor`, custom elements use the standard HTML attribute names `class` and `for`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nclass\n```\n\nLANGUAGE: html\nCODE:\n```\nfor\n```\n\n----------------------------------------\n\nTITLE: Styling the Gallery Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Gallery component, including layout adjustments, button styling, and image sizing. It ensures proper presentation of the sculpture gallery.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n.Page > * {\n  float: left;\n  width: 50%;\n  padding: 10px;\n}\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n  margin-top: 5px;\n  font-weight: normal;\n  font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\nbutton {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component in React\nDESCRIPTION: The root component that imports and composes the FancyText, InspirationGenerator, and Copyright components to create the 'Get Inspired App' structure.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FancyText from './FancyText';\nimport InspirationGenerator from './InspirationGenerator';\nimport Copyright from './Copyright';\n\nexport default function App() {\n  return (\n    <>\n      <FancyText title text=\"Get Inspired App\" />\n      <InspirationGenerator>\n        <Copyright year={2004} />\n      </InspirationGenerator>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of startTransition with setTimeout in React\nDESCRIPTION: Demonstrates an incorrect pattern where the state update happens after the startTransition call completes, meaning it won't be treated as a transition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition(() => {\n  // ❌ Setting state *after* startTransition call\n  setTimeout(() => {\n    setPage('/about');\n  }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Posts Tab with Artificially Slow Rendering - React JavaScript\nDESCRIPTION: The PostsTab React component (memoized for optimization) simulates slow rendering by creating 500 SlowPost items, each introducing a 1 ms delay in JavaScript using a while loop and performance.now(). SlowPost displays its index as a list item. Dependencies include React memo and performance API. Main inputs are none; produces an unordered list of simulated posts. Designed to demonstrate pending state UI and transition responsiveness.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n  // Log once. The actual slowdown is inside SlowPost.\n  console.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\n\n  let items = [];\n  for (let i = 0; i < 500; i++) {\n    items.push(<SlowPost key={i} index={i} />);\n  }\n  return (\n    <ul className=\"items\">\n      {items}\n    </ul>\n  );\n});\n\nfunction SlowPost({ index }) {\n  let startTime = performance.now();\n  while (performance.now() - startTime < 1) {\n    // Do nothing for 1 ms per item to emulate extremely slow code\n  }\n\n  return (\n    <li className=\"item\">\n      Post #{index + 1}\n    </li>\n  );\n}\n\nexport default PostsTab;\n```\n\n----------------------------------------\n\nTITLE: Implementing memo with React Components\nDESCRIPTION: Example showing how to use React memo to create a memoized component that will skip re-rendering when its props haven't changed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Page Component with Suspense in React\nDESCRIPTION: This snippet demonstrates how to structure a React component with Suspense for server-side rendering, showing the shell components and the suspended content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Suspense fallback={<PostsGlimmer />}>\n        <Posts />\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Props by Passing Individual Values in React\nDESCRIPTION: This example demonstrates passing individual primitive values as props instead of objects to minimize prop changes in memoized components. This approach avoids unnecessary re-renders when only part of an object changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page() {\n  const [name, setName] = useState('Taylor');\n  const [age, setAge] = useState(42);\n  return <Profile name={name} age={age} />;\n}\n\nconst Profile = memo(function Profile({ name, age }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions in React Event Handlers - JavaScript\nDESCRIPTION: The JavaScript code snippets provided here illustrate the implementation of dispatch actions triggered by user interactions. These actions are used in the context of a contacts/chat interface in a React application, and rely on a reducer for state updates. The ContactList component triggers a 'changed_selection' action upon button clicks, while the Chat component uses an 'edited_message' action when text changes. The inputs to the reducer must match the expected action object shape, which includes identifiers or messages as needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nimport { useReducer } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\nimport { initialState, messengerReducer } from './messengerReducer';\n\nexport default function Messenger() {\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\n  const message = state.message;\n  const contact = contacts.find((c) => c.id === state.selectedId);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedId={state.selectedId}\n        dispatch={dispatch}\n      />\n      <Chat\n        key={contact.id}\n        message={message}\n        contact={contact}\n        dispatch={dispatch}\n      />\n    </div>\n  );\n}\n\nconst contacts = [\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\n];\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const initialState = {\n  selectedId: 0,\n  message: 'Hello',\n};\n\nexport function messengerReducer(state, action) {\n  switch (action.type) {\n    case 'changed_selection': {\n      return {\n        ...state,\n        selectedId: action.contactId,\n        message: '',\n      };\n    }\n    case 'edited_message': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default function ContactList({contacts, selectedId, dispatch}) {\n  return (\n    <section className=\"contact-list\">\n      <ul>\n        {contacts.map((contact) => (\n          <li key={contact.id}>\n            <button\n              onClick={() => {\n                dispatch({\n                  type: 'changed_selection',\n                  contactId: contact.id,\n                });\n              }}>\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={message}\n        placeholder={'Chat to ' + contact.name}\n        onChange={(e) => {\n          dispatch({\n            type: 'edited_message',\n            message: e.target.value,\n          });\n        }}\n      />\n      <br />\n      <button>Send to {contact.email}</button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Input with a Name Attribute in React\nDESCRIPTION: Demonstrates how to render an input element with a name attribute, which is useful for form submissions and identifying the input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<input name=\"myInput\" />\n```\n\n----------------------------------------\n\nTITLE: Async Server Components with Client Suspense\nDESCRIPTION: Advanced pattern showing async Server Components with promise streaming and client-side Suspense integration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Server Component\nimport db from './database';\n\nasync function Page({id}) {\n  const note = await db.notes.get(id);\n  const commentsPromise = db.comments.get(note.id);\n  return (\n    <div>\n      {note}\n      <Suspense fallback={<p>Loading Comments...</p>}>\n        <Comments commentsPromise={commentsPromise} />\n      </Suspense>\n    </div>\n  );\n}\n\n// Client Component\n\"use client\";\nimport {use} from 'react';\n\nfunction Comments({commentsPromise}) {\n  const comments = use(commentsPromise);\n  return comments.map(commment => <p>{comment}</p>);\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Stale Value Bug Due to Suppressed Linter\nDESCRIPTION: This component demonstrates a bug where the dot's movement doesn't respect the checkbox state because the Effect's dependency on handleMove is suppressed with eslint-disable, causing it to use stale values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  function handleMove(e) {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  height: 200px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted and Unencrypted Chat Connections in JavaScript\nDESCRIPTION: This snippet defines functions to create encrypted and unencrypted chat connections. These functions simulate connecting to a chat server and handling messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createEncryptedConnection({ serverUrl, roomId }) {\n  // Implementation details...\n}\n\nexport function createUnencryptedConnection({ serverUrl, roomId }) {\n  // Implementation details...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image URLs for Data Objects (JavaScript)\nDESCRIPTION: This utility JavaScript function takes a person object and constructs an image URL based on the imageId property. It is intended for use in React rendering code where dynamic assets need to be referenced. No external dependencies are required; the function assumes the received object contains a valid imageId. It expects a person object as input and returns a string URL suitable for use as an image source.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function getImageUrl(person) {\\n  return (\\n    'https://i.imgur.com/' +\\n    person.imageId +\\n    's.jpg'\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Document Root Component for Prerendering - React with JavaScript\nDESCRIPTION: Defines the `App` component as a function returning the full HTML document structure, including head and body. This is necessary for the prerender process, as the root component must represent the entire HTML structure for correct server rendering. The key input is any props needed by the component; the output is a complete React element tree for the document. This snippet assumes React is in scope and that components like `Router` are defined elsewhere.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <html>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/styles.css\"></link>\n        <title>My app</title>\n      </head>\n      <body>\n        <Router />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Solution with Default Exports - App Component\nDESCRIPTION: The App component updated to import Profile from its own file using default export syntax. It renders both Profile and Gallery components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from './Gallery.js';\nimport Profile from './Profile.js';\n\nexport default function App() {\n  return (\n    <div>\n      <Profile />\n      <Gallery />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Function Creation Without Memoization in React\nDESCRIPTION: An example showing how a function is recreated on every render when passed as a prop to a memoized component, defeating the purpose of memoization since the prop will always be different.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ProductPage({ productId, referrer }) {\n  function handleSubmit(orderDetails) {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails\n    });\n  }\n\n  return <Form onSubmit={handleSubmit} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Resource Values with React Hooks in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the `use` hook to read the value from a resource, such as a Promise or a Context, within a React component. Prerequisites include the usage of the `use` function from React, and the presence of resources like Promises or Contexts that the component can read. The function `MessageComponent` expects a Promise as a parameter and utilizes the React Context API to obtain theme information.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction MessageComponent({ messagePromise }) {\n  const message = use(messagePromise);\n  const theme = use(ThemeContext);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Re-rendering Example\nDESCRIPTION: Example showing how React Compiler optimizes component re-rendering in a FriendList component\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendList({ friends }) {\n  const onlineCount = useFriendOnlineCount();\n  if (friends.length === 0) {\n    return <NoFriends />;\n  }\n  return (\n    <div>\n      <span>{onlineCount} online</span>\n      {friends.map((friend) => (\n        <FriendListCard key={friend.id} friend={friend} />\n      ))}\n      <MessageButton />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Timer Delay Reactiveness in React useEffect (JavaScript)\nDESCRIPTION: This improved React timer component places the interval creation directly in useEffect and declares delay as a dependency, ensuring the interval is updated whenever the delay state changes. The component provides a fully reactive, adjustable timer, with all parameters and UI as before, but with correct timing. The use of experimental useEffectEvent for onTick is retained for updating state on each tick. Inputs are count, increment value, and delay (all adjustable), with the effect now fully reflecting UI changes. This code is the recommended, reactive approach for timers running on adjustable intervals in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n  const [delay, setDelay] = useState(100);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(c => c + increment);\\n  });\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      onTick();\\n    }, delay);\\n    return () => {\\n      clearInterval(id);\\n    }\\n  }, [delay]);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n      <p>\\n        Increment delay:\\n        <button disabled={delay === 100} onClick={() => {\\n          setDelay(d => d - 100);\\n        }}>–100 ms</button>\\n        <b>{delay} ms</b>\\n        <button onClick={() => {\\n          setDelay(d => d + 100);\\n        }}>+100 ms</button>\\n      </p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification System in React\nDESCRIPTION: This snippet shows a function to display notifications using the Toastify library. It supports both light and dark themes for notifications.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint React Hooks Plugin RC\nDESCRIPTION: Commands for installing the eslint-plugin-react-hooks RC version using different package managers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/04/21/react-compiler-rc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint-plugin-react-hooks@6.0.0-rc.1\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --save-dev eslint-plugin-react-hooks@6.0.0-rc.1\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev eslint-plugin-react-hooks@6.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Declaring a ref for referencing values in React\nDESCRIPTION: Example of declaring a ref for storing an interval ID value in a Stopwatch component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction Stopwatch() {\n  const intervalRef = useRef(0);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Proper Function Component Creation and Rendering\nDESCRIPTION: Shows how to correctly handle function components that create React elements, demonstrating proper function execution versus direct function reference.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚩 Wrong: createApp is a function, not a component.\nroot.render(createApp);\n\n// ✅ Correct: call createApp to return a component.\nroot.render(createApp());\n```\n\n----------------------------------------\n\nTITLE: Styling Nested Object Form in React Example - CSS\nDESCRIPTION: Adds block and spacing styles for the nested object form in React, improving layout for labels, inputs, and images, making the form clearer and more visually appealing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\nimg { width: 200px; height: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Mock Asynchronous Data Fetching with Caching in JavaScript (data.js)\nDESCRIPTION: Provides a mock data fetching setup simulating asynchronous operations for search results. It includes a simple cache (`Map`) to store fetched results. `fetchData` checks the cache before calling `getData`, which simulates an API call (`getSearchResults`) with an artificial 500ms delay and filters a hardcoded list of albums based on the query. This is intended for demonstrating Suspense, not for production data fetching.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: the way you would do data fetching depends on\n// the framework that you use together with Suspense.\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n  if (!cache.has(url)) {\n    cache.set(url, getData(url));\n  }\n  return cache.get(url);\n}\n\nasync function getData(url) {\n  if (url.startsWith('/search?q=')) {\n    return await getSearchResults(url.slice('/search?q='.length));\n  } else {\n    throw Error('Not implemented');\n  }\n}\n\nasync function getSearchResults(query) {\n  // Add a fake delay to make waiting noticeable.\n  await new Promise(resolve => {\n    setTimeout(resolve, 500);\n  });\n\n  const allAlbums = [{\n    id: 13,\n    title: 'Let It Be',\n    year: 1970\n  }, {\n    id: 12,\n    title: 'Abbey Road',\n    year: 1969\n  }, {\n    id: 11,\n    title: 'Yellow Submarine',\n    year: 1969\n  }, {\n    id: 10,\n    title: 'The Beatles',\n    year: 1968\n  }, {\n    id: 9,\n    title: 'Magical Mystery Tour',\n    year: 1967\n  }, {\n    id: 8,\n    title: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n    year: 1967\n  }, {\n    id: 7,\n    title: 'Revolver',\n    year: 1966\n  }, {\n    id: 6,\n    title: 'Rubber Soul',\n    year: 1965\n  }, {\n    id: 5,\n    title: 'Help!',\n    year: 1965\n  }, {\n    id: 4,\n    title: 'Beatles For Sale',\n    year: 1964\n  }, {\n    id: 3,\n    title: 'A Hard Day\\'s Night',\n    year: 1964\n  }, {\n    id: 2,\n    title: 'With The Beatles',\n    year: 1963\n  }, {\n    id: 1,\n    title: 'Please Please Me',\n    year: 1963\n  }];\n\n  const lowerQuery = query.trim().toLowerCase();\n  return allAlbums.filter(album => {\n    const lowerTitle = album.title.toLowerCase();\n    return (\n      lowerTitle.startsWith(lowerQuery) ||\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\n    )\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Buggy Packing List with Redundant State in React\nDESCRIPTION: This React component creates a travel packing list with the ability to add, change, and delete items. It contains a bug where the counter doesn't update correctly when items are deleted because it uses redundant state variables for tracking counts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport AddItem from './AddItem.js';\nimport PackingList from './PackingList.js';\n\nlet nextId = 3;\nconst initialItems = [\n  { id: 0, title: 'Warm socks', packed: true },\n  { id: 1, title: 'Travel journal', packed: false },\n  { id: 2, title: 'Watercolors', packed: false },\n];\n\nexport default function TravelPlan() {\n  const [items, setItems] = useState(initialItems);\n  const [total, setTotal] = useState(3);\n  const [packed, setPacked] = useState(1);\n\n  function handleAddItem(title) {\n    setTotal(total + 1);\n    setItems([\n      ...items,\n      {\n        id: nextId++,\n        title: title,\n        packed: false\n      }\n    ]);\n  }\n\n  function handleChangeItem(nextItem) {\n    if (nextItem.packed) {\n      setPacked(packed + 1);\n    } else {\n      setPacked(packed - 1);\n    }\n    setItems(items.map(item => {\n      if (item.id === nextItem.id) {\n        return nextItem;\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  function handleDeleteItem(itemId) {\n    setTotal(total - 1);\n    setItems(\n      items.filter(item => item.id !== itemId)\n    );\n  }\n\n  return (\n    <>  \n      <AddItem\n        onAddItem={handleAddItem}\n      />\n      <PackingList\n        items={items}\n        onChangeItem={handleChangeItem}\n        onDeleteItem={handleDeleteItem}\n      />\n      <hr />\n      <b>{packed} out of {total} packed!</b>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting User Session Token\nDESCRIPTION: Example showing how to protect a user session token within a database query context using taintUniqueValue.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintUniqueValue.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {experimental_taintUniqueValue} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintUniqueValue(\n    'Do not pass a user session token to the client.',\n    user,\n    user.session.token\n  );\n  return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Bug: Controlled Textarea Without onChange in React - JavaScript\nDESCRIPTION: This code demonstrates an incorrect usage pattern in React: rendering a textarea with a value prop but no onChange handler, resulting in a read-only field. The key point is that controlled components require an onChange for user input. There are no dependencies beyond React, and this pattern is discouraged except for intentionally read-only textareas.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 🔴 Bug: controlled text area with no onChange handler\n<textarea value={something} />\n\n```\n\n----------------------------------------\n\nTITLE: Video Player with Empty Dependency Array (Causing Error)\nDESCRIPTION: Shows an improper implementation with an empty dependency array that causes a React linting error because the effect uses the isPlaying prop but doesn't declare it as a dependency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  }, []); // This causes an error\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput, button { display: block; margin-bottom: 20px; }\nvideo { width: 250px; }\n```\n\n----------------------------------------\n\nTITLE: Modifying Ref Callback for TypeScript Compatibility (Diff)\nDESCRIPTION: Illustrates the required change from an implicit return to an explicit block scope in a React `ref` callback to avoid TypeScript errors caused by the new ref cleanup function feature. Returning anything other than a function (or nothing) from a ref callback is now rejected by TypeScript, as it could be ambiguous whether it's intended as a cleanup function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n```diff [[1, 1, \"(\"], [1, 1, \")\"], [2, 2, \"{\", 15], [2, 2, \"}\", 1]]\n- <div ref={current => (instance = current)} />\n+ <div ref={current => {instance = current}} />\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect External Array Mutation\nDESCRIPTION: Shows an anti-pattern where array mutation occurs outside component scope, leading to side effects and potential bugs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = []; // 🔴 Bad: created outside of the component\nfunction FriendList({ friends }) {\n  for (let i = 0; i < friends.length; i++) {\n    const friend = friends[i];\n    items.push(\n      <Friend key={friend.id} friend={friend} />\n    ); // 🔴 Bad: mutates a value created outside of render\n  }\n  return <section>{items}</section>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React 19 with Yarn\nDESCRIPTION: Commands for installing React 19 and its dependencies using Yarn package manager.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --exact react@^19.0.0 react-dom@^19.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React `cache` for Computation\nDESCRIPTION: Illustrates how to import `cache` from React and apply it to a function (`calculateMetrics`) outside a component. The cached function (`getMetrics`) is then used within a React Server Component (`Chart`) to retrieve potentially cached results.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js {4,7}\nimport {cache} from 'react';\nimport calculateMetrics from 'lib/metrics';\n\nconst getMetrics = cache(calculateMetrics);\n\nfunction Chart({data}) {\n  const report = getMetrics(data);\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing render callback with useEffect in React 18\nDESCRIPTION: Code comparison showing how to replace the callback function in render with useEffect in React 18, which is necessary because the render callback doesn't work as expected with Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Before\nconst container = document.getElementById('app');\nrender(<App tab=\"home\" />, container, () => {\n  console.log('rendered');\n});\n\n// After\nfunction AppWithCallbackAfterRender() {\n  useEffect(() => {\n    console.log('rendered');\n  });\n\n  return <App tab=\"home\" />\n}\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render(<AppWithCallbackAfterRender />);\n```\n\n----------------------------------------\n\nTITLE: Styling for Immer-based Form Example - CSS\nDESCRIPTION: Supplies styling for the form and image in the Immer React form example, using block displays and spacing for labels, inputs, and a fixed image size. Matches the layout of the spread-syntax example for consistency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\nimg { width: 200px; height: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Alternative Solution: Using Null to Match Tree Structure (React)\nDESCRIPTION: This alternative solution preserves the form state by adding a null placeholder to match the component tree structure between the two rendering conditions, ensuring the Form component is always in the same position.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  if (showHint) {\n    return (\n      <div>\n        <p><i>Hint: Your favorite city?</i></p>\n        <Form />\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      {null}\n      <Form />\n      <button onClick={() => {\n        setShowHint(true);\n      }}>Show hint</button>\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ntextarea { display: block; margin: 10px 0; }\n```\n\n----------------------------------------\n\nTITLE: Naming Conventions for React State Updater Functions\nDESCRIPTION: Shows common naming patterns for state updater functions using abbreviated variable names. Demonstrates concise state updates using arrow functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsetEnabled(e => !e);\nsetLastName(ln => ln.reverse());\nsetFriendCount(fc => fc * 2);\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes from JavaScript Variables\nDESCRIPTION: Demonstrates how to use JavaScript variables as values for HTML attributes in JSX by using curly braces instead of quotes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <img\n    className=\"avatar\"\n    src={user.imageUrl}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Preiniting a Stylesheet with Precedence in React (JavaScript)\nDESCRIPTION: This snippet demonstrates preinit for an external stylesheet within a function component. The options object includes required properties: as: \"style\" and precedence: \"medium\". It allows you to specify the loading order among stylesheets. Requires 'react-dom'. Inputs are the stylesheet URL and options {as: \"style\", precedence: \"...\"}. No output; stylesheet becomes active immediately upon download.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinit.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n  preinit(\"https://example.com/style.css\", {as: \"style\", precedence: \"medium\"});\n  return ...;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Components in React\nDESCRIPTION: This example shows how to render multiple <meta> components within a React component. React will automatically place these in the document's <head>, even though they're rendered within a page component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SiteMapPage() {\n  return (\n    <ShowRenderedHTML>\n      <meta name=\"keywords\" content=\"React\" />\n      <meta name=\"description\" content=\"A site map for the React website\" />\n      <h1>Site Map</h1>\n      <p>...</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Save Button with Network Status Awareness in React\nDESCRIPTION: A button component that changes its appearance based on network connectivity, using the same useState and useEffect pattern to track online status. The button is disabled when offline and shows 'Reconnecting...' instead of 'Save progress'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function SaveButton() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vite for React Project Setup\nDESCRIPTION: Command to create a new React project using Vite build tool with the React template. This sets up a basic React application structure with development server and build capabilities.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/build-a-react-app-from-scratch.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest my-app -- --template react\n```\n\n----------------------------------------\n\nTITLE: React Todo List Component Implementation\nDESCRIPTION: Initial implementation of a Todo List component using multiple state variables and Effects to track and display todos. The component allows filtering active todos and displays a count of remaining items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { initialTodos, createTodo } from './todos.js';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(initialTodos);\n  const [showActive, setShowActive] = useState(false);\n  const [activeTodos, setActiveTodos] = useState([]);\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  const [footer, setFooter] = useState(null);\n\n  useEffect(() => {\n    setActiveTodos(todos.filter(todo => !todo.completed));\n  }, [todos]);\n\n  useEffect(() => {\n    setVisibleTodos(showActive ? activeTodos : todos);\n  }, [showActive, todos, activeTodos]);\n\n  useEffect(() => {\n    setFooter(\n      <footer>\n        {activeTodos.length} todos left\n      </footer>\n    );\n  }, [activeTodos]);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showActive}\n          onChange={e => setShowActive(e.target.checked)}\n        />\n        Show only active todos\n      </label>\n      <NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ? <s>{todo.text}</s> : todo.text}\n          </li>\n        ))}\n      </ul>\n      {footer}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Square Component to Accept Value Prop\nDESCRIPTION: Modifies the Square component to accept and display a value prop, allowing the Board to pass different values to each Square.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square({ value }) {\n  return <button className=\"square\">{value}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple useDebugValue Implementation in a Custom Hook\nDESCRIPTION: Shows how to call useDebugValue at the top level of a custom Hook to display a readable debug value in React DevTools.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDebugValue.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n  // ...\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Page Component Using Custom Imperative Method\nDESCRIPTION: Example of a Page component that calls a custom imperative method on a child Post component using a ref.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\nimport Post from './Post.js';\n\nexport default function Page() {\n  const postRef = useRef(null);\n\n  function handleClick() {\n    postRef.current.scrollAndFocusAddComment();\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Write a comment\n      </button>\n      <Post ref={postRef} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Purchase Events with Click Handlers\nDESCRIPTION: Demonstrates the correct approach to handling purchase actions through event handlers instead of Effects, preventing duplicate operations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleClick() {\n  // ✅ Buying is an event because it is caused by a particular interaction.\n  fetch('/api/buy', { method: 'POST' });\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Adjacent JSX Elements with Improper Syntax - JavaScript\nDESCRIPTION: This JavaScript snippet attempts to return two adjacent JSX elements (buttons) directly from a functional component. React restricts components to returning a single root element; thus, this code demonstrates a common mistake by returning multiple elements side by side. This will trigger a syntax error. No dependencies other than React are needed, but usage will fail unless elements are wrapped.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Square() {\\n  return <button className=\\\"square\\\">X</button><button className=\\\"square\\\">X</button>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Hook Usage in React Functions\nDESCRIPTION: This snippet shows the correct way to use Hooks in React function components and custom Hooks, as well as an incorrect usage in a regular JavaScript function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/rules-of-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendList() {\n  const [onlineStatus, setOnlineStatus] = useOnlineStatus(); // ✅\n}\n\nfunction setOnlineStatus() { // ❌ Not a component or custom Hook!\n  const [onlineStatus, setOnlineStatus] = useOnlineStatus();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a VideoPlayer Component in React\nDESCRIPTION: Defines a simple `VideoPlayer` functional component that receives `src` and `isPlaying` props and renders an HTML `<video>` tag. It includes a placeholder comment indicating that logic is needed to handle the `isPlaying` prop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction VideoPlayer({ src, isPlaying }) {\n  // TODO: do something with isPlaying\n  return <video src={src} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Elements in React\nDESCRIPTION: CSS styling for form elements in React, providing consistent layout and spacing. It defines styles for labels, inputs, and images within the form component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\nimg { width: 200px; height: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Preloading a Module in a React Event Handler (JavaScript)\nDESCRIPTION: Example of calling `preloadModule` inside an `onClick` event handler. This pattern is useful for starting the module download proactively upon user interaction (like clicking a button), before navigating to a part of the application that requires the module. Requires `react-dom`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preloadModule.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { preloadModule } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preloadModule(\"https://example.com/module.js\", {as: \"script\"});\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Component with createElement in React\nDESCRIPTION: Example showing how to use createElement to render a custom React component (Greeting) with props, as an alternative to using JSX syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createElement.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return createElement(Greeting, { name: 'Taylor' });\n}\n```\n\n----------------------------------------\n\nTITLE: Typing DOM Events in React with TypeScript\nDESCRIPTION: Shows how to type DOM events in React components using TypeScript, specifically for input change events.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [value, setValue] = useState(\"Change me\");\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setValue(event.currentTarget.value);\n  }\n\n  return (\n    <>\n      <input value={value} onChange={handleChange} />\n      <p>Value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChatRoom Hook with Custom Message Handler\nDESCRIPTION: This code demonstrates how to use the useChatRoom Hook in a component, passing a custom onReceiveMessage handler. It allows for more flexibility in handling incoming messages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl,\n    onReceiveMessage(msg) {\n      showNotification('New message: ' + msg);\n    }\n  });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Memoized Greeting Component\nDESCRIPTION: Shows how to create a memoized greeting component that only re-renders when the name prop changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Greeting = memo(function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n});\n\nexport default Greeting;\n```\n\n----------------------------------------\n\nTITLE: Using useRef Hook in React\nDESCRIPTION: Example of using the useRef Hook to create a reference to a DOM element. This snippet shows declaring a ref named 'inputRef' initialized as null, typically used to reference an input element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const inputRef = useRef(null);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Impure StoryTray Component with Prop Mutation - ReactJS (JavaScript)\nDESCRIPTION: This `StoryTray` component demonstrates an anti-pattern where it mutates its `stories` prop by pushing a new element directly into the array. This impure approach leads to cumulative duplication on re-renders, especially in Strict Mode or due to UI interaction. Dependencies include receiving an array via props called `stories`. Inputs are the `stories` array, and output is an unordered list of all stories, including 'Create Story' added at the end. The key limitation is that prop mutation causes repeat addition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function StoryTray({ stories }) {\\n  const items = stories;\\n  items.push({ id: 'create', label: 'Create Story' });\\n  return (\\n    <ul>\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold for useInterval Hook - React JavaScript\nDESCRIPTION: This scaffold provides an empty export file where the user is instructed to implement the reusable useInterval Hook. The context implies its purpose is to generalize setInterval logic for React functional components and Hooks. No dependencies specified, as the implementation is left blank.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Write your Hook here!\n```\n\n----------------------------------------\n\nTITLE: Mock Asynchronous Form Action with Delay in JavaScript\nDESCRIPTION: Defines an asynchronous helper function `submitForm` that introduces an artificial delay using `setTimeout` wrapped in a `Promise`. This simulates the time taken for a form submission, useful for testing loading states in the associated React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport async function submitForm(query) {\n    await new Promise((res) => setTimeout(res, 2000));\n}\n```\n\n----------------------------------------\n\nTITLE: Form with Direct Server Function\nDESCRIPTION: Simple form implementation using a Server Function directly as a form action.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport {updateName} from './actions';\n\nfunction UpdateName() {\n  return (\n    <form action={updateName}>\n      <input type=\"text\" name=\"name\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Data Fetching in Child Component\nDESCRIPTION: Demonstrates an incorrect pattern of fetching data in a child component and passing it to the parent using useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Parent() {\n  const [data, setData] = useState(null);\n  // ...\n  return <Child onFetched={setData} />;\n}\n\nfunction Child({ onFetched }) {\n  const data = useSomeAPI();\n  // 🔴 Avoid: Passing data to the parent in an Effect\n  useEffect(() => {\n    if (data) {\n      onFetched(data);\n    }\n  }, [onFetched, data]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Search Results with React 'use' Hook (Context: Deferred Value)\nDESCRIPTION: This is the `SearchResults` component used within the deferred value example. Its implementation is identical to the first example, receiving a `query` prop (which is the `deferredQuery` from `App.js`) and using the `use` hook with `fetchData` to fetch and display albums. It suspends if data isn't ready, but `App.js` now handles the UI state during suspension differently.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport {use} from 'react';\nimport { fetchData } from './data.js';\n\nexport default function SearchResults({ query }) {\n  if (query === '') {\n    return null;\n  }\n  const albums = use(fetchData(`/search?q=${query}`));\n  if (albums.length === 0) {\n    return <p>No matches for <i>\"{query}\"</i></p>;\n  }\n  return (\n    <ul>\n      {albums.map(album => (\n        <li key={album.id}>\n          {album.title} ({album.year})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useFormStatus within Form Component in React\nDESCRIPTION: Illustrates a common pitfall where `useFormStatus` is incorrectly called within the same component that renders the `<form>` element. The Hook only tracks the status of a parent `<form>`, so `pending` will always be `false` in this scenario.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction Form() {\n  // 🚩 `pending` will never be true\n  // useFormStatus does not track the form rendered in this component\n  const { pending } = useFormStatus();\n  return <form action={submit}></form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Handling in React `hydrateRoot`\nDESCRIPTION: This JavaScript snippet shows how to provide custom error handling functions as options to `hydrateRoot`. It defines an `onCaughtError` handler that receives the `error` and `errorInfo` (including `componentStack`). This allows for custom error reporting logic, such as filtering specific errors or sending reports to an external service.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from \"react-dom/client\";\nimport App from \"./App.js\";\nimport { reportCaughtError } from \"./reportError\";\n\nconst container = document.getElementById(\"root\");\nconst root = hydrateRoot(container, <App />, {\n  onCaughtError: (error, errorInfo) => {\n    if (error.message !== \"Known error\") {\n      reportCaughtError({\n        error,\n        componentStack: errorInfo.componentStack,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Form and Image Styling for useImmer Example (CSS)\nDESCRIPTION: This CSS block provides style definitions for form fields and images in the context of the Immer-based React form. It visually matches the previous form CSS, ensuring consistent UI. Can be included directly in the corresponding component's CSS file. Dependencies: none, applies to any HTML labels, inputs, and img tags.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\nimg { width: 200px; height: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Cannot Use Transitions for Controlled Input State Updates in React\nDESCRIPTION: Demonstrates why you can't use Transitions for state that controls an input. Since Transitions are non-blocking but input updates need to be synchronous, this causes a mismatch in behavior.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst [text, setText] = useState('');\n// ...\nfunction handleChange(e) {\n  // ❌ Can't use Transitions for controlled input state\n  startTransition(() => {\n    setText(e.target.value);\n  });\n}\n// ...\nreturn <input value={text} onChange={handleChange} />;\n```\n\n----------------------------------------\n\nTITLE: Upgrading to React 18 createRoot API\nDESCRIPTION: Code comparison showing the migration from ReactDOM.render to the new createRoot API in React 18. This change is required when upgrading applications to React 18.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst container = document.getElementById('root');\nReactDOM.render(<App />, container);\n\n// after\nconst container = document.getElementById('root');\nconst root = ReactDOM.createRoot(container);\nroot.render(<App/>);\n```\n\n----------------------------------------\n\nTITLE: Minimal HTML Structure for React Error Handling Demonstration\nDESCRIPTION: A basic HTML file setting up the root element (`<div id=\"root\">`) for a React application. The comment notes that the initial server content might differ from the client-rendered content, which can be used to intentionally trigger recoverable hydration errors for testing error handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My app</title>\n</head>\n<body>\n<!--\n  Purposefully using HTML content that differs from the server-rendered content to trigger recoverable errors.\n-->\n<div id=\"root\">Server content before hydration.</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initiating DNS Prefetch in a React Event Handler\nDESCRIPTION: Shows how to call `prefetchDNS` inside an event handler function (`onClick`) associated with a user interaction (a button click). This pattern allows starting the DNS lookup process proactively before navigating to a new state or page that depends on resources from the specified domain (`http://example.com`), potentially reducing perceived latency.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/prefetchDNS.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { prefetchDNS } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    prefetchDNS('http://example.com');\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @testing-library/react-native for React Native Testing\nDESCRIPTION: Example of importing @testing-library/react-native, which is recommended for testing React Native applications as an alternative to the deprecated react-test-renderer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-test-renderer.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[@testing-library/react-native](https://callstack.github.io/react-native-testing-library/docs/start/intro)\n```\n\n----------------------------------------\n\nTITLE: Basic Select Box Implementation in React\nDESCRIPTION: Renders a basic select box with option elements. This example shows the fundamental structure of a select component with multiple options that users can choose from.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<select>\n  <option value=\"someOption\">Some option</option>\n  <option value=\"otherOption\">Other option</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Data in JavaScript\nDESCRIPTION: Storing a list of people's information in a JavaScript array for later rendering in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n```\n\n----------------------------------------\n\nTITLE: Using Experimental React Versions for Custom Element Features\nDESCRIPTION: Specifies the package names required to install experimental versions of React and React DOM. These versions offer more comprehensive support for custom elements but are not suitable for production use due to potential instability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nreact@experimental\n```\n\nLANGUAGE: text\nCODE:\n```\nreact-dom@experimental\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons for Timer Component in React (CSS)\nDESCRIPTION: This CSS adds margin around buttons in the corrected React timer implementation for consistency and user interface polish. It matches the styling rules provided for the initial version, ensuring continuity and visual clarity in the UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Function for Incrementing Likes in React\nDESCRIPTION: This snippet shows the implementation of a Server Function that increments a like count. It's marked with the 'use server' directive to indicate it runs on the server. The function maintains a likeCount variable and returns the updated count after each increment.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// actions.js\n'use server';\n\nlet likeCount = 0;\nexport default async function incrementLike() {\n  likeCount++;\n  return likeCount;\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Implementing useReducer Hook in JavaScript\nDESCRIPTION: This snippet provides the complete implementation of the useReducer Hook. The dispatch function calls the reducer with the current state and action, then updates the state with the result.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport function useReducer(reducer, initialState) {\n  const [state, setState] = useState(initialState);\n\n  function dispatch(action) {\n    const nextState = reducer(state, action);\n    setState(nextState);\n  }\n\n  return [state, dispatch];\n}\n```\n\n----------------------------------------\n\nTITLE: Action Object Example in React Reducer Pattern\nDESCRIPTION: An example of an action object passed to dispatch. The action describes what happened (the user's intent) rather than how to update the state, following the reducer pattern convention.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleDeleteTask(taskId) {\n  dispatch(\n    // \"action\" object:\n    {\n      type: 'deleted',\n      id: taskId,\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clock Component with Color and Time Props in React\nDESCRIPTION: A React component that displays the current time with a configurable color. The component receives color and time as props and renders them in an h1 element with the specified styling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Clock({ color, time }) {\n  return (\n    <h1 style={{ color: color }}>\n      {time}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Select Box with Options in React\nDESCRIPTION: Implements a fruit picker component with a select box containing three options. The example demonstrates how to create a labeled select element with multiple options for user selection.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function FruitPicker() {\n  return (\n    <label>\n      Pick a fruit:\n      <select name=\"selectedFruit\">\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </select>\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nselect { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: List Styling CSS\nDESCRIPTION: CSS styles for rendering the list of people with images and information\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nul { list-style-type: none; padding: 0px 10px; }\nli { \n  margin-bottom: 10px; \n  display: grid; \n  grid-template-columns: auto 1fr;\n  gap: 20px;\n  align-items: center;\n}\nimg { width: 100px; height: 100px; border-radius: 50%; }\n```\n\n----------------------------------------\n\nTITLE: Updating useReducer TypeScript Usage\nDESCRIPTION: Examples of how to update useReducer usage in TypeScript for React 19. It shows the new best practices for type inference and how to handle edge cases.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n- useReducer<React.Reducer<State, Action>>(reducer)\n+ useReducer(reducer)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n- useReducer<React.Reducer<State, Action>>(reducer)\n+ useReducer<State, [Action]>(reducer)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n- useReducer<React.Reducer<State, Action>>((state, action) => state)\n+ useReducer((state: State, action: Action) => state)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst reducer = (state: State, action: Action) => state;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Index Page with Navigation\nDESCRIPTION: A component that renders a button to navigate to The Beatles artist page, demonstrating the navigation trigger.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function IndexPage({ navigate }) {\n  return (\n    <button onClick={() => navigate('/the-beatles')}>\n      Open The Beatles artist page\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Feedback Form with Contradictory State Variables in React\nDESCRIPTION: An example form implementation with separate boolean state variables (isSending and isSent) that could potentially contradict each other, demonstrating a suboptimal state structure.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setIsSending(true);\n    await sendMessage(text);\n    setIsSending(false);\n    setIsSent(true);\n  }\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button\n        disabled={isSending}\n        type=\"submit\"\n      >\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getSnapshotBeforeUpdate in a React Class Component\nDESCRIPTION: Demonstrates how to use getSnapshotBeforeUpdate to preserve scroll position in a scrolling list component. The method captures the scroll position before DOM updates and adjusts it in componentDidUpdate.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass ScrollingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Are we adding new items to the list?\n    // Capture the scroll position so we can adjust scroll later.\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // If we have a snapshot value, we've just added new items.\n    // Adjust scroll so these new items don't push the old ones out of view.\n    // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keywords Metadata with React Meta Component\nDESCRIPTION: This snippet demonstrates how to use the <meta> component to add keywords metadata to a document. React will place this metadata in the document's <head> regardless of where it's rendered in the component tree.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<meta name=\"keywords\" content=\"React, JavaScript, semantic markup, html\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Square Components in Board\nDESCRIPTION: Updates the Board component to render multiple Square components, forming the tic-tac-toe game grid.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React 18 with npm\nDESCRIPTION: Command to install the latest version of React and ReactDOM using npm package manager.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Handling Prop Event Handlers with Dependency Issues\nDESCRIPTION: This example shows the problem with receiving an event handler as a prop, where changes to the handler prop cause the effect to re-synchronize unnecessarily.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId, onReceiveMessage }) {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onReceiveMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId, onReceiveMessage]); // ✅ All dependencies declared\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Submitted Data with useFormStatus in React\nDESCRIPTION: Example of a `UsernameForm` component utilizing `useFormStatus` to access both the `pending` state and the submitted `data`. It disables the input and button during submission (`pending`) and displays a message with the requested username (`data.get(\"username\")`). Requires `react-dom`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport {useState, useMemo, useRef} from 'react';\nimport {useFormStatus} from 'react-dom';\n\nexport default function UsernameForm() {\n  const {pending, data} = useFormStatus();\n\n  return (\n    <div>\n      <h3>Request a Username: </h3>\n      <input type=\"text\" name=\"username\" disabled={pending}/>\n      <button type=\"submit\" disabled={pending}>\n        Submit\n      </button>\n      <br />\n      <p>{data ? `Requesting ${data?.get(\"username\")}...`: ''}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing State in a Simple React App\nDESCRIPTION: This JavaScript snippet defines a React component that toggles between displaying a Counter and a paragraph element using a checkbox input. It uses useState for managing the state of a counter and a hover effect on the Counter component. Dependencies include React and useState from the React library.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [isPaused, setIsPaused] = useState(false);\n  return (\n    <div>\n      {isPaused ? (\n        <p>See you later!</p> \n      ) : (\n        <Counter /> \n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isPaused}\n          onChange={e => {\n            setIsPaused(e.target.checked)\n          }}\n        />\n        Take a break\n      </label>\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: External Store Subscription with useEffect\nDESCRIPTION: Shows how to subscribe to external data sources using useEffect, which is not the ideal approach for external store subscriptions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useOnlineStatus() {\n  // Not ideal: Manual store subscription in an Effect\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function updateState() {\n      setIsOnline(navigator.onLine);\n    }\n\n    updateState();\n\n    window.addEventListener('online', updateState);\n    window.addEventListener('offline', updateState);\n    return () => {\n      window.removeEventListener('online', updateState);\n      window.removeEventListener('offline', updateState);\n    };\n  }, []);\n  return isOnline;\n}\n\nfunction ChatIndicator() {\n  const isOnline = useOnlineStatus();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Avatar Component with Dynamic Styling in React\nDESCRIPTION: A full example of a React Avatar component that applies both CSS classes and dynamic inline styles based on user data.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_72\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Avatar({ user }) {\n  return (\n    <img\n      src={user.imageUrl}\n      alt={'Photo of ' + user.name}\n      className=\"avatar\"\n      style={{\n        width: user.imageSize,\n        height: user.imageSize\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Translation Documentation Structure\nDESCRIPTION: Basic markdown structure defining the translations page layout with title and sections for source site, full translations, in-progress translations and contribution guidelines.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/translations.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Translations\n---\n\n<Intro>\n\nReact docs are translated by the global community into many languages all over the world.\n\n</Intro>\n\n## Source site {/*main-site*/}\n\nAll translations are provided from the canonical source docs:\n\n- [English](https://react.dev/) &mdash; [Contribute](https://github.com/reactjs/react.dev/)\n\n## Full translations {/*full-translations*/}\n\n{/* If you are a language maintainer and want to add your language here, finish the \"Core\" translations and edit `deployedTranslations` under `src/utils`. */}\n\n<LanguageList progress=\"complete\" />\n\n## In-progress translations {/*in-progress-translations*/}\n\nFor the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)\n\n<LanguageList progress=\"in-progress\" />\n\n## How to contribute {/*how-to-contribute*/}\n\nYou can contribute to the translation efforts!\n```\n\n----------------------------------------\n\nTITLE: Refactoring Animation Logic into a JavaScript Class\nDESCRIPTION: This code refactors the fade-in animation logic into a JavaScript class, making it reusable and decoupled from React's Effects. The class manages the animation state internally and offers start and stop methods. Dependencies include a DOM node reference, and it abstracts performance timing and requestAnimationFrame handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useFadeIn(ref, 1000);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { FadeInAnimation } from './animation.js';\n\nexport function useFadeIn(ref, duration) {\n  useEffect(() => {\n    const animation = new FadeInAnimation(ref.current);\n    animation.start(duration);\n    return () => {\n      animation.stop();\n    };\n  }, [ref, duration]);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class FadeInAnimation {\n  constructor(node) {\n    this.node = node;\n  }\n  start(duration) {\n    this.duration = duration;\n    this.onProgress(0);\n    this.startTime = performance.now();\n    this.frameId = requestAnimationFrame(() => this.onFrame());\n  }\n  onFrame() {\n    const timePassed = performance.now() - this.startTime;\n    const progress = Math.min(timePassed / this.duration, 1);\n    this.onProgress(progress);\n    if (progress === 1) {\n      this.stop();\n    } else {\n      // We still have more frames to paint\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onProgress(progress) {\n    this.node.style.opacity = progress;\n  }\n  stop() {\n    cancelAnimationFrame(this.frameId);\n    this.startTime = null;\n    this.frameId = null;\n    this.duration = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Awaiting the Prerender Response with a React Node - React with JavaScript\nDESCRIPTION: Demonstrates how to call the `prerender` function with a React node and optional options to obtain the web stream of HTML. This approach is core to server-side static rendering workflows. Dependencies include the `prerender` API, which must be imported from `react-dom/static`, and a compatible environment with Web Streams support. The function returns an object containing the `prelude` property that holds the static HTML stream.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {prelude} = await prerender(reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: React Search Button Component with Event Handler Props\nDESCRIPTION: A React button component that accepts and passes along an onClick event handler. This demonstrates how to forward event handlers from parent components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SearchButton({ onClick }) {\n  return (\n    <button onClick={onClick}>\n      Search\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stylesheets with Link Component in React\nDESCRIPTION: Demonstrates how to link to a stylesheet from a React component. The component will suspend while the stylesheet loads. The precedence prop is required to tell React where to place this stylesheet relative to others in loading order.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/link.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nexport default function SiteMapPage() {\n  return (\n    <ShowRenderedHTML>\n      <link rel=\"stylesheet\" href=\"sitemap.css\" precedence=\"medium\" />\n      <p>...</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from hydrate to hydrateRoot in React 18\nDESCRIPTION: Code comparison showing how to migrate from the old hydrate API to the new hydrateRoot API in React 18 for server-side rendering with hydration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Before\nimport { hydrate } from 'react-dom';\nconst container = document.getElementById('app');\nhydrate(<App tab=\"home\" />, container);\n\n// After\nimport { hydrateRoot } from 'react-dom/client';\nconst container = document.getElementById('app');\nconst root = hydrateRoot(container, <App tab=\"home\" />);\n// Unlike with createRoot, you don't need a separate root.render() call here.\n```\n\n----------------------------------------\n\nTITLE: Defining a Counter Component with Inline State and Interval - React JavaScript\nDESCRIPTION: This snippet defines a functional React component that internally manages a count state and uses the useEffect Hook to increment the count every second with setInterval. No external dependencies are required beyond React (useState, useEffect). Inputs are not configurable; the delay is hardcoded at 1000ms, and the output is a heading with the elapsed seconds. Demo purposes only; not reusable as-is.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  return <h1>Seconds passed: {count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Image URL into Object\nDESCRIPTION: This JavaScript snippet shows refactoring to move the static image URL into a 'person' object property, thus enhancing flexibility and maintainability of the component. It relies on ES6+ features and React component rendering. The 'imageUrl' property fetches the image source dynamically, modifying the component's JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  imageUrl: \"https://i.imgur.com/7vQD0fPs.jpg\",\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src={person.imageUrl}\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of flushSync in React\nDESCRIPTION: The basic syntax for using flushSync to ensure React updates the DOM immediately after state changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/flushSync.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nflushSync(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Mode with flushSync in React\nDESCRIPTION: A complete example showing how to use flushSync with browser print events to ensure the UI updates before the print dialog appears.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/flushSync.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport default function PrintApp() {\n  const [isPrinting, setIsPrinting] = useState(false);\n\n  useEffect(() => {\n    function handleBeforePrint() {\n      flushSync(() => {\n        setIsPrinting(true);\n      })\n    }\n\n    function handleAfterPrint() {\n      setIsPrinting(false);\n    }\n\n    window.addEventListener('beforeprint', handleBeforePrint);\n    window.addEventListener('afterprint', handleAfterPrint);\n    return () => {\n      window.removeEventListener('beforeprint', handleBeforePrint);\n      window.removeEventListener('afterprint', handleAfterPrint);\n    }\n  }, []);\n\n  return (\n    <>\n      <h1>isPrinting: {isPrinting ? 'yes' : 'no'}</h1>\n      <button onClick={() => window.print()}>\n        Print\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Animal List Component with Proper Cleanup\nDESCRIPTION: Corrected implementation that properly cleans up refs when components are unmounted, preventing memory leaks and ensuring scroll functionality works correctly.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nref={(node) => {\n  const list = itemsRef.current;\n  const item = {animal, node};\n  list.push({animal: animal, node});\n  console.log(`✅ Adding animal to the map. Total animals: ${list.length}`);\n  if (list.length > 10) {\n    console.log('❌ Too many animals in the list!');\n  }\n  return () => {\n    list.splice(list.indexOf(item));\n    console.log(`❌ Removing animal from the map. Total animals: ${itemsRef.current.length}`);\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Server Component Build-time Rendering\nDESCRIPTION: Implementation showing how Server Components can render markdown content at build time without client-side libraries.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport marked from 'marked';\nimport sanitizeHtml from 'sanitize-html';\n\nasync function Page({page}) {\n  const content = await file.readFile(`${page}.md`);\n  \n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Preview Rendering with Remarkable - JavaScript\nDESCRIPTION: This React functional component receives a 'markdown' prop and uses the 'remarkable' library to render the Markdown content as HTML. It uses 'dangerouslySetInnerHTML' to insert the rendered HTML into the DOM, making it suitable for read-only preview. The dependencies are React and 'remarkable', and the input is a string containing Markdown syntax. Limitations include possible security issues if untrusted input is rendered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nexport default function MarkdownPreview({ markdown }) {\n  const renderedHTML = md.render(markdown);\n  return <div dangerouslySetInnerHTML={{__html: renderedHTML}} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Textarea with a Name Attribute\nDESCRIPTION: Example of rendering a textarea with a name property, which is necessary when submitting forms.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<textarea name=\"postContent\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Stylesheet Loading with Precedence in React (JavaScript)\nDESCRIPTION: Shows how to use the `precedence` attribute on `<link rel=\\\"stylesheet\\\">` tags within React components (React 19+). React uses this attribute to manage the insertion order in the DOM and ensures stylesheets are loaded before revealing content within Suspense boundaries that depends on them, coordinating loading during both Client Side Rendering and Server Side Rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js {4,5,17}\nfunction ComponentOne() {\n  return (\n    <Suspense fallback=\"loading...\">\n      <link rel=\"stylesheet\" href=\"foo\" precedence=\"default\" />\n      <link rel=\"stylesheet\" href=\"bar\" precedence=\"high\" />\n      <article class=\"foo-class bar-class\">\n        {...}\n      </article>\n    </Suspense>\n  )\n}\n\nfunction ComponentTwo() {\n  return (\n    <div>\n      <p>{...}</p>\n      <link rel=\"stylesheet\" href=\"baz\" precedence=\"default\" />  <-- will be inserted between foo & bar\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Server and Room Variables Outside Component - JavaScript\nDESCRIPTION: This complete example demonstrates moving serverUrl and roomId outside the component to show the effect of removing reactive dependencies from useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding State Reset in Nested Component Functions\nDESCRIPTION: This JavaScript snippet illustrates a pitfall in React's state management where a nested component function causes state reset on re-renders. It demonstrates why component functions should not be nested to prevent loss of input state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MyComponent() {\n  const [counter, setCounter] = useState(0);\n\n  function MyTextField() {\n    const [text, setText] = useState('');\n\n    return (\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <MyTextField />\n      <button onClick={() => {\n        setCounter(counter + 1)\n      }}>Clicked {counter} times</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Textarea with Size Properties\nDESCRIPTION: Example component showing how to render a textarea with rows and cols attributes to control its default size.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function NewPost() {\n  return (\n    <label>\n      Write your post:\n      <textarea name=\"postContent\" rows={4} cols={40} />\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { margin-left: 5px; }\ntextarea { margin-top: 10px; }\nlabel { margin: 10px; }\nlabel, textarea { display: block; }\n```\n\n----------------------------------------\n\nTITLE: Typing useCallback Hook in React with TypeScript\nDESCRIPTION: Demonstrates how to use the useCallback Hook with TypeScript, including type inference and explicit typing for callback parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst handleClick = useCallback(() => {\n  // ...\n}, [todos]);\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { useState, useCallback } from 'react';\n\nexport default function Form() {\n  const [value, setValue] = useState(\"Change me\");\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setValue(event.currentTarget.value);\n  }, [setValue])\n  \n  return (\n    <>\n      <input value={value} onChange={handleChange} />\n      <p>Value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the classnames Library for Conditional Class Names in React\nDESCRIPTION: Example showing how to use the classnames library to conditionally apply multiple CSS classes in React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nimport cn from 'classnames';\n\nfunction Row({ isSelected }) {\n  return (\n    <div className={cn('row', isSelected && 'selected')}>\n      ...\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Updating Object State in React\nDESCRIPTION: The fixed version of the Scoreboard component showing proper immutable state updates. It demonstrates proper usage of the spread operator to create new state objects, ensuring that React detects state changes and triggers re-renders appropriately.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [player, setPlayer] = useState({\n    firstName: 'Ranjani',\n    lastName: 'Shettar',\n    score: 10,\n  });\n\n  function handlePlusClick() {\n    setPlayer({\n      ...player,\n      score: player.score + 1,\n    });\n  }\n\n  function handleFirstNameChange(e) {\n    setPlayer({\n      ...player,\n      firstName: e.target.value,\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPlayer({\n      ...player,\n      lastName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Score: <b>{player.score}</b>\n        {' '}\n        <button onClick={handlePlusClick}>\n          +1\n        </button>\n      </label>\n      <label>\n        First name:\n        <input\n          value={player.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={player.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n    </>\n  );\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Tab Buttons and Pending States - CSS\nDESCRIPTION: This CSS snippet provides margin styling for button and b elements and adds a pending class with muted color for visual feedback during transitions. Designed to be used alongside the above React components for consistent tab button styling. No dependencies, inputs, or outputs; applies visual adjustments based on button and class selectors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin-right: 10px }\nb { display: inline-block; margin-right: 10px; }\n.pending { color: #777; }\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a Component Using useEffect in React\nDESCRIPTION: This example demonstrates the anti-pattern of fetching data inside a component using useEffect, which causes network waterfalls since data fetching starts only after component rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Dashboard() {\n  const [data, setData] = useState(null);\n\n  // ❌ Fetching data in a component causes network waterfalls\n  useEffect(() => {\n    fetch('/api/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return (\n    <div>\n      {data.map(item => <div key={item.id}>{item.name}</div>)}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization in React Component\nDESCRIPTION: Example of acceptable lazy initialization that doesn't affect other components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ExpenseForm() {\n  SuperCalculator.initializeIfNotReady(); // ✅ Good: if it doesn't affect other components\n  // Continue rendering...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffect with Cleanup Function for External Connections\nDESCRIPTION: This example demonstrates how to use useEffect with a cleanup function to safely connect and disconnect from an external system. It shows setting up and tearing down a chat connection when a component mounts and unmounts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection() {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected.');\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Basic taintUniqueValue Usage\nDESCRIPTION: Basic example showing how to use taintUniqueValue to protect a secret key from being passed to client components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintUniqueValue.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass secret keys to the client.',\n  process,\n  process.env.SECRET_KEY\n);\n```\n\n----------------------------------------\n\nTITLE: Refactored Profile Component with Object Props\nDESCRIPTION: Alternative solution using a Profile component that accepts a single person object prop containing all profile data. Shows a more consolidated approach to prop passing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Profile({ person, imageSize = 70 }) {\n  const imageSrc = getImageUrl(person)\n\n  return (\n    <section className=\"profile\">\n      <h2>{person.name}</h2>\n      <img\n        className=\"avatar\"\n        src={imageSrc}\n        alt={person.name}\n        width={imageSize}\n        height={imageSize}\n      />\n      <ul>\n        <li>\n          <b>Profession:</b> {person.profession}\n        </li>\n        <li>\n          <b>Awards: {person.awards.length} </b>\n          ({person.awards.join(', ')})\n        </li>\n        <li>\n          <b>Discovered: </b>\n          {person.discovery}\n        </li>\n      </ul>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for React Component Presentation\nDESCRIPTION: Provides CSS styles for a React component, adjusting the component's HTML structure appearance by removing padding and margins from body elements and styling images to produce a circular effect. Ensures the UI is aesthetically pleasing and consistent.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\nbody { padding: 0; margin: 0 }\nbody > div > div { padding: 20px; }\n.avatar { border-radius: 50%; }\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Class Names in React Components\nDESCRIPTION: Example showing how to apply a CSS class to a React component using the className attribute, similar to HTML's class attribute.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n<img className=\"avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting getSnapshot Errors in React\nDESCRIPTION: Explains how to avoid infinite loops by ensuring that getSnapshot returns cached or immutable data and only returns new objects when the store data actually changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getSnapshot() {\n  // 🔴 Do not return always different objects from getSnapshot\n  return {\n    todos: myStore.todos\n  };\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getSnapshot() {\n  // ✅ You can return immutable data\n  return myStore.todos;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSX Namespace in TypeScript\nDESCRIPTION: Example of how to update the JSX namespace in TypeScript for React 19. It shows how to wrap module augmentation of the JSX namespace in a declare module statement.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// global.d.ts\n+ declare module \"react\" {\n    namespace JSX {\n      interface IntrinsicElements {\n        \"my-element\": {\n          myElementProps: string;\n        };\n      }\n    }\n+ }\n```\n\n----------------------------------------\n\nTITLE: Preloading a Module During Component Rendering in React (JavaScript)\nDESCRIPTION: Shows how to call `preloadModule` directly within the body of a React component's render logic. This hints the browser to download the module when the component mounts or renders, anticipating its use by the component or its children. Requires `react-dom`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preloadModule.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { preloadModule } from 'react-dom';\n\nfunction AppRoot() {\n  preloadModule(\"https://example.com/module.js\", {as: \"script\"});\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component with Individual State Management\nDESCRIPTION: React component showing form field management with individual state variables.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('Mary');\n  const [lastName, setLastName] = useState('Poppins');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input value={firstName} onChange={handleFirstNameChange} />\n      </label>\n      <label>\n        Last name:\n        <input value={lastName} onChange={handleLastNameChange} />\n      </label>\n      <p><b>Good morning, {firstName} {lastName}.</b></p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing event dispatch with act in JavaScript\nDESCRIPTION: This example details testing event handling in a React component by wrapping the render and event dispatch functions in separate act calls. This method ensures all interactions and updates are properly captured.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/act.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {act} from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport Counter from './Counter';\n\nit.only('can render and update a counter', async () => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n  \n  await act( async () => {\n    ReactDOMClient.createRoot(container).render(<Counter />);\n  });\n  \n  // ✅ Dispatch the event inside act().\n  await act(async () => {\n    button.dispatchEvent(new MouseEvent('click', { bubbles: true }));\n  });\n\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 1 times');\n  expect(document.title).toBe('You clicked 1 times');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in a React Mail Client\nDESCRIPTION: A React component for a mail client that initially supports selecting only one letter at a time using a single selectedId state variable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { letters } from './data.js';\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n  const [selectedId, setSelectedId] = useState(null);\n\n  // TODO: allow multiple selection\n  const selectedCount = 1;\n\n  function handleToggle(toggledId) {\n    // TODO: allow multiple selection\n    setSelectedId(toggledId);\n  }\n\n  return (\n    <>\n      <h2>Inbox</h2>\n      <ul>\n        {letters.map(letter => (\n          <Letter\n            key={letter.id}\n            letter={letter}\n            isSelected={\n              // TODO: allow multiple selection\n              letter.id === selectedId\n            }\n            onToggle={handleToggle}\n          />\n        ))}\n        <hr />\n        <p>\n          <b>\n            You selected {selectedCount} letters\n          </b>\n        </p>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Double-Invocation with useMemo in React\nDESCRIPTION: Example showing how React's Strict Mode causes component functions and calculations to run twice. This behavior helps identify impure functions but doesn't affect pure code.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList({ todos, tab }) {\n  // This component function will run twice for every render.\n\n  const visibleTodos = useMemo(() => {\n    // This calculation will run twice if any of the dependencies change.\n    return filterTodos(todos, tab);\n  }, [todos, tab]);\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Basic createElement Function Signature in React\nDESCRIPTION: The fundamental syntax for the createElement function that creates React elements programmatically. It accepts type, props, and children parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createElement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = createElement(type, props, ...children)\n```\n\n----------------------------------------\n\nTITLE: Using Client APIs in a React Component\nDESCRIPTION: This Circle component uses DOM APIs to manipulate a canvas element, requiring it to be a Client Component with the 'use client' directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport {useRef, useEffect} from 'react';\n\nexport default function Circle() {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    const canvas = ref.current;\n    const context = canvas.getContext('2d');\n    context.reset();\n    context.beginPath();\n    context.arc(100, 75, 50, 0, 2 * Math.PI);\n    context.stroke();\n  });\n  return <canvas ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Form Setup for useFormStatus Data Display in React\nDESCRIPTION: Shows the setup for a parent `App` component that renders the `UsernameForm`. It includes a `<form>` element with an asynchronous `action` handler that calls an external `submitForm` function and then resets the form fields using a `ref` after successful submission.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport UsernameForm from './UsernameForm';\nimport { submitForm } from \"./actions.js\";\nimport {useRef} from 'react';\n\nexport default function App() {\n  const ref = useRef(null);\n  return (\n    <form ref={ref} action={async (formData) => {\n      await submitForm(formData);\n      ref.current.reset();\n    }}>\n      <UsernameForm />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloned React Element with cloneElement\nDESCRIPTION: Demonstrates how to use cloneElement to create a new React element based on an existing one, with modified props and children.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst clonedElement = cloneElement(\n  <Row title=\"Cabbage\">\n    Hello\n  </Row>,\n  { isHighlighted: true },\n  'Goodbye'\n);\n\nconsole.log(clonedElement); // <Row title=\"Cabbage\" isHighlighted={true}>Goodbye</Row>\n```\n\n----------------------------------------\n\nTITLE: Using Inline CSS Styles with Double Curly Braces in JSX\nDESCRIPTION: Shows how to use \"double curly braces\" to pass a JavaScript object for inline CSS styles in JSX. The outer braces open JavaScript, and the inner braces define the object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { padding: 0; margin: 0 }\nul { padding: 20px 20px 20px 40px; margin: 0; }\n```\n\n----------------------------------------\n\nTITLE: Example Server-Rendered HTML for Hydration – React App – HTML\nDESCRIPTION: This HTML snippet provides a sample of the server-generated markup inside the app root (div#root) that will be hydrated by React. It includes a greeting and a button with dynamic content to illustrate interactivity post-hydration. The HTML is meant to match what the server rendered for the client-side hydration to succeed. Input: none. Output: rendered as initial DOM.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!--\n  HTML content inside <div id=\\\"root\\\">...</div>\n  was generated from App by react-dom/server.\n-->\n<div id=\\\"root\\\"><h1>Hello, world!</h1><button>You clicked me <!-- -->0<!-- --> times</button></div>\n```\n\n----------------------------------------\n\nTITLE: React Traffic Light Component\nDESCRIPTION: Implements a traffic light toggle with state management and conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TrafficLight() {\n  const [walk, setWalk] = useState(true);\n\n  function handleClick() {\n    setWalk(!walk);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Change to {walk ? 'Stop' : 'Walk'}\n      </button>\n      <h1 style={{\n        color: walk ? 'darkgreen' : 'darkred'\n      }}>\n        {walk ? 'Walk' : 'Stop'}\n      </h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Copyright Component in React\nDESCRIPTION: A basic component that renders a copyright notice with the provided year parameter. It uses a 'small' CSS class to style the text with a smaller font size.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Copyright({year}) {\n  return <p className='small'>©️ {year}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Gallery Component with Embedded Profile Component\nDESCRIPTION: The Gallery file containing both the Profile component (which needs to be moved) and the Gallery component. It exports Profile as a named export and Gallery as a default export.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Move me to Profile.js!\nexport function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Asset Map Implementation\nDESCRIPTION: Shows how to pass asset map data to the client and initialize hydration with the same asset configuration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App assetMap={window.assetMap} />);\n```\n\n----------------------------------------\n\nTITLE: Creating Background Component for React Application\nDESCRIPTION: This snippet defines a simple Background component that renders a div with a specific size and color, positioned based on the provided coordinates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Background({\n  position\n}) {\n  return (\n    <div style={{\n      position: 'absolute',\n      transform: `translate(\n        ${position.x}px,\n        ${position.y}px\n      )`,\n      width: 250,\n      height: 250,\n      backgroundColor: 'rgba(200, 200, 0, 0.2)',\n    }} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Label and Theme (Duplicate)\nDESCRIPTION: This CSS code is identical to the previous CSS snippet and provides basic styling for the label and theme classes (`.dark`, `.light`). It's included in the second Sandpack example as well.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n```css\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.dark {\n  background-color: black;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Ref Callback Return in TypeScript\nDESCRIPTION: Example of how to fix a ref callback to comply with the new TypeScript requirements in React 19. It shows how to avoid implicit returns that could be mistaken for cleanup functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n- <div ref={current => (instance = current)} />\n+ <div ref={current => {instance = current}} />\n```\n\n----------------------------------------\n\nTITLE: Providing an Accessible Label for a Textarea\nDESCRIPTION: Example showing how to properly associate a label with a textarea using useId to generate a unique ID for accessibility.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useId } from 'react';\n\nexport default function Form() {\n  const postTextAreaId = useId();\n  return (\n    <>\n      <label htmlFor={postTextAreaId}>\n        Write your post:\n      </label>\n      <textarea\n        id={postTextAreaId}\n        name=\"postContent\"\n        rows={4}\n        cols={40}\n      />\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Clock Component in JSX\nDESCRIPTION: This code defines a Clock component that receives a time prop and re-renders with different props. It demonstrates how React efficiently updates only the necessary parts of the DOM during re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Clock({ time }) {\n  return (\n    <>\n      <h1>{time}</h1>\n      <input />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Panel Component Implementation\nDESCRIPTION: Simple wrapper component that provides styling and structure for child content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Panel({ children }) {\n  return (\n    <section className=\"panel\">\n      {children}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Object State Correctly in React - JavaScript\nDESCRIPTION: Shows the correct approach to update an object in React state: create a new object with updated fields using spread syntax, then set the new state. Ensures React can track changes properly. Dependency: existing object state variable and setter. Inputs: updated field values. Output: new state object. Limitation: Requires spreading all relevant old fields.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \\u2705 Replace state with a new object\\nsetForm({\\n  ...form,\\n  firstName: 'Taylor'\\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Custom Hook Example\nDESCRIPTION: CSS styles for the custom Hook example, setting display properties for inputs and margin for buttons to improve the layout and user interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies for Immer Example\nDESCRIPTION: Package configuration for a React application using Immer and use-immer for state management, defining the necessary dependencies and scripts for the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies for a React Application - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import essential dependencies required for bootstrapping a React application. It includes the React core library, ReactDOM for rendering components to the DOM, importing global CSS styles, and importing the main App component. No rendering logic is shown here—just the crucial imports needed at the top of an entry-point file like index.js. Dependencies: react, react-dom, and a compatible bundler that supports CSS imports (such as webpack or Vite).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\n```\n\n----------------------------------------\n\nTITLE: Migrating from render to createRoot in React 18\nDESCRIPTION: Code comparison showing how to migrate from the old ReactDOM.render API to the new createRoot API in React 18. This new API enables the concurrent renderer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Before\nimport { render } from 'react-dom';\nconst container = document.getElementById('app');\nrender(<App tab=\"home\" />, container);\n\n// After\nimport { createRoot } from 'react-dom/client';\nconst container = document.getElementById('app');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(<App tab=\"home\" />);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rsbuild for React Project\nDESCRIPTION: Command to create a new React project using Rsbuild, an Rspack-powered build tool optimized for React applications with built-in support for fast refresh, JSX, TypeScript, and styling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/build-a-react-app-from-scratch.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-rsbuild --template react\n```\n\n----------------------------------------\n\nTITLE: Implementing Move History Data Structure in React\nDESCRIPTION: Shows the structure of the history array used to store game moves in a tic-tac-toe board. Each element represents a board state as an array of nine cells.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n[\n  // Before first move\n  [null, null, null, null, null, null, null, null, null],\n  // After first move\n  [null, null, null, null, 'X', null, null, null, null],\n  // After second move\n  [null, null, null, null, 'X', null, null, null, 'O'],\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Board and Square Styles in CSS for Tic-Tac-Toe Layout - CSS\nDESCRIPTION: This CSS snippet provides all the styling rules necessary for the React tic-tac-toe board. It sets box sizing globally, applies basic page typography and spacing, styles '.square' buttons for consistent sizing and appearance, lays out '.board-row' using clearfix, and sets up optional styles for status messages and game layout. No JavaScript required; dependencies: just correct class names in your HTML/React. Limitations: requires HTML structure to match expected classes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Up Events with onMouseUp in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointing device button is released over an element. It expects a `MouseEvent` handler function and corresponds to the browser's `mouseup` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseUp\n```\n\n----------------------------------------\n\nTITLE: JSX Section Usage with Context\nDESCRIPTION: Updated JSX markup using context-based level management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Section level={4}>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Manipulating DOM Elements with Refs in React\nDESCRIPTION: This snippet demonstrates how to access and manipulate DOM elements using refs in React. It shows how to focus an input element when a button is clicked by creating a ref and attaching it to the input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified useCallback Implementation\nDESCRIPTION: Shows how useCallback could be implemented using useMemo, demonstrating that useCallback is essentially a specialized version of useMemo for functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useCallback(fn, dependencies) {\n  return useMemo(() => fn, dependencies);\n}\n```\n\n----------------------------------------\n\nTITLE: Story Tray Styling\nDESCRIPTION: CSS styles for the story tray component defining the layout and appearance of the story items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nul {\n  margin: 0;\n  list-style-type: none;\n}\n\nli {\n  border: 1px solid #aaa;\n  border-radius: 6px;\n  float: left;\n  margin: 5px;\n  margin-bottom: 20px;\n  padding: 5px;\n  width: 70px;\n  height: 100px;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Search Input Component in React\nDESCRIPTION: A basic React component that renders an input field with a placeholder text. This component is defined in a separate file to demonstrate component modularity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SearchInput() {\n  return (\n    <input\n      placeholder=\"Looking for something?\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Prop Handling Using Object Assignment in React\nDESCRIPTION: This example demonstrates another correct approach to handle props using Object.assign(). It creates a new object with all props, then removes the 'layout' prop before passing to the div element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/unknown-prop.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyDiv(props) {\n  const divProps = Object.assign({}, props);\n  delete divProps.layout;\n\n  if (props.layout === 'horizontal') {\n    return <div {...divProps} style={getHorizontalStyle()} />\n  } else {\n    return <div {...divProps} style={getVerticalStyle()} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic isValidElement Usage\nDESCRIPTION: Simple example showing how to use isValidElement to check if a value is a React element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/isValidElement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isElement = isValidElement(value)\n```\n\n----------------------------------------\n\nTITLE: React Element Validation Examples\nDESCRIPTION: Examples demonstrating isValidElement with different types of values, showing which are considered valid React elements and which are not.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/isValidElement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isValidElement, createElement } from 'react';\n\n// ✅ React elements\nconsole.log(isValidElement(<p />)); // true\nconsole.log(isValidElement(createElement('p'))); // true\n\n// ❌ Not React elements\nconsole.log(isValidElement(25)); // false\nconsole.log(isValidElement('Hello')); // false\nconsole.log(isValidElement({ age: 42 })); // false\n```\n\n----------------------------------------\n\nTITLE: Incorrect Effect Cleanup Implementation in React\nDESCRIPTION: This example shows an anti-pattern where an effect has cleanup logic without corresponding setup logic. Cleanup functions should be symmetrical to setup code and undo what the setup did.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  // 🔴 Avoid: Cleanup logic without corresponding setup logic\n  return () => {\n    doSomething();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies for Existing Projects\nDESCRIPTION: Basic npm command to install React and ReactDOM packages needed for integrating React into an existing project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Rendering Mapped Array in React Component\nDESCRIPTION: Returning mapped list items wrapped in an unordered list element from a React component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn <ul>{listItems}</ul>;\n```\n\n----------------------------------------\n\nTITLE: Moving Reactive Values Inside Effect\nDESCRIPTION: Another solution to make values non-reactive by declaring them inside the effect, ensuring they're not recalculated during rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom() {\n  useEffect(() => {\n    const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\n    const roomId = 'general'; // roomId is not reactive\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mutation in useMemo Calculation in React\nDESCRIPTION: An example of an impure calculation function that mutates a prop, which is problematic especially in Strict Mode where the function is called twice and would cause double mutations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n  const visibleTodos = useMemo(() => {\n    // 🚩 Mistake: mutating a prop\n    todos.push({ id: 'last', text: 'Go for a walk!' });\n    const filtered = filterTodos(todos, tab);\n    return filtered;\n  }, [todos, tab]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Page Component\nDESCRIPTION: ProductPage component that handles form submission and renders ShippingForm with theme styling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShippingForm from './ShippingForm.js';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n  function handleSubmit(orderDetails) {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }\n\n  return (\n    <div className={theme}>\n      <ShippingForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n\nfunction post(url, data) {\n  // Imagine this sends a request...\n  console.log('POST /' + url);\n  console.log(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Square Click Event to Board Handler\nDESCRIPTION: Shows how to pass the handleClick function from the Board component to a Square component through the onSquareClick prop, establishing parent-child communication.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={handleClick} />\n        //...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial App Component with Inconsistent Imports\nDESCRIPTION: The initial App component that imports both Gallery and Profile from the same file, demonstrating a pattern that will be refactored.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from './Gallery.js';\nimport { Profile } from './Gallery.js';\n\nexport default function App() {\n  return (\n    <div>\n      <Profile />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for React Compiler\nDESCRIPTION: Configuration for integrating React Compiler with Vite using vite-plugin-react.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nconst ReactCompilerConfig = { /* ... */ };\n\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      react({\n        babel: {\n          plugins: [\n            [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n          ],\n        },\n      }),\n    ],\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Deeply Nested Travel Plan Data Structure in JavaScript\nDESCRIPTION: This snippet shows the initial travel plan data structure using a deeply nested object. It represents a hierarchical structure of places, including planets, continents, and countries.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialTravelPlan = {\n  id: 0,\n  title: '(Root)',\n  childPlaces: [{\n    id: 1,\n    title: 'Earth',\n    childPlaces: [{\n      id: 2,\n      title: 'Africa',\n      childPlaces: [{\n        id: 3,\n        title: 'Botswana',\n        childPlaces: []\n      }, {\n        id: 4,\n        title: 'Egypt',\n        childPlaces: []\n      }, {\n        id: 5,\n        title: 'Kenya',\n        childPlaces: []\n      }, {\n        id: 6,\n        title: 'Madagascar',\n        childPlaces: []\n      }, {\n        id: 7,\n        title: 'Morocco',\n        childPlaces: []\n      }, {\n        id: 8,\n        title: 'Nigeria',\n        childPlaces: []\n      }, {\n        id: 9,\n        title: 'South Africa',\n        childPlaces: []\n      }]\n    }, {\n      id: 10,\n      title: 'Americas',\n      childPlaces: [{\n        id: 11,\n        title: 'Argentina',\n        childPlaces: []\n      }, {\n        id: 12,\n        title: 'Brazil',\n        childPlaces: []\n      }, {\n        id: 13,\n        title: 'Barbados',\n        childPlaces: []\n      }, {\n        id: 14,\n        title: 'Canada',\n        childPlaces: []\n      }, {\n        id: 15,\n        title: 'Jamaica',\n        childPlaces: []\n      }, {\n        id: 16,\n        title: 'Mexico',\n        childPlaces: []\n      }, {\n        id: 17,\n        title: 'Trinidad and Tobago',\n        childPlaces: []\n      }, {\n        id: 18,\n        title: 'Venezuela',\n        childPlaces: []\n      }]\n    }, {\n      id: 19,\n      title: 'Asia',\n      childPlaces: [{\n        id: 20,\n        title: 'China',\n        childPlaces: []\n      }, {\n        id: 21,\n        title: 'India',\n        childPlaces: []\n      }, {\n        id: 22,\n        title: 'Singapore',\n        childPlaces: []\n      }, {\n        id: 23,\n        title: 'South Korea',\n        childPlaces: []\n      }, {\n        id: 24,\n        title: 'Thailand',\n        childPlaces: []\n      }, {\n        id: 25,\n        title: 'Vietnam',\n        childPlaces: []\n      }]\n    }, {\n      id: 26,\n      title: 'Europe',\n      childPlaces: [{\n        id: 27,\n        title: 'Croatia',\n        childPlaces: [],\n      }, {\n        id: 28,\n        title: 'France',\n        childPlaces: [],\n      }, {\n        id: 29,\n        title: 'Germany',\n        childPlaces: [],\n      }, {\n        id: 30,\n        title: 'Italy',\n        childPlaces: [],\n      }, {\n        id: 31,\n        title: 'Portugal',\n        childPlaces: [],\n      }, {\n        id: 32,\n        title: 'Spain',\n        childPlaces: [],\n      }, {\n        id: 33,\n        title: 'Turkey',\n        childPlaces: [],\n      }]\n    }, {\n      id: 34,\n      title: 'Oceania',\n      childPlaces: [{\n        id: 35,\n        title: 'Australia',\n        childPlaces: [],\n      }, {\n        id: 36,\n        title: 'Bora Bora (French Polynesia)',\n        childPlaces: [],\n      }, {\n        id: 37,\n        title: 'Easter Island (Chile)',\n        childPlaces: [],\n      }, {\n        id: 38,\n        title: 'Fiji',\n        childPlaces: [],\n      }, {\n        id: 39,\n        title: 'Hawaii (the USA)',\n        childPlaces: [],\n      }, {\n        id: 40,\n        title: 'New Zealand',\n        childPlaces: [],\n      }, {\n        id: 41,\n        title: 'Vanuatu',\n        childPlaces: [],\n      }]\n    }]\n  }, {\n    id: 42,\n    title: 'Moon',\n    childPlaces: [{\n      id: 43,\n      title: 'Rheita',\n      childPlaces: []\n    }, {\n      id: 44,\n      title: 'Piccolomini',\n      childPlaces: []\n    }, {\n      id: 45,\n      title: 'Tycho',\n      childPlaces: []\n    }]\n  }, {\n    id: 46,\n    title: 'Mars',\n    childPlaces: [{\n      id: 47,\n      title: 'Corn Town',\n      childPlaces: []\n    }, {\n      id: 48,\n      title: 'Green Hill',\n      childPlaces: []      \n    }]\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Out Capture Events with onMouseOutCapture in React (JSX)\nDESCRIPTION: React prop for handling mouse out events during the capture phase. This is the capture phase version of `onMouseOut`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseOutCapture\n```\n\n----------------------------------------\n\nTITLE: Preiniting Stylesheet in an Event Handler in React (JavaScript)\nDESCRIPTION: This snippet shows calling preinit inside an event handler before triggering application logic such as a wizard start. It imports preinit from 'react-dom' and invokes it with a CSS URL and options {as: \"style\"}, kicking off download before state changes. Requires react-dom. Inputs: stylesheet URL; side effect is resource being downloaded sooner. Use when early resource fetching is needed before costly UI transitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinit.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { preinit } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preinit(\"https://example.com/wizardStyles.css\", {as: \"style\"});\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using preinitModule in a React Event Handler\nDESCRIPTION: Demonstrates how to use preinitModule within an event handler in a React component. This allows preloading a module before transitioning to a new page or state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinitModule.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preinitModule } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context for Components Using 'use'\nDESCRIPTION: Shows how to wrap components with a context provider to make values available to descendant components that call use(ThemeContext).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction MyPage() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Form() {\n  // ... renders buttons inside ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Structure with Separate Components\nDESCRIPTION: A React application structure with separate component files. The main App component imports and renders SearchButton and SearchInput components, demonstrating component composition.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport SearchButton from './SearchButton.js';\nimport SearchInput from './SearchInput.js';\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchButton />\n      </nav>\n      <SearchInput />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected useEffect with Proper Dependencies\nDESCRIPTION: The fixed version of the useEffect hook that correctly specifies roomId and serverUrl as dependencies, ensuring the effect re-runs when these values change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) { // roomId is reactive\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Down Events with onPointerDown in React (JSX)\nDESCRIPTION: React prop for handling the event when a pointer becomes active (e.g., finger touches screen, mouse button pressed). It expects a `PointerEvent` handler function and corresponds to the browser's `pointerdown` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerDown\n```\n\n----------------------------------------\n\nTITLE: Migrating from React.createFactory to JSX\nDESCRIPTION: This snippet demonstrates how to replace the deprecated React.createFactory method with direct JSX usage. The createFactory method is no longer needed with modern JSX support.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\nconst button = <button />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Approach Using Refs to Prevent Effect Reruns\nDESCRIPTION: An incorrect implementation that uses refs to prevent the effect from running twice in development, which doesn't actually fix the underlying cleanup issue.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectionRef = useRef(null);\nuseEffect(() => {\n  // 🚩 This wont fix the bug!!!\n  if (!connectionRef.current) {\n    connectionRef.current = createConnection();\n    connectionRef.current.connect();\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Reporting Functions for React\nDESCRIPTION: This JavaScript module defines helper functions (`onCaughtErrorProd`, `onUncaughtErrorProd`, `onRecoverableErrorProd`) intended for production error handling with React's `hydrateRoot`. It includes a base `reportError` function (using `console.error` for demonstration) that logs the error type, message, and component stack. These handlers can be customized to send error data to monitoring services.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reportError({ type, error, errorInfo }) {\n  // The specific implementation is up to you.\n  // `console.error()` is only used for demonstration purposes.\n  console.error(type, error, \"Component Stack: \");\n  console.error(\"Component Stack: \", errorInfo.componentStack);\n}\n\nexport function onCaughtErrorProd(error, errorInfo) {\n  if (error.message !== \"Known error\") {\n    reportError({ type: \"Caught\", error, errorInfo });\n  }\n}\n\nexport function onUncaughtErrorProd(error, errorInfo) {\n  reportError({ type: \"Uncaught\", error, errorInfo });\n}\n\nexport function onRecoverableErrorProd(error, errorInfo) {\n  reportError({ type: \"Recoverable\", error, errorInfo });\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Arrays with JavaScript map Method\nDESCRIPTION: Example of using the JavaScript map method to transform an array by doubling each value. This demonstrates the pattern that will be used to transform game history into UI elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\n[1, 2, 3].map((x) => x * 2) // [2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Input Element\nDESCRIPTION: Applies a 10-pixel margin around input elements to provide some spacing in the layout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\ninput { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Tic-Tac-Toe Game Components\nDESCRIPTION: CSS styles for the Tic-Tac-Toe game components including board layout, square styling, and game information display. Implements responsive design and visual formatting for the game interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Enter Capture Events with onDragEnterCapture in React (JSX)\nDESCRIPTION: React prop for handling drag enter events during the capture phase. This is the capture phase version of `onDragEnter`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nonDragEnterCapture\n```\n\n----------------------------------------\n\nTITLE: Importing useRef Hook in React\nDESCRIPTION: This snippet shows how to import the useRef Hook from React, which is used to create refs in functional components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Synchronous DOM Updates with flushSync\nDESCRIPTION: Demonstrates using flushSync to ensure immediate DOM updates when working with refs and state updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    flushSync(() => {\n      setText('');\n      setTodos([ ...todos, newTodo]);\n    });\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>\n        Add\n      </button>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Promise Error Handling with Catch Method\nDESCRIPTION: Demonstrates handling Promise rejection using the catch method to provide an alternative value when a Promise is rejected.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Message } from './message.js';\n\nexport default function App() {\n  const messagePromise = new Promise((resolve, reject) => {\n    reject();\n  }).catch(() => {\n    return \"no new message found.\";\n  });\n\n  return (\n    <Suspense fallback={<p>waiting for message...</p>}>\n      <Message messagePromise={messagePromise} />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Tooltip Example\nDESCRIPTION: This CSS snippet provides minimal styling for the tooltip element used in the `useLayoutEffect` example. It sets the text color, background color, border radius, and padding to make the tooltip visually distinct.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.tooltip {\n  color: white;\n  background: #222;\n  border-radius: 4px;\n  padding: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Refactoring with Details Wrapper\nDESCRIPTION: Example of refactoring components under Suspense boundary into a wrapper component while maintaining coordinated loading behavior.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<Loading />}>\n  <Details artistId={artist.id} />\n</Suspense>\n\nfunction Details({ artistId }) {\n  return (\n    <>\n      <Biography artistId={artistId} />\n      <Panel>\n        <Albums artistId={artistId} />\n      </Panel>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested State Object for Artworks in React (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates initializing component state with useState for a nested object, representing a person with artwork details such as title, city, and image. While no update logic is included, it provides the basis for handling nested state updates in subsequent examples. Intended for React components, prerequisites are import of useState and usage within a React function component. Inputs/outputs: initializes an object for further state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst [person, setPerson] = useState({\n  name: 'Niki de Saint Phalle',\n  artwork: {\n    title: 'Blue Nana',\n    city: 'Hamburg',\n    image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Hook with useInsertionEffect in JavaScript\nDESCRIPTION: Demonstrates a basic implementation pattern for `useInsertionEffect` within a custom hook (`useCSS`). This pattern is intended for CSS-in-JS libraries to inject style tags into the DOM before layout calculations. Requires importing `useInsertionEffect` from React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useInsertionEffect.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useInsertionEffect } from 'react';\n\n// Inside your CSS-in-JS library\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // ... inject <style> tags here ...\n  });\n  return rule;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect DOM Mutation\nDESCRIPTION: Demonstrates incorrect direct DOM manipulation within a React component render function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductDetailPage({ product }) {\n  document.title = product.title; // 🔴 Bad: Changes the DOM\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Dependencies Between Renders Using Browser Console\nDESCRIPTION: This code snippet shows how to use Object.is() in the browser console to compare dependencies between different renders, helping identify which dependency is causing an effect to re-run.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n```\n\n----------------------------------------\n\nTITLE: Missing Dependency Array in useMemo\nDESCRIPTION: An example showing how omitting the dependency array in useMemo causes the calculation to re-run on every render, defeating the purpose of memoization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList({ todos, tab }) {\n  // 🔴 Recalculates every time: no dependency array\n  const visibleTodos = useMemo(() => filterTodos(todos, tab));\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Server Function with Return Value Handling\nDESCRIPTION: Example of a server function implementation with return value handling for username requests.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use server';\n\nexport default async function requestUsername(formData) {\n  const username = formData.get('username');\n  if (canRequest(username)) {\n    // ...\n    return 'successful';\n  }\n  return 'failed';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct useMemo Implementation with Dependency Array\nDESCRIPTION: The correct implementation of useMemo with a dependency array specified, ensuring the calculation only re-runs when the dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList({ todos, tab }) {\n  // ✅ Does not recalculate unnecessarily\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Basic React App Entry Point\nDESCRIPTION: Initializes a React application root and demonstrates the difference between using and not using StrictMode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport {StrictMode} from 'react';\nimport './styles.css';\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Chat Connection Service Implementation\nDESCRIPTION: Implementation of encrypted and unencrypted chat connection services with mock console logging functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createEncryptedConnection(roomId) {\n  return {\n    connect() {\n      console.log('✅ 🔐 Connecting to \"' + roomId + '... (encrypted)');\n    },\n    disconnect() {\n      console.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n    }\n  };\n}\n\nexport function createUnencryptedConnection(roomId) {\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '... (unencrypted)');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Meetup List with Markdown Headers and Links\nDESCRIPTION: This snippet demonstrates how the meetup list is structured using Markdown headers for countries and unordered lists for cities, with links to meetup pages.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/meetups.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## Albania {/*albania*/}\n* [Tirana](https://www.meetup.com/React-User-Group-Albania/)\n\n## Argentina {/*argentina*/}\n* [Buenos Aires](https://www.meetup.com/es/React-en-Buenos-Aires)\n* [Rosario](https://www.meetup.com/es/reactrosario)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Idempotent Code in React Component\nDESCRIPTION: This snippet shows an example of non-idempotent code in a React component, where using 'new Date()' directly in the render function leads to inconsistent results.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Clock() {\n  const time = new Date(); // 🔴 Bad: always returns a different result!\n  return <span>{time.toLocaleString()}</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Suspense-Enabled Data Fetching in JavaScript\nDESCRIPTION: Provides utility functions (`fetchData`, `getData`, `getAlbums`) designed to simulate asynchronous data fetching compatible with React Suspense when used with the `use` hook. It includes a simple in-memory cache (`Map`) to avoid re-fetching and uses `async`/`await` with `setTimeout` to introduce an artificial network delay, making the loading state (and thus the Suspense fallback) visible during the demo. This pattern is illustrative and depends on framework integration or future React APIs for real-world use.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Note: the way you would do data fetching depends on\n// the framework that you use together with Suspense.\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n  if (!cache.has(url)) {\n    cache.set(url, getData(url));\n  }\n  return cache.get(url);\n}\n\nasync function getData(url) {\n  if (url === '/the-beatles/albums') {\n    return await getAlbums();\n  } else {\n    throw Error('Not implemented');\n  }\n}\n\nasync function getAlbums() {\n  // Add a fake delay to make waiting noticeable.\n  await new Promise(resolve => {\n    setTimeout(resolve, 3000);\n  });\n\n  return [{\n    id: 13,\n    title: 'Let It Be',\n    year: 1970\n  }, {\n    id: 12,\n    title: 'Abbey Road',\n    year: 1969\n  }, {\n    id: 11,\n    title: 'Yellow Submarine',\n    year: 1969\n  }, {\n    id: 10,\n    title: 'The Beatles',\n    year: 1968\n  }, {\n    id: 9,\n    title: 'Magical Mystery Tour',\n    year: 1967\n  }, {\n    id: 8,\n    title: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n    year: 1967\n  }, {\n    id: 7,\n    title: 'Revolver',\n    year: 1966\n  }, {\n    id: 6,\n    title: 'Rubber Soul',\n    year: 1965\n  }, {\n    id: 5,\n    title: 'Help!',\n    year: 1965\n  }, {\n    id: 4,\n    title: 'Beatles For Sale',\n    year: 1964\n  }, {\n    id: 3,\n    title: 'A Hard Day\\'s Night',\n    year: 1964\n  }, {\n    id: 2,\n    title: 'With The Beatles',\n    year: 1963\n  }, {\n    id: 1,\n    title: 'Please Please Me',\n    year: 1963\n  }];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the useInsertionEffect Hook Syntax in JavaScript\nDESCRIPTION: Provides the basic syntax signature for the `useInsertionEffect` hook in React. It accepts a `setup` function and an optional `dependencies` array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useInsertionEffect.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nuseInsertionEffect(setup, dependencies?)\n```\n\n----------------------------------------\n\nTITLE: Profile Page with Context-Aware Components\nDESCRIPTION: Example of context passing through intermediate components in a profile page layout\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ProfilePage() {\n  return (\n    <Section>\n      <Heading>My Profile</Heading>\n      <Post\n        title=\"Hello traveller!\"\n        body=\"Read about my adventures.\"\n      />\n      <AllPosts />\n    </Section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid React Elements Check\nDESCRIPTION: Examples demonstrating various values that are not considered React elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/isValidElement.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ These are *not* React elements\nconsole.log(isValidElement(null)); // false\nconsole.log(isValidElement(25)); // false\nconsole.log(isValidElement('Hello')); // false\nconsole.log(isValidElement({ age: 42 })); // false\nconsole.log(isValidElement([<div />, <div />])); // false\nconsole.log(isValidElement(MyComponent)); // false\n```\n\n----------------------------------------\n\nTITLE: Using startTransition to Prevent Content Hiding in React Navigation\nDESCRIPTION: An improved implementation of the Router component that uses startTransition to prevent already revealed content from hiding during navigation, creating a better user experience.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense, startTransition, useState } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>\n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n\n  function navigate(url) {\n    startTransition(() => {\n      setPage(url);\n    });\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useRef Hook in React\nDESCRIPTION: Basic import statement for the useRef Hook from React\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Enhanced Section Component with Context\nDESCRIPTION: Improved Section component implementation using React Context to automatically manage levels\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext value={level + 1}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized State Management\nDESCRIPTION: Optimized version of form state management using essential state variables only.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst [answer, setAnswer] = useState('');\nconst [error, setError] = useState(null);\nconst [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Assignment in JSX\nDESCRIPTION: Demonstrates the basic pattern of assigning content to a variable for conditional rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet itemContent = name;\n```\n\n----------------------------------------\n\nTITLE: Using Common HTML Components in React\nDESCRIPTION: This snippet demonstrates how to include and style a common HTML component, such as a <div>, within a React application. It requires React to be set up in your project. Ensure styles are defined in your CSS for classes used in components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\\\"wrapper\\\">Some content</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a FadeInAnimation Class for Animation Control\nDESCRIPTION: This code defines a FadeInAnimation class that manages fade-in animations on DOM nodes. It provides methods to start and stop animations, calculates animation progress based on elapsed time, and updates the node's opacity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class FadeInAnimation {\n  constructor(node) {\n    this.node = node;\n  }\n  start(duration) {\n    this.duration = duration;\n    if (this.duration === 0) {\n      // Jump to end immediately\n      this.onProgress(1);\n    } else {\n      this.onProgress(0);\n      // Start animating\n      this.startTime = performance.now();\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onFrame() {\n    const timePassed = performance.now() - this.startTime;\n    const progress = Math.min(timePassed / this.duration, 1);\n    this.onProgress(progress);\n    if (progress < 1) {\n      // We still have more frames to paint\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onProgress(progress) {\n    this.node.style.opacity = progress;\n  }\n  stop() {\n    cancelAnimationFrame(this.frameId);\n    this.startTime = null;\n    this.frameId = null;\n    this.duration = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Connection Module\nDESCRIPTION: Mock implementation of chat connection functionality with connect, disconnect and event handling capabilities.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  let connectedCallback;\n  let timeout;\n  return {\n    connect() {\n      timeout = setTimeout(() => {\n        if (connectedCallback) {\n          connectedCallback();\n        }\n      }, 100);\n    },\n    on(event, callback) {\n      if (connectedCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'connected') {\n        throw Error('Only \"connected\" event is supported.');\n      }\n      connectedCallback = callback;\n    },\n    disconnect() {\n      clearTimeout(timeout);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic prerenderToNodeStream Usage\nDESCRIPTION: Example showing basic usage of prerenderToNodeStream to render a React app to static HTML\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {prelude} = await prerenderToNodeStream(reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: React Router Implementation Example\nDESCRIPTION: A proper routing implementation using React Router, which creates shareable URLs and provides a structure for the application with proper route management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {RouterProvider, createBrowserRouter} from 'react-router';\n\nimport Home from './Home';\nimport Dashboard from './Dashboard';\n\n// ✅ Each route has it's own URL\nconst router = createBrowserRouter([\n  {path: '/', element: <Home />},\n  {path: '/dashboard', element: <Dashboard />}\n]);\n\nexport default function App() {\n  return (\n    <RouterProvider value={router} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Timer Component with Suppressed Dependencies\nDESCRIPTION: A timer component demonstrating bugs that occur when suppressing the dependency linter, showing how the counter gets stuck at 1 due to stale closure.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  function onTick() {\n\tsetCount(count + increment);\n  }\n\n  useEffect(() => {\n    const id = setInterval(onTick, 1000);\n    return () => clearInterval(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Dependencies in useEffect\nDESCRIPTION: This example shows an incorrectly implemented useEffect with missing dependencies, which will trigger a linter warning. The effect uses reactive values but doesn't declare them in the dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n  \n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // 🔴 React Hook useEffect has missing dependencies: 'roomId' and 'serverUrl'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Creating Custom Lifecycle Hooks\nDESCRIPTION: An example of a problematic custom Hook that tries to mimic a component lifecycle method. This approach is discouraged as it doesn't integrate well with React's dependency model and can hide issues from the linter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  // 🔴 Avoid: using custom \"lifecycle\" Hooks\n  useMount(() => {\n    const connection = createConnection({ roomId, serverUrl });\n    connection.connect();\n\n    post('/analytics/event', { eventName: 'visit_chat' });\n  });\n  // ...\n}\n\n// 🔴 Avoid: creating custom \"lifecycle\" Hooks\nfunction useMount(fn) {\n  useEffect(() => {\n    fn();\n  }, []); // 🔴 React Hook useEffect has a missing dependency: 'fn'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events in React Components\nDESCRIPTION: Shows how to handle various mouse events in React components, including onMouseEnter, onMouseLeave, onClick, onMouseDown, onMouseOver, and onMouseUp.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MouseExample() {\n  return (\n    <div\n      onMouseEnter={e => console.log('onMouseEnter (parent)')}\n      onMouseLeave={e => console.log('onMouseLeave (parent)')}\n    >\n      <button\n        onClick={e => console.log('onClick (first button)')}\n        onMouseDown={e => console.log('onMouseDown (first button)')}\n        onMouseEnter={e => console.log('onMouseEnter (first button)')}\n        onMouseLeave={e => console.log('onMouseLeave (first button)')}\n        onMouseOver={e => console.log('onMouseOver (first button)')}\n        onMouseUp={e => console.log('onMouseUp (first button)')}\n      >\n        First button\n      </button>\n      <button\n        onClick={e => console.log('onClick (second button)')}\n        onMouseDown={e => console.log('onMouseDown (second button)')}\n        onMouseEnter={e => console.log('onMouseEnter (second button)')}\n        onMouseLeave={e => console.log('onMouseLeave (second button)')}\n        onMouseOver={e => console.log('onMouseOver (second button)')}\n        onMouseUp={e => console.log('onMouseUp (second button)')}\n      >\n        Second button\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Contact List in React - CSS\nDESCRIPTION: This CSS snippet styles the unordered list and its items, removing default styling and adding margin for better spacing. It also styles labels and buttons for consistent UX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_25\n\nLANGUAGE: css\nCODE:\n```\nul, li {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli {\n  margin-bottom: 20px;\n}\nlabel {\n  display: block;\n  margin: 10px 0;\n}\nbutton {\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Start Events with onDragStart in React (JSX)\nDESCRIPTION: React prop for handling the event when the user starts dragging an element or text selection. It expects a `DragEvent` handler function and corresponds to the browser's `dragstart` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nonDragStart\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component with useEffect\nDESCRIPTION: This Tooltip component uses useEffect to measure its height after render, which may cause flickering. It positions itself above or below the target element based on available space and uses React createPortal to render directly to the body element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n  }, []);\n\n  let tooltipX = 0;\n  let tooltipY = 0;\n  if (targetRect !== null) {\n    tooltipX = targetRect.left;\n    tooltipY = targetRect.top - tooltipHeight;\n    if (tooltipY < 0) {\n      // It doesn't fit above, so place below.\n      tooltipY = targetRect.bottom;\n    }\n  }\n\n  return createPortal(\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n      {children}\n    </TooltipContainer>,\n    document.body\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Dependency Linter Suppression in React Effects\nDESCRIPTION: An example showing a common but problematic pattern of suppressing the React dependency linter in useEffect, which can lead to stale values and unexpected behavior.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ url }) {\n  const { items } = useContext(ShoppingCartContext);\n  const numberOfItems = items.length;\n\n  useEffect(() => {\n    logVisit(url, numberOfItems);\n    // 🔴 Avoid suppressing the linter like this:\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Root Component in React\nDESCRIPTION: This example shows how to update a root component by calling render multiple times on the same root. React preserves the state, allowing for non-destructive updates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport './styles.css';\nimport App from './App.js';\n\nconst root = createRoot(document.getElementById('root'));\n\nlet i = 0;\nsetInterval(() => {\n  root.render(<App counter={i} />);\n  i++;\n}, 1000);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App({counter}) {\n  return (\n    <>\n      <h1>Hello, world! {counter}</h1>\n      <input placeholder=\"Type something here\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Horizontal Image Carousel with CSS\nDESCRIPTION: CSS styles for a horizontal image carousel with smooth transitions. Includes styling for the navigation, list layout with horizontal scrolling, and active state highlighting with a visual indicator.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  width: 100%;\n  overflow: hidden;\n}\n\nnav {\n  text-align: center;\n}\n\nbutton {\n  margin: .25rem;\n}\n\nul,\nli {\n  list-style: none;\n  white-space: nowrap;\n}\n\nli {\n  display: inline;\n  padding: 0.5rem;\n}\n\nimg {\n  padding: 10px;\n  margin: -10px;\n  transition: background 0.2s linear;\n}\n\n.active {\n  background: rgba(0, 100, 150, 0.4);\n}\n```\n\n----------------------------------------\n\nTITLE: Sculpture Data Module - JavaScript\nDESCRIPTION: Defines a dataset containing information about various sculptures, including details like name, artist, description, and associated media URLs. This data module supports the Gallery component by serving as its data source.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n```\n\n----------------------------------------\n\nTITLE: Chat Room Connection Utility for Simulated Server (JavaScript)\nDESCRIPTION: Implements a mock createConnection utility that simulates joining and disconnecting from a chat room server. Used in React components to abstract the connection process, it provides connect, disconnect, and on methods, with console log effects to show connection state. No real network calls are performed; all functions are synchronous or use setTimeout for simulation. Used by React components expecting a standardized connection object.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Connection Implementation\nDESCRIPTION: Implementation of encrypted and unencrypted chat connections with message simulation and event handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createEncryptedConnection({ serverUrl, roomId }) {\n  if (typeof serverUrl !== 'string') {\n    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n  }\n  if (typeof roomId !== 'string') {\n    throw Error('Expected roomId to be a string. Received: ' + roomId);\n  }\n  let intervalId;\n  let messageCallback;\n  return {\n    connect() {\n      console.log('✅ 🔐 Connecting to \"' + roomId + '\" room... (encrypted)');\n      clearInterval(intervalId);\n      intervalId = setInterval(() => {\n        if (messageCallback) {\n          if (Math.random() > 0.5) {\n            messageCallback('hey')\n          } else {\n            messageCallback('lol');\n          }\n        }\n      }, 3000);\n    },\n    disconnect() {\n      clearInterval(intervalId);\n      messageCallback = null;\n      console.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n    },\n    on(event, callback) {\n      if (messageCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'message') {\n        throw Error('Only \"message\" event is supported.');\n      }\n      messageCallback = callback;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Variables in JSX\nDESCRIPTION: Shows how to embed JavaScript variables in JSX using curly braces to display dynamic content to users.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <h1>\n    {user.name}\n  </h1>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading React 19 with ESM-based CDN\nDESCRIPTION: Example of how to load React 19 using a script tag with an ESM-based CDN like esm.sh. This replaces the previously used UMD builds.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import React from \"https://esm.sh/react@19/?dev\"\n  import ReactDOMClient from \"https://esm.sh/react-dom@19/client?dev\"\n  ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Supported SVG Elements in React JSX\nDESCRIPTION: Provides a comprehensive list of all built-in browser SVG elements that are supported for rendering within React applications using JSX syntax.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_4\n\nLANGUAGE: svg\nCODE:\n```\n<a>\n<animate>\n<animateMotion>\n<animateTransform>\n<circle>\n<clipPath>\n<defs>\n<desc>\n<discard>\n<ellipse>\n<feBlend>\n<feColorMatrix>\n<feComponentTransfer>\n<feComposite>\n<feConvolveMatrix>\n<feDiffuseLighting>\n<feDisplacementMap>\n<feDistantLight>\n<feDropShadow>\n<feFlood>\n<feFuncA>\n<feFuncB>\n<feFuncG>\n<feFuncR>\n<feGaussianBlur>\n<feImage>\n<feMerge>\n<feMergeNode>\n<feMorphology>\n<feOffset>\n<fePointLight>\n<feSpecularLighting>\n<feSpotLight>\n<feTile>\n<feTurbulence>\n<filter>\n<foreignObject>\n<g>\n<hatch>\n<hatchpath>\n<image>\n<line>\n<linearGradient>\n<marker>\n<mask>\n<metadata>\n<mpath>\n<path>\n<pattern>\n<polygon>\n<polyline>\n<radialGradient>\n<rect>\n<script>\n<set>\n<stop>\n<style>\n<svg>\n<switch>\n<symbol>\n<text>\n<textPath>\n<title>\n<tspan>\n<use>\n<view>\n```\n\n----------------------------------------\n\nTITLE: Correct State Update in React\nDESCRIPTION: This snippet demonstrates the correct way to update state by creating a new array instead of mutating the existing one. This pure updater function works correctly even when called twice in Strict Mode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nsetTodos(prevTodos => {\n  // ✅ Correct: replacing with new state\n  return [...prevTodos, createTodo()];\n});\n```\n\n----------------------------------------\n\nTITLE: Sandbox Example of an Effect with Missing Dependencies\nDESCRIPTION: A complete example showing a chat room component with an Effect that has missing dependencies. The linter would flag the empty dependency array since roomId is used within the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // <-- Fix the mistake here!\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Components with CSS Classes\nDESCRIPTION: CSS styles that define the visual appearance of the components, including font families, colors, text decorations, and font styles for different text elements in the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.fancy {\n  font-family: 'Georgia';\n}\n.title {\n  color: #007AA3;\n  text-decoration: underline;\n}\n.cursive {\n  font-style: italic;\n}\n.small {\n  font-size: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Effect Events in Custom Hooks\nDESCRIPTION: An example showing how NOT to use Effect Events - they should not be passed as props or callbacks between components. This violates the rules for Effect Events usage.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Timer() {\n  const [count, setCount] = useState(0);\n\n  const onTick = useEffectEvent(() => {\n    setCount(count + 1);\n  });\n\n  useTimer(onTick, 1000); // 🔴 Avoid: Passing Effect Events\n\n  return <h1>{count}</h1>\n}\n\nfunction useTimer(callback, delay) {\n  useEffect(() => {\n    const id = setInterval(() => {\n      callback();\n    }, delay);\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay, callback]); // Need to specify \"callback\" in dependencies\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Search Button Component in React\nDESCRIPTION: A minimal React component that renders a search button. This component is defined in a separate file to demonstrate component modularity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SearchButton() {\n  return (\n    <button>\n      Search\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React Act Environment in JavaScript\nDESCRIPTION: Sets a global flag to disable spurious act warnings in React test environments. This allows for more flexible testing setups without unnecessary warnings.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobal.IS_REACT_ACT_ENVIRONMENT = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Data Fetching and Caching Utility for Suspense - JavaScript\nDESCRIPTION: This module provides fetchData for retrieving data based on a URL string, with in-memory caching for deduplication. It uses an async getData function for routing requests and simulates a network delay and dataset filtering in getSearchResults. Dependencies: JavaScript promises, Map for caching, and a Suspense-compatible consumer in React. Input is a URL query; output is a promise resolving to an array of album objects filtered per the search query.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note: the way you would do data fetching depends on\n// the framework that you use together with Suspense.\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n  if (!cache.has(url)) {\n    cache.set(url, getData(url));\n  }\n  return cache.get(url);\n}\n\nasync function getData(url) {\n  if (url.startsWith('/search?q=')) {\n    return await getSearchResults(url.slice('/search?q='.length));\n  } else {\n    throw Error('Not implemented');\n  }\n}\n\nasync function getSearchResults(query) {\n  // Add a fake delay to make waiting noticeable.\n  await new Promise(resolve => {\n    setTimeout(resolve, 1000);\n  });\n\n  const allAlbums = [{\n    id: 13,\n    title: 'Let It Be',\n    year: 1970\n  }, {\n    id: 12,\n    title: 'Abbey Road',\n    year: 1969\n  }, {\n    id: 11,\n    title: 'Yellow Submarine',\n    year: 1969\n  }, {\n    id: 10,\n    title: 'The Beatles',\n    year: 1968\n  }, {\n    id: 9,\n    title: 'Magical Mystery Tour',\n    year: 1967\n  }, {\n    id: 8,\n    title: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n    year: 1967\n  }, {\n    id: 7,\n    title: 'Revolver',\n    year: 1966\n  }, {\n    id: 6,\n    title: 'Rubber Soul',\n    year: 1965\n  }, {\n    id: 5,\n    title: 'Help!',\n    year: 1965\n  }, {\n    id: 4,\n    title: 'Beatles For Sale',\n    year: 1964\n  }, {\n    id: 3,\n    title: 'A Hard Day\\'s Night',\n    year: 1964\n  }, {\n    id: 2,\n    title: 'With The Beatles',\n    year: 1963\n  }, {\n    id: 1,\n    title: 'Please Please Me',\n    year: 1963\n  }];\n\n  const lowerQuery = query.trim().toLowerCase();\n  return allAlbums.filter(album => {\n    const lowerTitle = album.title.toLowerCase();\n    return (\n      lowerTitle.startsWith(lowerQuery) ||\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\n    )\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Function Usage Example\nDESCRIPTION: Shows how regular functions can be used conditionally within React components, unlike Hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction List({ items, shouldSort }) {\n  let displayedItems = items;\n  if (shouldSort) {\n    // ✅ It's ok to call getSorted() conditionally because it's not a Hook\n    displayedItems = getSorted(items);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling UI Events in React Components\nDESCRIPTION: Example of using the onScroll event handler in a React component to detect scrolling within an element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  onScroll={e => console.log('onScroll')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for a Tooltip Component\nDESCRIPTION: This CSS rule provides basic visual styling for elements assigned the class `tooltip`. It sets the text color to white, applies a dark gray background (`#222`), rounds the corners using `border-radius`, and adds internal padding for better readability and spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.tooltip {\n  color: white;\n  background: #222;\n  border-radius: 4px;\n  padding: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting App Component Implementation\nDESCRIPTION: Parent App component that provides context and functionality for the ColorSwitch component, including click tracking and color generation logic.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ColorSwitch from './ColorSwitch.js';\n\nexport default function App() {\n  const [clicks, setClicks] = useState(0);\n\n  function handleClickOutside() {\n    setClicks(c => c + 1);\n  }\n\n  function getRandomLightColor() {\n    let r = 150 + Math.round(100 * Math.random());\n    let g = 150 + Math.round(100 * Math.random());\n    let b = 150 + Math.round(100 * Math.random());\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  function handleChangeColor() {\n    let bodyStyle = document.body.style;\n    bodyStyle.backgroundColor = getRandomLightColor();\n  }\n\n  return (\n    <div style={{ width: '100%', height: '100%' }} onClick={handleClickOutside}>\n      <ColorSwitch onChangeColor={handleChangeColor} />\n      <br />\n      <br />\n      <h2>Clicks on the page: {clicks}</h2>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Impure React Component (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates an impure React component by maintaining a mutable variable outside of the component scope and updating its value on every render. It highlights the side effects of stateful variable mutations as an anti-pattern. There are no external dependencies. The component returns a heading for each Cup rendered, incrementing an external guest value. Expected inputs: none; outputs: headings showing guest numbers (but with shared state). Not suitable for production—meant for pedagogical purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet guest = 0;\\n\\nfunction Cup() {\\n  // Bad: changing a preexisting variable!\\n  guest = guest + 1;\\n  return <h2>Tea cup for guest #{guest}</h2>;\\n}\\n\\nexport default function TeaSet() {\\n  return (\\n    <>\\n      <Cup />\\n      <Cup />\\n      <Cup />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Alternative to renderToString\nDESCRIPTION: Proper client-side approach to generate HTML from a component using createRoot and flushSync instead of renderToString.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToString.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport { flushSync } from 'react-dom';\n\nconst div = document.createElement('div');\nconst root = createRoot(div);\nflushSync(() => {\n  root.render(<MyIcon />);\n});\nconsole.log(div.innerHTML); // For example, \"<svg>...</svg>\"\n```\n\n----------------------------------------\n\nTITLE: Multiple State Variables Example\nDESCRIPTION: Example showing multiple boolean state variables for different form states, demonstrating what not to do before optimization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isEmpty, setIsEmpty] = useState(true);\nconst [isTyping, setIsTyping] = useState(false);\nconst [isSubmitting, setIsSubmitting] = useState(false);\nconst [isSuccess, setIsSuccess] = useState(false);\nconst [isError, setIsError] = useState(false);\n```\n\n----------------------------------------\n\nTITLE: Handling Got Pointer Capture Events with onGotPointerCapture in React (JSX)\nDESCRIPTION: React prop for handling the event when an element programmatically captures a pointer using `element.setPointerCapture()`. It expects a `PointerEvent` handler function and corresponds to the browser's `gotpointercapture` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nonGotPointerCapture\n```\n\n----------------------------------------\n\nTITLE: Importing and Using renderToString on the Server\nDESCRIPTION: Example showing how to import renderToString from react-dom/server and use it to render a React component to HTML.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToString.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToString } from 'react-dom/server';\n\nconst html = renderToString(<App />);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Storage in React State\nDESCRIPTION: This snippet shows an incorrect attempt to store a function in React state. React assumes the functions are initializer or updater functions and tries to call them instead of storing them.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst [fn, setFn] = useState(someFunction);\n\nfunction handleClick() {\n  setFn(someOtherFunction);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Race Conditions in React Data Fetching\nDESCRIPTION: This snippet shows how to fix race conditions in data fetching by adding a cleanup function to the useEffect hook. It ignores stale responses, ensuring only the latest request's data is used.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    let ignore = false;\n    fetchResults(query, page).then(json => {\n      if (!ignore) {\n        setResults(json);\n      }\n    });\n    return () => {\n      ignore = true;\n    };\n  }, [query, page]);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Parent-Child Ref Passing in React\nDESCRIPTION: Demonstrates how to pass a ref from a parent component to a child component to access an input DOM element.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nfunction MyForm() {\n  const inputRef = useRef(null);\n  return <MyInput ref={inputRef} />\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List Helper Functions\nDESCRIPTION: This module provides utility functions for the todo list application, including a getVisibleTodos function that filters todos and logs each call, a createTodo factory function, and initial todo items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 0;\nlet calls = 0;\n\nexport function getVisibleTodos(todos, showActive) {\n  console.log(`getVisibleTodos() was called ${++calls} times`);\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const visibleTodos = showActive ? activeTodos : todos;\n  return visibleTodos;\n}\n\nexport function createTodo(text, completed = false) {\n  return {\n    id: nextId++,\n    text,\n    completed\n  };\n}\n\nexport const initialTodos = [\n  createTodo('Get apples', true),\n  createTodo('Get oranges', true),\n  createTodo('Get carrots'),\n];\n```\n\n----------------------------------------\n\nTITLE: Styling for Tic-Tac-Toe Game in React\nDESCRIPTION: This CSS snippet provides the styling for the tic-tac-toe game components, including the game board, squares, and overall layout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_56\n\nLANGUAGE: CSS\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Logical AND in React\nDESCRIPTION: React component showing how to use the logical AND operator to conditionally render item importance levels. Displays importance ratings only for items with non-zero importance values, including proper spacing handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, importance }) {\n  return (\n    <li className=\"item\">\n      {name}\n      {importance > 0 && ' '}\n      {importance > 0 &&\n        <i>(Importance: {importance})</i>\n      }\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          importance={9} \n          name=\"Space suit\" \n        />\n        <Item \n          importance={0} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          importance={6} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing subscribe Function Performance in React\nDESCRIPTION: Describes optimizing the subscribe function by moving it outside a component or using useCallback to prevent unnecessary resubscription in React components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ChatIndicator() {\n  // 🚩 Always a different function, so React will resubscribe on every re-render\n  function subscribe() {\n    // ...\n  }\n  \n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  // ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ Always the same function, so React won't need to resubscribe\nfunction subscribe() {\n  // ...\n}\n\nfunction ChatIndicator() {\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n  // ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ChatIndicator({ userId }) {\n  // ✅ Same function as long as userId doesn't change\n  const subscribe = useCallback(() => {\n    // ...\n  }, [userId]);\n  \n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Composition Update Events with onCompositionUpdate in React (JSX)\nDESCRIPTION: React prop for handling the event when an input method editor (IME) receives a new character during a composition session. It expects a `CompositionEvent` handler function and corresponds to the browser's `compositionupdate` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionUpdate\n```\n\n----------------------------------------\n\nTITLE: Image Carousel with Multiple Refs\nDESCRIPTION: Implementation of an image carousel using multiple refs to control scrolling behavior\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n  const firstCatRef = useRef(null);\n  const secondCatRef = useRef(null);\n  const thirdCatRef = useRef(null);\n\n  function handleScrollToFirstCat() {\n    firstCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToSecondCat() {\n    secondCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToThirdCat() {\n    thirdCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={handleScrollToFirstCat}>\n          Neo\n        </button>\n        <button onClick={handleScrollToSecondCat}>\n          Millie\n        </button>\n        <button onClick={handleScrollToThirdCat}>\n          Bella\n        </button>\n      </nav>\n      <div>\n        <ul>\n          <li>\n            <img\n              src=\"https://placecats.com/neo/300/200\"\n              alt=\"Neo\"\n              ref={firstCatRef}\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/millie/200/200\"\n              alt=\"Millie\"\n              ref={secondCatRef}\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/bella/199/200\"\n              alt=\"Bella\"\n              ref={thirdCatRef}\n            />\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Art Gallery Data Structure in JavaScript\nDESCRIPTION: JavaScript object array containing art gallery items with properties for name, artist, description, image URL and alt text. Each object represents an artwork with detailed metadata.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}\n```\n\n----------------------------------------\n\nTITLE: Single Line Highlighting in React Documentation Code Examples\nDESCRIPTION: Shows how to highlight a specific line in a code example using Markdown syntax with line number specification. This helps draw reader attention to important parts of the code.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```js {2}\nfunction hello() {\n  // this line will get highlighted\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Todo Helper Functions\nDESCRIPTION: Helper functions for creating todos and defining initial todo items. Includes a createTodo function and initialTodos array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 0;\n\nexport function createTodo(text, completed = false) {\n  return {\n    id: nextId++,\n    text,\n    completed\n  };\n}\n\nexport const initialTodos = [\n  createTodo('Get apples', true),\n  createTodo('Get oranges', true),\n  createTodo('Get carrots'),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Portal in React\nDESCRIPTION: Demonstrates how to use createPortal to render a child component into a different part of the DOM, specifically the document body.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPortal } from 'react-dom';\n\n// ...\n\n<div>\n  <p>This child is placed in the parent div.</p>\n  {createPortal(\n    <p>This child is placed in the document body.</p>,\n    document.body\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing React 18 with yarn\nDESCRIPTION: Command to install the latest version of React and ReactDOM using yarn package manager.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom\n```\n\n----------------------------------------\n\nTITLE: Problematic React useEffect Dependency Causing Reconnections\nDESCRIPTION: This snippet shows the `ChatRoom` component where `messages` has been added to the `useEffect` dependency array because it's read inside the Effect. This causes the Effect to re-run (and potentially reconnect) every time a new message arrives and the `messages` state updates, which is usually undesirable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js {7,10}\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages([...messages, receivedMessage]);\n    });\n    return () => connection.disconnect();\n  }, [roomId, messages]); // ✅ All dependencies declared\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Memoized Function Outside of Component\nDESCRIPTION: This example shows a pitfall where calling a memoized function outside of a React component will not utilize the cache. React only provides cache access within components because it's provided through context which is only accessible from components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {cache} from 'react';\n\nconst getUser = cache(async (userId) => {\n  return await db.user.query(userId);\n});\n\n// 🚩 Wrong: Calling memoized function outside of component will not memoize.\ngetUser('demo-id');\n\nasync function DemoProfile() {\n  // ✅ Good: `getUser` will memoize.\n  const user = await getUser('demo-id');\n  return <Profile user={user} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Usage of captureOwnerStack in Development\nDESCRIPTION: Demonstrates how to conditionally use captureOwnerStack in files that are bundled for both development and production environments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/captureOwnerStack.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't use named imports of `captureOwnerStack` in files that are bundled for development and production.\nimport {captureOwnerStack} from 'react';\n// Use a namespace import instead and access `captureOwnerStack` conditionally.\nimport * as React from 'react';\n\nif (process.env.NODE_ENV !== 'production') {\n  const ownerStack = React.captureOwnerStack();\n  console.log('Owner Stack', ownerStack);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Hooks\nDESCRIPTION: ESLint configuration example showing how to set up react-hooks plugin in both flat and legacy config formats.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/04/21/react-compiler-rc.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport * as reactHooks from 'eslint-plugin-react-hooks';\n\nexport default [\n  // Flat Config (eslint 9+)\n  reactHooks.configs.recommended,\n\n  // Legacy Config\n  reactHooks.configs['recommended-latest']\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Gallery Layout with CSS\nDESCRIPTION: CSS styles defining the layout and appearance of gallery components including buttons, pages, headings, and images. Implements a two-column layout with floating elements and consistent spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_22\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n.Page > * {\n  float: left;\n  width: 50%;\n  padding: 10px;\n}\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n  margin-top: 5px;\n  font-weight: normal;\n  font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ColorSwitch Component in React\nDESCRIPTION: Initial implementation of a ColorSwitch component that renders a button. The component receives an onChangeColor prop but hasn't yet implemented the click handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ColorSwitch({\n  onChangeColor\n}) {\n  return (\n    <button>\n      Change color\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useReducer Hook in React (JavaScript)\nDESCRIPTION: Imports the `useReducer` hook from the React library. This step is necessary before the hook can be utilized within a functional component for state management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { useReducer } from 'react';\n```\n\n----------------------------------------\n\nTITLE: List Styling for StoryTray - CSS\nDESCRIPTION: This CSS snippet provides base styling for the `ul` and `li` elements generated by the StoryTray component. It uses flexbox layout, removes default list styles, and applies consistent spacing and sizing for each list item. No dependencies beyond standard CSS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\nul {\\n  margin: 0;\\n  list-style-type: none;\\n  height: 100%;\\n  display: flex;\\n  flex-wrap: wrap;\\n  padding: 10px;\\n}\\n\\nli {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  float: left;\\n  margin: 5px;\\n  padding: 5px;\\n  width: 70px;\\n  height: 100px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Profilers in React Application\nDESCRIPTION: Example demonstrating the use of multiple Profiler components to measure different parts of an application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Profiler.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<App>\n  <Profiler id=\"Sidebar\" onRender={onRender}>\n    <Sidebar />\n  </Profiler>\n  <Profiler id=\"Content\" onRender={onRender}>\n    <Content />\n  </Profiler>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Complete React Tic-Tac-Toe implementation with time travel\nDESCRIPTION: Full implementation of a tic-tac-toe game in React featuring time travel. Includes Square, Board, and Game components with state management for game history, current move tracking, and the ability to jump to previous states.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // TODO\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Slow Network Request in React\nDESCRIPTION: This snippet demonstrates a simple API function that simulates a slow network request. It's used to artificially slow down the quantity update process for demonstration purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function updateQuantity(newQuantity) {\n  return new Promise((resolve, reject) => {\n    // Simulate a slow network request.\n    setTimeout(() => {\n      resolve(newQuantity);\n    }, 2000);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses for Object Return in Arrow Functions\nDESCRIPTION: A workaround for returning object literals from arrow functions by wrapping the object in parentheses, though this approach can be easily broken if someone removes the parentheses.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n  // This works, but is easy for someone to break again\n  const searchOptions = useMemo(() => ({\n    matchMode: 'whole-word',\n    text: text\n  }), [text]);\n```\n\n----------------------------------------\n\nTITLE: JSX Element with Dynamic Content\nDESCRIPTION: Demonstrates embedding conditional content within a JSX element using curly braces.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<li className=\"item\">\n  {itemContent}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Profile Component - Yuzhi Zheng\nDESCRIPTION: JSX component displaying profile information for Yuzhi Zheng, including photo, social media links, and biographical information about her role at Meta and work on React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/team.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<TeamMember name=\"Yuzhi Zheng\" permalink=\"yuzhi-zheng\" photo=\"/images/team/yuzhi.jpg\" github=\"yuzhi\" twitter=\"yuzhiz\" threads=\"yuzhiz\" title=\"Engineering Manager at Meta\">\n    Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she's a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.\n</TeamMember>\n```\n\n----------------------------------------\n\nTITLE: Mapping Filtered Array to JSX Elements with Details\nDESCRIPTION: Transforming the filtered array of chemists into JSX list items with images and detailed information.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst listItems = chemists.map(person =>\n  <li>\n     <img\n       src={getImageUrl(person)}\n       alt={person.name}\n     />\n     <p>\n       <b>{person.name}:</b>\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     </p>\n  </li>\n);\n```\n\n----------------------------------------\n\nTITLE: Buggy StoryTray Implementation in React\nDESCRIPTION: Initial implementation with a bug where stories array prop is directly mutated causing duplicate 'Create Story' entries. Shows incorrect usage of Array.push() during rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function StoryTray({ stories }) {\n  stories.push({\n    id: 'create',\n    label: 'Create Story'\n  });\n\n  return (\n    <ul>\n      {stories.map(story => (\n        <li key={story.id}>\n          {story.label}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Start Capture Events with onDragStartCapture in React (JSX)\nDESCRIPTION: React prop for handling drag start events during the capture phase. This is the capture phase version of `onDragStart`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nonDragStartCapture\n```\n\n----------------------------------------\n\nTITLE: Basic Profile Page Component Structure\nDESCRIPTION: Demonstrates the basic structure of a profile page component with multiple sections that could benefit from streaming.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Sidebar>\n        <Friends />\n        <Photos />\n      </Sidebar>\n      <Posts />\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Data Passing in React\nDESCRIPTION: Shows how to pass data through React Context instead of props, using HighlightContext to manage highlighting state between components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const HighlightContext = createContext(false);\n\nexport default function List({ items, renderItem }) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return (\n    <div className=\"List\">\n      {items.map((item, index) => {\n        const isHighlighted = index === selectedIndex;\n        return (\n          <HighlightContext.Provider key={item.id} value={isHighlighted}>\n            {renderItem(item)}\n          </HighlightContext.Provider>\n        );\n      })}\n\n```\n\n----------------------------------------\n\nTITLE: Adding URL Dependency to Page Visit Logging Effect in React\nDESCRIPTION: This snippet demonstrates how to include the URL prop in the page visit logging Effect. It shows the linter warning for a missing dependency and the correct way to include it.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ url }) {\n  useEffect(() => {\n    logVisit(url);\n  }, [url]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Click Capture Events with onClickCapture in React (JSX)\nDESCRIPTION: React prop for handling click events during the capture phase. This is a version of the standard `onClick` handler but fires earlier in the event propagation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nonClickCapture\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of startTransition with Async/Await in React\nDESCRIPTION: Demonstrates how state updates after an await are not treated as transitions because React loses the async context after the await.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition(async () => {\n  await someAsyncFunction();\n  // ❌ Not using startTransition after await\n  setPage('/about');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting an Initial Value for a Textarea\nDESCRIPTION: Example demonstrating how to provide an initial value for a textarea using the defaultValue prop in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function EditPost() {\n  return (\n    <label>\n      Edit your post:\n      <textarea\n        name=\"postContent\"\n        defaultValue=\"I really enjoyed biking yesterday!\"\n        rows={4}\n        cols={40}\n      />\n    </label>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { margin-left: 5px; }\ntextarea { margin-top: 10px; }\nlabel { margin: 10px; }\nlabel, textarea { display: block; }\n```\n\n----------------------------------------\n\nTITLE: Creating an Absolutely Positioned Tooltip Container in React\nDESCRIPTION: This React functional component (`TooltipContainer`) serves as a layout wrapper for the tooltip content. It uses inline styles to achieve absolute positioning (`position: 'absolute', left: 0, top: 0`) and applies a `translate3d` transform based on the calculated `x` and `y` coordinates received as props. It disables pointer events (`pointerEvents: 'none'`) to allow interaction with elements underneath. The `contentRef` prop is forwarded to the inner `div` to enable the parent component (`Tooltip`) to measure the dimensions of the actual tooltip content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: 0,\n        top: 0,\n        transform: `translate3d(${x}px, ${y}px, 0)`\n      }}\n    >\n      <div ref={contentRef} className=\"tooltip\">\n        {children}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: State Mutation Anti-Pattern in React (DO NOT DO) - JavaScript\nDESCRIPTION: Short snippet showing the wrong way to update an object in React state: direct mutation. This can lead to bugs as React state should be treated as immutable. No dependencies. Limitations: Demonstrates an error only.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \\uD83D\\uDEA9 Don't mutate an object in state like this:\\nform.firstName = 'Taylor';\n```\n\n----------------------------------------\n\nTITLE: Handling Composition End Capture Events with onCompositionEndCapture in React (JSX)\nDESCRIPTION: React prop for handling the completion or cancellation of an IME composition session during the event capture phase. This is the capture phase version of `onCompositionEnd`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionEndCapture\n```\n\n----------------------------------------\n\nTITLE: Handling Context Menu Events with onContextMenu in React (JSX)\nDESCRIPTION: React prop for handling the event when the user attempts to open a context menu (e.g., right-click). It expects a `MouseEvent` handler function and corresponds to the browser's `contextmenu` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nonContextMenu\n```\n\n----------------------------------------\n\nTITLE: Server-Side Function Directive in React Server Components\nDESCRIPTION: The 'use server' directive marks server-side functions that can be called from client-side code in React Server Components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/directives.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n```\n\n----------------------------------------\n\nTITLE: Range Highlighting in React Documentation Code Examples\nDESCRIPTION: Demonstrates how to highlight a range of lines in a code example using Markdown syntax. This is useful for emphasizing multiple consecutive lines of code.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```js {2-4}\nfunction hello() {\n  // these lines\n  // will get\n  // highlighted\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Correcting Dynamic URL Construction in JSX\nDESCRIPTION: Corrects the image URL syntax in JSX to concatenate string and object values effectively. This change ensures the image size can be dynamically adjusted, reflecting changes immediately within the component. Utilizes JavaScript expressions inside JSX tags for this dynamic rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst baseUrl = 'https://i.imgur.com/';\nconst person = {\n  name: 'Gregorio Y. Zara',\n  imageId: '7vQD0fP',\n  imageSize: 's',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src={baseUrl + person.imageId + person.imageSize + '.jpg'}\n        alt={person.name}\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Room Package Configuration\nDESCRIPTION: Package.json configuration for a React chat application with dependencies for React experimental build and Toastify notifications.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"experimental\",\n    \"react-dom\": \"experimental\",\n    \"react-scripts\": \"latest\",\n    \"toastify-js\": \"1.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Title Component Usage in React\nDESCRIPTION: Example of using the built-in browser <title> component to specify a document title in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<title>My Blog</title>\n```\n\n----------------------------------------\n\nTITLE: Basic useEffect Hook with Connection Dependency in React\nDESCRIPTION: A simple example of a useEffect hook that creates and manages a chat connection based on a roomId prop. This demonstrates the basic structure of an Effect with missing dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  \t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server Function Declaration with use server\nDESCRIPTION: Example showing how to mark an async function as a server function using the 'use server' directive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addToCart(data) {\n  'use server';\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array by Profession\nDESCRIPTION: Using JavaScript's filter() method to create a new array containing only people with the profession 'chemist'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chemists = people.filter(person =>\n  person.profession === 'chemist'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row List with Children.map in React\nDESCRIPTION: Demonstrates using Children.map to wrap child components in row containers. Shows how the children prop doesn't include rendered output of nested components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nexport default function RowList({ children }) {\n  return (\n    <div className=\"RowList\">\n      {Children.map(children, child =>\n        <div className=\"Row\">\n          {child}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Composition Start Events with onCompositionStart in React (JSX)\nDESCRIPTION: React prop for handling the start of an input method editor (IME) composition session. It expects a `CompositionEvent` handler function and corresponds to the browser's `compositionstart` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionStart\n```\n\n----------------------------------------\n\nTITLE: Styling Fade-In Animation Using CSS\nDESCRIPTION: This snippet uses CSS to apply a fade-in animation to the component, offering a simpler and more efficient alternative to JavaScript animations. CSS properties like opacity and transitions are used to animate the component's appearance. Dependencies include a stylesheet for the welcome component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_34\n\nLANGUAGE: CSS\nCODE:\n```\nlabel, button { display: block; margin-bottom: 20px; }\nhtml, body { min-height: 300px; }\n.welcome {\n  opacity: 0;\n  color: white;\n  padding: 50px;\n  text-align: center;\n  font-size: 50px;\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Functions with Normal Speed Filtering (JavaScript)\nDESCRIPTION: This version of the utility functions file includes the same `createTodos` function but features a `filterTodos` function *without* the artificial 500ms delay. It performs the standard filtering logic based on the tab state. This is used to demonstrate that without `useMemo`, even fast calculations run on every render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/utils.js\nexport function createTodos() {\n  const todos = [];\n  for (let i = 0; i < 50; i++) {\n    todos.push({\n      id: i,\n      text: \"Todo \" + (i + 1),\n      completed: Math.random() > 0.5\n    });\n  }\n  return todos;\n}\n\nexport function filterTodos(todos, tab) {\n  console.log('Filtering ' + todos.length + ' todos for \"' + tab + '\" tab.');\n\n  return todos.filter(todo => {\n    if (tab === 'all') {\n      return true;\n    } else if (tab === 'active') {\n      return !todo.completed;\n    } else if (tab === 'completed') {\n      return todo.completed;\n    }\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying React and Immer Package Dependencies for State Management (JSON)\nDESCRIPTION: This package.json snippet defines the necessary dependencies and scripts for running a React app that uses the Immer library for state management. It lists latest versions of react, react-dom, and react-scripts, as well as immer and use-immer, plus standard scripts for starting and building the app. It's required as a prerequisite for successfully running code using useImmer. Inputs: none; output: package configuration.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from ReactDOM.hydrate to ReactDOM.hydrateRoot\nDESCRIPTION: This snippet shows how to update the hydration method from the deprecated ReactDOM.hydrate to the new ReactDOM.hydrateRoot API introduced in React 18 for server-side rendering scenarios.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport {hydrate} from 'react-dom';\nhydrate(<App />, document.getElementById('root'));\n\n// After\nimport {hydrateRoot} from 'react-dom/client';\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\n----------------------------------------\n\nTITLE: Impure React Component Example\nDESCRIPTION: An example of an impure component that incorrectly modifies external state during rendering, demonstrating what to avoid.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Linter Suppression (Anti-pattern)\nDESCRIPTION: A demonstration of an anti-pattern where the linter is incorrectly suppressed instead of properly fixing dependencies, which should be avoided.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  // ...\n  // 🔴 Avoid suppressing the linter like this:\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Travel Plan Data Structure\nDESCRIPTION: Initial state structure for the travel plan, organized as a flat object with parent-child relationships defined through IDs. Contains a hierarchical structure of places including planets, continents, and countries.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initialTravelPlan = {\n  0: {\n    id: 0,\n    title: '(Root)',\n    childIds: [1, 42, 46],\n  },\n  1: {\n    id: 1,\n    title: 'Earth',\n    childIds: [2, 10, 19, 26, 34]\n  },\n  2: {\n    id: 2,\n    title: 'Africa',\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\n  }, \n  3: {\n    id: 3,\n    title: 'Botswana',\n    childIds: []\n  },\n  4: {\n    id: 4,\n    title: 'Egypt',\n    childIds: []\n  },\n  5: {\n    id: 5,\n    title: 'Kenya',\n    childIds: []\n  },\n  6: {\n    id: 6,\n    title: 'Madagascar',\n    childIds: []\n  }, \n  7: {\n    id: 7,\n    title: 'Morocco',\n    childIds: []\n  },\n  8: {\n    id: 8,\n    title: 'Nigeria',\n    childIds: []\n  },\n  9: {\n    id: 9,\n    title: 'South Africa',\n    childIds: []\n  },\n  10: {\n    id: 10,\n    title: 'Americas',\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \n  },\n  11: {\n    id: 11,\n    title: 'Argentina',\n    childIds: []\n  },\n  12: {\n    id: 12,\n    title: 'Brazil',\n    childIds: []\n  },\n  13: {\n    id: 13,\n    title: 'Barbados',\n    childIds: []\n  }, \n  14: {\n    id: 14,\n    title: 'Canada',\n    childIds: []\n  },\n  15: {\n    id: 15,\n    title: 'Jamaica',\n    childIds: []\n  },\n  16: {\n    id: 16,\n    title: 'Mexico',\n    childIds: []\n  },\n  17: {\n    id: 17,\n    title: 'Trinidad and Tobago',\n    childIds: []\n  },\n  18: {\n    id: 18,\n    title: 'Venezuela',\n    childIds: []\n  },\n  19: {\n    id: 19,\n    title: 'Asia',\n    childIds: [20, 21, 22, 23, 24, 25],   \n  },\n  20: {\n    id: 20,\n    title: 'China',\n    childIds: []\n  },\n  21: {\n    id: 21,\n    title: 'India',\n    childIds: []\n  },\n  22: {\n    id: 22,\n    title: 'Singapore',\n    childIds: []\n  },\n  23: {\n    id: 23,\n    title: 'South Korea',\n    childIds: []\n  },\n  24: {\n    id: 24,\n    title: 'Thailand',\n    childIds: []\n  },\n  25: {\n    id: 25,\n    title: 'Vietnam',\n    childIds: []\n  },\n  26: {\n    id: 26,\n    title: 'Europe',\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \n  },\n  27: {\n    id: 27,\n    title: 'Croatia',\n    childIds: []\n  },\n  28: {\n    id: 28,\n    title: 'France',\n    childIds: []\n  },\n  29: {\n    id: 29,\n    title: 'Germany',\n    childIds: []\n  },\n  30: {\n    id: 30,\n    title: 'Italy',\n    childIds: []\n  },\n  31: {\n    id: 31,\n    title: 'Portugal',\n    childIds: []\n  },\n  32: {\n    id: 32,\n    title: 'Spain',\n    childIds: []\n  },\n  33: {\n    id: 33,\n    title: 'Turkey',\n    childIds: []\n  },\n  34: {\n    id: 34,\n    title: 'Oceania',\n    childIds: [35, 36, 37, 38, 39, 40, 41],   \n  },\n  35: {\n    id: 35,\n    title: 'Australia',\n    childIds: []\n  },\n  36: {\n    id: 36,\n    title: 'Bora Bora (French Polynesia)',\n    childIds: []\n  },\n  37: {\n    id: 37,\n    title: 'Easter Island (Chile)',\n    childIds: []\n  },\n  38: {\n    id: 38,\n    title: 'Fiji',\n    childIds: []\n  },\n  39: {\n    id: 39,\n    title: 'Hawaii (the USA)',\n    childIds: []\n  },\n  40: {\n    id: 40,\n    title: 'New Zealand',\n    childIds: []\n  },\n  41: {\n    id: 41,\n    title: 'Vanuatu',\n    childIds: []\n  },\n  42: {\n    id: 42,\n    title: 'Moon',\n    childIds: [43, 44, 45]\n  },\n  43: {\n    id: 43,\n    title: 'Rheita',\n    childIds: []\n  },\n  44: {\n    id: 44,\n    title: 'Piccolomini',\n    childIds: []\n  },\n  45: {\n    id: 45,\n    title: 'Tycho',\n    childIds: []\n  },\n  46: {\n    id: 46,\n    title: 'Mars',\n    childIds: [47, 48]\n  },\n  47: {\n    id: 47,\n    title: 'Corn Town',\n    childIds: []\n  },\n  48: {\n    id: 48,\n    title: 'Green Hill',\n    childIds: []\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useFadeIn Custom Hook\nDESCRIPTION: This snippet illustrates the creation of a custom React hook, useFadeIn, to encapsulate the fade-in animation logic for reuse. It uses the requestAnimationFrame to manage animation frames and is dependent on a DOM node reference and animation duration as parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useFadeIn(ref, 1000);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEffect } from 'react';\n\nexport function useFadeIn(ref, duration) {\n  useEffect(() => {\n    const node = ref.current;\n\n    let startTime = performance.now();\n    let frameId = null;\n\n    function onFrame(now) {\n      const timePassed = now - startTime;\n      const progress = Math.min(timePassed / duration, 1);\n      onProgress(progress);\n      if (progress < 1) {\n        // We still have more frames to paint\n        frameId = requestAnimationFrame(onFrame);\n      }\n    }\n\n    function onProgress(progress) {\n      node.style.opacity = progress;\n    }\n\n    function start() {\n      onProgress(0);\n      startTime = performance.now();\n      frameId = requestAnimationFrame(onFrame);\n    }\n\n    function stop() {\n      cancelAnimationFrame(frameId);\n      startTime = null;\n      frameId = null;\n    }\n\n    start();\n    return () => stop();\n  }, [ref, duration]);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Modal Dialog Example\nDESCRIPTION: Simple CSS styling for the modal dialog example, setting a minimum height for the body to ensure the dialog is properly visible.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  min-height: 300px;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Copy Solution for StoryTray\nDESCRIPTION: Alternative fix using array copying with slice() to avoid mutating the original stories prop while still maintaining the desired functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function StoryTray({ stories }) {\n  // Copy the array!\n  let storiesToDisplay = stories.slice();\n\n  // Does not affect the original array:\n  storiesToDisplay.push({\n    id: 'create',\n    label: 'Create Story'\n  });\n\n  return (\n    <ul>\n      {storiesToDisplay.map(story => (\n        <li key={story.id}>\n          {story.label}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading a Resource in React\nDESCRIPTION: Basic usage of the preload function to eagerly fetch a font file. The function takes a URL and options object specifying the resource type.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npreload(\"https://example.com/font.woff2\", {as: \"font\"});\n```\n\n----------------------------------------\n\nTITLE: Prerender Output: Injected Static HTML and Bootstrap Script - HTML\nDESCRIPTION: Presents the HTML output produced by the `prerender` API, illustrating that the resulting HTML includes the doctype, component-rendered markup, and the injected bootstrap script tag. This output is ready to be sent to clients and hydrated on the client with React. The script is required to bootstrap client-side interactivity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerender.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <!-- ... HTML from your components ... -->\n</html>\n<script src=\"/main.js\" async=\"\"></script>\n```\n\n----------------------------------------\n\nTITLE: Remix Configuration with React Compiler\nDESCRIPTION: Configuration for using React Compiler in Remix projects using vite-plugin-babel.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport babel from \"vite-plugin-babel\";\n\nconst ReactCompilerConfig = { /* ... */ };\n\nexport default defineConfig({\n  plugins: [\n    remix({ /* ... */}),\n    babel({\n      filter: /\\.[jt]sx?$/,\n      babelConfig: {\n        presets: [\"@babel/preset-typescript\"], // if you use TypeScript\n        plugins: [\n          [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: React Project's Package Configuration\nDESCRIPTION: This snippet contains the package.json configuration for a React project using dependencies such as React, React-DOM, and Leaflet. It specifies scripts for building and running the project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"leaflet\": \"1.9.1\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"remarkable\": \"2.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Dot Component - Correct Implementation\nDESCRIPTION: Example showing proper state updates with a new object in a component that tracks pointer position\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Connection Module for React\nDESCRIPTION: A module that creates a chat connection object with connect and disconnect methods. This is used by the ChatRoom component to manage connections to different chat rooms.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection({ serverUrl, roomId }) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Outside Components\nDESCRIPTION: Shows how to properly initialize application-level features outside of React components, ensuring they only run once at startup.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') { // Check if we're running in the browser.\n  checkAuthToken();\n  loadDataFromLocalStorage();\n}\n\nfunction App() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React UNSAFE Method Example\nDESCRIPTION: Shows a deprecated UNSAFE lifecycle method in React class components that triggers Strict Mode warnings and should be migrated to newer alternatives.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nUNSAFE_componentWillMount\n```\n\n----------------------------------------\n\nTITLE: Handling Composition End Events with onCompositionEnd in React (JSX)\nDESCRIPTION: React prop for handling the completion or cancellation of an input method editor (IME) composition session. It expects a `CompositionEvent` handler function and corresponds to the browser's `compositionend` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionEnd\n```\n\n----------------------------------------\n\nTITLE: Styling Form Elements for Uncontrolled Select Example (CSS)\nDESCRIPTION: Basic CSS rules to style the labels and select elements within the uncontrolled form example. Ensures labels and selects are displayed as block elements with bottom margins for better layout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nlabel, select { display: block; }\nlabel { margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Installing React 19 with NPM\nDESCRIPTION: Commands for installing React 19 and its dependencies using NPM package manager.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-exact react@^19.0.0 react-dom@^19.0.0\n```\n\n----------------------------------------\n\nTITLE: Styling Button in React Form Example - CSS\nDESCRIPTION: Provides minimalist CSS styling for the form's button, ensuring it appears as a block element with top margin. Dependencies: None, intended to pair with the JavaScript form component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { display: block; margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component Container for Counter in React\nDESCRIPTION: This snippet shows a CounterContainer component that reads from the server's file system and passes the initial value to the Counter component. It doesn't require 'use client' as it's a Server Component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFile } from 'node:fs/promises';\nimport Counter from './Counter';\n\nexport default async function CounterContainer() {\n  const initialValue = await readFile('/path/to/counter_value');\n  return <Counter initialValue={initialValue} />\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the dispatch Function\nDESCRIPTION: Example showing how to call the dispatch function with an action object to trigger state updates. The action describes the type of update to perform.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n  dispatch({ type: 'incremented_age' });\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Utilizing Helper Function for Image URL\nDESCRIPTION: Refactors dynamic URL composition into a separate function, 'getImageUrl', which enhances readability and segregation of concerns in the code. This function is imported and utilized within the rendering logic of the 'TodoList' component, making the JSX simpler and more maintainable.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getImageUrl } from './utils.js'\n\nconst person = {\n  name: 'Gregorio Y. Zara',\n  imageId: '7vQD0fP',\n  imageSize: 's',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function getImageUrl(person) {\n  return (\n    'https://i.imgur.com/' +\n    person.imageId +\n    person.imageSize +\n    '.jpg'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Effect Dependencies by Moving Objects Inside the Effect\nDESCRIPTION: A better approach to handle object dependencies in Effects by defining the object directly inside the useEffect, eliminating the need for useMemo and reducing dependencies to just the primitive values needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = { // ✅ No need for useMemo or object dependencies!\n      serverUrl: 'https://localhost:1234',\n      roomId: roomId\n    }\n    \n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ Only changes when roomId changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Ref in React (Incorrect Usage)\nDESCRIPTION: This example demonstrates incorrect usage of ref for a counter, which doesn't trigger re-renders and thus doesn't update the displayed count.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let countRef = useRef(0);\n\n  function handleClick() {\n    // This doesn't re-render the component!\n    countRef.current = countRef.current + 1;\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {countRef.current} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Move Capture Events with onMouseMoveCapture in React (JSX)\nDESCRIPTION: React prop for handling mouse move events during the capture phase. This is the capture phase version of `onMouseMove`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseMoveCapture\n```\n\n----------------------------------------\n\nTITLE: Example HTML List Without Key Props\nDESCRIPTION: Example showing an unordered list of tasks before a change, used to illustrate why keys are necessary when rendering lists in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<li>Alexa: 7 tasks left</li>\n<li>Ben: 5 tasks left</li>\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Capture Events with onFocusCapture in React (JSX)\nDESCRIPTION: React prop for handling focus events during the capture phase. This is the capture phase version of `onFocus`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nonFocusCapture\n```\n\n----------------------------------------\n\nTITLE: Task Management App with Context Integration in React - JavaScript\nDESCRIPTION: This comprehensive snippet brings together useReducer and Context for state management, wrapping presentation logic with Providers from TasksContext.js. The app allows adding, updating, and deleting tasks, and the entire tree receives state and dispatch via context. Dependencies are React and the previously created context module. All top-level handlers interact with the reducer, and child components operate as before, but now context can be introduced to eliminate prop passing in further steps.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        <h1>Day off in Kyoto</h1>\n        <AddTask\n          onAddTask={handleAddTask}\n        />\n        <TaskList\n          tasks={tasks}\n          onChangeTask={handleChangeTask}\n          onDeleteTask={handleDeleteTask}\n        />\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  { id: 0, text: 'Philosopher’s Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite Loop with useEffect and setState in React\nDESCRIPTION: Highlights a potential pitfall: setting state within a `useEffect` Hook without specifying dependencies. Because the effect runs after every render, and setting state triggers a re-render, this creates an infinite loop.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst [count, setCount] = useState(0);\nuseEffect(() => {\n  setCount(count + 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Solving Reactivity Issues with useEffectEvent\nDESCRIPTION: Using the experimental useEffectEvent hook to extract non-reactive logic (reading isMuted) into a separate function that doesn't require adding isMuted to the effect's dependency array.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useEffectEvent } from 'react';\n\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  const onMessage = useEffectEvent(receivedMessage => {\n    setMessages(msgs => [...msgs, receivedMessage]);\n    if (!isMuted) {\n      playSound();\n    }\n  });\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Unfinished React-like State Management Implementation with DOM Updates\nDESCRIPTION: A partial implementation that introduces explicit state variables and setter functions, with a TODO-marked updateDOM function that needs to be completed to refresh the UI based on state changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet firstName = 'Jane';\nlet lastName = 'Jacobs';\nlet isEditing = false;\n\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n  setIsEditing(!isEditing);\n}\n\nfunction handleFirstNameChange(e) {\n  setFirstName(e.target.value);\n}\n\nfunction handleLastNameChange(e) {\n  setLastName(e.target.value);\n}\n\nfunction setFirstName(value) {\n  firstName = value;\n  updateDOM();\n}\n\nfunction setLastName(value) {\n  lastName = value;\n  updateDOM();\n}\n\nfunction setIsEditing(value) {\n  isEditing = value;\n  updateDOM();\n}\n\nfunction updateDOM() {\n  if (isEditing) {\n    editButton.textContent = 'Save Profile';\n    // TODO: show inputs, hide content\n  } else {\n    editButton.textContent = 'Edit Profile';\n    // TODO: hide inputs, show content\n  }\n  // TODO: update text labels\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nlet form = document.getElementById('form');\nlet editButton = document.getElementById('editButton');\nlet firstNameInput = document.getElementById('firstNameInput');\nlet firstNameText = document.getElementById('firstNameText');\nlet lastNameInput = document.getElementById('lastNameInput');\nlet lastNameText = document.getElementById('lastNameText');\nlet helloText = document.getElementById('helloText');\nform.onsubmit = handleFormSubmit;\nfirstNameInput.oninput = handleFirstNameChange;\nlastNameInput.oninput = handleLastNameChange;\n```\n\n----------------------------------------\n\nTITLE: Styling the Gallery Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Gallery component, including margin adjustments for headings, image dimensions, and button styling. It ensures proper layout and visual presentation of the component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n margin-top: 5px;\n font-weight: normal;\n font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\nbutton {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Preconnecting in a React Component's Render Method\nDESCRIPTION: Illustrates how to use the preconnect function when rendering a React component. This is useful when you know that child components will load external resources from a specific host.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preconnect.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n  preconnect(\"https://example.com\");\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from String Refs to Ref Callbacks in React Class Components\nDESCRIPTION: This snippet demonstrates how to update a class component from using deprecated string refs to the recommended ref callback approach. It shows how to access and focus an input element in the componentDidMount lifecycle method.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    this.refs.input.focus();\n  }\n\n  render() {\n    return <input ref='input' />;\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// After\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    this.input.focus();\n  }\n\n  render() {\n    return <input ref={input => this.input = input} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Double Click Events with onDoubleClick in React (JSX)\nDESCRIPTION: React prop for handling double-click events. It expects a `MouseEvent` handler function and corresponds to the browser's `dblclick` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nonDoubleClick\n```\n\n----------------------------------------\n\nTITLE: Importing and Using preinitModule in a React Component\nDESCRIPTION: Shows how to import preinitModule from react-dom and use it within a React component. This example demonstrates calling preinitModule during component rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinitModule.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with CSS\nDESCRIPTION: This CSS snippet provides styling for input elements, setting a margin to space them appropriately.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useId.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\ninput { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Extracting Component to Use useCallback Properly\nDESCRIPTION: Shows the correct approach to handle the list item optimization by extracting individual items into their own components where useCallback can be used at the top level.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ReportList({ items }) {\n  return (\n    <article>\n      {items.map(item =>\n        <Report key={item.id} item={item} />\n      )}\n    </article>\n  );\n}\n\nfunction Report({ item }) {\n  // ✅ Call useCallback at the top level:\n  const handleClick = useCallback(() => {\n    sendReport(item)\n  }, [item]);\n\n  return (\n    <figure>\n      <Chart onClick={handleClick} />\n    </figure>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Input Element in React\nDESCRIPTION: Shows how to render a simple input element using the built-in browser <input> component in React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<input />\n```\n\n----------------------------------------\n\nTITLE: Styling List Components for React UIs (CSS)\nDESCRIPTION: This CSS snippet defines styles for unordered and list elements, images, and headers to visually enhance React-rendered lists. It removes padding and list markers, applies a grid layout to list items, and styles images as rounded avatars. There are no dependencies; this style should be included in the component or global stylesheet. It targets classless HTML elements, so it is best used in controlled, sandboxed or demo environments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\nul { list-style-type: none; padding: 0px 10px; }\\nli {\\n  margin-bottom: 10px;\\n  display: grid;\\n  grid-template-columns: 1fr 1fr;\\n  align-items: center;\\n}\\nimg { width: 100px; height: 100px; border-radius: 50%; }\\nh1 { font-size: 22px; }\\nh2 { font-size: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense Component\nDESCRIPTION: Shows how to use Suspense to declaratively specify loading states for components that aren't ready to render.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Suspense fallback={<Spinner />}>\n  <Comments />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Calculating Props without useMemo, Breaking React.memo Optimization\nDESCRIPTION: This `TodoList` snippet shows `visibleTodos` being calculated directly within the component using `filterTodos`. Because `filterTodos` returns a new array instance on every call (even if the content is identical), the `items` prop passed to the memoized `List` component will always be a new reference. This prevents `React.memo` from skipping re-renders, even when `todos` and `tab` haven't changed, negating the optimization attempt.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js {2-3,6-7}\nexport default function TodoList({ todos, tab, theme }) {\n  // Every time the theme changes, this will be a different array...\n  const visibleTodos = filterTodos(todos, tab);\n  return (\n    <div className={theme}>\n      {/* ... so List's props will never be the same, and it will re-render every time */}\n      <List items={visibleTodos} />\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in React\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video in a React component using the YouTubeIframe component. It's used to showcase keynote videos from React Conf 2024.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/05/22/react-conf-2024-recap.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<YouTubeIframe src=\"https://www.youtube.com/embed/T8TZQ6k4SLE?t=973s\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Toggle Using useRef for Render State in React - JavaScript\nDESCRIPTION: Implements a toggle button where state is mismanaged by storing it in a ref, causing the component to never re-render or update the display. Requires only 'useRef' from React. Accepts click events; always shows 'Off'. Demonstrates why refs are unsuited for display-affecting state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Toggle() {\n  const isOnRef = useRef(false);\n\n  return (\n    <button onClick={() => {\n      isOnRef.current = !isOnRef.current;\n    }}>\n      {isOnRef.current ? 'On' : 'Off'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Local Array Mutation in React Component\nDESCRIPTION: Demonstrates safe local mutation within a React component where an array is created and modified during render. This pattern is acceptable since the mutation is contained within the component's render cycle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendList({ friends }) {\n  const items = []; // ✅ Good: locally created\n  for (let i = 0; i < friends.length; i++) {\n    const friend = friends[i];\n    items.push(\n      <Friend key={friend.id} friend={friend} />\n    ); // ✅ Good: local mutation is okay\n  }\n  return <section>{items}</section>;\n}\n```\n\n----------------------------------------\n\nTITLE: Execution Order of Code with startTransition in React\nDESCRIPTION: Demonstrates that the function passed to startTransition executes immediately rather than being delayed. It sets an internal flag that marks state updates inside as transitions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(1);\nstartTransition(() => {\n  console.log(2);\n  setPage('/about');\n});\nconsole.log(3);\n```\n\n----------------------------------------\n\nTITLE: Replacing Simulate with fireEvent from @testing-library/react\nDESCRIPTION: Shows how to migrate from the deprecated Simulate utility to fireEvent from @testing-library/react for triggering DOM events in tests.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-dom-test-utils.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Simulate} from 'react-dom/test-utils';\n\nconst element = document.querySelector('button');\nSimulate.click(element);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fireEvent} from '@testing-library/react';\n\nconst element = document.querySelector('button');\nfireEvent.click(element);\n```\n\n----------------------------------------\n\nTITLE: Solution with Named Exports - App Component\nDESCRIPTION: The App component updated to import Profile from its own file while maintaining named export syntax. It now renders both Profile and Gallery components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from './Gallery.js';\nimport { Profile } from './Profile.js';\n\nexport default function App() {\n  return (\n    <div>\n      <Profile />\n      <Gallery />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Messenger Components - CSS\nDESCRIPTION: This CSS code provides the styling for the messenger interface. It ensures that both the contact list and chat sections are floated left with consistent spacing, list items are unstyled, and text areas have a defined height. Button styles also specify padding and margins to ensure visual separation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.chat,\n.contact-list {\n  float: left;\n  margin-bottom: 20px;\n}\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli button {\n  width: 100px;\n  padding: 10px;\n  margin-right: 10px;\n}\ntextarea {\n  height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure Example\nDESCRIPTION: Example of traditional HTML markup for a todo list with an image and list items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hedy Lamarr's Todos</h1>\n<img \n  src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n  alt=\"Hedy Lamarr\" \n  class=\"photo\"\n>\n<ul>\n    <li>Invent new traffic lights\n    <li>Rehearse a movie scene\n    <li>Improve the spectrum technology\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Handling Composition Update Capture Events with onCompositionUpdateCapture in React (JSX)\nDESCRIPTION: React prop for handling the event when an IME receives a new character during a composition session, specifically during the event capture phase. This is the capture phase version of `onCompositionUpdate`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nonCompositionUpdateCapture\n```\n\n----------------------------------------\n\nTITLE: React Conference Section Headers\nDESCRIPTION: Markdown headers used to organize conferences into upcoming and past sections\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/conferences.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Upcoming Conferences {/*upcoming-conferences*/}\n\n## Past Conferences {/*past-conferences*/}\n```\n\n----------------------------------------\n\nTITLE: Counter Button Styling for React Example - CSS\nDESCRIPTION: Provides CSS styling for the React counter button example, arranging buttons inline and adjusting spacing and font size for better usability and appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Passing String Attributes to JSX Components in React\nDESCRIPTION: Example of passing static string attributes to an image component in JSX. This demonstrates using quotes to pass string values for className, src, and alt attributes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n      alt=\"Gregorio Y. Zara\"\n    />\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Basic Styling for Chat Interface\nDESCRIPTION: Simple CSS styles to improve the layout of the chat interface by properly displaying form elements with appropriate spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Initializing useRef with a Value and Avoiding Re-Creation - React JavaScript\nDESCRIPTION: Shows two ways to assign an initial value to a ref: directly via useRef(new VideoPlayer()), which re-executes the constructor each render (wasteful), and by conditionally assigning to ref.current within the function so the new object is created only once. Requires React and a VideoPlayer class. Limitation: Mutating ref.current in render is only safe for idempotent, predictable values as shown.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Video() {\n  const playerRef = useRef(new VideoPlayer());\n  // ...\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Video() {\n  const playerRef = useRef(null);\n  if (playerRef.current === null) {\n    playerRef.current = new VideoPlayer();\n  }\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Scoreboard with React Components\nDESCRIPTION: This JavaScript snippet demonstrates a scoreboard application allowing players to track scores across turns. It uses the Counter component to maintain per-player score and illustrates state preservation when switching between players.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA ? (\n        <Counter person=\"Taylor\" />\n      ) : (\n        <Counter person=\"Sarah\" />\n      )}\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Down Capture Events with onKeyDownCapture in React (JSX)\nDESCRIPTION: React prop for handling key down events during the capture phase. This is the capture phase version of `onKeyDown`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyDownCapture\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Profile in Markdown\nDESCRIPTION: This code snippet demonstrates how to use a custom TeamMember component to render a profile for a React Core team member. It includes the member's name, photo, social media links, job title, and a brief biography.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/team.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<TeamMember name=\"Andrew Clark\" permalink=\"andrew-clark\" photo=\"/images/team/acdlite.jpg\" github=\"acdlite\" twitter=\"acdlite\" threads=\"acdlite\" title=\"Engineer at Vercel\">\n    Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.\n</TeamMember>\n```\n\n----------------------------------------\n\nTITLE: Mock Chat Connection Implementation\nDESCRIPTION: Helper module that simulates chat connection functionality with timeout-based connected event\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  let connectedCallback;\n  let timeout;\n  return {\n    connect() {\n      timeout = setTimeout(() => {\n        if (connectedCallback) {\n          connectedCallback();\n        }\n      }, 100);\n    },\n    on(event, callback) {\n      if (connectedCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'connected') {\n        throw Error('Only \"connected\" event is supported.');\n      }\n      connectedCallback = callback;\n    },\n    disconnect() {\n      clearTimeout(timeout);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: External Store Subscription with useSyncExternalStore\nDESCRIPTION: Demonstrates the recommended approach for subscribing to external stores using the built-in useSyncExternalStore hook.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n\nfunction useOnlineStatus() {\n  // ✅ Good: Subscribing to an external store with a built-in Hook\n  return useSyncExternalStore(\n    subscribe, // React won't resubscribe for as long as you pass the same function\n    () => navigator.onLine, // How to get the value on the client\n    () => true // How to get the value on the server\n  );\n}\n\nfunction ChatIndicator() {\n  const isOnline = useOnlineStatus();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Labels with CSS\nDESCRIPTION: This CSS snippet styles label elements by displaying them as block elements with a top margin of 10 pixels, providing consistent spacing for form controls.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_31\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Form Submission in Event Handler\nDESCRIPTION: Shows the correct implementation of form submission logic using an event handler instead of useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Form() {\n  const theme = useContext(ThemeContext);\n\n  function handleSubmit() {\n    // ✅ Good: Event-specific logic is called from event handlers\n    post('/api/register');\n    showNotification('Successfully registered!', theme);\n  }  \n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Reactive Values Outside Component\nDESCRIPTION: A solution to avoid re-synchronization by moving values outside the component, making them non-reactive since they don't depend on rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\nconst roomId = 'general'; // roomId is not reactive\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Moving Dot Demo Body (CSS)\nDESCRIPTION: Associated with the React demo, this CSS snippet sets the height of the body element to 200px. No dependencies or parameters; it ensures the demonstration area has a fixed visual size within the UI example.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_24\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  height: 200px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Enter Events with onDragEnter in React (JSX)\nDESCRIPTION: React prop for handling the event when a dragged element or text selection enters a valid drop target. It expects a `DragEvent` handler function and corresponds to the browser's `dragenter` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nonDragEnter\n```\n\n----------------------------------------\n\nTITLE: Handling Lost Pointer Capture Events with onLostPointerCapture in React (JSX)\nDESCRIPTION: React prop for handling the event when a captured pointer is released (e.g., `element.releasePointerCapture()` is called). It expects a `PointerEvent` handler function and corresponds to the browser's `lostpointercapture` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nonLostPointerCapture\n```\n\n----------------------------------------\n\nTITLE: CSS for Menu Button Styling\nDESCRIPTION: Applies styling to menu buttons to provide spacing between elements, improving the UI layout. This CSS rule sets a top margin for buttons within a menu component, allowing for better visual separation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: React Background Component\nDESCRIPTION: Simple background component that renders a positioned div with transform translation based on provided coordinates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Background({\n  position\n}) {\n  return (\n    <div style={{\n      position: 'absolute',\n      transform: `translate(\n        ${position.x}px,\n        ${position.y}px\n      )`,\n      width: 250,\n      height: 250,\n      backgroundColor: 'rgba(200, 200, 0, 0.2)',\n    }} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Label and Theme\nDESCRIPTION: This CSS code provides basic styling. It ensures the label for the dark mode checkbox is displayed as a block element with some top margin. It also defines styles for `.dark` and `.light` classes, setting background and text colors for the theme toggle.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n```css\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.dark {\n  background-color: black;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Proper Hook Usage in React Components\nDESCRIPTION: Shows the correct way to use Hooks directly within components, rather than passing them as props or using them dynamically.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatInput() {\n  return <Button useData={useDataWithLogging} /> // 🔴 Bad: don't pass Hooks as props\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatInput() {\n  return <Button />\n}\n\nfunction Button() {\n  const data = useDataWithLogging(); // ✅ Good: Use the Hook directly\n}\n\nfunction useDataWithLogging() {\n  // If there's any conditional logic to change the Hook's behavior, it should be inlined into\n  // the Hook\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Taint Limitations\nDESCRIPTION: Example showing how derived values from tainted strings are not automatically tainted.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintUniqueValue.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {experimental_taintUniqueValue} from 'react';\n\nconst password = 'correct horse battery staple';\n\nexperimental_taintUniqueValue(\n  'Do not pass the password to the client.',\n  globalThis,\n  password\n);\n\nconst uppercasePassword = password.toUpperCase() // `uppercasePassword` is not tainted\n```\n\n----------------------------------------\n\nTITLE: Example HTML List After Changes Without Key Props\nDESCRIPTION: Example showing an unordered list of tasks after a change, demonstrating why React needs keys to properly track list item identity across renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<li>Ben: 9 tasks left</li>\n<li>Claudia: 8 tasks left</li>\n<li>Alexa: 5 tasks left</li>\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Check in Continuous Integration\nDESCRIPTION: Command for using Prettier's check functionality in continuous integration pipelines. This ensures that all code meets formatting standards before pull requests are merged.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/editor-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprettier --check\n```\n\n----------------------------------------\n\nTITLE: Implementing API Module for Data Fetching in React\nDESCRIPTION: This module contains functions for simulating API calls to fetch planet and place data. It includes error handling for invalid URLs and unknown planet IDs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nexport function fetchData(url) {\n  if (url === '/planets') {\n    return fetchPlanets();\n  } else if (url.startsWith('/planets/')) {\n    const match = url.match(/^\\/planets\\/([\\w-]+)\\/places(\\/)?$/);\n    if (!match || !match[1] || !match[1].length) {\n      throw Error('Expected URL like \"/planets/earth/places\". Received: \"' + url + '\".');\n    }\n    return fetchPlaces(match[1]);\n  } else throw Error('Expected URL like \"/planets\" or \"/planets/earth/places\". Received: \"' + url + '\".');\n}\n\nasync function fetchPlanets() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([{\n        id: 'earth',\n        name: 'Earth'\n      }, {\n        id: 'venus',\n        name: 'Venus'\n      }, {\n        id: 'mars',\n        name: 'Mars'        \n      }]);\n    }, 1000);\n  });\n}\n\nasync function fetchPlaces(planetId) {\n  if (typeof planetId !== 'string') {\n    throw Error(\n      'fetchPlaces(planetId) expects a string argument. ' +\n      'Instead received: ' + planetId + '.'\n    );\n  }\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (planetId === 'earth') {\n        resolve([{\n          id: 'laos',\n          name: 'Laos'\n        }, {\n          id: 'spain',\n          name: 'Spain'\n        }, {\n          id: 'vietnam',\n          name: 'Vietnam'        \n        }]);\n      } else if (planetId === 'venus') {\n        resolve([{\n          id: 'aurelia',\n          name: 'Aurelia'\n        }, {\n          id: 'diana-chasma',\n          name: 'Diana Chasma'\n        }, {\n          id: 'kumsong-vallis',\n          name: 'Kŭmsŏng Vallis'        \n        }]);\n      } else if (planetId === 'mars') {\n        resolve([{\n          id: 'aluminum-city',\n          name: 'Aluminum City'\n        }, {\n          id: 'new-new-york',\n          name: 'New New York'\n        }, {\n          id: 'vishniac',\n          name: 'Vishniac'\n        }]);\n      } else throw Error('Unknown planet ID: ' + planetId);\n    }, 1000);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Implementation for List Management\nDESCRIPTION: Creates a custom hook useList to extract list management logic, handling selection state and navigation functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function useList(items) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  function onNext() {\n    setSelectedIndex(i =>\n      (i + 1) % items.length\n    );\n  }\n\n  const selected = items[selectedIndex];\n  return [selected, onNext];\n}\n```\n\n----------------------------------------\n\nTITLE: Using renderToStaticMarkup in a Server Route Handler (JavaScript)\nDESCRIPTION: Illustrates how `renderToStaticMarkup` can be used within a server route handler (using generic syntax representative of frameworks like Express). It renders a `<Page />` component to static HTML and sends this HTML string as the server response. This method is suitable for generating static pages or email content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToStaticMarkup.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToStaticMarkup } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\napp.use('/', (request, response) => {\n  const html = renderToStaticMarkup(<Page />);\n  response.send(html);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic renderToString API Signature in React\nDESCRIPTION: The basic function signature for renderToString, which renders a React tree to an HTML string.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToString.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = renderToString(reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler RC using Package Managers\nDESCRIPTION: Commands for installing the React Compiler RC version using npm, pnpm, and yarn package managers with exact version pinning.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/04/21/react-compiler-rc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev --save-exact babel-plugin-react-compiler@rc\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --save-dev --save-exact babel-plugin-react-compiler@rc\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev --exact babel-plugin-react-compiler@rc\n```\n\n----------------------------------------\n\nTITLE: Loading Component Implementation for Suspense Fallback\nDESCRIPTION: A simple Loading component that displays a loading message, used as a fallback in Suspense.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Loading() {\n  return <p><i>Loading...</i></p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltips with CSS\nDESCRIPTION: CSS styles for the tooltip component, defining its appearance with a dark background, white text, rounded corners, and padding for better readability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.tooltip {\n  color: white;\n  background: #222;\n  border-radius: 4px;\n  padding: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Context Dependencies\nDESCRIPTION: Demonstrates importing useContext Hook and custom context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n```\n\n----------------------------------------\n\nTITLE: JSX Value Mutation\nDESCRIPTION: Shows correct and incorrect patterns for handling values after they've been used in JSX.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ colour }) {\n  const styles = { colour, size: \"large\" };\n  const header = <Header styles={styles} />;\n  styles.size = \"small\"; // 🔴 Bad: styles was already used in the JSX above\n  const footer = <Footer styles={styles} />;\n  return (\n    <>\n      {header}\n      <Content />\n      {footer}\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Page({ colour }) {\n  const headerStyles = { colour, size: \"large\" };\n  const header = <Header styles={headerStyles} />;\n  const footerStyles = { colour, size: \"small\" }; // ✅ Good: we created a new value\n  const footer = <Footer styles={footerStyles} />;\n  return (\n    <>\n      {header}\n      <Content />\n      {footer}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Structured Data for List Rendering (JavaScript)\nDESCRIPTION: This JavaScript snippet provides a static export of an array of people objects, each with structured properties for id, name, profession, accomplishment, and imageId. It serves as a data provider for React components, enabling easy iteration and modularization. There are no external dependencies; this file assumes other modules will import this data. The main expected usage is in mapping or filtering operations within React components, and it expects all fields to be present for formatting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const people = [{\\n  id: 0,\\n  name: 'Creola Katherine Johnson',\\n  profession: 'mathematician',\\n  accomplishment: 'spaceflight calculations',\\n  imageId: 'MK3eW3A'\\n}, {\\n  id: 1,\\n  name: 'Mario José Molina-Pasquel Henríquez',\\n  profession: 'chemist',\\n  accomplishment: 'discovery of Arctic ozone hole',\\n  imageId: 'mynHUSa'\\n}, {\\n  id: 2,\\n  name: 'Mohammad Abdus Salam',\\n  profession: 'physicist',\\n  accomplishment: 'electromagnetism theory',\\n  imageId: 'bE7W1ji'\\n}, {\\n  id: 3,\\n  name: 'Percy Lavon Julian',\\n  profession: 'chemist',\\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\\n  imageId: 'IOjWm71'\\n}, {\\n  id: 4,\\n  name: 'Subrahmanyan Chandrasekhar',\\n  profession: 'astrophysicist',\\n  accomplishment: 'white dwarf star mass calculations',\\n  imageId: 'lrWQx8l'\\n}];\n```\n\n----------------------------------------\n\nTITLE: Defining a Product Array for List Rendering\nDESCRIPTION: Sets up an array of product objects with properties that will be used to render a list of components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst products = [\n  { title: 'Cabbage', id: 1 },\n  { title: 'Garlic', id: 2 },\n  { title: 'Apple', id: 3 },\n];\n```\n\n----------------------------------------\n\nTITLE: Proper Hook Implementation Example\nDESCRIPTION: Demonstrates a proper Hook implementation that uses other Hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good: A Hook that uses other Hooks\nfunction useAuth() {\n  return useContext(Auth);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Over Capture Events with onDragOverCapture in React (JSX)\nDESCRIPTION: React prop for handling drag over events during the capture phase. This is the capture phase version of `onDragOver`. Remember to call `e.preventDefault()` to allow dropping.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nonDragOverCapture\n```\n\n----------------------------------------\n\nTITLE: Safely Lazily Initializing a Ref and Avoiding Null Checks - React JavaScript\nDESCRIPTION: This pattern creates a lazy initializer getPlayer() that checks if ref.current is set, and if not, creates and assigns a new VideoPlayer instance to it. This circumvents repeated null checks elsewhere in the code. Intended for use with type-checkers. Dependency: React, VideoPlayer class. Use getPlayer() in event handlers to guarantee a non-null player instance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Video() {\n  const playerRef = useRef(null);\n\n  function getPlayer() {\n    if (playerRef.current !== null) {\n      return playerRef.current;\n    }\n    const player = new VideoPlayer();\n    playerRef.current = player;\n    return player;\n  }\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Array Reduction Example in JavaScript\nDESCRIPTION: A simple example demonstrating JavaScript's array reduce() method to sum all numbers in an array. This illustrates the basic concept of accumulating a single value from multiple inputs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst arr = [1, 2, 3, 4, 5];\nconst sum = arr.reduce(\n  (result, number) => result + number\n); // 1 + 2 + 3 + 4 + 5\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Chat UI Components\nDESCRIPTION: Basic CSS styling for the chat interface components, providing visual structure to the input elements and buttons.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery Component with Local Variable in React\nDESCRIPTION: Demonstrates why using a local variable for state management doesn't work in React. The component attempts to display and cycle through sculptures using a local index variable, but fails to maintain state between renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  let index = 0;\n\n  function handleClick() {\n    index = index + 1;\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n      <p>\n        {sculpture.description}\n      </p>\n    </>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n  margin-top: 5px;\n  font-weight: normal;\n  font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\nbutton {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Artist Page Component Implementation\nDESCRIPTION: Complete implementation of an artist page component showing nested Suspense boundaries with loading states for biography and albums sections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react';\nimport Albums from './Albums.js';\nimport Biography from './Biography.js';\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<BigSpinner />}>\n        <Biography artistId={artist.id} />\n        <Suspense fallback={<AlbumsGlimmer />}>\n          <Panel>\n            <Albums artistId={artist.id} />\n          </Panel>\n        </Suspense>\n      </Suspense>\n    </>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n\nfunction AlbumsGlimmer() {\n  return (\n    <div className=\"glimmer-panel\">\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n      <div className=\"glimmer-line\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Application with CSS\nDESCRIPTION: This CSS snippet sets the height of the body and adds margin to the select element, providing basic styling for the React application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_26\n\nLANGUAGE: CSS\nCODE:\n```\nbody { height: 280px; }\nselect { margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Counting Children with Children.count\nDESCRIPTION: Demonstrates how to count the number of children in a component using Children.count()\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n  return (\n    <>\n      <h1>Total rows: {Children.count(children)}</h1>\n      ...\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Inputs and Buttons for Chat App (CSS)\nDESCRIPTION: Provides CSS rules to visually format input elements and buttons, ensuring proper spacing and usability within the chat room application's user interface. Contains rules for display and margin adjustments. No dependencies, can be used standalone or alongside React components to enhance form presentation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Gallery Component - CSS\nDESCRIPTION: Provides a basic set of styles for the Gallery component, including margins for headers, size constraints for images, and styling for button placement. Requires having a corresponding JS component using these classes and ids.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n margin-top: 5px;\n font-weight: normal;\n font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\nbutton {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Context Menu Capture Events with onContextMenuCapture in React (JSX)\nDESCRIPTION: React prop for handling context menu events during the capture phase. This is the capture phase version of `onContextMenu`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nonContextMenuCapture\n```\n\n----------------------------------------\n\nTITLE: Handling Got Pointer Capture Capture Events with onGotPointerCaptureCapture in React (JSX)\nDESCRIPTION: React prop for handling `gotpointercapture` events during the capture phase. This is the capture phase version of `onGotPointerCapture`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nonGotPointerCaptureCapture\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Cancel Events with onPointerCancel in React (JSX)\nDESCRIPTION: React prop for handling the event when a browser concludes a pointer event is unlikely to continue (e.g., due to device orientation change). It expects a `PointerEvent` handler function and corresponds to the browser's `pointercancel` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerCancel\n```\n\n----------------------------------------\n\nTITLE: Initializing Object State\nDESCRIPTION: Example of initializing state with an object containing position coordinates\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Rendering Syntax in Server Components\nDESCRIPTION: Highlights the `async`/`await` syntax used within React Server Components to handle asynchronous operations, such as awaiting data fetched by a cached function. This syntax is specific to Server Components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[3, 1, \"async\"], [3, 2, \"await\"]]\nasync function AnimatedWeatherCard({city}) {\n\tconst temperature = await getTemperature(city);\n\t// ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Counter Component Demonstrating useCounter with Fixed Delay - React JavaScript\nDESCRIPTION: A minimal component using the useCounter Hook with a fixed delay (1000ms) to increment a counter. The count is displayed as seconds passed. Focus is on demonstrating composition with a generic custom Hook, requiring that useCounter accepts a delay property. Assumes proper import and implementation of useCounter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n  const count = useCounter(1000);\n  return <h1>Seconds passed: {count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Terminal Command\nDESCRIPTION: Command to initialize a new Next.js application project using the create-next-app tool.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/creating-a-react-app.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Import for react-shallow-renderer\nDESCRIPTION: This code change shows how to update the import statement for shallow rendering, moving from the deprecated react-test-renderer/shallow to the standalone react-shallow-renderer package.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-shallow-renderer --save-dev\n```\n\nLANGUAGE: javascript\nCODE:\n```\n- import ShallowRenderer from 'react-test-renderer/shallow';\n+ import ShallowRenderer from 'react-shallow-renderer';\n```\n\n----------------------------------------\n\nTITLE: Styling for the Tic-Tac-Toe Game\nDESCRIPTION: CSS styles for the Tic-Tac-Toe game, including styling for the game board, squares, and status message.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_37\n\nLANGUAGE: CSS\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Images in React Component - JavaScript\nDESCRIPTION: This snippet presents a React component that cycles through a list of images. On clicking \"Next\", the current image is cleared, and the next one is loaded. The key prop is used on the img tag to force React to recreate the image node, ensuring the text matches the image.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const hasNext = index < images.length - 1;\n\n  function handleClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    } else {\n      setIndex(0);\n    }\n  }\n\n  let image = images[index];\n  return (\n    <>\n      <button onClick={handleClick}>\n        Next\n      </button>\n      <h3>\n        Image {index + 1} of {images.length}\n      </h3>\n      <img key={image.src} src={image.src} />\n      <p>\n        {image.place}\n      </p>\n    </>\n  );\n}\n\nlet images = [{\n  place: 'Penang, Malaysia',\n  src: 'https://i.imgur.com/FJeJR8M.jpg'\n}, {\n  place: 'Lisbon, Portugal',\n  src: 'https://i.imgur.com/dB2LRbj.jpg'\n}, {\n  place: 'Bilbao, Spain',\n  src: 'https://i.imgur.com/z08o2TS.jpg'\n}, {\n  place: 'Valparaíso, Chile',\n  src: 'https://i.imgur.com/Y3utgTi.jpg'\n}, {\n  place: 'Schwyz, Switzerland',\n  src: 'https://i.imgur.com/JBbMpWY.jpg'\n}, {\n  place: 'Prague, Czechia',\n  src: 'https://i.imgur.com/QwUKKmF.jpg'\n}, {\n  place: 'Ljubljana, Slovenia',\n  src: 'https://i.imgur.com/3aIiwfm.jpg'\n}];\n```\n\n----------------------------------------\n\nTITLE: Measuring Calculation Performance in React Components\nDESCRIPTION: This snippet demonstrates how to measure the performance of a calculation in a React component using console.time and console.timeEnd. It also shows how to wrap the calculation in useMemo for optimization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time('filter array');\nconst visibleTodos = getFilteredTodos(todos, filter);\nconsole.timeEnd('filter array');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time('filter array');\nconst visibleTodos = useMemo(() => {\n  return getFilteredTodos(todos, filter); // Skipped if todos and filter haven't changed\n}, [todos, filter]);\nconsole.timeEnd('filter array');\n```\n\n----------------------------------------\n\nTITLE: Client-side Hydration Setup\nDESCRIPTION: Example of client-side hydration setup using hydrateRoot\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client';\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n```\n\n----------------------------------------\n\nTITLE: React Intro Component with Team Description\nDESCRIPTION: JSX component providing introductory text about the React team structure\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/team.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro>\n\nReact development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.\n\n</Intro>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pure Function in JavaScript\nDESCRIPTION: A simple example of a pure mathematical function that always returns the same output for the same input.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction double(number) {\n  return 2 * number;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Profile Component - Sophie Alpert\nDESCRIPTION: JSX component displaying profile information for Sophie Alpert, including photo, social media links, and biographical information about her contributions to React.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/team.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TeamMember name=\"Sophie Alpert\" permalink=\"sophie-alpert\" photo=\"/images/team/sophiebits.jpg\" github=\"sophiebits\" twitter=\"sophiebits\" threads=\"sophiebits\" personal=\"sophiebits.com\" title=\"Independent Engineer\">\n    Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project's #1 committer, she wondered why she wasn't getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she's still in the team's group chats and \"providing value\".\n</TeamMember>\n```\n\n----------------------------------------\n\nTITLE: Styling React Components\nDESCRIPTION: This CSS snippet provides styling for a label element and a counter class used in the React application. It defines styles for hover effects and the layout of components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Input and Button - CSS\nDESCRIPTION: Provides basic CSS for formatting input and button elements used in the chat application, setting display properties and margins.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Messenger Styling\nDESCRIPTION: CSS styles for the messenger application components including chat and contact list layouts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_34\n\nLANGUAGE: css\nCODE:\n```\n.chat,\n.contact-list {\n  float: left;\n  margin-bottom: 20px;\n}\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli button {\n  width: 100px;\n  padding: 10px;\n  margin-right: 10px;\n}\ntextarea {\n  height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements with Explicit Fragment Import in React (JavaScript)\nDESCRIPTION: This snippet demonstrates importing Fragment from 'react' and using the explicit <Fragment>...</Fragment> syntax, allowing assignment of additional props such as 'key'. React must be imported. Useful when you need Fragment features that the shorthand syntax does not support.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\nimport { Fragment } from 'react';\n\nfunction Post() {\n  return (\n    <Fragment>\n      <PostTitle />\n      <PostBody />\n    </Fragment>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: React Chat App Component Implementation\nDESCRIPTION: Main App component that manages room selection and encryption toggle state, passing appropriate connection handlers to ChatRoom component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport ChatRoom from './ChatRoom.js';\nimport {\n  createEncryptedConnection,\n  createUnencryptedConnection,\n} from './chat.js';\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isEncrypted, setIsEncrypted] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isEncrypted}\n          onChange={e => setIsEncrypted(e.target.checked)}\n        />\n        Enable encryption\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        createConnection={isEncrypted ?\n          createEncryptedConnection :\n          createUnencryptedConnection\n        }\n      />\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for React Component\nDESCRIPTION: The CSS snippet provides styles for the React component to remove padding and margin from body, add padding to the div, and style 'avatar' class with a circular shape. These styles are used to enhance the visual presentation of the 'TodoList' component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\nbody { padding: 0; margin: 0 }\nbody > div > div { padding: 20px; }\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Cloning Children in a List Component\nDESCRIPTION: Illustrates how to use cloneElement within a List component to add an isHighlighted prop to each child Row component based on the selected index.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cloneElement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function List({ children }) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return (\n    <div className=\"List\">\n      {Children.map(children, (child, index) =>\n        cloneElement(child, {\n          isHighlighted: index === selectedIndex \n        })\n      )}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Importing Shared Cached Function (Temperature)\nDESCRIPTION: Shows how the `Temperature` component imports the shared cached function (`getWeekReport`) from the dedicated module (`./getWeekReport.js`) to ensure it accesses the same cache as other components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[3, 2, \"getWeekReport\", 0], [3, 5, \"getWeekReport\"]]\n// Temperature.js\nimport getWeekReport from './getWeekReport';\n\nexport default function Temperature({cityData}) {\n\tconst report = getWeekReport(cityData);\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Server Action Implementation for Cart\nDESCRIPTION: Server action function implementation that returns different responses based on the item ID, demonstrating how server functions work with useActionState.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\";\n\nexport async function addToCart(prevState, queryData) {\n  const itemID = queryData.get('itemID');\n  if (itemID === \"1\") {\n    return \"Added to cart\";\n  } else {\n    // Add a fake delay to make waiting noticeable.\n    await new Promise(resolve => {\n      setTimeout(resolve, 2000);\n    });\n    return \"Couldn't add to cart: the item is sold out.\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Progress Elements with CSS in React\nDESCRIPTION: This CSS snippet demonstrates how to style progress elements to display as block-level elements, ensuring each progress bar appears on a new line.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/progress.md#2025-04-22_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nprogress { display: block; }\n```\n\n----------------------------------------\n\nTITLE: API for User Signup in JavaScript\nDESCRIPTION: This helper function manages user email storage, ensuring each email can only be added once. It throws an error if the email already exists, which allows the form to handle duplicate entries gracefully.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet emails = [];\n\nexport async function signUpNewUser(newEmail) {\n  if (emails.includes(newEmail)) {\n    throw new Error(\"This email address has already been added\");\n  }\n  emails.push(newEmail);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Markdown Editor Example with Lazy Loading\nDESCRIPTION: A full example of a Markdown editor application that uses lazy loading with Suspense to load the preview component only when needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, Suspense, lazy } from 'react';\nimport Loading from './Loading.js';\n\nconst MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));\n\nexport default function MarkdownEditor() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [markdown, setMarkdown] = useState('Hello, **world**!');\n  return (\n    <>\n      <textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />\n      <label>\n        <input type=\"checkbox\" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />\n        Show preview\n      </label>\n      <hr />\n      {showPreview && (\n        <Suspense fallback={<Loading />}>\n          <h2>Preview</h2>\n          <MarkdownPreview markdown={markdown} />\n        </Suspense>\n      )}\n    </>\n  );\n}\n\n// Add a fixed delay so you can see the loading state\nfunction delayForDemo(promise) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  }).then(() => promise);\n}\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to React.dev\nDESCRIPTION: Git commands for staging changes, committing with a descriptive message, and pushing to a forked repository.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A && git commit -m \"My message\"\ngit push my-fork-name the-name-of-my-branch\n```\n\n----------------------------------------\n\nTITLE: Optimized Data Fetching with Router Loader Pattern in React\nDESCRIPTION: This example shows the preferred pattern for data fetching using a router loader function that starts data fetching in parallel with code downloading, improving performance by reducing wait times.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function loader() {\n  const response = await fetch(`/api/data`);\n  const data = await response.json();\n  return data;\n}\n\n// ✅ Fetching data in parallel while the code is downloading\nexport default function Dashboard({loaderData}) {\n  return (\n    <div>\n      {loaderData.map(item => <div key={item.id}>{item.name}</div>)}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Tic-Tac-Toe Game with CSS\nDESCRIPTION: CSS styles for the Tic-Tac-Toe game example, defining layout and appearance of the game board, squares, and other UI elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Tic-Tac-Toe Game\nDESCRIPTION: CSS styling for the tic-tac-toe game, including styling for the game board, squares, and layout. The CSS provides proper visual representation for the game interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_53\n\nLANGUAGE: css\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with Comment\nDESCRIPTION: Section header for thank you message with HTML-style comment for navigation\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Thank you {/*thank-you*/}\n```\n\n----------------------------------------\n\nTITLE: Reversing Arrays in React State\nDESCRIPTION: Shows how to safely reverse an array in React state by first creating a copy. This example demonstrates proper immutable array manipulation when using mutating methods like reverse().\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies' },\n  { id: 1, title: 'Lunar Landscape' },\n  { id: 2, title: 'Terracotta Army' },\n];\n\nexport default function List() {\n  const [list, setList] = useState(initialList);\n\n  function handleClick() {\n    const nextList = [...list];\n    nextList.reverse();\n    setList(nextList);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Reverse\n      </button>\n      <ul>\n        {list.map(artwork => (\n          <li key={artwork.id}>{artwork.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Capture Events with onDragCapture in React (JSX)\nDESCRIPTION: React prop for handling drag events during the capture phase. This is the capture phase version of `onDrag`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nonDragCapture\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Types for React 19\nDESCRIPTION: Commands for installing TypeScript type definitions for React 19.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --exact @types/react@^19.0.0 @types/react-dom@^19.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Height for Body in CSS\nDESCRIPTION: This CSS snippet sets a minimum height for the body element to ensure sufficient space for the component to operate.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_55\n\nLANGUAGE: css\nCODE:\n```\nbody { min-height: 300px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Select Elements for Controlled Select Example (CSS)\nDESCRIPTION: Simple CSS rules to style the select elements within the controlled select box example. Applies bottom margin and block display to select elements for visual spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nselect { margin-bottom: 10px; display: block; }\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel for React Project Setup\nDESCRIPTION: Command to install Parcel as a development dependency in your project. Parcel is a zero-configuration build tool that supports React, JSX, TypeScript, and styling out of the box.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/build-a-react-app-from-scratch.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev parcel\n```\n\n----------------------------------------\n\nTITLE: Impure React Reducer with State Mutation\nDESCRIPTION: Example of an incorrect reducer implementation that directly mutates the state array, which becomes apparent through React's double-calling behavior in Strict Mode.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'added_todo': {\n      // 🚩 Mistake: mutating state\n      state.todos.push({ id: nextId++, text: action.text });\n      return state;\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Elements for useFormStatus Example in CSS\nDESCRIPTION: Provides basic CSS rules for styling elements within the `UsernameForm` React component example. It sets height, padding, margin, and font size for paragraphs (`p`) and adds a left margin to buttons (`button`).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\np {\n    height: 14px;\n    padding: 0;\n    margin: 2px 0 0 0 ;\n    font-size: 14px\n}\n\nbutton {\n    margin-left: 2px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: React Compiler Version Target Configuration\nDESCRIPTION: Babel configuration for specifying the target React version when using React Compiler with React 17 or 18.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst ReactCompilerConfig = {\n  target: '18' // '17' | '18' | '19'\n};\n\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Background Color Change in React\nDESCRIPTION: This snippet shows a React component that uses custom hooks to display a counter and change the background color randomly. It demonstrates the use of useCounter and useInterval hooks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCounter } from './useCounter.js';\nimport { useInterval } from './useInterval.js';\n\nexport default function Counter() {\n  const count = useCounter(1000);\n\n  useInterval(() => {\n    const randomColor = `hsla(${Math.random() * 360}, 100%, 50%, 0.2)`;\n    document.body.style.backgroundColor = randomColor;\n  }, 2000);\n\n  return <h1>Seconds passed: {count}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Async Scripts within React Components (JavaScript)\nDESCRIPTION: Example of rendering an asynchronous script (`<script async={true} src=\\\"\\\"...\\\"\">`) directly within a React component (React 19+). React handles deduplication, ensuring the script is loaded and executed only once, even if rendered multiple times (e.g., rendering `MyComponent` twice). During Server Side Rendering, these scripts are included in the `<head>`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js {4,15}\nfunction MyComponent() {\n  return (\n    <div>\n      <script async={true} src=\"...\" />\n      Hello World\n    </div>\n  )\n}\n\nfunction App() {\n  <html>\n    <body>\n      <MyComponent>\n      ...\n      <MyComponent> // won't lead to duplicate script in the DOM\n    </body>\n  </html>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Themed Footer and Panel CSS - Overriding Context Styles\nDESCRIPTION: Extends themed button and panel styles to add a styled footer and ensure margin, borders, and theme coloring for nested components. Integrates with classNames set in JS context consumers. No required JS dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nfooter {\\n  margin-top: 20px;\\n  border-top: 1px solid #aaa;\\n}\\n\\n.panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\n```\n\n----------------------------------------\n\nTITLE: React Community Page Frontmatter\nDESCRIPTION: Markdown frontmatter defining the title of the React community documentation page.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: React Community\n---\n```\n\n----------------------------------------\n\nTITLE: Styling for Bio Component with CSS Gradients\nDESCRIPTION: CSS styles for the Bio component including a rainbow gradient text effect for the intro class and gold border styling for the summary section.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.intro {\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  background-clip: text;\n  color: transparent;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n.summary {\n  padding: 20px;\n  border: 10px solid gold;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect useMemo Usage in Loop - React Component\nDESCRIPTION: Example showing incorrect implementation of useMemo inside a map loop, which violates React Hooks rules.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ReportList({ items }) {\n  return (\n    <article>\n      {items.map(item => {\n        // 🔴 You can't call useMemo in a loop like this:\n        const data = useMemo(() => calculateReport(item), [item]);\n        return (\n          <figure key={item.id}>\n            <Chart data={data} />\n          </figure>\n        );\n      })}\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Moving Dot Demo Body (CSS, Solution 2)\nDESCRIPTION: Replicating the body height styling, this CSS is associated with the optimal React solution, again making the demo's area appropriately tall for the dot to move within. No dependencies, parameters, or side effects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_28\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  height: 200px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling Theme and Form Components\nDESCRIPTION: CSS styles for form layout and theme colors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block; margin-top: 10px;\n}\n\ninput {\n  margin-left: 5px;\n}\n\nbutton[type=\"button\"] {\n  margin: 5px;\n}\n\n.dark {\n  background-color: black;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Form with useActionState\nDESCRIPTION: Example of using useActionState with an async increment function to create a stateful form component. The state is updated when the form button is clicked.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useActionState } from \"react\";\n\nasync function increment(previousState, formData) {\n  return previousState + 1;\n}\n\nfunction StatefulForm({}) {\n  const [state, formAction] = useActionState(increment, 0);\n  return (\n    <form>\n      {state}\n      <button formAction={formAction}>Increment</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons for Timer Component in React (CSS)\nDESCRIPTION: This CSS snippet provides basic styling, adding margin around all button elements in the timer interface. It is essential for visual spacing and improves usability in the React demo UI. Should be included in main or component-level CSS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Future Hook Implementation\nDESCRIPTION: Shows a Hook that's prepared for future Hook implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good: A Hook that will likely use some other Hooks later\nfunction useAuth() {\n  // TODO: Replace with this line when authentication is implemented:\n  // return useContext(Auth);\n  return TEST_USER;\n}\n```\n\n----------------------------------------\n\nTITLE: Profile Component Styling\nDESCRIPTION: CSS styles for the Profile and Gallery components, defining layout, spacing, and visual appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.avatar { margin: 5px; border-radius: 50%; min-height: 70px; }\n.profile {\n  border: 1px solid #aaa;\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\nh1, h2 { margin: 5px; }\nh1 { margin-bottom: 10px; }\nul { padding: 0px 10px 0px 20px; }\nli { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Handling Drag End Events with onDragEnd in React (JSX)\nDESCRIPTION: React prop for handling the event when a drag operation ends (e.g., releasing the mouse button or hitting Esc). It expects a `DragEvent` handler function and corresponds to the browser's `dragend` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nonDragEnd\n```\n\n----------------------------------------\n\nTITLE: Styling Select Elements in React\nDESCRIPTION: This CSS snippet provides basic styling for select elements, adding a margin to create space around the dropdown.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/option.md#2025-04-22_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nselect { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Basic Styling for Todo List UI (CSS)\nDESCRIPTION: Defines simple styling rules for buttons, lists, and list items to enhance layout and visual clarity. These styles affect the margin, listing style, and spacing within the todo list application UI. No dependencies are required except standard CSS support.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\n```\n\n----------------------------------------\n\nTITLE: Simplified FadeInAnimation Implementation in JavaScript\nDESCRIPTION: A simplified version of the FadeInAnimation class for the solution example. This version removes the special case for zero duration but maintains the core animation functionality using requestAnimationFrame.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nexport class FadeInAnimation {\n  constructor(node) {\n    this.node = node;\n  }\n  start(duration) {\n    this.duration = duration;\n    this.onProgress(0);\n    this.startTime = performance.now();\n    this.frameId = requestAnimationFrame(() => this.onFrame());\n  }\n  onFrame() {\n    const timePassed = performance.now() - this.startTime;\n    const progress = Math.min(timePassed / this.duration, 1);\n    this.onProgress(progress);\n    if (progress < 1) {\n      // We still have more frames to paint\n      this.frameId = requestAnimationFrame(() => this.onFrame());\n    }\n  }\n  onProgress(progress) {\n    this.node.style.opacity = progress;\n  }\n  stop() {\n    cancelAnimationFrame(this.frameId);\n    this.startTime = null;\n    this.frameId = null;\n    this.duration = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contact Tab Panel Component - React JavaScript\nDESCRIPTION: ContactTab is a simple React functional component that returns contact information as a paragraph and an unordered list. No dependencies or configurable parameters; input and output are static, making it suitable as a tab panel within the parent UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function ContactTab() {\n  return (\n    <>\n      <p>\n        You can find me online here:\n      </p>\n      <ul>\n        <li>admin@mysite.com</li>\n        <li>+123456789</li>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Null Ref: Correctly Passing Ref with forwardRef in React\nDESCRIPTION: Provides the corrected implementation for the previous troubleshooting example. The `ref` received by the `forwardRef` component is now correctly passed to the underlying `input` element's `ref` prop, resolving the `null` ref issue.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/forwardRef.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst MyInput = forwardRef(function MyInput({ label }, ref) {\n  return (\n    <label>\n      {label}\n      <input ref={ref} />\n    </label>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Gallery Styling\nDESCRIPTION: CSS styles for the gallery component including button layout, spacing, and image dimensions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n.Page > * {\n  float: left;\n  width: 50%;\n  padding: 10px;\n}\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n  margin-top: 5px;\n  font-weight: normal;\n  font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\n```\n\n----------------------------------------\n\nTITLE: Chat Component Implementation\nDESCRIPTION: Component that handles the chat interface including message input and sending functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n  return (\n    <section className=\"chat\">\n      <textarea\n        value={message}\n        placeholder={'Chat to ' + contact.name}\n        onChange={(e) => {\n          dispatch({\n            type: 'edited_message',\n            message: e.target.value,\n          });\n        }}\n      />\n      <br />\n      <button\n        onClick={() => {\n          alert(`Sending \"${message}\" to ${contact.email}`);\n          dispatch({\n            type: 'sent_message',\n          });\n        }}>\n        Send to {contact.email}\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Gallery Component with CSS\nDESCRIPTION: CSS styles for the Gallery component that style the headings, images, and buttons to create a clean and usable interface. Includes margin adjustments, font styling, image dimensions, and button positioning.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nh2 { margin-top: 10px; margin-bottom: 0; }\nh3 {\n margin-top: 5px;\n font-weight: normal;\n font-size: 100%;\n}\nimg { width: 120px; height: 120px; }\nbutton {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with CSS Margins\nDESCRIPTION: The CSS snippet applies a margin of 5 pixels to button elements, ensuring consistent spacing around buttons across the project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Using the 'is' Attribute for Custom Elements in React\nDESCRIPTION: Highlights the `is` global HTML attribute. When used on a built-in HTML element within React, it signals React to treat the element as a custom element, applying specific rendering rules like string attribute serialization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nis\n```\n\n----------------------------------------\n\nTITLE: Styling Sections with CSS\nDESCRIPTION: This CSS snippet provides styling for the Section component, adding padding, margin, rounded corners, and a border to visually separate sections in the UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @testing-library/react for React Testing\nDESCRIPTION: Example of importing @testing-library/react, which is recommended for testing React applications as an alternative to the deprecated react-test-renderer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-test-renderer.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[@testing-library/react](https://testing-library.com/docs/react-testing-library/intro/)\n```\n\n----------------------------------------\n\nTITLE: Section Styling\nDESCRIPTION: CSS styling for the Section component including fancy variant\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n\n.fancy {\n  border: 4px dashed pink;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Todo List\nDESCRIPTION: Basic CSS styling for the todo list component, providing proper display and spacing for labels and inputs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Package Configuration\nDESCRIPTION: NPM package configuration specifying React and other dependencies required for the chat room implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"experimental\",\n    \"react-dom\": \"experimental\",\n    \"react-scripts\": \"latest\",\n    \"toastify-js\": \"1.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler Beta with Yarn\nDESCRIPTION: Command to install the React Compiler Beta and its ESLint plugin using Yarn. This adds the compiler and linting tools as development dependencies for a React project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta\n```\n\n----------------------------------------\n\nTITLE: Styling for Loading States\nDESCRIPTION: CSS styles for the loading states and content panels, including glimmer effects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.bio { font-style: italic; }\n\n.panel {\n  border: 1px solid #aaa;\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-panel {\n  border: 1px dashed #aaa;\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-line {\n  display: block;\n  width: 60%;\n  height: 20px;\n  margin: 10px;\n  border-radius: 4px;\n  background: #f0f0f0;\n}\n```\n\n----------------------------------------\n\nTITLE: Themed Panel and Button CSS - Context Styles\nDESCRIPTION: Provides CSS for themed panels and buttons, supporting both light and dark themes using class selectors suffixed by theme name. Ensures visual distinction based on context value. No dependencies, but classNames must match context-derived values in JS.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\n.panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Server Rendering in React\nDESCRIPTION: This code demonstrates how to abort server-side rendering after a specified timeout, allowing React to flush remaining loading fallbacks and attempt client-side rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { pipe, abort } = renderToPipeableStream(<App />, {\n  // ...\n});\n\nsetTimeout(() => {\n  abort();\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Calculating Primitive Values from Functions in React Effect\nDESCRIPTION: This snippet shows how to call a function prop outside the Effect to obtain primitive values, which can then be used as dependencies in the useEffect hook without causing unnecessary re-connections.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ getOptions }) {\n  const [message, setMessage] = useState('');\n\n  const { roomId, serverUrl } = getOptions();\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists with map() in React\nDESCRIPTION: Shows how to transform an array of data into React elements using the JavaScript map() function, with proper key attributes for list items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst listItems = products.map(product =>\n  <li key={product.id}>\n    {product.title}\n  </li>\n);\n\nreturn (\n  <ul>{listItems}</ul>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling for Tab Components\nDESCRIPTION: CSS styles defining the appearance of buttons, bold text, and pending states in the tab interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-right: 10px }\nb { display: inline-block; margin-right: 10px; }\n.pending { color: #777; }\n```\n\n----------------------------------------\n\nTITLE: Counter Button Styling for React Updater Example - CSS\nDESCRIPTION: Defines consistent button styling for the React counter example using updater functions, ensuring uniform appearance for all buttons.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Scientists List in React\nDESCRIPTION: This CSS snippet provides styling for the list of scientists, including list item layout, image sizing, and overall appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\nul { list-style-type: none; padding: 0px 10px; }\nli {\n  margin-bottom: 10px;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  gap: 20px;\n  align-items: center;\n}\nimg { width: 100px; height: 100px; border-radius: 50%; }\n```\n\n----------------------------------------\n\nTITLE: State-Based Routing Implementation in React\nDESCRIPTION: An anti-pattern example showing how not to implement routing using state in React. This approach doesn't create shareable URLs and leads to structural difficulties as the app grows.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useState} from 'react';\n\nimport Home from './Home';\nimport Dashboard from './Dashboard';\n\nexport default function App() {\n  // ❌ Routing in state does not create URLs\n  const [route, setRoute] = useState('home');\n  return (\n    <div>\n      {route === 'home' && <Home />}\n      {route === 'dashboard' && <Dashboard />}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies for React and use-immer Example - JSON\nDESCRIPTION: Lists all dependencies required for the useImmer React example to run, including specific versions of immer, react, react-dom, react-scripts, and use-immer, plus basic script commands. Should be placed in package.json in a React project before running. Ensures compatibility and reproducibility.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Moving Dot Demo Body (CSS, Solution 1)\nDESCRIPTION: This CSS snippet adjusts the height of the body for the first solution, matching the React demonstration's requirements by defining a fixed height. It contains no dependencies or parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_26\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  height: 200px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for React Application with Immer\nDESCRIPTION: This JSON snippet defines the package.json file, listing dependencies including React, Immer, and use-immer, along with scripts for running the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure with Built-in Keys\nDESCRIPTION: Example of data structure containing unique IDs that can be used as React keys\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const people = [{\n  id: 0, // Used in JSX as a key\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n  accomplishment: 'spaceflight calculations',\n  imageId: 'MK3eW3A'\n}, {\n  id: 1, // Used in JSX as a key\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n  accomplishment: 'discovery of Arctic ozone hole',\n  imageId: 'mynHUSa'\n}, {\n  id: 2, // Used in JSX as a key\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n  accomplishment: 'electromagnetism theory',\n  imageId: 'bE7W1ji'\n}, {\n  id: 3, // Used in JSX as a key\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n  imageId: 'IOjWm71'\n}, {\n  id: 4, // Used in JSX as a key\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n  accomplishment: 'white dwarf star mass calculations',\n  imageId: 'lrWQx8l'\n}];\n```\n\n----------------------------------------\n\nTITLE: Defining Sculpture Data for Gallery Component\nDESCRIPTION: This snippet contains an array of sculpture objects, each with properties like name, artist, description, URL, and alt text. This data is used by the Gallery component to display information about different sculptures.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism's geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n```\n\n----------------------------------------\n\nTITLE: Bundle Structure Without Code Splitting in React Applications\nDESCRIPTION: This snippet illustrates how a React application ships as a single large bundle when code splitting is not implemented, resulting in longer load times for users.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- bundle.js    75kb\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of taintObjectReference in React\nDESCRIPTION: Shows how to import and call the taintObjectReference function to prevent passing an object to client components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintObjectReference.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexperimental_taintObjectReference(message, object);\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in React\nDESCRIPTION: This example shows how to use onKeyDown and onKeyUp event handlers for input elements in React. It logs the respective event names to the console when triggered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n<input\n  onKeyDown={e => console.log('onKeyDown')}\n  onKeyUp={e => console.log('onKeyUp')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Cancel Capture Events with onPointerCancelCapture in React (JSX)\nDESCRIPTION: React prop for handling pointer cancel events during the capture phase. This is the capture phase version of `onPointerCancel`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerCancelCapture\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Cache Miss with Non-Primitive Arguments\nDESCRIPTION: This example shows a common issue where cache misses occur because non-primitive arguments (like objects) are passed to a memoized function. React uses shallow equality to determine cache hits, so different object references with the same content will not match.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cache} from 'react';\n\nconst calculateNorm = cache((vector) => {\n  // ...\n});\n\nfunction MapMarker(props) {\n  // 🚩 Wrong: props is an object that changes every render.\n  const length = calculateNorm(props);\n  // ...\n}\n\nfunction App() {\n  return (\n    <>\n      <MapMarker x={10} y={10} z={10} />\n      <MapMarker x={10} y={10} z={10} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Styling\nDESCRIPTION: CSS styling for the chat room component labels\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Adding Logging to useInterval Hook in React\nDESCRIPTION: This snippet adds console logging to the useInterval hook to debug issues with interval execution. It logs when an interval is set up and cleared.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  console.log('✅ Setting up an interval with delay ', delay)\n  const id = setInterval(onTick, delay);\n  return () => {\n    console.log('❌ Clearing an interval with delay ', delay)\n    clearInterval(id);\n  };\n}, [onTick, delay]);\n```\n\n----------------------------------------\n\nTITLE: CSS for Button Styling with Margin\nDESCRIPTION: Simple CSS styling for buttons, adding display block and bottom margin to create vertical spacing between elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Empty Profile Component File\nDESCRIPTION: An empty file where the Profile component should be moved to complete the exercise.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Accessing react-shallow-renderer on NPM\nDESCRIPTION: Link to the NPM package for react-shallow-renderer, which can be used as an alternative to the deprecated shallow renderer in react-test-renderer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-test-renderer.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[NPM](https://www.npmjs.com/package/react-shallow-renderer)\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Rules for React Components\nDESCRIPTION: Example of CSS rules that would be defined in a separate file to style React components with the corresponding className.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_70\n\nLANGUAGE: css\nCODE:\n```\n/* In your CSS */\n.avatar {\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Labels for Form Controls (CSS)\nDESCRIPTION: Applies formatting to label elements used in forms, increasing readability and maintaining visual consistency across the chat application's input controls. Sets display to block and adds a top margin. Intended for use alongside React apps and does not require external dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference Definition\nDESCRIPTION: Reference-style link definition for the Contributor Covenant homepage.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CODE_OF_CONDUCT.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[homepage]: https://www.contributor-covenant.org\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Down Capture Events with onPointerDownCapture in React (JSX)\nDESCRIPTION: React prop for handling pointer down events during the capture phase. This is the capture phase version of `onPointerDown`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_53\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerDownCapture\n```\n\n----------------------------------------\n\nTITLE: Accessing react-shallow-renderer on GitHub\nDESCRIPTION: Link to the GitHub repository for react-shallow-renderer, which can be used as an alternative to the deprecated shallow renderer in react-test-renderer.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-test-renderer.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Github](https://github.com/enzymejs/react-shallow-renderer)\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Input Element (Context: Deferred Value)\nDESCRIPTION: Simple CSS rule applying a 10px margin to input elements, used for layout spacing in the second Sandpack example demonstrating deferred values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_27\n\nLANGUAGE: css\nCODE:\n```\ninput { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Canary Channel using Yarn\nDESCRIPTION: This command upgrades React packages to the most recent release in the Canary channel using the Yarn package manager. It's an alternative to npm for projects using Yarn for dependency management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/versioning-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn upgrade react@canary react-dom@canary\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Hydrated React Root – React DOM Client – JavaScript\nDESCRIPTION: This one-line snippet shows how to unmount a React tree from its root using root.unmount(). This detaches React from the root DOM node, removes event listeners, and cleans up associated resources. It's mostly needed if the DOM node is removed or replaced outside React, e.g., by external scripts or frameworks. Inputs: none. Output: undefined. After calling, the root should not be reused.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Components\nDESCRIPTION: Shows how to define CSS rules in a separate CSS file that will be applied to React components through className references.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* In your CSS */\n.avatar {\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Components for Checkout UI\nDESCRIPTION: This CSS snippet provides styling for the checkout UI components, including the item display, input fields, and total display.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.item {\n  display: flex;\n  align-items: center;\n  justify-content: start;\n}\n\n.item label {\n  flex: 1;\n  text-align: right;\n}\n\n.item input {\n  margin-left: 4px;\n  width: 60px;\n  padding: 4px;\n}\n\n.total {\n  height: 50px;\n  line-height: 25px;\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Button Margins in CSS\nDESCRIPTION: Simple CSS styling for buttons in the travel planner application, setting consistent margins.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Email Contact Information in Markdown\nDESCRIPTION: Contact email address for reporting code of conduct violations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<opensource-conduct@fb.com>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for React and Immer\nDESCRIPTION: This JSON snippet shows the package.json configuration for a React project using Immer. It includes dependencies for React, Immer, and related scripts for running the application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Copy Events with onCopy in React (JSX)\nDESCRIPTION: React prop for handling the event when the user tries to copy content to the clipboard. It expects a `ClipboardEvent` handler function and corresponds to the browser's `copy` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nonCopy\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Gallery Component\nDESCRIPTION: Basic HTML structure defining the DOM elements needed for the sculpture gallery implementation, including buttons, header, description, and image elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"nextButton\">\n  Next\n</button>\n<h3 id=\"header\"></h3>\n<button id=\"moreButton\"></button>\n<p id=\"description\"></p>\n<img id=\"image\">\n\n<style>\n* { box-sizing: border-box; }\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\nbutton { display: block; margin-bottom: 10px; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Leaflet Map Widget Functionalities\nDESCRIPTION: This JavaScript file exports functions to create and interact with a Leaflet map widget. It involves setting up the map and adding a popup, facilitating React integration through DOM manipulation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/createPortal.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'leaflet/dist/leaflet.css';\nimport * as L from 'leaflet';\n\nexport function createMapWidget(containerDomNode) {\n  const map = L.map(containerDomNode);\n  map.setView([0, 0], 0);\n  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    maxZoom: 19,\n    attribution: '© OpenStreetMap'\n  }).addTo(map);\n  return map;\n}\n\nexport function addPopupToMapWidget(map) {\n  const popupDiv = document.createElement('div');\n  L.popup()\n    .setLatLng([0, 0])\n    .setContent(popupDiv)\n    .openOn(map);\n  return popupDiv;\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Form Fields with React State\nDESCRIPTION: This component allows swapping the order of first and last name fields based on a checkbox state. It uses the 'key' prop to maintain input state when reordering fields.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const [reverse, setReverse] = useState(false);\n  let checkbox = (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={reverse}\n        onChange={e => setReverse(e.target.checked)}\n      />\n      Reverse order\n    </label>\n  );\n  if (reverse) {\n    return (\n      <>\n        <Field key=\"lastName\" label=\"Last name\" /> \n        <Field key=\"firstName\" label=\"First name\" />\n        {checkbox}\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Field key=\"firstName\" label=\"First name\" /> \n        <Field key=\"lastName\" label=\"Last name\" />\n        {checkbox}\n      </>\n    );    \n  }\n}\n\nfunction Field({ label }) {\n  const [text, setText] = useState('');\n  return (\n    <label>\n      {label}:{' '}\n      <input\n        type=\"text\"\n        value={text}\n        placeholder={label}\n        onChange={e => setText(e.target.value)}\n      />\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sculpture Data for React Gallery Component\nDESCRIPTION: This code snippet defines an array of sculpture objects, each containing properties such as name, artist, description, URL, and alt text. This data is used by the Gallery component to display information about various sculptures.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism's geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n```\n\n----------------------------------------\n\nTITLE: Styling Inputs and Buttons with CSS\nDESCRIPTION: This CSS snippet defines basic styling for input elements and buttons. It provides spacing and positioning to enhance the form appearance in the chat application interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Todo List Styling in CSS\nDESCRIPTION: CSS styles for the todo list application that removes default list styling and adds proper spacing to buttons for better usability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#2025-04-22_snippet_24\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Chat Connection in React\nDESCRIPTION: A utility module that simulates chat connection logic. It provides connect and disconnect methods that log connection status to the console, used for demonstrating Effect behavior.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in the Browser with React DOM Client API\nDESCRIPTION: The `react-dom/client` API provides methods like `createRoot` and `hydrateRoot` that enable rendering React applications within a browser's DOM node. Dependencies include a modern browser with support for React, while older browsers, such as IE 9 and IE 10, require additional polyfills. It initializes the React component tree and manages client-side rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/index.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [`createRoot`](/reference/react-dom/client/createRoot) lets you create a root to display React components inside a browser DOM node.\n* [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`.](/reference/react-dom/server)\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Connection Functionality in JavaScript\nDESCRIPTION: This JavaScript module exports a createConnection function that simulates establishing a connection to a server. It implements methods for connecting, handling events, and disconnecting with timeout management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  let connectedCallback;\n  let timeout;\n  return {\n    connect() {\n      timeout = setTimeout(() => {\n        if (connectedCallback) {\n          connectedCallback();\n        }\n      }, 100);\n    },\n    on(event, callback) {\n      if (connectedCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'connected') {\n        throw Error('Only \"connected\" event is supported.');\n      }\n      connectedCallback = callback;\n    },\n    disconnect() {\n      clearTimeout(timeout);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Todo App Styling\nDESCRIPTION: Basic CSS styling for the todo application, including button margins and list styles.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Styling the Music Browser Application Components\nDESCRIPTION: CSS styles for various components including layouts, panels, loading states with glimmer effects, and typography for the music browser application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_35\n\nLANGUAGE: css\nCODE:\n```\nmain {\n  min-height: 200px;\n  padding: 10px;\n}\n\n.layout {\n  border: 1px solid black;\n}\n\n.header {\n  background: #222;\n  padding: 10px;\n  text-align: center;\n  color: white;\n}\n\n.bio { font-style: italic; }\n\n.panel {\n  border: 1px solid #aaa;\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-panel {\n  border: 1px dashed #aaa;\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-line {\n  display: block;\n  width: 60%;\n  height: 20px;\n  margin: 10px;\n  border-radius: 4px;\n  background: #f0f0f0;\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List Styling\nDESCRIPTION: CSS styles for the Todo List component, adding spacing and display properties to form elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-top: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Handling Drag End Capture Events with onDragEndCapture in React (JSX)\nDESCRIPTION: React prop for handling drag end events during the capture phase. This is the capture phase version of `onDragEnd`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nonDragEndCapture\n```\n\n----------------------------------------\n\nTITLE: Styling for Animation Example\nDESCRIPTION: CSS styles for the animation example that set display properties for labels and buttons, and define minimum height for HTML and body elements to ensure proper visibility of the animation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nlabel, button { display: block; margin-bottom: 20px; }\nhtml, body { min-height: 300px; }\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Inputs and Buttons\nDESCRIPTION: This CSS snippet applies styling rules to input and button elements, ensuring that inputs are displayed as block elements with bottom margins, and buttons have left margins for spacing. No external dependencies are required, and the styling affects visual layout only.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_26\n\nLANGUAGE: CSS\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Return from Arrow Function in useMemo\nDESCRIPTION: An example of a common mistake where an arrow function's braces are confused with object literal braces, causing the function to not return an object as expected.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n  // 🔴 You can't return an object from an arrow function with () => {\n  const searchOptions = useMemo(() => {\n    matchMode: 'whole-word',\n    text: text\n  }, [text]);\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler ESLint Plugin with npm\nDESCRIPTION: Command to install only the ESLint plugin for React Compiler using npm. This allows developers to use the linting rules without installing the full compiler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -D eslint-plugin-react-compiler@beta\n```\n\n----------------------------------------\n\nTITLE: Styling for Animal List Component\nDESCRIPTION: CSS styles for layout and presentation of the animal list interface, including navigation buttons and image layout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  width: 100%;\n  overflow: hidden;\n}\n\nnav {\n  text-align: center;\n}\n\nbutton {\n  margin: .25rem;\n}\n\nul,\nli {\n  list-style: none;\n  white-space: nowrap;\n}\n\nli {\n  display: inline;\n  padding: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating act() Import from react-dom/test-utils to react\nDESCRIPTION: Shows how to update the import statement for act() from the deprecated react-dom/test-utils to the new location in react package.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-dom-test-utils.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {act} from 'react-dom/test-utils';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {act} from 'react';\n```\n\n----------------------------------------\n\nTITLE: Styling Nested Form and Image Elements in React (CSS)\nDESCRIPTION: This CSS snippet extends the previous form styling for labels and inputs and adds style rules for images within the form, constraining width and height to 200px. Used for visually consistent display of artwork images alongside form fields. Dependencies: none. Inputs: CSS class selectors applied to label, input, and img in the form.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\nimg { width: 200px; height: 200px; }\n```\n\n----------------------------------------\n\nTITLE: Introducing useInsertionEffect Hook in React\nDESCRIPTION: New Hook specifically designed for CSS-in-JS libraries to address performance issues when injecting styles. It runs after DOM mutation but before layout effects read the new layout. Primarily intended for library use rather than application code.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseInsertionEffect\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Plugin\nDESCRIPTION: Command to install the React Compiler ESLint plugin separately\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D eslint-plugin-react-hooks@^6.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Creating Task List and Task Item Components in React (JavaScript)\nDESCRIPTION: Defines the `TaskList` component which renders a list (`ul`) of `Task` components based on the `tasks` prop. The nested `Task` component displays individual task details, allows editing via an input field (managed with `useState`), toggling completion status, and deleting tasks using the `onChange` and `onDelete` callback props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n  return (\n    <ul>\n      {tasks.map((task) => (\n        <li key={task.id}>\n          <Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({task, onChange, onDelete}) {\n  const [isEditing, setIsEditing] = useState(false);\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={(e) => {\n            onChange({\n              ...task,\n              text: e.target.value,\n            });\n          }}\n        />\n        <button onClick={() => setIsEditing(false)}>Save</button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>Edit</button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={(e) => {\n          onChange({\n            ...task,\n            done: e.target.checked,\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => onDelete(task.id)}>Delete</button>\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Extension in VS Code\nDESCRIPTION: Command sequence for installing the Prettier extension in Visual Studio Code using the Quick Open feature. This extension helps with automatic code formatting according to predefined style rules.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/editor-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\next install esbenp.prettier-vscode\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of renderToStaticMarkup in JavaScript\nDESCRIPTION: Shows the basic function signature for `renderToStaticMarkup`. It accepts a React node (`reactNode`) and an optional `options` object, returning an HTML string. This function is typically used on the server.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToStaticMarkup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = renderToStaticMarkup(reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: Root App Component Structure\nDESCRIPTION: Example of a root App component structure that returns complete HTML document\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/static/prerenderToNodeStream.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <html>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/styles.css\"></link>\n        <title>My app</title>\n      </head>\n      <body>\n        <Router />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Task Application Elements\nDESCRIPTION: Provides minimal CSS rules for the task list application example. It adds some margin around buttons and removes the default list bullet points and padding/margins for `ul` and `li` elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  margin: 5px;\n}\nli {\n  list-style-type: none;\n}\nul,\nli {\n  margin: 0;\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: React Markdown Editor with Preview - JavaScript\nDESCRIPTION: This snippet defines a Markdown editor as a React component, which uses a controlled textarea state and shows a real-time Markdown preview by rendering a child component. On every textarea change, the 'postContent' state is updated and passed to the preview. The component depends on React and a local MarkdownPreview component. Inputs are textarea keystrokes, and output is rendered Markdown below the textarea. 'remarkable' is a required dependency for Markdown parsing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport MarkdownPreview from './MarkdownPreview.js';\n\nexport default function MarkdownEditor() {\n  const [postContent, setPostContent] = useState('_Hello,_ **Markdown**!');\n  return (\n    <>\n      <label>\n        Enter some markdown:\n        <textarea\n          value={postContent}\n          onChange={e => setPostContent(e.target.value)}\n        />\n      </label>\n      <hr />\n      <MarkdownPreview markdown={postContent} />\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Client-Side Code Directive in React Server Components\nDESCRIPTION: The 'use client' directive marks code that should run on the client side in React Server Components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/directives.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n```\n\n----------------------------------------\n\nTITLE: Memoizing Object Dependencies in React\nDESCRIPTION: A better approach where the searchOptions object itself is memoized before being used as a dependency for another useMemo call. This ensures the dependency only changes when the text prop changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Dropdown({ allItems, text }) {\n  const searchOptions = useMemo(() => {\n    return { matchMode: 'whole-word', text };\n  }, [text]); // ✅ Only changes when text changes\n\n  const visibleItems = useMemo(() => {\n    return searchItems(allItems, searchOptions);\n  }, [allItems, searchOptions]); // ✅ Only changes when allItems or searchOptions changes\n  // ...\n```\n\n----------------------------------------\n\nTITLE: React Application Configuration\nDESCRIPTION: This JSON snippet provides the configuration for a React application project. It includes the required dependencies such as `react` and `toastify-js` and specifies related script commands for application lifecycle management.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"toastify-js\": \"1.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React 18 Release Candidate\nDESCRIPTION: Command to install React 18 RC version using npm package manager\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@rc react-dom@rc\n```\n\n----------------------------------------\n\nTITLE: Configuring React Documentation Homepage in Markdown\nDESCRIPTION: This frontmatter block configures the React documentation homepage by defining its ID as 'home', setting the title to 'React', and establishing the permalink as 'index.html'. There's also a comment indicating that the actual content is located in a separate file called 'HomeContent.js'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: home\ntitle: React\npermalink: index.html\n---\n\n{/* See HomeContent.js */}\n```\n\n----------------------------------------\n\nTITLE: Server-Only API Helper with Tainted Values\nDESCRIPTION: Example of creating a server-only API helper that safely handles tainted API credentials.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintUniqueValue.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"server-only\";\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass the API token password to the client. ' +\n    'Instead do all fetches on the server.'\n  process,\n  process.env.API_PASSWORD\n);\n```\n\n----------------------------------------\n\nTITLE: Styling List and List Items with CSS\nDESCRIPTION: This CSS snippet provides styling for an unordered list and its list items, creating a grid layout for each item with an image and text description.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\nul { list-style-type: none; padding: 0px 10px; }\nli { \n  margin-bottom: 10px; \n  display: grid; \n  grid-template-columns: auto 1fr;\n  gap: 20px;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Mutating a Nested Object Property (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the direct, mutable approach to updating a property (artwork.city) in a nested object. While this works outside of React state, it is not suitable for React state management due to immutability practices. Useful as a contrasting example for why immutable updates are necessary in React. Dependencies: none specific, generic JavaScript. Input is an object structure, output is direct modification of a property.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nperson.artwork.city = 'New Delhi';\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Packing List Components\nDESCRIPTION: CSS styles for the packing list application that add margins to buttons and remove default list styling to create a cleaner interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Up Capture Events with onMouseUpCapture in React (JSX)\nDESCRIPTION: React prop for handling mouse up events during the capture phase. This is the capture phase version of `onMouseUp`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\nonMouseUpCapture\n```\n\n----------------------------------------\n\nTITLE: Styling Select Options in CSS\nDESCRIPTION: This CSS snippet provides basic styling for labels in the select options component, setting display to block and adding bottom margin.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_39\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Using createInitialState Without Initializer Function\nDESCRIPTION: This code snippet shows the inefficient way of using useReducer where the initial state function is called on every render, which can be wasteful for expensive calculations.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createInitialState(username) {\n  // ...\n}\n\nfunction TodoList({ username }) {\n  const [state, dispatch] = useReducer(reducer, createInitialState(username));\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Minimal Styling for Task UI - CSS\nDESCRIPTION: This CSS snippet provides basic layout and minimal visual enhancements for the task management user interface. It removes bullet points from list items, adjusts margin and padding, and spaces button elements. This ensures the task UI appears clean, uncluttered, and visually separated, with no dependencies beyond a standard browser rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Hooks in React\nDESCRIPTION: This snippet illustrates various incorrect ways of using Hooks, including inside conditions, loops, after conditional returns, in event handlers, inside useMemo, in class components, and in try/catch blocks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/rules-of-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Bad({ cond }) {\n  if (cond) {\n    // 🔴 Bad: inside a condition (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad() {\n  for (let i = 0; i < 10; i++) {\n    // 🔴 Bad: inside a loop (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad({ cond }) {\n  if (cond) {\n    return;\n  }\n  // 🔴 Bad: after a conditional return (to fix, move it before the return!)\n  const theme = useContext(ThemeContext);\n  // ...\n}\n\nfunction Bad() {\n  function handleClick() {\n    // 🔴 Bad: inside an event handler (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad() {\n  const style = useMemo(() => {\n    // 🔴 Bad: inside useMemo (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n    return createStyle(theme);\n  });\n  // ...\n}\n\nclass Bad extends React.Component {\n  render() {\n    // 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)\n    useEffect(() => {})\n    // ...\n  }\n}\n\nfunction Bad() {\n  try {\n    // 🔴 Bad: inside try/catch/finally block (to fix, move it outside!)\n    const [x, setX] = useState(0);\n  } catch {\n    const [x, setX] = useState(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Error Types in React Server Rendering\nDESCRIPTION: Advanced error handling that differentiates between error types to return appropriate status codes. This example shows how to handle 404 errors differently from other server errors using custom error classes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  let didError = false;\n  let caughtError = null;\n\n  function getStatusCode() {\n    if (didError) {\n      if (caughtError instanceof NotFoundError) {\n        return 404;\n      } else {\n        return 500;\n      }\n    } else {\n      return 200;\n    }\n  }\n\n  try {\n    const stream = await renderToReadableStream(<App />, {\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        didError = true;\n        caughtError = error;\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    return new Response(stream, {\n      status: getStatusCode(),\n      headers: { 'content-type': 'text/html' },\n    });\n  } catch (error) {\n    return new Response('<h1>Something went wrong</h1>', {\n      status: getStatusCode(),\n      headers: { 'content-type': 'text/html' },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Props Mutation Examples\nDESCRIPTION: Contrasts incorrect props mutation with correct approach of creating new objects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Post({ item }) {\n  item.url = new Url(item.url, base); // 🔴 Bad: never mutate props directly\n  return <Link url={item.url}>{item.title}</Link>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Post({ item }) {\n  const url = new Url(item.url, base); // ✅ Good: make a copy instead\n  return <Link url={url}>{item.title}</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Completed React-like State Management with DOM Updates in JavaScript\nDESCRIPTION: A complete implementation of React-like state management using explicit state variables and a centralized updateDOM function that handles all UI updates based on the current state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet firstName = 'Jane';\nlet lastName = 'Jacobs';\nlet isEditing = false;\n\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n  setIsEditing(!isEditing);\n}\n\nfunction handleFirstNameChange(e) {\n  setFirstName(e.target.value);\n}\n\nfunction handleLastNameChange(e) {\n  setLastName(e.target.value);\n}\n\nfunction setFirstName(value) {\n  firstName = value;\n  updateDOM();\n}\n\nfunction setLastName(value) {\n  lastName = value;\n  updateDOM();\n}\n\nfunction setIsEditing(value) {\n  isEditing = value;\n  updateDOM();\n}\n\nfunction updateDOM() {\n  if (isEditing) {\n    editButton.textContent = 'Save Profile';\n    hide(firstNameText);\n    hide(lastNameText);\n    show(firstNameInput);\n    show(lastNameInput);\n  } else {\n    editButton.textContent = 'Edit Profile';\n    hide(firstNameInput);\n    hide(lastNameInput);\n    show(firstNameText);\n    show(lastNameText);\n  }\n  firstNameText.textContent = firstName;\n  lastNameText.textContent = lastName;\n  helloText.textContent = (\n    'Hello ' +\n    firstName + ' ' +\n    lastName + '!'\n  );\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nlet form = document.getElementById('form');\nlet editButton = document.getElementById('editButton');\nlet firstNameInput = document.getElementById('firstNameInput');\nlet firstNameText = document.getElementById('firstNameText');\nlet lastNameInput = document.getElementById('lastNameInput');\nlet lastNameText = document.getElementById('lastNameText');\nlet helloText = document.getElementById('helloText');\nform.onsubmit = handleFormSubmit;\nfirstNameInput.oninput = handleFirstNameChange;\nlastNameInput.oninput = handleLastNameChange;\n```\n\n----------------------------------------\n\nTITLE: Basic React Button Component\nDESCRIPTION: Simple example of a React button component that doesn't yet have any event handling functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Button() {\n  return (\n    <button>\n      I don't do anything\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Packages to Canary Channel using npm\nDESCRIPTION: This command updates React packages to the most recent release in the Canary channel using the npm package manager. It's used for integration testing to ensure compatibility with upcoming React releases.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/versioning-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm update react@canary react-dom@canary\n```\n\n----------------------------------------\n\nTITLE: Styling for Animation Example in CSS\nDESCRIPTION: Simple CSS styling for the animation example that sets spacing for form elements and ensures the animation has enough vertical space to be visible.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_32\n\nLANGUAGE: css\nCODE:\n```\nlabel, button { display: block; margin-bottom: 20px; }\nhtml, body { min-height: 300px; }\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Task Application\nDESCRIPTION: Basic CSS styling for the task application, including styles for buttons, list items, and layout adjustments.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { list-style-type: none; }\nul, li { margin: 0; padding: 0; }\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Events in React\nDESCRIPTION: Shows how to handle focus events in React components using onFocus and onBlur event handlers. These handlers receive a React event object with FocusEvent properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n<input\n  onFocus={e => console.log('onFocus')}\n  onBlur={e => console.log('onBlur')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Hooks in React\nDESCRIPTION: Shows examples of incorrect hook usage, including inside conditions, loops, after conditional returns, in event handlers, and in class components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-hook-call-warning.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Bad({ cond }) {\n  if (cond) {\n    // 🔴 Bad: inside a condition (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad() {\n  for (let i = 0; i < 10; i++) {\n    // 🔴 Bad: inside a loop (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad({ cond }) {\n  if (cond) {\n    return;\n  }\n  // 🔴 Bad: after a conditional return (to fix, move it before the return!)\n  const theme = useContext(ThemeContext);\n  // ...\n}\n\nfunction Bad() {\n  function handleClick() {\n    // 🔴 Bad: inside an event handler (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n  }\n  // ...\n}\n\nfunction Bad() {\n  const style = useMemo(() => {\n    // 🔴 Bad: inside useMemo (to fix, move it outside!)\n    const theme = useContext(ThemeContext);\n    return createStyle(theme);\n  });\n  // ...\n}\n\nclass Bad extends React.Component {\n  render() {\n    // 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)\n    useEffect(() => {})\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Block Style for Fixed Debounced Button Example - CSS\nDESCRIPTION: Provides CSS block display and margin for all buttons, ensuring consistent and accessible layout. No dependencies. Intended for use with the fixed debounced buttons example to visually separate them.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Chat Room Styling\nDESCRIPTION: Basic CSS styling for the chat room interface elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_48\n\nLANGUAGE: css\nCODE:\n```\nlabel, button { display: block; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Section Styling\nDESCRIPTION: CSS styles for the Section component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.section {\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Mail Client\nDESCRIPTION: Styles for the mail client UI, including formatting for inputs, list items, labels, and selected state highlighting.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_38\n\nLANGUAGE: css\nCODE:\n```\ninput { margin: 5px; }\nli { border-radius: 5px; }\nlabel { width: 100%; padding: 5px; display: inline-block; }\n.selected { background: #d2eaff; }\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure Example\nDESCRIPTION: Demonstrates the basic HTML structure that React components are built upon, showing an article with a heading and ordered list.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission with Imperative DOM Manipulation\nDESCRIPTION: An example of imperative UI programming where form submission is handled using direct DOM manipulation. The code manually enables/disables elements, shows/hides messages, and handles the form submission process with async/await.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n  disable(textarea);\n  disable(button);\n  show(loadingMessage);\n  hide(errorMessage);\n  try {\n    await submitForm(textarea.value);\n    show(successMessage);\n    hide(form);\n  } catch (err) {\n    show(errorMessage);\n    errorMessage.textContent = err.message;\n  } finally {\n    hide(loadingMessage);\n    enable(textarea);\n    enable(button);\n  }\n}\n\nfunction handleTextareaChange() {\n  if (textarea.value.length === 0) {\n    disable(button);\n  } else {\n    enable(button);\n  }\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nfunction enable(el) {\n  el.disabled = false;\n}\n\nfunction disable(el) {\n  el.disabled = true;\n}\n\nfunction submitForm(answer) {\n  // Pretend it's hitting the network.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (answer.toLowerCase() === 'istanbul') {\n        resolve();\n      } else {\n        reject(new Error('Good guess but a wrong answer. Try again!'));\n      }\n    }, 1500);\n  });\n}\n\nlet form = document.getElementById('form');\nlet textarea = document.getElementById('textarea');\nlet button = document.getElementById('button');\nlet loadingMessage = document.getElementById('loading');\nlet errorMessage = document.getElementById('error');\nlet successMessage = document.getElementById('success');\nform.onsubmit = handleFormSubmit;\ntextarea.oninput = handleTextareaChange;\n```\n\n----------------------------------------\n\nTITLE: Handling Lost Pointer Capture Capture Events with onLostPointerCaptureCapture in React (JSX)\nDESCRIPTION: React prop for handling `lostpointercapture` events during the capture phase. This is the capture phase version of `onLostPointerCapture`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nonLostPointerCaptureCapture\n```\n\n----------------------------------------\n\nTITLE: Chat Room Styles\nDESCRIPTION: Basic CSS styling for the chat room interface labels.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_32\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Chat Room Components with CSS\nDESCRIPTION: This CSS snippet provides basic styling for labels and buttons in the chat room interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_42\n\nLANGUAGE: css\nCODE:\n```\nlabel, button { display: block; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Updating Textarea to a Transformed Value - JavaScript\nDESCRIPTION: This snippet exemplifies a common bug in controlled React forms: updating the state variable to a transformation of the value (in this case, uppercasing it) rather than the raw DOM value. This can cause caret jumping issues. It depends on React, a state variable named firstName, and demonstrates incorrect usage in the event handler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleChange(e) {\n  // 🔴 Bug: updating an input to something other than e.target.value\n  setFirstName(e.target.value.toUpperCase());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler Dependencies with Yarn\nDESCRIPTION: Command to install React Compiler and ESLint plugin using Yarn package manager\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D babel-plugin-react-compiler@rc eslint-plugin-react-hooks@^6.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Setting Status Code in React Server Streaming\nDESCRIPTION: Code showing how to set the HTTP status code for server-rendered React content. This example demonstrates the basic pattern for handling the stream in the response with a default 200 status.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  try {\n    const stream = await renderToReadableStream(<App />, {\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    return new Response(stream, {\n      status: 200,\n      headers: { 'content-type': 'text/html' },\n    });\n  } catch (error) {\n    return new Response('<h1>Something went wrong</h1>', {\n      status: 500,\n      headers: { 'content-type': 'text/html' },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Compiler ESLint Plugin with Yarn\nDESCRIPTION: Command to install only the ESLint plugin for React Compiler using Yarn. This adds the linting rules as a development dependency without the full compiler.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add -D eslint-plugin-react-compiler@beta\n```\n\n----------------------------------------\n\nTITLE: Button Block Style for Debounced Button Example - CSS\nDESCRIPTION: Applies basic margin and block display styling to all button elements in the debounced button example, improving spacing for visual clarity. No dependencies. Targets all <button> tags on the page.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component with Tooltip Buttons\nDESCRIPTION: The main App component renders multiple ButtonWithTooltip components with different tooltip contents. Each button demonstrates tooltip positioning behavior, showing how tooltips can appear above or below buttons based on available space.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n  return (\n    <div>\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>\n            This tooltip does not fit above the button.\n            <br />\n            This is why it's displayed below instead!\n          </div>\n        }\n      >\n        Hover over me (tooltip above)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n      <div style={{ height: 50 }} />\n      <ButtonWithTooltip\n        tooltipContent={\n          <div>This tooltip fits above the button</div>\n        }\n      >\n        Hover over me (tooltip below)\n      </ButtonWithTooltip>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Data for React Mail Client\nDESCRIPTION: Sample data structure containing letter objects with IDs, subjects, and starred status for the mail client application.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nexport const letters = [{\n  id: 0,\n  subject: 'Ready for adventure?',\n  isStarred: true,\n}, {\n  id: 1,\n  subject: 'Time to check in!',\n  isStarred: false,\n}, {\n  id: 2,\n  subject: 'Festival Begins in Just SEVEN Days!',\n  isStarred: false,\n}];\n```\n\n----------------------------------------\n\nTITLE: Using useFormStatus Hook in React 19\nDESCRIPTION: Example showing how to use the new useFormStatus hook to access form status information in design components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFormStatus} from 'react-dom';\n\nfunction DesignButton() {\n  const {pending} = useFormStatus();\n  return <button type=\"submit\" disabled={pending} />\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Gallery Component\nDESCRIPTION: Simple CSS styling for the gallery buttons, providing proper spacing and display properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nbutton { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Task List and Task Components with Context\nDESCRIPTION: Components for displaying and interacting with tasks. The TaskList component accesses tasks from context, and the Task component accesses the dispatch function to modify or delete tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useContext } from 'react';\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskList() {\n  const tasks = useContext(TasksContext);\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useContext(TasksDispatchContext);\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            dispatch({\n              type: 'changed',\n              task: {\n                ...task,\n                text: e.target.value\n              }\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          dispatch({\n            type: 'changed',\n            task: {\n              ...task,\n              done: e.target.checked\n            }\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => {\n        dispatch({\n          type: 'deleted',\n          id: task.id\n        });\n      }}>\n        Delete\n      </button>\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cut Events with onCut in React (JSX)\nDESCRIPTION: React prop for handling the event when the user tries to cut content to the clipboard. It expects a `ClipboardEvent` handler function and corresponds to the browser's `cut` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nonCut\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Form Behavior in React\nDESCRIPTION: Demonstrates how to prevent default form submission behavior using e.preventDefault()\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/responding-to-events.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Signup() {\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      alert('Submitting!');\n    }}>\n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-left: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Images in React - CSS\nDESCRIPTION: This CSS snippet defines fixed dimensions for images in the gallery, ensuring consistency in the image display with width and height set to 150px.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nimg { width: 150px; height: 150px; }\n```\n\n----------------------------------------\n\nTITLE: Styling for React Product Filtering Application\nDESCRIPTION: CSS styles for the product filtering application components, including padding and spacing for labels, table headers and cells.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  padding: 5px\n}\nlabel {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\nth {\n  padding: 4px;\n}\ntd {\n  padding: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Contributing\nDESCRIPTION: Git commands for checking out the main branch, pulling the latest changes, and creating a new feature branch.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull origin main\ngit checkout -b the-name-of-my-branch\n```\n\n----------------------------------------\n\nTITLE: Optimized Form Component Structure in React\nDESCRIPTION: Improved version that separates the form into its own component to prevent unnecessary re-renders of page content\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      <SignupForm />\n      <PageContent />\n    </>\n  );\n}\n\nfunction SignupForm() {\n  const [firstName, setFirstName] = useState('');\n  return (\n    <form>\n      <input value={firstName} onChange={e => setFirstName(e.target.value)} />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Route Handler with renderToString Implementation\nDESCRIPTION: Example of using renderToString within a server route handler to generate HTML and send it as a response.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToString.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToString } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\napp.use('/', (request, response) => {\n  const html = renderToString(<App />);\n  response.send(html);\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for React Compiler\nDESCRIPTION: Basic Babel configuration showing how to add the React Compiler plugin as the first plugin in the build pipeline.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst ReactCompilerConfig = { /* ... */ };\n\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!\n      // ...\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the Markdown Editor Textarea - CSS\nDESCRIPTION: This CSS snippet provides additional styling specifically for textarea elements, giving them a block display and spacing with margins. It ensures that the textareas are visually separated from other elements, enhancing user experience in the Markdown editor context. No dependencies are required. This CSS should be included as part of the relevant stylesheet for the project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\ntextarea { display: block; margin-top: 5px; margin-bottom: 10px; }\n\n```\n\n----------------------------------------\n\nTITLE: React Markdown Editor Project Dependencies and Scripts - JSON\nDESCRIPTION: This JSON object outlines the npm dependencies and scripts required for the Markdown editor project. It specifies 'react', 'react-dom', 'react-scripts', and 'remarkable' as dependencies, with scripts for starting, building, testing, and ejecting the app. The file is intended to be used as a package.json manifest in a Node.js project, serving as the foundation for dependency installation via npm or yarn.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"remarkable\": \"2.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Scaffold for Custom Counter Hook - React JavaScript\nDESCRIPTION: This snippet provides an empty skeleton for a new custom Hook file (useCounter.js), guiding users to implement reusable counting logic. Intended for writing a function that encapsulates counter behavior for easy import and use in other components. No dependencies or implementation are included.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Write your custom Hook in this file!\n```\n\n----------------------------------------\n\nTITLE: Styling the Mail Client Interface\nDESCRIPTION: CSS styles for the mail client interface, defining button margins, list item border radius, and highlighting with a light blue background color.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_32\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 5px; }\nli { border-radius: 5px; }\n.highlighted { background: #d2eaff; }\n```\n\n----------------------------------------\n\nTITLE: Handling Key Up Events with onKeyUp in React (JSX)\nDESCRIPTION: React prop for handling the event when a keyboard key is released. It expects a `KeyboardEvent` handler function and corresponds to the browser's `keyup` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyUp\n```\n\n----------------------------------------\n\nTITLE: Component Styling\nDESCRIPTION: Basic CSS styling for the component layout and spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_22\n\nLANGUAGE: css\nCODE:\n```\nbody { height: 280px; }\nselect { margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Form Labels\nDESCRIPTION: This CSS code styles form labels, ensuring they are displayed in block format with a bottom margin. This ensures proper layout and readability of labels above corresponding inputs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\nlabel { display: block; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Basic renderToPipeableStream API Signature\nDESCRIPTION: The basic signature of the renderToPipeableStream function that renders a React tree to a pipeable Node.js Stream.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { pipe, abort } = renderToPipeableStream(reactNode, options?)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler Directory Sources\nDESCRIPTION: Configuration to enable React Compiler for specific directories in existing projects by defining a sources filter function.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/react-compiler.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ReactCompilerConfig = {\n  sources: (filename) => {\n    return filename.indexOf('src/path/to/dir') !== -1;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies and Scripts for React and Immer Setup (JSON)\nDESCRIPTION: Specifies all required dependencies, including immer, use-immer, and React packages, as well as npm scripts for starting, building, testing, and ejecting the project. Required for running and developing the Todo app with Immer. All dependencies and scripts are compatible with Create React App.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \"dependencies\": {\\n    \"immer\": \"1.7.3\",\\n    \"react\": \"latest\",\\n    \"react-dom\": \"latest\",\\n    \"react-scripts\": \"latest\",\\n    \"use-immer\": \"0.5.1\"\\n  },\\n  \"scripts\": {\\n    \"start\": \"react-scripts start\",\\n    \"build\": \"react-scripts build\",\\n    \"test\": \"react-scripts test --env=jsdom\",\\n    \"eject\": \"react-scripts eject\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Textarea With an Initial Value - JavaScript\nDESCRIPTION: This snippet shows how to render an uncontrolled React textarea with an initial value set by defaultValue, allowing user edits. The component receives an initial value but does not force future values, suitable for simple forms. Dependencies are only React, with no output constraints.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ Good: uncontrolled text area with an initial value\n<textarea defaultValue={something} />\n\n```\n\n----------------------------------------\n\nTITLE: Styling Button Margins in Travel Plan Component\nDESCRIPTION: CSS styles for adding margin to buttons in the travel plan interface.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Capturing Owner Stack in React Development\nDESCRIPTION: Demonstrates how to use captureOwnerStack to get the current Owner Stack in a React component during development.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/captureOwnerStack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nfunction Component() {\n  if (process.env.NODE_ENV !== 'production') {\n    const ownerStack = React.captureOwnerStack();\n    console.log(ownerStack);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting State with useEffect in React Form Component\nDESCRIPTION: This code shows a React form component that uses useEffect to reset form inputs when the savedContact prop changes. The component maintains name and email state, using the effect to synchronize them with the incoming props.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport default function EditContact({ savedContact, onSave }) {\n  const [name, setName] = useState(savedContact.name);\n  const [email, setEmail] = useState(savedContact.email);\n\n  useEffect(() => {\n    setName(savedContact.name);\n    setEmail(savedContact.email);\n  }, [savedContact]);\n\n  return (\n    <section>\n      <label>\n        Name:{' '}\n        <input\n          type=\"text\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </label>\n      <label>\n        Email:{' '}\n        <input\n          type=\"email\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </label>\n      <button onClick={() => {\n        const updatedData = {\n          id: savedContact.id,\n          name: name,\n          email: email\n        };\n        onSave(updatedData);\n      }}>\n        Save\n      </button>\n      <button onClick={() => {\n        setName(savedContact.name);\n        setEmail(savedContact.email);\n      }}>\n        Reset\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Page Structure - React Documentation Header\nDESCRIPTION: Markdown header and intro section defining the structure of React's reference documentation page. Includes title and introductory text with navigation link.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: React Reference Overview\n---\n\n<Intro>\n\nThis section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.\n\n</Intro>\n```\n\n----------------------------------------\n\nTITLE: Declaring React Project Dependencies for Corrected Solution (JSON)\nDESCRIPTION: This package.json is identical to the one in the initial timer example, specifying the same dependencies and scripts. It is required for setting up the React development environment for the corrected implementation. Use this file to ensure proper package versions and run/test capabilities.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cut Capture Events with onCutCapture in React (JSX)\nDESCRIPTION: React prop for handling cut events during the capture phase. This is the capture phase version of `onCut`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nonCutCapture\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Path Management in React Components\nDESCRIPTION: Shows how to handle dynamic asset paths in a React component by passing an assetMap prop containing the build-generated asset URLs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToPipeableStream.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App({ assetMap }) {\n  return (\n    <html>\n      <head>\n        ...\n        <link rel=\"stylesheet\" href={assetMap['styles.css']}></link>\n        ...\n      </head>\n      ...\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using renderToStaticMarkup with Suspense in React DOM Server\nDESCRIPTION: renderToStaticMarkup now handles server-side suspense by emitting fallback HTML for the closest Suspense boundary instead of throwing errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nrenderToStaticMarkup(<Component />)\n```\n\n----------------------------------------\n\nTITLE: useCounter Hook with Configurable Delay Parameter - React JavaScript\nDESCRIPTION: This custom Hook allows the user to specify a dynamic delay as a parameter. It manages a counter with useState, and uses useEffect to set up and clear a setInterval whose interval is controlled by the delay value. The effect is correctly re-established whenever the delay changes (delay appears in dependency array). Returns the count value, input is the delay (number in ms), and the only dependency is React with useState/useEffect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nexport function useCounter(delay) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: React Conference Listing Format in Markdown\nDESCRIPTION: Markdown structure for listing React conference details including conference name, date, location, format, and social media links\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/conferences.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Conference Name {/*conference-slug*/}\nDate info. Location + format info\n\n[Website](url) - [Twitter](url) - [Other Social Links](url)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props in React Class Component\nDESCRIPTION: Demonstrates how to set default props using static defaultProps property. The example sets a default color prop to 'blue' when it's undefined or missing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass Button extends Component {\n  static defaultProps = {\n    color: 'blue'\n  };\n\n  render() {\n    return <button className={this.props.color}>click me</button>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies for React App with Immer\nDESCRIPTION: Package.json configuration for a React application using Immer and use-immer libraries, specifying dependencies and scripts for the project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Press Events (Deprecated) with onKeyPress in React (JSX)\nDESCRIPTION: Deprecated React prop for handling key press events. Use `onKeyDown` or `onBeforeInput` instead. It expected a `KeyboardEvent` handler function and corresponded to the browser's `keypress` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nonKeyPress\n```\n\n----------------------------------------\n\nTITLE: Aborting React Server Rendering with Timeout\nDESCRIPTION: Implementation of a timeout mechanism for server-side rendering to prevent long-running requests. Uses AbortController to force rendering to give up after a specified time period and fall back to client rendering.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler(request) {\n  try {\n    const controller = new AbortController();\n    setTimeout(() => {\n      controller.abort();\n    }, 10000);\n\n    const stream = await renderToReadableStream(<App />, {\n      signal: controller.signal,\n      bootstrapScripts: ['/main.js'],\n      onError(error) {\n        didError = true;\n        console.error(error);\n        logServerCrashReport(error);\n      }\n    });\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with State in React\nDESCRIPTION: This snippet shows a counter button implemented using state, which triggers re-renders when the count changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/referencing-values-with-refs.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Labels and Inputs with CSS (CSS)\nDESCRIPTION: This CSS snippet provides basic styling for label and input elements, ensuring each label displays as a block and that inputs have spacing to the left and bottom. It's intended for simple React forms to enhance readability and usability. There are no dependencies, and it can be included via a CSS file or style tag. Applied styles are for spacing and block-level formatting, with no particular constraints.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; }\ninput { margin-left: 5px; margin-bottom: 5px; }\n```\n\n----------------------------------------\n\nTITLE: React Blog Page Structure with JSX\nDESCRIPTION: Page layout for the React blog featuring an intro section and a series of blog card components displaying posts chronologically. Includes special sections for release notes and older posts.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro>\n\nThis blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first.\n\nYou can also follow the [@react.dev](https://bsky.app/profile/react.dev) account on Bluesky, or [@reactjs](https://twitter.com/reactjs) account on Twitter, but you won't miss anything essential if you only read this blog.\n\n</Intro>\n\n<div className=\"sm:-mx-5 flex flex-col gap-5 mt-12\">\n\n<BlogCard title=\"React Compiler RC\" date=\"April 21, 2025\" url=\"/blog/2025/04/21/react-compiler-rc\">\n\nWe are releasing the compiler's first Release Candidate (RC) today.\n\n</BlogCard>\n\n/* Additional BlogCard components... */\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling the Music Browser Application with CSS\nDESCRIPTION: This CSS snippet provides styles for the music browser application, including layout, header, panels, and loading indicators (glimmer effects).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#2025-04-22_snippet_41\n\nLANGUAGE: css\nCODE:\n```\nmain {\n  min-height: 200px;\n  padding: 10px;\n}\n\n.layout {\n  border: 1px solid black;\n}\n\n.header {\n  background: #222;\n  padding: 10px;\n  text-align: center;\n  color: white;\n}\n\n.bio { font-style: italic; }\n\n.panel {\n  border: 1px solid #aaa;\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-panel {\n  border: 1px dashed #aaa;\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n  border-radius: 6px;\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.glimmer-line {\n  display: block;\n  width: 60%;\n  height: 20px;\n  margin: 10px;\n  border-radius: 4px;\n  background: #f0f0f0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using flushSync with State Updates in React\nDESCRIPTION: Example highlighting how flushSync forces React to apply state updates synchronously, ensuring the DOM is updated before the next line executes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/flushSync.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nflushSync(() => {\n  setSomething(123);\n});\n// By this line, the DOM is updated.\n```\n\n----------------------------------------\n\nTITLE: Markdown Preview Component Implementation\nDESCRIPTION: The implementation of the MarkdownPreview component that is being lazy-loaded, which renders markdown content using the Remarkable library.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nexport default function MarkdownPreview({ markdown }) {\n  return (\n    <div\n      className=\"content\"\n      dangerouslySetInnerHTML={{__html: md.render(markdown)}}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Tic-Tac-Toe Board in CSS\nDESCRIPTION: This snippet of CSS provides styling for the Tic-Tac-Toe board, defining styles for the squares, container, and board rows to ensure proper layout and visuals. It includes settings for box sizing, font, and layout properties for aesthetic and functional purposes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_27\n\nLANGUAGE: CSS\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Function in Client Component\nDESCRIPTION: Shows how to import and use a Server Function reference in a Client Component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\nimport {createNote} from './actions';\n\nfunction EmptyNote() {\n  console.log(createNote);\n  // {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNote'}\n  <button onClick={() => createNote()} />\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Contact Manager Interface\nDESCRIPTION: CSS styles for the contact manager application, which styles the contact list buttons, form labels, and action buttons. The styling removes default list styles and applies consistent spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\nul, li {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli { display: inline-block; }\nli button {\n  padding: 10px;\n}\nlabel {\n  display: block;\n  margin: 10px 0;\n}\nbutton {\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock Chat Connection Module\nDESCRIPTION: This module provides a mock implementation of a chat connection API. It simulates connecting to and disconnecting from chat rooms by logging messages to the console, serving as a placeholder for a real connection implementation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Title and Intro in Markdown\nDESCRIPTION: This snippet defines the page title using Markdown frontmatter and includes an introductory section using a custom <Intro> component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/meetups.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: React Meetups\n---\n\n<Intro>\n\nDo you have a local React.js meetup? Add it here! (Please keep the list alphabetical)\n\n</Intro>\n```\n\n----------------------------------------\n\nTITLE: Chat Connection Module Implementation\nDESCRIPTION: A module that provides a createConnection function which simulates connecting to and disconnecting from a chat room, used by the main component to demonstrate effect dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Instances of a Counter Component in React\nDESCRIPTION: This snippet demonstrates how React maintains separate state for multiple instances of the same component. It renders two Counter components, each with its own isolated state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function App() {\n  const counter = <Counter />;\n  return (\n    <div>\n      {counter}\n      {counter}\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Team Page Frontmatter in Markdown\nDESCRIPTION: Markdown frontmatter that sets the page title for a React team documentation page\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/community/team.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Meet the Team\"\n---\n```\n\n----------------------------------------\n\nTITLE: Understanding Immutability in Data Handling with JSX\nDESCRIPTION: This JavaScript code in JSX format demonstrates two methods of handling changes in an array--mutation and immutability. It highlights the immutability approach, which involves creating a new array to reflect changes rather than altering the existing array, to retain data integrity.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_28\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\nconst squares = [null, null, null, null, null, null, null, null, null];\nsquares[0] = 'X';\n// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];\n```\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\nconst squares = [null, null, null, null, null, null, null, null, null];\nconst nextSquares = ['X', null, null, null, null, null, null, null, null];\n// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\n```\n\n----------------------------------------\n\nTITLE: Adding Suspense Boundary for Posts\nDESCRIPTION: Shows how to wrap the Posts component in a Suspense boundary to enable streaming of the main content while Posts loads.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage() {\n  return (\n    <ProfileLayout>\n      <ProfileCover />\n      <Sidebar>\n        <Friends />\n        <Photos />\n      </Sidebar>\n      <Suspense fallback={<PostsGlimmer />}>\n        <Posts />\n      </Suspense>\n    </ProfileLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Packing List with Conditional Checkmarks in React\nDESCRIPTION: A complete implementation of the packing list with conditional rendering using if/else statements. Items are displayed with a checkmark if they are packed, demonstrating branching logic with JavaScript conditionals.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✅</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of preconnect Function in React\nDESCRIPTION: Demonstrates the basic usage of the preconnect function to eagerly connect to a server. This snippet shows how to import and call the function with a URL.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preconnect.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npreconnect(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Component Images\nDESCRIPTION: CSS styles for the profile images, setting margin and height properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nimg { margin: 0 10px 10px 0; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Based Notifications with Toastify in JavaScript\nDESCRIPTION: This JavaScript module exports a showNotification function that uses the Toastify library to display themed notifications. It customizes notification appearance based on the provided theme (dark or light).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using `prefetchDNS` in a React Component\nDESCRIPTION: Illustrates how to import the `prefetchDNS` function from the `react-dom` package and call it within a React functional component (`AppRoot`). This usage triggers a DNS lookup hint for the specified domain when the component renders. The function takes the server's URL (`href`) as its parameter and returns nothing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/prefetchDNS.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n  prefetchDNS(\"https://example.com\");\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple State with useState\nDESCRIPTION: Basic example of initializing a number state value using useState hook\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [x, setX] = useState(0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with Cleanup in React useEffect\nDESCRIPTION: Demonstrates how to properly fetch data using useEffect with cleanup to handle race conditions. Uses an ignore flag to prevent setting state after component unmounts or dependencies change.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  let ignore = false;\n\n  async function startFetching() {\n    const json = await fetchTodos(userId);\n    if (!ignore) {\n      setTodos(json);\n    }\n  }\n\n  startFetching();\n\n  return () => {\n    ignore = true;\n  };\n}, [userId]);\n```\n\n----------------------------------------\n\nTITLE: Debugging React Version Mismatch\nDESCRIPTION: Code snippet to debug potential React version mismatches by comparing React instances.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-hook-call-warning.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Add this in node_modules/react-dom/index.js\nwindow.React1 = require('react');\n\n// Add this in your component file\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(window.React1 === window.React2);\n```\n\n----------------------------------------\n\nTITLE: Preferred ES5-Compatible Class Implementation in React Documentation\nDESCRIPTION: The recommended way to write React component classes in documentation, using constructor for initialization and explicit method binding. This approach avoids experimental features for better compatibility.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {value: ''};\n  }\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component with Server Function and useTransition\nDESCRIPTION: Demonstrates using a Server Function with useTransition for handling pending states and errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport {updateName} from './actions';\n\nfunction UpdateName() {\n  const [name, setName] = useState('');\n  const [error, setError] = useState(null);\n\n  const [isPending, startTransition] = useTransition();\n\n  const submitAction = async () => {\n    startTransition(async () => {\n      const {error} = await updateName(name);\n      if (error) {\n        setError(error);\n      } else {\n        setName('');\n      }\n    })\n  }\n  \n  return (\n    <form action={submitAction}>\n      <input type=\"text\" name=\"name\" disabled={isPending}/>\n      {error && <span>Failed: {error}</span>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Only Controlled Textarea Without onChange - JavaScript\nDESCRIPTION: This snippet shows how to create a read-only controlled textarea in React by combining the value and readOnly props. The field renders as uneditable to users. Dependencies are React, and there is no user input except display.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ Good: readonly controlled text area without on change\n<textarea value={something} readOnly={true} />\n\n```\n\n----------------------------------------\n\nTITLE: Preloading in a React Event Handler\nDESCRIPTION: Example of using the preload function within an event handler to start loading resources before transitioning to a new page or state.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preload(\"https://example.com/wizardStyles.css\", {as: \"style\"});\n    startWizard();\n  }\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of ES6 Features to Avoid in React Documentation\nDESCRIPTION: An example showing class properties and arrow methods syntax that should be avoided in documentation since these features aren't fully standardized. This demonstrates what not to write in React documentation examples.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends React.Component {\n  state = {value: ''};\n  handleChange = (e) => {\n    this.setState({value: e.target.value});\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Missing Dependency Array in useCallback\nDESCRIPTION: Shows a common mistake where useCallback is used without a dependency array, causing it to return a new function reference on every render and defeating its purpose.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ProductPage({ productId, referrer }) {\n  const handleSubmit = useCallback((orderDetails) => {\n    post('/product/' + productId + '/buy', {\n      referrer,\n      orderDetails,\n    });\n  }); // 🔴 Returns a new function every time: no dependency array\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Task List and Task Item Components in React\nDESCRIPTION: Components for displaying and managing task list with individual task items. Includes functionality for editing, updating, and deleting tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function TaskList({\n  tasks,\n  onChangeTask,\n  onDeleteTask\n}) {\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task\n            task={task}\n            onChange={onChangeTask}\n            onDelete={onDeleteTask}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FilterableProductTable State Management in React\nDESCRIPTION: Shows how to initialize state and pass state updater functions to child components in a React parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly}\n        onFilterTextChange={setFilterText}\n        onInStockOnlyChange={setInStockOnly} />\n```\n\n----------------------------------------\n\nTITLE: Defining an Array of Inspirational Quotes\nDESCRIPTION: A JavaScript module that exports an array of inspirational quotes as strings. These quotes are used by the InspirationGenerator component to display random inspirational content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/understanding-your-ui-as-a-tree.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default [\n  \"Don't let yesterday take up too much of today.\" — Will Rogers\",\n  \"Ambition is putting a ladder against the sky.\",\n  \"A joy that's shared is a joy made double.\",\n  ];\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for React Form Components\nDESCRIPTION: This CSS snippet provides styling for the form components, including list items, buttons, and labels.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\nul, li {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nli { display: inline-block; }\nli button {\n  padding: 10px;\n}\nlabel {\n  display: block;\n  margin: 10px 0;\n}\nbutton {\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: React TodoList Component Calling Normal Filter Function Directly\nDESCRIPTION: Similar to the previous `TodoList` example, this component calls `filterTodos` on every render. However, in this context, the imported `filterTodos` function (from the second `utils.js` example) runs at normal speed without the artificial delay. While less impactful than the slowed version, the filtering still occurs on every render, even for theme changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js src/TodoList.js active\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n  const visibleTodos = filterTodos(todos, tab);\n  return (\n    <div className={theme}>\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ?\n              <s>{todo.text}</s> :\n              todo.text\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling for Slow List Component in React\nDESCRIPTION: This CSS snippet provides styling for the SlowList component, including styles for the list container and individual list items.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.items {\n  padding: 0;\n}\n\n.item {\n  list-style: none;\n  display: block;\n  height: 40px;\n  padding: 5px;\n  margin-top: 10px;\n  border-radius: 4px;\n  border: 1px solid #aaa;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Higher Order Hooks in React\nDESCRIPTION: Illustrates the incorrect practice of creating higher-order Hooks and the recommended approach of creating static versions of Hooks with desired functionality.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatInput() {\n  const useDataWithLogging = withLogging(useData); // 🔴 Bad: don't write higher order Hooks\n  const data = useDataWithLogging();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatInput() {\n  const data = useDataWithLogging(); // ✅ Good: Create a new version of the Hook\n}\n\nfunction useDataWithLogging() {\n  // ... Create a new version of the Hook and inline the logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for React Animation Example\nDESCRIPTION: Package.json configuration specifying dependencies including experimental React and standard scripts for the animation example project.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"experimental\",\n    \"react-dom\": \"experimental\",\n    \"react-scripts\": \"latest\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Data with Objects in an Array\nDESCRIPTION: Creating a more structured data array using objects with properties like id, name, and profession.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',  \n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n```\n\n----------------------------------------\n\nTITLE: Using Context in React Class Components\nDESCRIPTION: Shows how to access context in a class component by setting a static contextType property and accessing the context value via this.context.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Button extends Component {\n  static contextType = ThemeContext;\n\n  render() {\n    const theme = this.context;\n    const className = 'button-' + theme;\n    return (\n      <button className={className}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AddComment Component with Ref Forwarding\nDESCRIPTION: Simple AddComment component that forwards a ref to an input element, allowing parent components to focus it programmatically.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction AddComment({ ref }) {\n  return <input placeholder=\"Add comment...\" ref={ref} />;\n}\n\nexport default AddComment;\n```\n\n----------------------------------------\n\nTITLE: Prefetching DNS During React Component Rendering\nDESCRIPTION: Demonstrates calling `prefetchDNS` directly within the body of a React functional component (`AppRoot`). This is useful when you anticipate that child components or subsequent operations within the component's lifecycle will require resources from the specified external host (`https://example.com`).\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/prefetchDNS.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n  prefetchDNS(\"https://example.com\");\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Code Highlighting Example in Markdown\nDESCRIPTION: Demonstrates how to specify JavaScript syntax highlighting in Markdown code blocks. This ensures proper code formatting on the React documentation website.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```js\n// code\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Copy Capture Events with onCopyCapture in React (JSX)\nDESCRIPTION: React prop for handling copy events during the capture phase. This is the capture phase version of `onCopy`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nonCopyCapture\n```\n\n----------------------------------------\n\nTITLE: Experimental Project Dependencies for React with useEffectEvent (JSON)\nDESCRIPTION: Describes project configuration for using the experimental React APIs, including specific versions of react and react-dom (experimental), react-scripts, and toastify-js for notifications. Enables development, building, and testing of the effect event separation feature in React by specifying these packages. Intended for use as package.json for the demo with experimental features.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"experimental\",\n    \"react-dom\": \"experimental\",\n    \"react-scripts\": \"latest\",\n    \"toastify-js\": \"1.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading an External Script in React\nDESCRIPTION: Example of using the preload function to eagerly fetch an external JavaScript file when rendering a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preload.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/script.js\", {as: \"script\"});\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with CSS in React\nDESCRIPTION: This CSS snippet provides styling for buttons, specifically adding right margin to create spacing between adjacent buttons.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbutton { margin-right: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Styling for Select Boxes\nDESCRIPTION: CSS styling for the select boxes to display them as block elements with proper spacing.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_36\n\nLANGUAGE: css\nCODE:\n```\nlabel { display: block; margin-bottom: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Basic useImperativeHandle Syntax in React\nDESCRIPTION: The basic syntax for using the useImperativeHandle Hook, showing how to import it and call it with its parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseImperativeHandle(ref, createHandle, dependencies?)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in React (Day 2)\nDESCRIPTION: This code snippet shows how to embed the Day 2 keynote YouTube video in a React component using the YouTubeIframe component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/05/22/react-conf-2024-recap.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<YouTubeIframe src=\"https://www.youtube.com/embed/0ckOUBiuxVY?t=1720s\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern for Passing Ref to a DOM Element\nDESCRIPTION: Shows the basic pattern of passing a ref directly to a DOM element without customization.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useImperativeHandle.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Todo List with Inefficient Effect in React\nDESCRIPTION: This component renders a todo list with filtering capability but uses an Effect to recompute visible todos whenever state changes. This is inefficient as the calculation reruns when unrelated state (text input) changes.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(initialTodos);\n  const [showActive, setShowActive] = useState(false);\n  const [text, setText] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState([]);\n\n  useEffect(() => {\n    setVisibleTodos(getVisibleTodos(todos, showActive));\n  }, [todos, showActive]);\n\n  function handleAddClick() {\n    setText('');\n    setTodos([...todos, createTodo(text)]);\n  }\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showActive}\n          onChange={e => setShowActive(e.target.checked)}\n        />\n        Show only active todos\n      </label>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={handleAddClick}>\n        Add\n      </button>\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ? <s>{todo.text}</s> : todo.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inline CSS Stylesheet with Precedence and Href Props\nDESCRIPTION: Example of rendering an inline stylesheet with precedence and href props. React will deduplicate styles with the same href and order them based on precedence values.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/style.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<style href={\"PieChart-\" + JSON.stringify(colors)} precedence=\"medium\">\n  {stylesheet}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Defining Cached Function Locally\nDESCRIPTION: Shows another pitfall where the cached function (`getWeekReport`) is defined within a single component file (`Precipitation.js`). While defined outside the component function itself, it's not exported or shared, preventing other components from using the same cache.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js [[2, 6, \"getWeekReport\"], [2, 6, \"cache(calculateWeekReport)\"], [2, 9, \"getWeekReport\"]]\n// Precipitation.js\nimport {cache} from 'react';\nimport {calculateWeekReport} from './report';\n\n// 🚩 Wrong: `getWeekReport` is only accessible for `Precipitation` component.\nconst getWeekReport = cache(calculateWeekReport);\n\nexport function Precipitation({cityData}) {\n  const report = getWeekReport(cityData);\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling for React Component Examples\nDESCRIPTION: Basic CSS rules to style the label elements used within the React examples. It ensures labels are displayed as block elements with some bottom margin for better visual separation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  margin-bottom: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Message Delivery Delay using JavaScript\nDESCRIPTION: This snippet defines an asynchronous function that simulates a delay in message delivery. It's crucial for testing the behavior of optimistic UI in conjunction with network requests.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useOptimistic.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function deliverMessage(message) {\n  await new Promise((res) => setTimeout(res, 1000));\n  return message;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hydration Warnings in React Component\nDESCRIPTION: This React component (`App.js`) demonstrates how to suppress hydration mismatch warnings for a specific element. By adding the `suppressHydrationWarning={true}` prop to the `<h1>` tag, React will not warn about differences between the server-rendered content (e.g., a static date) and the client-rendered content (the current date). This is useful for unavoidable mismatches like timestamps.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/hydrateRoot.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <h1 suppressHydrationWarning={true}>\n      Current Date: {new Date().toLocaleDateString()}\n    </h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output Element for Reducer Demo\nDESCRIPTION: A simple HTML structure that creates a pre-formatted text element to display the JSON output of the reducer operation.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<pre id=\"output\"></pre>\n```\n\n----------------------------------------\n\nTITLE: CSS for Input Form Layout\nDESCRIPTION: Provides basic CSS styles for the layout of form elements, ensuring that labels are displayed as block elements with top and bottom margins, and the body has a minimum height constraint.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_30\n\nLANGUAGE: CSS\nCODE:\n```\nlabel {\n  display: block;\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\n\nbody {\n  min-height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: State Mutation Examples\nDESCRIPTION: Shows incorrect direct state mutation versus correct usage of setState.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    count = count + 1; // 🔴 Bad: never mutate state directly\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You pressed me {count} times\n    </button>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1); // ✅ Good: use the setter function returned by useState\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You pressed me {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Lazy Component Declaration Inside Component\nDESCRIPTION: Example of incorrect usage where a lazy component is declared inside another component, which causes state to reset on re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from 'react';\n\nfunction Editor() {\n  // 🔴 Bad: This will cause all state to be reset on re-renders\n  const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Fancy Counter Components\nDESCRIPTION: This CSS snippet styles various elements including counter and fancy classes. It defines rules for layo Having a float and clear on labelut, border, text color, hover effects, and fancy styling options.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#2025-04-22_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\nlabel {\n  display: block;\n  clear: both;\n}\n\n.counter {\n  width: 100px;\n  text-align: center;\n  border: 1px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 0 20px 20px 0;\n  float: left;\n}\n\n.fancy {\n  border: 5px solid gold;\n  color: #ff6767;\n}\n\n.hover {\n  background: #ffffd8;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating renderIntoDocument to @testing-library/react render\nDESCRIPTION: Demonstrates how to replace the deprecated renderIntoDocument utility with the modern render function from @testing-library/react.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-dom-test-utils.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renderIntoDocument} from 'react-dom/test-utils';\n\nrenderIntoDocument(<Component />);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/react';\n\nrender(<Component />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt for react.dev\nDESCRIPTION: This robots.txt file provides instructions to web crawlers on how to interact with the react.dev website. The configuration uses a wildcard (*) user-agent to target all web crawlers and includes an empty 'Disallow:' directive, which means all paths on the site are allowed to be crawled.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: About Tab Panel Component - React JavaScript\nDESCRIPTION: A minimal functional React component named AboutTab that renders a static welcome message inside a paragraph tag. No external dependencies or dynamic inputs required; output is a simple paragraph for use within the tab container UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function AboutTab() {\n  return (\n    <p>Welcome to my profile!</p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Form Elements\nDESCRIPTION: Simple CSS styling for form elements that adds margin and display properties to label and textarea elements.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\nlabel, textarea { margin-bottom: 10px; display: block; }\n```\n\n----------------------------------------\n\nTITLE: Applying Input Spacing with CSS for Search UI - CSS\nDESCRIPTION: This snippet applies a CSS margin to input elements to improve UI spacing in the search interface. No dependencies are required. Targets all input elements globally with 'input { margin: 10px; }'.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useDeferredValue.md#2025-04-22_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\ninput { margin: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Running React.dev Development Server\nDESCRIPTION: Commands for starting the Next.js development server and opening the site in a browser.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Multiple Range Highlighting in React Documentation Code Examples\nDESCRIPTION: Shows how to highlight multiple ranges of lines in a single code example using Markdown syntax. This allows emphasizing different parts of the code that may not be consecutive.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```js {2-4,6}\nfunction hello() {\n  // these lines\n  // will get\n  // highlighted\n  console.log('hello');\n  // also this one\n  console.log('there');\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the Static Product Table UI - CSS\nDESCRIPTION: This CSS snippet provides basic styling for the product table app, controlling page padding, label display, spacing around table headings and cells. It is intended to visually structure and space the static UI elements created in the React JSX, ensuring proper alignment and readability. Dependencies: None for vanilla CSS usage. Inputs: Applied to basic HTML; Outputs: improved page formatting. Limitation: Static styles, not scoped to components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  padding: 5px\n}\nlabel {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\nth {\n  padding-top: 10px;\n}\ntd {\n  padding: 2px;\n  padding-right: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Context in Nested Providers - React JavaScript\nDESCRIPTION: Demonstrates nested ThemeContext providers, overriding the theme for a subtree (Footer) with a different value. Each Button and Panel consumes the closest theme ancestor. No runtime dependencies beyond React/context hooks. Inputs: none; Outputs: differently themed nested UI components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createContext, useContext } from 'react';\\n\\nconst ThemeContext = createContext(null);\\n\\nexport default function MyApp() {\\n  return (\\n    <ThemeContext.Provider value=\"dark\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction Form() {\\n  return (\\n    <Panel title=\"Welcome\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n      <ThemeContext.Provider value=\"light\">\\n        <Footer />\\n      </ThemeContext.Provider>\\n    </Panel>\\n  );\\n}\\n\\nfunction Footer() {\\n  return (\\n    <footer>\\n      <Button>Settings</Button>\\n    </footer>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      {title && <h1>{title}</h1>}\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className}>\\n      {children}\\n    </button>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with Effects in a ShippingForm Component\nDESCRIPTION: A React component that fetches cities for a country and areas for a selected city using two separate useEffect hooks. Each Effect handles its own data fetching responsibility and cleanup logic with an abort flag.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  // This Effect fetches cities for a country\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]);\n\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n  // This Effect fetches areas for the selected city\n  useEffect(() => {\n    if (city) {\n      let ignore = false;\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [city]);\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Accessing and Forwarding Refs in Custom Components - React JavaScript\nDESCRIPTION: Demonstrates correct and incorrect approaches to ref forwarding with custom React components. The incorrect case shows a ref passed to MyInput, which does not forward refs and results in error. The corrected snippet adds ref to the MyInput prop list and forwards it to an internal <input>. Dependencies: React. Limitation: Proper ref forwarding should use React.forwardRef for functional components.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst inputRef = useRef(null);\n\nreturn <MyInput ref={inputRef} />;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function MyInput({ value, onChange }) {\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction MyInput({ value, onChange, ref }) {\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      ref={ref}\n    />\n  );\n};\n\nexport default MyInput;\n```\n\n----------------------------------------\n\nTITLE: Basic Square Component Implementation\nDESCRIPTION: Simple implementation of a Square component that renders a button with an 'X'. This serves as the starting point for the tutorial.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Square() {\n  return <button className=\"square\">X</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Logical AND\nDESCRIPTION: Shows how to conditionally render a component using the JavaScript logical AND (&&) operator when no else branch is needed.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<div>\n  {isLoggedIn && <AdminPanel />}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fixing a Common JSX Error with Object References\nDESCRIPTION: Example showing a common error where an entire object is incorrectly used in JSX content. Objects are not valid as React children and must be referenced by their specific properties.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody { padding: 0; margin: 0 }\nbody > div > div { padding: 20px; }\n.avatar { border-radius: 50%; height: 90px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission with useState in React\nDESCRIPTION: Example showing traditional form submission handling using useState hooks for managing pending and error states before the introduction of Actions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UpdateName({}) {\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsPending(true);\n    const error = await updateName(name);\n    setIsPending(false);\n    if (error) {\n      setError(error);\n      return;\n    } \n    redirect(\"/path\");\n  };\n\n  return (\n    <div>\n      <input value={name} onChange={(event) => setName(event.target.value)} />\n      <button onClick={handleSubmit} disabled={isPending}>\n        Update\n      </button>\n      {error && <p>{error}</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Section Component in React\nDESCRIPTION: This snippet shows a simple Section component that wraps its children in a section element with a CSS class. It's used to group related content and headings together.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Section({ children }) {\n  return (\n    <section className=\"section\">\n      {children}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment with Keys Example\nDESCRIPTION: Example showing how to use Fragment with keys when rendering multiple elements per list item\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Fragment } from 'react';\n\n// ...\n\nconst listItems = people.map(person =>\n  <Fragment key={person.id}>\n    <h1>{person.name}</h1>\n    <p>{person.bio}</p>\n  </Fragment>\n);\n```\n\n----------------------------------------\n\nTITLE: Example with Missing Dependencies in React useEffect\nDESCRIPTION: A ChatRoom component that incorrectly specifies an empty dependency array for useEffect, causing a linting error as it uses reactive values (roomId and serverUrl) without listing them as dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) { // roomId is reactive\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // <-- Something's wrong here!\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example with Non-Reactive Dependencies\nDESCRIPTION: A full implementation showing a chat room component where roomId has been moved outside the component, making it non-reactive and allowing for an empty dependency array in the Effect.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'music';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\nbutton { margin-left: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Typing useContext with Null Check in React\nDESCRIPTION: Shows how to handle cases where a default value doesn't make sense for a context. It demonstrates creating a context with a possible null value and a consumer hook that performs a runtime check.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { createContext, useContext, useState, useMemo } from 'react';\n\n// This is a simpler example, but you can imagine a more complex object here\ntype ComplexObject = {\n  kind: string\n};\n\n// The context is created with `| null` in the type, to accurately reflect the default value.\nconst Context = createContext<ComplexObject | null>(null);\n\n// The `| null` will be removed via the check in the Hook.\nconst useGetComplexObject = () => {\n  const object = useContext(Context);\n  if (!object) { throw new Error(\"useGetComplexObject must be used within a Provider\") }\n  return object;\n}\n\nexport default function MyApp() {\n  const object = useMemo(() => ({ kind: \"complex\" }), []);\n\n  return (\n    <Context.Provider value={object}>\n      <MyComponent />\n    </Context.Provider>\n  )\n}\n\nfunction MyComponent() {\n  const object = useGetComplexObject();\n\n  return (\n    <div>\n      <p>Current object: {object.kind}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: ChatRoom Component with Connection Effect Without Cleanup\nDESCRIPTION: A React component that connects to a chat service when mounted, but doesn't properly disconnect when unmounted, which could cause memory leaks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConnection() {\n  // A real implementation would actually connect to the server\n  return {\n    connect() {\n      console.log('✅ Connecting...');\n    },\n    disconnect() {\n      console.log('❌ Disconnected.');\n    }\n  };\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput { display: block; margin-bottom: 20px; }\n```\n\n----------------------------------------\n\nTITLE: Initializing Todo App with Context Provider - React JavaScript\nDESCRIPTION: Initializes the main App component by composing it with AddTask and TaskList components, wrapped inside a TasksProvider for shared state. Requires React and local context modules. Input is implicit; output is a rendered React element, enforcing scoped state access via provider.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useContext in a Component\nDESCRIPTION: Example of importing the useContext Hook and using it to read a context value at the top level of a component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n  const theme = useContext(ThemeContext);\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Basic startTransition Function Signature\nDESCRIPTION: Shows the basic function signature for React's startTransition API.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/startTransition.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstartTransition(action)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of preinitModule in React\nDESCRIPTION: Demonstrates how to use preinitModule to eagerly fetch and evaluate an ESM module. The function takes a URL and options object as parameters.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/preinitModule.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npreinitModule(\"https://example.com/module.js\", {as: \"script\"});\n```\n\n----------------------------------------\n\nTITLE: Local Mutation Example in React\nDESCRIPTION: A React component demonstrating acceptable local mutation where arrays are created and modified within the render function scope.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaGathering() {\n  let cups = [];\n  for (let i = 1; i <= 12; i++) {\n    cups.push(<Cup key={i} guest={i} />);\n  }\n  return cups;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic List with Keys in React (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a React component that receives a list of people from a data module, maps over each person to generate a list of components, and uses a utility function to generate image URLs. It demonstrates the use of keys for list items, proper React rendering flows, and importing dependencies between modules. Required dependencies: React, external modules (data.js and utils.js) providing the people array and getImageUrl helper. Accepts no props, returns an article with rendered content, and expects the people array to be valid and non-empty.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { people } from './data.js';\\nimport { getImageUrl } from './utils.js';\\n\\nexport default function List() {\\n  const listItems = people.map(person =>\\n    <li key={person.id}>\\n      <img\\n        src={getImageUrl(person)}\\n        alt={person.name}\\n      />\\n      <p>\\n        <b>{person.name}:</b>\\n        {' ' + person.profession + ' '}\\n        known for {person.accomplishment}\\n      </p>\\n    </li>\\n  );\\n  return (\\n    <article>\\n      <h1>Scientists</h1>\\n      <ul>{listItems}</ul>\\n    </article>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redundant State Avoidance in React\nDESCRIPTION: This snippet showcases how redundant state can be avoided by directly using props instead of duplicating them into state. It highlights potential pitfalls when initializing state with props that might later be updated by the parent component.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Message({ messageColor }) {\n  const [color, setColor] = useState(messageColor);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Message({ messageColor }) {\n  const color = messageColor;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Message({ initialColor }) {\n  // The `color` state variable holds the *first* value of `initialColor`.\n  // Further changes to the `initialColor` prop are ignored.\n  const [color, setColor] = useState(initialColor);\n```\n\n----------------------------------------\n\nTITLE: Chat Form Styling for React Example - CSS\nDESCRIPTION: Provides CSS styling for the React chat form example, adding spacing and block display. Applicable to label and textarea elements, enhancing layout readability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\nlabel, textarea { margin-bottom: 10px; display: block; }\n```\n\n----------------------------------------\n\nTITLE: Replacing Items in Array using Map\nDESCRIPTION: Demonstrates replacing specific items in an array using map() with index parameter to selectively update values while maintaining immutability.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nlet initialCounters = [\n  0, 0, 0\n];\n\nexport default function CounterList() {\n  const [counters, setCounters] = useState(initialCounters);\n\n  function handleIncrementClick(index) {\n    const nextCounters = counters.map((c, i) => {\n      if (i === index) {\n        return c + 1;\n      } else {\n        return c;\n      }\n    });\n    setCounters(nextCounters);\n  }\n\n  return (\n    <ul>\n      {counters.map((counter, i) => (\n        <li key={i}>\n          {counter}\n          <button onClick={() => {\n            handleIncrementClick(i);\n          }}>+1</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Task State with useReducer in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useReducer Hook to manage an array of tasks and provide both the state and the dispatch function. No dependencies are required beyond React. It establishes the local state for tasks and provides a dispatch object for handling state updates, which are critical for actions such as adding, updating, or deleting tasks.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n```\n\n----------------------------------------\n\nTITLE: Creating a React Router Framework Project\nDESCRIPTION: Terminal command to create a new React Router framework project using the create-react-router tool.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/creating-a-react-app.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-router@latest\n```\n\n----------------------------------------\n\nTITLE: Handling Input Events in React\nDESCRIPTION: This snippet demonstrates how to use the onBeforeInput event handler for input elements in React. It logs 'onBeforeInput' to the console when the event is triggered.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n<input onBeforeInput={e => console.log('onBeforeInput')} />\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Over Events with onDragOver in React (JSX)\nDESCRIPTION: React prop for handling the event fired continuously when a dragged element or text selection is over a valid drop target. It expects a `DragEvent` handler function; `e.preventDefault()` must be called within the handler to allow a drop. Corresponds to the browser's `dragover` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nonDragOver\n```\n\n----------------------------------------\n\nTITLE: Implementing a Click Counter with useRef in React\nDESCRIPTION: A complete example showing how to use useRef to track the number of button clicks without re-rendering the component. The ref.current property is updated on each click and displayed in an alert.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using createInitialState With Initializer Function\nDESCRIPTION: This optimized approach passes the initializer function as a third argument to useReducer, ensuring the function only runs during initialization and not on subsequent renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createInitialState(username) {\n  // ...\n}\n\nfunction TodoList({ username }) {\n  const [state, dispatch] = useReducer(reducer, username, createInitialState);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Automatic batching in React 18\nDESCRIPTION: Example demonstrating automatic batching in React 18, where all updates are automatically batched regardless of where they originate from, improving performance by reducing re-renders.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// After React 18 updates inside of timeouts, promises,\n// native event handlers or any other event are batched.\n\nfunction handleClick() {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will only re-render once at the end (that's batching!)\n}\n\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will only re-render once at the end (that's batching!)\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach: Using Direct React Effects\nDESCRIPTION: A best practice example showing how to properly separate Effects by purpose in a React component. Each Effect has a clear responsibility and correctly declares its dependencies.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  // ✅ Good: two raw Effects separated by purpose\n\n  useEffect(() => {\n    const connection = createConnection({ serverUrl, roomId });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [serverUrl, roomId]);\n\n  useEffect(() => {\n    post('/analytics/event', { eventName: 'visit_chat', roomId });\n  }, [roomId]);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Event Handler Logic in React Components\nDESCRIPTION: Illustrates how to properly share logic between multiple event handlers by extracting common functionality into a shared function, avoiding unnecessary Effects.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProductPage({ product, addToCart }) {\n  // ✅ Good: Event-specific logic is called from event handlers\n  function buyProduct() {\n    addToCart(product);\n    showNotification(`Added ${product.name} to the shopping cart!`);\n  }\n\n  function handleBuyClick() {\n    buyProduct();\n  }\n\n  function handleCheckoutClick() {\n    buyProduct();\n    navigateTo('/checkout');\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables with useState Hook in React\nDESCRIPTION: Shows how to declare state variables using the useState Hook. The example demonstrates initializing two state variables: an index starting at 0 and a boolean flag for showing additional content.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [index, setIndex] = useState(0);\nconst [showMore, setShowMore] = useState(false);\n```\n\n----------------------------------------\n\nTITLE: State Queue Implementation Exercise\nDESCRIPTION: Template for implementing a custom state queue processor that handles both direct values and updater functions.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getFinalState(baseState, queue) {\n  let finalState = baseState;\n\n  // TODO: do something with the queue...\n\n  return finalState;\n}\n```\n\n----------------------------------------\n\nTITLE: Using setState with a Function Updater in React\nDESCRIPTION: Shows how to use setState with a function updater to update state based on the previous state. This is useful when updating state multiple times during the same event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nhandleIncreaseAge = () => {\n  this.setState(prevState => {\n    return {\n      age: prevState.age + 1\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Events with onDrag in React (JSX)\nDESCRIPTION: React prop for handling the event that fires continuously while an element or text selection is being dragged. It expects a `DragEvent` handler function and corresponds to the browser's `drag` event.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nonDrag\n```\n\n----------------------------------------\n\nTITLE: Ideal Approach: Using Purpose-Specific Custom Hooks\nDESCRIPTION: The recommended pattern for using custom Hooks named after their specific purposes. This approach makes the component code more declarative and clearly communicates intent.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  // ✅ Great: custom Hooks named after their purpose\n  useChatRoom({ serverUrl, roomId });\n  useImpressionLog('visit_chat', { roomId });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Error Boundary in React Transitions\nDESCRIPTION: This snippet demonstrates how to use an error boundary to handle errors that occur during a transition. It wraps a component using useTransition in an ErrorBoundary component to catch and display errors.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTransition } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport function AddCommentContainer() {\n  return (\n    <ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>\n      <AddCommentButton />\n    </ErrorBoundary>\n  );\n}\n\nfunction addComment(comment) {\n  // For demonstration purposes to show Error Boundary\n  if (comment == null) {\n    throw new Error(\"Example Error: An error thrown to trigger error boundary\");\n  }\n}\n\nfunction AddCommentButton() {\n  const [pending, startTransition] = useTransition();\n\n  return (\n    <button\n      disabled={pending}\n      onClick={() => {\n        startTransition(() => {\n          // Intentionally not passing a comment\n          // so error gets thrown\n          addComment();\n        });\n      }}\n    >\n      Add comment\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Comparison Function with memo in React\nDESCRIPTION: This example shows how to create a custom comparison function for React.memo to perform deep equality checks on specific props. The function compares dataPoints arrays by checking the length and each point's coordinates.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Chart = memo(function Chart({ dataPoints }) {\n  // ...\n}, arePropsEqual);\n\nfunction arePropsEqual(oldProps, newProps) {\n  return (\n    oldProps.dataPoints.length === newProps.dataPoints.length &&\n    oldProps.dataPoints.every((oldPoint, index) => {\n      const newPoint = newProps.dataPoints[index];\n      return oldPoint.x === newPoint.x && oldPoint.y === newPoint.y;\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Elements with createElement and Children in React\nDESCRIPTION: Example showing how to create a more complex element with multiple children, including both string literals and other React elements created with createElement.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/createElement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello ',\n    createElement('i', null, name),\n    '. Welcome!'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Packing List Display Component with Item Management\nDESCRIPTION: A React component that renders the list of packing items with checkboxes to mark items as packed and buttons to delete items. It passes events up to parent component handlers.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function PackingList({\n  items,\n  onChangeItem,\n  onDeleteItem\n}) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={item.packed}\n              onChange={e => {\n                onChangeItem({\n                  ...item,\n                  packed: e.target.checked\n                });\n              }}\n            />\n            {' '}\n            {item.title}\n          </label>\n          <button onClick={() => onDeleteItem(item.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Action Function Structure with useActionState\nDESCRIPTION: Shows the structure of an action function when used with useActionState, highlighting how it receives the current state as its first parameter.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction action(currentState, formData) {\n  // ...\n  return 'next state';\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Mutation in Reducer\nDESCRIPTION: An example showing the incorrect way to update state in a reducer by mutating the existing state object directly, which should be avoided.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'incremented_age': {\n      // 🚩 Don't mutate an object in state like this:\n      state.age = state.age + 1;\n      return state;\n    }\n```\n\n----------------------------------------\n\nTITLE: Notifications Utility for Chat App (Hidden, JavaScript + Toastify)\nDESCRIPTION: Provides a Toastify-based function to display themed notifications, to be called as part of effect events on chat connection. Imports CSS and handles theming logic. Marked as hidden in documentation but necessary for notification support in the React apps. Inputs are message (string) and theme ('light' or 'dark'); output is a visible notification for two seconds on the UI.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n  Toastify({\n    text: message,\n    duration: 2000,\n    gravity: 'top',\n    position: 'right',\n    style: {\n      background: theme === 'dark' ? 'black' : 'white',\n      color: theme === 'dark' ? 'white' : 'black',\n    },\n  }).showToast();\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Traditional CSS Styling in JavaScript and CSS\nDESCRIPTION: Illustrates the standard approach to styling React components using an external CSS file and the `className` prop. This serves as a baseline comparison for CSS-in-JS techniques discussed in relation to `useInsertionEffect`.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useInsertionEffect.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// In your JS file:\n<button className=\"success\" />\n```\n\nLANGUAGE: css\nCODE:\n```\n// In your CSS file:\n.success { color: green; }\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook in React\nDESCRIPTION: Example of using the useState Hook to add state to a React component. This snippet demonstrates defining a state variable 'index' and its setter function 'setIndex' initialized with a value of 0.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ImageGallery() {\n  const [index, setIndex] = useState(0);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Server Function with Input Validation\nDESCRIPTION: Implementation of a Server Function that includes input validation and error handling.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\";\n\nexport async function updateName(name) {\n  if (!name) {\n    return {error: 'Name is required'};\n  }\n  await db.users.updateName(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Chat Connection with Event Listener Support (JavaScript)\nDESCRIPTION: Implements a more advanced version of the chat connection factory to simulate async connection establishment and event handling with callbacks. Emulates connecting to a server after a timeout and supports registering a single 'connected' event handler, throwing errors on misuse. Used by React chat UI components to mimic real-time communication. All logic is synchronous except connection establishment, which uses setTimeout.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function createConnection(serverUrl, roomId) {\n  // A real implementation would actually connect to the server\n  let connectedCallback;\n  let timeout;\n  return {\n    connect() {\n      timeout = setTimeout(() => {\n        if (connectedCallback) {\n          connectedCallback();\n        }\n      }, 100);\n    },\n    on(event, callback) {\n      if (connectedCallback) {\n        throw Error('Cannot add the handler twice.');\n      }\n      if (event !== 'connected') {\n        throw Error('Only \"connected\" event is supported.');\n      }\n      connectedCallback = callback;\n    },\n    disconnect() {\n      clearTimeout(timeout);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility Detection with IntersectionObserver\nDESCRIPTION: This Box component uses useEffect to set up an IntersectionObserver that monitors when the element is fully visible in the viewport. When visible, it changes the document's background color, demonstrating integration with browser APIs.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect } from 'react';\n\nexport default function Box() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const div = ref.current;\n    const observer = new IntersectionObserver(entries => {\n      const entry = entries[0];\n      if (entry.isIntersecting) {\n        document.body.style.backgroundColor = 'black';\n        document.body.style.color = 'white';\n      } else {\n        document.body.style.backgroundColor = 'white';\n        document.body.style.color = 'black';\n      }\n    }, {\n       threshold: 1.0\n    });\n    observer.observe(div);\n    return () => {\n      observer.disconnect();\n    }\n  }, []);\n\n  return (\n    <div ref={ref} style={{\n      margin: 20,\n      height: 100,\n      width: 100,\n      border: '2px solid black',\n      backgroundColor: 'blue'\n    }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Tic-Tac-Toe Game Board\nDESCRIPTION: Provides CSS styles for the tic-tac-toe game, including the board layout and individual square appearance.\nSOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n  padding: 0;\n}\n\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n```"
  }
]