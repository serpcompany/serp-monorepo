[
  {
    "owner": "cloudflare",
    "repo": "wrangler-action",
    "content": "TITLE: Deploying Cloudflare Worker with Wrangler GitHub Action - YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for deploying a Cloudflare Worker when a push occurs on the main branch. It utilizes the checkout action to clone the repository and the cloudflare/wrangler-action to execute deployment, requiring a Wrangler-compatible API token specified as a secret. Expected input is a new commit to main; output is an updated deployed Worker.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Worker on Push to Main Branch with Wrangler Action - YAML\nDESCRIPTION: Defines a GitHub Actions workflow that triggers on push events to the main branch to automatically deploy a Worker. Relies on actions/checkout and uses the Wrangler action with a Cloudflare API token secret for authentication. Ensures CI/CD deployment flow is triggered securely and consistently.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Cloudflare Wrangler Action Deployment Workflow with GitHub Actions - YAML\nDESCRIPTION: This snippet includes a full GitHub Actions workflow that runs on push, checks out code, and performs a deploy step using cloudflare/wrangler-action. It shows the required workflow skeleton, how to specify the runner (ubuntu-latest), and the use of standard secrets for Cloudflare authentication and accountId. It is useful for new users seeking a complete example and for troubleshooting the 'No account id found' error. Required files: wrangler.toml (with account_id) or accountId input. Output is a triggered deployment whenever code is pushed.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy app\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Wrangler Action with GitHub Secrets - YAML\nDESCRIPTION: This code demonstrates how to securely provide your Cloudflare API token to Wrangler Action by storing it as a GitHub repository secret and referencing it in the workflow file. The action reads the token from the specified secret, ensuring your credentials are not exposed in logs. The parameters expected are the secret key (apiToken) mapped to the correct environment variable.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    name: Deploy\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Pages Project (Production & Preview) with Wrangler Action - YAML\nDESCRIPTION: A YAML workflow for deploying Cloudflare Pages projects, supporting both production and preview deployments based on branch. Requires API and Account IDs as GitHub secrets, optionally a GitHub token for triggering associated deployment statuses. The command parameter controls the specific Wrangler deployment invocation.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    permissions:\n      contents: read\n      deployments: write\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          command: pages deploy YOUR_DIST_FOLDER --project-name=example\n          # Optional: Enable this if you want to have GitHub Deployments triggered\n          gitHubToken: ${{ secrets.GITHUB_TOKEN }}\n\n```\n\n----------------------------------------\n\nTITLE: Passing Worker Secrets and Environment Variables in Workflow - YAML\nDESCRIPTION: This snippet details how to configure and inject secret values into Workers using the secrets and env fields. The secrets input takes newline-separated variable names that correspond to environment variables, which are provided via the env block. This securely updates Worker secrets using wrangler secret put and supports specifying an environment for the deployment.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        environment: production\n        secrets: |\n          SECRET1\n          SECRET2\n      env:\n        SECRET1: ${{ secrets.SECRET1 }}\n        SECRET2: ${{ secrets.SECRET2 }}\n\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Line Wrangler Commands via GitHub Action - YAML\nDESCRIPTION: This snippet shows how to execute multiple Wrangler commands in sequence by passing a multiline string to the command key. It allows advanced deployment routines, such as listing projects and running deploys for pages, using a consistent apiToken for all commands. Output will appear in workflow logs for each command executed.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        command: |\n          pages project list\n          pages deploy .vercel/output/static --project-name=demo-actions --branch=test\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployment URL after Cloudflare Wrangler Action Deploy - YAML\nDESCRIPTION: This snippet shows how to deploy a project with cloudflare/wrangler-action and then retrieve the deployment-url output variable. The deployment step uses the required apiToken, accountId, and deploy command. The following step accesses the output variable deployment-url via environment variable DEPLOYMENT_URL and prints it using echo. Prerequisites are the same as in deploymentâ€”GitHub repository secrets for authentication. Output from printing will be the actual deployed site URL.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Deploy\n  id: deploy\n  uses: cloudflare/wrangler-action@v3\n  with:\n    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n    accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n    command: pages deploy --project-name=example\n\n- name: print deployment-url\n  env:\n    DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}\n  run: echo $DEPLOYMENT_URL\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Deployment with workflow_dispatch and Wrangler Action - YAML\nDESCRIPTION: This workflow leverages GitHub's workflow_dispatch event to enable manual deployment via the UI, optionally with user-defined parameters (e.g., target environment). The action expects the apiToken and takes a command referencing workflow inputs, supporting customized or ad hoc deployment scenarios.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: \"Choose an environment to deploy to: <dev|staging|prod>\"\n        required: true\n        default: \"dev\"\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy app\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          command: deploy --env ${{ github.event.inputs.environment }}\n\n```\n\n----------------------------------------\n\nTITLE: Running Specific Wrangler Commands with GitHub Action - YAML\nDESCRIPTION: This configuration allows you to specify arbitrary Wrangler commands via the command input, enabling custom actions such as retrieving user/account information (e.g., whoami). Requires apiToken and the desired Wrangler command as parameters, and outputs to workflow logs.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        command: whoami\n\n```\n\n----------------------------------------\n\nTITLE: Deploying with Cloudflare Wrangler Action and Capturing Command Output - YAML\nDESCRIPTION: This YAML snippet demonstrates deploying a project using cloudflare/wrangler-action and capturing its command output for use in subsequent steps. It uses the action with required inputs: apiToken, accountId, and a specific deploy command for Cloudflare Pages. The output variable command-output is made available in the next step via environment variable CMD_OUTPUT and printed with echo. Dependencies include the cloudflare/wrangler-action GitHub Action and appropriate repository secrets. Inputs required are CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID; output is the raw text produced by the Wrangler command execution.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Deploy\n  id: deploy\n  uses: cloudflare/wrangler-action@v3\n  with:\n    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n    accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n    command: pages deploy --project-name=example\n\n- name: print wrangler command output\n  env:\n    CMD_OUTPUT: ${{ steps.deploy.outputs.command-output }}\n  run: echo $CMD_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Specifying Wrangler NPM Version in GitHub Action - YAML\nDESCRIPTION: This snippet illustrates how to install a specific Wrangler version for deployment by passing the wranglerVersion input. Supports semver version strings (e.g., '2.20.0') for precise reproducibility of deployments. Requires the apiToken secret and provides stable deployments across different environments by controlling the version explicitly.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        wranglerVersion: \"2.20.0\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Pre- and Post-Deployment Commands in Wrangler Action - YAML\nDESCRIPTION: This YAML demonstrates using preCommands and postCommands to execute shell and wrangler commands before and after the Wrangler deployment. Useful for chaining custom setup, validation, or cleanup steps within the workflow. Inputs are preCommands/postCommands as strings; outputs are any logs or state changes from those commands.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        preCommands: echo \"*** pre command ***\"\n        postCommands: |\n          echo \"*** post commands ***\"\n          wrangler kv:key put --binding=MY_KV key2 value2\n          echo \"******\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Wrangler Action - YAML\nDESCRIPTION: This YAML snippet demonstrates specifying a subdirectory (workingDirectory) from which the Wrangler command should run. Useful for monorepos or workflows that require deployment from a sub-path. Expects the apiToken secret and the relative path string for workingDirectory.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        workingDirectory: \"subfoldername\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Worker Secret for a Specific Environment via Wrangler Action - YAML\nDESCRIPTION: This advanced YAML snippet configures secret injection and deployment targeting a specific environment using the environment and secrets inputs. The env block provides secret values, ensuring sensitive data is securely managed per environment. Requires the Wrangler action with at least API token, secret variable, and environment values provided.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: cloudflare/wrangler-action@v3\n  with:\n    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n    command: deploy --env production\n    secrets: |\n      SUPER_SECRET\n    environment: production\n  env:\n    SUPER_SECRET: ${{ secrets.SUPER_SECRET }}\n\n```\n\n----------------------------------------\n\nTITLE: Uploading New Worker Version using Wrangler Action - YAML\nDESCRIPTION: Demonstrates uploading a new Worker version for later staged or gradual deployment. Requires Wrangler v3.40.0+, secret API and Account IDs for authentication, and uses the command 'versions upload'. Output is a new Worker version registered to the account but not immediately deployed.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Upload Worker Version\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          command: versions upload\n\n```\n\n----------------------------------------\n\nTITLE: Printing Cloudflare Pages Deployment Alias URL Post-Deploy - YAML\nDESCRIPTION: This YAML workflow step accesses and prints the pages-deployment-alias-url output variable from a previous Wrangler Action deploy step. It expects deployment by cloudflare/wrangler-action with an appropriate id. The alias URL is made available for branch preview deployments in Pages, such as feature branches. DEPLOYMENT_ALIAS_URL is set and printed in the environment. Inputs and secrets as with previous deployment steps. Output will be the branch alias URL for the deployed Pages branch.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- name: print pages-deployment-alias-url\n  env:\n    DEPLOYMENT_ALIAS_URL: ${{ steps.deploy.outputs.pages-deployment-alias-url }}\n  run: echo $DEPLOYMENT_ALIAS_URL\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Manager for Wrangler Action Deployment - YAML\nDESCRIPTION: This YAML example demonstrates how to explicitly set a package manager when running the cloudflare/wrangler-action in a GitHub workflow. Typically, the action auto-detects the package manager, but here the with.packageManager field is set to pnpm. This is necessary when you wish to override auto-detection. Required context includes project lock files and authentication secrets. Outputs are unaffected; the dependency management tool will follow the provided option.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      uses: cloudflare/wrangler-action@v3\n      with:\n        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n        packageManager: pnpm\n```\n\n----------------------------------------\n\nTITLE: Output of Deployed Cloudflare Pages URL - Text\nDESCRIPTION: This text output shows the resulting URL of a successful Cloudflare Pages deployment. It is the expected output from the deployment-url step in a workflow and will be a valid HTTPS URL pointing to the deployed site. No dependencies or special handling is required; it simply confirms deployment output.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your_pages_site>.pages.dev\n```\n\n----------------------------------------\n\nTITLE: Output of Cloudflare Pages Alias Deployment URL - Text\nDESCRIPTION: This text output shows the branch or alias URL produced after a Cloudflare Pages preview deployment (for example, a feature branch). It corresponds to the pages-deployment-alias-url output. The format makes clear it is a branch-specific alias for preview deployments. No additional input or parameterization is required.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nhttps://new-feature.<your_pages_site>.pages.dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Worker on a Schedule with Wrangler Action - YAML\nDESCRIPTION: This YAML workflow example uses the GitHub Actions 'schedule' event, defined via cron syntax, to deploy a Workers application at regular intervals. Inputs include the API token for authentication; output is an automatic deployment at each scheduled run.\nSOURCE: https://github.com/cloudflare/wrangler-action/blob/main/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  schedule:\n    - cron: \"0 * * * *\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy app\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n\n```"
  }
]