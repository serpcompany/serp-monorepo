[
  {
    "owner": "bobbyiliev",
    "repo": "introduction-to-git-and-github-ebook",
    "content": "TITLE: Remote Repository Operations\nDESCRIPTION: Commands for syncing with remote repositories including pulling and pushing changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin branch_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin branch_name\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Git Branch\nDESCRIPTION: This snippet shows how to create a new Git branch called 'newFeature' and switch to it in a single command. It also demonstrates how to check which branch you're currently on.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/017-git-branching.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b newFeature\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: This snippet demonstrates how to commit staged changes in Git using the 'git commit' command. It includes an explanation of the command structure and the importance of writing descriptive commit messages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Your Commit Message Here\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Commands for starting a new Git repository locally or cloning an existing remote repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone your_project_url\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository using SSH\nDESCRIPTION: This snippet demonstrates how to use the git clone command to clone a GitHub repository using an SSH URL. It includes the command syntax and an example of the output you might see when cloning a repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/020-git-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:bobbyiliev/introduction-to-bash-scripting.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nCloning into 'introduction-to-bash-scripting'...\nremote: Enumerating objects: 21, done.\nremote: Counting objects: 100% (21/21), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 215 (delta 7), reused 14 (delta 4), pack-reused 194\nReceiving objects: 100% (215/215), 3.08 MiB | 5.38 MiB/s, done.\nResolving deltas: 100% (114/114), done.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Identity\nDESCRIPTION: Commands to set up global Git configuration for user name and email used in commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email \"yourmail@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic Git Branch Merge\nDESCRIPTION: Commands to merge a feature branch into the main branch\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit merge newFeature\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair using ssh-keygen\nDESCRIPTION: Command to generate a new SSH key pair that creates both private (id_rsa) and public (id_rsa.pub) keys in the ~/.ssh directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/014-ssh-keys.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote GitHub Repository\nDESCRIPTION: Command to push local branch changes to the remote GitHub repository. This makes your changes available to other collaborators.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/022-git-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin YOUR_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Pushing Commits to Remote GitHub Repository\nDESCRIPTION: This command pushes your local commits to the remote GitHub repository. The '-u origin main' option sets the upstream branch, allowing future 'git push' and 'git pull' commands to work as intended.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/015-git-push.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Creating Gitignore File\nDESCRIPTION: Command to create a new .gitignore file in your project directory\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch .gitignore\n```\n\n----------------------------------------\n\nTITLE: Linking Local Git Project to Remote GitHub Repository using SSH\nDESCRIPTION: This command adds a remote GitHub repository to your local Git project using SSH authentication. Replace 'your_username' and 'your_repo_name' with your actual GitHub username and repository name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/015-git-push.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin git@github.com:your_username/your_repo_name.git\n```\n\n----------------------------------------\n\nTITLE: Cloning or Initializing a Git Repository\nDESCRIPTION: Commands to either clone an existing project or initialize a new one. These are typically the first steps in starting a Git-based project.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/022-git-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone\ngit init\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes Without Staging in Git\nDESCRIPTION: This snippet shows how to commit all changes in a Git repository without explicitly staging them first. It uses the '-a' flag to automatically stage all modifications.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a -m \"Your Commit Message Here\"\n```\n\n----------------------------------------\n\nTITLE: Linking Local Git Project to Remote GitHub Repository using HTTPS\nDESCRIPTION: This command adds a remote GitHub repository to your local Git project using HTTPS authentication. Use this if you haven't set up SSH. Replace 'your_username' and 'your_repo_name' with your actual GitHub username and repository name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/015-git-push.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/your_username/your_repo_name.git\n```\n\n----------------------------------------\n\nTITLE: Deleting a Git Branch Locally and Remotely\nDESCRIPTION: These commands demonstrate how to delete a Git branch both locally and on the remote repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/017-git-branching.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -d name_of_the_branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --delete name_of_the_branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\n```\n\n----------------------------------------\n\nTITLE: Amending the Latest Commit in Git\nDESCRIPTION: This snippet demonstrates how to amend the latest commit in Git, allowing you to add forgotten files or make small changes to the committed files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Branch to GitHub\nDESCRIPTION: This command pushes your new branch to GitHub. Replace 'branch_name' with the name of your branch.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/023-pull-requests.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin branch_name\n```\n\n----------------------------------------\n\nTITLE: Ignoring Directories\nDESCRIPTION: Example of ignoring vendor and node_modules directories in .gitignore\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Ignored folders\n/vendor/\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Basic Git Switch Branch Command\nDESCRIPTION: The basic syntax for switching to a different branch using the git switch command. This command is a more focused alternative to git checkout, specifically designed for branch switching operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/029-git-switch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit switch <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with GitHub CLI\nDESCRIPTION: This command demonstrates how to clone a GitHub repository using the gh command instead of the traditional git clone.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone thedevdojo/larasail\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command\nDESCRIPTION: Command to check differences between branches before merging\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff newFeature\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History with Git Log\nDESCRIPTION: This command displays the entire commit history of the repository, showing commit IDs, author information, dates, and commit messages in reverse chronological order.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/012-git-log.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Command to commit staged changes to the local repository. A descriptive commit message should be provided to explain the changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/022-git-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub CLI\nDESCRIPTION: This command initiates the authentication process for the GitHub CLI, allowing users to log in to their GitHub account.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Commit Signing in Git\nDESCRIPTION: This command enables automatic signing for all Git commits. It sets a global configuration to sign every commit without needing to specify the '-S' flag each time.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global commit.gpgsign true\n```\n\n----------------------------------------\n\nTITLE: Git Stash with Ignored Files\nDESCRIPTION: Command to stash changes including both untracked and ignored files specified in .gitignore.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit stash -a\n```\n\n----------------------------------------\n\nTITLE: Git Pull Command Example\nDESCRIPTION: Command to pull the latest changes from the main branch of the remote repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/016-git-pull.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Git Stash with Untracked Files\nDESCRIPTION: Command to stash changes including untracked files that weren't part of the last commit.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit stash -u\n```\n\n----------------------------------------\n\nTITLE: Comparing Git Branches\nDESCRIPTION: These commands show how to compare commits and differences between two branches in Git.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/017-git-branching.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log BranchA..BranchB\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit diff BranchB...BranchA\n```\n\n----------------------------------------\n\nTITLE: Adding Single File in Git\nDESCRIPTION: Shows the basic syntax for adding a single file to Git tracking using git add command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/009-git-add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add NAME_OF_FILE\n```\n\n----------------------------------------\n\nTITLE: Viewing Condensed Commit History\nDESCRIPTION: This command shows a simplified version of the commit history with only the commit IDs and messages displayed on single lines, making it easier to quickly scan through the history.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/012-git-log.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Email\nDESCRIPTION: Sets the global Git email address that will be associated with all commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email johndoe@example.com\n```\n\n----------------------------------------\n\nTITLE: Updating a Feature Branch with Git Rebase in Bash\nDESCRIPTION: This code demonstrates how to update a feature branch with new commits from the dev branch using Git rebase. It's useful for keeping feature branches up-to-date with the latest changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/028-git-rebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase dev\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History for a Specific File in Git\nDESCRIPTION: This command shows the commit history for a specific file in a Git repository. The '--follow' flag ensures that the history is traced even if the file was renamed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit log --follow [file]\n```\n\n----------------------------------------\n\nTITLE: Restore Stashed Changes\nDESCRIPTION: Command to reapply stashed modifications while keeping them in the stash list.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit stash apply\n```\n\n----------------------------------------\n\nTITLE: Branch Operations\nDESCRIPTION: Commands for listing, creating, switching, and deleting branches.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -a\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch branch_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b branch_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -d branch_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout branch_name\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Alias with git config\nDESCRIPTION: This snippet demonstrates how to create a Git alias 'co' for the 'checkout' command using the git config command with the --global flag. This configuration will apply across all repositories for the user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/027-git-alias.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global alias.co checkout\n```\n\n----------------------------------------\n\nTITLE: Resetting Git Commits\nDESCRIPTION: This snippet shows how to reset Git commits using the soft reset option. It undoes the commit but keeps the code changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --soft HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to set up the global Git username and email configuration required for commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/024-git-and-VS-Code.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"John Doe\"\ngit config --global user.email \"johnde@domain.com\"\n```\n\n----------------------------------------\n\nTITLE: Laravel Gitignore Example\nDESCRIPTION: Standard .gitignore configuration for Laravel projects\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n/node_modules\n/public/hot\n/public/storage\n/storage/*.key\n/vendor\n.env\n.env.backup\n.phpunit.result.cache\nHomestead.json\nHomestead.yaml\nnpm-debug.log\nyarn-error.log\n```\n\n----------------------------------------\n\nTITLE: Renaming a Git Branch\nDESCRIPTION: This snippet shows how to rename a Git branch, both for a specific branch and for the current branch.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/017-git-branching.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -m wrong-branch-name correct-branch-name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -m my-branch-name\n```\n\n----------------------------------------\n\nTITLE: Staging Changes in Git\nDESCRIPTION: Command to stage changes for commit. This prepares modified files to be included in the next commit.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/022-git-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add\n```\n\n----------------------------------------\n\nTITLE: Ignoring Directory with Exception\nDESCRIPTION: Example of ignoring a directory while keeping a specific file\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndata/*\n!data/README.md\n```\n\n----------------------------------------\n\nTITLE: Adding All Files in Git\nDESCRIPTION: Demonstrates how to add all files in the current directory to Git tracking using the dot notation.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/009-git-add.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Status\nDESCRIPTION: Command to check the current state of the working directory and staging area.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Resetting Multiple Commits in Git\nDESCRIPTION: This snippet shows the syntax for resetting multiple commits in Git, where 'n' represents the number of commits to reset.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --soft HEAD~n\n```\n\n----------------------------------------\n\nTITLE: Staging Changed Files with Git\nDESCRIPTION: Command to stage modified files in git before committing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/011-git-diff.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository using Git\nDESCRIPTION: This command clones a GitHub repository to your local machine. Replace 'your_user' and 'your_repo' with the appropriate GitHub username and repository name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/023-pull-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:your_user/your_repo\n```\n\n----------------------------------------\n\nTITLE: Listing Git Configuration\nDESCRIPTION: Displays all current Git configuration settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --list\n```\n\nLANGUAGE: text\nCODE:\n```\nuser.name=Bobby Iliev\nuser.email=bobby@bobbyiliev.com\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Git Repository Status\nDESCRIPTION: Shows the output of git status command on a newly initialized Git repository with no commits or files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/008-git-status.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: This command creates and switches to a new branch in Git. Replace 'branch_name' with your desired branch name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/023-pull-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b branch_name\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Files in Git\nDESCRIPTION: Shows how to add multiple files at once to Git tracking by listing them with spaces.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/009-git-add.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add file1.html file2.html file3.html\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Creates a new Git repository by initializing the .git directory in the project folder\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/007-initializing-a-project.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Staging Changes in Git\nDESCRIPTION: This command stages all changes in the current directory for commit. Use this after making your code changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/023-pull-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Resolving Merge Conflict\nDESCRIPTION: Final command to commit resolved merge conflicts\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Resolve merge conflict\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Commits with Git Diff\nDESCRIPTION: This command shows the differences between the current state of the repository and a specific commit identified by its hash. It displays file changes with additions and deletions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/012-git-log.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff fa583473b4be2807b45f35b755aa84ac78922259\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: This command commits the staged changes with a commit message. Replace 'Commit Message' with a descriptive message about your changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/023-pull-requests.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Commit Message\"\n```\n\n----------------------------------------\n\nTITLE: Basic Git Stash Operation\nDESCRIPTION: Basic command to stash away local changes and reset working directory to HEAD commit.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit stash\n```\n\n----------------------------------------\n\nTITLE: List All Stashes\nDESCRIPTION: Command to display an indexed list of all available stashes with their commit messages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit stash list\n```\n\n----------------------------------------\n\nTITLE: Git Diff Output Example\nDESCRIPTION: Shows the output format of git diff command when comparing changes in README.md file. Demonstrates how additions and modifications are displayed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/011-git-diff.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndiff --git a/README.md b/README.md\nindex 9366068..2b14655 100644\n--- a/README.md\n+++ b/README.md\n@@ -1 +1,2 @@\n # Demo Project\n+Git is awesome\n```\n\n----------------------------------------\n\nTITLE: Managing Files in Git\nDESCRIPTION: Commands for adding files to staging area, removing files, and discarding changes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add file_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rm some_file.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -- file_name\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote Repository in Git\nDESCRIPTION: This command displays the configured remote repositories for your local Git project, allowing you to verify that the remote has been added correctly.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/015-git-push.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Making Changes on a New Git Branch\nDESCRIPTION: This snippet demonstrates how to switch to a new branch, create a file with content, and commit the changes to that branch.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/017-git-branching.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout newFeature\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"<h1>My First Feature Branch</h1>\" > feature1.html\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add feature1.html\ngit commit -m \"Add feature1.html\"\n```\n\n----------------------------------------\n\nTITLE: Executing Git Rebase in Bash\nDESCRIPTION: This snippet shows the basic syntax for rebasing a feature branch onto a dev branch. It applies the commits from the feature branch on top of the dev branch.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/028-git-rebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase feature dev\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Command to commit staged changes with a commit message.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/011-git-diff.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Update README.md\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: Command to create and switch to a new branch. This is recommended before making changes to isolate work from the main branch.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/022-git-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b YOUR_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Signing Individual Git Commits\nDESCRIPTION: This command demonstrates how to sign an individual Git commit using the '-S' flag. This is useful when automatic signing is not enabled globally.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -S -m \"your commit message\"\n```\n\n----------------------------------------\n\nTITLE: Git Push Rejection Error Message\nDESCRIPTION: Example error message when trying to push changes to a remote repository that has commits not present in the local repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/016-git-pull.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n ! [rejected]        main -> main (fetch first)\nerror: failed to push some refs to 'git@github.com:bobbyiliev/demo-repo.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key for Git Commit Signing\nDESCRIPTION: This command exports the public GPG key in ASCII-armored format. The exported key is used to verify signed commits on platforms like GitHub and GitLab.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngpg --armor --export E630A0A00CAA7AAA\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch and Adding Commits in Bash\nDESCRIPTION: This code creates a new feature branch, adds some sample commits, and prepares it for an interactive rebase demonstration. It shows how to switch branches, create files, and make commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/028-git-rebase.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit switch main\ngit checkout -b feature-interactive\necho \"<p>Rebasing interactively is super cool</p>\" >> feature1.html\ngit commit -am \"Commit to test Interactive Rebase\"\necho \"<p>With interactive rebasing you can do really cool stuff</p>\" >> feature1.html\ngit commit -am \"Commit to test Interactive Rebase\"\n```\n\n----------------------------------------\n\nTITLE: Quick Branch Toggle Command\nDESCRIPTION: A shortcut command to switch back to the previously active branch. This is useful when frequently switching between two branches during development.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/029-git-switch.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Keys in Git\nDESCRIPTION: This command lists the available GPG keys in long format, which is necessary for identifying the key ID to use for signing Git commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --list-secret-keys --keyid-format=long\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History in Bash\nDESCRIPTION: This command shows how to view the Git commit history after performing a rebase. It's useful for verifying that the rebase operation was successful and reviewing the new commit structure.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/028-git-rebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status with Untracked Files\nDESCRIPTION: Shows the output of git status command when there are untracked files in the repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/008-git-status.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        README.md\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n----------------------------------------\n\nTITLE: Navigating to SSH Directory\nDESCRIPTION: Command to change directory to the .ssh folder where SSH keys are stored.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/014-ssh-keys.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/.ssh\n```\n\n----------------------------------------\n\nTITLE: Git Reset Syntax\nDESCRIPTION: This snippet provides the general syntax for the git reset command, allowing for soft or hard resets to a specific commit reference.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit reset [--soft|--hard] [<reference-to-commit>]\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History\nDESCRIPTION: Command to display the commit history log showing author, date and commit messages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Config File\nDESCRIPTION: Shows the contents of the global Git configuration file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/.gitconfig\n```\n\nLANGUAGE: text\nCODE:\n```\n[user]\n        name = Bobby Iliev\n        email = bobby@bobbyiliev.com\n```\n\n----------------------------------------\n\nTITLE: Adding Files for Commit in Git\nDESCRIPTION: This snippet shows how to add all changed files to the staging area in Git, preparing them for the next commit.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific File\nDESCRIPTION: Example of ignoring a specific PHP configuration file in .gitignore\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig.php\n```\n\n----------------------------------------\n\nTITLE: Listing Git Directory Contents\nDESCRIPTION: Shows the contents of the .git directory in a Git repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nls .git\n```\n\nLANGUAGE: text\nCODE:\n```\nCOMMIT_EDITMSG  HEAD  branches  config  description  hooks  index  info  logs  objects  refs\n```\n\n----------------------------------------\n\nTITLE: Committing New Changes in Git\nDESCRIPTION: This snippet demonstrates how to commit new changes in Git with a commit message after making modifications.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Your new commit message\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GPG Signing Key in Git\nDESCRIPTION: This command sets the GPG signing key for Git commits. The '--global' flag applies this setting to all repositories for the current user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.signingkey E630A0A00CAA7AAA\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit Message Template\nDESCRIPTION: Command to display the contents of the Git commit message template file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/024-git-and-VS-Code.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/.gitmessage\n```\n\n----------------------------------------\n\nTITLE: Restore Specific Stash by Index\nDESCRIPTION: Commands to restore a specific stash using its index number, showing two equivalent syntaxes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/026-git-stash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit stash apply n\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit stash apply \"stash@{n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding README File in Git\nDESCRIPTION: Demonstrates adding a specific README.md file to Git tracking.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/009-git-add.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\n```\n\n----------------------------------------\n\nTITLE: Laravel Gitignore from CLI\nDESCRIPTION: Example output of Laravel .gitignore template from gitignore.io CLI\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n# Created by https://www.toptal.com/developers/gitignore/api/laravel\n# Edit at https://www.toptal.com/developers/gitignore?templates=laravel\n\n### Laravel ###\n/vendor/\nnode_modules/\nnpm-debug.log\nyarn-error.log\n\n# Laravel 4 specific\nbootstrap/compiled.php\napp/storage/\n\n# Laravel 5 & Lumen specific\npublic/storage\npublic/hot\n\n# Laravel 5 & Lumen specific with changed public path\npublic_html/storage\npublic_html/hot\n\nstorage/*.key\n.env\nHomestead.yaml\nHomestead.json\n/.vagrant\n.phpunit.result.cache\n\n# Laravel IDE helper\n*.meta.*\n_ide_*\n\n# End of https://www.toptal.com/developers/gitignore/api/laravel\n```\n\n----------------------------------------\n\nTITLE: Node.js Gitignore Template\nDESCRIPTION: Comprehensive .gitignore template for Node.js projects from gitignore.io\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# End of https://www.toptal.com/developers/gitignore/api/node\n```\n\n----------------------------------------\n\nTITLE: Setting Default Branch Name\nDESCRIPTION: Configures the default branch name for new repositories to match GitHub's default.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global init.defaultBranch main\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on macOS using Homebrew\nDESCRIPTION: This code snippet shows how to install the GitHub CLI (gh) on macOS using the Homebrew package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\n```\n\n----------------------------------------\n\nTITLE: Using Gitignore.io CLI\nDESCRIPTION: Commands to list available templates and generate Laravel .gitignore\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngi list\n```\n\n----------------------------------------\n\nTITLE: Interactive Git Rebase in Bash\nDESCRIPTION: This snippet shows how to perform an interactive rebase, allowing for more control over the rebasing process. It opens an editor where you can modify, reorder, or squash commits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/028-git-rebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i feature main\n```\n\n----------------------------------------\n\nTITLE: Verifying GitHub CLI Installation\nDESCRIPTION: This command checks the installed version of the GitHub CLI (gh) tool.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh --version\n```\n\n----------------------------------------\n\nTITLE: Git User Configuration File Example\nDESCRIPTION: Example content of the ~/.gitconfig file showing user configuration settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/024-git-and-VS-Code.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[user]\n    name = John Doe\n    email = johndoe@domain.com\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Commit Message Template\nDESCRIPTION: Commands to configure Git to use a custom commit message template globally.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/024-git-and-VS-Code.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global commit.template ~/.gitmessage\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Viewing a Specific Issue with GitHub CLI\nDESCRIPTION: This command shows how to view details of a specific issue in a GitHub repository using its issue number.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngh issue view '#25'\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Template Example\nDESCRIPTION: Example template for standardizing commit messages with title, summary, and contributor sections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/024-git-and-VS-Code.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n#Title\n\n#Summary of the commit\n\n#Include Co-authored-by for all contributors.\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Conflict Demo\nDESCRIPTION: Command to commit changes using the -am flag for modified files\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Conflict Demo 1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Debian/Ubuntu\nDESCRIPTION: Command to install Git and all its dependencies on Debian-based Linux distributions using the apt package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/003-installing-git.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install git-all\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on Ubuntu\nDESCRIPTION: This code snippet demonstrates how to install the GitHub CLI (gh) on Ubuntu using apt package manager. It adds the GitHub CLI repository and installs the gh package.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0\nsudo apt-add-repository https://cli.github.com/packages\nsudo apt update\nsudo apt install gh\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Name\nDESCRIPTION: Sets the global Git username that will be used for all Git operations on the system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git on RHEL Linux\nDESCRIPTION: Command to install Git and all its dependencies on RHEL-based Linux distributions using the dnf package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/003-installing-git.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install git-all\n```\n\n----------------------------------------\n\nTITLE: Listing Open Issues with GitHub CLI\nDESCRIPTION: This command shows how to list all open issues in a GitHub repository using the gh command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngh issue list\n```\n\n----------------------------------------\n\nTITLE: Displaying Public SSH Key Content\nDESCRIPTION: Command to display the content of the public SSH key file which needs to be added to GitHub.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/014-ssh-keys.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Creating New Project Directory\nDESCRIPTION: Creates a new directory for the project using the mkdir command\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/007-initializing-a-project.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir new-project\n```\n\n----------------------------------------\n\nTITLE: Creating a New Issue with GitHub CLI\nDESCRIPTION: This command demonstrates how to create a new issue in a GitHub repository using the gh command, with a 'bug' label applied.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/025-github-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh issue create --label bug\n```\n\n----------------------------------------\n\nTITLE: Git Status Output After Adding File\nDESCRIPTION: Shows the output of git status command after adding a new file to tracking.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/009-git-add.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   README.md\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents\nDESCRIPTION: Lists all files in the directory including hidden files with detailed information\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/007-initializing-a-project.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls -lah\n```\n\n----------------------------------------\n\nTITLE: Using a Git Alias to Create a Branch\nDESCRIPTION: This example shows how to use the previously created 'co' alias to create and switch to a new branch called 'branch1'. The alias simplifies the longer checkout command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/027-git-alias.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit co -b branch1\n```\n\n----------------------------------------\n\nTITLE: Git Status Output Example\nDESCRIPTION: Shows the output of git status command when there are staged changes ready to be committed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/011-git-diff.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   README.md\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: Command to check the current status of files in git repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/011-git-diff.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Output from Using a Git Alias\nDESCRIPTION: This snippet shows the output displayed after using the 'co' alias to create and switch to a new branch. The output is identical to what would be shown when using the full 'checkout' command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/027-git-alias.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSwitched to a new branch 'branch1'\n```\n\n----------------------------------------\n\nTITLE: Git Pull Success Output\nDESCRIPTION: Example output showing successful synchronization with the remote repository, including object counting and file change statistics.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/016-git-pull.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 646 bytes | 646.00 KiB/s, done.\nFrom github.com:bobbyiliev/demo-repo\n * branch            main       -> FETCH_HEAD\n   da46ce3..442afa5  main       -> origin/main\n\n README.md | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n```\n\n----------------------------------------\n\nTITLE: Deploying to DigitalOcean App Platform with Markdown Button\nDESCRIPTION: This snippet demonstrates how to create a 'Deploy to DigitalOcean' button using Markdown. It links to the DigitalOcean App Platform and includes the repository URL for automatic deployment.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Deploy to DO](https://mp-assets1.sfo2.digitaloceanspaces.com/deploy-to-do/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/tree/main)\n```\n\n----------------------------------------\n\nTITLE: Output from Using the Original Git Command\nDESCRIPTION: This snippet shows the output displayed when using the original 'checkout' command to create and switch to a new branch, confirming that both the alias and original command work identically.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/027-git-alias.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSwitched to a new branch 'branch2'\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: This snippet shows how to commit changes in Git using the commit command with a message.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/019-undoing-in-git.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Committing the wrong changes\"\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown\nDESCRIPTION: Demonstrates different ways to create links in Markdown, including named links, direct URLs, and links to document sections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Named Link](http://www.google.fr/ \"Named link title\") and http://www.google.fr/ or <http://example.com/>\n\n[heading-1](#heading-1 \"Goto heading-1\")\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Mac via Homebrew\nDESCRIPTION: Command to install Git on macOS using the Homebrew package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/003-installing-git.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version\nDESCRIPTION: Command to verify the installed version of Git on any operating system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/003-installing-git.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit --version\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit version 2.25.1\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Markdown\nDESCRIPTION: Shows various text formatting options in Markdown, including emphasis, strikethrough, strong text, and combinations of these styles.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCommon text\n\n_Emphasized text_ or *Emphasized text*\n\n~~Strikethrough text~~\n\n__Strong text__ or **Strong text**\n\n___Strong emphasized text___ or ***Strong emphasized text***\n```\n\n----------------------------------------\n\nTITLE: Removing Directories with rm -r Command\nDESCRIPTION: The rm -r command recursively removes directories and their contents. Example shows deleting the 'ebook' directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -r ebook\n```\n\n----------------------------------------\n\nTITLE: Setting Default Git Editor\nDESCRIPTION: Configures the default text editor that Git will use for commit messages and other operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/005-git-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.editor nano\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown\nDESCRIPTION: Shows how to create tables in Markdown, including basic tables, tables with escaped pipe characters, and tables with different text alignments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | \\|\n\nLeft aligned Header | Right aligned Header | Center aligned Header\n| :--- | ---: | :---:\nContent Cell  | Content Cell | Content Cell\nContent Cell  | Content Cell | Content Cell\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current working directory to the newly created project folder\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/007-initializing-a-project.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd new-project\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Signing Git Commits\nDESCRIPTION: This command generates a new GPG key pair, which can be used for signing Git commits. It's a prerequisite for creating verified commits in platforms like GitHub and GitLab.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --full-generate-key\n```\n\n----------------------------------------\n\nTITLE: Creating Blockquotes in Markdown\nDESCRIPTION: Demonstrates how to create blockquotes in Markdown, including nested blockquotes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n> Blockquote\n>> Nested blockquote\n```\n\n----------------------------------------\n\nTITLE: Creating README File Command\nDESCRIPTION: Command to create a new README.md file with a title using echo command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/008-git-status.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"# Demo Project\" >> README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Conflicting Changes\nDESCRIPTION: Commands to create conflicting changes on the main branch\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\necho \"<p>Conflict: change on main branch</p>\" >> feature1.html\ngit commit -am \"Conflict on main\"\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Shortcuts in Markdown\nDESCRIPTION: Demonstrates how to represent keyboard shortcuts or hotkeys in Markdown using the kbd HTML tag.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<kbd>⌘F</kbd>\n\n<kbd>⇧⌘F</kbd>\n```\n\n----------------------------------------\n\nTITLE: Appending Text to a File in Git Repository\nDESCRIPTION: This command appends a new line of text to the README.md file in a Git repository. It's used as an example to demonstrate how Git detects changes in tracked files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/010-git-commit.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho \"Git is awesome!\" >> README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Markdown\nDESCRIPTION: Demonstrates how to create inline code and multi-line code blocks in Markdown, including language-specific syntax highlighting.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`code()`\n\n```javascript\nvar specificLanguage_code = \n{\n    \"data\": {\n        \"lookedUpPlatform\": 1,\n        \"query\": \"Kasabian+Test+Transmission\",\n        \"lookedUpItem\": {\n            \"name\": \"Test Transmission\",\n            \"artist\": \"Kasabian\",\n            \"album\": \"Kasabian\",\n            \"picture\": null,\n            \"link\": \"http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp\"\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Previewing Markdown in Development Environment\nDESCRIPTION: A keyboard shortcut for previewing Markdown files in a development environment.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/997-create-your-github-profile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCMD+Shift+V or Ctrl+Shift+V\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Key Files\nDESCRIPTION: Command to list the contents of the .ssh directory showing the generated key files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/014-ssh-keys.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Installing Gitignore.io CLI\nDESCRIPTION: Command to install gitignore.io CLI tool globally on Linux\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/013-gitignore-file.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global alias.ignore \\n'!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi'\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with ls Command\nDESCRIPTION: The ls command displays contents of a directory. Shows files and folders in the current location.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Permission Error for Unauthorized Push\nDESCRIPTION: This code snippet shows the error message that appears when trying to push changes to a repository without the necessary permissions. It demonstrates why forking is necessary for contributing to projects you don't have direct access to.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/021-forking-in-git.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nERROR: Permission to laravel/laravel.git denied to bobbyiliev.\nFatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n----------------------------------------\n\nTITLE: Git Init Output\nDESCRIPTION: The output message displayed after successfully initializing a Git repository\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/007-initializing-a-project.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nInitialized empty Git repository in /home/devdojo/new-project/.git/\n```\n\n----------------------------------------\n\nTITLE: Changing Directories with cd Command\nDESCRIPTION: The cd (Change Directory) command is used to navigate through the filesystem. Example shows moving into the 'ebook' directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ebook\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Markdown\nDESCRIPTION: Shows how to create unordered and ordered lists in Markdown, including nested lists and task lists.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* Bullet list\n    * Nested bullet\n        * Sub-nested bullet etc\n* Bullet list item 2\n\n1. A numbered list\n    1. A nested numbered list\n    2. Which is numbered\n2. Which is numbered\n\n- [ ] An uncompleted task\n- [x] A completed task\n\n- [ ] An uncompleted task\n    - [ ] A subtask\n```\n\n----------------------------------------\n\nTITLE: Using the Original Git Command\nDESCRIPTION: This example demonstrates that the original 'checkout' command remains available even after creating an alias for it. Both the alias and the original command can be used interchangeably.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/027-git-alias.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b branch2\n```\n\n----------------------------------------\n\nTITLE: Printing Current Directory with pwd Command\nDESCRIPTION: The pwd (Print Working Directory) command shows the full path of the current directory location.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npwd\n```\n\n----------------------------------------\n\nTITLE: Creating Foldable Text in HTML\nDESCRIPTION: Demonstrates how to create foldable (expandable) text sections using HTML details and summary tags within Markdown.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<details>\n  <summary>Title 1</summary>\n  <p>Content 1 Content 1 Content 1 Content 1 Content 1</p>\n</details>\n<details>\n  <summary>Title 2</summary>\n  <p>Content 2 Content 2 Content 2 Content 2 Content 2</p>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Creating Headers in Markdown\nDESCRIPTION: Demonstrates how to create headers of different levels using Markdown syntax. It shows multiple ways to create headers, including using hash symbols and underline characters.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Heading 1 #\n\nHeading 1\n=============\n\n## Heading 2 ##\n\nHeading 2\n---------------\n\n### Heading 3 ###\n\n#### Heading 4 ####\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Markdown\nDESCRIPTION: Shows how to insert images in Markdown with alt text and optional title.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![picture alt](http://via.placeholder.com/200x150 \"Title is optional\")\n```\n\n----------------------------------------\n\nTITLE: Removing Files with rm Command\nDESCRIPTION: The rm command deletes files. This example shows deleting a README.md file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm README.md\n```\n\n----------------------------------------\n\nTITLE: Adding a Header Image to GitHub Profile\nDESCRIPTION: Markdown syntax for adding a header image to a GitHub profile README.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/997-create-your-github-profile.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Repository Banner](https://raw.githubusercontent.com/GITHUB-USERNAME/GITHUB-USERNAME/banner_photo.png)\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with mkdir Command\nDESCRIPTION: The mkdir command creates new directories. Examples show creating single and multiple directories.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir My_New_Directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir My_New_Directory My_Another_New_Directory\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Files with touch Command\nDESCRIPTION: The touch command creates new empty files or updates timestamps of existing files. Example shows creating a README.md file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/004-basic-shell-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch README.md\n```\n\n----------------------------------------\n\nTITLE: Adding Twitter Social Media Button to GitHub Profile\nDESCRIPTION: Markdown syntax for adding a Twitter social media button with a link to a GitHub profile README.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/997-create-your-github-profile.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/USER-NAME.svg?style=social&label=Twitter)](https://twitter.com/USER-NAME)\n```\n\n----------------------------------------\n\nTITLE: Creating Conflict Demo Branch\nDESCRIPTION: Commands to create a new branch and add content that will create a conflict\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/018-git-merge.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b conflictDemo\necho \"<p>Conflict Demo</p>\" >> feature1.html\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Commits\nDESCRIPTION: Commands for committing changes to the repository with messages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/998-git-commands-cheat-sheet.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Nice commit message here\"\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML in Markdown\nDESCRIPTION: Shows how to insert HTML code blocks within Markdown documents.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/ebook/en/content/030-github-markdown-cheatsheet.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<h3>HTML</h3>\n<p> Some HTML code here </p>\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Repository Badges in Markdown\nDESCRIPTION: This snippet shows how to use Markdown to display various GitHub repository badges, including stars, forks, contributors, and license information. It uses shield.io to generate the badge images.\nSOURCE: https://github.com/bobbyiliev/introduction-to-git-and-github-ebook/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<p align=\"center\">\n    <a name=\"stars\"><img src=\"https://img.shields.io/github/stars/bobbyiliev/introduction-to-git-and-github-ebook?style=for-the-badge\"></a>\n    <a name=\"forks\"><img src=\"https://img.shields.io/github/forks/bobbyiliev/introduction-to-git-and-github-ebook?logoColor=green&style=for-the-badge\"></a>\n    <a name=\"contributions\"><img src=\"https://img.shields.io/github/contributors/bobbyiliev/introduction-to-git-and-github-ebook?logoColor=green&style=for-the-badge\"></a>\n    <a name=\"madeWith\"><img src=\"https://img.shields.io/badge/Made%20with-Markdown-1f425f.svg?style=for-the-badge\"></a>\n    <a name=\"license\"><img src=\"https://img.shields.io/github/license/bobbyiliev/introduction-to-git-and-github-ebook?style=for-the-badge\"></a>\n</p>\n```"
  }
]