[
  {
    "owner": "discoveryjs",
    "repo": "jora",
    "content": "TITLE: Accessing Properties in Jora\nDESCRIPTION: Demonstrates how to access properties using bracket and dot notations in Jora. This example retrieves the title of the first post in an array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nposts[0].title\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays in Jora\nDESCRIPTION: Shows how to filter an array of users based on a condition. This example filters users who are older than 30 years.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/intro.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\nusers.[age > 30]\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Age by Occupation using Jora\nDESCRIPTION: This Jora query groups people by occupation, calculates the average age for each group, and sorts the results by average age in descending order. It demonstrates grouping, aggregation, and sorting operations in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\npeople\n  .group(=> occupation)\n  .({ \n    occupation: key,\n    averageAge: value.avg(=> age)\n  })\n  .sort(averageAge desc)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Query Factory with Jora Setup in JavaScript\nDESCRIPTION: Shows how to create a custom query factory using Jora's setup method. This approach allows for consistent application of custom settings across various queries, which is recommended for scenarios requiring custom methods or assertions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/api.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Create a query factory with common settings\nconst createQuery = jora.setup({ /* methods, assertions */ });\n\n// Create a query\nconst query = createQuery('foo.bar', { /* options as for jora() without \"methods\" and \"assertions\" */ });\n\n// Perform the query\nconst result = query(data, context);\n```\n\n----------------------------------------\n\nTITLE: Using Methods and Functions in Jora\nDESCRIPTION: Demonstrates the use of methods and functions in Jora. This example sorts users by name in ascending order and then groups them by name.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/intro.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\nusers.sort(name asc).group(=> name)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Executing Jora Query in JavaScript\nDESCRIPTION: Demonstrates how to import the Jora library, create a query with options, and execute it on data with a context. This snippet showcases the basic usage of Jora for query creation and execution.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/api.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Create a query\nconst query = jora('foo.bar', { /* ...options */ });\n\n// Perform the query\nconst result = query(data, context);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jora's Data Safety Features\nDESCRIPTION: Examples showing how Jora handles undefined properties safely and can generate output without input data, demonstrating its non-mutating nature.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njora('.foo.bar')({ a: 42 }) // undefined\njora('2 + 2')() // 4\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Jora Methods for Data Manipulation\nDESCRIPTION: Demonstrates the use of built-in Jora methods 'group()', 'sort()', and 'size()' for grouping data by name, creating an object with name and records, and sorting by record size in descending order.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\ngroup(=> name)\n    .({ name: key, records: value })\n    .sort(records.size() desc)\n```\n\n----------------------------------------\n\nTITLE: Basic Mapping Syntax in Jora\nDESCRIPTION: Shows the basic syntax for mapping in Jora using the .(expr) notation and the alternative map() method approach.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n.(expr)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jora Method Syntax\nDESCRIPTION: Shows the basic syntax for invoking methods in Jora. The expression before the method is passed as the first argument to the method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nexpr.method(...args)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Jora Methods in JavaScript\nDESCRIPTION: Shows how to enhance Jora queries by defining custom methods using the jora.setup() function. This example creates a custom method 'customMethod' that can be used in Jora queries.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Create a custom setup for queries\nconst queryWithCustomMethods = jora.setup({\n    methods: {\n        customMethod($) { /* implement custom logic here */ }\n    }\n});\n\n// Use the custom query factory\nqueryWithCustomMethods('foo.customMethod()')(data, context);\n```\n\n----------------------------------------\n\nTITLE: Mapping Property Values in Jora\nDESCRIPTION: Example of extracting property values from an array of objects using Jora's mapping functionality.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n    { \"baz\": 1 },\n    { \"baz\": 2 },\n    { \"baz\": 3 }\n];\n\n$input.(baz)\n// Result: [ 1, 2, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Jora Query Function\nDESCRIPTION: Example showing how the Jora factory function converts a query string into a function that can be executed on data.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\ntypeof jora('query') // \"function\"\n```\n\n----------------------------------------\n\nTITLE: Basic Jora Query API Example\nDESCRIPTION: Demonstrates the core API for creating and performing Jora queries, showing how to create a query object and execute it against data with an optional context.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// create a query\nconst query = jora('foo.bar');\n\n// perform a query\nconst result = query(data, context);\n```\n\n----------------------------------------\n\nTITLE: Basic Jora Function Syntax\nDESCRIPTION: Examples of different supported function declaration formats in Jora\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n=> expr\n```\n\nLANGUAGE: jora\nCODE:\n```\n$arg => expr\n```\n\nLANGUAGE: jora\nCODE:\n```\n() => expr\n```\n\nLANGUAGE: jora\nCODE:\n```\n($arg) => expr\n```\n\nLANGUAGE: jora\nCODE:\n```\n($arg1, $arg2) => expr\n```\n\n----------------------------------------\n\nTITLE: Variable Definitions in Filter Scope in Jora\nDESCRIPTION: Shows how to define and use variables within a filtering operation. Variables can be used to store intermediate values and simplify filtering conditions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3].[$num: $; $num % 2]\n// Result: [1, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in Jora\nDESCRIPTION: Demonstrates the basic syntax for defining variables in Jora. Variables can be defined with explicit values (using $ident: expression;) or with a shorthand syntax ($ident;) that assigns the property value with the same name.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n$foo: 123;          // Define `$foo` variable\n$bar;               // Shorthand for `$bar: bar;`\n$baz: $foo + $bar;  // Definitions may be used in following expressions\n```\n\n----------------------------------------\n\nTITLE: Using Math Methods in Jora\nDESCRIPTION: Examples of various mathematical operations using Math methods.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_26\n\nLANGUAGE: jora\nCODE:\n```\n-123 | abs()\n// Result: 123\n```\n\nLANGUAGE: jora\nCODE:\n```\n'hello world'.abs()\n// Result: NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n(-1).acos()\n// Result: 3.141592653589793\n```\n\nLANGUAGE: jora\nCODE:\n```\n1.acos()\n// Result: 0\n```\n\nLANGUAGE: jora\nCODE:\n```\n'hello world'.acos()\n// Result: NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n64.cbrt()\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n3.123.ceil()\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n2.exp()\n// Result: 7.38905609893065\n```\n\nLANGUAGE: jora\nCODE:\n```\n(-1).exp()\n// Result: 0.36787944117144233\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator in Jora\nDESCRIPTION: Demonstrates the pipeline operator for chaining expressions and simplifying queries\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n1.5 | floor() + ceil()\n// Result: 3\n```\n\nLANGUAGE: jora\nCODE:\n```\n(a + b).round()\n\n```\n\nLANGUAGE: jora\nCODE:\n```\na + b | round()\n```\n\nLANGUAGE: jora\nCODE:\n```\n{ foo: 1, bar: 2, baz: 3 }.(foo + bar + baz)\n// Result: 6\n```\n\nLANGUAGE: jora\nCODE:\n```\n{ foo: 1, bar: 2, baz: 3 } | foo + bar + baz\n// Result: 6\n```\n\nLANGUAGE: jora\nCODE:\n```\n{ a: 10, b: [2, 3, 4] } | $k: a; b.($ * $k)\n// Result: [20, 30, 40]\n```\n\n----------------------------------------\n\nTITLE: Combined Dot Notation with Filtering and Aggregation in Jora\nDESCRIPTION: Demonstrates combining dot notation with filtering and aggregation functions to perform complex queries on array data.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/dot-notation.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$items: [\n    { name: 'foo', value: 1 },\n    { name: 'bar', value: 2 },\n    { name: 'baz', value: 3 },\n    { name: 'foo', value: 4 }\n];\n\n$items.[name = 'foo'].value.sum()\n// Result: 5\n```\n\n----------------------------------------\n\nTITLE: Using reduce() Method in Jora\nDESCRIPTION: Demonstrates reduce() method usage for array reduction operations.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_18\n\nLANGUAGE: jora\nCODE:\n```\n[1, 5, 2, 3, 4].reduce(=>$ > $$ ? $ : $$)\n// Result: 5\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with match() in Jora\nDESCRIPTION: The match() method is similar to String#match() in JavaScript. It allows matching a string against a RegExp or string pattern, with options to return all matches. The method returns detailed information about each match.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_11\n\nLANGUAGE: jora\nCODE:\n```\n'abcabc'.match('bc')\n// Result: {\n//     matched: ['bc'],\n//     start: 1,\n//     end: 3,\n//     input: 'abcabc',\n//     groups: null,\n// }\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abcabc'.match('bc', true) // matchAll parameter is true\n// Result: [{\n//     matched: ['bc'],\n//     start: 1,\n//     end: 3,\n//     input: 'abcabc',\n//     groups: null,\n// }, {\n//     matched: ['bc'],\n//     start: 4,\n//     end: 6,\n//     input: 'abcabc',\n//     groups: null,\n// }]\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc123a45'.match(/a(bc)?(?<numbers>\\d+)/)\n// Result: {\n//     matched: ['abc123', 'bc', '123'],\n//     start: 0,\n//     end: 6,\n//     input: 'abc123a45',\n//     groups: { numbers: '123' },\n// }\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc123a45'.match(/a(bc)?(?<numbers>\\d+)/g) // the RegExp has 'g' flag\n// Result: [{\n//     matched: ['abc123', 'bc', '123'],\n//     start: 0,\n//     end: 6,\n//     input: 'abc123a45',\n//     groups: { numbers: '123' },\n// }, {\n//     matched: ['a45', undefined, '45'],\n//     start: 6,\n//     end: 9,\n//     input: 'abc123a45',\n//     groups: { numbers: '45' },\n// }]\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators in Jora\nDESCRIPTION: Demonstrates arithmetic operations including addition, subtraction, multiplication, division and modulo with both numbers and arrays\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n// Add numbers\n1 + 2 // 3\n\n// Add arrays\n[1, 2, 3] + [2, 3, 4] // [1, 2, 3, 4]\n\n// Subtract numbers\n10 - 5 // 5\n\n// Subtract arrays\n[1, 2, 3] - [2, 3] // [1]\n\n// Subtract from array\n[1, 2, 3] - 2 // [1, 3]\n\n// Multiply numbers\n2 * 3 // 6\n\n// Divide numbers\n10 / 2 // 5\n\n// Modulo\n7 % 3 // 1\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Jora\nDESCRIPTION: Demonstrates logical operators including OR, AND, NOT, nullish coalescing, IS, IN, and HAS operators\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n// Logical OR\ntrue or false   // true\n[] or false     // false\n[1, 2] or false // [1, 2]\n\n// Logical AND\ntrue and false  // false\ntrue and true   // true\n{} and \"ok\"     // {}\n\n// Logical NOT\nnot true // false\nno false // true\nnot []   // true\nnot [1]  // false\n\n// Nullish coalescing\nnull ?? 1      // 1\nundefined ?? 1 // 1\nfalse ?? 1     // false\n1234 ?? 1      // 1234\n\n// IS operator\n[] is array    // true\n[] is number   // false\n{} is (boolean or string) // false\n\n// IN operator\n1 in [1, 2, 3] // true\n4 in [1, 2, 3] // false\n\n// HAS operator\n[1, 2, 3] has 1 // true\n[1, 2, 3] has 4 // false\n\n// NOT IN operator\n1 not in [1, 2, 3] // false\n4 not in [1, 2, 3] // true\n\n// HAS NO operator\n[1, 2, 3] has no 1 // false\n[1, 2, 3] has no 4 // true\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array of Objects by Property Value in Jora\nDESCRIPTION: Example demonstrating how to filter an array of objects based on a property value, specifically keeping only books with a price less than or equal to 10.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n  { \"title\": \"Book 1\", \"price\": 5 },\n  { \"title\": \"Book 2\", \"price\": 15 },\n  { \"title\": \"Book 3\", \"price\": 7 },\n  { \"title\": \"Book 4\", \"price\": 12 }\n];\n\n$input.[price <= 10]\n// Result:\n// [\n//   { \"title\": \"Book 1\", \"price\": 5 },\n//   { \"title\": \"Book 3\", \"price\": 7 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Property Sorting Function in Jora\nDESCRIPTION: Illustrates how to create a sorting function that sorts by multiple properties in different orders, with a JavaScript equivalent provided.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\nfoo asc, bar desc // JS equivalent: (a, b) =>\n                  //       a.foo > b.foo ? 1 : a.foo < b.foo ? -1 :\n                  //       a.bar < b.bar ? 1 : a.bar > b.bar ? -1 :\n                  //       0\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Jora\nDESCRIPTION: Shows usage of comparison operators including equals, not equals, less than, greater than, and match operators\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n// Equals\n1 = 1 // true\n'a' = 'b' // false\n\n// Not equals\n1 != 2 // true\n'a' != 'a' // false\n\n// Less than\n1 < 2 // true\n2 < 1 // false\n\n// Less than or equal to\n1 <= 1 // true\n2 <= 1 // false\n\n// Greater than\n2 > 1 // true\n1 > 2 // false\n\n// Greater than or equal to\n2 >= 2 // true\n1 >= 2 // false\n\n// Match operator\n'hello' ~= /l+/ // true\n'world' ~= => size() > 3 // true\n'foo' ~= null // true\n'bar' ~= 123 // false\n```\n\n----------------------------------------\n\nTITLE: Basic Jora Filtering Syntax\nDESCRIPTION: The basic syntax for filtering arrays in Jora using the square bracket notation. This allows filtering elements based on a condition specified in the block.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n.[block]\n```\n\n----------------------------------------\n\nTITLE: Working with Variables in Jora\nDESCRIPTION: Shows how to use variables in Jora queries. This example assigns the oldest user to a variable and then retrieves their name.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/intro.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$oldestUser: users.max(age desc);\n$oldestUser.name\n```\n\n----------------------------------------\n\nTITLE: Basic Group Method Syntax in Jora\nDESCRIPTION: Demonstrates the basic syntax for the group() method which takes a keyFunction and optional valueFunction as parameters.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n.group(keyFunction[, valueFunction])\n```\n\n----------------------------------------\n\nTITLE: Mapping Arrays in Jora\nDESCRIPTION: Illustrates how to map an array of users to create a new array with full names. This example concatenates the first and last names of each user.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/intro.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\nusers.(name.first + ' ' + name.last)\n```\n\n----------------------------------------\n\nTITLE: Basic Object Literal Syntax in Jora\nDESCRIPTION: Demonstrates the basic syntax for creating object literals in Jora, which supports keys with or without quotation marks similar to JSON5 and JavaScript.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n{\n    \"name\": \"John Doe\",\n    'age': 30,\n    isActive: true\n}\n```\n\n----------------------------------------\n\nTITLE: Map Method Syntax in Jora\nDESCRIPTION: Demonstrates how to use the map() method in Jora with a function parameter for transformation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n.map(fn) // or .map(=> expr)\n```\n\n----------------------------------------\n\nTITLE: Jora Book Search Function\nDESCRIPTION: Complex example showing function usage with nested scopes and array filtering\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$books: [\n    { id: 1, title: \"To Kill a Mockingbird\", author: \"Harper Lee\" },\n    { id: 2, title: \"1984\", author: \"George Orwell\" },\n    { id: 3, title: \"The Great Gatsby\", author: \"F. Scott Fitzgerald\" }\n];\n$getBook: $id => $books[=> id = $id];\n3 | $getBook()\n```\n\n----------------------------------------\n\nTITLE: Grouping by Computed Property in Jora\nDESCRIPTION: Demonstrates grouping numbers into even and odd categories using a computed property.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> $ % 2 ? 'odd' : 'even')\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array of Numbers in Jora\nDESCRIPTION: Example showing how to filter an array of numbers to include only those greater than or equal to 3 using the square bracket notation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5].[$ >= 3]\n// Result: [3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Basic Property Access Using Dot Notation in Jora\nDESCRIPTION: Demonstrates simple property access using dot notation to retrieve a value from an object.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/dot-notation.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nperson.name // Accesses the `name` property of the `person` object\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator in Jora Array Literals\nDESCRIPTION: Shows how to use the spread operator (...) in array literals to include all elements of existing arrays. It demonstrates merging two arrays and using spread in a reduce() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$first: [1, 2, 3];\n$second: [4, 5, 6];\n\n[...$first, ...$second]\n// Result: [1, 2, 3, 4, 5, 6]\n```\n\nLANGUAGE: jora\nCODE:\n```\n$input: [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$input.reduce(=>$ % 2 ? [...$$, $] : $$, [])\n// Result: [1, 3, 5, 7, 9]\n```\n\n----------------------------------------\n\nTITLE: Complex Assertion Expressions in Jora\nDESCRIPTION: Illustrates how to create complex assertion expressions using logical operators and parentheses for grouping in Jora queries.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/assertions.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\nis not assertion\n```\n\nLANGUAGE: jora\nCODE:\n```\nis (assertion and assertion)\n```\n\nLANGUAGE: jora\nCODE:\n```\nis (assertion or not assertion)\n```\n\nLANGUAGE: jora\nCODE:\n```\nis not (assertion and assertion)\n```\n\nLANGUAGE: jora\nCODE:\n```\nis (assertion and (assertion or assertion))\n```\n\n----------------------------------------\n\nTITLE: Unique Value Generation with Jora Mapping\nDESCRIPTION: Demonstrates how Jora's mapping automatically returns unique values from arrays.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\n[ 1, 2, 2, 3, 3, 3 ].() // .() is equivalent to .($)\n// Result: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Basic Children Recursion in Jora\nDESCRIPTION: Example showing how to recursively extract all child objects from a nested structure.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n..children\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Methods and Assertions in Jora Queries\nDESCRIPTION: Illustrates two approaches for enhancing Jora queries with custom methods and assertions. The first method uses the setup() function to create a reusable query factory, while the second defines extensions ad hoc on a basic query factory call.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/api.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Create a custom setup for queries\nconst queryWithCustomMethods = jora.setup({\n    methods: {\n        customMethod($) { /* implement custom logic here */ }\n    },\n    assertions: {\n        odd: '$ % 2 = 1'\n    }\n});\n\n// Use the custom query factory\nqueryWithCustomMethods('foo.customMethod(is odd)')(data, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Define extensions on a query created for basic setup\nconst result = jora('foo.customMethod(is odd)', {\n    methods: {\n        customMethod($) { /* implement custom logic here */ }\n    },\n    assertions: {\n        odd: '$ % 2 = 1'\n    }\n})(data, context);\n```\n\n----------------------------------------\n\nTITLE: Using pick() Method in Jora\nDESCRIPTION: Examples of using pick() method to get values by key or index from arrays and objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_17\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].pick(2)\n// Result: 3\n```\n\nLANGUAGE: jora\nCODE:\n```\n{ foo: 1, bar: 2 }.pick('bar')\n// Result: 2\n```\n\n----------------------------------------\n\nTITLE: Query-level Assertion Example in Jora\nDESCRIPTION: Demonstrates how to use variables storing functions as assertions in Jora queries. This example defines an 'odd' assertion and applies it to an array of numbers.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/assertions.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$odd: => $ % 2;\n[1, 2, 3, 4, 5].({ num: $, odd: is $odd })\n// Result: [\n//     { \"num\": 1, \"odd\": true },\n//     { \"num\": 2, \"odd\": false },\n//     { \"num\": 3, \"odd\": true },\n//     { \"num\": 4, \"odd\": false },\n//     { \"num\": 5, \"odd\": true }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Sorting of Users in Jora\nDESCRIPTION: Demonstrates sorting users first by age in ascending order, then by name in descending order, including the expected result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\nsort(age asc, name desc)\n\n// Input[1]\n// Result: [\n//     { \"name\": \"Bob\", \"age\": 25 },\n//     { \"name\": \"Charlie\", \"age\": 30 },\n//     { \"name\": \"Alice\", \"age\": 30 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with filter() in Jora\nDESCRIPTION: The filter() method is equivalent to Array#filter() in JavaScript and the .[fn()] syntax in Jora. It returns a new array containing only elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].filter(=> $ % 2)\n// Result: [1, 3]\n```\n\nLANGUAGE: jora\nCODE:\n```\n$isOdd: => $ % 2;\n[1, 2, 3, 4].filter($isOdd)\n// Result: [1, 3]\n```\n\n----------------------------------------\n\nTITLE: Preserving User Data Across Nested Scopes in Jora\nDESCRIPTION: Shows how to preserve values from parent scopes by storing them in variables before entering nested scopes. In this example, user data is stored and then used when mapping posts.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\nuser.({\n    $username: name;\n    $email; // The same as `$email: email;`\n\n    ...,\n    signedPosts: posts.({\n        author: $username,\n        authorEmail: $email,\n        title\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Assertion Setup in JavaScript for Jora\nDESCRIPTION: Shows how to enhance Jora queries by defining custom assertions using JavaScript. This example sets up a query factory with a custom 'mine' assertion.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/assertions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\n// Setup query factory with custom assertions\nconst createQueryWithCustomAssertions = jora.setup({\n    assertions: {\n        mine($) {\n            /* test a value */\n        }\n    }\n});\n\n// Create a query\nconst queryWithMyAssertion = createQueryWithCustomAssertions('is mine');\n```\n\n----------------------------------------\n\nTITLE: Sorting Products by Price in Descending Order\nDESCRIPTION: Shows how to sort the products array by price in descending order using Jora's sort() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$products.sort(price desc)\n```\n\n----------------------------------------\n\nTITLE: Top-Level Scope Variable Definition in Jora\nDESCRIPTION: Shows how to define and use variables at the top level of a Jora query. Variables defined at this level are accessible throughout the entire query.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$foo: 'bar';\n$foo\n// Result: 'bar'\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Array Operations in Jora\nDESCRIPTION: Shows how to define variables and use them in array operations. Defines a numbers array and a multiplier, then uses the multiplier in a mapping operation to transform each element of the array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n$numbers: [1, 2, 3];\n$multiplier: 2;\n\n$numbers.($ * $multiplier) // Result: [2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Query Introspection with Jora's Stat Mode in JavaScript\nDESCRIPTION: Demonstrates how to use Jora's stat mode for query introspection. This mode allows for fetching values passed through a location in a query and obtaining suggestions for query completion. It's particularly useful when combined with the tolerant mode for handling incomplete queries.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/api.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\nconst query = jora('...query...', { stat: true });\nconst statApi = query(data);\n// { stat() { ... }, suggestion() { ... }, ... }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\nconst query = jora('.[foo=\"\"]', { stat: true });\nconst statApi = query([{ id: 1, foo: \"hello\" }, { id: 2, foo: \"world\" }]);\n\nstatApi.stat(3);\n// [\n//   {\n//     context: 'path',\n//     from: 2,\n//     to: 5,\n//     text: 'foo',\n//     values: Set(2) { [Object], [Object] },\n//     related: null\n//   }\n// ]\n\nstatApi.suggestion(3); // .[f|oo=\"\"]\n// [\n//   {\n//     type: 'property',\n//     from: 2,\n//     to: 5,\n//     text: 'foo',\n//     suggestions: [ 'id', 'foo' ]\n//   }\n// ]\n\nstatApi.suggestion(7); // .[foo=\"|\"]\n// [\n//   {\n//     type: 'value',\n//     from: 6,\n//     to: 8,\n//     text: '\"\"',\n//     suggestions: [ 'hello', 'world' ]\n//   }\n// ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\n\nconst query = jora('.[foo=]', {\n    stat: true,\n    tolerant: true // without the tolerant option a query compilation\n                   // will raise a parse error:\n                   // .[foo=]\n                   // ------^\n});\nconst statApi = query([{ id: 1, foo: \"hello\" }, { id: 2, foo: \"world\" }]);\n\nstatApi.suggestion(6); // .[foo=|]\n// [\n//   {\n//     type: 'value',\n//     from: 6,\n//     to: 6,\n//     text: '',\n//     suggestions: [ 'hello', 'world' ]\n//   },\n//   {\n//     type: 'property',\n//     from: 6,\n//     to: 6,\n//     text: '',\n//     suggestions: [ 'id', 'foo' ]\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Spread Operator with Named Objects in Jora\nDESCRIPTION: Shows how to use the spread operator to merge properties from multiple objects, with later properties overriding earlier ones with the same key.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n$foo: { a: 1, b: 2 };\n$bar: { b: 3, c: 4 };\n\n{\n    ...$foo,\n    ...$bar\n}\n\n// Result: {\n//     \"a\": 1,\n//     \"b\": 3,\n//     \"c\": 4\n// }\n```\n\n----------------------------------------\n\nTITLE: Grouping by Property in Jora\nDESCRIPTION: Shows how to group sales data by region property with two equivalent approaches using the group() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> region, => sales)\n```\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> region).({ key, value: value.(sales) })\n```\n\n----------------------------------------\n\nTITLE: Filtering Using the filter() Method in Jora\nDESCRIPTION: Alternative syntax for filtering arrays in Jora using the filter() method. The method accepts a function or expression that determines which elements to include in the result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n.filter(fn) // or .filter(=> expr)\n```\n\n----------------------------------------\n\nTITLE: Picking Object Properties with Jora Mapping\nDESCRIPTION: Shows how to select specific properties from objects in an array using Jora's mapping.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n    { \"foo\": \"bar\", \"baz\": 1 },\n    { \"foo\": \"bar\", \"baz\": 2 },\n    { \"foo\": \"bar\", \"baz\": 3 }\n];\n\n$input.({ baz })\n// Result:\n// [\n//     { \"baz\": 1 },\n//     { \"baz\": 2 },\n//     { \"baz\": 3 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator in Jora\nDESCRIPTION: Shows usage of ternary operator for conditional expressions with optional operands\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\ntrue ? 'yes' : 'no'  // Result: 'yes'\n```\n\nLANGUAGE: jora\nCODE:\n```\nfalse ? 'yes' : 'no' // Result: 'no'\n```\n\nLANGUAGE: jora\nCODE:\n```\n?: // Equivalents to `$ ? $ : undefined`\n```\n\nLANGUAGE: jora\nCODE:\n```\n['short', 'and a very long string'].(size() < 10 ?: `${slice(0, 10)}...`)\n// Result: [\"short\", \"and a very...\"]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ x: 5 }, { x: 33 }, { x: 20 }].count(=> x > 10 ?)\n// Result: 2\n```\n\nLANGUAGE: jora\nCODE:\n```\n[2, '2', 3, { foo: 4 }].sum(=> is number ? $ * $) // 2 * 2 + 3 * 3\n// Result: 13\n```\n\n----------------------------------------\n\nTITLE: Grouping by Tags List in Jora\nDESCRIPTION: Shows how to group products by multiple tags using the group() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> tags)\n```\n\n----------------------------------------\n\nTITLE: Computed Properties in Jora Object Literals\nDESCRIPTION: Shows how to use computed properties in Jora by wrapping key expressions in square brackets to create dynamic property names based on variables or expressions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n$prefix: 'city';\n\n{\n    [$prefix + 'Code']: \"NYC\"\n}\n// Result: { cityCode: \"NYC\" }\n```\n\n----------------------------------------\n\nTITLE: Analyzing npm dependencies with Jora to find multiple package versions\nDESCRIPTION: This script uses jora to analyze the output of 'npm ls --all --json' and identify paths to packages that have multiple versions in the dependency tree. It executes the npm command, parses the JSON output, applies a complex jora query, and prints the result as a tree.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport jora from 'jora';\nimport { exec } from 'child_process';\n\nfunction printTree() {\n    // see implementation in examples/npm-ls.js\n}\n\nexec('npm ls --all --json', (error, stdout) => {\n    if (error) {\n        return;\n    }\n\n    const npmTree = JSON.parse(stdout);\n    const depsPathsToMultipleVersionPackages = jora(`\n        $normalizedDeps: => dependencies.entries().({ name: key, ...value });\n        $multiVersionPackages:\n            ..$normalizedDeps()\n            .group(=>name, =>version)\n            .({ name: key, versions: value.sort() })\n            .[versions.size() > 1];\n\n        $pathToMultiVersionPackages: => .($name; {\n            name,\n            version,\n            otherVersions: $multiVersionPackages[=>name=$name].versions - version,\n            dependencies: $normalizedDeps()\n                .$pathToMultiVersionPackages()\n                .[name in $multiVersionPackages.name or dependencies]\n        });\n\n        $pathToMultiVersionPackages()\n    `)(npmTree);\n\n    printTree(depsPathsToMultipleVersionPackages);\n});\n```\n\n----------------------------------------\n\nTITLE: Jora Group Function Example\nDESCRIPTION: Example of using an inline function with the group method to group array elements by modulo 2\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].group(=> $ % 2)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mappers with Jora's map() Method\nDESCRIPTION: Shows how to use custom mapper functions with Jora's map() method, demonstrating its flexibility.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_15\n\nLANGUAGE: jora\nCODE:\n```\n$myMapper: => { value: $ * 2 };\n[1, 2, 3].map($myMapper)\n// Result: [{ value: 2 }, { value: 4 }, { value: 6 }]\n```\n\n----------------------------------------\n\nTITLE: Jora Sort with Comparator\nDESCRIPTION: Example of using a comparator function with the sort() method\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_11\n\nLANGUAGE: jora\nCODE:\n```\n$input: [{ foo: 3 }, { foo: 1 }, { foo: 5 }];\n$input.sort(foo desc)\n```\n\n----------------------------------------\n\nTITLE: Complex Grouping with Mapping in Jora\nDESCRIPTION: Illustrates using group() with mapping to calculate sales statistics per region including count and total.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> region)\n.({\n    region: key,\n    salesCount: value.size(),\n    totalSales: value.reduce(=> $$ + sales, 0)\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Function Usage with Bracket Notation in Jora\nDESCRIPTION: Illustrates a more complex use of functions with bracket notation in Jora. It searches for an object in $items where the key matches a regex and the price is greater than or equal to 20.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$items: {\n    item1: { id: 1, name: 'First Item', price: 10 },\n    item2: { id: 2, name: 'Second Item', price: 20 },\n    item3: { id: 3, name: 'Third Item', price: 30 }\n};\n\n$items[=> $$ ~= /^item/ and price >= 20]\n// Result: { id: 2, name: 'Second Item', price: 20 }\n```\n\n----------------------------------------\n\nTITLE: Special Behavior of + and - Operators with Arrays in Jora\nDESCRIPTION: Shows how the + operator can concatenate arrays and values, while the - operator can filter out values from an array when the left operand is an array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3] + 4 + [5, 6]\n// Result: [1, 2, 3, 4, 5, 6]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5] - 3 - [1, 5]\n// Result: [2, 4]\n```\n\n----------------------------------------\n\nTITLE: Jora Comparator Function Syntax\nDESCRIPTION: Basic syntax for ascending and descending comparator functions\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\nexpr asc\n```\n\nLANGUAGE: jora\nCODE:\n```\nexpr desc\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for Object Entries in Jora\nDESCRIPTION: Demonstrates the shorthand syntax for object properties in Jora, where property names can be inferred from variable names, method calls, or identifiers.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$city: \"New York\";\n\n{ hello: 'world' } | {\n    hello,\n    $city,\n    size()\n}\n// Result: { hello: 'world', city: 'New York', size: 1 }\n```\n\n----------------------------------------\n\nTITLE: Array Concatenation with Jora Mapping\nDESCRIPTION: Shows how arrays returned by mapping expressions are concatenated with the overall result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n    { \"values\": [1, 2, 3] },\n    { \"values\": [3, 4] }\n];\n\n$input.(values)\n// Result: [ 1, 2, 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Jora Array Reduction\nDESCRIPTION: Example of using reduce() method with a function to sum array elements\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].reduce(=> $$ + $, 0)\n```\n\n----------------------------------------\n\nTITLE: Preserving Parent Data for Child Relationships in Jora\nDESCRIPTION: Demonstrates a complex use case where parent data is preserved when mapping child relationships. The parent item is stored in a variable before processing its children, allowing parent data to be included in the child objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\n$items: [\n    { id: 1, children: [2, 3] },\n    { id: 2, children: [4, 5] },\n    { id: 3, children: [6, 7] }\n];\n\n$items.(\n    $item: $;\n\n    children.({\n        parent: $item.id,\n        child: $\n    })\n)\n\n// Result:\n// [\n//     { parent: 1, child: 2 },\n//     { parent: 1, child: 3 },\n//     { parent: 2, child: 4 },\n//     { parent: 2, child: 5 },\n//     { parent: 3, child: 6 },\n//     { parent: 3, child: 7 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Jora Function Variable Assignment\nDESCRIPTION: Example of storing a function in a variable and using it as a method\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$countOdd: => .[$ % 2].size();\n[1, 2, 3, 4].$countOdd()\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Syntax in Jora\nDESCRIPTION: Demonstrates the basic syntax for using assertions in Jora queries. It shows how to apply an assertion to an expression and how assertions can be used standalone.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/assertions.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nexpr is assertion\n```\n\nLANGUAGE: jora\nCODE:\n```\nis assertion\n```\n\n----------------------------------------\n\nTITLE: Variable Definitions in Grouping Operator Scope in Jora\nDESCRIPTION: Demonstrates how to define and use variables within a grouping operator. Variables defined within parentheses are only accessible within that grouping expression.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n($a: 5; $b: 10; $a + $b)\n// Result: 15\n```\n\n----------------------------------------\n\nTITLE: Ignoring Undefined Values in Simple Arrays with Jora\nDESCRIPTION: Demonstrates how Jora's mapping automatically ignores undefined values in arrays.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_11\n\nLANGUAGE: jora\nCODE:\n```\n[ 1, undefined, 3 ].($)\n// Result: [ 1, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Calculating Arithmetic Mean with avg() in Jora\nDESCRIPTION: The avg() method calculates the arithmetic mean of a collection of numbers. It can be used with a direct array of numbers or with a getter function to extract numeric values from objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].avg()\n// Result: 2.5\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{}, { a: 2 }, undefined, { a: 4 }].avg(=> a)\n// Result: 3\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax with Aggregation Methods in Jora\nDESCRIPTION: Demonstrates how shorthand syntax is particularly useful for applying multiple aggregation functions to the same array in a concise manner.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n[1, 3, 2] | { min(), max(), sum(), avg() }\n// Result: { min: 1, max: 3, sum: 6, avg: 2 }\n```\n\n----------------------------------------\n\nTITLE: Basic Recursive Mapping Syntax in Jora\nDESCRIPTION: Demonstrates the basic syntax for recursive mapping using the ..() operator.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n..(expr)\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Property with Bracket Notation in Jora\nDESCRIPTION: Demonstrates how to access an object property using bracket notation in Jora. This method is useful when the property name is stored in a variable or needs to be computed dynamically.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nperson['name'] // Accesses the `name` property of the `person` object\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining for Property Access in Jora\nDESCRIPTION: Demonstrates optional chaining functionality where accessing non-existent properties returns undefined instead of throwing an error.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/dot-notation.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\nperson.address.street // Accesses the `street` property of the `address` object,\n                      // returns `undefined` if `address` does not exist\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with max() in Jora\nDESCRIPTION: The max() method returns the maximum value from an array or string, excluding undefined values. It can use a comparator function to determine how values are compared, and is more efficient than sorting the entire collection.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_12\n\nLANGUAGE: jora\nCODE:\n```\n// Find the maximum number in an array\n[1, 4, 2, 3].max()\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the maximum object in an array based on a property\n$input: [{ a: 10 }, { a: 42 }, {}, { a: 42, ok: 1 }, { a: 20 }];\n$input.max(=> a)\n// Result: { a: 42, ok: 1 }\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the minimum object in an array based on a property\n$input: [{ a: 10 }, { a: 42 }, {}, { a: 20 }];\n$input.max(a desc)\n// Result: { a: 10 }\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the maximum character in a string\n'hello world'.max()\n// Result: 'w'\n```\n\n----------------------------------------\n\nTITLE: Sorting Products by Price in Ascending Order\nDESCRIPTION: Demonstrates how to sort the products array by price in ascending order using Jora's sort() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$products.sort(price asc)\n```\n\n----------------------------------------\n\nTITLE: Array Property Access Using Dot Notation in Jora\nDESCRIPTION: Shows how dot notation works with arrays to extract property values from objects within an array, returning unique values.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/dot-notation.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$fruits: [\n  { id: 1, name: 'apple' },\n  { id: 2, name: 'banana' },\n  { id: 3, name: 'cherry' },\n  { id: 4, name: 'apple' }\n];\n\n$fruits.name\n// Result: ['apple', 'banana', 'cherry']\n```\n\n----------------------------------------\n\nTITLE: Converting Entries to Object with fromEntries() in Jora\nDESCRIPTION: The fromEntries() method converts an array of key-value entries into an object. It's similar to Object.fromEntries() in JavaScript but expects an array of {key, value} objects instead of array tuples.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n[{ key: 'a', value: 42 }, { key: 'b', value: 123 }].fromEntries()\n// Result: { a: 42, b: 123 }\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value with median() in Jora\nDESCRIPTION: The median() method computes the median (the second quartile) of the values in an array. It's a shortcut for percentile(50) or p(50) and works with both even and odd-sized collections.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_13\n\nLANGUAGE: jora\nCODE:\n```\n[4, 2, 1, 3, 5].median()\n// Result: 3\n```\n\nLANGUAGE: jora\nCODE:\n```\n[4, 2, 1, 3, 6, 5].median()\n// Result: 3.5\n```\n\n----------------------------------------\n\nTITLE: Variable Definitions in Object Literal Scope in Jora\nDESCRIPTION: Shows how to define and use variables within an object literal. Variables defined here can be used to compute other property values within the same object.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n{\n$a: 3;\n$b: 4;\nc: $a * $b\n}\n// Result: { c: 12 }\n```\n\n----------------------------------------\n\nTITLE: Function Definitions in Jora\nDESCRIPTION: Examples of function definition syntax including regular and comparator functions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n=> expr\n```\n\nLANGUAGE: jora\nCODE:\n```\nname asc, age desc\n```\n\n----------------------------------------\n\nTITLE: Implicit Spread Operator with Current Value in Jora\nDESCRIPTION: Demonstrates the shorthand spread operator without an expression, which spreads the current value ($) into the new object, allowing for easy augmentation of objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n$users: [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' }\n];\n\n$users.({\n    ..., // The same as ...$\n    active: true\n})\n\n// Result: [\n//     { \"id\": 1, \"name\": \"Alice\", \"active\": true },\n//     { \"id\": 2, \"name\": \"Bob\", \"active\": true }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Performing Array Slicing in Jora\nDESCRIPTION: Shows how to use the slice() method and slice notation to extract a portion of an array in Jora. Both methods produce the same result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$numbers: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$numbers.slice(3, 7) // Or using slice notation: $numbers[3:7]\n// Result: [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Using replace() Method in Jora\nDESCRIPTION: Shows various uses of replace() method with strings and arrays, supporting patterns and replacements.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_19\n\nLANGUAGE: jora\nCODE:\n```\n'abc123def123xyz'.replace('123', '_')\n// Result: \"abc_def_xyz\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc123def45xyz'.replace(/[^\\d]/, '_')\n// Result: \"___123___45___\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'2023-07-14'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/, '$3-$2-$1')\n// Result: \"14-07-2023\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'a 123 ... b 45'.replace(\n    /([a-z]+)\\s+(?<numbers>\\d+)/,\n    => `[numbers: ${groups.numbers} for '${matched[1]}']`\n)\n// Result: \"[numbers: 123 for 'a'] ... [numbers: 45 for 'b']\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 3, 2, 1].replace(2, null)\n// Result: [1, null, 3, 3, null, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Boolean with bool() in Jora\nDESCRIPTION: The bool() method is similar to JavaScript's Boolean() but treats empty arrays and objects with no keys as falsy values. It evaluates the truthiness of various data types.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n123.bool()\n// Result: true\n```\n\nLANGUAGE: jora\nCODE:\n```\n\"\".bool()\n// Result: false\n```\n\nLANGUAGE: jora\nCODE:\n```\n[].bool()\n// Result: false\n```\n\nLANGUAGE: jora\nCODE:\n```\n[false].bool()\n// Result: true\n```\n\nLANGUAGE: jora\nCODE:\n```\n{}.bool()\n// Result: false\n```\n\nLANGUAGE: jora\nCODE:\n```\n{ a: 42 }.bool()\n// Result: true\n```\n\n----------------------------------------\n\nTITLE: Extracting Object Keys with keys() in Jora\nDESCRIPTION: The keys() method returns an array of an object's enumerable property names, equivalent to Object.keys() in JavaScript. It works with objects, arrays, and other types.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n{ foo: 1, bar: 2 }.keys()\n// Result: [\"foo\", \"bar\"]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[2, 3, 4].keys()\n// Result: [\"0\", \"1\", \"2\"]\n```\n\nLANGUAGE: jora\nCODE:\n```\n123.keys()\n// Result: []\n```\n\n----------------------------------------\n\nTITLE: Using Function with Bracket Notation in Jora\nDESCRIPTION: Demonstrates using a function with bracket notation to find an object in an array based on a condition. In this case, it finds the object with id equal to 2.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$items: [\n    { id: 1, name: 'Foo' },\n    { id: 2, name: 'Bar' },\n    { id: 3, name: 'Baz' }\n];\n\n$items[=> id = 2]\n// Result: { id: 2, name: 'Bar' }\n```\n\n----------------------------------------\n\nTITLE: Using reverse() Method in Jora\nDESCRIPTION: Shows how reverse() method works with arrays and other values.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_20\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 5, 3].reverse()\n// Result: [3, 5, 2, 1]\n```\n\nLANGUAGE: jora\nCODE:\n```\n'hello world'.reverse()\n// Result: 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Variable Definitions in Mapping Scope in Jora\nDESCRIPTION: Demonstrates how to define and use variables within a mapping operation. Variables defined within this scope are only accessible within the mapping operation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n{\na: 10,\nb: 20\n}.($a; $b; $a + $b)\n// Result: 30\n```\n\n----------------------------------------\n\nTITLE: Computed Property Access with Bracket Notation in Jora\nDESCRIPTION: Demonstrates how to use a variable to dynamically access an object property using bracket notation in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$prop: 'name';\nperson[$prop] // Accesses the `name` property of the `person` object\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with min() in Jora\nDESCRIPTION: The min() method returns the minimum value from an array or string. It uses natural comparison by default but can accept a comparator function to customize value comparison. It's more efficient than sorting the entire collection.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_14\n\nLANGUAGE: jora\nCODE:\n```\n// Find the minimum number in an array\n[4, 1, 2, 3].min()\n// Result: 1\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the minimum object in an array based on a property using a function\n$input: [{ a: 10 }, { a: 5, ok: 1 }, {}, { a: 5 }, { a: 20 }];\n$input.min(=> a)\n// Result: { a: 5, ok: 1 }\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the minimum object in an array based on a property using a compare function\n$input: [{ a: 10 }, { a: 42 }, {}, { a: 20 }];\n$input.min(a desc)\n// Result: { a: 42 }\n```\n\nLANGUAGE: jora\nCODE:\n```\n// Find the minimum character in a string\n'hello world'.min()\n// Result: ' '\n```\n\n----------------------------------------\n\nTITLE: Negative Indexing with Bracket Notation in Jora\nDESCRIPTION: Shows how to use negative indexing with bracket notation in Jora to access elements from the end of an array. In this example, it accesses the second-to-last element.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][-2]\n// Result: 4\n```\n\n----------------------------------------\n\nTITLE: Using String Methods in Jora\nDESCRIPTION: Shows usage of various string manipulation methods like toLowerCase(), toUpperCase(), and trim().\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_24\n\nLANGUAGE: jora\nCODE:\n```\n'Hello World!'.toLowerCase()\n// Result: \"hello world!\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'Hello World!'.toUpperCase()\n// Result: \"HELLO WORLD!\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'   something in the middle   '.trim()\n// Result: \"something in the middle\"\n```\n\n----------------------------------------\n\nTITLE: Nested Property Access in Jora\nDESCRIPTION: Shows how to access nested properties within objects using chained dot notation. Creates a person object with nested name properties and accesses the first name.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/dot-notation.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n$person: {\n  name: {\n    first: 'John',\n    last: 'Doe'\n  },\n  age: 30\n};\n\n$person.name.first\n// Result: 'John'\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with indexOf() in Jora\nDESCRIPTION: The indexOf() method returns the first index of the specified value, starting the search at fromIndex. Unlike JavaScript, it supports index searching for NaN values and works on arrays and strings.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 1, 2, 3].indexOf(2)\n// Result: 1\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 1, 2, 3].indexOf(2, 3)\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc abc'.indexOf('bc')\n// Result: 1\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, NaN, 2, NaN, 3].indexOf(NaN)\n// Result: 1\n```\n\n----------------------------------------\n\nTITLE: Counting Non-undefined Values with count() in Jora\nDESCRIPTION: The count() method calculates the number of non-undefined values in an array. It can use a getter function to extract and evaluate values from objects, and can be used to count values meeting specific conditions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3].count()\n// Result: 3\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, NaN, false, true, '123', { foo: 1 }, [5]].count()\n// Result: 7\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ age: 10 }, { age: 20 }, {}, { foo: 1 }].count(=> age)\n// Result: 2\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ a: 1, b: 3}, { a: 5, b: 4 }, { a: 3, b: 8 }].count(=> a < b or undefined)\n// Result: 2\n```\n\n----------------------------------------\n\nTITLE: Using entries() Method for Object Manipulation in Jora\nDESCRIPTION: Demonstrates the entries() method which converts an object into an array of {key, value} pairs, similar to Object.entries() in JavaScript.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\n{ a: 1, b: 2, c: 3 }.entries()\n\n// Result: [\n//     { \"key\": \"a\", \"value\": 1 },\n//     { \"key\": \"b\", \"value\": 2 },\n//     { \"key\": \"c\", \"value\": 3 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Variable Definitions in Pipeline Operator Scope in Jora\nDESCRIPTION: Demonstrates how to define and use variables with the pipeline operator. Variables defined after the pipeline can be used in subsequent operations.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3] | $size: size(); .($ * $size)\n// Result: [3, 6, 9]\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array of Objects Using Nested Properties in Jora\nDESCRIPTION: Example showing how to filter an array of objects based on a nested property value, keeping only objects where data.value is greater than 20.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n  { \"id\": 1, \"data\": { \"value\": 42 } },\n  { \"id\": 2, \"data\": { \"value\": 17 } },\n  { \"id\": 3, \"data\": { \"value\": 99 } }\n];\n\n$input.[data.value > 20]\n// Result:\n// [\n//   { \"id\": 1, \"data\": { \"value\": 42 } },\n//   { \"id\": 3, \"data\": { \"value\": 99 } }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using percentile() Method in Jora\nDESCRIPTION: Shows usage of the percentile() method for computing percentiles of array values with various inputs and custom getters.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_16\n\nLANGUAGE: jora\nCODE:\n```\n[4, 3, 5, 2, 1].percentile(75)\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n[4, 3, 5, 6, 2, 1].percentile(20)\n// Result: 2\n```\n\nLANGUAGE: jora\nCODE:\n```\n[4, 3, 1].percentile() // k is not specified\n// Result: undefined\n```\n\nLANGUAGE: jora\nCODE:\n```\n[4, 3, NaN, 1].percentile(50)\n// Result: NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ a: 1 }, { a: 3 }, undefined, { a: 2 }].percentile(75, => a)\n// Result: 2.5\n```\n\n----------------------------------------\n\nTITLE: Preserving Array Length in Jora Mapping\nDESCRIPTION: Demonstrates a workaround to maintain the same number of elements in the output array as in the input array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_14\n\nLANGUAGE: jora\nCODE:\n```\n[ 1, 2, 2, 3, 3, 3 ].({ value: $ })\n// Result:\n// [\n//   { \"value\": 1 },\n//   { \"value\": 2 },\n//   { \"value\": 2 },\n//   { \"value\": 3 },\n//   { \"value\": 3 },\n//   { \"value\": 3 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using Computed Values in Jora Array Literals\nDESCRIPTION: Demonstrates how to use expressions and variables within array literals to compute values dynamically. It uses a variable, arithmetic operations, and a ternary operator.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$n: 5;\n[1, 1 + 1, $n > 1 ? 3 : 42, $n - 1, $n]\n// Result: [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Transforming Array Elements with map() in Jora\nDESCRIPTION: The map() method creates a new array with the results of calling a provided function on every element in the array. It's equivalent to Array#map() in JavaScript and the .(fn()) syntax in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].map(=> $ * 2)\n// Result: [2, 4, 6, 8]\n```\n\nLANGUAGE: jora\nCODE:\n```\n$getA: => a;\n[{ a: 1 }, { a: 2 }, { a: 1 }].map($getA)\n// Result: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Using sum() Method in Jora\nDESCRIPTION: Demonstrates sum() method usage with various input types and custom getters.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_23\n\nLANGUAGE: jora\nCODE:\n```\n[].sum()\n// Result: undefined\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].sum()\n// Result: 10\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, undefined, null, '3', 4].sum()\n// Result: 10\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, NaN, 4].sum()\n// Result: NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n[0.1, 0.2, 0.3].sum()\n// Result: 0.6\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].sum(=> $ * $) // Sum of number squares\n// Result: 30\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ age: 10 }, {}, { age: 20 }, null, { age: 10 }].sum(=> age)\n// Result: 40\n```\n\nLANGUAGE: jora\nCODE:\n```\n[[1, 2], [], [4]].sum()\n// Result: NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n[[1, 2], [], null, [4], undefined].sum(=> sum())\n// Result: 7\n```\n\n----------------------------------------\n\nTITLE: Including Jora in Browser Applications\nDESCRIPTION: Various ways to include the Jora library in browser applications, using script tags, ES modules, or CDN sources.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"node_modules/jora/dist/jora.js\"></script>\n<script type=\"module\">\n  import jora from 'node_modules/jora/dist/jora.esm.js';\n</script>\n\n<!-- or use one of CDN -->\n<script src=\"https://cdn.jsdelivr.net/npm/jora/dist/jora.js\"></script>\n<script type=\"module\">\n  import jora from 'https://cdn.jsdelivr.net/npm/jora';\n</script>\n\n<script src=\"https://unpkg.com/jora/dist/jora.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Jora Spread Operator Behavior with Non-Array Values\nDESCRIPTION: Demonstrates how the spread operator in Jora behaves differently from JavaScript when dealing with non-array values. It inlines arrays but leaves other values as is.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n[...[1, 2], ...3, ...\"45\", ...{ \"6\": 7 }]\n// Result: [1, 2, 3, \"45\", { \"6\": 7 }]\n```\n\n----------------------------------------\n\nTITLE: Using ln1p() Function in Jora\nDESCRIPTION: The ln1p() function returns the natural logarithm (log_e or ln) of 1 + x for the number x. This function is more accurate for small values of x than calculating ln(1 + x) directly.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_34\n\nLANGUAGE: jora\nCODE:\n```\n1.ln1p()\n// Result: 0.6931471805599453\n```\n\n----------------------------------------\n\nTITLE: Converting Groups to Object with fromEntries in Jora\nDESCRIPTION: Shows how to convert grouped results into an object structure using fromEntries() method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/group.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n.group(=> region)\n.fromEntries()\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator with Recursive Mapping in Jora\nDESCRIPTION: Demonstrates using the pipeline operator with recursive mapping to access properties.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n$ + ..children | name\n```\n\n----------------------------------------\n\nTITLE: Jora Special Variables Example\nDESCRIPTION: Demonstration of special variables $ and $$ usage in functions\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$example: => [$, $$];\n1.$example(2)\n```\n\n----------------------------------------\n\nTITLE: Filtering an Array of Numbers Using filter() Method in Jora\nDESCRIPTION: Alternative example using the filter() method to filter an array of numbers to include only those greater than or equal to 3.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5].filter(=> $ >= 3)\n// Result: [3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Array Literal in Jora\nDESCRIPTION: Demonstrates the basic syntax for creating an array literal in Jora, which is similar to JavaScript. It shows how to create an array of numbers using square brackets.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Filtered Recursive Mapping in Jora\nDESCRIPTION: Shows how to filter results after recursive mapping is complete.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n$ + ..children | .[type = \"file\"].name\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of Product Grouping Jora Query\nDESCRIPTION: A JavaScript function that implements the same product grouping logic as the Jora query, identifying popular tags and grouping products based on how many popular tags they match.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getProductsSortedByPopularTags(data) {\n    const popularTags = data.products\n        .flatMap(product => product.tags)\n        .reduce((acc, tag) => {\n            acc[tag] = (acc[tag] || 0) + 1;\n            return acc;\n        }, {})\n        .entries()\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5)\n        .map(entry => entry[0]);\n\n    const productsWithPopularTagsCount = data.products.map(product => {\n        const popularTagsMatchCount = product.tags.filter(tag => popularTags.includes(tag)).length;\n        return {\n            ...product,\n            popularTagsMatchCount\n        };\n    });\n\n    const sortedProducts = productsWithPopularTagsCount.sort((a, b) => {\n        if (b.popularTagsMatchCount !== a.popularTagsMatchCount) {\n            return b.popularTagsMatchCount - a.popularTagsMatchCount;\n        }\n\n        if (a.category !== b.category) {\n            return a.category.localeCompare(b.category);\n        }\n\n        return a.price - b.price;\n    });\n\n    const groupedProducts = sortedProducts.reduce((acc, product) => {\n        if (!acc[product.popularTagsMatchCount]) {\n            acc[product.popularTagsMatchCount] = [];\n        }\n\n        acc[product.popularTagsMatchCount].push({\n            name: product.name,\n            category: product.category,\n            price: product.price\n        });\n\n        return acc;\n    }, {});\n\n    return Object.entries(groupedProducts).map(([popularTagsCount, products]) => ({\n        popularTagsCount: Number(popularTagsCount),\n        products\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Variable as Filter Function in Jora\nDESCRIPTION: Example demonstrating how to use a variable to store a filter function and then apply it using the filter() method, which allows for greater flexibility and reusability.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/filter.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n$myFilter: => data.value > 20;\n.filter($myFilter)\n```\n\n----------------------------------------\n\nTITLE: Using fromEntries() Method for Object Construction in Jora\nDESCRIPTION: Shows the fromEntries() method which is the inverse of entries(), converting an array of {key, value} pairs into an object, similar to Object.fromEntries() in JavaScript.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\n[\n    { key: \"a\", value: 1 },\n    { key: \"b\", value: 2 },\n    { key: \"c\", value: 3 }\n].fromEntries()\n\n// Result: {\n//     \"a\": 1,\n//     \"b\": 2,\n//     \"c\": 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Number Literals in Jora\nDESCRIPTION: Examples of various number literal formats including integers, floats, exponential, and hexadecimal numbers in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n42         // integer number\n```\n\nLANGUAGE: jora\nCODE:\n```\n4.22       // float number\n```\n\nLANGUAGE: jora\nCODE:\n```\n1e3        // exponential number\n```\n\nLANGUAGE: jora\nCODE:\n```\n1e-2       // exponential number\n```\n\nLANGUAGE: jora\nCODE:\n```\n0xdecaf    // hexadecimal number\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in Jora\nDESCRIPTION: Demonstrates two methods of concatenating arrays in Jora: using the spread operator (...) and the + operator. Both methods produce the same result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$first: [1, 2, 3];\n$second: [4, 5, 6];\n\n[...$first, ...$second] // Or: $first + $second\n// Result: [1, 2, 3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Using size() Method in Jora\nDESCRIPTION: Demonstrates size() method usage with different types of values.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_21\n\nLANGUAGE: jora\nCODE:\n```\n{ a: 42, b: 123 }.size()\n// Result: 2\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4].size()\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n\"Hello world\".size()\n// Result: 11\n```\n\nLANGUAGE: jora\nCODE:\n```\n123.size()\n// Result: 0\n```\n\n----------------------------------------\n\nTITLE: Basic Array Slicing in Jora\nDESCRIPTION: Extracts elements from an array using slice notation with start and end indices. This example takes elements from index 1 (inclusive) to index 4 (exclusive).\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][1:4]\n// Result: [2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comments in Jora\nDESCRIPTION: Shows both single-line and multi-line comment syntax in Jora query language.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/syntax-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// single-line comment\n/* multi-line\ncomment */\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Step Parameter in Jora\nDESCRIPTION: Extracts elements from an array with a specified step size, skipping elements. This example takes every second element from the array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][::2]\n// Result: [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Mapping Primitive Values in Jora\nDESCRIPTION: Example of applying mapping to a primitive value like a number in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n123.({ foo: $ })\n// Result: { \"foo\": 123 }\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Negative Indices in Jora\nDESCRIPTION: Extracts elements from an array using negative indices, which count from the end of the array. This example takes the last two elements of the array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][-2:]\n// Result: [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Using pow() Function in Jora\nDESCRIPTION: The pow() function returns base x to the exponent power y (x^y). It can be used for both integer and fractional exponents, allowing calculations like square roots through fractional powers.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_36\n\nLANGUAGE: jora\nCODE:\n```\n2.pow(3)\n// Result: 8\n```\n\nLANGUAGE: jora\nCODE:\n```\n25.pow(0.5)\n// Result: 5\n```\n\n----------------------------------------\n\nTITLE: Alternative Mapping Syntax Examples in Jora\nDESCRIPTION: Shows alternative ways to extract property values from an array of objects in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$input.map(=> baz)\n```\n\nLANGUAGE: jora\nCODE:\n```\n$input.baz\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Array Elements with Bracket Notation in Jora\nDESCRIPTION: Shows how to access elements in a nested array using multiple bracket notations in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n$matrix: [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$matrix[1][2]\n// Result: 6\n```\n\n----------------------------------------\n\nTITLE: Book Listing with Filtered and Ranked Tags using Jora\nDESCRIPTION: This complex Jora query processes a data object containing books, authors, tags, and reviews. It returns a list of books matching a specified tag filter, including the book title, author name, tags, and the top review. The query demonstrates complex data relationships, filtering, and sorting in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$authors;\n$tags;\n$reviews;\n\nbooks\n  .({ \n    $bookId: id;\n    $authorId;\n    $author: $authors[=> id = $authorId];\n    $tagIds;\n\n    title,\n    author: $author.name,\n    tags: $tags.[id in $tagIds].name,\n    topReview: $reviews\n      .[bookId = $bookId]\n      .min(rating desc, date desc)\n      | { \n        rating,\n        text: `${text[0:150]}...`\n      }\n  })\n  .[tags has #.tagFilter]\n  .sort(topReview.rating desc, title asc)\n```\n\n----------------------------------------\n\nTITLE: Creating Array Copy with Slice Notation in Jora\nDESCRIPTION: Creates a copy of an array using slice notation with all bounds omitted. This notation requires at least one colon to distinguish it from bracket notation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n['a', 'b', 'c', 'd'][:] // an alternative is to use [...array]\n// Result: ['a', 'b', 'c', 'd']\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element with Bracket Notation in Jora\nDESCRIPTION: Shows how to access an array element using bracket notation in Jora. This example accesses the first element of the 'items' array using index 0.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\nitems[0] // Accesses the first element of the `items` array\n```\n\n----------------------------------------\n\nTITLE: Object Copying with Spread and Computing Properties in Jora\nDESCRIPTION: Demonstrates how to copy an object using spread syntax while adding computed properties in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n{ \"foo\": 41 }.({ ..., answer: foo + 1 })\n// Result: { \"foo\": 41, \"answer\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Grouping Operator in Jora\nDESCRIPTION: Examples of using parentheses for grouping operations and variable declarations\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n(1 + 2) * (3 + 4)\n// Result: 21\n```\n\nLANGUAGE: jora\nCODE:\n```\n($a: 1; $a + $a)\n// Result: 2\n```\n\n----------------------------------------\n\nTITLE: String Slicing with Step Parameter in Jora\nDESCRIPTION: Extracts characters from a string with a specified step size, skipping characters. This example takes every second character from the string.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[::2]\n// Result: \"hlo\"\n```\n\n----------------------------------------\n\nTITLE: Using Jora with unpkg CDN\nDESCRIPTION: Shows how to include Jora using the unpkg CDN, with examples for both ESM and IIFE versions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- ESM -->\n<script type=\"module\">\nimport jora from 'https://unpkg.com/jora';\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- IIFE with an export `jora` to global -->\n<script src=\"https://unpkg.com/jora/dist/jora.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Recursive Mapping with Input Values in Jora\nDESCRIPTION: Demonstrates including input values in recursive mapping results using concatenation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$ + ..children\n```\n\n----------------------------------------\n\nTITLE: Object Literals in Jora\nDESCRIPTION: Example of object literal syntax following JavaScript conventions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n{ foo: 123, bar: true }\n```\n\n----------------------------------------\n\nTITLE: Advanced Shorthand Syntax with Expressions in Jora\nDESCRIPTION: Shows how shorthand syntax can be used with expressions, where 'name expr' is transformed into 'name: name | expr' using pipeline operators.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n{\n    foo.[x > 5],        // equivalent to: `foo: foo | .[x > 5]`\n    bar size() * 2,     // equivalent to: `bar: bar | size() * 2`\n    baz is number ?: 0, // equivalent to: `baz: baz | is number ?: 0`\n    $var.size(),        // equivalent to: `var: var | .size()`\n    sort() reverse()    // equivalent to: `sort: sort() | reverse()`\n}\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Explicit Negative Step in Jora\nDESCRIPTION: Extracts elements from an array in reverse order using an explicit negative step. This example takes elements from index 4 to index 1 in reverse.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_12\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][1:4:-1] // the same as [4:1]\n// Result: [4, 3, 2]\n```\n\n----------------------------------------\n\nTITLE: Recursive Mapping with Name Property Access in Jora\nDESCRIPTION: Shows how to combine recursive mapping with property access using parentheses.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n($ + ..children).name\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Literals in Jora\nDESCRIPTION: Examples of regular expression literals with and without flags.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n/regexp/\n```\n\nLANGUAGE: jora\nCODE:\n```\n/regexp/mi\n```\n\n----------------------------------------\n\nTITLE: String Literals in Jora\nDESCRIPTION: Examples of string literals using different quote types and template strings.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n\"string\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n'string'\n```\n\nLANGUAGE: jora\nCODE:\n```\n`template string ${hello} ${world}`\n```\n\nLANGUAGE: jora\nCODE:\n```\n\"\\u2013 This is \\\"a very long\\\" string which needs \\\nto wrap across multiple lines because \\\notherwise, my code is unreadable\\x21\"\n```\n\n----------------------------------------\n\nTITLE: String Slicing with Explicit Negative Step in Jora\nDESCRIPTION: Extracts characters from a string in reverse order using an explicit negative step. This example takes characters from index 4 to index 1 in reverse.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_14\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[1:4:-1]\n// Result: \"lle\"\n```\n\n----------------------------------------\n\nTITLE: Using stdev() Method in Jora\nDESCRIPTION: Shows usage of stdev() method for calculating standard deviation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_22\n\nLANGUAGE: jora\nCODE:\n```\n[2, 4, 6, 4].stdev()\n// Result: 1.4142135623730951\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ a: 2 }, {}, undefined, { a: 4 }].stdev(=> a)\n// Result: 1\n```\n\n----------------------------------------\n\nTITLE: Alternative Object Copying with Map Method in Jora\nDESCRIPTION: Shows an alternative approach to copy an object and add computed properties using the map method.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n{ \"foo\": 41 }.map(=> { ..., answer: foo + 1 })\n// Result: { \"foo\": 41, \"answer\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Negative Numbers in Jora\nDESCRIPTION: Examples of negative number notation using unary minus operator in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n-123       // negative number, the same result as -(123)\n```\n\nLANGUAGE: jora\nCODE:\n```\n-0xC0FFEE  // hexadecimal negative number\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties with Jora Mapping\nDESCRIPTION: Demonstrates how to rename object properties during mapping in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n    { \"a\": 1 },\n    { \"a\": 2 },\n    { \"a\": 3 }\n];\n\n$input.({ answer: a })\n// Result:\n// [\n//     { \"answer\": 1 },\n//     { \"answer\": 2 },\n//     { \"answer\": 3 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Function Parameters in Jora with Special Variables\nDESCRIPTION: Demonstrates how to use the special variables $ and $$ as function parameters. $ represents the first parameter passed to the function, and $$ represents the second parameter.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n$fn: => { a: $, b: $$ };\n\n'hello'.$fn('world') // result: { a: 'hello', b: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Jora Context Function Usage\nDESCRIPTION: Example of using functions from context or data\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n$functionFromContext: #.someFunction;\nsomeValue.$functionFromContext()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Data Structure for Product Grouping Example\nDESCRIPTION: TypeScript types defining the data structure for the products used in the example, including product properties like id, name, category, price, and tags.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype InputData = {\n    products: Product[];\n};\n\ntype Product = {\n    id: number;\n    name: string;\n    category: string;\n    price: number;\n    tags: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Using fround() Function in Jora\nDESCRIPTION: The fround() function returns the nearest 32-bit single precision float representation of a number, which may result in a slight loss of precision compared to the original number.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_29\n\nLANGUAGE: jora\nCODE:\n```\n5.5.fround()\n// Result: 5.5\n```\n\nLANGUAGE: jora\nCODE:\n```\n5.05.fround()\n// Result: 5.050000190734863\n```\n\n----------------------------------------\n\nTITLE: Unary Operators in Jora\nDESCRIPTION: Examples of unary plus and negation operators for type conversion and number negation\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/operators.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n+123   // 123\n+'42'  // 42\n+'foo' // NaN\n```\n\nLANGUAGE: jora\nCODE:\n```\n-123   // -123\n-'42'  // -42\n-'foo' // NaN\n```\n\n----------------------------------------\n\nTITLE: Array Identity Comparison after Slicing in Jora\nDESCRIPTION: Demonstrates that slicing creates a new array by comparing the original array with its slice copy. The comparison returns false because they are different objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n$value: ['a', 'b', 'c', 'd'];\n$value[:] = $value\n// Result: false\n```\n\n----------------------------------------\n\nTITLE: Equivalent Longhand Syntax for Object Entries in Jora\nDESCRIPTION: Shows the equivalent longhand syntax for object properties in Jora, explicitly stating both the property name and value.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$city: \"New York\";\n\n{ hello: 'world' } | {\n    hello: hello,\n    city: $city,\n    size: size()\n}\n// Result: { hello: 'world', city: 'New York', size: 1 }\n```\n\n----------------------------------------\n\nTITLE: Grouping Products by Popular Tag Count in Jora\nDESCRIPTION: A Jora query that first identifies the top 5 popular tags across all products, then groups products by how many of these popular tags they match, sorting them in descending order of matches.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_5\n\nLANGUAGE: jora\nCODE:\n```\n$popularTags: products\n  .group(=> tags)\n  .sort(value.size() desc)\n  .key[0:5];\n\nproducts\n  .({\n    ...,\n    popularTagsMatchCount: tags.[$ in $popularTags].size()\n  })\n  .sort(popularTagsMatchCount desc, category asc, price asc)\n  .group(=> popularTagsMatchCount)\n  .({\n    popularTagsCount: key,\n    products: value.({ name, category, price })\n  })\n```\n\n----------------------------------------\n\nTITLE: Using sign() Function in Jora\nDESCRIPTION: The sign() function returns 1, -1, or 0, indicating the sign of the number passed as argument. This can be used to determine if a number is positive, negative, or zero without checking its exact value.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_38\n\nLANGUAGE: jora\nCODE:\n```\n5.sign()\n// Result: 1\n```\n\nLANGUAGE: jora\nCODE:\n```\n-42 | sign()\n// Result: -1\n```\n\nLANGUAGE: jora\nCODE:\n```\n0.sign()\n// Result: 0\n```\n\n----------------------------------------\n\nTITLE: Numeric Separator Usage in Jora\nDESCRIPTION: Examples of using underscore as a numeric separator in various number formats.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_2\n\nLANGUAGE: jora\nCODE:\n```\n1_000\n```\n\nLANGUAGE: jora\nCODE:\n```\n1_345.678_901\n```\n\nLANGUAGE: jora\nCODE:\n```\n0x12_34_56_78\n```\n\n----------------------------------------\n\nTITLE: Using Jora with jsDelivr CDN\nDESCRIPTION: Demonstrates how to include Jora using the jsDelivr CDN, with examples for both ESM and IIFE versions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- ESM -->\n<script type=\"module\">\nimport jora from 'https://cdn.jsdelivr.net/npm/jora';\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- IIFE with an export `jora` to global -->\n<script src=\"https://cdn.jsdelivr.net/npm/jora/dist/jora.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Equivalent JavaScript Function for Book Listing\nDESCRIPTION: This JavaScript function replicates the functionality of the complex Jora query for book listing. It processes the input data, filters books by tag, maps the required information, and sorts the results based on review ratings and book titles.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction getMappedBooks(inputData, tagFilter) {\n    const { books, authors, tags, reviews } = inputData;\n    \n    const filteredBooks = books\n        .map(book => {\n            const author = authors.find(author => author.id === book.authorId);\n            const bookTags = tags.filter(tag => book.tagIds.includes(tag.id));\n            \n            const bookReviews = reviews.filter(review => review.bookId === book.id);\n            const sortedReviews = bookReviews.sort((a, b) => {\n                const ratingDiff = b.rating - a.rating;\n                if (ratingDiff !== 0) {\n                    return ratingDiff;\n                }\n                return new Date(b.date) - new Date(a.date);\n            });\n            const topReview = sortedReviews[0] && {\n                rating: sortedReviews[0].rating,\n                text: `${sortedReviews[0].text.slice(0, 150)}...`\n            };\n            \n            return {\n                title: book.title,\n                author: author.name,\n                tags: bookTags.map(tag => tag.name),\n                topReview: topReview\n            };\n        })\n        .filter(mappedBook => tagFilter.some(tag => mappedBook.tags.includes(tag)))\n        .sort((a, b) => {\n            const ratingDiff = b.topReview.rating - a.topReview.rating;\n            if (ratingDiff !== 0) {\n                return ratingDiff;\n            }\n            return a.title.localeCompare(b.title);\n        });\n    \n    return filteredBooks;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: Basic markdown structure introducing the Jora documentation and playground, including a link to the Discovery.js framework and the live playground URL.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Jora docs & playground\n\nJora documentation and playground powered by [Discovery.js](https://github.com/discoveryjs/discovery)\n\n[https://discoveryjs.github.io/jora](https://discoveryjs.github.io/jora/)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Input Data for Product Grouping\nDESCRIPTION: Sample JSON data representing a collection of products with various attributes including tags, used as input for the Jora query example.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"name\": \"Product A\",\n      \"category\": \"Electronics\",\n      \"price\": 200,\n      \"tags\": [\"trending\", \"smart\", \"wireless\"]\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Product B\",\n      \"category\": \"Electronics\",\n      \"price\": 150,\n      \"tags\": [\"smart\", \"wireless\"]\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Product C\",\n      \"category\": \"Clothing\",\n      \"price\": 50,\n      \"tags\": [\"trending\", \"fashion\"]\n    },\n    {\n      \"id\": 4,\n      \"name\": \"Product D\",\n      \"category\": \"Clothing\",\n      \"price\": 80,\n      \"tags\": [\"fashion\", \"casual\"]\n    },\n    {\n      \"id\": 5,\n      \"name\": \"Product E\",\n      \"category\": \"Electronics\",\n      \"price\": 100,\n      \"tags\": [\"trending\", \"smart\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Slicing in Jora\nDESCRIPTION: Extracts a substring using slice notation with start and end indices. This example takes characters from index 1 (inclusive) to index 4 (exclusive).\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[1:4]\n// Result: \"ell\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jora via NPM\nDESCRIPTION: Command to install the Jora package using NPM.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jora\n```\n\n----------------------------------------\n\nTITLE: Installing Jora via npm\nDESCRIPTION: Command to install the Jora library using npm package manager.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install jora\n```\n\n----------------------------------------\n\nTITLE: String Slicing with Default Start Index in Jora\nDESCRIPTION: Extracts characters from the beginning of a string up to a specified end index. This example takes characters from index 0 to index 3 (exclusive).\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[:3]\n// Result: \"hel\"\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Jora\nDESCRIPTION: Shows how to write single-line and multi-line comments in Jora queries.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// single-line comment\n/* multi-line\ncomment */\n```\n\n----------------------------------------\n\nTITLE: Basic Jora Usage in JavaScript\nDESCRIPTION: Shows how to import and use Jora in JavaScript environments, including both ESM and CommonJS patterns.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport jora from 'jora';\n\n// CommonJS\nconst jora = require('jora');\n```\n\n----------------------------------------\n\nTITLE: Using numbers() Method in Jora\nDESCRIPTION: Demonstrates the numbers() method that converts array values to numbers, ignoring undefined values and handling special cases.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_15\n\nLANGUAGE: jora\nCODE:\n```\n[1, NaN, false, true, '123', { foo: 1 }, [5]].numbers()\n// Result: [1, NaN, 0, 1, 123, NaN, NaN]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, NaN, false, true, '123'].numbers()\n// Result: [1, 2, NaN, 0, 1, 123]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ age: 10 }, {}, { age: 20 }, null, { age: 10 }].numbers(=> age)\n// Result: [10, 20, 10]\n```\n\n----------------------------------------\n\nTITLE: Property Getter Syntax in Jora\nDESCRIPTION: Shows simplified syntax for recursive mapping when accessing a single property.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n..property\n```\n\n----------------------------------------\n\nTITLE: String Slicing with Implicit Negative Step in Jora\nDESCRIPTION: Extracts characters in reverse order by specifying a start index greater than the end index, implicitly setting a negative step. This example takes characters from index 4 to index 1 in reverse.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_11\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[4:1] // the same as [1:4:-1] (see \"Negative Step\" below)\n// Result: \"lle\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jora Object Entry Shorthand Syntax\nDESCRIPTION: Examples showing the new shorthand syntax for defining object entries in Jora, including method calls, filtering, conditional expressions, and variable references.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\n{\n    sum(),              // equavalent to: `sum: sum()`\n    foo.[x > 5],        // equavalent to: `foo: foo | .[x > 5]`\n    baz is number ?: 0, // equavalent to: `baz: baz | is number ?: 0`\n    $var.size()         // equavalent to: `var: var | .size()`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Descending Sorting Function in Jora\nDESCRIPTION: Shows the syntax for creating a descending sorting function in Jora, with a JavaScript equivalent provided for comparison.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\nexpr desc // JS equivalent: (a, b) => expr(a) < expr(b) ? 1 : expr(a) > expr(b) ? -1 : 0\n```\n\n----------------------------------------\n\nTITLE: Using variance() Method in Jora\nDESCRIPTION: Demonstrates variance() method for calculating population variance.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_25\n\nLANGUAGE: jora\nCODE:\n```\n[2, 4, 6, 4].variance()\n// Result: 2\n```\n\nLANGUAGE: jora\nCODE:\n```\n[{ a: 2 }, {}, undefined, { a: 4 }].variance(=> a)\n// Result: 1\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Negative Step and Skip in Jora\nDESCRIPTION: Extracts elements from an array in reverse order with a step size of -2, skipping every other element. This example takes elements from index 6 to index 1 in reverse, skipping every other element.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_13\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5, 6, 7, 8][6:1:-2] // the same as [1:6:2]\n// Result: [2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Executing Jora Queries on Data\nDESCRIPTION: Example showing how to execute a compiled Jora query function against input data to produce a result.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njora('query')(data) // query result\n```\n\n----------------------------------------\n\nTITLE: Accessing String Characters with Bracket Notation in Jora\nDESCRIPTION: Demonstrates how to access individual characters in a string using bracket notation in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n$text: 'Jora';\n$text[2]\n// Result: 'r'\n```\n\n----------------------------------------\n\nTITLE: Using hypot() Function in Jora\nDESCRIPTION: The hypot() function calculates the square root of the sum of squares of its arguments, which is equivalent to finding the hypotenuse of a right triangle. Note: There's a FIXME indicating it should take an array of numbers.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_30\n\nLANGUAGE: jora\nCODE:\n```\n[3].hypot(4, 5)\n// Result: 7.0710678118654755\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Default Start Index in Jora\nDESCRIPTION: Extracts elements from the beginning of an array up to a specified end index. This example takes elements from index 0 to index 3 (exclusive).\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][:3]\n// Result: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using imul() Function in Jora\nDESCRIPTION: The imul() function performs C-like 32-bit integer multiplication of two parameters. This is useful for certain bitwise operations as it handles integer overflow differently than standard multiplication.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_31\n\nLANGUAGE: jora\nCODE:\n```\n3.imul(4)\n// Result: 12\n```\n\nLANGUAGE: jora\nCODE:\n```\n0xffffffff.imul(5)\n// Result: -5\n```\n\n----------------------------------------\n\nTITLE: Ignoring Undefined Values in Object Arrays with Jora\nDESCRIPTION: Shows how Jora's mapping handles undefined values when accessing properties of objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_12\n\nLANGUAGE: jora\nCODE:\n```\n[ { \"a\": 1 }, { }, { \"a\": 3 } ].(a)\n// Result: [ 1, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Jora Arguments with Special Variables\nDESCRIPTION: Example showing how explicit arguments work alongside special variables $ and $$\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n$example: ($a, $b) => [$a, $, $b, $$];\n1.$example(2)\n```\n\n----------------------------------------\n\nTITLE: Using ln() Function in Jora\nDESCRIPTION: The ln() function returns the natural logarithm (log_e or ln) of a number. This example shows how logarithms can be used to convert between different powers.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_32\n\nLANGUAGE: jora\nCODE:\n```\n// 2^3 = 8\n8.ln() / 2.ln()\n// Result: 3\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element Index with lastIndexOf() in Jora\nDESCRIPTION: The lastIndexOf() method returns the last index of the specified value, starting the search from the end. Unlike JavaScript, it supports index searching for NaN values and works on arrays and strings.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 1, 2, 3].lastIndexOf(2)\n// Result: 4\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 1, 2, 3].lastIndexOf(2, 3)\n// Result: 1\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc abc'.lastIndexOf('bc')\n// Result: 5\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, NaN, 2, NaN, 3].lastIndexOf(NaN)\n// Result: 3\n```\n\n----------------------------------------\n\nTITLE: Jora Complex Comparator\nDESCRIPTION: Example of a complex comparator function with multiple conditions\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_10\n\nLANGUAGE: jora\nCODE:\n```\nfoo asc, bar.size() desc\n```\n\n----------------------------------------\n\nTITLE: Calculating Skill Percentage by Occupation using Jora\nDESCRIPTION: This Jora query calculates the percentage of people in each occupation who have a specific skill. It demonstrates group operations, conditional counting, and percentage calculations in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\npeople\n  .group(=> occupation)\n  .({ \n    $skillCount: value.count(=> skills has #.skill?);\n    $totalCount: value.size();\n\n    occupation: key,\n    skill: #.skill,\n    $skillCount,\n    $totalCount,\n    skillPercentage: $skillCount / $totalCount * 100\n  })\n  .sort(skillPercentage desc)\n```\n\n----------------------------------------\n\nTITLE: Using log10() Function in Jora\nDESCRIPTION: The log10() function returns the base-10 logarithm of a number (log_10(x)). This is useful for calculating orders of magnitude or for converting between exponential and decimal representations.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_33\n\nLANGUAGE: jora\nCODE:\n```\n2.log10()\n// Result: 0.3010299956639812\n```\n\n----------------------------------------\n\nTITLE: Array Slicing with Implicit Negative Step in Jora\nDESCRIPTION: Extracts elements in reverse order by specifying a start index greater than the end index, implicitly setting a negative step. This example takes elements from index 4 to index 1 in reverse.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_4\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3, 4, 5][4:1] // the same as [1:4:-1] (see \"Negative Step\" below)\n// Result: [4, 3, 2]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Undefined Values in Nested Object Arrays with Jora\nDESCRIPTION: Example of how Jora handles undefined values when accessing nested properties of objects.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/map.md#2025-04-18_snippet_13\n\nLANGUAGE: jora\nCODE:\n```\n$input: [\n    { \"a\": { \"nested\": 1 } },\n    { },\n    { \"a\": 3 }\n];\n\n$input.(a.nested)\n// Result: [ 1 ]\n```\n\n----------------------------------------\n\nTITLE: Using log2() Function in Jora\nDESCRIPTION: The log2() function returns the base-2 logarithm of a number (log_2(x)). This is particularly useful in computing contexts for calculating bit requirements or for operations related to binary data.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_35\n\nLANGUAGE: jora\nCODE:\n```\n2.log2()\n// Result: 1\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Key-Value Entries with entries() in Jora\nDESCRIPTION: The entries() method is similar to JavaScript's Object.entries() but returns an array of {key, value} objects instead of array tuples. It works on objects, arrays, and strings.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n{ a: 42, b: 123 }.entries()\n// Result: [{ key: 'a', value: 42 }, { key: 'b', value: 123 }]\n```\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2].entries()\n// Result: [{ key: '0', value: 1 }, { key: '1', value: 2 }]\n```\n\nLANGUAGE: jora\nCODE:\n```\n'abc'.entries()\n// Result: [{ key: '0', value: 'a' }, { key: '1', value: 'b' }, { key: '2', value: 'c' }]\n```\n\nLANGUAGE: jora\nCODE:\n```\n123.entries()\n// Result: []\n```\n\n----------------------------------------\n\nTITLE: Using round() Function in Jora\nDESCRIPTION: The round() function returns the value of a number rounded to the nearest integer. If the fractional part is exactly 0.5, the result is rounded up to the next integer (away from zero).\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_37\n\nLANGUAGE: jora\nCODE:\n```\n5.2.round()\n// Result: 5\n```\n\nLANGUAGE: jora\nCODE:\n```\n5.5.round()\n// Result: 6\n```\n\nLANGUAGE: jora\nCODE:\n```\n5.9.round()\n// Result: 6\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Arrays in Jora\nDESCRIPTION: Shows how to create multidimensional arrays by nesting array literals within each other. This example creates a 3x3 matrix represented as a 2-dimensional array.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/array-literal.md#2025-04-18_snippet_1\n\nLANGUAGE: jora\nCODE:\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n----------------------------------------\n\nTITLE: Using floor() Function in Jora\nDESCRIPTION: The floor() function returns the largest integer less than or equal to a given number, effectively rounding down to the nearest integer.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_28\n\nLANGUAGE: jora\nCODE:\n```\n3.123.floor()\n// Result: 3\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements with join() in Jora\nDESCRIPTION: The join() method concatenates all elements of an array into a string, separated by the specified separator. When no separator is specified, a comma is used by default.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_7\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3].join()\n// Result: \"1,2,3\"\n```\n\nLANGUAGE: jora\nCODE:\n```\n[undefined, null, 123, NaN, \"str\", [2, 3], {}].join(' / ')\n// Result: \" /  / 123 / NaN / str / 2,3 / [object Object]\"\n```\n\n----------------------------------------\n\nTITLE: Using sqrt() Function in Jora\nDESCRIPTION: The sqrt() function returns the positive square root of a number. This is a fundamental mathematical operation used in many geometric and statistical calculations.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_39\n\nLANGUAGE: jora\nCODE:\n```\n25.sqrt()\n// Result: 5\n```\n\n----------------------------------------\n\nTITLE: String Slicing with Negative Indices in Jora\nDESCRIPTION: Extracts characters from a string using negative indices, which count from the end of the string. This example takes the last two characters of the string.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/slice-notation.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\n\"hello\"[-2:]\n// Result: \"lo\"\n```\n\n----------------------------------------\n\nTITLE: Array Literals in Jora\nDESCRIPTION: Example of array literal syntax following JavaScript conventions.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/literals.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n[1, 'foo', { prop: 123 }]\n```\n\n----------------------------------------\n\nTITLE: Using expm1() Function in Jora\nDESCRIPTION: The expm1() function returns the result of subtracting 1 from exp(x), which is equivalent to e^x - 1. This function is more precise for small values of x than calculating exp(x) - 1 directly.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_27\n\nLANGUAGE: jora\nCODE:\n```\n2.expm1()\n// Result: 6.38905609893065\n```\n\nLANGUAGE: jora\nCODE:\n```\n(-1).expm1()\n// Result: -0.6321205588285577\n```\n\n----------------------------------------\n\nTITLE: Importing Jora in JavaScript Modules\nDESCRIPTION: Examples of importing the Jora library in both ESM and CommonJS module systems.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/discovery/text/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport jora from 'jora';\n\n// CommonJS\nconst jora = require('jora');\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax with Scalar Operators in Jora\nDESCRIPTION: Demonstrates how unary plus and minus operators in shorthand syntax produce scalars that discard the base value.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/object-literal.md#2025-04-18_snippet_6\n\nLANGUAGE: jora\nCODE:\n```\n[1, 2, 3] | {\n    size() + 10  // equivalent to: `size: size() | +10`\n} \n// Result: { size: 10 }\n```\n\n----------------------------------------\n\nTITLE: Using trunc() Function in Jora\nDESCRIPTION: The trunc() function returns the integer part of a number by removing any fractional digits. Unlike floor(), it simply removes the decimal part regardless of whether the number is positive or negative.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/methods-builtin.md#2025-04-18_snippet_40\n\nLANGUAGE: jora\nCODE:\n```\n42.84.trunc()\n// Result: 42\n```\n\nLANGUAGE: jora\nCODE:\n```\n-123.9 | trunc()\n// Result: -123\n```\n\n----------------------------------------\n\nTITLE: Using Jora in Browser with IIFE\nDESCRIPTION: Demonstrates how to include and use Jora in a browser using the IIFE bundle, which creates a global 'jora' variable.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"node_modules/jora/dist/jora.js\"></script>\n<script>\n  jora('query')(data, context);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Infinite Loop Example in Jora\nDESCRIPTION: Demonstrates an example that leads to infinite recursion, showing what to avoid.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n{ example: 1 }..({ example: 1 })\n```\n\n----------------------------------------\n\nTITLE: Finding Array Element with Multiple Criteria using Bracket Notation in Jora\nDESCRIPTION: Illustrates how to use bracket notation with a function to find the first element in an array that meets multiple criteria in Jora.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/bracket-notation.md#2025-04-18_snippet_8\n\nLANGUAGE: jora\nCODE:\n```\n$items: [\n    { category: 'A', value: 5 },\n    { category: 'B', value: 10 },\n    { category: 'A', value: 15 },\n    { category: 'C', value: 20 },\n    { category: 'A', value: 25 }\n];\n\n$items[=> category = 'A' and value >= 20]\n// Result: { category: 'A', value: 25 }\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Product Data in Jora\nDESCRIPTION: Creates a sample array of product objects to be used in sorting examples.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_3\n\nLANGUAGE: jora\nCODE:\n```\n$products: [\n    { name: \"Laptop\", price: 1000 },\n    { name: \"Smartphone\", price: 800 },\n    { name: \"Tablet\", price: 600 }\n];\n```\n\n----------------------------------------\n\nTITLE: Using Jora in Browser with ES Modules\nDESCRIPTION: Shows how to import and use Jora in a browser using the ES modules bundle.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import jora from 'node_modules/jora/dist/jora.esm.js'\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output from Product Grouping Query\nDESCRIPTION: The expected JSON output from the Jora query, showing products grouped by the number of popular tags they match, with groups sorted in descending order.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"popularTagsCount\": 3,\n    \"products\": [\n      {\n        \"name\": \"Product A\",\n        \"category\": \"Electronics\",\n        \"price\": 200\n      }\n    ]\n  },\n  {\n    \"popularTagsCount\": 2,\n    \"products\": [\n      {\n        \"name\": \"Product B\",\n        \"category\": \"Electronics\",\n        \"price\": 150\n      },\n      {\n        \"name\": \"Product E\",\n        \"category\": \"Electronics\",\n        \"price\": 100\n      },\n      {\n        \"name\": \"Product C\",\n        \"category\": \"Clothing\",\n        \"price\": 50\n      }\n    ]\n  },\n  {\n    \"popularTagsCount\": 1,\n    \"products\": [\n      {\n        \"name\": \"Product D\",\n        \"category\": \"Clothing\",\n        \"price\": 80\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Sample User Data in JSON\nDESCRIPTION: Provides a JSON array of user objects to be used in multi-property sorting examples.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"name\": \"Alice\", \"age\": 30 },\n    { \"name\": \"Bob\", \"age\": 25 },\n    { \"name\": \"Charlie\", \"age\": 30 }\n]\n```\n\n----------------------------------------\n\nTITLE: Controlled Recursion with Conditional in Jora\nDESCRIPTION: Shows how to control recursive mapping using conditionals to generate a sequence.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_9\n\nLANGUAGE: jora\nCODE:\n```\n1..($ < 5 ? $ + 1 : [])\n```\n\n----------------------------------------\n\nTITLE: Example output from npm dependency analysis with Jora\nDESCRIPTION: This shows the tree-like output format generated by the jora query. It displays packages with multiple versions in the dependency tree, highlighting the current version of each package and listing other available versions in square brackets.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\njora@1.0.0\n├─ c8@7.11.0\n│  ├─ istanbul-lib-report@3.0.0\n│  │  └─ supports-color@7.2.0 [more versions: 8.1.1]\n│  ├─ test-exclude@6.0.0\n│  │  └─ minimatch@3.1.2 [more versions: 3.0.4]\n│  ├─ v8-to-istanbul@8.1.1\n│  │  └─ convert-source-map@1.8.0\n│  │     └─ safe-buffer@5.1.2 [more versions: 5.2.1]\n│  ├─ yargs-parser@20.2.9 [more versions: 20.2.4]\n│  └─ yargs@16.2.0\n│     └─ yargs-parser@20.2.9 [more versions: 20.2.4]\n├─ eslint@8.10.0\n│  ├─ @eslint/eslintrc@1.2.0\n│  │  ├─ ignore@4.0.6 [more versions: 5.2.0]\n│  │  └─ minimatch@3.1.2 [more versions: 3.0.4]\n...\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example JSON\nDESCRIPTION: Sample JSON data structure representing a nested directory hierarchy used in examples.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/recursive-map.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"root\",\n  \"type\": \"directory\",\n  \"children\": [\n    {\n      \"name\": \"folder1\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"file1.txt\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"file2.txt\",\n          \"type\": \"file\"\n        }\n      ]\n    },\n    {\n      \"name\": \"folder2\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"file3.txt\",\n          \"type\": \"file\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Reduction Equivalent\nDESCRIPTION: JavaScript equivalent of the Jora array reduction example\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/functions.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n[1, 2, 3, 4].reduce(($$, $) => $$ + $, 0)\n```\n\n----------------------------------------\n\nTITLE: Jora Array Operation Example\nDESCRIPTION: Example showing array manipulation with negative indices and step values.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n$ar:[1,2,3,4,5,6]; $ar[-3::-1]\n```\n\n----------------------------------------\n\nTITLE: Jora Object Definition Example\nDESCRIPTION: Sample Jora query demonstrating object literal syntax with definitions and value references.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ $a: 42; foo: $a * 2, $a }\n```\n\n----------------------------------------\n\nTITLE: Defining Ascending Sorting Function in Jora\nDESCRIPTION: Demonstrates the syntax for creating an ascending sorting function in Jora, with a JavaScript equivalent provided for comparison.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/articles/sort.md#2025-04-18_snippet_0\n\nLANGUAGE: jora\nCODE:\n```\nexpr asc  // JS equivalent: (a, b) => expr(a) > expr(b) ? 1 : expr(a) < expr(b) ? -1 : 0\n```\n\n----------------------------------------\n\nTITLE: Jora String Pattern Examples\nDESCRIPTION: Examples of string pattern handling in Jora including slice notation and string manipulation.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n$str: '<foo>'; str[1:-1]\n```\n\n----------------------------------------\n\nTITLE: Equivalent jq Query for Book Listing\nDESCRIPTION: This jq query replicates the functionality of the complex Jora query for book listing. It processes the input data, maps the required information, filters books by tag, and sorts the results based on review ratings and book titles.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_4\n\nLANGUAGE: jq\nCODE:\n```\n.books\n| map({\n    title: .title,\n    author: (.authorId as $aid | .authors[] | select(.id == $aid).name),\n    tags: (.tagIds | map(. as $tid | .tags[] | select(.id == $tid).name)),\n    topReview: (\n        .id as $bid\n        | .reviews\n        | map(select(.bookId == $bid))\n        | sort_by(-.rating, .date)\n        | .[0]\n        | {\n            rating: .rating,\n            text: (.text | .[0:150] + \"...\")\n        }\n    )\n})\n| map(select(.tags | any(. as $t | .[] == $t)))\n| sort_by(.topReview.rating, .title)\n```\n\n----------------------------------------\n\nTITLE: jq Equivalent of Product Grouping Jora Query\nDESCRIPTION: A jq script that implements the same product grouping logic as the Jora query, with functions for identifying popular tags and counting matches.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/docs/complex-examples.md#2025-04-18_snippet_10\n\nLANGUAGE: jq\nCODE:\n```\ndef popular_tags:\n  group_by(.tags[]) | map({tag: .[0].tags[], count: length}) | sort_by(-.count) | .[0:5] | map(.tag);\n\ndef product_info: { name, category, price };\n\ndef popular_tags_match_count(tags, popularTags): length(tags | map(select(. as $tag | popularTags | index($tag) != null)));\n\ndef sorted_products(popularTags):\n  map({ product: ., popularTagsMatchCount: (popular_tags_match_count(.tags, popularTags)) }) | sort_by(-.popularTagsMatchCount, .product.category, .product.price);\n\n{\n  popularTags: (popular_tags),\n  groupedProducts: (sorted_products(popular_tags))\n    | group_by(.popularTagsMatchCount)\n    | map({ popularTagsCount: .[0].popularTagsMatchCount, products: [.[] | .product | product_info] })\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Suggestion API Response\nDESCRIPTION: TypeScript interface defining the structure of suggestion API method response. Shows the format for suggestion results grouped by type including properties, values and variables.\nSOURCE: https://github.com/discoveryjs/jora/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsuggestion(): Array<{\n    type: 'property' | 'value' | 'variable',\n    from: number,\n    to: number,\n    text: string,\n    suggestions: Array<string | number>\n}> | null\n```"
  }
]