[
  {
    "owner": "kiminewt",
    "repo": "pyshark",
    "content": "TITLE: Capturing Packets from a Live Interface using pyshark (Python)\nDESCRIPTION: Illustrates live packet capture from a specified network interface (e.g., 'eth0') using pyshark's `LiveCapture`. It shows initializing capture on an interface, sniffing for a limited time (`sniff(timeout=50)`), viewing the capture object, accessing individual packets by index, and iterating over packets as they arrive using `sniff_continuously()`. Requires pyshark and appropriate system permissions to capture network traffic.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> capture = pyshark.LiveCapture(interface='eth0')\n>>> capture.sniff(timeout=50)\n>>> capture\n<LiveCapture (5 packets)>\n>>> capture[3]\n<UDP/HTTP Packet>\n\nfor packet in capture.sniff_continuously(packet_count=5):\n    print('Just arrived:', packet)\n```\n\n----------------------------------------\n\nTITLE: Reading Packets from a Capture File using pyshark (Python)\nDESCRIPTION: Demonstrates how to read and parse packets from a saved capture file (e.g., .cap, .pcapng) using pyshark's `FileCapture`. It shows importing the library, opening the file using its path, displaying the capture object (which shows the file path and packet count), and accessing/printing the details of the first packet (index 0). Requires the pyshark library and a valid capture file.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyshark\n>>> cap = pyshark.FileCapture('/tmp/mycapture.cap')\n>>> cap\n<FileCapture /tmp/mycapture.cap (589 packets)>\n>>> print cap[0]\nPacket (Length: 698)\nLayer ETH:\n        Destination: BLANKED\n        Source: BLANKED\n        Type: IP (0x0800)\nLayer IP:\n        Version: 4\n        Header Length: 20 bytes\n        Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))\n        Total Length: 684\n        Identification: 0x254f (9551)\n        Flags: 0x00\n        Fragment offset: 0\n        Time to live: 1\n        Protocol: UDP (17)\n        Header checksum: 0xe148 [correct]\n        Source: BLANKED\n        Destination: BLANKED\n  ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Packet Layer Data in pyshark (Python)\nDESCRIPTION: Illustrates different ways to access specific fields within packet layers using a captured pyshark packet object. Demonstrates accessing fields by layer name using dictionary-style access (`packet['layer'].field`) or attribute-style access (`packet.layer.field`), and also by layer index (`packet[index].field`). Requires a previously captured pyshark packet object.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> packet['ip'].dst\n192.168.0.1\n>>> packet.ip.src\n192.168.0.100\n>>> packet[2].src\n192.168.0.100\n```\n\n----------------------------------------\n\nTITLE: Capturing Packets with a Ring Buffer using pyshark (Python)\nDESCRIPTION: Demonstrates live packet capture using a ring buffer via pyshark's `LiveRingCapture`. This method limits the capture file size by overwriting older packets based on configured size and number of files. It shows initiating capture on an interface, sniffing for a duration, accessing packets, and iterating using `sniff_continuously()`, similar to `LiveCapture`. This approach is useful for continuous monitoring without consuming excessive disk space.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> capture = pyshark.LiveRingCapture(interface='eth0')\n>>> capture.sniff(timeout=50)\n>>> capture\n<LiveCapture (5 packets)>\n>>> capture[3]\n<UDP/HTTP Packet>\n\nfor packet in capture.sniff_continuously(packet_count=5):\n    print('Just arrived:', packet)\n```\n\n----------------------------------------\n\nTITLE: Applying Display Filters During Capture using pyshark (Python)\nDESCRIPTION: Demonstrates applying Wireshark-style display filters when capturing or reading packets using pyshark. It shows initializing `FileCapture` and `LiveCapture` with a `display_filter` parameter to process only packets matching the filter (e.g., 'dns', 'tcp.analysis.retransmission'). This offers more granular, application-level filtering than BPF filters.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> cap1 = pyshark.FileCapture('/tmp/capture1.cap', display_filter=\"dns\")\n>>> cap2 = pyshark.LiveCapture(interface='en0', display_filter=\"tcp.analysis.retransmission\")\n```\n\n----------------------------------------\n\nTITLE: Applying Decryption During Packet Capture using pyshark (Python)\nDESCRIPTION: Illustrates how to decrypt encrypted traffic (WEP, WPA-PWD, WPA-PSK) during packet analysis using pyshark. It shows initializing `FileCapture` for offline files and `LiveCapture` for live traffic, providing the necessary `decryption_key` and optionally the `encryption_type` (e.g., 'wpa-psk', defaults to 'wpa-pwd'). Requires the correct key and specified type matching the captured traffic.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> cap1 = pyshark.FileCapture('/tmp/capture1.cap', decryption_key='password')\n>>> cap2 = pyshark.LiveCapture(interface='wi0', decryption_key='password', encryption_type='wpa-psk')\n```\n\n----------------------------------------\n\nTITLE: Accessing Packet Field Attributes in pyshark (Python)\nDESCRIPTION: Demonstrates accessing extended attributes of a specific packet field (e.g., `p.ip.addr`) using pyshark. It shows how to retrieve the field's human-readable name and value (`showname`), its integer representation (`int_value`), and its raw binary value (`binary_value`). Requires a pyshark packet object (`p`) with the relevant layer and field.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> p.ip.addr.showname\nSource or Destination Address: 10.0.0.10 (10.0.0.10)\n# And some new attributes as well:\n>>> p.ip.addr.int_value\n167772170\n>>> p.ip.addr.binary_value\nb'\\n\\x00\\x00\\n'\n```\n\n----------------------------------------\n\nTITLE: Capturing Packets from a Remote Interface using pyshark (Python)\nDESCRIPTION: Shows how to capture packets from an interface on a remote machine using pyshark's `RemoteCapture`. Requires the remote host's IP address or hostname and the target interface name (e.g., 'eth0'). The remote host must be running the rpcapd service on the specified port (default or custom). The example initiates the capture and sniffs for 50 seconds.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> capture = pyshark.RemoteCapture('192.168.1.101', 'eth0')\n>>> capture.sniff(timeout=50)\n>>> capture\n```\n\n----------------------------------------\n\nTITLE: Checking for Layer Existence in a Packet using pyshark (Python)\nDESCRIPTION: Shows how to check if a specific protocol layer (e.g., 'IP') exists within a captured pyshark packet object using the `in` operator with the layer name as a string. Returns `True` if the layer is present, `False` otherwise.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> 'IP' in packet\nTrue\n```\n\n----------------------------------------\n\nTITLE: Checking Supported Encryption Standards in pyshark (Python)\nDESCRIPTION: Shows how to access the tuple of supported encryption standards (`SUPPORTED_ENCRYPTION_STANDARDS`) which is available as a class attribute within pyshark's capture classes (`FileCapture`, `LiveCapture`). This allows programmatic checking of available decryption types ('wep', 'wpa-pwd', 'wpa-psk').\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> pyshark.FileCapture.SUPPORTED_ENCRYPTION_STANDARDS\n('wep', 'wpa-pwd', 'wpa-psk')\n>>> pyshark.LiveCapture.SUPPORTED_ENCRYPTION_STANDARDS\n('wep', 'wpa-pwd', 'wpa-psk')\n```\n\n----------------------------------------\n\nTITLE: Parsing network packets using pyshark in Python\nDESCRIPTION: This code demonstrates how to parse network packets with pyshark, extracting protocol details and packet data. It expects a pcap file as input and outputs parsed packet information in Python objects.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/src/README.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncapture = pyshark.FileCapture('capture.pcap')\n\nfor packet in capture:\n    print(packet.highest_layer)\n    print(packet.ip.src, 'â†’', packet.ip.dst)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing pyshark wrapper for packet parsing in Python\nDESCRIPTION: This snippet shows how to initialize the pyshark wrapper to enable packet parsing with tshark. It sets up the necessary configurations and dependencies to process packet data within Python scripts.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/src/README.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pyshark\n\n# Initialize the capture with desired parameters\ncapture = pyshark.FileCapture('sample.pcap')\n\nfor packet in capture:\n    print(packet)\n\n```\n\n----------------------------------------\n\nTITLE: Installing pyshark via pip (Bash)\nDESCRIPTION: Installs the latest version of the pyshark library from the Python Package Index (PyPI) using the pip package manager. This is the standard method for installing Python packages.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyshark\n```\n\n----------------------------------------\n\nTITLE: Installing pyshark from Git Repository (Bash)\nDESCRIPTION: Installs pyshark directly from its source code repository on GitHub. This involves cloning the repository, navigating into the source directory, and running the setup script using Python. This method is useful for installing development versions or contributing to the project.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/KimiNewt/pyshark.git\ncd pyshark/src\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing Libxml Dependency on Mac OS X (Bash)\nDESCRIPTION: Installs necessary dependencies (Xcode command-line tools and libxml) on Mac OS X required for pyshark installation if encountering specific build errors related to clang or libxml. Requires accepting the Xcode EULA.\nSOURCE: https://github.com/kiminewt/pyshark/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\npip install libxml\n```"
  }
]