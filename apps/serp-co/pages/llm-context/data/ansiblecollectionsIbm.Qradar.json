[
  {
    "owner": "ansible-collections",
    "repo": "ibm.qradar",
    "content": "TITLE: Using MERGED State with QRadar Log Sources Management\nDESCRIPTION: Example playbook that adds Snort and Apache log sources to IBM QRadar using the merged state, which creates new log sources with specified configurations.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_log_sources_management_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Using MERGED state\n# -------------------\n\n- name: Add Snort n Apache log sources to IBM QRadar\n  ibm.qradar.qradar_log_sources_management:\n    config:\n      - name: \"Snort logs\"\n        type_name: \"Snort Open Source IDS\"\n        description: \"Snort IDS remote logs from rsyslog\"\n        identifier: \"192.0.2.1\"\n      - name: \"Apache HTTP Server logs\"\n        type_name: \"Apache HTTP Server\"\n        description: \"Apache HTTP Server remote logs from rsyslog\"\n        identifier: \"198.51.100.1\"\n    state: merged\n```\n\n----------------------------------------\n\nTITLE: Adding a Snort Log Source to IBM QRadar using Ansible\nDESCRIPTION: This example demonstrates how to add a Snort IDS log source to IBM QRadar using the log_source_management module. The configuration specifies the log source name, type, state, description, and identifier (IP address).\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.log_source_management_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Add a snort log source to IBM QRadar\n  ibm.qradar.log_source_management:\n    name: \"Snort logs\"\n    type_name: \"Snort Open Source IDS\"\n    state: present\n    description: \"Snort IDS remote logs from rsyslog\"\n    identifier: \"192.168.1.101\"\n```\n\n----------------------------------------\n\nTITLE: Using MERGED State to Disable a QRadar Rule in YAML\nDESCRIPTION: This example shows how to use the merged state to disable a QRadar Analytics Rule named 'Ansible Example DDOS Rule'. The task sets the enabled parameter to false and displays the before and after states.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DISABLE Rule 'Ansible Example DDoS Rule'\n  ibm.qradar.qradar_analytics_rules:\n    config:\n      name: 'Ansible Example DDOS Rule'\n      enabled: false\n    state: merged\n\n# RUN output:\n# -----------\n\n#   qradar_analytics_rules:\n#     after:\n#       average_capacity: null\n#       base_capacity: null\n#       base_host_id: null\n#       capacity_timestamp: null\n#       creation_date: 1658929682568\n#       enabled: false\n#       id: 100443\n#       identifier: ae5a1268-02a0-4976-84c5-dbcbcf854b9c\n#       linked_rule_identifier: null\n#       modification_date: 1658929682567\n#       name: Ansible Example DDOS Rule\n#       origin: USER\n#       owner: admin\n#       type: EVENT\n#     before:\n#       average_capacity: null\n#       base_capacity: null\n#       base_host_id: null\n#       capacity_timestamp: null\n#       creation_date: 1658929682568\n#       enabled: true\n#       id: 100443\n#       identifier: ae5a1268-02a0-4976-84c5-dbcbcf854b9c\n#       linked_rule_identifier: null\n#       modification_date: 1658929682567\n#       name: Ansible Example DDOS Rule\n#       origin: USER\n#       owner: admin\n#       type: EVENT\n```\n\n----------------------------------------\n\nTITLE: Enabling QRadar Rule Using Ansible YAML\nDESCRIPTION: This example demonstrates how to enable a QRadar rule named 'Ansible Example DDoS Rule' using the qradar_rule module. It sets the state to 'enabled' for the specified rule.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.rule_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enable Rule 'Ansible Example DDoS Rule'\n  qradar_rule:\n    name: 'Ansible Example DDOS Rule'\n    state: enabled\n```\n\n----------------------------------------\n\nTITLE: Retrieving Open IBM QRadar Offenses with Ansible\nDESCRIPTION: This YAML snippet demonstrates how to use the ibm.qradar.offense_info module to retrieve a list of all currently open QRadar offenses and display the results for debugging purposes.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.offense_info_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get list of all currently OPEN IBM QRadar Offenses\n  ibm.qradar.offense_info:\n    status: OPEN\n  register: offense_list\n\n- name: display offense information for debug purposes\n  debug:\n    var: offense_list\n```\n\n----------------------------------------\n\nTITLE: Triggering Incremental QRadar Deployment with Ansible\nDESCRIPTION: This snippet demonstrates how to use the ibm.qradar.deploy module to trigger an incremental deployment of QRadar configuration. It sets the deployment type to INCREMENTAL, which is the default option.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.deploy_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: run an incremental deploy\n  ibm.qradar.deploy:\n    type: INCREMENTAL\n```\n\n----------------------------------------\n\nTITLE: Creating QRadar Offense Note Using Ansible\nDESCRIPTION: Example showing how to add a note to a QRadar offense using the offense_note module. The example demonstrates adding a text note to offense ID 1.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.offense_note_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Add a note to QRadar Offense ID 1\n  ibm.qradar.offense_note:\n    id: 1\n    note_text: This an example note entry that should be made on offense id 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving QRadar Rule Information with YAML\nDESCRIPTION: Examples demonstrating how to use the ibm.qradar.rule_info module to retrieve information about QRadar rules. Shows filtering by rule name and debugging output.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.rule_info_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get information about the Rule named \"Custom Company DDoS Rule\"\n  ibm.qradar.rule_info:\n    name: \"Custom Company DDoS Rule\"\n  register: custom_ddos_rule_info\n\n- name: debugging output of the custom_ddos_rule_info registered variable\n  debug:\n    var: custom_ddos_rule_info\n```\n\n----------------------------------------\n\nTITLE: QRadar Inventory Configuration\nDESCRIPTION: Inventory configuration for connecting to QRadar instance, including connection parameters and credentials.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[qradar]\nqradar.example.com\n\n[qradar:vars]\nansible_network_os=ibm.qradar.qradar\nansible_user=admin\nansible_httpapi_pass=SuperSekretPassword\nansible_httpapi_use_ssl=true\nansible_httpapi_validate_certs=true\nansible_connection=httpapi\n```\n\n----------------------------------------\n\nTITLE: Using REPLACED State with QRadar Log Sources Management\nDESCRIPTION: Example playbook demonstrating how to replace existing log source configurations in IBM QRadar, updating the description and identifier of an Apache HTTP Server log source.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_log_sources_management_module.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Using REPLACED state\n# --------------------\n\n- name: Replace existing Log sources to IBM QRadar\n  ibm.qradar.qradar_log_sources_management:\n    state: replaced\n    config:\n      - name: \"Apache HTTP Server logs\"\n        type_name: \"Apache HTTP Server\"\n        description: \"REPLACED Apache HTTP Server remote logs from rsyslog\"\n        identifier: \"192.0.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Using GATHERED State to Retrieve QRadar Rule Information in YAML\nDESCRIPTION: This example demonstrates how to use the gathered state to retrieve information about a specific QRadar Analytics Rule by name. The task returns comprehensive details about the rule including its ID, enabled status, creation date, and other properties.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get information about the Rule named \"Ansible Example DDOS Rule\"\n  ibm.qradar.qradar_analytics_rules:\n    config:\n      name: \"Ansible Example DDOS Rule\"\n    state: gathered\n\n# RUN output:\n# -----------\n\n#   gathered:\n#     average_capacity: null\n#     base_capacity: null\n#     base_host_id: null\n#     capacity_timestamp: null\n#     creation_date: 1658918848694\n#     enabled: true\n#     id: 100443\n#     identifier: d6d37942-ba28-438f-b909-120df643a992\n#     linked_rule_identifier: null\n#     modification_date: 1658918848692\n#     name: Ansible Example DDOS Rule\n#     origin: USER\n#     owner: admin\n#     type: EVENT\n```\n\n----------------------------------------\n\nTITLE: Installing QRadar Collection via Requirements YAML\nDESCRIPTION: YAML configuration showing how to include the IBM QRadar collection in a requirements.yml file for installation via ansible-galaxy.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncollections:\n  - name: ibm.qradar\n```\n\n----------------------------------------\n\nTITLE: Using GATHERED State with QRadar Log Sources Management\nDESCRIPTION: Example playbook showing how to retrieve existing log source configurations from IBM QRadar by specifying the log source names to gather.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_log_sources_management_module.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Using GATHERED state\n# --------------------\n\n- name: Gather Snort n Apache log source from IBM QRadar\n  ibm.qradar.qradar_log_sources_management:\n    config:\n      - name: \"Snort logs\"\n      - name: \"Apache HTTP Server logs\"\n    state: gathered\n```\n\n----------------------------------------\n\nTITLE: Gathering QRadar Rule Information by ID (Ansible)\nDESCRIPTION: Uses the ibm.qradar.qradar_analytics_rules module to retrieve information about a specific QRadar rule with ID 100443. The task demonstrates how to gather rule details using the 'gathered' state.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get information about the Rule with ID 100443\n  ibm.qradar.qradar_analytics_rules:\n    config:\n      id: 100443\n    state: gathered\n```\n\n----------------------------------------\n\nTITLE: QRadar Log Source Management with FQCN\nDESCRIPTION: Ansible playbook demonstrating log source management using Fully Qualified Collection Names (FQCN).\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Testing URI manipulation of QRadar with FQCN\n  hosts: qradar\n  gather_facts: false\n  tasks:\n    - name: create log source\n      ibm.qradar.log_source_management:\n        name: \"Ansible Collections Example Log Source\"\n        type_name: \"Linux OS\"\n        state: present\n        description: \"Ansible Collections Example Log Source Description\"\n```\n\n----------------------------------------\n\nTITLE: Gathering Log Sources in QRadar using Ansible\nDESCRIPTION: Task to gather all configured log sources from IBM QRadar system using the qradar_log_sources_management module in gathered state.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_log_sources_management_module.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: TO Gather ALL log sources from IBM QRadar\n  tags: gather_log_all\n  ibm.qradar.qradar_log_sources_management:\n    state: gathered\n```\n\n----------------------------------------\n\nTITLE: Gathering QRadar Rule Information by Range (Ansible)\nDESCRIPTION: Retrieves information about QRadar rules within a specified ID range (100300-100500) using the ibm.qradar.qradar_analytics_rules module. The task demonstrates how to gather specific fields (name, origin, owner) for multiple rules.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: TO Get information about the Rule ID with a range\n  ibm.qradar.qradar_analytics_rules:\n  config:\n    range: 100300-100500\n    fields:\n      - name\n      - origin\n      - owner\n  state: gathered\n```\n\n----------------------------------------\n\nTITLE: Installing IBM QRadar Ansible Collection from Ansible Galaxy\nDESCRIPTION: Command to install the IBM QRadar Ansible collection from Ansible Galaxy using the ansible-galaxy command-line tool. This makes the collection available for use in Ansible playbooks.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy collection install ibm.qradar\n```\n\n----------------------------------------\n\nTITLE: Deleting Log Sources in QRadar using Ansible\nDESCRIPTION: Task to delete specific log sources (Snort and Apache) from IBM QRadar using the qradar_log_sources_management module in deleted state.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_log_sources_management_module.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete Snort n Apache log source from IBM QRadar\n  ibm.qradar.qradar_log_sources_management:\n    config:\n      - name: \"Snort logs\"\n      - name: \"Apache HTTP Server logs\"\n    state: deleted\n```\n\n----------------------------------------\n\nTITLE: Deleting QRadar Custom Rule by Name (Ansible)\nDESCRIPTION: Demonstrates how to delete a custom QRadar rule by its name using the ibm.qradar.qradar_analytics_rules module. The task uses the 'deleted' state to remove the rule 'Ansible Example DDOS Rule'.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete custom Rule by NAME\n  ibm.qradar.qradar_analytics_rules:\n    config:\n      name: 'Ansible Example DDOS Rule'\n    state: deleted\n```\n\n----------------------------------------\n\nTITLE: QRadar Log Source Management with Play-Level Collection\nDESCRIPTION: Ansible playbook showing log source management using collection defined at play level.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Testing URI manipulation of QRadar\n  hosts: qradar\n  gather_facts: false\n  collections:\n    - ibm.qradar\n  tasks:\n    - name: create log source\n      log_source_management:\n        name: \"Ansible Collections Example Log Source\"\n        type_name: \"Linux OS\"\n        state: present\n        description: \"Ansible Collections Example Log Source Description\"\n```\n\n----------------------------------------\n\nTITLE: Installing IBM QRadar Ansible Collection Using Requirements File\nDESCRIPTION: Example of installing the IBM QRadar Ansible collection using a requirements.yml file. This approach allows for version specification and is useful for ensuring consistent environments.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncollections:\n  - name: ibm.qradar\n    version: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Deleting QRadar Custom Rule by ID (Ansible)\nDESCRIPTION: Shows how to delete a custom QRadar rule by its ID using the ibm.qradar.qradar_analytics_rules module. The task uses the 'deleted' state to remove the rule with ID 100443.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.qradar_analytics_rules_module.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete custom Rule by ID\n  ibm.qradar.qradar_analytics_rules:\n    config:\n      id: 100443\n    state: deleted\n```\n\n----------------------------------------\n\nTITLE: QRadar Log Source Management with Block-Level Collection\nDESCRIPTION: Ansible playbook demonstrating log source management using collection defined at block level.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Testing URI manipulation of QRadar\n  hosts: qradar\n  gather_facts: false\n  tasks:\n    - name: collection namespace block\n      block:\n        - name: create log source\n          log_source_management:\n            name: \"Ansible Collections Example Log Source\"\n            type_name: \"Linux OS\"\n            state: present\n            description: \"Ansible Collections Example Log Source Description\"\n      collections:\n        - ibm.qradar\n```\n\n----------------------------------------\n\nTITLE: Installing IBM QRadar Collection with Requirements File\nDESCRIPTION: Command to install the IBM QRadar Ansible collection using a requirements file with ansible-galaxy, which allows for version-controlled installation of collections.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/requirements.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy collection install -r requirements.yml\n```\n\n----------------------------------------\n\nTITLE: Service Source Type Options in QRadar Ansible Module\nDESCRIPTION: Shows available options for service source types in QRadar service management. The source represents the init system type that manages the service.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.offense_info_module.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code>systemd</code>, <code>sysv</code>, <code>upstart</code>\n```\n\n----------------------------------------\n\nTITLE: Using IBM QRadar Collection in Ansible Playbook\nDESCRIPTION: Example playbook showing how to use the IBM QRadar collection modules in an Ansible playbook. This demonstrates the fully qualified collection name format to access modules.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/requirements.txt#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Using IBM QRadar collection\n  hosts: all\n  tasks:\n    - name: Using the log_source_management module\n      ibm.qradar.log_source_management:\n        name: Test Log Source\n        type_name: \"Juniper Networks Security Binary Log Collector\"\n        state: present\n        description: \"Test log source\"\n\n```\n\n----------------------------------------\n\nTITLE: Service State Options in QRadar Ansible Module\nDESCRIPTION: Defines possible values for service state in QRadar service management, indicating whether a service is running, stopped, or in an unknown state.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.offense_info_module.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code>running</code>, <code>stopped</code>, or <code>unknown</code>\n```\n\n----------------------------------------\n\nTITLE: Importing IBM QRadar Module Names in Ansible Playbook\nDESCRIPTION: Example showing how to import module names from the IBM QRadar collection to simplify referencing them in an Ansible playbook. This eliminates the need to use fully qualified collection names.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/requirements.txt#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Using IBM QRadar collection\n  hosts: all\n  collections:\n    - ibm.qradar\n  tasks:\n    - name: Using the log_source_management module\n      log_source_management:\n        name: Test Log Source\n        type_name: \"Juniper Networks Security Binary Log Collector\"\n        state: present\n        description: \"Test log source\"\n\n```\n\n----------------------------------------\n\nTITLE: Service Status Options in QRadar Ansible Module\nDESCRIPTION: Lists possible values for service status in QRadar service management, specifically for systemd systems or RedHat/SUSE flavored sysvinit/upstart systems.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/docs/ibm.qradar.offense_info_module.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code>enabled</code>, <code>disabled</code>, or <code>unknown</code>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies for IBM QRadar Ansible Collection\nDESCRIPTION: This bindep configuration specifies the distribution packages needed for testing and documentation of the IBM QRadar Ansible collection. It includes compiler, Python development, and Python runtime dependencies for RPM-based platforms.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/bindep.txt#2025-04-22_snippet_0\n\nLANGUAGE: bindep\nCODE:\n```\ngcc-c++ [doc test platform:rpm]\npython3-devel [test platform:rpm]\npython3 [test platform:rpm]\n```\n\n----------------------------------------\n\nTITLE: Dependency Requirements for Ansible IBM QRadar Collection\nDESCRIPTION: A requirements file listing all Python package dependencies needed for the IBM QRadar collection. Includes general dependencies like boto3 and requests, as well as module-specific requirements with version constraints where applicable.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/tests/unit/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3\nplacebo\npycrypto\npasslib\npypsrp\npython-memcached\npytz\npyvmomi\nredis\nrequests\nsetuptools > 0.6 # pytest-xdist installed via requirements does not work with very old setuptools (sanity_ok)\nunittest2 ; python_version < '2.7'\nimportlib ; python_version < '2.7'\nnetaddr\nipaddress\nnetapp-lib\nsolidfire-sdk-python\n\n# requirements for F5 specific modules\nf5-sdk ; python_version >= '2.7'\nf5-icontrol-rest ; python_version >= '2.7'\ndeepdiff\n\n# requirement for Fortinet specific modules\npyFMG\n\n# requirement for aci_rest module\nxmljson\n\n# requirement for winrm connection plugin tests\npexpect\n\n# requirement for the linode module\nlinode-python # APIv3\nlinode_api4 ; python_version > '2.6' # APIv4\n\n# requirement for the gitlab module\npython-gitlab\nhttmock\n\n# requirment for kubevirt modules\nopenshift ; python_version >= '2.7'\n```\n\n----------------------------------------\n\nTITLE: Listing Python Test Dependencies for QRadar Ansible Collection\nDESCRIPTION: Lists the required Python packages for running unit tests on the IBM QRadar Ansible collection. Includes pytest-ansible for Ansible integration testing, pytest-xdist for parallel test execution, and pytest-cov for code coverage reporting.\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/test-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Unit test runner\npytest-ansible\npytest-xdist\npytest-cov\n```\n\n----------------------------------------\n\nTITLE: QRadar Module Validation Output\nDESCRIPTION: Output from Ansible's validate-modules check showing documentation and deprecation issues in QRadar modules\nSOURCE: https://github.com/ansible-collections/ibm.qradar/blob/main/tests/sanity/ignore-2.9.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nplugins/modules/log_source_management.py validate-modules:deprecation-mismatch\nplugins/modules/log_source_management.py validate-modules:invalid-documentation\nplugins/modules/rule.py validate-modules:deprecation-mismatch\nplugins/modules/rule.py validate-modules:invalid-documentation\nplugins/modules/rule_info.py validate-modules:deprecation-mismatch\nplugins/modules/rule_info.py validate-modules:invalid-documentation\n```"
  }
]