[
  {
    "owner": "serverless",
    "repo": "serverless",
    "content": "TITLE: Configuring Root Properties in serverless.yml\nDESCRIPTION: Basic configuration for organization, app, and service names in serverless.yml. These settings define the project structure and enable Dashboard features.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\norg: my-org\napp: my-app\nservice: my-service\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Serverless Service Configuration\nDESCRIPTION: Detailed serverless.yml configuration showing provider settings, functions, events, and DynamoDB resource definition.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/services.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: users\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  stage: dev # Set the default stage used. Default is dev\n  region: us-east-1 # Overwrite the default region used. Default is us-east-1\n  profile: production # The default profile to use with this service\n  memorySize: 512 # Overwrite the default memory size. Default is 1024\n\nfunctions:\n  usersCreate: # A function\n    handler: users.create\n    events: # The events that trigger this function\n      - httpApi: 'POST /users/create'\n  usersDelete: # A function\n    handler: users.delete\n    events: # The events that trigger this function\n      - httpApi: 'DELETE /users/delete'\n\n# The \"Resources\" your \"Functions\" use. Raw AWS CloudFormation goes in here.\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n```\n\n----------------------------------------\n\nTITLE: Basic Serverless YAML Configuration\nDESCRIPTION: Example of a basic serverless.yml configuration file showing function definitions with HTTP API events and resources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/intro.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: users\n\nfunctions: # Your \"Functions\"\n  usersCreate:\n    events: # The \"Events\" that trigger this function\n      - httpApi: 'POST /users/create'\n  usersDelete:\n    events:\n      - httpApi: 'DELETE /users/delete'\n\nresources: # The \"Resources\" your \"Functions\" use. Raw AWS CloudFormation goes in here.\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Lambda Functions in serverless.yml\nDESCRIPTION: This snippet demonstrates how to configure multiple Lambda functions in the serverless.yml file, with inherited and function-specific settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: myService\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  memorySize: 512 # will be inherited by all functions\n\nfunctions:\n  functionOne:\n    handler: handler.functionOne\n  functionTwo:\n    handler: handler.functionTwo\n  functionThree:\n    handler: handler.functionThree\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Setup Interface in Serverless CLI\nDESCRIPTION: The interactive prompt for setting up AWS credentials when they're not found, offering different options for credential configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNo valid AWS Credentials were found in your environment variables or on your machine. Serverless Framework needs these to access your AWS account and deploy resources to it. Choose an option below to set up AWS Credentials.\n\n‚ùØ Create AWS IAM Role (Easy & Recommended)\n  Save AWS Credentials in a Local Profile\n  Skip & Set Later (AWS SSO, ENV Vars)\n```\n\n----------------------------------------\n\nTITLE: Setting IAM Permissions for Lambda Functions\nDESCRIPTION: This snippet shows how to set IAM permissions for Lambda functions using the provider.iam.role.statements property in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: myService\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  iam:\n    role:\n      statements: # permissions for all of your functions can be set here\n        - Effect: Allow\n          Action: # Gives permission to DynamoDB tables in a specific region\n            - dynamodb:DescribeTable\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource: 'arn:aws:dynamodb:us-east-1:*:*'\n\nfunctions:\n  functionOne:\n    handler: handler.functionOne\n    memorySize: 512\n```\n\n----------------------------------------\n\nTITLE: Basic Serverless Service Configuration in YAML\nDESCRIPTION: Basic example of a serverless.yml file showing service configuration with HTTP API endpoints for user management.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/services.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: users\n\nprovider:\n  # Configuration of the cloud provider\n  name: aws\n\nfunctions:\n  # The functions to deploy\n  usersCreate:\n    events:\n      - httpApi: 'POST /users/create'\n  usersDelete:\n    events:\n      - httpApi: 'DELETE /users/delete'\n\nplugins:\n  # Plugins to enable\n\nresources:\n  # Additional AWS resources to deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Settings in Serverless YAML\nDESCRIPTION: Demonstrates how to configure VPC settings at both service and function levels. Shows how to specify security groups and subnet IDs for Lambda functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  vpc:\n    securityGroupIds:\n      - securityGroupId1\n      - securityGroupId2\n    subnetIds:\n      - subnetId1\n      - subnetId2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    vpc:\n      securityGroupIds:\n        - securityGroupId1\n        - securityGroupId2\n      subnetIds:\n        - subnetId1\n        - subnetId2\n  users:\n    handler: handler.users\n```\n\n----------------------------------------\n\nTITLE: Configuring ECR Images for AWS Lambda in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to configure ECR images for AWS Lambda functions in the Serverless Framework. It shows settings for scanning images, defining local builds, and referencing existing ECR images.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  ecr:\n    scanOnPush: true\n    images:\n      baseimage:\n        path: ./path/to/context\n        file: Dockerfile.dev\n        buildArgs:\n          STAGE: ${opt:stage}\n        cacheFrom:\n          - my-image:latest\n        platform: linux/amd64\n      anotherimage:\n        uri: 000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Lambda Functions with Serverless Framework\nDESCRIPTION: Basic command for invoking a deployed Lambda function or running it locally for testing. The function name parameter is required for both remote and local invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke [local] --function functionName\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Function in serverless.yml\nDESCRIPTION: Comprehensive configuration for an AWS Lambda function including runtime settings, memory, timeout, environment variables, VPC configuration, and other deployment options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: users.create\n    image: baseimage\n    runtime: nodejs14.x\n    runtimeManagement:\n      mode: manual\n      arn: <aws runtime arn>\n    memorySize: 512\n    timeout: 10\n    environment:\n      APP_ENV_VARIABLE: FOOBAR\n    ephemeralStorageSize: 512\n    name: ${sls:stage}-lambdaName\n    description: My function\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Request Templates in Serverless YAML\nDESCRIPTION: Demonstrates how to define custom request templates for different content types in the Serverless Framework configuration. It shows how to map query string parameters and handle multi-line strings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: get\n          path: whatever\n          integration: lambda\n          request:\n            template:\n              text/xhtml: '{ \"stage\" : \"$context.stage\" }'\n              application/json: '{ \"httpMethod\" : \"$context.httpMethod\" }'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: get\n          path: whatever\n          integration: lambda\n          request:\n            template:\n              application/json: '{ \"foo\" : \"$input.params(''bar'')\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default and Custom IAM Roles for Lambda Functions in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to set up a default IAM role and custom roles for specific Lambda functions in a Serverless Framework YAML file. It includes configurations for logging, S3 access, and EC2 network interface management.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\n\nprovider:\n  name: aws\n  iam:\n    role: myDefaultRole\n\nfunctions:\n  func0:\n    role: myCustRole0\n    ...\n  func1:\n    ... # does not define role\n\nresources:\n  Resources:\n    myDefaultRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/default/path/\n        RoleName: MyDefaultRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:TagResource\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                -  Effect: \"Allow\"\n                   Action:\n                     - \"s3:PutObject\"\n                   Resource:\n                     Fn::Join:\n                       - \"\"\n                       - - \"arn:aws:s3:::\"\n                         - \"Ref\" : \"ServerlessDeploymentBucket\"\n    myCustRole0:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/cust/path/\n        RoleName: MyCustRole0\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:TagResource\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:CreateNetworkInterface\n                    - ec2:DescribeNetworkInterfaces\n                    - ec2:DetachNetworkInterface\n                    - ec2:DeleteNetworkInterface\n                  Resource: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Functions in serverless.yml\nDESCRIPTION: This snippet demonstrates how to configure AWS Lambda functions in the serverless.yml file, including provider settings and function-specific properties.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: myService\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  runtimeManagement: auto # optional, set how Lambda controls all functions runtime. AWS default is auto; this can either be 'auto' or 'onFunctionUpdate'. For 'manual', see example in hello function below (syntax for both is identical)\n  memorySize: 512 # optional, in MB, default is 1024\n  timeout: 10 # optional, in seconds, default is 6\n  versionFunctions: false # optional, default is true\n  tracing:\n    lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')\n\nfunctions:\n  hello:\n    handler: handler.hello # required, handler set in AWS Lambda\n    name: ${sls:stage}-lambdaName # optional, Deployed Lambda name\n    description: Description of what the lambda function does # optional, Description to publish to AWS\n    runtime: python3.11 # optional overwrite, default is provider runtime\n    runtimeManagement:\n      mode: manual # syntax required for manual, mode property also supports 'auto' or 'onFunctionUpdate' (see provider.runtimeManagement)\n      arn: <aws runtime arn> # required when mode is manual\n    memorySize: 512 # optional, in MB, default is 1024\n    timeout: 10 # optional, in seconds, default is 6\n    provisionedConcurrency: 3 # optional, Count of provisioned lambda instances\n    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit\n    tracing: PassThrough # optional, overwrite, can be 'Active' or 'PassThrough'\n```\n\n----------------------------------------\n\nTITLE: Deploying Only AWS Lambda Configuration Changes\nDESCRIPTION: Example showing how to update only Lambda-level configuration settings (like handler, timeout, or memory size) without redeploying the function code, using the --update-config flag.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-function.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function --function helloWorld --update-config\n```\n\n----------------------------------------\n\nTITLE: SQS Event Configuration in YAML\nDESCRIPTION: Sets up SQS queue event triggers with batch processing and filtering options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          # Optional\n          batchSize: 10\n          # Optional, minimum is 0 and the maximum is 300 (seconds)\n          maximumBatchingWindow: 10\n          # (default: true)\n          enabled: false\n          functionResponseType: ReportBatchItemFailures\n          filterPatterns:\n            - a: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Authorizers for HTTP API in Serverless YAML\nDESCRIPTION: Shows how to set up Lambda authorizers for HTTP API endpoints, including using functions from the same service or external functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  httpApi:\n    authorizers:\n      customAuthorizer:\n        type: request\n        functionName: authorizerFunc # Mutually exclusive with `functionArn`\n        functionArn: arn:aws:lambda:us-east-1:11111111111:function:external-authorizer # Mutually exclusive with `functionName`\n        name: customAuthorizerName\n        resultTtlInSeconds: 300\n        enableSimpleResponses: true\n        payloadVersion: '2.0'\n        identitySource:\n          - $request.header.Auth\n          - $request.header.Authorization\n        managedExternally: true # Applicable only when using externally defined authorizer functions to prevent creation of permission resource\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CORS in Serverless YAML\nDESCRIPTION: This snippet shows the basic configuration for enabling CORS in a serverless function using the 'cors: true' setting. It also demonstrates the equivalent expanded configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Amzn-Trace-Id\n            allowCredentials: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Creation Lambda Function\nDESCRIPTION: JavaScript function to handle customer creation by inserting data into DynamoDB using the AWS SDK.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\nconst AWS = require('aws-sdk')\n\nmodule.exports.createCustomer = async (event) => {\n  const body = JSON.parse(Buffer.from(event.body, 'base64').toString())\n  const dynamoDb = new AWS.DynamoDB.DocumentClient()\n  const putParams = {\n    TableName: process.env.DYNAMODB_CUSTOMER_TABLE,\n    Item: {\n      primary_key: body.name,\n      email: body.email,\n    },\n  }\n  await dynamoDb.put(putParams).promise()\n\n  return {\n    statusCode: 201,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC for Lambda Functions in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to configure Lambda functions to run inside a VPC by specifying security group IDs and subnet IDs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  vpc:\n    securityGroupIds:\n      - securityGroupId1\n      - securityGroupId2\n    subnetIds:\n      - subnetId1\n      - subnetId2\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Image Deployments in ECR for Serverless Framework\nDESCRIPTION: This snippet shows how to configure Docker image deployments in Amazon ECR (Elastic Container Registry) using the Serverless Framework. It includes options for image scanning, referencing existing images, and building images locally with custom settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  ecr:\n    scanOnPush: true\n    # Definitions of images that later can be referenced by key in `function.image`\n    images:\n      baseimage:\n        # URI of an existing Docker image in ECR\n        uri: 000000000000.dkr.ecr.us-east-1.amazonaws.com/test-image@sha256:6bb600b4d6e1d7cf521097177d111111ea373edb91984a505333be8ac9455d38\n      anotherimage:\n        # Path to the Docker context that will be used when building that image locally (default: '.')\n        path: ./image/\n        # Dockerfile that will be used when building the image locally (default: 'Dockerfile')\n        file: Dockerfile.dev\n        buildArgs:\n          STAGE: ${sls:stage}\n        buildOptions:\n          [\n            '--tag',\n            'v1.0.0',\n            '--add-host',\n            'example.com:0.0.0.0',\n            '--ssh',\n            'default=/path/to/private/key/id_rsa',\n          ]\n        cacheFrom:\n          - my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic HTTP Event for AWS Lambda Function in YAML\nDESCRIPTION: Demonstrates how to configure a simple HTTP event for an AWS Lambda function using the Serverless Framework. The example shows a POST endpoint for creating users.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/events.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  createUser:\n    handler: handler.createUser\n    events:\n      - httpApi: 'POST /users/create'\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Framework Globally with NPM\nDESCRIPTION: This command installs the Serverless Framework as a global NPM module, making it available system-wide for creating and managing serverless projects.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g serverless\n```\n\n----------------------------------------\n\nTITLE: Configuring a Simple HTTP Endpoint in YAML\nDESCRIPTION: Defines a GET endpoint at /hello that triggers the hello Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  index:\n    handler: handler.hello\n    events:\n      - http: GET hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Origins for CORS in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to configure CORS with multiple allowed origins in a serverless function. It includes an example of using wildcards for subdomains.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors:\n            origins:\n              - http://example.com\n              - http://example2.com\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Amzn-Trace-Id\n            allowCredentials: false\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncors:\n  origins:\n    - http://*.example.com\n    - http://example2.com\n```\n\n----------------------------------------\n\nTITLE: Configuring EventBridge Events in Serverless Framework\nDESCRIPTION: YAML configuration for setting up AWS EventBridge events with various options including custom event buses, patterns, input transformers, retry policies, and dead letter queues. Shows examples for both default and custom event bus configurations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      # Use the default AWS event bus\n      - eventBridge:\n          description: a description of my eventBridge event's purpose\n          schedule: rate(10 minutes)\n      # Create a custom event bus\n      - eventBridge:\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n      # Re-use an existing event bus\n      - eventBridge:\n          eventBus: arn:aws:events:us-east-1:12345:event-bus/custom-private-events\n          pattern:\n            source:\n              - custom.private\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      # Using 'inputs'\n      - eventBridge:\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n      # Using 'inputPath'\n      - eventBridge:\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputPath: '$.stageVariables'\n      # Using 'inputTransformer'\n      - eventBridge:\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n          retryPolicy:\n            maximumEventAge: 3600\n            maximumRetryAttempts: 3\n          deadLetterQueueArn: !GetAtt QueueName.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway v2 HTTP API in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to configure API Gateway v2 HTTP API settings in the Serverless Framework. It includes options for external API attachment, custom naming, payload format, CORS, and various authorizer types.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  httpApi:\n    # Attach to an externally created HTTP API via its ID:\n    id: xxxx\n    # Set a custom name for the API Gateway API (default: ${sls:stage}-${self:service})\n    name: dev-my-service\n    # Payload format version (note: use quotes in YAML: '1.0' or '2.0') (default: '2.0')\n    payload: '2.0'\n    # Disable the default 'execute-api' HTTP endpoint (default: false)\n    # Useful when using a custom domain.\n    disableDefaultEndpoint: true\n    # Enable detailed CloudWatch metrics (default: false)\n    metrics: true\n    # Enable CORS HTTP headers with default settings (allow all)\n    # Can be fine-tuned with specific options\n    cors: true\n    authorizers:\n      # JWT API authorizer\n      someJwtAuthorizer:\n        identitySource: $request.header.Authorization\n        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_xxxxx\n        audience:\n          - xxxx\n          - xxxx\n      # Custom Lambda request authorizer\n      someCustomLambdaAuthorizer:\n        # Should be set to 'request' for custom Lambda authorizers\n        type: request\n        # Mutually exclusive with `functionArn`\n        functionName: authorizerFunc\n        # Mutually exclusive with `functionName`\n        functionArn: arn:aws:lambda:us-east-1:11111111111:function:external-authorizer\n        # Optional. Custom name for created authorizer\n        name: customAuthorizerName\n        # Optional. Time to live for cached authorizer results, accepts values from 0 (no caching) to 3600 (1 hour)\n        # When set to non-zero value, 'identitySource' must be defined as well\n        resultTtlInSeconds: 300\n        # Set if authorizer function will return authorization responses in simple format (default: false)\n        enableSimpleResponses: true\n        # Version of payload that will be sent to authorizer function (default: '2.0')\n        payloadVersion: '2.0'\n        # Optional. One or more mapping expressions of the request parameters in form of e.g `$request.header.Auth`.\n        # Specified values are verified to be non-empty and not null by authorizer.\n        # It is a required property when `resultTtlInSeconds` is non-zero as `identitySource` is additionally\n        # used as cache key for authorizer responses caching.\n        identitySource:\n          - $request.header.Auth\n          - $request.header.Authorization\n        # Optional. Applicable only when using externally defined authorizer functions\n        # to prevent creation of permission resource\n        managedExternally: true\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild in YAML for AWS Lambda with Serverless Framework\nDESCRIPTION: This YAML snippet demonstrates how to configure various esbuild options in the Serverless Framework, including bundling, external dependencies, package management, exclusions, build concurrency, minification, and sourcemaps.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/building.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  esbuild:\n    bundle: true\n    external:\n      - '@aws-sdk/client-s3'\n    packages: external\n    exclude:\n      - '@aws-sdk/*'\n      - '!@aws-sdk/client-bedrock-runtime'\n    buildConcurrency: 3\n    minify: false\n    sourcemap:\n      type: linked\n      setNodeOptions: true\n```\n\n----------------------------------------\n\nTITLE: Running the Serverless Command for Template Selection\nDESCRIPTION: The basic command to initialize a new Serverless Framework project. When executed, it presents a list of built-in templates for the user to choose from, allowing them to quickly start a new serverless application with a template as the foundation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/examples-and-tutorials.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for HTTP API in Serverless YAML\nDESCRIPTION: Shows how to enable and configure CORS settings for HTTP API endpoints, including custom headers and methods.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  httpApi:\n    cors:\n      allowedOrigins:\n        - https://url1.com\n        - https://url2.com\n      allowedHeaders:\n        - Content-Type\n        - Authorization\n      allowedMethods:\n        - GET\n      allowCredentials: true\n      exposedResponseHeaders:\n        - Special-Response-Header\n      maxAge: 6000 # In seconds\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS in Lambda Function with JavaScript\nDESCRIPTION: This snippet shows how to implement CORS headers directly in a Lambda function using JavaScript, which is necessary when using the lambda-proxy integration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// handler.js\n\n'use strict'\n\nmodule.exports.hello = function (event, context, callback) {\n  const response = {\n    statusCode: 200,\n    headers: {\n      // Required for CORS support to work\n      'Access-Control-Allow-Origin': '*',\n      // Required for cookies, authorization headers with HTTPS\n      'Access-Control-Allow-Credentials': true,\n    },\n    body: JSON.stringify({ message: 'Hello World!' }),\n  }\n\n  callback(null, response)\n}\n```\n\n----------------------------------------\n\nTITLE: Single Function Deployment - Serverless CLI\nDESCRIPTION: Command to deploy a single function update without modifying the CloudFormation stack.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function --function myFunction\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Event Age and Retry Attempts for Asynchronous Lambda Functions\nDESCRIPTION: Shows how to configure maximum event age and retry attempts for asynchronous Lambda functions. Maximum event age accepts values between 60 seconds and 6 hours, while maximum retry attempts can be between 0 and 2.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  asyncHello:\n    handler: handler.asyncHello\n    maximumEventAge: 7200\n    maximumRetryAttempts: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Authorizer for API Gateway\nDESCRIPTION: A solution for sharing an authorizer across multiple functions in a shared API Gateway setup, which avoids the AWS limitation on authorizers per ARN. This example uses COGNITO_USER_POOLS authorizer type.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  createUser:\n     ...\n    events:\n      - http:\n          path: /users\n          ...\n          authorizer:\n            # Provide both type and authorizerId\n            type: COGNITO_USER_POOLS # TOKEN or REQUEST or COGNITO_USER_POOLS, same as AWS Cloudformation documentation\n            authorizerId:\n              Ref: ApiGatewayAuthorizer  # or hard-code Authorizer ID\n            scopes: # Optional - List of Oauth2 scopes when type is COGNITO_USER_POOLS\n              - myapp/myscope\n\n  deleteUser:\n     ...\n    events:\n      - http:\n          path: /users/{userId}\n          ...\n          authorizer:\n            # Provide both type and authorizerId\n            type: COGNITO_USER_POOLS # TOKEN or REQUEST or COGNITO_USER_POOLS, same as AWS Cloudformation documentation\n            authorizerId:\n              Ref: ApiGatewayAuthorizer # or hard-code Authorizer ID\n\nresources:\n  Resources:\n    ApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      Properties:\n        AuthorizerResultTtlInSeconds: 300\n        IdentitySource: method.request.header.Authorization\n        Name: Cognito\n        RestApiId:\n          Ref: YourApiGatewayName\n        Type: COGNITO_USER_POOLS\n        ProviderARNs:\n          - arn:aws:cognito-idp:${self:provider.region}:xxxxxx:userpool/abcdef\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Function Handler in JavaScript\nDESCRIPTION: This snippet shows how to define a Lambda function handler in a JavaScript file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// handler.js\nmodule.exports.functionOne = function (event, context, callback) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Event Triggers for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates different ways to specify SQS queue ARNs as event triggers for an AWS Lambda function using the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sqs.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      # These are all possible formats\n      - sqs: arn:aws:sqs:region:XXXXXX:MyFirstQueue\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - MySecondQueue\n              - Arn\n      - sqs:\n          arn:\n            Fn::ImportValue: MyExportedQueueArnId\n      - sqs:\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - sqs\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - MyOtherQueue\n```\n\n----------------------------------------\n\nTITLE: Deploying a Single Function\nDESCRIPTION: This command quickly overwrites the AWS Lambda code on AWS for a specific function, allowing for faster development cycles.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function -f [FUNCTION NAME] -s [STAGE NAME] -r [REGION NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring KMS Key for Environment Variables in Serverless Framework\nDESCRIPTION: Demonstrates how to specify KMS key ARNs for encrypting environment variables at both service and function levels. Functions can either inherit the service-level configuration or override it with their own settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: service-name\n\nprovider:\n  name: aws\n  kmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash\n  environment:\n    TABLE_NAME: tableName1\n\nfunctions:\n  hello: # this function will OVERWRITE the service level environment config above\n    handler: handler.hello\n    kmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash\n    environment:\n      TABLE_NAME: tableName2\n  goodbye: # this function will INHERIT the service level environment config above\n    handler: handler.goodbye\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Lambda Authorizer Configuration\nDESCRIPTION: Shows how to configure a basic custom authorizer for an HTTP endpoint by referencing another function in the same service.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer: authorizerFunc\n  authorizerFunc:\n    handler: handler.authorizerFunc\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple S3 Event for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates a basic configuration for creating an S3 bucket that triggers a Lambda function when an object is added or modified. It uses a simple event definition in the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  resize:\n    handler: resize.handler\n    events:\n      - s3: photos\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions Locally\nDESCRIPTION: Shows how to invoke serverless functions locally using the Serverless CLI, including examples of passing data to the invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke local -f my-api\n```\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke local --function functionName --data '{\"a\":\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Parameters in API Gateway with Serverless Framework\nDESCRIPTION: Configuration for path parameters in API Gateway. Path variables must be defined in both the method path and the request parameters section.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.post_detail\n    events:\n      - http:\n          path: posts/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Permissions in Serverless Framework\nDESCRIPTION: This snippet shows how to configure IAM roles and permissions for Lambda functions, including setting up custom roles, managed policies, and stack policies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  iam:\n    role: arn:aws:iam::XXXXXX:role/role\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - 's3:ListBucket'\n          Resource:\n            Fn::Join:\n              - ''\n              - - 'arn:aws:s3:::'\n                - Ref: ServerlessDeploymentBucket\n      name: your-custom-name-role\n      path: /your-custom-path/\n      managedPolicies:\n        - arn:aws:iam:*****:policy/some-managed-policy\n      permissionsBoundary: arn:aws:iam::XXXXXX:policy/policy\n      tags:\n        key: value\n    deploymentRole: arn:aws:iam::XXXXXX:role/role\n  stackPolicy:\n    - Effect: Allow\n      Principal: '*'\n      Action: 'Update:*'\n      Resource: '*'\n    - Effect: Deny\n      Principal: '*'\n      Resource: '*'\n      Action:\n        - Update:Replace\n        - Update:Delete\n      Condition:\n        StringEquals:\n          ResourceType:\n            - AWS::EC2::Instance\n```\n\n----------------------------------------\n\nTITLE: Integrating AWS Secrets Manager with Serverless Framework\nDESCRIPTION: Configuration showing how to reference AWS Secrets Manager secrets through SSM. This example demonstrates accessing both regular SSM parameters and Secrets Manager values in the custom section.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: hello\n    handler: handler.hello\ncustom:\n  secret: ${ssm:/path/to/secureparam}\n  # AWS Secrets manager parameter\n  supersecret: ${ssm:/aws/reference/secretsmanager/secret_ID_in_Secrets_Manager}\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Global Schema Models in Serverless Framework\nDESCRIPTION: Configuration for defining global schema models at the provider level to reuse them across different events. Global models are created for the application/json content type.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n    ...\n    apiGateway:\n      request:\n        schemas:\n          post-create-model:\n            name: PostCreateModel\n            schema: ${file(api_schema/post_add_schema.json)}\n            description: \"A Model validation for adding posts\"\n\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          request:\n            schemas:\n              application/json: post-create-model\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table in Serverless YAML\nDESCRIPTION: YAML configuration for creating a DynamoDB table with a string primary key and pay-per-request billing mode.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  Resources:\n    CustomerTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: primary_key\n            AttributeType: S\n        BillingMode: PAY_PER_REQUEST\n        KeySchema:\n          - AttributeName: primary_key\n            KeyType: HASH\n        TableName: ${self:service}-customerTable-${sls:stage}\n```\n\n----------------------------------------\n\nTITLE: Customizing CloudFormation Resources in Serverless Framework\nDESCRIPTION: YAML configuration for customizing the AWS CloudFormation template in Serverless Framework. Demonstrates how to define Resources (like DynamoDB tables), extend existing resources, and create Outputs for cross-service references.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\n# Insert raw CloudFormation (resources, outputs‚Ä¶) in the deployed template\nresources:\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\n  extensions:\n    # override Properties or other attributes of Framework-created resources.\n    # See https://serverless.com/framework/docs/providers/aws/guide/resources#override-aws-cloudformation-resource for more details\n    UsersCreateLogGroup:\n      Properties:\n        RetentionInDays: '30'\n\n  # The \"Outputs\" that your AWS CloudFormation Stack should produce.  This allows references between services.\n  Outputs:\n    UsersTableArn:\n      Description: The ARN for the User's Table\n      Value: !GetAtt usersTable.Arn\n      Export:\n        # see Fn::ImportValue to use in other services\n        # and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.\n        Name: ${self:service}:${sls:stage}:UsersTableArn\n```\n\n----------------------------------------\n\nTITLE: Deploying Individual AWS Lambda Functions\nDESCRIPTION: Command to deploy code changes to a specific AWS Lambda function quickly without triggering a full CloudFormation update.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nserverless deploy function -f my-api\n```\n\n----------------------------------------\n\nTITLE: Advanced Observability Configuration with Custom Settings\nDESCRIPTION: Extended configuration example demonstrating how to enable observability with custom settings. This snippet shows how to specify a provider and include additional configuration properties.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prod:\n    observability:\n      provider: dashboard\n      # additional configuration options for the chosen provider\n      exampleSetting: customValue\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authorizers for HTTP API in Serverless YAML\nDESCRIPTION: Demonstrates how to set up JWT authorizers for HTTP API endpoints, including issuer URL and audience configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  httpApi:\n    authorizers:\n      someJwtAuthorizer:\n        type: jwt\n        identitySource: $request.header.Authorization\n        issuerUrl: https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}\n        audience:\n          - ${client1Id}\n          - ${client2Id}\n\nfunctions:\n  someFunction:\n    handler: index.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /some-post\n          authorizer:\n            name: someJwtAuthorizer\n            scopes: # Optional\n              - user.id\n              - user.email\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variable Syntax in YAML\nDESCRIPTION: Demonstrates the basic syntax for using variables in serverless.yml, including providing default values as the second parameter.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml file\nyamlKeyXYZ: ${provider:resolver:key} # see list of current resolver providers below\n# this is an example of providing a default value as the second parameter\notherYamlKey: ${provider:resolver:key, defaultValue}\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda General Settings Configuration\nDESCRIPTION: Global Lambda function settings including runtime, memory, timeout, and environment variables configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  runtime: nodejs20.x\n  runtimeManagement: auto\n  memorySize: 512\n  timeout: 10\n  environment:\n    APP_ENV_VARIABLE: FOOBAR\n  logRetentionInDays: 14\n  logDataProtectionPolicy:\n    Name: data-protection-policy\n  kmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash\n  lambdaHashingVersion: 20201221\n  versionFunctions: false\n  architecture: x86_64\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Service\nDESCRIPTION: Commands for navigating to service directory and deploying to AWS\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncd [your-new-service-name]\n```\n\nLANGUAGE: text\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Resource Naming Pattern Table\nDESCRIPTION: A comprehensive table showing the naming patterns for different AWS Lambda resources including functions, URLs, versions, log groups, permissions for various triggers, and event rules. Each row contains the pattern template and a concrete example.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/resources.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Lambda::Function                | {normalizedFunctionName}LambdaFunction                                      | HelloLambdaFunction |\n| Lambda::Url                     | {normalizedFunctionName}LambdaFunctionUrl                                   | HelloLambdaFunctionUrl |\n| Lambda::Version                 | {normalizedFunctionName}LambdaVersion{sha256}                              | HelloLambdaVersionr3pgoTvv1xT4E4NiCL6JG02fl6vIyi7OS1aW0FwAI |\n| Logs::LogGroup                  | {normalizedFunctionName}LogGroup                                           | HelloLogGroup |\n| Lambda::Permission              | <ul><li>**Schedule**: {normalizedFunctionName}LambdaPermissionEventsRuleSchedule{index}</li><li>**CloudWatch Event**: {normalizedFunctionName}LambdaPermissionEventsRuleCloudWatchEvent{index}</li><li>**CloudWatch Log**: {normalizedFunctionName}LambdaPermissionLogsSubscriptionFilterCloudWatchLog{index}</li><li>**IoT**: {normalizedFunctionName}LambdaPermissionIotTopicRule{index}</li><li>**S3**: {normalizedFunctionName}LambdaPermission{normalizedBucketName}S3</li><li>**APIG**: {normalizedFunctionName}LambdaPermissionApiGateway</li><li>**SNS**: {normalizedFunctionName}LambdaPermission{normalizedTopicName}SNS</li><li>**Alexa Skill**: {normalizedFunctionName}LambdaPermissionAlexaSkill</li><li>**Alexa Smart Home**: {normalizedFunctionName}LambdaPermissionAlexaSmartHome{index}</li><li>**Cognito User Pool Trigger Source**: {normalizedFunctionName}LambdaPermissionCognitoUserPool{normalizedPoolId}TriggerSource{triggerSource}</li></ul> | <ul><li>**Schedule**: HelloLambdaPermissionEventsRuleSchedule1</li><li>**CloudWatch Event**: HelloLambdaPermissionEventsRuleCloudWatchEvent1</li><li>**CloudWatch Log**: HelloLambdaPermissionLogsSubscriptionFilterCloudWatchLog1</li><li>**IoT**: HelloLambdaPermissionIotTopicRule1</li><li>**S3**: HelloLambdaPermissionBucketS3</li><li>**APIG**: HelloLambdaPermissionApiGateway</li><li>**SNS**: HelloLambdaPermissionTopicSNS</li><li>**Alexa Skill**: HelloLambdaPermissionAlexaSkill</li><li>**Alexa Smart Home**: HelloLambdaPermissionAlexaSmartHome1</li><li>**Cognito User Pool Trigger Source**: HelloLambdaPermissionCognitoUserPoolMyPoolTriggerSourceCustomMessage</li></ul> |\n| Events::Rule                    | <ul><li>**Schedule**: {normalizedFunctionName}EventsRuleSchedule{SequentialID}</li><li>**CloudWatch Event**: {normalizedFunctionName}EventsRuleCloudWatchEvent{SequentialID}</li></ul> | <ul><li>**Schedule**: HelloEventsRuleSchedule1</li><li>**CloudWatch Event**: HelloEventsRuleCloudWatchEvent1</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Integrating Amazon EFS with Lambda in Serverless Framework\nDESCRIPTION: Demonstrates how to configure Amazon EFS with Lambda functions by specifying fileSystemConfig with ARN and local mount path. This requires VPC configuration with security groups and subnets.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: service-name\nprovider: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    fileSystemConfig:\n      localMountPath: /mnt/example\n      arn: arn:aws:elasticfilesystem:us-east-1:111111111111:access-point/fsap-0d0d0d0d0d0d0d0d0\n    vpc:\n      securityGroupIds:\n        - securityGroupId1\n      subnetIds:\n        - subnetId1\n```\n\n----------------------------------------\n\nTITLE: Configuring an HTTP Endpoint with Extended Options in YAML\nDESCRIPTION: Defines a POST endpoint at /posts/create that triggers the create Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n```\n\n----------------------------------------\n\nTITLE: API Gateway v1 REST API Event Configuration\nDESCRIPTION: Configuration for REST API endpoints using API Gateway v1, including CORS, authorization, and request/response mapping.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    events:\n      - http:\n          path: users/create\n          method: get\n          cors: true\n          private: true\n          authorizer:\n            name: authorizerFunc\n            arn: xxx:xxx:Lambda-Name\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: someRegex\n            type: token\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Lambda Functions\nDESCRIPTION: Demonstrates how to invoke AWS Lambda functions using the Serverless CLI, including options for displaying logs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke -f hello\n\n# Invoke and display logs:\nserverless invoke -f hello --log\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration with Usage Plans\nDESCRIPTION: Demonstrates how to configure API keys with usage plans, including quotas and throttling settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nprovider:\n  name: aws\n  apiGateway:\n    apiKeys:\n      - free:\n          - myFreeKey\n          - ${opt:stage}-myFreeKey\n      - paid:\n          - myPaidKey\n          - ${opt:stage}-myPaidKey\n    usagePlan:\n      - free:\n          quota:\n            limit: 5000\n            offset: 2\n            period: MONTH\n          throttle:\n            burstLimit: 200\n            rateLimit: 100\n      - paid:\n          quota:\n            limit: 50000\n            offset: 1\n            period: MONTH\n          throttle:\n            burstLimit: 2000\n            rateLimit: 1000\nfunctions:\n  hello:\n    events:\n      - http:\n          path: user/create\n          method: get\n          private: true\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Settings for Lambda Functions\nDESCRIPTION: This snippet illustrates how to add VPC configuration to Lambda functions, specifying security group IDs and subnet IDs at both the function and provider levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: service-name\nprovider: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    vpc:\n      securityGroupIds:\n        - securityGroupId1\n        - securityGroupId2\n      subnetIds:\n        - subnetId1\n        - subnetId2\n```\n\n----------------------------------------\n\nTITLE: AWS Provider General Settings Configuration\nDESCRIPTION: Core AWS provider settings including deployment configuration, stack settings, and CloudFormation parameters.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  stage: dev\n  region: us-east-1\n  profile: production\n  stackName: custom-stack-name\n  tags:\n    foo: bar\n    baz: qux\n  stackTags:\n    key: value\n  deploymentMethod: direct\n  notificationArns:\n    - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'\n  stackParameters:\n    - ParameterKey: 'Keyname'\n      ParameterValue: 'Value'\n  disableRollback: true\n  resolver: aws-account-1\n  rollbackConfiguration:\n    MonitoringTimeInMinutes: 20\n    RollbackTriggers:\n      - Arn: arn:aws:cloudwatch:us-east-1:000000000000:alarm:health\n        Type: AWS::CloudWatch::Alarm\n      - Arn: arn:aws:cloudwatch:us-east-1:000000000000:alarm:latency\n        Type: AWS::CloudWatch::Alarm\n  tracing:\n    apiGateway: true\n    lambda: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduled EventBridge Events in YAML\nDESCRIPTION: Sets up a Lambda function to be triggered by EventBridge on a scheduled interval with custom input data.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          schedule: rate(10 minutes)\n          input:\n            key1: value1\n```\n\n----------------------------------------\n\nTITLE: Deploying a Serverless Service to AWS\nDESCRIPTION: Command to deploy the Serverless Framework service to AWS, which creates or updates all defined cloud resources and deploys code.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Permissions for DynamoDB\nDESCRIPTION: YAML configuration for setting up IAM role permissions to allow Lambda functions to interact with DynamoDB.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  iam:\n    role:\n      statements:\n        - Effect: 'Allow'\n          Action:\n            - 'dynamodb:PutItem'\n            - 'dynamodb:Get*'\n            - 'dynamodb:Scan*'\n            - 'dynamodb:UpdateItem'\n            - 'dynamodb:DeleteItem'\n          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}\n```\n\n----------------------------------------\n\nTITLE: Setting TumblingWindowInSeconds for AWS Lambda Stream Events\nDESCRIPTION: This configuration enables near-realtime value aggregation with state passing between Lambda invocations. It uses the 'tumblingWindowInSeconds' property to set the tumbling window duration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n          tumblingWindowInSeconds: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Kinesis Stream Event with BatchSize and StartingPosition in YAML\nDESCRIPTION: This snippet shows how to configure a Kinesis stream event with specific batch size, starting position, and maximum retry attempts for an AWS Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          startingPosition: LATEST\n          maximumRetryAttempts: 10\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Lambda Deployment Command\nDESCRIPTION: The simplest form of deployment command that deploys service to the default stage (dev) and region (us-east-1).\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Individual AWS Lambda Functions with Serverless Framework\nDESCRIPTION: The basic command for deploying an individual AWS Lambda function without using CloudFormation. This provides faster development cycles by swapping out only the function's zip file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-function.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function -f functionName\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Plugin via CLI\nDESCRIPTION: Command to install a Serverless Framework plugin using the built-in plugin installation command. This automatically installs the plugin via NPM and registers it in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin install -n custom-serverless-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeral Storage for Lambda Functions\nDESCRIPTION: Shows how to increase the ephemeral storage allocated to Lambda functions beyond the default 512 MB. The ephemeralStorageSize property accepts values between 512 and 10240 MB.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  helloEphemeral:\n    handler: handler.handler\n    ephemeralStorageSize: 1024\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Serverless YAML\nDESCRIPTION: Demonstrates configuration of environment variables at both function and provider levels, showing inheritance and override behavior.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  environment:\n    SYSTEM_NAME: mySystem\n    TABLE_NAME: tableName1\n\nfunctions:\n  hello:\n    handler: handler.hello\n  users:\n    handler: handler.users\n    environment:\n      TABLE_NAME: tableName2\n```\n\n----------------------------------------\n\nTITLE: Local Function Invocation\nDESCRIPTION: Commands to invoke Lambda functions locally with optional data passing capability.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke local -f my-api\n```\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke local --function functionName --data '{\"a\":\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage-Specific Parameters\nDESCRIPTION: Definition of stage-specific configurations including observability settings and environment-specific parameters for production and development environments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: billing\n\nstages:\n  prod:\n    observability: true\n    params:\n      stripe_api_key: ${env:PROD_STRIPE_API_KEY}\n\n  default:\n    observability: false\n    params:\n      stripe_api_key: ${env:DEV_STRIPE_API_KEY}\n```\n\n----------------------------------------\n\nTITLE: Complex Input Types Configuration\nDESCRIPTION: Demonstrates different input type configurations including direct input, input paths, and input transformers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n```\n\n----------------------------------------\n\nTITLE: Local Invocation with JSON Data\nDESCRIPTION: Examples of invoking a function locally with JSON data passed directly or as raw string\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local --function functionName --data '{\"a\":\"bar\"}'\n\nserverless invoke local --function functionName --raw --data \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway Timeouts\nDESCRIPTION: Configuration to set the default API Gateway timeout for all endpoints and override it for specific function endpoints. Useful when you have requested an increase to API Gateway's integration timeout limit.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_66\n\nLANGUAGE: yml\nCODE:\n```\nprovider:\n  apiGateway:\n    timeoutInMillis: 10000 # Default timeout of 10 seconds for all endpoints\n\nfunctions:\n  fetch:\n    handler: handler.hello\n    events:\n      - http:\n          path: /posts/{id}\n          method: get\n  create:\n    handler: handler.bye\n    events:\n      - http:\n          path: /posts\n          method: post\n          timeoutInMillis: 40000 # Override: 40-second timeout for this endpoint\n```\n\n----------------------------------------\n\nTITLE: Using Git Variables in Serverless Framework Configuration\nDESCRIPTION: Example demonstrating how to reference Git variables in a serverless.yml file. This snippet shows how to dynamically include Git branch names in function names and commit messages in function descriptions using the ${git:<variable>} syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/git.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nfunctions:\n  hello:\n    name: hello-${git:branch}\n    handler: handler.hello\n    description: ${git:message}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IAM Roles for Individual Lambda Functions in Serverless YAML\nDESCRIPTION: This snippet shows how to configure custom IAM roles for each Lambda function in a Serverless Framework YAML file. It defines separate roles with specific permissions for two functions, including logging and network interface management.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\n\nprovider:\n  name: aws\n  ... # does not define role\n\nfunctions:\n  func0:\n    role: myCustRole0\n    ...\n  func1:\n    role: myCustRole1\n    ...\n\nresources:\n  Resources:\n    myCustRole0:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/cust/path/\n        RoleName: MyCustRole0\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:TagResource\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                - Effect: Allow\n                  Action:\n                    - ec2:CreateNetworkInterface\n                    - ec2:DescribeNetworkInterfaces\n                    - ec2:DetachNetworkInterface\n                    - ec2:DeleteNetworkInterface\n                  Resource: \"*\"\n    myCustRole1:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/cust/path/\n        RoleName: MyCustRole1\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:TagResource\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      -\n                        - 'arn:aws:logs'\n                        - Ref: 'AWS::Region'\n                        - Ref: 'AWS::AccountId'\n                        - 'log-group:/aws/lambda/*:*:*'\n                -  Effect: \"Allow\"\n                   Action:\n                     - \"s3:PutObject\"\n                   Resource:\n                     Fn::Join:\n                       - \"\"\n                       - - \"arn:aws:s3:::\"\n                         - \"Ref\" : \"ServerlessDeploymentBucket\"\n```\n\n----------------------------------------\n\nTITLE: Setting Specific S3 Trigger Event for AWS Lambda in YAML\nDESCRIPTION: This configuration creates an S3 bucket and sets up a Lambda function to be triggered when an object is removed from the bucket. It demonstrates how to specify a particular S3 event type.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - s3:\n          bucket: photos\n          event: s3:ObjectRemoved:*\n```\n\n----------------------------------------\n\nTITLE: Defining ALB Event for AWS Lambda in Serverless Framework\nDESCRIPTION: This snippet shows how to define an Application Load Balancer event for a Lambda function in the Serverless Framework configuration. It specifies the listener ARN, priority, and path condition.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            path: /hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Dependencies and Variable Sharing in Compose\nDESCRIPTION: Demonstrates how to set up dependencies between services and share outputs from one service to another using the ${service.output} syntax. This allows for ordered deployments and resource sharing.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n    params:\n      queueUrl: ${service-a.queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Sharing API Gateway Across Multiple Serverless Services in YAML\nDESCRIPTION: This snippet shows how to reference an existing API Gateway in your Serverless service by specifying the REST API ID and Root Resource ID. This allows multiple services to share the same API Gateway.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  apiGateway:\n    restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework\n    restApiRootResourceId: xxxxxxxxxx # Root resource, represent as / path\n    websocketApiId: xxxxxxxxxx # Websocket API resource ID. Default is generated by the framework\n    description: Some Description # optional - description of deployment history\n\nfunctions: ...\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Resolver in Serverless Configuration\nDESCRIPTION: Example of how to define an AWS Resolver in the serverless.yml file. This snippet shows how to specify AWS credentials and configuration options like region and profile within a Resolver.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/credentials.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      aws-account-1:\n        type: aws\n        profile: account1-profile-name\n        region: us-west-2\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP API Events in Serverless YAML\nDESCRIPTION: Demonstrates how to set up simple and extended HTTP API events for Lambda functions in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  simple:\n    handler: handler.simple\n    events:\n      - httpApi: 'PATCH /elo'\n  extended:\n    handler: handler.extended\n    events:\n      - httpApi:\n          method: POST\n          path: /post/just/to/this/path\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function Locally with Context from JSON File\nDESCRIPTION: Example demonstrating how to invoke a function locally while passing context information from a JSON file. The path is relative to the service's root directory.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local --function functionName \\\n  --contextPath lib/context.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Invocation Destinations in Serverless Framework\nDESCRIPTION: Demonstrates how to set up success and failure destinations for asynchronously invoked Lambda functions. Destinations can be other functions in the service or external resources specified by ARN.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  asyncHello:\n    handler: handler.asyncHello\n    destinations:\n      onSuccess: otherFunctionInService\n      onFailure: arn:aws:sns:us-east-1:xxxx:some-topic-name\n  asyncGoodBye:\n    handler: handler.asyncGoodBye\n    destinations:\n      onFailure:\n        # For the case using CF intrinsic function for `arn`, to ensure target execution permission exactly, you have to specify `type` from 'sns', 'sqs', 'eventBus', 'function'.\n        type: sns\n        arn:\n          Ref: SomeTopicName\n```\n\n----------------------------------------\n\nTITLE: Complete Custom IAM Role Configuration\nDESCRIPTION: Comprehensive example showing a complete custom IAM role setup with VPC access, logging permissions, and S3 deployment bucket access.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\n\nprovider:\n  name: aws\n  iam:\n    role: myDefaultRole\n\nfunctions:\n  func0: # will assume 'myDefaultRole'\n    ... # does not define role\n  func1: # will assume 'myDefaultRole'\n    ... # does not define role\n\nresources:\n  Resources:\n    myDefaultRole:\n      Type: AWS::IAM::Role\n      Properties:\n        Path: /my/default/path/\n        RoleName: MyDefaultRole\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action: sts:AssumeRole\n        ManagedPolicyArns:\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n        Policies:\n          - PolicyName: myPolicyName\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                    - logs:TagResource\n                  Resource:\n                    - 'Fn::Join':\n                      - ':'\n                      - ['arn:aws:logs', Ref: 'AWS::Region', Ref: 'AWS::AccountId', 'log-group:/aws/lambda/*:*:*']\n                - Effect: \"Allow\"\n                  Action:\n                    - \"s3:PutObject\"\n                  Resource:\n                    Fn::Join:\n                      - \"\"\n                      - - \"arn:aws:s3:::\"\n                        - \"Ref\" : \"ServerlessDeploymentBucket\"\n```\n\n----------------------------------------\n\nTITLE: Using the Serverless Dev Command in Bash\nDESCRIPTION: The basic command to activate a development session on AWS Lambda, which establishes a connection to test functions locally while they run remotely.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/dev.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless dev\n```\n\n----------------------------------------\n\nTITLE: Custom IAM Role ARN Configuration\nDESCRIPTION: Shows how to specify a custom IAM role using an ARN directly in the provider configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  iam:\n    role: arn:aws:iam::123456789012:role/execution-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced CloudFront Origin in YAML\nDESCRIPTION: This YAML snippet demonstrates a more detailed CloudFront origin configuration using CloudFormation syntax. It includes custom domain and origin path settings for the Lambda@Edge function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /docs*\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple CloudFront Origins in YAML\nDESCRIPTION: This YAML configuration shows how to set up multiple origins for CloudFront events, including setting a default origin using the isDefaultOrigin flag. It demonstrates configuring different path patterns for different Lambda@Edge functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /files*\n          isDefaultOrigin: true\n          origin: s3://bucketname.s3.amazonaws.com/files\n  mySecondLambdaAtEdge:\n    handler: mySecondLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /docs*\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Events for AWS Lambda Function in YAML\nDESCRIPTION: Shows how to set up multiple HTTP events (POST, PUT, DELETE) for a single AWS Lambda function using the Serverless Framework. This example demonstrates CRUD operations for a user management system.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/events.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  createUser:\n    handler: handler.users\n    events:\n      - httpApi: 'POST /users/create'\n      - httpApi: 'PUT /users/update'\n      - httpApi: 'DELETE /users/delete'\n```\n\n----------------------------------------\n\nTITLE: Defining Events Array in External YAML File\nDESCRIPTION: Example of defining an events array in an external YAML file that can be referenced in the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyevents:\n  - schedule:\n      rate: rate(1 minute)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Schedule Events in YAML\nDESCRIPTION: This snippet demonstrates how to attach multiple schedule events to a single Lambda function using both rate and cron syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/schedule.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  crawl:\n    handler: crawl\n    events:\n      - schedule: rate(2 hours)\n      - schedule: cron(0 12 * * ? *)\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework Features List - Markdown\nDESCRIPTION: A comprehensive list of key features offered by the Serverless Framework, including build automation, deployment management, and local development capabilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Build More, Manage Less:** Innovate faster by spending less time on infrastructure management.\n- **Maximum Versatility:** Tackle diverse serverless use cases, from APIs and scheduled tasks to web sockets and data pipelines.\n- **Automated Deployment:** Streamline development with code and infrastructure deployment handled together.\n- **Local Development:** Route events from AWS to your local AWS Lambda code to develop faster without having to deploy every change.\n- **Ease of Use:** Deploy complex applications without deep cloud infrastructure expertise, thanks to simple YAML configuration.\n```\n\n----------------------------------------\n\nTITLE: Complete Serverless Websocket Configuration\nDESCRIPTION: Full YAML configuration showing all websocket route types and custom API settings\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/websocket.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: serverless-ws-test\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  websocketsApiName: custom-websockets-api-name\n  websocketsApiRouteSelectionExpression: $request.body.action\n  websocketsDescription: Custom Serverless Websockets\n\nfunctions:\n  connectionHandler:\n    handler: handler.connectionHandler\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n  defaultHandler:\n    handler: handler.defaultHandler\n    events:\n      - websocket: $default\n  customFooHandler:\n    handler: handler.fooHandler\n    events:\n      - websocket:\n          route: foo\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Customers Lambda Function\nDESCRIPTION: JavaScript function to retrieve all customers from DynamoDB using the scan operation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\nconst AWS = require('aws-sdk')\n\nmodule.exports.getCustomers = async (event) => {\n  const scanParams = {\n    TableName: process.env.DYNAMODB_CUSTOMER_TABLE,\n  }\n\n  const dynamodb = new AWS.DynamoDB.DocumentClient()\n  const result = await dynamodb.scan(scanParams).promise()\n\n  if (result.Count === 0) {\n    return {\n      statusCode: 404,\n    }\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      total: result.Count,\n      items: await result.Items.map((customer) => {\n        return {\n          name: customer.primary_key,\n          email: customer.email,\n        }\n      }),\n    }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing Properties in Serverless YAML Configuration\nDESCRIPTION: This example demonstrates how to self-reference properties within a serverless.yml file using the ${self:someProperty} syntax. It shows cross-referencing between different configuration sections, including referencing the service name, creating derived values in the custom section, and applying shared schedules across multiple functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/self.md#2025-04-16_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nservice: new-service\nprovider: aws\ncustom:\n  globalSchedule: rate(10 minutes)\n  # the following example purposely demonstrates the ability for a variable to cross reference another one\n  serviceName: ${self:service}\n  exportName: ${self:custom.serviceName}-export\n  # or simply\n  # exportName: ${self:service}-export\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule: ${self:custom.globalSchedule}\n  world:\n    handler: handler.world\n    events:\n      - schedule: ${self:custom.globalSchedule}\nresources:\n  Outputs:\n    NewServiceExport:\n      Value: 'A Value To Export'\n      Export:\n        Name: ${self:custom.exportName}\n```\n\n----------------------------------------\n\nTITLE: Function Layer Integration\nDESCRIPTION: Shows how to use layers with Lambda functions using ARNs and CloudFormation Refs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlayers:\n  test:\n    path: layer\nfunctions:\n  hello:\n    handler: handler.hello\n    layers:\n      - !Ref TestLambdaLayer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw SSM Parameter Values in Serverless Framework\nDESCRIPTION: Configuration for retrieving SSM parameter values in their raw form without automatic parsing or transformation. This is useful when you need array values (StringList) to be returned as strings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        rawSsm:\n          type: ssm\n          rawOrDecrypt: raw\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:rawSsm:/path/to/param}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Path Resources in Shared API Gateway with Service-B in YAML\nDESCRIPTION: This snippet shows how 'service-b' can create a POST endpoint at /posts/{id}/comments under the same shared API Gateway as 'service-a', demonstrating how multiple services can work with the same parent paths.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-b\nprovider:\n  apiGateway:\n    restApiId: xxxxxxxxxx\n    restApiRootResourceId: xxxxxxxxxx\n    websocketApiId: xxxxxxxxxx\n    description: Some Description\n\nfunctions:\n  create:\n    handler: posts.createComment\n    events:\n      - http:\n          method: post\n          path: /posts/{id}/comments\n```\n\n----------------------------------------\n\nTITLE: Setting FunctionResponseTypes for AWS Lambda Stream Events\nDESCRIPTION: This configuration allows automatic checkpointing of successfully processed records for Amazon Kinesis and Amazon DynamoDB Streams. It uses the 'functionResponseType' property set to 'ReportBatchItemFailures'.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n          functionResponseType: ReportBatchItemFailures\n```\n\n----------------------------------------\n\nTITLE: Deploying SQS Queue with Lift Plugin in YAML\nDESCRIPTION: This example demonstrates how to use the Lift plugin to deploy an SQS queue along with its Lambda consumer function in the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sqs.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconstructs:\n  my-queue:\n    type: queue\n    worker:\n      handler: handler.compute\n\nplugins:\n  - serverless-lift\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Tags in Serverless YAML\nDESCRIPTION: Shows how to add key-value tags to Lambda functions for better organization and cost tracking, including provider-level and function-level tag configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  tags:\n    foo: bar\n    baz: qux\n\nfunctions:\n  hello:\n    handler: handler.hello\n  users:\n    handler: handler.users\n    tags:\n      foo: quux\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Table in Serverless YAML\nDESCRIPTION: Example of defining an AWS DynamoDB table resource in serverless.yml using CloudFormation template syntax. The configuration creates a table named 'usersTable' with an email attribute as the hash key and provisions read/write capacity units.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/resources.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nservice: usersCrud\nprovider: aws\nfunctions:\n\nresources: # CloudFormation template syntax\n  Resources:\n    usersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: usersTable\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Link for Accessing Private Resources in API Gateway using YAML\nDESCRIPTION: This snippet shows how to access internal VPC resources using a VPC Link in an Edge Optimized or Regional API Gateway. It uses http-proxy integration with a connectionType of vpc-link to securely connect to internal resources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n- http:\n    path: v1/repository\n    method: get\n    integration: http-proxy\n    connectionType: vpc-link\n    connectionId: '{your-vpc-link-id}'\n    cors: true\n    request:\n      uri: http://www.github.com/v1/repository\n      method: get\n```\n\n----------------------------------------\n\nTITLE: Development Mode Command\nDESCRIPTION: Command to start development mode for local development with cloud integration\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nserverless dev\n```\n\n----------------------------------------\n\nTITLE: Instrumenting AWS SDK and Express.js in Node.js\nDESCRIPTION: Use serverlessSdk methods to instrument AWS SDK v2, v3, and Express.js for auto-instrumentation in bundled environments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst serverlessSdk = require('@serverless/aws-lambda-sdk')\n\n// Instrument AWS SDK v2\nserverlessSdk.instrumentation.awsSdkV2.install(AWS)\n\n// Instrument AWS SDK v3 client\nserverlessSdk.instrumentation.awsSdkV3Client.install(client)\n\n// Instruments Express.js\nconst expressApp = express()\n// Ensure you install the SDK instrumentation before\n// installing any express middleware\nserverlessSdk.instrumentation.expressApp.install(expressApp)\n```\n\n----------------------------------------\n\nTITLE: Creating an SNS Topic and Binding to Lambda Function in YAML\nDESCRIPTION: This snippet demonstrates how to create a new SNS topic named 'dispatch' and bind it to the 'dispatcher' Lambda function. The function will be triggered whenever a message is sent to the 'dispatch' topic.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns: dispatch\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Event with Filter Rules for AWS Lambda in YAML\nDESCRIPTION: This snippet shows how to set up an S3 event with filter rules. The Lambda function is triggered only when a .jpg file is uploaded to a specific folder in the bucket.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - s3:\n          bucket: photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n```\n\n----------------------------------------\n\nTITLE: Defining Outputs in serverless.yml\nDESCRIPTION: Example of defining outputs in a serverless.yml file. Outputs can include various YAML-supported values like strings, integers, lists, and nested dictionaries. Values are interpolated and saved during service deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/output-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutputs:\n  my-key: my-value\n  my-availability-zones:\n    - us-east-1a\n    - us-east-1b\n  my-table-name: DynamoDbTable-${self:custom.stage}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Status Codes in Lambda (JavaScript)\nDESCRIPTION: Illustrates how to return custom HTTP status codes from a Lambda function using the lambda-proxy integration. It shows setting the status code, body, and headers in the response object.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.hello = (event, context, callback) => {\n  callback(null, {\n    statusCode: 404,\n    body: 'Not found',\n    headers: { 'Content-Type': 'text/plain' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Integration in API Gateway with Serverless Framework in YAML\nDESCRIPTION: This snippet demonstrates how to create a mock integration for API Gateway without requiring a backend. It defines a simulated API method with response templates and status codes, useful for testing and development.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          cors: true\n          method: get\n          integration: mock\n          request:\n            template:\n              application/json: '{\"statusCode\": 200}'\n          response:\n            template: $input.path('$')\n            statusCodes:\n              201:\n                pattern: ''\n```\n\n----------------------------------------\n\nTITLE: Attaching Lambda to Existing Cognito User Pools in Serverless YAML\nDESCRIPTION: This YAML configuration shows how to attach a Lambda function to an existing Cognito User Pool using the Serverless Framework. It uses the 'existing' flag to indicate an existing pool.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - cognitoUserPool:\n          pool: legacy-user-pool\n          trigger: CustomMessage\n          existing: true\n```\n\n----------------------------------------\n\nTITLE: External Lambda Authorizer Configuration\nDESCRIPTION: Shows how to reference an external Lambda authorizer using its ARN instead of a function name.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer: xxx:xxx:Lambda-Name\n```\n\n----------------------------------------\n\nTITLE: Configuring Pass Through Behavior in Serverless YAML\nDESCRIPTION: Shows how to configure the pass-through behavior for API Gateway when the Content-Type doesn't match any defined mapping templates. It explains the available options and their implications.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: get\n          path: whatever\n          integration: lambda\n          request:\n            passThrough: NEVER\n```\n\n----------------------------------------\n\nTITLE: Raising HTTP Status Codes in Lambda (JavaScript)\nDESCRIPTION: Shows how to raise specific HTTP status codes by including them in square brackets in the error message returned by the Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.hello = (event, context, callback) => {\n  callback(new Error('[404] Not found'))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Progress Indicators\nDESCRIPTION: How to create and manage interactive progress indicators in Serverless Framework plugins for long-running tasks, with methods to update and remove the indicators.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, cliOptions, { progress }) {\n    const myProgress = progress.create({\n      message: 'Doing extra work in my-plugin',\n    })\n    // ...\n    myProgress.update('Almost finished')\n    // ...\n    myProgress.remove()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Response Templates in Serverless YAML\nDESCRIPTION: Shows how to define a custom response template for transforming Lambda function output in API Gateway. This example demonstrates setting a content type and using a simple template.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: get\n          path: whatever\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n```\n\n----------------------------------------\n\nTITLE: Websocket Client Message Handler Implementation\nDESCRIPTION: JavaScript implementation for sending messages to websocket clients using AWS API Gateway Management API\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/websocket.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendMessageToClient = (url, connectionId, payload) =>\n  new Promise((resolve, reject) => {\n    const apigatewaymanagementapi = new AWS.ApiGatewayManagementApi({\n      apiVersion: '2018-11-29',\n      endpoint: url,\n    })\n    apigatewaymanagementapi.postToConnection(\n      {\n        ConnectionId: connectionId,\n        Data: JSON.stringify(payload),\n      },\n      (err, data) => {\n        if (err) {\n          console.log('err is', err)\n          reject(err)\n        }\n        resolve(data)\n      },\n    )\n  })\n\nmodule.exports.defaultHandler = async (event, context) => {\n  const domain = event.requestContext.domainName\n  const stage = event.requestContext.stage\n  const connectionId = event.requestContext.connectionId\n  const callbackUrlForAWS = util.format(\n    util.format('https://%s/%s', domain, stage),\n  )\n  await sendMessageToClient(callbackUrlForAWS, connectionId, event)\n\n  return {\n    statusCode: 200,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared JWT Authorizer Configuration\nDESCRIPTION: Setup for shared JWT authorizer with multiple function endpoints and Cognito integration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhttpApi:\n    id: xxxx\n\nfunctions:\n  createUser:\n    events:\n      - httpApi:\n          path: /users\n          authorizer:\n            type: jwt\n            id:\n              Ref: ApiGatewayAuthorizer\n            scopes:\n              - myapp/myscope\n\n  deleteUser:\n    events:\n      - httpApi:\n          path: /users/{userId}\n          authorizer:\n            type: jwt\n            id:\n              Ref: ApiGatewayAuthorizer\n            scopes:\n              - myapp/anotherscope\n\nresources:\n  Resources:\n    ApiGatewayAuthorizer:\n      Type: AWS::ApiGatewayV2::Authorizer\n      Properties:\n        ApiId:\n          Ref: YourApiGatewayName\n        AuthorizerType: JWT\n        IdentitySource:\n          - $request.header.Authorization\n        JwtConfiguration:\n          Audience:\n            - Ref: YourCognitoUserPoolClientName\n          Issuer:\n            Fn::Join:\n              - \"\"\n              - - \"https://cognito-idp.\"\n                - \"${opt:region, self:provider.region}\"\n                - \".amazonaws.com/\"\n                - Ref: YourCognitoUserPoolName\n```\n\n----------------------------------------\n\nTITLE: Using CLI Parameters in Serverless Configuration\nDESCRIPTION: Example of how to reference CLI parameters in the serverless.yml file using the ${param:XXX} variable syntax. This allows dynamic configuration of environment variables based on parameters passed during deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    APP_DOMAIN: ${param:domain}\n    KEY: ${param:key}\n```\n\n----------------------------------------\n\nTITLE: Setting SQS Event Batch Size and Window in YAML\nDESCRIPTION: This snippet shows how to configure the batch size, maximum batching window, and function response type for an SQS event trigger in the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sqs.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          batchSize: 10\n          maximumBatchingWindow: 60\n          functionResponseType: ReportBatchItemFailures\n```\n\n----------------------------------------\n\nTITLE: Streaming Logs for an AWS Lambda Function\nDESCRIPTION: This command streams all logs for a specific Function, providing real-time insight into function execution and behavior.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserverless logs -f [FUNCTION NAME] -s [STAGE NAME] -r [REGION NAME]\n```\n\n----------------------------------------\n\nTITLE: Applying Filter Policy to SNS Subscription in YAML\nDESCRIPTION: This snippet shows how to apply a filter policy to an SNS subscription. The filter policy filters messages that don't have the attribute key 'pet' with value 'dog' or 'cat'.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  pets:\n    handler: pets.handler\n    events:\n      - sns:\n          topicName: pets\n          filterPolicy:\n            pet:\n              - dog\n              - cat\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Viewing Examples - Bash\nDESCRIPTION: Examples showing various log viewing commands with different options like time ranges, tailing, and filtering.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/logs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless logs -f hello\nserverless logs -f hello --startTime 5h\nserverless logs -f hello --startTime 1469694264\nserverless logs -f hello -t\nserverless logs -f hello --filter serverless\n```\n\n----------------------------------------\n\nTITLE: Overriding AWS::Logs::LogGroup Retention in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to override the AWS::Logs::LogGroup resource to set a custom retention period of 30 days. It showcases the naming convention for normalized function names and the structure of the resources.extensions section.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/resources.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  write-post:\n    handler: handler.writePost\n    events:\n      - httpApi: 'POST /api/posts/new'\n\nresources:\n  extensions:\n    WriteDashPostLogGroup:\n      Properties:\n        RetentionInDays: '30'\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Lambda Function Metrics for a Specific Function\nDESCRIPTION: This command shows all metrics for a specific function named 'hello' for the last 24 hours. It uses the --function option to specify the function name.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless metrics --function hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Observability Settings in Serverless YAML\nDESCRIPTION: Configuration for enabling observability features (metrics, traces, logs) per stage in the serverless.yml file. Allows granular control over which deployment stages have observability enabled.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prod:\n    observability: true # turn on observability in the \"prod\" Stage.\n  dev:\n    observability: true # turn on observability in the \"dev\" Stage.\n  default:\n    observability: false # turn off observability for all other Stages.\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Options for Kafka\nDESCRIPTION: Example showing all possible authentication configuration options for connecting Lambda to Kafka including SASL, TLS, and VPC settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsaslPlainAuth: arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslPlain\nsaslScram256Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslScram256\nsaslScram512Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslScram512\nclientCertificateTlsAuth: arn:aws:secretsmanager:us-east-1:01234567890:secret:ClientCertificateTLS\nserverRootCaCertificate: arn:aws:secretsmanager:us-east-1:01234567890:secret:ServerRootCaCertificate\nvpcSubnet:\n  - subnet-0011001100\n  - subnet-0022002200\nvpcSecurityGroup: sg-0123456789\n```\n\n----------------------------------------\n\nTITLE: Referencing External YAML File in Serverless Configuration\nDESCRIPTION: Demonstrates how to reference an entire external YAML file and specific properties from it in the serverless.yml configuration. It also shows how to use the referenced properties in function definitions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: new-service\nprovider: aws\ncustom: ${file(./myCustomFile.yml)} # You can reference the entire file\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule: ${file(./myCustomFile.yml):globalSchedule} # Or you can reference a specific property\n  world:\n    handler: handler.world\n    events:\n      - schedule: ${self:custom.globalSchedule} # This would also work in this case\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Status Codes in Serverless YAML\nDESCRIPTION: Demonstrates how to configure custom status codes, including setting default responses, specifying patterns for code selection, and defining content-type specific templates for each status code.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: post\n          path: whatever\n          integration: lambda\n          response:\n            headers:\n              Content-Type: \"'text/html'\"\n            template: $input.path('$')\n            statusCodes:\n              201:\n                pattern: '' # Default response method\n              409:\n                pattern: '.*\"statusCode\":409,.*' # JSON response\n                template:\n                  application/json: $input.path(\"$.errorMessage\") # JSON return object\n                  application/xml: $input.path(\"$.body.errorMessage\") # XML return object\n                headers:\n                  Content-Type: \"'application/json+hal'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Span in JavaScript\nDESCRIPTION: Demonstrates how to create a custom span using the Serverless SDK. Spans are used to measure the duration of operations and can be nested within a trace.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst customSpan1 = serverlessSdk.createSpan('mySpan')\n// do some work\ncustomSpan1.close()\n```\n\n----------------------------------------\n\nTITLE: Example of Rolling Back AWS Lambda Function\nDESCRIPTION: This example demonstrates how to roll back a function named 'my-function' to version 23. It's recommended to first run 'serverless deploy list functions' to see all deployed functions and their versions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/rollback-function.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless rollback function -f my-function --function-version 23\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-Value Headers in AWS Lambda for ALB Event\nDESCRIPTION: This JavaScript code demonstrates how to handle multi-value headers in an AWS Lambda function when responding to an ALB event with multi-value headers enabled.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.hello = async (event, context, callback) => {\n  const headers = event.multiValueHeaders;\n  const queryString = event.multiValueQueryStringParameters;\n\n  ...\n\n  return {\n    statusCode: 200,\n    statusDescription: '200 OK',\n    isBase64Encoded: false,\n    multiValueHeaders: {\n      'Content-Type': ['application/json'],\n      'Set-Cookie': ['language=en-us', 'theme=rust']\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: WebSocket API Event Configuration\nDESCRIPTION: Configuration for WebSocket API endpoints including route selection and authorization settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    events:\n      - websocket:\n          route: $connect\n          routeResponseSelectionExpression: $default\n          authorizer:\n            name: auth\n            arn: arn:aws:lambda:us-east-1:1234567890:function:auth\n            identitySource:\n              - 'route.request.header.Auth'\n              - 'route.request.querystring.Auth'\n```\n\n----------------------------------------\n\nTITLE: Using CLI Options in Serverless Configuration\nDESCRIPTION: This snippet demonstrates how to reference CLI options in a serverless.yml file using the ${opt:<option>} syntax. It shows how to dynamically add a stage prefix to function names based on the --stage argument passed during deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/cli-options.md#2025-04-16_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: ${opt:stage}-hello\n    handler: handler.hello\n  world:\n    name: ${opt:stage}-world\n    handler: handler.world\n```\n\n----------------------------------------\n\nTITLE: Using Pre-existing SNS Topic with Lambda Function in YAML\nDESCRIPTION: This snippet shows how to use a pre-existing SNS topic by specifying its ARN. The framework will grant permission to the topic to invoke the function and subscribe the function to the topic.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns: arn:xxx\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns:\n          arn: arn:xxx\n```\n\n----------------------------------------\n\nTITLE: Basic SASL/SCRAM Kafka Event Configuration\nDESCRIPTION: Basic example showing how to configure a Lambda function with Kafka event source using SASL/SCRAM authentication.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            saslScram512Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\n          topic: MySelfManagedKafkaTopic\n          consumerGroupId: MyConsumerGroupId\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Serverless Framework Observability\nDESCRIPTION: Comprehensive markdown documentation explaining the tracing and monitoring capabilities of Serverless Framework Dashboard, including trace explorer, filtering, event types, and trace details analysis.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/traces.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\ntitle: Serverless Framework - Monitoring & Observability - Traces\ndescription: How to analyze traces, spans, logs, and events in Serverless Framework Dashboard.\nshort_title: Serverless Dashboard Observability - Traces\nkeywords:\n  [\n    'Serverless Framework',\n    'Monitoring',\n    'Observability',\n    'Traces',\n    'Spans',\n    'Logs',\n    'Events',\n  ]\n-->\n\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/guides/monitoring/trace-explorer/)\n\n<!-- DOCS-SITE-LINK:END -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Kinesis Data Streams Enhanced Fan-out in Serverless\nDESCRIPTION: This configuration demonstrates how to use Kinesis data streams enhanced fan-out. It creates a new stream consumer using the 'consumer' property set to true.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          consumer: true\n```\n\n----------------------------------------\n\nTITLE: Template Selection Interface for Serverless\nDESCRIPTION: The interactive CLI interface that appears when creating a new Serverless project, showing available templates for different languages and use cases.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nServerless œü Framework\nWelcome to Serverless Framework V.4\n\nCreate a new project by selecting a Template to generate scaffolding for a specific use-case.\n\n? Select A Template: ‚Ä¶\n‚ùØ AWS / Node.js / Starter\n  AWS / Node.js / HTTP API\n  AWS / Node.js / Scheduled Task\n  AWS / Node.js / SQS Worker\n  AWS / Node.js / Express API\n  AWS / Node.js / Express API with DynamoDB\n  AWS / Python / Starter\n  AWS / Python / HTTP API\n  AWS / Python / Scheduled Task\n  AWS / Python / SQS Worker\n  AWS / Python / Flask API\n  AWS / Python / Flask API with DynamoDB\n  (Scroll for more)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Parameters in API Gateway with Serverless Framework\nDESCRIPTION: Configuration for passing required and optional parameters to functions through API Gateway. Parameters marked as true are required, while false makes them optional.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          request:\n            parameters:\n              querystrings:\n                url: true\n              headers:\n                foo: false\n              paths:\n                bar: false\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Captured Errors in Node.js\nDESCRIPTION: Add tags to specific captured errors for more detailed context when reporting to Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.captureError(ex, { tags: { userId: '1b8b4c6b4b14' } })\n```\n\n----------------------------------------\n\nTITLE: Importing API Gateway Resources in Service-A with CloudFormation in YAML\nDESCRIPTION: This snippet shows how 'service-a' can import the exported API Gateway resources using CloudFormation's ImportValue function. This approach keeps the configuration DRY and simplifies maintenance.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-a\n\nprovider:\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': MyApiGateway-restApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': MyApiGateway-rootResourceId\n    websocketApiId:\n      'Fn::ImportValue': MyApiGateway-websocketApiId\n\nfunctions: service-a-functions\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Install Script in package.json\nDESCRIPTION: Configuration to run a custom script after npm install using the postinstall hook in package.json\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"demo-serverless\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"postinstall\": \"<your script>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Schedule Events with Options in YAML\nDESCRIPTION: This example shows how to create schedule events with additional options such as enabling/disabling, input parameters, and input transformers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/schedule.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  aggregate:\n    handler: statistics.handler\n    events:\n      - schedule:\n          rate: rate(10 minutes)\n          enabled: false\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n      - schedule:\n          rate: cron(0 12 * * ? *)\n          enabled: false\n          inputPath: '$.stageVariables'\n      - schedule:\n          rate: rate(2 hours)\n          enabled: true\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n```\n\n----------------------------------------\n\nTITLE: Referencing ECR Images in Lambda Functions\nDESCRIPTION: This snippet shows how to reference ECR images in Lambda function configurations. It demonstrates using both direct ECR image URIs and images defined in the provider section.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  ecr:\n    images:\n      baseimage:\n        path: ./path/to/context\n\nfunctions:\n  hello:\n    image: 000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38\n  world:\n    image: baseimage\n```\n\n----------------------------------------\n\nTITLE: Deploying All Changes in Serverless Service\nDESCRIPTION: This command deploys all changes within a Serverless service, including updates to Functions, Events, or Resources in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy -s [STAGE NAME] -r [REGION NAME] -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Load Balancer (ALB) in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to configure Application Load Balancer (ALB) settings in the Serverless Framework. It includes options for target group prefixes and various authorizer types such as Cognito and OIDC.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  alb:\n    # Optional prefix to prepend when generating names for target groups\n    targetGroupPrefix: xxxx\n    authorizers:\n      myFirstAuth:\n        type: 'cognito'\n        # Required\n        userPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341'\n        # Required\n        userPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE'\n        # Required\n        userPoolDomain: your-test-domain\n        # If set to 'allow' this allows the request to be forwarded to the target when user is not authenticated.\n        # When omitted it defaults 'deny' which makes a HTTP 401 Unauthorized error be returned.\n        # Alternatively configure to 'authenticate' to redirect request to IdP authorization endpoint.\n        onUnauthenticatedRequest: deny\n        # optional. The query parameters (up to 10) to include in the redirect request to the authorization endpoint\n        requestExtraParams:\n          prompt: login\n          redirect: false\n        # Combination of any system-reserved scopes or custom scopes associated with the client (default: openid)\n        scope: 'first_name age'\n        # Name of the cookie used to maintain session information (default: AWSELBAuthSessionCookie)\n        sessionCookieName: 'üç™'\n        # Maximum duration of the authentication session in seconds (default: 604800 seconds/7 days)\n        sessionTimeout: 7000\n      mySecondAuth:\n        type: oidc\n        # Required. The authorization endpoint of the IdP.\n        # Must be a full URL, including the HTTPS protocol, the domain, and the path\n        authorizationEndpoint: 'https://example.com'\n        # Required\n        clientId: i-am-client\n        # If creating a rule this is required\n        # If modifying a rule, this can be omitted if you set useExistingClientSecret to true (as below)\n        clientSecret: i-am-secret\n        # Only required if clientSecret is omitted\n        useExistingClientSecret: true\n        # Required. The OIDC issuer identifier of the IdP\n        # This must be a full URL, including the HTTPS protocol, the domain, and the path\n        issuer: 'https://www.iamscam.com'\n        # Required\n        tokenEndpoint: 'http://somewhere.org'\n        # Required\n        userInfoEndpoint: 'https://another-example.com'\n        # If set to 'allow' this allows the request to be forwarded to the target when user is not authenticated.\n        # Omit or set to 'deny' (default) to make a HTTP 401 Unauthorized error be returned instead.\n        # Alternatively configure to 'authenticate' to redirect request to IdP authorization endpoint.\n        onUnauthenticatedRequest: 'deny'\n        requestExtraParams:\n          prompt: login\n          redirect: false\n        scope: first_name age\n        sessionCookieName: 'üç™'\n        sessionTimeout: 7000\n```\n\n----------------------------------------\n\nTITLE: Running Serverless Dev Mode\nDESCRIPTION: Starts the Serverless Framework's development mode, which allows for rapid development by proxying events from live AWS Lambda functions to local code.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nserverless dev\n```\n\n----------------------------------------\n\nTITLE: Basic Lambda Layer Configuration in YAML\nDESCRIPTION: Demonstrates the basic structure for configuring a Lambda layer including path, name, description, runtime compatibility, and architecture settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\nlayers:\n  hello:\n    path: layer-dir # required, path to layer contents on disk\n    name: ${sls:stage}-layerName # optional, Deployed Lambda layer name\n    description: Description of what the lambda layer does # optional, Description to publish to AWS\n    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with\n      - python3.11\n    compatibleArchitectures: # optional, a list of architectures this layer is compatible with\n      - x86_64\n      - arm64\n    licenseInfo: GPLv3 # optional, a string specifying license information\n    retain: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Schedule Expressions in YAML\nDESCRIPTION: This example demonstrates how to use an array of schedule expressions to trigger a function at different times on weekdays and weekends.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/schedule.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  foo:\n    handler: foo.handler\n    events:\n      - schedule:\n          rate:\n            - cron(0 0/4 ? * MON-FRI *)\n            - cron(0 2 ? * SAT-SUN *)\n          input:\n            key1: value1\n            key2: value2\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Functions and Versions in AWS Lambda using Serverless CLI\nDESCRIPTION: This command lists all deployed functions and their respective versions for the current Serverless project. It provides a quick overview of the functions currently active in the AWS Lambda environment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy list functions\n```\n\n----------------------------------------\n\nTITLE: Default S3 Configuration in Serverless Framework\nDESCRIPTION: Basic configuration example showing how to fetch an object from an S3 bucket using the default region associated with deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:s3:myBucket/myKey}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom S3 Bucket for AWS Lambda in YAML\nDESCRIPTION: This snippet shows how to configure a custom S3 bucket in the provider section of the Serverless Framework configuration. It allows for specifying additional bucket properties.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  resize:\n    handler: resize.handler\n    events:\n      - s3: bucketOne\n\nprovider:\n  s3:\n    bucketOne:\n      name: my-custom-bucket-name\n      # Eventual additional properties in camel case\n```\n\n----------------------------------------\n\nTITLE: S3 Event Configuration\nDESCRIPTION: Configuration for S3 bucket event triggers with filtering rules for object creation events.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    events:\n      - s3:\n          bucket: photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n          existing: true\n          forceDeploy: true\n```\n\n----------------------------------------\n\nTITLE: Selective Individual Function Packaging\nDESCRIPTION: YAML configuration showing how to selectively package specific functions individually\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nfunctions:\n  hello:\n    handler: handler.hello\n  world:\n    handler: handler.hello\n    package:\n      individually: true\n```\n\n----------------------------------------\n\nTITLE: Kafka Event with Filter Patterns\nDESCRIPTION: Example demonstrating how to configure filter patterns for Kafka events to process specific messages.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            saslScram512Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\n          topic: MySelfManagedKafkaTopic\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n          filterPatterns:\n            - eventName: INSERT\n```\n\n----------------------------------------\n\nTITLE: Importing API Gateway Resources in Service-B with CloudFormation in YAML\nDESCRIPTION: This snippet demonstrates how 'service-b' can also import the same API Gateway resources as 'service-a', enabling multiple services to use the shared API Gateway without duplication of configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-b\n\nprovider:\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': MyApiGateway-restApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': MyApiGateway-rootResourceId\n    websocketApiId:\n      'Fn::ImportValue': MyApiGateway-websocketApiId\n\nfunctions: service-b-functions\n```\n\n----------------------------------------\n\nTITLE: Applying Authorizer to ALB Event in Serverless Framework\nDESCRIPTION: This example demonstrates how to apply a configured authorizer to an ALB event for a Lambda function, ensuring restricted access to the specified endpoint.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.auth\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            path: /auth/cognito\n          authorizer: myFirstAuth\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Event Filter Patterns in YAML\nDESCRIPTION: This example demonstrates how to set up filter patterns for SQS events to selectively process messages based on their content using the Serverless Framework.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sqs.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  onlyOneOrTwo:\n    handler: handler.preprocess\n    events:\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          filterPatterns:\n            - a: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Basic Serverless-Compose Configuration for Multiple Services\nDESCRIPTION: A simple serverless-compose.yml configuration that references multiple Serverless Framework services by their relative paths. This is the minimal configuration needed to deploy multiple services together.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless-compose.yml\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in JavaScript\nDESCRIPTION: Illustrates how to create nested spans using the Serverless SDK. Child spans must be closed before their parent spans, and closing a parent span automatically closes all child spans.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst span1 = serverlessSdk.createSpan('span1')\nconst span2 = span1.createSpan('span2')\n// do some work\nspan2.close()\n// do additional work\nspan1.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cognito and OIDC Authorizers for ALB in Serverless Framework\nDESCRIPTION: This snippet shows how to configure Cognito and OIDC authorizers for Application Load Balancer in the Serverless Framework. It includes settings for user pools, client IDs, and various authentication parameters.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  alb:\n    authorizers:\n      myFirstAuth:\n        type: 'cognito'\n        userPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341'\n        userPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE'\n        userPoolDomain: 'your-test-domain'\n        onUnauthenticatedRequest: 'deny'\n        requestExtraParams:\n          prompt: 'login'\n          redirect: false\n        scope: 'first_name age'\n        sessionCookieName: 'üç™'\n        sessionTimeout: 7000\n      mySecondAuth:\n        type: 'oidc'\n        authorizationEndpoint: 'https://example.com'\n        clientId: 'i-am-client'\n        clientSecret: 'i-am-secret'\n        useExistingClientSecret: true\n        issuer: 'https://www.iamscam.com'\n        tokenEndpoint: 'http://somewhere.org'\n        userInfoEndpoint: 'https://another-example.com'\n        onUnauthenticatedRequest: 'deny'\n        requestExtraParams:\n          prompt: 'login'\n          redirect: false\n        scope: 'first_name age'\n        sessionCookieName: 'üç™'\n        sessionTimeout: 7000\n```\n\n----------------------------------------\n\nTITLE: API Gateway v2 HTTP API Event Configuration\nDESCRIPTION: Configuration for HTTP API endpoints using API Gateway v2, including method, path, and JWT authorizer settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    events:\n      - httpApi:\n          method: GET\n          path: /some-get-path/{param}\n          authorizer:\n            name: someJwtAuthorizer\n            scopes:\n              - user.id\n              - user.email\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Event Types for CloudFront in YAML\nDESCRIPTION: This YAML snippet shows how to configure multiple event types (viewer-request and viewer-response) for the same CloudFront origin. It demonstrates using a custom variable to define the origin configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdgeViewerRequest:\n    handler: myLambdaAtEdgeViewerRequest.handler\n    events:\n      - cloudFront:\n          eventType: viewer-request\n          origin: ${self:custom.origins.myWebsiteOrigin}\n  myLambdaAtEdgeViewerResponse:\n    handler: myLambdaAtEdgeViewerResponse.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: ${self:custom.origins.myWebsiteOrigin}\n\ncustom:\n  origins:\n    myWebsiteOrigin:\n      DomainName: serverless.com\n      OriginPath: /framework\n      CustomOriginConfig:\n        OriginProtocolPolicy: match-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Media Types in API Gateway\nDESCRIPTION: Configuration for enabling binary media responses in API Gateway, allowing the return of images or files. This example sets up an endpoint that can return binary data.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  apiGateway:\n    binaryMediaTypes:\n      - '*/*'\nfunctions:\n  binaryExample:\n    handler: binaryExample.handler\n    events:\n      - http:\n          path: binary\n          method: GET\n```\n\n----------------------------------------\n\nTITLE: Applying Filter Patterns to AWS Lambda Stream Events\nDESCRIPTION: This configuration demonstrates how to filter events before Lambda invocation using filter patterns. The example shows filtering to process only inserted items in a DynamoDB table.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  handleInsertedDynamoDBItem:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n          filterPatterns:\n            - eventName: [INSERT]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MSK Event for AWS Lambda in YAML\nDESCRIPTION: Demonstrates how to set up a simple MSK event trigger for an AWS Lambda function using different ARN formats.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      # These are all possible formats\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n      - msk:\n          arn:\n            Fn::ImportValue: MyExportedMSKClusterArn\n          topic: mytopic\n      - msk:\n          arn: !Ref MyMSKCluster\n          topic: mytopic\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Custom Context\nDESCRIPTION: Example demonstrating how to invoke a function with a custom context string. The context contains information about the runtime environment provided to the Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --context \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Referencing CloudFormation Export Values Between Stacks\nDESCRIPTION: Example showing how to set and reference CloudFormation export values between stacks. This method uses the Fn::ImportValue function to import values exported by another stack.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Make sure you set export value in StackA.\n\n  Outputs:\n    DynamoDbTable:\n      Value:\n        \"Ref\": DynamoDbTable\n      Export:\n        Name: DynamoDbTable-${self:custom.stage}\n\n# Then you can reference the export name in StackB\n\nprovider:\n  environment:\n    Table:\n        'Fn::ImportValue': 'DynamoDbTable-${self:custom.stage}'\n```\n\n----------------------------------------\n\nTITLE: Using AWS::Scheduler::Schedule for Higher Limits in YAML\nDESCRIPTION: This snippet shows how to use AWS::Scheduler::Schedule instead of AWS::Event::Rule to overcome account-wide limits and specify a timezone for the event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/schedule.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  foo:\n    handler: foo.handler\n    events:\n      - schedule:\n          method: scheduler\n          rate:\n            - cron(0 0/4 ? * MON-FRI *)\n          timezone: America/New_York\n          input:\n            key1: value1\n            key2: value2\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Log Event with Filter Pattern\nDESCRIPTION: Configuration showing how to add a filter pattern to the CloudWatch Log event trigger. The filter specifies conditions that logs must match to trigger the Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-log.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatchLog:\n    handler: myCloudWatchLog.handler\n    events:\n      - cloudwatchLog:\n          logGroup: '/aws/lambda/hello'\n          filter: '{$.userIdentity.type = Root}'\n```\n\n----------------------------------------\n\nTITLE: Running Custom Plugin Commands for a Specific Service\nDESCRIPTION: Example of how to execute custom commands from plugins for a specific service within a compose project, such as running the serverless-offline plugin.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nserverless service-a offline\n```\n\n----------------------------------------\n\nTITLE: Individual Function Package Configuration\nDESCRIPTION: YAML configuration for packaging functions individually with custom artifacts\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\n\npackage:\n  individually: true\n\nfunctions:\n  hello:\n    handler: com.serverless.Handler\n    package:\n      artifact: hello.jar\n    events:\n      - httpApi: 'GET /hello'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorizers in Separate Services with Shared API Gateway\nDESCRIPTION: Example showing how to configure authorizers in different services using a shared API Gateway, which can lead to CloudFormation errors due to AWS limitations of 1 Authorizer per ARN.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-c\n\nprovider:\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': apiGateway-restApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': apiGateway-rootResourceId\n\nfunctions:\n  deleteUser:\n    events:\n      - http:\n        path: /users/{userId}\n        authorizer:\n          arn: xxxxxxxxxxxxxxxxx #cognito/custom authorizer arn\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-d\n\nprovider:\n  apiGateway:\n    restApiId:\n      'Fn::ImportValue': apiGateway-restApiId\n    restApiRootResourceId:\n      'Fn::ImportValue': apiGateway-rootResourceId\n\nfunctions:\n  deleteProject:\n    events:\n      - http:\n        path: /project/{projectId}\n        authorizer:\n          arn: xxxxxxxxxxxxxxxxx #cognito/custom authorizer arn\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Schema Validation with File Reference in Serverless Framework\nDESCRIPTION: Configuration for request schema validation using JSON Schema. The schema is referenced from an external file for the application/json content type.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          request:\n            schemas:\n              application/json: ${file(create_request.json)}\n```\n\n----------------------------------------\n\nTITLE: Custom Event Bus Configuration\nDESCRIPTION: Creates and configures a custom event bus for handling external SaaS events.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n```\n\n----------------------------------------\n\nTITLE: Exposing CloudFormation Outputs in Serverless Framework Service\nDESCRIPTION: Configuration showing how to define a CloudFormation resource and expose its output for use in other services. This example creates an SQS queue and exports its URL.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# service-a/serverless.yml\n# ...\n\nresources:\n  Resources:\n    MyQueue:\n      Type: AWS::SQS::Queue\n      # ...\n  Outputs:\n    queueUrl:\n      Value: !Ref MyQueue\n```\n\n----------------------------------------\n\nTITLE: Mutual TLS (mTLS) Kafka Event Configuration\nDESCRIPTION: Example demonstrating Kafka event configuration using mTLS authentication with client and CA certificates.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            clientCertificateTlsAuth: arn:aws:secretsmanager:us-east-1:01234567890:secret:ClientCertificateTLS\n            serverRootCaCertificate: arn:aws:secretsmanager:us-east-1:01234567890:secret:ServerRootCaCertificate\n          topic: MySelfManagedMTLSKafkaTopic\n          consumerGroupId: MyConsumerGroupId\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n```\n\n----------------------------------------\n\nTITLE: Executing Serverless Rollback Function Command for AWS Lambda\nDESCRIPTION: This command rolls back a specified function to a specific version. It requires the function name and the version number to roll back to. Note that this only works for functions previously deployed with 'serverless deploy'.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/rollback-function.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless rollback function --function <name> \\\n  --function-version <version>\n```\n\n----------------------------------------\n\nTITLE: Overriding Generated Cognito User Pool in Serverless YAML\nDESCRIPTION: This YAML snippet demonstrates how to override a Cognito User Pool generated by an event in the Serverless Framework. It uses the logical resource name in the Resources section to define a custom User Pool.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preSignUp:\n    handler: preSignUpForPool1.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PreSignUp\n  postConfirmation:\n    handler: postConfirmation.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PostConfirmation\n\nresources:\n  Resources:\n    CognitoUserPoolMyUserPool:\n      Type: AWS::Cognito::UserPool\n```\n\n----------------------------------------\n\nTITLE: Splitting Configuration Across Multiple Files in YAML\nDESCRIPTION: Shows how to reference external CloudFormation resources to keep the main serverless.yml file clean and manageable.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  Resources: ${file(cloudformation-resources.json)}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Framework via NPM\nDESCRIPTION: Command to install the Serverless Framework globally using NPM, which requires Node.js to be installed first.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm i serverless -g\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM Template in YAML\nDESCRIPTION: Example SAM template defining a RESTful service with a Lambda function that handles HTTP requests on the root path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/sam.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# template.yml\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nDescription: |\n  An example RESTful service\n\nResources:\n  ExampleFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: nodejs20.x\n      Handler: index.handler\n      CodeUri: '.'\n      Events:\n        ListCustomers:\n          Type: Api\n          Properties:\n            Path: /\n            Method: any\n```\n\n----------------------------------------\n\nTITLE: Configuring Catch-All Routes for HTTP API in Serverless YAML\nDESCRIPTION: Shows how to set up catch-all routes for any method or specific methods in the HTTP API configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  catchAllAny:\n    handler: index.catchAllAny\n    events:\n      - httpApi: '*'\n  catchAllMethod:\n    handler: handler.catchAllMethod\n    events:\n      - httpApi:\n          method: '*'\n          path: /any/method\n```\n\n----------------------------------------\n\nTITLE: Creating Spans with Context Manager\nDESCRIPTION: Example of creating spans using Python's with statement for automatic closure.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sls_sdk import serverlessSdk\n\nwith serverlessSdk.create_span('some-label'):\n    pass # the execution of this `with` statement will be captured as a span\n```\n\n----------------------------------------\n\nTITLE: Retry Policy Configuration\nDESCRIPTION: Sets up a retry policy with maximum event age and retry attempts for EventBridge rules.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n          deadLetterQueueArn:\n            Fn::GetAtt:\n              - QueueName\n              - Arn\n          retryPolicy:\n            maximumEventAge: 3600\n            maximumRetryAttempts: 3\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Lambda Function Metrics with Serverless Framework\nDESCRIPTION: This command allows you to watch the metrics of a specific function. It can be used without arguments to show service-wide metrics for the last 24 hours.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless metrics\n```\n\n----------------------------------------\n\nTITLE: Cross-Region CloudFormation Stack References in Serverless Framework\nDESCRIPTION: Configuration showing how to reference CloudFormation stacks across different AWS regions. This example sets up resolvers for both us-west-2 and eu-west-1 regions for multi-region deployments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        region: us-west-2\n        euCf:\n          type: cf\n          region: eu-west-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:euCf:another-service.functionPrefix}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple CloudWatch Event for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates how to define a basic CloudWatch Event that triggers a Lambda function when an EC2 instance state changes to 'pending'. It specifies the event source, detail type, and state details.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-event.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatch:\n    handler: myCloudWatch.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n```\n\n----------------------------------------\n\nTITLE: S3 Artifact Service Configuration\nDESCRIPTION: YAML configuration for using S3-hosted artifacts at service level\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\n\npackage:\n  artifact: s3://some-bucket/path/to/service-artifact.zip\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Target Group Name for ALB in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to explicitly specify a target group name for an ALB event in the Serverless Framework, providing full control over the naming of the target group.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          targetGroupName: helloTargetGroup\n          conditions:\n            path: /hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Function URLs in serverless.yml\nDESCRIPTION: This snippet demonstrates how to configure Lambda Function URLs in the serverless.yml file, including authorization and CORS settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  func:\n    handler: index.handler\n    url:\n      cors:\n        allowedOrigins:\n          - https://url1.com\n          - https://url2.com\n        allowedHeaders:\n          - Content-Type\n          - Authorization\n        allowedMethods:\n          - GET\n        allowCredentials: true\n        exposedResponseHeaders:\n          - Special-Response-Header\n        maxAge: 6000 # In seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags for API Gateway Stages\nDESCRIPTION: Configuration to add tags to API Gateway stages using stackTags and tags properties, which helps with resource organization and tracking.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nprovider:\n  name: aws\n  stackTags:\n    stackTagKey: stackTagValue\n  tags:\n    tagKey: tagValue\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Serverless Configuration (YAML)\nDESCRIPTION: This example demonstrates how to reference environment variables in a serverless.yml file using ${env:VARIABLE_NAME} syntax. It shows how to dynamically create function names by using the FUNC_PREFIX environment variable as a prefix for all function names.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/env-vars.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: ${env:FUNC_PREFIX}-hello\n    handler: handler.hello\n  world:\n    name: ${env:FUNC_PREFIX}-world\n    handler: handler.world\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple S3 Events for Single AWS Lambda Function in YAML\nDESCRIPTION: This configuration demonstrates how to set up multiple S3 events for a single Lambda function. It shows that one bucket can trigger the same function for different event types.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - s3:\n          bucket: photos\n          event: s3:ObjectCreated:*\n      - s3:\n          bucket: photos\n          event: s3:ObjectRemoved:*\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Authorizer in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to set up an AWS IAM authorizer for a serverless function, requiring the caller to submit IAM user access keys for authentication.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer: aws_iam\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer:\n            type: aws_iam\n```\n\n----------------------------------------\n\nTITLE: Lambda Handler with Improved Implementation\nDESCRIPTION: AWS Lambda handler implementation that uses the refactored Users class, showing proper separation of concerns.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = require('db').connect()\nconst mailer = require('mailer')\nconst Users = require('users')\n\nlet users = new Users(db, mailer)\n\nmodule.exports.saveUser = (event, context, callback) => {\n  users.save(event.email, callback)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Response Headers in Serverless YAML\nDESCRIPTION: Demonstrates how to set custom response headers for HTTP events in the Serverless Framework configuration. It shows how to use integration response variables and static values.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: get\n          path: whatever\n          integration: lambda\n          response:\n            headers:\n              Content-Type: integration.response.header.Content-Type\n              Cache-Control: \"'max-age=120'\"\n```\n\n----------------------------------------\n\nTITLE: Cognito User Pool Authorizer Configuration\nDESCRIPTION: Shows how to configure Cognito User Pool as an authorizer with custom claims and integration settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          integration: lambda\n          authorizer:\n            arn: arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ\n            claims:\n              - email\n              - nickname\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Events for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates how to set up various stream events (DynamoDB and Kinesis) for an AWS Lambda function using the Serverless Framework. It includes examples of different ARN specifications and event types.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [MyDynamoDbTable, StreamArn]\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::ImportValue: MyExportedDynamoDbStreamArnId\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt:\n              - MyKinesisStream\n              - Arn\n      - stream:\n          type: kinesis\n          arn:\n            Fn::ImportValue: MyExportedKinesisStreamArnId\n      - stream:\n          type: dynamodb\n          arn:\n            Ref: MyDynamoDbTableStreamArn\n      - stream:\n          type: kinesis\n          arn:\n            Fn::Join:\n              - ':'\n              - - arn\n                - aws\n                - kinesis\n                - Ref: AWS::Region\n                - Ref: AWS::AccountId\n                - stream/MyOtherKinesisStream\n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foobar\n          consumer: true\n      - stream:\n          type: kinesis\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foobar\n          consumer: preExistingName\n```\n\n----------------------------------------\n\nTITLE: Setting Default and Stage-specific Parameters in Serverless\nDESCRIPTION: Example showing how to use the 'default' key to define parameters that apply to all stages by default, with the ability to override them for specific stages like prod and dev.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    params:\n      domain: ${sls:stage}.preview.myapp.com\n  prod:\n    params:\n      domain: myapp.com\n  dev:\n    params:\n      domain: preview.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Event Pattern Matching in EventBridge\nDESCRIPTION: Configures pattern matching for CloudFormation API calls through EventBridge.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - aws.cloudformation\n            detail-type:\n              - AWS API Call via CloudTrail\n            detail:\n              eventSource:\n                - cloudformation.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Running Service-Specific Commands in Serverless Compose\nDESCRIPTION: Examples of how to run commands for specific services within a compose project, including deployment, log tailing, and custom plugin commands.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --service=service-a\n\n# Shortcut alternative\nserverless service-a deploy\n```\n\n----------------------------------------\n\nTITLE: Removing a Serverless Service with AWS Lambda\nDESCRIPTION: This command removes the deployed service defined in the current working directory from the AWS provider. It deletes all associated AWS Lambda Functions, Events, and Resources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/remove.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove\n```\n\n----------------------------------------\n\nTITLE: External HTTP API Integration\nDESCRIPTION: Configuration to attach endpoints to an externally created HTTP API using direct ID or ImportValue.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  httpApi:\n    id: xxxx\n\n# Alternative using ImportValue\nprovider:\n  httpApi:\n    id:\n      Fn::ImportValue: xxxx\n```\n\n----------------------------------------\n\nTITLE: Referencing Events Array from External JSON File\nDESCRIPTION: Demonstrates how to reference an events array defined in an external JSON file within the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events: ${file(./myCustomFile.json):myevents}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Lambda Functions to Same SNS Topic in YAML\nDESCRIPTION: This example shows how to bind multiple Lambda functions to the same SNS topic. Both 'dispatcher' and 'dispatcher2' functions will be triggered when a message is sent to the 'dispatch' topic.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns: dispatch\n  dispatcher2:\n    handler: dispatcher2.dispatch\n    events:\n      - sns: dispatch\n```\n\n----------------------------------------\n\nTITLE: Basic IAM Role Configuration in Serverless\nDESCRIPTION: Example showing the basic structure of IAM role configuration in serverless.yml including role name, path, statements, managed policies, permissions boundary and tags.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  iam:\n    role:\n      name: custom-role-name\n      path: /custom-role-path/\n      statements:\n        - Effect: 'Allow'\n          Resource: '*'\n          Action: 'iam:DeleteUser'\n      managedPolicies:\n        - 'arn:aws:iam::123456789012:user/*'\n      permissionsBoundary: arn:aws:iam::123456789012:policy/boundaries\n      tags:\n        key: value\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced MSK Event Options in YAML\nDESCRIPTION: Shows how to set batch size, maximum batching window, and starting position for an MSK event in AWS Lambda.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n          batchSize: 1000\n          maximumBatchingWindow: 30\n          startingPosition: LATEST\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP API Access Logging\nDESCRIPTION: Configuration to enable access logging for HTTP API in provider settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  logs:\n    httpApi: true\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in Serverless Framework v3 Plugins\nDESCRIPTION: The recommended approach for plugins to log messages to CLI output in Serverless Framework v3 using the standard log interface with different severity levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, cliOptions, { log }) {\n    log.error('Error')\n    log.warning('Warning')\n    log.notice('Message')\n    log.info('Verbose message') // --verbose log\n    log.debug('Debug message') // --debug log\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ParallelizationFactor for Kinesis Stream Event in YAML\nDESCRIPTION: This configuration sets up a Kinesis stream event with a parallelization factor, specifying the number of concurrent Lambda invocations for each shard of the Kinesis Stream.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          parallelizationFactor: 10\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda@Edge Handler Function in JavaScript\nDESCRIPTION: This JavaScript code snippet shows an example Lambda@Edge handler function that adds a timestamp to the response headers. It demonstrates how to work with the CloudFront event object and modify the response.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.handler\n'use strict'\n\nmodule.exports.handler = (event, context, callback) => {\n  const response = event.Records[0].cf.response\n  const headers = response.headers\n\n  headers['x-serverless-time'] = [\n    { key: 'x-serverless-time', value: Date.now().toString() },\n  ]\n\n  return callback(null, response)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Queues with SNS\nDESCRIPTION: Demonstrates how to set up a Dead Letter Queue using SNS topics for handling Lambda function failures.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n    onError: arn:aws:sns:us-east-1:XXXXXX:test\n```\n\n----------------------------------------\n\nTITLE: Cognito User Pool Event Configuration in YAML\nDESCRIPTION: Defines Cognito User Pool triggers with custom sender configurations and KMS encryption.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PreSignUp\n          # Optional, if you're referencing an existing User Pool\n          existing: true\n          # Optional, for forcing deployment of triggers on existing User Pools\n          forceDeploy: true\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: CustomEmailSender\n          # Required, if you're using the CustomSMSSender or CustomEmailSender triggers\n          # Can either be KMS Key ARN string or reference to KMS Key Resource ARN\n          kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/12345678-9abc-def0-1234-56789abcdef1'\n          existing: true\n          forceDeploy: true\n```\n\n----------------------------------------\n\nTITLE: Stage-Specific Configuration in Serverless Compose\nDESCRIPTION: Configuration example showing how to specify different parameters for different deployment stages (dev, prod) in a serverless-compose.yml file. This allows for environment-specific values.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless-compose.yml\nstages:\n  dev:\n    params:\n      STRIPE_API_KEY: 'stripe-api-dev-key'\n  prod:\n    params:\n      STRIPE_API_KEY: 'stripe-api-prod-key'\nservices:\n  service-a:\n    path: service-a\n  service-b:\n    path: service-b\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: Example of creating nested spans for hierarchical trace segmentation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom sls_sdk import serverlessSdk\n\nspan1 = serverlessSdk.create_span('span1')\nspan2 = span1.create_span('span2')\n\n# do some work\nspan2.close()\n# do additional work\nspan1.close()\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression in API Gateway\nDESCRIPTION: Configuration to enable payload compression in API Gateway, which helps reduce data transfer size. This sets the minimum size threshold for compression to 1024 bytes.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  apiGateway:\n    minimumCompressionSize: 1024\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Traces with Serverless SDK in Node.js\nDESCRIPTION: Use the setTag method to add key-value pairs as tags to the entire trace for better context in Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.setTag('userId', 'bd86489cf036')\n```\n\n----------------------------------------\n\nTITLE: Referencing Events Array from External YAML File\nDESCRIPTION: Shows how to reference an events array defined in an external YAML file within the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events: ${file(./myCustomFile.yml):myevents}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Batch Processing Configuration\nDESCRIPTION: Demonstrates how to configure batch processing parameters including batch size and batching window for RabbitMQ events.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/rabbitmq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - rabbitmq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          batchSize: 5000\n          maximumBatchingWindow: 30\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Defining Services with Dependencies in Serverless Compose YAML\nDESCRIPTION: Example YAML configuration showing how to define multiple services with dependencies in serverless-compose.yml, where service-b references an output from service-a.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/state.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n    params:\n      queueUrl: ${service-a.queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from Secrets Manager into Serverless Variables\nDESCRIPTION: Example showing how JSON structure from Secrets Manager gets resolved in the Serverless Framework configuration. The JSON values are automatically converted to their corresponding YAML representation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: hello\n    handler: handler.hello\ncustom:\n  supersecret:\n    num: 1\n    str: secret\n    arr:\n      - true\n      - false\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway v1 REST API in Serverless Framework\nDESCRIPTION: This snippet shows the configuration options for API Gateway v1 REST API and websocket APIs in the Serverless Framework. It includes settings for custom naming, endpoint types, API keys, usage plans, and request schema validation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  # Use a custom name for the API Gateway API\n  apiName: custom-api-name\n  # Endpoint type for API Gateway REST API: edge or regional (default: edge)\n  endpointType: REGIONAL\n  # Use a custom name for the websockets API\n  websocketsApiName: custom-websockets-api-name\n  # custom route selection expression\n  websocketsApiRouteSelectionExpression: $request.body.route\n  # Use a custom description for the websockets API\n  websocketsDescription: Custom Serverless Websockets\n  # Optional API Gateway REST API global config\n  apiGateway:\n    # Attach to an externally created REST API via its ID:\n    restApiId: xxxx\n    # Root resource ID, represent as / path\n    restApiRootResourceId: xxxx\n    # List of existing resources that were created in the REST API. This is required or the stack will be conflicted\n    restApiResources:\n      '/users': xxxx\n      '/users/create': xxxx\n    # Attach to an externally created Websocket API via its ID:\n    websocketApiId: xxxx\n    # Disable the default 'execute-api' HTTP endpoint (default: false)\n    disableDefaultEndpoint: true\n    # Source of API key for usage plan: HEADER or AUTHORIZER\n    apiKeySourceType: HEADER\n    # List of API keys for the REST API\n    apiKeys:\n      - name: myFirstKey\n        value: myFirstKeyValue\n        description: myFirstKeyDescription\n        customerId: myFirstKeyCustomerId\n        # Can be used to disable the API key without removing it (default: true)\n        enabled: false\n      - ${sls:stage}-myFirstKey\n      - ${env:MY_API_KEY} # you can hide it in a serverless variable\n    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)\n    minimumCompressionSize: 1024\n    # Description for the API Gateway stage deployment\n    description: Some description\n    # Optional binary media types the API might return\n    binaryMediaTypes:\n      - '*/*'\n    # Optional detailed Cloud Watch Metrics\n    metrics: false\n    # Use `${service}-${stage}` naming for API Gateway. Will be `true` by default in v3.\n    shouldStartNameWithService: false\n    resourcePolicy:\n      - Effect: Allow\n        Principal: '*'\n        Action: execute-api:Invoke\n        Resource:\n          - execute-api:/*/*/*\n        Condition:\n          IpAddress:\n            aws:SourceIp:\n              - '123.123.123.123'\n    # Optional usage plan configuration\n    usagePlan:\n      quota:\n        limit: 5000\n        offset: 2\n        period: MONTH\n      throttle:\n        burstLimit: 200\n        rateLimit: 100\n    request:\n      # Request schema validation models that can be reused in `http` events\n      # It is always defined for `application/json` content type\n      schemas:\n        global-model:\n          # JSON Schema\n          schema: ${file(schema.json)}\n          # Optional: Name of the API Gateway model\n          name: GlobalModel\n          # Optional: Description of the API Gateway model\n          description: 'A global model that can be referenced in functions'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Behaviors for CloudFront in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up multiple behaviors for a single Lambda@Edge function. It includes different path patterns and origins for each behavior.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          includeBody: true\n          origin: s3://bucketname.s3.amazonaws.com/files\n      - cloudFront:\n          eventType: viewer-response\n          pathPattern: /docs*\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Endpoint in JavaScript\nDESCRIPTION: Demonstrates how to set a custom endpoint using the Serverless SDK. This is useful in mono-lambda architectures where the default proxy endpoint may not reflect the intended path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.setEndpoint('/my/custom/endpoint')\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Conditions for ALB Event in Serverless Framework\nDESCRIPTION: This example demonstrates how to set up multiple conditions for an ALB event, including host, path, method, header, query, and IP address conditions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            host: example.com\n            path: /hello\n            method:\n              - POST\n              - PATCH\n            host:\n              - example.com\n              - example2.com\n            header:\n              name: foo\n              values:\n                - bar\n            query:\n              bar: true\n            ip:\n              - fe80:0000:0000:0000:0204:61ff:fe9d:f156/6\n              - 192.168.0.1/0\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS X-Ray Tracing in Serverless Framework\nDESCRIPTION: Shows how to configure AWS X-Ray tracing for Lambda functions at both the provider and function levels. Function-level settings will override the provider-level configuration if specified.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  tracing:\n    lambda: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    tracing: Active\n  goodbye:\n    handler: handler.goodbye\n    tracing: PassThrough\n```\n\n----------------------------------------\n\nTITLE: Stage-Specific Parameter Configuration\nDESCRIPTION: Example of configuring stage-specific parameters for different environments in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/services.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: billing\n\nstages:\n  prod:\n    params:\n      stripe_api_key: ${env:PROD_STRIPE_API_KEY}\n  default:\n    params:\n      stripe_api_key: ${env:DEV_STRIPE_API_KEY}\n```\n\n----------------------------------------\n\nTITLE: Defining Cognito User Pool Triggers in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to define Cognito User Pool triggers for Lambda functions in the serverless.yml file. It shows setup for PreSignUp and CustomMessage triggers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preSignUp:\n    handler: preSignUp.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: PreSignUp\n  customMessage:\n    handler: customMessage.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool\n          trigger: CustomMessage\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Health Check for ALB Event in Serverless YAML\nDESCRIPTION: This snippet shows how to configure advanced health check settings for an ALB event in a serverless.yml file. It includes options like custom path, interval, timeout, thresholds, and HTTP code matchers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            path: /hello\n          healthCheck:\n            path: /health\n            intervalSeconds: 35\n            timeoutSeconds: 30\n            healthyThresholdCount: 2\n            unhealthyThresholdCount: 2\n            matcher:\n              httpCode: 200,201\n```\n\n----------------------------------------\n\nTITLE: Dead Letter Queue Configuration\nDESCRIPTION: Configures a Dead Letter Queue (DLQ) for an EventBridge rule using CloudFormation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          eventBus: custom-saas-events\n          pattern:\n            source:\n              - saas.external\n          deadLetterQueueArn:\n            Fn::GetAtt:\n              - QueueName\n              - Arn\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Load Order in serverless.yml\nDESCRIPTION: YAML configuration demonstrating how to define the load order of plugins. Plugins are loaded in the order they are listed, with plugin1 being loaded before plugin2 in this example.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nplugins:\n  - plugin1\n  - plugin2\n```\n\n----------------------------------------\n\nTITLE: SNS Event Configuration in YAML\nDESCRIPTION: Defines SNS topic subscriptions with filter policies and dead letter queue configurations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - sns:\n          topicName: aggregate\n          displayName: Data aggregation pipeline\n          filterPolicy:\n            pet:\n              - dog\n              - cat\n          filterPolicyScope: MessageAttributes\n          redrivePolicy:\n            # (1) ARN\n            deadLetterTargetArn: arn:aws:sqs:us-east-1:11111111111:myDLQ\n            # (2) Ref (resource defined in same CF stack)\n            deadLetterTargetRef: myDLQ\n            # (3) Import (resource defined in outer CF stack)\n            deadLetterTargetImport:\n              arn: MyShared-DLQArn\n              url: MyShared-DLQUrl\n```\n\n----------------------------------------\n\nTITLE: Package Deployment - Serverless CLI\nDESCRIPTION: Command to deploy a pre-packaged service to AWS using an existing package directory.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --package path-to-package\n```\n\n----------------------------------------\n\nTITLE: Setting Kinesis StartingPosition with Timestamp in YAML\nDESCRIPTION: This configuration sets up a Kinesis stream event with a specific starting position and timestamp for an AWS Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          startingPosition: AT_TIMESTAMP\n          startingPositionTimestamp: 1000000001\n          maximumRetryAttempts: 10\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cognito User Pools in Serverless YAML\nDESCRIPTION: This example shows how to set up multiple Cognito User Pools with their respective triggers in the serverless.yml file. It demonstrates using the same trigger for different pools and different triggers for the same pool.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preSignUpForPool1:\n    handler: preSignUp.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool1\n          trigger: PreSignUp\n  preSignUpForPool2:\n    handler: preSignUp.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool2\n          trigger: PreSignUp\n  preSignUp:\n    handler: preSignUp.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool1\n          trigger: PreSignUp\n      - cognitoUserPool:\n          pool: MyUserPool2\n          trigger: PreSignUp\n```\n\n----------------------------------------\n\nTITLE: Using Serverless Dashboard Parameters for Sensitive Data\nDESCRIPTION: Example showing how to reference parameters stored in Serverless Dashboard within the serverless.yml configuration. This approach is ideal for storing sensitive values like API keys that need to be encrypted at rest.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    STRIPE_SECRET_KEY: ${param:stripeSecret}\n```\n\n----------------------------------------\n\nTITLE: Configuring MaximumRetryAttempts for Stream Event in YAML\nDESCRIPTION: This snippet shows how to set the maximum number of retry attempts for a stream event when the Lambda function returns an error.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          maximumRetryAttempts: 10\n          startingPosition: LATEST\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Basic CloudWatch Log Event Configuration in YAML\nDESCRIPTION: Simple configuration to enable a Lambda function to be triggered by a CloudWatch Log stream. Specifies the function handler and the log group path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-log.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatchLog:\n    handler: myCloudWatchLog.handler\n    events:\n      - cloudwatchLog: '/aws/lambda/hello'\n```\n\n----------------------------------------\n\nTITLE: Enabling SnapStart for Java Lambda Functions\nDESCRIPTION: This snippet shows how to enable Lambda SnapStart for Java functions to improve startup performance for latency-sensitive applications.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    ...\n    runtime: java11\n    snapStart: true\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild with JavaScript file in Serverless Framework\nDESCRIPTION: This YAML snippet shows how to specify a JavaScript configuration file for esbuild in the Serverless Framework, which is useful for using esbuild plugins.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/building.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  esbuild:\n    configFile: ./esbuild.config.js\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Endpoint Path with Serverless SDK in Python\nDESCRIPTION: Demonstrates how to manually set a custom endpoint path using the Serverless SDK's set_endpoint method. This is useful when the default proxy endpoint (/{proxy+}) from API Gateway needs to be overridden with a specific path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.set_endpoint('/my/custom/endpoint')\n```\n\n----------------------------------------\n\nTITLE: Setting Target Group Prefix for ALB in Serverless Framework\nDESCRIPTION: This example shows how to set a prefix for generated target group names in the Serverless Framework configuration, providing a predictable naming convention for ALB target groups.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  alb:\n    targetGroupPrefix: my-prefix\n\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            path: /hello\n```\n\n----------------------------------------\n\nTITLE: Exporting an Object from JavaScript Module for Serverless Variables\nDESCRIPTION: Example of exporting a schedule rate as an object property from a JavaScript file and referencing it in serverless.yml using the file() variable syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/javascript.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// scheduleConfig.js\nmodule.exports.rate = 'rate(10 minutes)'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: new-service\nprovider: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - schedule: ${file(./scheduleConfig.js):rate} # Reference a specific module\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Cache Behavior for CloudFront in YAML\nDESCRIPTION: This YAML snippet shows how to configure advanced cache behavior settings for a CloudFront distribution. It includes viewer protocol policy, allowed methods, and cached methods configurations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: s3://bucketname.s3.amazonaws.com/files\n          behavior:\n            ViewerProtocolPolicy: https-only\n            AllowedMethods:\n              - 'GET'\n              - 'HEAD'\n              - 'OPTIONS'\n              - 'PUT'\n              - 'PATCH'\n              - 'POST'\n              - 'DELETE'\n            CachedMethods:\n              - 'GET'\n              - 'HEAD'\n              - 'OPTIONS'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resolvers in YAML\nDESCRIPTION: Illustrates how to define custom resolver configurations with environment-specific AWS accounts and regions for accessing resources across multiple AWS accounts.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        profile: dev-account1-profile-name\n      awsAccount2:\n        type: aws\n        profile: dev-account2-profile-name\n        euS3: # custom resolver configuration defined for the awsAccount2 provider\n          type: s3\n          region: eu-west-1\n  prod:\n    resolvers:\n      awsAccount1:\n        type: aws\n        profile: prod-account1-profile-name\n      awsAccount2:\n        type: aws\n        profile: prod-account2-profile-name\n        euS3: # custom resolver configuration defined for the awsAccount2 provider\n          type: s3\n          region: eu-west-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      ACCOUNT1_ID: ${awsAccount1:accountId} # built-in variable provided by the AWS provider\n      SSM_VALUE: ${awsAccount1:ssm:/path/to/param} # uses the default resolver configuration even if it's not explicitly defined in the resolvers block\n      EU_S3_VALUE: ${awsAccount2:euS3:myBucket/myKey} # uses the customized resolver configuration\n      S3_VALUE: ${awsAccount2:s3:myBucket/myKey} # uses the default resolver configuration even if a customized one (euS3) is defined for the same provider\n```\n\n----------------------------------------\n\nTITLE: Forcing Deployment of S3 Triggers for AWS Lambda in YAML\nDESCRIPTION: This snippet shows how to force the deployment of S3 triggers for existing buckets. It uses the 'forceDeploy' flag in conjunction with the 'existing' flag to ensure Cloudformation updates the triggers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - s3:\n          bucket: legacy-photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n          existing: true\n          forceDeploy: true\n```\n\n----------------------------------------\n\nTITLE: Accessing Cross-Region SSM Parameters with Classic Format\nDESCRIPTION: Example showing how to reference SSM parameters from different AWS regions using the classic variable format. This allows accessing parameters from specific regions like us-west-2 and ap-northeast-1.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: ${ssm(us-west-2):/path/to/service/id}-service\nprovider:\n  name: aws\nfunctions:\n  hello:\n    name: ${ssm(ap-northeast-1):/path/to/service/myParam}-hello\n    handler: handler.hello\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Deployment with Stage and Region\nDESCRIPTION: Deployment command specifying a production stage and EU Central region for the service deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --stage production --region eu-central-1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Authorization for HTTP API in Serverless YAML\nDESCRIPTION: Demonstrates how to set up AWS IAM authorization for HTTP API endpoints using the Serverless Framework.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - httpApi:\n          method: get\n          path: /hello\n          authorizer:\n            type: aws_iam\n```\n\n----------------------------------------\n\nTITLE: Installing a Serverless Plugin with CLI Command\nDESCRIPTION: This command installs a Serverless plugin and adds it to the service's plugins array. It requires the --name option to specify the plugin name. By default, the latest version is installed.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/plugin-install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin install --name pluginName\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in SAM Template\nDESCRIPTION: Example of using Serverless Variables to pass environment variables to Lambda functions in a SAM template.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/sam.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nDescription: |\n  An example RESTful service\n\nResources:\n  ExampleFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: nodejs20.x\n      Handler: index.handler\n      Environment:\n        Variables:\n          STAGE: ${env:USER}\n```\n\n----------------------------------------\n\nTITLE: Layer-Specific Package Configuration\nDESCRIPTION: Shows how to specify package settings at the individual layer level.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\nlayers:\n  layerOne:\n    path: layerOne\n    package:\n      patterns:\n        - '!layerSourceTarball.tar.gz'\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Management for Lambda Functions\nDESCRIPTION: This snippet demonstrates how to configure runtime management for Lambda functions, allowing control over runtime updates at both the provider and function levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  ...\n  runtimeManagement: onFunctionUpdate\n\nfunctions:\n  hello:\n    ...\n    runtimeManagement:\n      mode: manual\n      arn: <aws runtime arn>\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed API Endpoint with cURL\nDESCRIPTION: This command demonstrates how to test the deployed API endpoint using cURL, replacing [your endpoint address] with the actual URL provided after deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl [your endpoint address]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Maps in serverless.yml\nDESCRIPTION: Add the serverless-esbuild plugin and configure it to generate source maps for better error tracking in Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - serverless-esbuild\n\ncustom:\n  esbuild:\n    bundle: true\n    minify: true\n    sourcemap: true\n```\n\n----------------------------------------\n\nTITLE: Referencing Output Variables from Different Application, Stage or Region\nDESCRIPTION: Syntax for referencing output variables from services in different applications, stages, or regions. This format allows specifying the app, stage, and region explicitly.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/output-variables.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n${output:appname:stagename:regionname:my-service.var-key}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Buckets in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to configure S3 buckets for Lambda events, including custom bucket names and versioning configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  s3:\n    bucketOne:\n      name: my-custom-bucket-name\n      versioningConfiguration:\n        Status: Enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring BatchWindow for Kinesis Stream Event in YAML\nDESCRIPTION: This snippet demonstrates how to set up a batch window for a Kinesis stream event, which specifies the maximum amount of time to wait before triggering a Lambda invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchWindow: 10\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed CloudWatch Metrics for API Gateway\nDESCRIPTION: Configuration to enable detailed CloudWatch metrics for API Gateway, providing more comprehensive monitoring capabilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  apiGateway:\n    metrics: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Mode in Serverless Framework\nDESCRIPTION: Add the configValidationMode setting to your serverless.yml file to control how validation errors are handled. Available options include 'error' to fail commands when errors are found, 'warn' to show warnings without failing commands, and 'off' to suppress validation completely.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/configuration-validation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigValidationMode: warn\n```\n\n----------------------------------------\n\nTITLE: Passing Individual Parameters to Services in Serverless Compose\nDESCRIPTION: Configuration showing how to pass specific parameters to individual services in a compose project. Demonstrates passing both environment variables and hardcoded values.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-a:\n    path: service-a\n    params:\n      user: ${env:USER} # You can also use environment variables here, as shown above.\n      description: 'This is a hard-coded description that you can pass to your service.'\n```\n\n----------------------------------------\n\nTITLE: Cross-Region CloudFormation References with Classic Syntax\nDESCRIPTION: Example using the classic syntax for referencing CloudFormation outputs across different AWS regions. This method allows accessing stack outputs from specific regions using the cf(REGION):stackName.outputKey format.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: ${cf(us-west-2):another-service-dev.functionPrefix}-hello\n    handler: handler.hello\n  world:\n    name: ${cf(ap-northeast-1):another-stack.functionPrefix}-world\n    handler: handler.world\n```\n\n----------------------------------------\n\nTITLE: Deployment Method Configuration - Serverless YAML\nDESCRIPTION: Configuration for specifying CloudFormation deployment method in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  deploymentMethod: changesets\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Data from Standard Input\nDESCRIPTION: Example showing how to pipe data from another process to the Lambda function being invoked. This is useful for dynamic data generation scenarios.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode dataGenerator.js | serverless invoke --function functionName\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema Validation Model in Serverless Framework\nDESCRIPTION: Configuration for customizing the schema validation model with name and description properties for better organization and documentation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          request:\n            schemas:\n              application/json:\n                schema: ${file(create_request.json)}\n                name: PostCreateModel\n                description: 'Validation model for Creating Posts'\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors with Logging\nDESCRIPTION: Example of capturing errors using Python's logging module.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.error(\"Logged error\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Serverless Management of API Gateway Log Role\nDESCRIPTION: Configuration to prevent Serverless from managing the CloudWatch role for API Gateway logs, allowing you to create and assign the IAM role yourself.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  logs:\n    restApi:\n      roleManagedExternally: true # disables automatic role creation/checks done by Serverless\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key in Serverless YAML with Variable Resolvers\nDESCRIPTION: Example serverless.yml configuration showing how to reference a License Key securely from AWS SSM Parameters, AWS Secrets Manager, or HashiCorp Vault using Serverless Framework variable resolvers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/license-keys.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\n\n# AWS SSM Params & AWS Secrets Manager Example\nlicenseKey: ${ssm:/path/to/serverless-framework-license-key}\n# Vault Example\nlicenseKey: ${vault:secret/serverless-framework/license-key}\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n```\n\n----------------------------------------\n\nTITLE: Using Existing S3 Bucket for AWS Lambda Event in YAML\nDESCRIPTION: This configuration demonstrates how to use an existing S3 bucket for Lambda function events. It uses the 'existing' property to indicate that the bucket already exists.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/s3.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  users:\n    handler: users.handler\n    events:\n      - s3:\n          bucket: legacy-photos\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: uploads/\n            - suffix: .jpg\n          existing: true\n```\n\n----------------------------------------\n\nTITLE: Defining Stage-specific Parameters in Serverless Framework\nDESCRIPTION: Example showing how to define parameters for specific deployment stages (prod, dev) in serverless.yml using the stages.<stage>.params structure. This allows different parameter values per environment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prod:\n    params:\n      domain: myapp.com\n  dev:\n    params:\n      domain: preview.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Lambda Exec Wrapper Environment Variable for Node.js\nDESCRIPTION: This snippet shows the correct value for the AWS_LAMBDA_EXEC_WRAPPER environment variable when using the Serverless Framework SDK with Node.js Lambda functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS_LAMBDA_EXEC_WRAPPER=\"/opt/sls-sdk-node/exec-wrapper.sh\"\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Event Configuration in YAML\nDESCRIPTION: Demonstrates the minimal configuration required to set up a RabbitMQ event trigger for a Lambda function. Requires specifying the broker ARN, queue name, and basic authentication ARN.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/rabbitmq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - rabbitmq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Handling Encrypted SecureString Parameters Without Decryption\nDESCRIPTION: Configuration for accessing SecureString parameters without automatic decryption. This approach is useful when you need to handle the encrypted value directly for security purposes or further processing.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        noDecryptSsm:\n          type: ssm\n          rawOrDecrypt: noDecrypt\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:noDecryptSsm:/path/to/param}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Concurrency for SQS Event Processing in YAML\nDESCRIPTION: This snippet shows how to set the maximum concurrency limit for an SQS event source invoking a Lambda function using the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sqs.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  onlyOneOrTwo:\n    handler: handler.preprocess\n    events:\n      - sqs:\n          arn: arn:aws:sqs:region:XXXXXX:myQueue\n          maximumConcurrency: 250\n```\n\n----------------------------------------\n\nTITLE: Forcing Deployment of Cognito User Pool Triggers in Serverless YAML\nDESCRIPTION: This YAML configuration shows how to force the deployment of Cognito User Pool triggers using the Serverless Framework. It uses the 'forceDeploy' flag in conjunction with 'existing: true' to ensure triggers are updated.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preSignUp:\n    handler: preSignUp.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool1\n          trigger: PreSignUp\n          existing: true\n          forceDeploy: true\n```\n\n----------------------------------------\n\nTITLE: Serverless Compose Configuration\nDESCRIPTION: YAML configuration for composing multiple Serverless services with parameter sharing and service dependencies.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n    params:\n      queueUrl: ${service-a.queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Deploying Individual AWS Lambda Functions\nDESCRIPTION: Shows how to quickly deploy code and configuration changes to specific AWS Lambda functions using the deploy function command.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nserverless deploy function -f my-api\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sender Triggers in Serverless YAML\nDESCRIPTION: This snippet shows how to set up Custom Sender Triggers (CustomSMSSender and CustomEmailSender) in the serverless.yml file. It includes the required kmsKeyId configuration and demonstrates using both string and reference values for the key.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  customSMSSenderFunction:\n    handler: customSMSSender.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool1\n          trigger: CustomSMSSender\n          kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/12345678-9abc-def0-1234-56789abcdef1'\n  customEmailSenderFunction:\n    handler: customEmailSender.handler\n    events:\n      - cognitoUserPool:\n          pool: MyUserPool2\n          trigger: CustomEmailSender\n          kmsKeyId:\n            Fn::GetAtt: ['kmsKey', 'Arn']\n\nresources:\n  Resources:\n    kmsKey:\n      Type: AWS::KMS::Key\n      Properties:\n        Description: MyKMSKey\n        Enabled: true\n        KeyPolicy:\n          Version: '2012-10-17'\n          Id: my-kms-key\n          Statement:\n            Sid: Enable IAM User Permissions\n            Principal:\n              AWS:\n                - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root\n            Effect: Allow\n            Action: kms:*\n            Resource: '*'\n\n    CognitoUserPoolMyUserPool2:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UsernameAttributes:\n          - 'email'\n        AutoVerifiedAttributes:\n          - 'email'\n        EmailVerificationMessage: 'email message: {####}'\n        EmailVerificationSubject: 'email subject: {####}'\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Lambda Authorizer Configuration\nDESCRIPTION: Demonstrates advanced configuration options for custom authorizers including TTL, identity source, and validation expression settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer:\n            name: authorizerFunc\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization\n            identityValidationExpression: someRegex\n            type: token\n  authorizerFunc:\n    handler: handler.authorizerFunc\n```\n\n----------------------------------------\n\nTITLE: Using Stage Parameters in Serverless Configuration\nDESCRIPTION: Example showing how to reference stage-specific parameters in the serverless.yml configuration using the ${param:XXX} variable syntax. The value will be resolved based on the current deployment stage.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    APP_DOMAIN: ${param:domain}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Reference in Serverless\nDESCRIPTION: Basic syntax for referencing Terraform outputs in serverless.yml\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n${terraform:outputs:users_table_arn}\n```\n\n----------------------------------------\n\nTITLE: Disabling Full Request/Response Logging for API Gateway\nDESCRIPTION: Configuration to disable full request and response data logging in API Gateway to reduce log volume and potentially sensitive data exposure.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    restApi:\n      fullExecutionData: false\n```\n\n----------------------------------------\n\nTITLE: Specifying Input and InputPath for CloudWatch Event in YAML\nDESCRIPTION: This snippet illustrates how to specify input values, input paths, and input transformers for a CloudWatch Event. It includes three different event configurations demonstrating each approach.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-event.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatch:\n    handler: myCloudWatch.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputPath: '$.stageVariables'\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n```\n\n----------------------------------------\n\nTITLE: Kinesis Stream Event Configuration in YAML\nDESCRIPTION: Configures Kinesis stream event triggers with batch processing and filtering capabilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          maximumRecordAgeInSeconds: 120\n          startingPosition: LATEST\n          # (default: true)\n          enabled: false\n          functionResponseType: ReportBatchItemFailures\n          filterPatterns:\n            - partitionKey: [1]\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Resource Files in YAML\nDESCRIPTION: Demonstrates how to combine multiple resource files with inline resources using an array structure for CloudFormation resources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - Resources:\n      ApiGatewayRestApi:\n        Type: AWS::ApiGateway::RestApi\n\n  - ${file(resources/first-cf-resources.yml)}\n  - ${file(resources/second-cf-resources.yml)}\n\n  - Outputs:\n      CognitoUserPoolId:\n      Value:\n        Ref: CognitoUserPool\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Custom Command in Serverless Plugin with JavaScript\nDESCRIPTION: Creates a simple Serverless plugin with a custom command called 'my-command' that has two lifecycle events: 'resources' and 'functions'. This is the basic structure for creating custom commands.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor() {\n    this.commands = {\n      'my-command': {\n        lifecycleEvents: ['resources', 'functions'],\n      },\n    }\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Referencing Vault Secrets in Serverless Framework\nDESCRIPTION: Example of how to reference a HashiCorp Vault secret in a Serverless Framework configuration file using the vault variable resolver syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/vault.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n${vault:secret/data/mongo/credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Specifying Name and Description for Schedule Events in YAML\nDESCRIPTION: This snippet shows how to add a name and description to a schedule event configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/schedule.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nevents:\n  - schedule:\n      name: your-scheduled-rate-event-name\n      description: 'your scheduled rate event description'\n      rate: rate(2 hours)\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs for a Specific Function in a Service\nDESCRIPTION: Commands showing how to view logs for a specific function within a service that's part of a Serverless Compose setup. Demonstrates both the standard and shortcut syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nserverless logs --service=service-a --function=index\n\n# Shortcut alternative\nserverless service-a logs --function=index\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Service Dependencies in Compose\nDESCRIPTION: Shows how to specify explicit dependencies between services without using variables, using the dependsOn option. This allows for controlling the deployment order when no shared variables are needed.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n    dependsOn: service-a\n\n  service-c:\n    path: service-c\n\n  service-d:\n    path: service-d\n    dependsOn:\n      - service-a\n      - service-c\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Event Data from JSON File\nDESCRIPTION: Example showing how to invoke a function with event data loaded from a JSON file. This is useful for testing complex event structures without typing them on the command line.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --path lib/data.json\n```\n\n----------------------------------------\n\nTITLE: Individual Function Package Patterns\nDESCRIPTION: YAML configuration for individual function packaging with specific include/exclude patterns\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\npackage:\n  individually: true\n  patterns:\n    - '!excluded-by-default.json'\nfunctions:\n  hello:\n    handler: handler.hello\n    package:\n      patterns:\n        - excluded-by-default.json\n  world:\n    handler: handler.hello\n    package:\n      patterns:\n        - '!some-file.js'\n```\n\n----------------------------------------\n\nTITLE: Storing Serverless License Key in AWS SSM Parameter Store with AWS CLI\nDESCRIPTION: AWS CLI command to securely store a Serverless Framework License Key in AWS SSM Parameter Store as a SecureString, allowing the Framework to automatically retrieve it during deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/license-keys.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws ssm put-parameter \\\n  --name \"/serverless-framework/license-key\" \\\n  --description \"Serverless Framework License Key\" \\\n  --type \"SecureString\" \\\n  --value \"your-license-key\" \\\n  --region \"your-aws-region\" \\\n  --profile \"your-aws-profile\"\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Context from JSON File\nDESCRIPTION: Example showing how to invoke a function while passing context information from a JSON file. The path is relative to the service's root directory.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --contextPath lib/context.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Region AWS SSM Access in Serverless Framework\nDESCRIPTION: Example showing how to access SSM parameters from a different AWS region than your primary deployment region. This setup creates a specific resolver for the EU region while the main AWS configuration uses US West.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        region: us-west-2\n        euSsm:\n          type: ssm\n          region: eu-west-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:euSsm:/path/to/param}\n```\n\n----------------------------------------\n\nTITLE: Stage and Region Deployment - Serverless CLI\nDESCRIPTION: Command to deploy to specific stage and region using command line flags.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --stage production --region eu-central-1\n```\n\n----------------------------------------\n\nTITLE: Creating Exportable CloudFormation Outputs in Serverless Framework\nDESCRIPTION: Example showing how to create custom CloudFormation outputs in your Serverless service that can be referenced by other stacks. It demonstrates exporting configuration values as stack outputs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: another-service\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  region: ap-northeast-1\n  memorySize: 512\nfunctions:\n  hello:\n    name: ${self:custom.functionPrefix}hello\n    handler: handler.hello\ncustom:\n  functionPrefix: 'my-prefix-'\nresources:\n  Outputs:\n    functionPrefix:\n      Value: ${self:custom.functionPrefix}\n      Export:\n        Name: functionPrefix\n    memorySize:\n      Value: ${self:provider.memorySize}\n      Export:\n        Name: memorySize\n```\n\n----------------------------------------\n\nTITLE: Schedule Event Configuration in YAML\nDESCRIPTION: Configures scheduled event triggers with rate expressions, input parameters, and input transformers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - schedule:\n          name: my scheduled event\n          description: a description of my scheduled event's purpose\n          # Can also be an array of rate/cron expressions\n          rate: rate(10 minutes)\n          # (default: true)\n          enabled: false\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Access IAM Configuration\nDESCRIPTION: Example of configuring IAM permissions for S3 bucket access, including ListBucket, GetObject, and PutObject permissions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\n\nprovider:\n  name: aws\n  iam:\n    role:\n      statements:\n        # Allow functions to list all buckets\n        - Effect: Allow\n          Action: 's3:ListBucket'\n          Resource: '*'\n        # Allow functions to read/write objects in a bucket\n        - Effect: Allow\n          Action:\n            - 's3:GetObject'\n            - 's3:PutObject'\n          Resource:\n            - 'arn:aws:s3:::my-bucket-name/*'\n```\n\n----------------------------------------\n\nTITLE: S3 Event Pattern with Prefix Matching\nDESCRIPTION: Sets up EventBridge pattern matching for S3 events with prefix filtering.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          pattern:\n            source:\n              - aws.s3\n            detail-type:\n              - Object Created\n            detail:\n              bucket:\n                name:\n                  - photos\n              object:\n                key:\n                  - prefix: 'uploads/'\n```\n\n----------------------------------------\n\nTITLE: S3 ARN Configuration in Serverless Framework\nDESCRIPTION: Example demonstrating how to reference an S3 object using its full ARN (Amazon Resource Name).\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:s3:arn:aws:s3:::myBucket/myKey}\n```\n\n----------------------------------------\n\nTITLE: Disabling CloudWatch Event for AWS Lambda in YAML\nDESCRIPTION: This code shows how to create a disabled CloudWatch Event for a Lambda function. It includes the same event configuration as the previous example but adds the 'enabled: false' option to disable the event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-event.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatch:\n    handler: myCloudWatch.handler\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Packaging with Custom Stage and Region\nDESCRIPTION: This command packages your service for a specific stage ('production') and region ('eu-central-1'). The generated package will be created in the default '.serverless' directory.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/package.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless package --stage production --region eu-central-1\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Group ID for MSK Event in YAML\nDESCRIPTION: Demonstrates how to specify a consumer group ID when configuring an MSK event for AWS Lambda.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n          batchSize: 1000\n          maximumBatchingWindow: 30\n          startingPosition: LATEST\n          consumerGroupId: MyConsumerGroupId\n```\n\n----------------------------------------\n\nTITLE: Basic Serverless Package Command\nDESCRIPTION: Basic CLI command to package a Serverless project without deployment, storing artifacts in the .serverless directory\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless package\n```\n\n----------------------------------------\n\nTITLE: Kafka Event with Batch Processing Configuration\nDESCRIPTION: Example showing how to configure batch size, batching window, and starting position for Kafka event processing.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            saslScram512Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\n          topic: MySelfManagedKafkaTopic\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n          batchSize: 1000\n          maximumBatchingWindow: 30\n          startingPosition: LATEST\n```\n\n----------------------------------------\n\nTITLE: Configuring Redrive Policy with Resource Reference in YAML\nDESCRIPTION: This example demonstrates how to configure a redrive policy using a resource reference for the Dead Letter Queue. The DLQ is defined in the resources section and referenced in the SNS event configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.handler\n    events:\n      - sns:\n          topicName: dispatcher\n          redrivePolicy:\n            deadLetterTargetRef: myDLQ\n\nresources:\n  Resources:\n    myDLQ:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: myDLQ\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Step for Serverless Deployment\nDESCRIPTION: Commands to install dependencies and deploy the Serverless service in CI/CD pipeline\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/running-in-your-own-cicd.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install # installs all plugins and packages\nserverless deploy # deploys your service\n```\n\n----------------------------------------\n\nTITLE: Basic Support Command - Serverless CLI\nDESCRIPTION: Basic usage of the support command that launches an interactive prompt to generate issue reports or connect with support team. Automatically captures relevant context while omitting sensitive information.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/support.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsls support\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Patterns for MSK Event in YAML\nDESCRIPTION: Shows how to set up filter patterns for an MSK event to process only specific records in AWS Lambda.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n          filterPatterns:\n            - value:\n                a: [1]\n```\n\n----------------------------------------\n\nTITLE: Referencing CloudFormation Stack Outputs with Default Region in Serverless Framework\nDESCRIPTION: Example of using CloudFormation stack outputs with the default region in a Serverless Framework configuration. This uses the modern resolver-based syntax to dynamically pull values from other stacks.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:cf:another-service.functionPrefix}\n```\n\n----------------------------------------\n\nTITLE: Defining Stage Parameters and Domains\nDESCRIPTION: Configuration of stage-specific parameters including domain settings for different environments using the params block.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  default:\n    domain: ${sls:stage}.myapi.com\n  prod:\n    domain: myapi.com\n  dev:\n    domain: dev.myapi.com\n\nfoo: ${param:domain}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Size and Window for ActiveMQ Event in YAML\nDESCRIPTION: This snippet demonstrates how to set the batch size and maximum batching window for an ActiveMQ event. It specifies retrieving 5000 items per batch with a 30-second batching window.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/activemq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - activemq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          batchSize: 5000\n          maximumBatchingWindow: 30\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Value Headers for ALB Event in Serverless Framework\nDESCRIPTION: This snippet shows how to enable multi-value headers for an ALB event, allowing the Lambda function to receive headers and query parameters as arrays of values.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          multiValueHeaders: true\n          conditions:\n            path: /hello\n```\n\n----------------------------------------\n\nTITLE: Setting Instruction Set Architecture for Lambda Functions\nDESCRIPTION: This snippet shows how to set the instruction set architecture (x86 or arm64) for Lambda functions at both the provider and individual function levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  ...\n  architecture: arm64\n\nfunctions:\n  hello:\n    ...\n    architecture: arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring Logs for Deployed Resources in Serverless Framework\nDESCRIPTION: This snippet shows how to configure logs for various AWS resources including Lambda functions, HTTP API, REST API, and WebSocket API.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  logs:\n    lambda:\n      logFormat: JSON\n      applicationLogLevel: ERROR\n      systemLogLevel: INFO\n      logGroup: /aws/lambda/global-log-group\n    httpApi:\n      format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"routeKey\":\"$context.routeKey\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }'\n    restApi:\n      accessLogging: true\n      format: 'requestId: $context.requestId'\n      executionLogging: true\n      level: INFO\n      fullExecutionData: true\n      role: arn:aws:iam::123456:role\n      roleManagedExternally: false\n    websocket:\n      accessLogging: true\n      format: 'requestId: $context.requestId'\n      executionLogging: true\n      level: INFO\n      fullExecutionData: true\n    frameworkLambda: false\n```\n\n----------------------------------------\n\nTITLE: Basic Local Function Invocation\nDESCRIPTION: Command to invoke a Lambda function locally using the Serverless Framework\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local --function functionName\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Backend and Outputs\nDESCRIPTION: Example Terraform configuration showing backend setup and output definition for a DynamoDB table ARN\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Configures the Terraform backend to store state in an S3 bucket\nterraform {\n  # cloud {} - compatible with remote backend\n  # backend \"s3\" { }\n  # backend \"remote\" { }\n  # backend \"http\" { }\n}\n\n# ...\n\noutput \"users_table_arn\" {\n  description = \"The ARN of the Users DynamoDB table\"\n  value       = aws_dynamodb_table.users_table.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Install Script in package.json\nDESCRIPTION: Configuration to run a custom script before npm install using the preinstall hook in package.json\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"demo-serverless\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"preinstall\": \"<your script>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BisectBatchOnFunctionError for Stream Event in YAML\nDESCRIPTION: This configuration enables the ability to recursively split a failed batch and retry on smaller subsets of records for a stream event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          bisectBatchOnFunctionError: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Event for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates how to set up a basic ActiveMQ event trigger for an AWS Lambda function. It specifies the required properties including the ActiveMQ broker ARN, queue name, and basic authentication ARN.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/activemq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - activemq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control for CORS in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to set up a Cache-Control header for CORS preflight responses in a serverless function, useful when using a CDN like CloudFront.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n              - X-Amz-User-Agent\n              - X-Amzn-Trace-Id\n            allowCredentials: false\n            # Caches on browser and proxy for 10 minutes and doesnt allow proxy to serve out of date content\n            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'\n```\n\n----------------------------------------\n\nTITLE: Local Invocation with Environment Variables\nDESCRIPTION: Commands demonstrating how to set environment variables during local function invocation\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local -f functionName -e VAR1=value1\n\n# Or more than one variable\n\nserverless invoke local -f functionName \\\n  -e VAR1=value1 \\\n  -e VAR2=value2\n```\n\n----------------------------------------\n\nTITLE: Verbose Info Command Output Example\nDESCRIPTION: Extended output example using the --verbose flag to show additional Stack Outputs including CloudFront URLs and deployment buckets.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/info.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverless info --verbose\n\nService Information\nservice: my-serverless-service\nstage: dev\nregion: us-east-1\napi keys:\n  myKey: some123valid456api789key1011for1213api1415gateway\nendpoints:\n  GET - https://dxaynpuzd4.execute-api.us-east-1.amazonaws.com/dev/users\nfunctions:\n  my-serverless-service-dev-hello\n\nStack Outputs\nCloudFrontUrl: d2d10e2tyk1pei.cloudfront.net\nScreenshotBucket: dev-svdgraaf-screenshots\nServiceEndpoint: https://12341jc801.execute-api.us-east-1.amazonaws.com/dev\nServerlessDeploymentBucketName: lambda-screenshots-dev-serverlessdeploymentbucket-15b7pkc04f98a\n```\n\n----------------------------------------\n\nTITLE: Creating Async Resolver Function for Serverless Variables\nDESCRIPTION: Example of an async resolver function that accesses other variables and returns a complex object. This approach works by default in Serverless v3+ but requires variablesResolutionMode: 20210326 in v2.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/javascript.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// config.js\nmodule.exports = async ({ options, resolveVariable }) => {\n  // We can resolve other variables via `resolveVariable`\n  const stage = await resolveVariable('sls:stage');\n  const region = await resolveVariable('opt:region, self:provider.region, \"us-east-1\"');\n  ...\n\n  // Resolver may return any JSON value (null, boolean, string, number, array or plain object)\n  return {\n    prop1: 'someValue',\n    prop2: 'someOther value'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling VPC Configuration for Specific Functions\nDESCRIPTION: Shows how to override service-level VPC configuration by setting vpc to null for specific functions while maintaining VPC settings for others.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  vpc:\n    securityGroupIds:\n      - securityGroupId1\n      - securityGroupId2\n    subnetIds:\n      - subnetId1\n      - subnetId2\n\nfunctions:\n  hello:\n    handler: handler.hello\n    vpc: ~\n  users:\n    handler: handler.users\n```\n\n----------------------------------------\n\nTITLE: Extended Websocket Handler Configuration\nDESCRIPTION: YAML configuration showing disconnect handler and route response setup for websocket events\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/websocket.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  disconnectHandler:\n    handler: handler.disconnectHandler\n    events:\n      - websocket:\n          route: $disconnect\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  helloHandler:\n    handler: handler.helloHandler\n    events:\n      - websocket:\n          route: hello\n          routeResponseSelectionExpression: $default\n```\n\n----------------------------------------\n\nTITLE: Node Modules Package Configuration\nDESCRIPTION: YAML configuration to exclude all node_modules except node-fetch using package patterns\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!node_modules/**'\n    - 'node_modules/node-fetch/**'\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Source as HEADER for API Gateway Metering\nDESCRIPTION: Configuration for setting the source of the API key for metering requests to the HEADER option. This tells API Gateway to acquire the key from the request's X-API-Key header.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nprovider:\n  name: aws\n  apiGateway:\n    apiKeySourceType: HEADER\nfunctions:\n  hello:\n    events:\n      - http:\n          path: hello\n          method: get\n```\n\n----------------------------------------\n\nTITLE: Configuring Create Customer Endpoint\nDESCRIPTION: YAML configuration for setting up the HTTP POST endpoint that triggers the createCustomer Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncreateCustomer:\n  handler: createCustomer.createCustomer\n  events:\n    - httpApi:\n        path: /\n        method: post\n```\n\n----------------------------------------\n\nTITLE: Example Lambda Proxy Integration Event in JSON\nDESCRIPTION: Shows the structure of a typical event object passed to a Lambda function by API Gateway using Lambda proxy integration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": \"/\",\n  \"path\": \"/\",\n  \"httpMethod\": \"POST\",\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"en-GB,en-US;q=0.8,en;q=0.6,zh-CN;q=0.4\",\n    \"cache-control\": \"max-age=0\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Viewer-Country\": \"GB\",\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"Host\": \"j3ap25j034.execute-api.eu-west-2.amazonaws.com\",\n    \"origin\": \"https://j3ap25j034.execute-api.eu-west-2.amazonaws.com\",\n    \"Referer\": \"https://j3ap25j034.execute-api.eu-west-2.amazonaws.com/dev/\",\n    \"upgrade-insecure-requests\": \"1\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n    \"Via\": \"2.0 a3650115c5e21e2b5d133ce84464bea3.cloudfront.net (CloudFront)\",\n    \"X-Amz-Cf-Id\": \"0nDeiXnReyHYCkv8cc150MWCFCLFPbJoTs1mexDuKe2WJwK5ANgv2A==\",\n    \"X-Amzn-Trace-Id\": \"Root=1-597079de-75fec8453f6fd4812414a4cd\",\n    \"X-Forwarded-For\": \"50.129.117.14, 50.112.234.94\",\n    \"X-Forwarded-Port\": \"443\",\n    \"X-Forwarded-Proto\": \"https\"\n  },\n  \"queryStringParameters\": null,\n  \"pathParameters\": null,\n  \"stageVariables\": null,\n  \"requestContext\": {\n    \"path\": \"/dev/\",\n    \"accountId\": \"125002137610\",\n    \"resourceId\": \"qdolsr1yhk\",\n    \"stage\": \"dev\",\n    \"requestId\": \"0f2431a2-6d2f-11e7-b799-5152aa497861\",\n    \"identity\": {\n      \"cognitoIdentityPoolId\": null,\n      \"accountId\": null,\n      \"cognitoIdentityId\": null,\n      \"caller\": null,\n      \"apiKey\": \"\",\n      \"sourceIp\": \"50.129.117.14\",\n      \"accessKey\": null,\n      \"cognitoAuthenticationType\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"userArn\": null,\n      \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n      \"user\": null\n    },\n    \"resourcePath\": \"/\",\n    \"httpMethod\": \"POST\",\n    \"apiId\": \"j3azlsj0c4\"\n  },\n  \"body\": \"postcode=LS17FR\",\n  \"isBase64Encoded\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Observability in Serverless YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure observability settings for different stages in a Serverless Framework service. It shows how to enable or disable observability for specific stages like dev and prod.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Ensure these properties are present to connect to the Dashboard\norg: my-org\napp: my-app\n\n# Control observability instrumentation settings under stages\nstages:\n  dev:\n    observability: true # Turn on observability in the dev stage\n  prod:\n    observability: true # Turn on observability in the prod stage\n  default:\n    observability: false # Turn off observability in all other stages\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Vault Secret Response\nDESCRIPTION: Example JSON structure returned from HashiCorp Vault, showing nested credentials that can be accessed using dot notation in the variable reference.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/vault.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": {\n    \"password\": \"abc123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Gateway Log Level\nDESCRIPTION: Configuration to set the API Gateway log level to ERROR instead of the default INFO level, which controls the verbosity of execution logs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    restApi:\n      level: ERROR\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Events in Plugin\nDESCRIPTION: Example showing how to hook into Serverless Framework lifecycle events to add custom behavior during different stages of execution.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nclass MyPlugin {\n  constructor() {\n    this.hooks = {\n      initialize: () => this.init(),\n      'before:deploy:deploy': () => this.beforeDeploy(),\n      'after:deploy:deploy': () => this.afterDeploy(),\n    }\n  }\n\n  init() {\n    // Initialization\n  }\n\n  beforeDeploy() {\n    // Before deploy\n  }\n\n  afterDeploy() {\n    // After deploy\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Image Settings for Lambda Functions\nDESCRIPTION: This snippet illustrates how to provide additional image configuration for Lambda functions, including working directory, entry point, and command settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/functions.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider:\n  name: aws\n  ecr:\n    images:\n      baseimage:\n        path: ./path/to/context\n\nfunctions:\n  hello:\n    image:\n      uri: 000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38\n      workingDirectory: /workdir\n      command:\n        - executable\n        - flag\n      entryPoint:\n        - executable\n        - flag\n  world:\n    image:\n      name: baseimage\n      command:\n        - command\n      entryPoint:\n        - executable\n        - flag\n```\n\n----------------------------------------\n\nTITLE: Configuring Packaging in Serverless Framework\nDESCRIPTION: This snippet shows how to configure deployment packaging, including specifying files to include, individual function packaging, and artifact settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - src/**\n    - handler.js\n    - '!.git/**'\n    - '!.travis.yml'\n  individually: true\n  artifact: path/to/my-artifact.zip\n  excludeDevDependencies: false\n```\n\n----------------------------------------\n\nTITLE: CloudFront Distribution Resource Configuration\nDESCRIPTION: Shows how to configure a CloudFront Distribution using the resources block, including price class, aliases, and SSL certificate settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  Resources:\n    CloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          PriceClass: PriceClass_100\n          Aliases:\n            - mysite.example.com\n          ViewerCertificate:\n            AcmCertificateArn: arn:aws:acm:us-east-1:000000000000:certificate/eb96757c-c78e-4843-bb17-2f09747b6f0d\n            SslSupportMethod: sni-only\n```\n\n----------------------------------------\n\nTITLE: Using Before and After Lifecycle Events in Serverless Plugin\nDESCRIPTION: Shows how to use the automatically created 'before' and 'after' events for each lifecycle event in a Serverless plugin. This pattern allows executing logic before, during, and after a specific command event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.hooks = {\n  'before:my-command:run': () => {\n    // Before my command runs\n  },\n  'my-command:run': () => {\n    // My command runs\n  },\n  'after:my-command:run': () => {\n    // After\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using CloudFormation Functions for SNS Topic ARN in YAML\nDESCRIPTION: This example demonstrates how to use CloudFormation intrinsic functions like Fn::Join to construct the SNS topic ARN. This allows for dynamic ARN generation and cross-region invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns:\n          arn:\n            Fn::Join:\n              - ':'\n              - - 'arn:aws:sns'\n                - Ref: 'AWS::Region'\n                - Ref: 'AWS::AccountId'\n                - 'MyCustomTopic'\n          topicName: MyCustomTopic\n```\n\n----------------------------------------\n\nTITLE: Adding Function Events with defineFunctionEvent\nDESCRIPTION: Example showing how to use the defineFunctionEvent helper to add and validate a new event type for functions. This ensures that the event configuration meets the specified schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineFunctionEvent(\n      'providerName',\n      'myPluginEvent',\n      {\n        type: 'object',\n        properties: {\n          someProp: { type: 'string' },\n          anotherProp: { type: 'number' },\n        },\n        required: ['someProp'],\n        additionalProperties: false,\n      },\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Individual Service Parameters in Serverless Configuration\nDESCRIPTION: Example of how to reference individual parameters passed to a service in its serverless.yml configuration. Shows how to set environment variables using these parameters.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# service-a/serverless.yml\nfunctions:\n  hello:\n    environment:\n      USER: ${param:user}\n      DESCRIPTION: ${param:description}\n```\n\n----------------------------------------\n\nTITLE: Setting up NPM test script in package.json for Serverless CI/CD\nDESCRIPTION: A basic package.json configuration with a test script that the Serverless Framework will execute before deployment. If the test script returns with a non-zero exit code, the deployment will not proceed.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/running-tests.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-serverless-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless YAML for Dashboard Integration\nDESCRIPTION: Basic configuration required in serverless.yml to connect a service to the Serverless Framework Dashboard. Requires org name and app namespace specification.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\norg: # Your Serverless Framework Org name (e.g. acme-inc)\napp: # A parent namespce for this Service and related Services App name (e.g. mobile-app), to improve Serverless Framework Dashboard organization\n```\n\n----------------------------------------\n\nTITLE: Basic Log Viewing Commands - Bash\nDESCRIPTION: Basic commands for viewing Lambda function logs, including the standard log fetch and tailing option.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/logs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless logs -f hello\n\n# Optionally tail the logs with --tail or -t\nserverless logs -f hello -t\n```\n\n----------------------------------------\n\nTITLE: Defining Simple IoT Event for AWS Lambda in YAML\nDESCRIPTION: This snippet shows how to enable an AWS Lambda function to be triggered by an AWS IoT rule. It defines a basic IoT event with an SQL query in the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myIoT:\n    handler: myIoT.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'some_topic'\"\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Event JSON Structure\nDESCRIPTION: Example JSON structure for HTTP event data passed to Lambda function\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": \"/\",\n  \"path\": \"/\",\n  \"httpMethod\": \"GET\"\n  //  etc. //\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Name for CloudWatch Event in YAML\nDESCRIPTION: This snippet shows how to specify a custom name for a CloudWatch Event. The name must follow specific rules, including starting with a letter and containing only ASCII letters, digits, and hyphens.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-event.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatch:\n    handler: myCloudWatch.handler\n    events:\n      - cloudwatchEvent:\n          name: 'my-cloudwatch-event-name'\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Event for Lambda@Edge in YAML\nDESCRIPTION: This snippet demonstrates how to set up a simple CloudFront event for a Lambda@Edge function in the Serverless Framework configuration file. It specifies the event type and origin for the function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: s3://bucketname.s3.amazonaws.com/files\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Path Resources in Service-A in YAML\nDESCRIPTION: This snippet shows how to reference an existing path resource ID in 'service-a' to avoid Cloudformation errors when multiple services try to create the same path resource in a shared API Gateway.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-a\nprovider:\n  apiGateway:\n    restApiId: xxxxxxxxxx\n    restApiRootResourceId: xxxxxxxxxx\n    websocketApiId: xxxxxxxxxx\n    description: Some Description\n    restApiResources:\n      posts: xxxxxxxxxx\n\nfunctions: ...\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Event Filter Pattern Configuration\nDESCRIPTION: Shows how to implement event filtering for RabbitMQ events using filter patterns to process only specific messages based on criteria.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/rabbitmq.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - rabbitmq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n          filterPatterns:\n            - value:\n                a: [1]\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors with Serverless SDK in Node.js\nDESCRIPTION: Use the captureError method or console.error to capture and report handled errors to Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  // an error is thrown\n} catch (ex) {\n  serverlessSdk.captureError(ex)\n}\n\n// Or using console.error\ntry {\n  // an error is thrown\n} catch (ex) {\n  console.error(ex)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OnFailure Destination for Stream Events in YAML\nDESCRIPTION: This snippet demonstrates how to set up onFailure destinations for stream events, specifying where events should be sent after reaching the maximum number of retry attempts.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess1:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          maximumRetryAttempts: 10\n          startingPosition: LATEST\n          enabled: false\n          destinations:\n            onFailure: arn:aws:sqs:region:XXXXXX:queue\n\n  preprocess2:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          maximumRetryAttempts: 10\n          startingPosition: LATEST\n          enabled: false\n          destinations:\n            onFailure:\n              arn:\n                Fn::GetAtt:\n                  - MyQueue\n                  - Arn\n              type: sqs\n\n  preprocess3:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          batchSize: 100\n          maximumRetryAttempts: 10\n          startingPosition: LATEST\n          enabled: false\n          destinations:\n            onFailure:\n              arn:\n                Fn::Join:\n                  - ':'\n                  - - arn\n                    - aws\n                    - kinesis\n                    - Ref: AWS::Region\n                    - Ref: AWS::AccountId\n                    - mySnsTopic\n              type: sns\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in Serverless Configuration\nDESCRIPTION: Example of how to use the ${param:xxx} syntax in a service configuration to reference parameters passed from the compose file. This injects a queue URL as a Lambda environment variable.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# service-b/serverless.yml\nprovider:\n  environment:\n    # Here we inject the queue URL as a Lambda environment variable\n    SERVICE_A_QUEUE_URL: ${param:queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Referencing SNS Topic Defined in Resources in YAML\nDESCRIPTION: This snippet shows how to reference an SNS topic defined in the resources section of the serverless.yml file. It uses the Fn::Ref or !Ref syntax to get the ARN of the newly created topic.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.dispatch\n    events:\n      - sns:\n          arn: !Ref SuperTopic\n          topicName: MyCustomTopic\n\nresources:\n  Resources:\n    SuperTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: MyCustomTopic\n```\n\n----------------------------------------\n\nTITLE: Enabling API Gateway Logs\nDESCRIPTION: Basic configuration to enable API Gateway logs, which will be generated in a dedicated log group following a specific naming schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    restApi: true\n```\n\n----------------------------------------\n\nTITLE: Disabling MSK Event for AWS Lambda in YAML\nDESCRIPTION: Shows how to disable an MSK event trigger for an AWS Lambda function using the 'enabled' parameter.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Referencing Stage Parameters in Serverless Service Configuration\nDESCRIPTION: Example of how to reference stage-specific parameters in a service's serverless.yml file. Shows how environment variables can be automatically set based on the deployment stage.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml (for both service-a and service-b)\nfunctions:\n  hello:\n    environment:\n      STRIPE_API_KEY: ${param:STRIPE_API_KEY} # Resolves to \"stripe-api-dev-key\" in dev and \"stripe-api-prod-key\" in prod\n```\n\n----------------------------------------\n\nTITLE: Classic CloudFormation References in Serverless Framework\nDESCRIPTION: Example using the classic pre-resolver syntax to reference CloudFormation stack outputs. This method accesses values from other stacks using the cf:stackName.outputKey pattern.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/cf-stack.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: ${cf:another-service-dev.functionPrefix}-hello\n    handler: handler.hello\n  world:\n    name: ${cf:another-stack.functionPrefix}-world\n    handler: handler.world\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Path Resources in Shared API Gateway in YAML\nDESCRIPTION: This snippet shows how to define and use multiple path resources in a shared API Gateway, demonstrating that you can create functions with different paths all referencing the same API Gateway.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-a\nprovider:\n  apiGateway:\n    restApiId: xxxxxxxxxx\n    # restApiRootResourceId: xxxxxxxxxx # Optional\n    websocketApiId: xxxxxxxxxx\n    description: Some Description\n    restApiResources:\n      /posts: xxxxxxxxxx\n      /categories: xxxxxxxxx\n\nfunctions:\n  listPosts:\n    handler: posts.list\n    events:\n      - http:\n          method: get\n          path: /posts\n\n  listCategories:\n    handler: categories.list\n    events:\n      - http:\n          method: get\n          path: /categories\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Logging\nDESCRIPTION: Example showing how to invoke a function with logging enabled. This will output both the function result and logging information about the invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --log\n```\n\n----------------------------------------\n\nTITLE: S3 URI Configuration in Serverless Framework\nDESCRIPTION: Example showing how to reference an S3 object using the full S3 URI format (s3://myBucket/myKey).\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:s3:s3://myBucket/myKey}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Message Triggers in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to handle Custom Message Triggers in a Lambda function. It uses event.triggerSource to determine the specific type of custom message trigger.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// customMessage.js\nfunction handler(event, context, callback) {\n  if (event.triggerSource === 'CustomMessage_AdminCreateUser') {\n    // ...\n  }\n  if (event.triggerSource === 'CustomMessage_ResendCode') {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Patterns for ActiveMQ Event in YAML\nDESCRIPTION: This example shows how to set filter patterns for an ActiveMQ event. It configures the Lambda function to only process records where the field 'a' is equal to 1.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/activemq.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - activemq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n          filterPatterns:\n            - value:\n                a: [1]\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Path Resources in Service-B in YAML\nDESCRIPTION: This snippet demonstrates how 'service-b' can reference the same path resource as 'service-a', showing the pattern for sharing resources across services in a shared API Gateway.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-b\nprovider:\n  apiGateway:\n    restApiId: xxxxxxxxxx\n    restApiRootResourceId: xxxxxxxxxx\n    websocketApiId: xxxxxxxxxx\n    description: Some Description\n    restApiResources:\n      /posts: xxxxxxxxxx\n\nfunctions: ...\n```\n\n----------------------------------------\n\nTITLE: Basic Websocket Connect Handler Configuration\nDESCRIPTION: Simple YAML configuration for setting up a websocket connection handler with the $connect route\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/websocket.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  connectHandler:\n    handler: handler.connectHandler\n    events:\n      - websocket: $connect\n```\n\n----------------------------------------\n\nTITLE: Using Pre-existing Kinesis Stream Consumer in Serverless\nDESCRIPTION: This configuration shows how to use a pre-existing Kinesis stream consumer by specifying its ARN. The 'consumer' property is set to the full ARN of the existing stream consumer.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          consumer: arn:aws:kinesis:region:XXXXXX:stream/foo/consumer/foobar:1558544531\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Example for Request Validation in API Gateway\nDESCRIPTION: Sample JSON Schema for validating request payloads in API Gateway. This schema requires a username field with alphanumeric characters only.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\"username\"],\n  \"properties\": {\n    \"username\": {\n      \"type\": \"string\",\n      \"title\": \"The Foo Schema\",\n      \"default\": \"\",\n      \"pattern\": \"^[a-zA-Z0-9]+$\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Cache Policy in Serverless YAML\nDESCRIPTION: Demonstrates how to define a custom cache policy at the provider level and reference it in Lambda@Edge function events. The configuration includes TTL settings and function event mappings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  cloudFront:\n    cachePolicies:\n      myCachePolicy:\n        MinTTL: 0\n        MaxTTL: 86000\n        DefaultTTL: 3600\n        ...\n\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: s3://bucketname.s3.amazonaws.com/files\n          cachePolicy:\n            name: myCachePolicy\n```\n\n----------------------------------------\n\nTITLE: SSM Parameter Storage Format for Deployment Bucket\nDESCRIPTION: JSON structure stored in AWS SSM Parameter Store under /serverless-framework/deployment/s3-bucket key that tracks the deployment bucket details.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/deployment-bucket.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bucketName\": \"<bucket-name>\",\n  \"bucketRegion\": \"<bucket-region>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Serverless Configuration - YAML\nDESCRIPTION: Example serverless.yml configuration file showing variable usage and basic service configuration including functions and resources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/print.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\n\ncustom:\n  bucketName: test\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n\nfunctions:\n  hello:\n    handler: handler.hello\n\nresources:\n  Resources:\n    MyBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.bucketName}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters via CLI in Serverless Framework\nDESCRIPTION: Example showing how to pass parameters directly via the CLI using the --param flag with the pattern --param=\"<key>=<value>\". These parameters can then be accessed in serverless.yml using the ${param:XXX} variable syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --param=\"domain=myapp.com\" --param=\"key=value\"\n```\n\n----------------------------------------\n\nTITLE: Testing Create Customer Endpoint\nDESCRIPTION: cURL command to test the customer creation endpoint with sample data.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -d '{\"name\":\"Gareth Mc Cumskey\",\"email\":\"gareth@mccumskey.com\"}' --url https://[insert your url here]/\n```\n\n----------------------------------------\n\nTITLE: Referencing Output with Partial Context Specification\nDESCRIPTION: Example showing how to reference an output while specifying only certain context parameters (stage in this case). Empty segments in the reference path will use defaults from the current context.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/output-variables.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n${output::dev::my-service.var-key}\n```\n\n----------------------------------------\n\nTITLE: Invoking an AWS Lambda Function\nDESCRIPTION: This command invokes a specific AWS Lambda Function on AWS and returns logs, useful for testing and debugging deployed functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke -f [FUNCTION NAME] \\\n  -s [STAGE NAME] \\\n  -r [REGION NAME] \\\n  -l\n```\n\n----------------------------------------\n\nTITLE: Using Default AWS SSM Configuration in Serverless Framework\nDESCRIPTION: Configuration example showing how to reference AWS SSM parameters using the default resolver setup. This pattern is useful when accessing SSM parameters from the same region as your deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:ssm:/path/to/param}\n```\n\n----------------------------------------\n\nTITLE: Setting DynamoDB Environment Variables\nDESCRIPTION: YAML configuration for setting the DynamoDB table name as an environment variable in the Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}\n```\n\n----------------------------------------\n\nTITLE: Loading a Local Plugin in serverless.yml\nDESCRIPTION: YAML configuration to load a local plugin from a directory in your project. This is useful for plugins you're developing or plugins specific to a single project.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - ./local-directory/custom-serverless-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring PRIVATE Endpoint Type with VPC Endpoints in Serverless Framework\nDESCRIPTION: Example configuration for setting up a PRIVATE endpoint type with VPC endpoint IDs for an API Gateway REST API. This simplifies the invocation of a private API through the generation of an AWS Route 53 alias.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nprovider:\n  name: aws\n  endpointType: PRIVATE\n  vpcEndpointIds:\n    - vpce-123\n    - vpce-456\n```\n\n----------------------------------------\n\nTITLE: Variable Source with Parameters Implementation\nDESCRIPTION: Shows how to implement a variable source that accepts parameters, allowing for more complex variable resolution scenarios using the params argument.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-variables.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor() {\n    this.configurationVariablesSources = {\n      foo: {\n        async resolve({ address, params }) {\n          return {\n            // In the example below, ${foo(one, two):bar} will\n            // resolve to \"one,two\"\n            value: (params || []).join(','),\n          }\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Development of AWS Lambda Functions\nDESCRIPTION: This command facilitates local development of AWS Lambda Functions, allowing developers to run and test functions locally before deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Access or Execution Logging for API Gateway\nDESCRIPTION: Configuration to selectively disable access or execution logging for API Gateway while keeping the logs property enabled.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    restApi:\n      accessLogging: false\n      executionLogging: false\n```\n\n----------------------------------------\n\nTITLE: Enabling SASL/SCRAM-512 Authentication for MSK Event in YAML\nDESCRIPTION: Demonstrates how to enable SASL/SCRAM-512 authentication for an MSK event in AWS Lambda.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/msk.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - msk:\n          arn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\n          topic: mytopic\n          saslScram512: arn:aws:secretsmanager:region:XXXXXX:secret:AmazonMSK_xxxxxx\n```\n\n----------------------------------------\n\nTITLE: Importing the I/O API from @serverless/utils\nDESCRIPTION: Alternative way to access the I/O API in any JavaScript file by requiring the @serverless/utils package, which provides the same utilities available through constructor injection.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { writeText, log, progress } = require('@serverless/utils/log')\n```\n\n----------------------------------------\n\nTITLE: Defining Alexa Skill Event for AWS Lambda Function in YAML\nDESCRIPTION: This snippet shows how to define an Alexa Skill event for an AWS Lambda function in the Serverless Framework configuration. It specifies the function name, handler, and the Alexa Skill ID to trigger the function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alexa-skill.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  mySkill:\n    handler: mySkill.handler\n    events:\n      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx-xx\n```\n\n----------------------------------------\n\nTITLE: AWS Deployment Bucket Configuration\nDESCRIPTION: S3 bucket configuration for deployment artifacts including versioning, encryption, and lifecycle policies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  deploymentPrefix: serverless\n  deploymentBucket:\n    name: com.serverless.${self:provider.region}.deploys\n    maxPreviousDeploymentArtifacts: 10\n    blockPublicAccess: true\n    skipPolicySetup: true\n    versioning: true\n    serverSideEncryption: AES256\n    sseKMSKeyId: arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n    sseCustomerAlgorithim: AES256\n    sseCustomerKey: string\n    sseCustomerKeyMD5: md5sum\n    tags:\n      key1: value1\n      key2: value2\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Deployments in AWS Lambda using Serverless CLI\nDESCRIPTION: This command lists all available deployments in the S3 deployment bucket for the current Serverless project. It's useful for viewing deployment history and preparing for potential rollbacks.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy list\n```\n\n----------------------------------------\n\nTITLE: Print Specific Path - Bash\nDESCRIPTION: Example of printing a specific configuration value using the path option.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/print.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsls print --path provider.name --format text\n```\n\n----------------------------------------\n\nTITLE: Setting Access-Control-Max-Age in Serverless YAML\nDESCRIPTION: This snippet shows how to set the Access-Control-Max-Age header for CORS preflight responses in a serverless function configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors:\n            origin: '*'\n            maxAge: 86400\n```\n\n----------------------------------------\n\nTITLE: Layer Package Configuration Inheritance\nDESCRIPTION: Demonstrates how layers can inherit packaging settings from the global package property.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\npackage:\n  patterns:\n    - '!layerSourceTarball.tar.gz'\n\nlayers:\n  layerOne:\n    path: layerOne\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless SDK in Node.js\nDESCRIPTION: Install the @serverless/sdk package using npm or yarn to enable SDK functionality in your AWS Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @serverless/sdk --save\n# or\nyarn add @serverless/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuration Schema Extension Points in serverless.yml\nDESCRIPTION: Example showing the structure of a serverless.yml file with annotations indicating which schema extension method to use for each section. This serves as a reference for plugin developers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  my-plugin:\n    customProperty: foobar # <-- use defineCustomProperties\n\nmy-plugin: # <-- use defineTopLevelProperty\n  customProperty: foobar\n\nprovider:\n  name: new-provider # <-- use defineProvider\n  my-plugin:\n    customProperty: foobar\n\nfunctions:\n  someFunc:\n    handler: handler.main\n    customProperty: foobar # <-- use defineFunctionProperties\n    events:\n      - yourPluginEvent: # <-- use defineFunctionEvent\n          customProperty: foobar\n      - http:\n          customProperty: foobar # <-- use defineFunctionEventProperties\n```\n\n----------------------------------------\n\nTITLE: Disabling ActiveMQ Event for AWS Lambda in YAML\nDESCRIPTION: This example shows how to disable an ActiveMQ event for an AWS Lambda function by setting the 'enabled' parameter to false. This will pause polling for and processing new messages.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/activemq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - activemq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          enabled: false\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Deployment Command - Serverless CLI\nDESCRIPTION: Main command for deploying all functions, events and infrastructure changes to AWS using CloudFormation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Serverless Plugins Configuration\nDESCRIPTION: Example of configuring Serverless Framework plugins in YAML format.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/intro.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nplugins:\n  - serverless-offline\n  - serverless-secrets\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Property from JavaScript Module in Serverless YAML\nDESCRIPTION: Example of referencing a specific property from a JavaScript module's returned object in serverless.yml using the file() variable syntax with property notation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/javascript.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: new-service\n\ncustom:\n  foo: ${file(./config.js):prop1}\n```\n\n----------------------------------------\n\nTITLE: Activating a Dev Session in a Custom Stage\nDESCRIPTION: Example command for activating a development session in a personalized stage environment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/dev.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless dev --stage austen\n\n```\n\n----------------------------------------\n\nTITLE: Logging Success Messages with Checkmark Format\nDESCRIPTION: How to log a formatted success message with a checkmark in Serverless Framework plugins, used for indicating successful operations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlog.success('The task executed with success')\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Path Resources in Shared API Gateway with Service-A in YAML\nDESCRIPTION: This snippet demonstrates how to configure a Serverless service to create endpoints under a shared API Gateway. This example shows 'service-a' creating a POST endpoint at /posts.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-a\nprovider:\n  apiGateway:\n    restApiId: xxxxxxxxxx\n    restApiRootResourceId: xxxxxxxxxx\n    websocketApiId: xxxxxxxxxx\n    description: Some Description\n\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          method: post\n          path: /posts\n```\n\n----------------------------------------\n\nTITLE: Packaging with Default Stage and Region\nDESCRIPTION: This example packages your service using the default stage ('dev') and default region ('us-east-1'). The packaged artifact is stored in the default '.serverless' directory within your service.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/package.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless package\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Properties with defineTopLevelProperty\nDESCRIPTION: Example showing how to use the defineTopLevelProperty helper to validate a custom top-level section in the serverless.yml file. This ensures that properties in the section meet the specified schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineTopLevelProperty('myPlugin', {\n      type: 'object',\n      properties: {\n        someProperty: { type: 'string' },\n      },\n      required: ['someProperty'],\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration in a Serverless Plugin\nDESCRIPTION: Example of a plugin class that accesses the custom configuration from serverless.yml. The plugin retrieves configuration values via the serverless.service object in a lifecycle hook.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    this.serverless = serverless\n    this.hooks = {\n      'before:deploy': () => this.beforeDeploy(),\n    }\n  }\n\n  beforeDeploy() {\n    // `service` contains the (resolved) serverless.yml config\n    const service = this.serverless.service\n    console.log('Provider name: ', service.provider.name)\n    console.log('Functions: ', service.functions)\n    console.log(\n      'Custom plugin config: ',\n      service['my-plugin']['my-plugin-config'],\n    )\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Kafka Event Configuration in YAML\nDESCRIPTION: Configures self-managed Kafka event source mappings with bootstrap servers and filtering options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - kafka:\n          # See main kafka documentation for various access configuration settings\n          accessConfigurations:\n            # ...\n          # An array of bootstrap server addresses\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n          # name of Kafka topic to consume from\n          topic: MySelfManagedKafkaTopic\n          # Optional, must be in 1-10000 range\n          batchSize: 100\n          # Optional, must be in 0-300 range (seconds)\n          maximumBatchingWindow: 30\n          # Optional, can be set to LATEST, AT_TIMESTAMP or TRIM_HORIZON\n          startingPosition: LATEST\n          # Mandatory when startingPosition is AT_TIMESTAMP\n          startingPositionTimestamp: 10000123\n          # (default: true)\n          enabled: false\n          # Optional, specifies the consumer group ID to be used when consuming from Kafka. If not provided, a random UUID will be generated\n          consumerGroupId: MyConsumerGroupId\n          # Optional, specifies event pattern content filtering\n          filterPatterns:\n            - eventName: INSERT\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Version for IoT Event in YAML\nDESCRIPTION: This example shows how to set a specific SQL version for an IoT event in the Serverless Framework. It uses the 'sqlVersion' property to specify the SQL version for the IoT rule.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myIoT:\n    handler: myIoT.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'some_topic'\"\n          sqlVersion: 'beta'\n```\n\n----------------------------------------\n\nTITLE: Application Load Balancer Event Configuration in YAML\nDESCRIPTION: Sets up ALB event triggers with listener rules, conditions, and health check configurations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dcc0c9188/\n          priority: 1\n          targetGroupName: helloTargetGroup # optional\n          conditions:\n            host: example.com\n            path: /hello\n          # Optional, can also be set using a boolean value\n          healthCheck:\n            path: / # optional\n            intervalSeconds: 35 # optional\n            timeoutSeconds: 30 # optional\n            healthyThresholdCount: 5 # optional\n            unhealthyThresholdCount: 5 # optional\n            matcher: # optional\n              httpCode: '200'\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lambda SDK for Node.js\nDESCRIPTION: Install the @serverless/aws-lambda-sdk package to enable auto-instrumentation for bundled APIs like express or AWS SDK.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @serverless/aws-lambda-sdk --save\n# or\nyarn add @serverless/aws-lambda-sdk\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Policy for Encryption Enforcement\nDESCRIPTION: JSON policy that enforces server-side encryption for S3 bucket operations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"Policy\",\n  \"Statement\": [\n    {\n      \"Sid\": \"EnforceEncryptionMethod\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::<BUCKET_NAME>\",\n        \"arn:aws:s3:::<BUCKET_NAME>/*\"\n      ],\n      \"Condition\": {\n        \"StringNotEquals\": {\n          \"s3:x-amz-server-side-encryption\": [\"AES256\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Alexa Smart Home Event for AWS Lambda in YAML\nDESCRIPTION: This snippet shows how to define a disabled Alexa Smart Home event for a Lambda function. It includes the function name, handler, Alexa Smart Home skill ID, and explicitly sets the 'enabled' flag to false.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alexa-smart-home.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  mySkill:\n    handler: mySkill.handler\n    events:\n      - alexaSmartHome:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Disabled RabbitMQ Event Configuration\nDESCRIPTION: Shows how to disable a RabbitMQ event source mapping using the enabled parameter. Includes additional configuration for virtual host.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/rabbitmq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - rabbitmq:\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          queue: queue-name\n          virtualHost: virtual-host\n          enabled: false\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n```\n\n----------------------------------------\n\nTITLE: Basic Serverless Package Command for AWS Lambda\nDESCRIPTION: The basic command to package your entire infrastructure into the default '.serverless' directory for deployment. This prepares your service for deployment without actually deploying it.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/package.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless package\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Policy Scope for SNS Subscription in YAML\nDESCRIPTION: This example demonstrates how to set the scope for a filter policy. The filter policy scope is set to 'MessageBody', meaning the filter will be applied to the message body instead of message attributes.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  pets:\n    handler: pets.handler\n    events:\n      - sns:\n          topicName: pets\n          filterPolicyScope: MessageBody\n          filterPolicy:\n            pet:\n              - dog\n              - cat\n```\n\n----------------------------------------\n\nTITLE: Payload Format Configuration\nDESCRIPTION: Configuration for setting Lambda integration payload format version at provider and function levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  httpApi:\n    payload: '1.0'\n\nfunctions:\n  hello:\n    handler: index.handler\n    httpApi:\n      payload: '1.0'\n    events:\n      - httpApi:\n          path: /hello\n          method: GET\n```\n\n----------------------------------------\n\nTITLE: Classic S3 Variable Format in Serverless Framework\nDESCRIPTION: Pre-resolvers format for referencing S3 values in service configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: ${s3:myBucket/myKey}-hello\n    handler: handler.hello\n```\n\n----------------------------------------\n\nTITLE: Alternative Cache Policy Configuration with Behavior Property\nDESCRIPTION: Illustrates how to specify cache policy using the behavior.CachePolicyId property in CloudFront event configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: s3://bucketname.s3.amazonaws.com/files\n          behavior:\n            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6\n```\n\n----------------------------------------\n\nTITLE: Specific File Package Configuration\nDESCRIPTION: YAML configuration to exclude all files except a specific handler.js file\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!src/**'\n    - src/function/handler.js\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Serverless Plugin with CLI Command\nDESCRIPTION: This command uninstalls a specified Serverless plugin and removes it from the service's plugins array. It requires the --name or -n option to specify the plugin name.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/plugin-uninstall.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin uninstall --name pluginName\n```\n\n----------------------------------------\n\nTITLE: Merging Existing Configuration in Serverless Plugin\nDESCRIPTION: This example shows how to merge existing configuration with new values in a Serverless plugin. It retrieves the current configuration, merges it with new values, and then extends the configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/extending-configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    this.serverless = serverless\n\n    const currentConfig = this.serverless.configurationInput.custom.myPlugin\n    const value = Object.assign(currentConfig, {\n      myKey: 'myValue',\n    })\n    this.serverless.extendConfiguration(['custom', 'myPlugin'], value)\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Event Configuration in YAML\nDESCRIPTION: Defines RabbitMQ event source mappings with virtual host and authentication settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - rabbitmq:\n          # ARN of RabbitMQ Broker\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          # Name of RabbitMQ queue consume from\n          queue: queue-name\n          # Name of RabbitMQ virtual host to consume from\n          virtualHost: virtual-host\n          # Secrets Manager ARN for basic auth credentials\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n          # Optional, must be in 1-10000 range\n          batchSize: 100\n          # Optional, must be in 0-300 range (seconds)\n          maximumBatchingWindow: 30\n          # Optional, can be set to LATEST or TRIM_HORIZON\n          startingPosition: LATEST\n          # (default: true)\n          enabled: false\n          # Optional, specifies event pattern content filtering\n          filterPatterns:\n            - value:\n                a: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Lambda Function Metrics for a Specific Function and Timespan\nDESCRIPTION: This command displays all metrics for the 'hello' function for a specific time range. It combines the --function option with --startTime and --endTime options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless metrics --function hello \\\n  --startTime 2016-01-01 \\\n  --endTime 2016-01-02\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Event Configuration in YAML\nDESCRIPTION: Configures CloudWatch Events and Logs with filtering and input transformations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - cloudwatchEvent:\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n          # Note, you can use only one of input, inputPath, or inputTransformer\n          input:\n            key1: value1\n            key2: value2\n            stageParams:\n              stage: dev\n          inputPath: '$.stageVariables'\n          inputTransformer:\n            inputPathsMap:\n              eventTime: '$.time'\n            inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n      - cloudwatchLog:\n          logGroup: '/aws/lambda/hello'\n          filter: '{$.userIdentity.type = Root}'\n```\n\n----------------------------------------\n\nTITLE: Disabling Observability for a Specific Stage in Serverless YAML\nDESCRIPTION: This YAML snippet demonstrates how to disable Serverless Framework's Monitoring & Observability features for a specific stage (prod) within a Serverless Framework Service.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\norg: my-org\napp: my-app\n\nstages:\n  prod:\n    observability: false\n```\n\n----------------------------------------\n\nTITLE: Support Command Usage\nDESCRIPTION: Command to generate issue reports or connect with Serverless Framework support team.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsls support\n```\n\n----------------------------------------\n\nTITLE: Disabling EventBridge Events in YAML\nDESCRIPTION: Shows how to disable an EventBridge event rule while maintaining its configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          enabled: false\n          schedule: rate(10 minutes)\n          input:\n            key1: value1\n```\n\n----------------------------------------\n\nTITLE: Converting String Variables to Boolean in YAML\nDESCRIPTION: Shows how to use the strToBool function to convert string variables to proper boolean values for configuration properties that require boolean types.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  tracing:\n    apiGateway: ${strToBool(${ssm:API_GW_DEBUG_ENABLED})}\n```\n\n----------------------------------------\n\nTITLE: Using AWS Account ID Variable in Serverless Config\nDESCRIPTION: Example showing how to reference AWS account ID in a Serverless Framework configuration using the aws:accountId variable. Demonstrates setting environment variables in Lambda functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider:\n  name: aws\n\nfunctions:\n  func1:\n    name: function-1\n    handler: handler.func1\n    environment:\n      ACCOUNT_ID: ${aws:accountId}\n```\n\n----------------------------------------\n\nTITLE: Setting Stage-Specific Parameters in YAML\nDESCRIPTION: Demonstrates how to define parameters that can vary by stage, in this case setting different domain names for different environments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    params:\n      domain: ${sls:stage}.example-dev.com\n  prod:\n    params:\n      domain: example.com\n\nprovider:\n  environment:\n    APP_DOMAIN: ${param:domain}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IAM Role for API Gateway Logs\nDESCRIPTION: Configuration to use an existing IAM role for API Gateway CloudWatch logs instead of letting Serverless create one automatically.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  logs:\n    restApi:\n      role: arn:aws:iam::123456:role\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Handler in Node.js\nDESCRIPTION: Example Lambda handler function that returns a 200 status code with a hello message.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/sam.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nexport const handler = async (event) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Individual Services with Dependencies\nDESCRIPTION: Bash command template for executing specific commands on individual services, where the Framework automatically fetches necessary dependency data from stored state.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/state.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless <service> <command>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: YAML configuration for setting up environment variables using parameters in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  ...\n  environment:\n    SERVICE_A_QUEUE_URL: ${param:queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Mapping Request Parameter Values in API Gateway with Serverless Framework\nDESCRIPTION: Configuration for mapping different values for request parameters by defining the required and mappedValue properties of the request parameter.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.post_detail\n    events:\n      - http:\n          path: posts/{id}\n          method: get\n          request:\n            parameters:\n              paths:\n                id: true\n              headers:\n                custom-header:\n                  required: true\n                  mappedValue: context.requestId\n```\n\n----------------------------------------\n\nTITLE: Packaging to a Custom Directory\nDESCRIPTION: This example demonstrates how to package your service to a custom directory instead of the default '.serverless' directory. It uses default stage and region settings while specifying a custom output path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/package.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nserverless package --package /path/to/package/directory\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Response Handler in Lambda\nDESCRIPTION: JavaScript function that returns a binary image as a base64-encoded response with proper content-type headers. This handler works with the API Gateway binary media type configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nconst fsp = require('fs').promises\nconst path = require('path')\n\nmodule.exports.handler = async () => ({\n  statusCode: 200,\n  headers: { 'Content-type': 'image/jpeg' },\n  body: (await fsp.readFile(path.resolve(__dirname, 'image.jpg'))).toString(\n    'base64',\n  ),\n  isBase64Encoded: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS X-Ray Tracing for API Gateway\nDESCRIPTION: Configuration to enable AWS X-Ray distributed tracing for API Gateway, which helps with debugging and performance analysis of your serverless application.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nprovider:\n  name: aws\n  tracing:\n    apiGateway: true\n```\n\n----------------------------------------\n\nTITLE: Referencing Entire JavaScript Module in Serverless YAML\nDESCRIPTION: Example of referencing an entire JavaScript module's returned value in serverless.yml configuration using the file() variable syntax.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/javascript.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: new-service\n\ncustom: ${file(./config.js)}\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-line Service Information\nDESCRIPTION: Adding multi-line sections to the service information output in Serverless Framework plugins by providing an array of strings as content.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nserverless.addServiceOutputSection('my section', ['line 1', 'line 2'])\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependency\nDESCRIPTION: Command to install the AWS SDK npm package required for DynamoDB operations.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install aws-sdk\n```\n\n----------------------------------------\n\nTITLE: Framework Version Pinning Configuration\nDESCRIPTION: Examples of pinning Serverless Framework versions using exact version and version range in serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/services.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nframeworkVersion: '2.1.0'\n\nservice: users\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  memorySize: 512\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nframeworkVersion: \"^2.1.0\" # >=2.1.0 && <3.0.0\n\nservice: users\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  memorySize: 512\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Lambda@Edge Events in Serverless Framework\nDESCRIPTION: YAML configuration for setting up AWS CloudFront Lambda@Edge events. Includes settings for event type, body inclusion, path pattern, cache policy, and origin configuration for serverless functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          includeBody: true\n          pathPattern: /docs*\n          cachePolicy:\n            # Use either name or id\n            # Refers to a Cache Policy defined in 'provider.cloudFront.cachePolicies'\n            name: myCachePolicy1\n            # Refers to any external Cache Policy ID\n            id: 658327ea-f89d-4fab-a63d-7e88639e58f6\n          origin:\n            DomainName: serverless.com\n            OriginPath: /framework\n            CustomOriginConfig:\n              OriginProtocolPolicy: match-viewer\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with String Data\nDESCRIPTION: Example showing how to invoke a function while passing string data as the event input. This is useful for simple testing with basic input data.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --data \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Endpoint in API Gateway\nDESCRIPTION: Configuration to disable the default API Gateway endpoint, requiring clients to use a custom domain name for API invocation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_64\n\nLANGUAGE: yml\nCODE:\n```\nprovider:\n  apiGateway:\n    disableDefaultEndpoint: true\n```\n\n----------------------------------------\n\nTITLE: Sample IAM Policy for Serverless Framework Deployments on AWS\nDESCRIPTION: This IAM policy provides the necessary permissions for Serverless Framework to deploy basic Node.js Lambda functions and integrate with the Serverless dashboard. It includes permissions for Lambda, CloudFormation, S3, IAM, CloudWatch Logs, API Gateway, and other AWS services.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"lambda:CreateFunction\",\n                \"logs:DeleteSubscriptionFilter\",\n                \"s3:CreateBucket\",\n                \"iam:CreateRole\",\n                \"lambda:GetFunctionConfiguration\",\n                \"cloudformation:DescribeStackResource\",\n                \"iam:PutRolePolicy\",\n                \"s3:GetObject*\",\n                \"cloudformation:DescribeStackEvents\",\n                \"s3:DeleteBucketWebsite\",\n                \"logs:GetLogEvents\",\n                \"cloudformation:UpdateStack\",\n                \"lambda:ListLayerVersions\",\n                \"lambda:ListLayers\",\n                \"lambda:DeleteFunction\",\n                \"events:RemoveTargets\",\n                \"logs:FilterLogEvents\",\n                \"lambda:GetAlias\",\n                \"s3:DeleteObject\",\n                \"s3:ListBucket\",\n                \"apigateway:GET\",\n                \"cloudformation:ListStackResources\",\n                \"iam:GetRole\",\n                \"events:DescribeRule\",\n                \"lambda:ListFunctions\",\n                \"lambda:InvokeFunction\",\n                \"lambda:GetEventSourceMapping\",\n                \"lambda:ListAliases\",\n                \"iam:DeleteRole\",\n                \"iam:UpdateAssumeRolePolicy\",\n                \"s3:DeleteBucketPolicy\",\n                \"logs:CreateLogGroup\",\n                \"logs:TagResource\",\n                \"cloudformation:DescribeStacks\",\n                \"lambda:UpdateFunctionCode\",\n                \"s3:PutObject\",\n                \"cloudformation:DeleteStack\",\n                \"lambda:ListEventSourceMappings\",\n                \"lambda:PublishVersion\",\n                \"logs:PutSubscriptionFilter\",\n                \"apigateway:POST\",\n                \"cloudformation:ValidateTemplate\",\n                \"lambda:ListVersionsByFunction\",\n                \"lambda:GetLayerVersion\",\n                \"s3:DeleteObjectVersion\",\n                \"events:PutRule\",\n                \"lambda:GetAccountSettings\",\n                \"lambda:GetLayerVersionPolicy\",\n                \"s3:PutEncryptionConfiguration\",\n                \"apigateway:DELETE\",\n                \"iam:PassRole\",\n                \"lambda:ListTags\",\n                \"iam:DeleteRolePolicy\",\n                \"apigateway:PATCH\",\n                \"s3:DeleteBucket\",\n                \"logs:DescribeLogGroups\",\n                \"logs:DeleteLogGroup\",\n                \"apigateway:PUT\",\n                \"lambda:GetFunction\",\n                \"lambda:UpdateFunctionConfiguration\",\n                \"events:PutTargets\",\n                \"lambda:AddPermission\",\n                \"cloudformation:CreateStack\",\n                \"s3:PutBucketPolicy\",\n                \"sts:GetCallerIdentity\",\n                \"lambda:RemovePermission\",\n                \"s3:GetBucketLocation\",\n                \"lambda:GetPolicy\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Parameters for HTTP API in Serverless YAML\nDESCRIPTION: Demonstrates how to set up a route with path parameters in the HTTP API configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  params:\n    handler: handler.params\n    events:\n      - httpApi:\n          method: GET\n          path: /get/for/any/{param}\n```\n\n----------------------------------------\n\nTITLE: Extending Configuration in Serverless Plugin Constructor\nDESCRIPTION: This snippet demonstrates how to use the 'serverless.extendConfiguration()' method in a plugin constructor to add or override configuration. It sets a custom configuration value for the plugin.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/extending-configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    this.serverless = serverless\n\n    const value = {\n      myKey: 'myValue',\n    }\n    this.serverless.extendConfiguration(['custom', 'myPlugin'], value)\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Plugin via NPM\nDESCRIPTION: Command to manually install a Serverless Framework plugin using NPM. After installation, you'll need to register the plugin in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev custom-serverless-plugin\n```\n\n----------------------------------------\n\nTITLE: Adding Service Information Sections\nDESCRIPTION: How to add custom sections to the service information output displayed after 'serverless deploy' or in 'serverless info', with support for single-line and multi-line content.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nserverless.addServiceOutputSection('my section', 'content')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command Options in Serverless Plugin\nDESCRIPTION: Demonstrates how to define CLI options for a custom command in a Serverless plugin. This example creates a required '--function' option with '-f' shortcut and shows how to access the option value in the command handler.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, options) {\n    this.options = options\n\n    this.commands = {\n      'my-command': {\n        // The 'usage' property is used to display the 'serverless --help' output\n        usage: 'This is my new custom command!',\n        lifecycleEvents: ['run'],\n        options: {\n          // Define the '--function' option with the '-f' shortcut\n          function: {\n            usage:\n              'Specify the function you want to handle (e.g. \"--function myFunction\")',\n            shortcut: 'f',\n            required: true,\n            type: 'string', // Possible values: 'string', 'boolean', 'multiple'\n          },\n        },\n      },\n    }\n\n    this.hooks = {\n      'my-command:run': () => this.run(),\n    }\n  }\n\n  run() {\n    console.log('The option was: ', this.options.function)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting API Gateway Resources with CloudFormation in YAML\nDESCRIPTION: This snippet shows how to create a dedicated service for your API Gateway resources and export the IDs using CloudFormation cross-stack references. This approach makes sharing API Gateway resources across services clean and CI/CD friendly.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-api\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  stage: dev\n  region: eu-west-2\n\nresources:\n  Resources:\n    MyApiGW:\n      Type: AWS::ApiGateway::RestApi\n      Properties:\n        Name: MyApiGW\n\n    MyWebsocketApi:\n      Type: AWS::ApiGatewayV2::Api\n      Properties:\n        Name: MyWebsocketApi\n        ProtocolType: WEBSOCKET\n        RouteSelectionExpression: '$request.body.action'\n\n  Outputs:\n    apiGatewayRestApiId:\n      Value:\n        Ref: MyApiGW\n      Export:\n        Name: MyApiGateway-restApiId\n\n    apiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt:\n          - MyApiGW\n          - RootResourceId\n      Export:\n        Name: MyApiGateway-rootResourceId\n\n    websocketApiId:\n      Value:\n        Ref: MyWebsocketApi\n      Export:\n        Name: MyApiGateway-websocketApiId\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with Stage and Region Options\nDESCRIPTION: Example demonstrating how to deploy a Lambda function to a specific stage and region. This allows for targeting different environments like development, staging, or production.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-function.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function --function helloWorld \\\n  --stage dev \\\n  --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors with SDK\nDESCRIPTION: Example of capturing handled errors using the capture_error method.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.capture_error(Exception(\"Unexpected\"))\n```\n\n----------------------------------------\n\nTITLE: ActiveMQ Event Configuration in YAML\nDESCRIPTION: Sets up ActiveMQ event source mappings with authentication and filtering capabilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - activemq:\n          # ARN of ActiveMQ Broker\n          arn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\n          # Name of ActiveMQ queue consume from\n          queue: queue-name\n          # Secrets Manager ARN for basic auth credentials\n          basicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n          # Optional, must be in 1-10000 range\n          batchSize: 100\n          # Optional, must be in 0-300 range (seconds)\n          maximumBatchingWindow: 30\n          # Optional, can be set to LATEST or TRIM_HORIZON\n          startingPosition: LATEST\n          # (default: true)\n          enabled: false\n          # Optional, specifies event pattern content filtering\n          filterPatterns:\n            - value:\n                a: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Disabling Trace Sampling in Serverless YAML\nDESCRIPTION: This YAML snippet shows how to disable trace sampling by setting the SLS_DISABLE_TRACE_SAMPLING environment variable in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    SLS_DISABLE_TRACE_SAMPLING\n```\n\n----------------------------------------\n\nTITLE: Configuring Redrive Policy with Dead Letter Queue ARN in YAML\nDESCRIPTION: This snippet shows how to configure a redrive policy for an SNS topic. Messages that can't be delivered to the Lambda function will be sent to the specified Dead Letter Queue.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.handler\n    events:\n      - sns:\n          topicName: dispatcher\n          redrivePolicy:\n            deadLetterTargetArn: arn:aws:sqs:us-east-1:11111111111:myDLQ\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Serverless Plugin in JavaScript\nDESCRIPTION: Basic structure for creating a Serverless Framework plugin using a JavaScript class. Shows the minimal required implementation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nclass MyPlugin {\n  constructor() {\n    // The plugin is loaded\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Layer Access Permissions Configuration\nDESCRIPTION: Demonstrates how to configure layer permissions for specific AWS accounts.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\nlayers:\n  layerOne:\n    path: layerOne\n    allowedAccounts:\n      - 111111111111\n      - 222222222222\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Dashboard Providers with Resolvers in YAML\nDESCRIPTION: Example configuration showing how to use Serverless Dashboard Providers with resolvers, including both dashboard-based and local profile credentials. Demonstrates setting org, app, and different resolver configurations for AWS credentials.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/credentials.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\norg: my-org\napp: my-app\n\nstages:\n  default:\n    resolvers:\n      local-profile-account:\n        type: aws\n        dashboard: false\n        region: us-west-2\n        profile: project-specific-profile\n      dashboard-provider-account:\n        type: aws\n\nprovider:\n  name: aws\n  resolver: local-profile-account\n```\n\n----------------------------------------\n\nTITLE: Using Multiple AWS Resolvers in Serverless Configuration\nDESCRIPTION: Demonstration of using multiple AWS Resolvers in a serverless.yml file. This example shows how to configure different AWS accounts for variable resolution and deployment, using the provider.resolver property to specify deployment credentials.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/credentials.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\n\nstages:\n  default:\n    resolvers:\n      shared-account:\n        type: aws\n        region: us-east-1\n        accessKeyId: ${env:SHARED_ACCOUNT_AWS_ACCESS_KEY_ID}\n        secretAccessKey: ${env:SHARED_ACCOUNT_AWS_SECRET_ACCESS_KEY}\n      project-specific-account:\n        type: aws\n        region: us-west-2\n        profile: project-specific-profile\n\nprovider:\n  name: aws\n  resolver: project-specific-account\n\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      ACCOUNT_ID: ${project-specific-account:accountId}\n      SHARED_VAR: ${shared-account:someSsmVariable}\n```\n\n----------------------------------------\n\nTITLE: Example Lambda Integration Event Format for API Gateway in AWS\nDESCRIPTION: Example of the event object structure when using the LAMBDA integration method with API Gateway. This shows the default format before any customization is applied.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": {},\n  \"method\": \"GET\",\n  \"principalId\": \"\",\n  \"stage\": \"dev\",\n  \"cognitoPoolClaims\": {\n    \"sub\": \"\"\n  },\n  \"enhancedAuthContext\": {},\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"en-GB,en-US;q=0.8,en;q=0.6,zh-CN;q=0.4\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Viewer-Country\": \"GB\",\n    \"Host\": \"ec5ycylws8.execute-api.us-east-1.amazonaws.com\",\n    \"upgrade-insecure-requests\": \"1\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n    \"Via\": \"2.0 f165ce34daf8c0da182681179e863c24.cloudfront.net (CloudFront)\",\n    \"X-Amz-Cf-Id\": \"l06CAg2QsrALeQcLAUSxGXbm8lgMoMIhR2AjKa4AiKuaVnnGsOFy5g==\",\n    \"X-Amzn-Trace-Id\": \"Root=1-5970ef20-3e249c0321b2eef14aa513ae\",\n    \"X-Forwarded-For\": \"94.117.120.169, 116.132.62.73\",\n    \"X-Forwarded-Port\": \"443\",\n    \"X-Forwarded-Proto\": \"https\"\n  },\n  \"query\": {},\n  \"path\": {},\n  \"identity\": {\n    \"cognitoIdentityPoolId\": \"\",\n    \"accountId\": \"\",\n    \"cognitoIdentityId\": \"\",\n    \"caller\": \"\",\n    \"apiKey\": \"\",\n    \"sourceIp\": \"94.197.120.169\",\n    \"accessKey\": \"\",\n    \"cognitoAuthenticationType\": \"\",\n    \"cognitoAuthenticationProvider\": \"\",\n    \"userArn\": \"\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n    \"user\": \"\"\n  },\n  \"stageVariables\": {},\n  \"requestPath\": \"/request/path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Variable Resolution with External Values\nDESCRIPTION: Demonstrates how to implement a variable resolver that can access other variables, configuration values, and CLI options for complex resolution scenarios.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-variables.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor() {\n    this.configurationVariablesSources = {\n      foo: {\n        async resolve({ resolveVariable, options }) {\n          // `options` is CLI options\n          // `resolveVariable` resolves other variables (for example here: `${sls:stage}`)\n          const stage = await resolveVariable('sls:stage')\n          // To retrieve a configuration value from serverless.yml, use the `self:xxx` variable source, for example:\n          // await resolveVariable('self:provider.region')\n\n          return {\n            value: `The stage is ${stage}`,\n          }\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Policy in API Gateway\nDESCRIPTION: Example of configuring a resource policy for API Gateway, which controls the invocation of the API. This policy allows invocation only from a specific IP address.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  runtime: nodejs14.x\n\n  apiGateway:\n    resourcePolicy:\n      - Effect: Allow\n        Principal: '*'\n        Action: execute-api:Invoke\n        Resource:\n          - execute-api:/*/*/*\n        Condition:\n          IpAddress:\n            aws:SourceIp:\n              - '123.123.123.123'\n```\n\n----------------------------------------\n\nTITLE: Installing the serverless-webpack Plugin\nDESCRIPTION: This example demonstrates how to install the serverless-webpack plugin using the Serverless Framework CLI command.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/plugin-install.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin install --name serverless-webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Alexa Smart Home Event for AWS Lambda in YAML\nDESCRIPTION: This snippet demonstrates how to define an Alexa Smart Home event for a Lambda function in the Serverless Framework configuration. It includes the function name, handler, and the Alexa Smart Home skill ID.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alexa-smart-home.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  mySkill:\n    handler: mySkill.handler\n    events:\n      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx\n```\n\n----------------------------------------\n\nTITLE: Configuring Redrive Policy with Imported Values in YAML\nDESCRIPTION: This snippet shows how to configure a redrive policy using imported values from other stacks. The DLQ URL and ARN are defined using exported values from a shared stack.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  dispatcher:\n    handler: dispatcher.handler\n    events:\n      - sns:\n          topicName: dispatcher\n          redrivePolicy:\n            deadLetterTargetImport:\n              arn: MyShared-DLQArn\n              url: MyShared-DLQUrl\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Maps in Node.js Lambda Function\nDESCRIPTION: Set the NODE_OPTIONS environment variable to enable source maps in the Lambda function for improved error stack traces.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    NODE_OPTIONS: --enable-source-maps\n```\n\n----------------------------------------\n\nTITLE: Using instanceId in Serverless YAML Configuration\nDESCRIPTION: This snippet demonstrates how to use the {sls:instanceId} variable in a Serverless Framework configuration file. It's used to generate a unique deployment ID for an API Gateway resource.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/core.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\n\nfunctions:\n  func1:\n    name: function-1\n    handler: handler.func1\n    environment:\n      APIG_DEPLOYMENT_ID: ApiGatewayDeployment${sls:instanceId}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Documentation Metadata\nDESCRIPTION: Front matter metadata block defining the documentation title, description, and keywords for the Serverless Dashboard documentation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/private-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\ntitle: Serverless Dashboard - CI/CD Private Package Manager (NPM)\ndescription: Learn how to use private package managers like NPM in your Serverless Framework CI/CD workflow.\nshort_title: Serverless Dashboard - Private Packages\nkeywords:\n  [\n    'Serverless Framework',\n    'CI/CD',\n    'Private Package Manager',\n    'NPM',\n    'Environment Variables',\n    'Authentication',\n  ]\n-->\n```\n\n----------------------------------------\n\nTITLE: ESM esbuild configuration with plugin for AWS Lambda\nDESCRIPTION: This JavaScript snippet (ESM) demonstrates an esbuild configuration file that uses the esbuild-plugin-env plugin. It exports a function that returns the configuration object, with the Serverless instance passed as an argument.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/building.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport env from 'esbuild-plugin-env'\n\nexport default (serverless) => {\n  return {\n    external: ['@aws-sdk/client-s3'],\n    plugins: [env()],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Captured Warnings in Node.js\nDESCRIPTION: Add tags to specific captured warnings for more detailed context when reporting to Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.captureWarning('warning message', {\n  tags: { userId: 'eb661c69405c' },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverless Service\nDESCRIPTION: This command creates a new Serverless service, which is the starting point for a new project.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/workflow.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Custom State Configuration with S3 Bucket in Serverless Compose\nDESCRIPTION: YAML configuration showing how to specify a custom S3 bucket for state management using resolvers in serverless-compose.yml, enabling use of an existing bucket instead of auto-creating one.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/state.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstate: my-s3-state-resolver\n\nstages:\n  default:\n    resolvers:\n      my-aws-account:\n        type: aws\n        my-s3-state-resolver:\n          type: s3\n          bucketName: my-custom-state-bucket\n\nservices:\n  service-a:\n    path: service-a\n\n  service-b:\n    path: service-b\n    params:\n      queueUrl: ${service-a.queueUrl}\n```\n\n----------------------------------------\n\nTITLE: Handling StringList Parameters as Arrays in Serverless\nDESCRIPTION: Configuration demonstrating how StringList type parameters are automatically resolved as arrays in Serverless Framework. This example shows the basic usage in the custom section.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n    name: hello\n    handler: handler.hello\ncustom:\n  myArrayVar: ${ssm:/path/to/stringlistparam}\n```\n\n----------------------------------------\n\nTITLE: Accessing Serverless Instance in Plugin\nDESCRIPTION: Example demonstrating how to access the Serverless instance and configuration within a plugin.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nclass MyPlugin {\n  constructor(serverless, options, utils) {\n    this.serverless = serverless\n    this.options = options // CLI options\n    this.utils = utils\n\n    this.hooks = {\n      initialize: () => this.init(),\n    }\n  }\n\n  init() {\n    // Use this custom logging method instead of console.log\n    // to avoid conflicting with the spinner output\n    this.utils.log('Serverless instance: ', this.serverless)\n\n    // `serverless.service` contains the (resolved) serverless.yml config\n    const service = this.serverless.service\n\n    this.utils.log('Provider name: ', service.provider.name)\n    this.utils.log('Functions: ', service.functions)\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Invoking a Deployed Function with Region and Stage Parameters\nDESCRIPTION: Example command for invoking a deployed function with specific stage and region parameters. This will execute the function in the specified environment and output the result to the terminal.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke --function functionName --stage dev --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Service-Level Artifact Configuration\nDESCRIPTION: YAML configuration for specifying a custom artifact zip file at the service level\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\npackage:\n  artifact: path/to/my-artifact.zip\n```\n\n----------------------------------------\n\nTITLE: Customizing API Gateway Access Log Format\nDESCRIPTION: Configuration to specify a custom format for API Gateway access logs, allowing you to define exactly what information is logged for each request.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    restApi:\n      format: '{ \"requestId\":\"$context.requestId\",   \"ip\": \"$context.identity.sourceIp\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Get Customers Endpoint\nDESCRIPTION: YAML configuration for setting up the HTTP GET endpoint that retrieves all customers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ngetCustomers:\n  handler: getCustomers.getCustomers\n  events:\n    - httpApi:\n        path: /customers\n        method: get\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Vault Resolver in Serverless Framework\nDESCRIPTION: YAML configuration for setting up the HashiCorp Vault resolver in Serverless Framework. Includes settings for address, token, version and path to the secrets.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/vault.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      vault:\n        type: vault\n        address: http://127.0.0.1:8200\n        token: ${env:VAULT_TOKEN}\n        version: v1\n        path: secret/data/mongo\n```\n\n----------------------------------------\n\nTITLE: Remote/Cloud Backend Configuration in Serverless\nDESCRIPTION: Configuration for accessing Terraform state stored in Terraform Cloud or Enterprise\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      terraform:\n        type: terraform\n        backend: remote\n        organization: my-org\n        workspace: my-workspace\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Python tests in Serverless CI/CD\nDESCRIPTION: A package.json configuration for Python projects showing how to install Python dependencies and run Python test suites. It includes a postinstall script to install requirements and a test script that runs pytest.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/running-tests.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"demo-python\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"postinstall\": \"pip3 install -r requirements.txt\",\n    \"test\": \"pytest\"\n  },\n  \"devDependencies\": {\n    \"serverless-python-requirements\": \"^5.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing API Gateway Stage Name\nDESCRIPTION: Configuration to override the default API Gateway stage name with a custom one instead of using the serverless stage name.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_65\n\nLANGUAGE: yml\nCODE:\n```\nprovider:\n  apiGateway:\n    stage: customStageName\n```\n\n----------------------------------------\n\nTITLE: Setting Serverless License Key as Environment Variable in Bash\nDESCRIPTION: Example showing how to set the SERVERLESS_LICENSE_KEY environment variable in a bash environment or CI/CD pipeline for Serverless Framework authentication.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/license-keys.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVERLESS_LICENSE_KEY=<your-license-key>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to CloudWatch Event in YAML\nDESCRIPTION: This code demonstrates how to add a description to a CloudWatch Event configuration. The description provides additional context about the event's purpose.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-event.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myCloudWatch:\n    handler: myCloudWatch.handler\n    events:\n      - cloudwatchEvent:\n          description: 'CloudWatch Event triggered on EC2 Instance pending state'\n          event:\n            source:\n              - 'aws.ec2'\n            detail-type:\n              - 'EC2 Instance State-change Notification'\n            detail:\n              state:\n                - pending\n```\n\n----------------------------------------\n\nTITLE: Custom Deployment Bucket Configuration\nDESCRIPTION: YAML configuration in serverless.yml file to specify a custom deployment bucket instead of using the default auto-generated bucket.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/deployment-bucket.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  deploymentBucket:\n    name: custom-deployment-bucket\n```\n\n----------------------------------------\n\nTITLE: Multiple Function CloudWatch Log Configuration\nDESCRIPTION: Example showing configuration of multiple Lambda functions with different CloudWatch Log event triggers. Each function monitors its own log group.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-log.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello1:\n    handler: handler.hello1\n    events:\n      - cloudwatchLog: '/aws/lambda/hello1'\n  hello2:\n    handler: handler.hello2\n    events:\n      - cloudwatchLog: '/aws/lambda/hello2'\n```\n\n----------------------------------------\n\nTITLE: Configuring App and Service in serverless.yml\nDESCRIPTION: YAML configuration example showing how to manually set the app and service names in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\napp: my-app\n```\n\n----------------------------------------\n\nTITLE: Defining Stage Parameters in Serverless Framework V4 (YAML)\nDESCRIPTION: Demonstrates the new syntax for defining stage-specific parameters in Serverless Framework V4 configuration files. Parameters are now defined under 'stages.<stage>.params', providing a more structured approach.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/upgrading-v4.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    params:\n      key1: devValue\n  prod:\n    params:\n      key1: prodValue\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Dashboard Observability in YAML\nDESCRIPTION: This configuration shows how to properly set up the Serverless Dashboard for observability in your serverless.yml file. It includes required organization and application properties, along with the observability setting in the stages block.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Ensure these properties are present to connect to the Dashboard\norg: my-org\napp: my-app\n\n# Control observability instrumentation settings under stages\nstages:\n  prod:\n    observability: true # or observability: dashboard\n```\n\n----------------------------------------\n\nTITLE: Default HTTP API Log Format\nDESCRIPTION: Default JSON format for HTTP API access logs showing request and response details.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"$context.requestId\",\n  \"ip\": \"$context.identity.sourceIp\",\n  \"requestTime\": \"$context.requestTime\",\n  \"httpMethod\": \"$context.httpMethod\",\n  \"routeKey\": \"$context.routeKey\",\n  \"status\": \"$context.status\",\n  \"protocol\": \"$context.protocol\",\n  \"responseLength\": \"$context.responseLength\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Resolver with Path Prefix\nDESCRIPTION: Example showing how to configure a path prefix in the Vault resolver, which will be prepended to paths in variable references.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/vault.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      vault:\n        path: secret/data\n\n\n${vault:mongo/credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Executing Rollback to Specific Timestamp in Serverless Framework CLI\nDESCRIPTION: This command demonstrates rolling back a Serverless service to a specific deployment using its timestamp. It shows the process of updating the stack and checking the update progress.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/rollback.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverless rollback -t 1476893957131\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n.....\nServerless: Stack update finished...\n```\n\n----------------------------------------\n\nTITLE: Defining Global Schedule in External YAML File\nDESCRIPTION: Example of a custom YAML file containing a global schedule definition that can be referenced in the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# myCustomFile.yml\nglobalSchedule: rate(10 minutes)\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin in serverless.yml\nDESCRIPTION: YAML configuration to register a plugin in the serverless.yml file. This is required if you manually installed the plugin via NPM.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml file\n\nplugins:\n  - custom-serverless-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Axiom API Token Environment Variable in Bash\nDESCRIPTION: Sets the AXIOM_TOKEN environment variable to authenticate with Axiom's API. This can be done locally or in a CI/CD pipeline.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/axiom.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AXIOM_TOKEN=your-axiom-access-token\n```\n\n----------------------------------------\n\nTITLE: AWS Provider Configuration - Serverless YAML\nDESCRIPTION: Example configuration for setting default stage and region in serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nservice: service-name\nprovider:\n  name: aws\n  stage: beta\n  region: us-west-2\n```\n\n----------------------------------------\n\nTITLE: Setting Display Name for SNS Topic in YAML\nDESCRIPTION: This example demonstrates how to set a display name for an SNS topic. The display name 'Data aggregation pipeline' will be shown in the AWS console to describe the purpose of the topic.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/sns.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  aggregator:\n    handler: aggregator.handler\n    events:\n      - sns:\n          topicName: aggregate\n          displayName: Data aggregation pipeline\n```\n\n----------------------------------------\n\nTITLE: Setting MaximumRecordAgeInSeconds for Stream Event in YAML\nDESCRIPTION: This configuration sets the maximum age of a record that Lambda sends to a function for processing in a stream event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/streams.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  preprocess:\n    handler: handler.preprocess\n    events:\n      - stream:\n          arn: arn:aws:kinesis:region:XXXXXX:stream/foo\n          maximumRecordAgeInSeconds: 120\n```\n\n----------------------------------------\n\nTITLE: JSON Format Info Command Output Example\nDESCRIPTION: Example of the info command output in JSON format using the --json flag, showing detailed service and stack output information.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/info.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": {\n    \"functions\": [\n      {\n        \"name\": \"hello\",\n        \"deployedName\": \"my-serverless-service-dev-hello\"\n      }\n    ],\n    \"layers\": [],\n    \"endpoints\": [\n      \"httpApi: https://mnpgyjhfqj.execute-api.us-east-1.amazonaws.com\"\n    ],\n    \"service\": \"my-serverless-service\",\n    \"stage\": \"dev\",\n    \"region\": \"us-east-1\",\n    \"stack\": \"my-serverless-service-dev\",\n    \"resourceCount\": 4,\n    \"apiKeys\": []\n  },\n  \"outputs\": [\n    {\n      \"OutputKey\": \"HelloLambdaFunctionQualifiedArn\",\n      \"OutputValue\": \"arn:aws:lambda:us-east-1:012345678901:function:my-serverless-service-dev-hello:26\",\n      \"Description\": \"Current Lambda function version\",\n      \"ExportName\": \"sls-my-serverless-service-dev-hello-HelloLambdaFunctionQualifiedArn\"\n    },\n    {\n      \"OutputKey\": \"ServerlessDeploymentBucketName\",\n      \"OutputValue\": \"serverless-framework-deployments-us-east-1-d7b2bf38-2784\",\n      \"ExportName\": \"sls-my-serverless-service-dev-ServerlessDeploymentBucketName\"\n    },\n    {\n      \"OutputKey\": \"HttpApiId\",\n      \"OutputValue\": \"mnpgyjhfqj\",\n      \"Description\": \"Id of the HTTP API\",\n      \"ExportName\": \"sls-my-serverless-service-dev-HttpApiId\"\n    },\n    {\n      \"OutputKey\": \"HttpApiUrl\",\n      \"OutputValue\": \"https://mnpgyjhfqj.execute-api.us-east-1.amazonaws.com\",\n      \"Description\": \"URL of the HTTP API\",\n      \"ExportName\": \"sls-my-serverless-service-dev-HttpApiUrl\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple IoT Fleet Provisioning Event in YAML\nDESCRIPTION: This snippet demonstrates how to create an IoT Provisioning Template with a pre-provision hook lambda. It requires templateBody and provisioningRoleArn fields.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot-fleet-provisioning.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  smartHomeValidation:\n    handler: smartHomeValidation.handler\n    events:\n      - iotFleetProvisioning:\n          templateBody: ${file(template.json)}\n          provisioningRoleArn: arn:aws:iam::12345678910:role/provisioning-role\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket API Gateway Logs\nDESCRIPTION: Configuration example for WebSocket API Gateway logs, which supports the same options as REST API logs, including log level and execution data settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nprovider:\n  name: aws\n  logs:\n    websocket:\n      level: INFO\n      fullExecutionData: false\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP API Log Format\nDESCRIPTION: Configuration to override the default log format with custom fields.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  logs:\n    httpApi:\n      format: '{ \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\" }'\n```\n\n----------------------------------------\n\nTITLE: S3 Backend Configuration in Serverless\nDESCRIPTION: Configuration for accessing Terraform state stored in S3 backend\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      terraform:\n        type: terraform\n        backend: s3\n        bucket: terraform-state\n        key: users-table/terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Creating ESM Plugin\nDESCRIPTION: Example of creating a Serverless plugin using ECMAScript modules (ESM) syntax for Node.js v12.22 or later.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class MyPlugin {\n  constructor() {\n    // The plugin is loaded\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function Locally with Custom Context\nDESCRIPTION: Example showing how to invoke a function locally with a custom context string. Local invocation is useful for testing functions without deploying to AWS.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local --function functionName --context \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Spans\nDESCRIPTION: Example of creating and managing custom spans for trace segmentation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sls_sdk import serverlessSdk\nspan = serverlessSdk.create_span('some-label')\n# some work\nspan.close()\n```\n\n----------------------------------------\n\nTITLE: Disabling IoT Fleet Provisioning Template in YAML\nDESCRIPTION: This configuration shows how to disable an IoT Provisioning Template. By default, templates are enabled, but can be explicitly disabled using the 'enabled' property.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot-fleet-provisioning.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  smartHomeValidation:\n    handler: smartHomeValidation.handler\n    events:\n      - iotFleetProvisioning:\n          templateBody: ${file(template.json)}\n          provisioningRoleArn: arn:aws:iam::12345678910:role/provisioning-role\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Resource File Format in YAML\nDESCRIPTION: Shows the required format for CloudFormation resource files that can be imported into the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nResources:\n  Type: 'AWS::S3::Bucket'\n  Properties:\n    BucketName: some-bucket-name\n```\n\n----------------------------------------\n\nTITLE: Time Format Examples for Log Filtering - Bash\nDESCRIPTION: Demonstrates various supported time format strings for the --startTime parameter when fetching logs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/logs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n30m                   # since 30 minutes ago\n2h                    # since 2 hours ago\n3d                    # since 3 days ago\n\n2013-02-08            # A calendar date part\n2013-W06-5            # A week date part\n2013-039              # An ordinal date part\n\n20130208              # Basic (short) full date\n2013W065              # Basic (short) week, weekday\n2013W06               # Basic (short) week only\n2013050               # Basic (short) ordinal date\n\n2013-02-08T09         # An hour time part separated by a T\n20130208T080910,123   # Short date and time up to ms, separated by comma\n20130208T080910.123   # Short date and time up to ms\n20130208T080910       # Short date and time up to seconds\n20130208T0809         # Short date and time up to minutes\n20130208T08           # Short date and time, hours only\n```\n\n----------------------------------------\n\nTITLE: TypeScript Serverless Configuration\nDESCRIPTION: TypeScript implementation of serverless configuration with type definitions from @types/serverless package.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/intro.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Requiring @types/serverless in your project package.json\nimport type { Serverless } from 'serverless/aws'\n\n// serverless.ts\n\nconst serverlessConfiguration: Serverless = {\n  service: 'users',\n  functions: {\n    usersCreate: {\n      events: [\n        {\n          httpApi: 'POST /users/create',\n        },\n      ],\n    },\n    // ...\n  },\n  resources: {},\n}\n\nmodule.exports = serverlessConfiguration\n```\n\n----------------------------------------\n\nTITLE: Removing Single Service from Serverless Project\nDESCRIPTION: Command to remove a specific service from a Serverless Compose project. Must ensure no other services depend on the target service before removal.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nserverless <service-name> remove\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Key Configuration in Serverless\nDESCRIPTION: Example showing how to customize the resolver key for Terraform state access\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      infra: # Previously this was \"terraform\"\n        type: terraform\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Span with Callback in JavaScript\nDESCRIPTION: Shows how to create a custom span using a callback function, which automatically starts and stops the span. This method also supports async callbacks.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.createSpan('mySpan', () => {\n  // do some work\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.createSpan('mySpan', async () => {\n  // do some work\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Configuration in serverless.yml\nDESCRIPTION: Example of a serverless.yml file with custom plugin configuration. This demonstrates how to add plugin-specific configuration at the top level of the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: app\nprovider:\n  name: aws\n\n# ...\n\nmy-plugin:\n  my-plugin-config: foo\n```\n\n----------------------------------------\n\nTITLE: JavaScript Serverless Configuration\nDESCRIPTION: JavaScript implementation of serverless configuration using module.exports, showing function and event definitions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/intro.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\n// serverless.js\n\nmodule.exports = {\n  service: 'users',\n  functions: {\n    usersCreate: {\n      events: [\n        {\n          httpApi: 'POST /users/create',\n        },\n      ],\n    },\n    // ...\n  },\n  resources: {},\n}\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for Kafka Event\nDESCRIPTION: Example showing how to configure VPC settings for Kafka event source with subnet and security group specifications.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            vpcSubnet:\n              - subnet-0011001100\n              - subnet-0022002200\n            vpcSecurityGroup: sg-0123456789\n          topic: mytopic\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n```\n\n----------------------------------------\n\nTITLE: Development Dependencies Configuration\nDESCRIPTION: YAML configuration to disable automatic exclusion of development dependencies\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  excludeDevDependencies: false\n```\n\n----------------------------------------\n\nTITLE: Specifying IoT Fleet Provisioning Template Name in YAML\nDESCRIPTION: This snippet illustrates how to enforce a specific name for the created IoT Provisioning Template using the 'templateName' property.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot-fleet-provisioning.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  smartHomeValidation:\n    handler: smartHomeValidation.handler\n    events:\n      - iotFleetProvisioning:\n          templateName: SmartBulbTemplate\n          templateBody: ${file(template.json)}\n          provisioningRoleArn: arn:aws:iam::12345678910:role/provisioning-role\n```\n\n----------------------------------------\n\nTITLE: Streaming AWS CloudWatch Logs\nDESCRIPTION: Demonstrates how to stream logs from AWS CloudWatch to the terminal using the Serverless CLI, with options for targeting specific functions and enabling tailing.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsls logs -f [Function name in serverless.yml] -t\n```\n\n----------------------------------------\n\nTITLE: Deploying Services with State Management in Serverless Framework\nDESCRIPTION: Bash command to deploy all services defined in serverless-compose.yml, which automatically handles state management for service dependencies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/state.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Adding a New Provider with defineProvider\nDESCRIPTION: Example showing how to use the defineProvider helper to add support for a new cloud provider. This defines the schema for provider-specific configuration, function properties, events, resources, and layers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineProvider('newProvider', {\n      // Eventual reusable schema definitions (will be put to top level \"definitions\" object)\n      definitions: {\n        // ...\n      },\n\n      // Top level \"provider\" properties\n      provider: {\n        properties: {\n          stage: { type: 'string' },\n          remoteFunctionData: { type: 'null' },\n        },\n      },\n\n      // Function level properties\n      function: {\n        properties: { handler: { type: 'string' } },\n      },\n\n      // Function events definitions (can be defined here or via `defineFunctionEvent` helper)\n      functionEvents: {\n        someEvent: {\n          name: 'someEvent',\n          schema: {\n            type: 'object',\n            properties: {\n              someRequiredStringProp: { type: 'string' },\n              someNumberProp: { type: 'number' },\n            },\n            required: ['someRequiredStringProp'],\n            additionalProperties: false,\n          },\n        },\n      },\n\n      // Definition for eventual top level \"resources\" section\n      resources: {\n        type: 'object',\n        properties: {\n          // ...\n        },\n      },\n\n      // Definition for eventual top level \"layers\" section\n      layers: {\n        type: 'object',\n        additionalProperties: {\n          type: 'object',\n          properties: {\n            // ...\n          },\n        },\n      },\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Deploy Script in serverless.yml\nDESCRIPTION: Configuration to run a custom script before serverless deploy using serverless-plugin-scripts in serverless.yml\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - serverless-plugin-scripts\ncustom:\n  scripts:\n    hooks:\n      'before:deploy:deploy': <your script>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Multi-Service Serverless Application\nDESCRIPTION: Example of a typical directory structure for a monorepository containing multiple Serverless Framework services. Shows the organization of files for a multi-service application.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-app/\n  service-a/\n    src/\n      ...\n    serverless.yml\n  service-b/\n    src/\n      ...\n    serverless.yml\n```\n\n----------------------------------------\n\nTITLE: Removing a Serverless Service from Specific Stage and Region in AWS\nDESCRIPTION: This example demonstrates how to remove a deployed service from a specific stage and region in AWS. It targets the 'dev' stage in the 'us-east-1' region.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/remove.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove --stage dev --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Validating Custom Section Properties with defineCustomProperties\nDESCRIPTION: Example showing how to use the defineCustomProperties helper to validate properties within the custom section of the serverless.yml file. This ensures that custom properties meet the specified schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineCustomProperties({\n      type: 'object',\n      properties: {\n        myCustomProperty: { type: 'string' },\n      },\n      required: ['myCustomProperty'],\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Permission Statement for AWS IoT Core Access\nDESCRIPTION: The IAM statement that needs to be added to Lambda functions to enable communication through AWS IoT Core for the dev command to work.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/dev.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nEffect: 'Allow',\nAction: ['iot:*'],\nResource: '*'\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Layers in Serverless Framework\nDESCRIPTION: YAML configuration for deploying AWS Lambda function layers. Includes settings for layer path, name, description, compatible runtimes and architectures, license information, account access control, and version retention policy.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nlayers:\n  # A Lambda layer\n  hello:\n    # required, path to layer contents on disk\n    path: layer-dir\n    # optional, Deployed Lambda layer name\n    name: ${sls:stage}-layerName\n    # optional, Description to publish to AWS\n    description: Description of what the lambda layer does\n    # optional, a list of runtimes this layer is compatible with\n    compatibleRuntimes:\n      - python3.11\n    # optional, a list of architectures this layer is compatible with\n    compatibleArchitectures:\n      - x86_64\n      - arm64\n    # optional, a string specifying license information\n    licenseInfo: GPLv3\n    # optional, a list of AWS account IDs allowed to access this layer.\n    allowedAccounts:\n      - '*'\n    # optional, false by default. If true, layer versions are not deleted as new ones are created\n    retain: false\n```\n\n----------------------------------------\n\nTITLE: Activating a Dev Session in Specific AWS Region\nDESCRIPTION: Example command for activating a development session in the dev stage but in a different AWS region (us-east-2).\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/dev.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless dev --stage dev --region us-east-2\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Package for Plugin\nDESCRIPTION: JSON configuration for publishing a Serverless plugin to NPM, including main entry point and peer dependencies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"my-plugin.js\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"serverless\": \">=2.60\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Gateway Event JSON Structure\nDESCRIPTION: Example JSON structure showing an API Gateway event format that can be used when testing Lambda functions that handle API Gateway events. This represents the event data received by a Lambda function.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": \"/\",\n  \"path\": \"/\",\n  \"httpMethod\": \"GET\"\n  //  etc. //\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entire Serverless Project\nDESCRIPTION: Command to remove all services in a Serverless Compose project. Must be run in the same directory as serverless-compose.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Variables in YAML\nDESCRIPTION: Demonstrates how to provide fallback values for variables, especially useful for command-line options that might not be set.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    memorySize: ${opt:memory, 1024}\n```\n\n----------------------------------------\n\nTITLE: App Selection Interface in Serverless CLI\nDESCRIPTION: The interactive CLI interface for selecting or creating an App, which serves as a container for multiple Services in the Serverless Framework Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n‚ùØ Create A New App\n  ecommerce\n  blog\n  acmeinc\n  Skip Adding An App\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Variable Source Plugin in JavaScript\nDESCRIPTION: Demonstrates how to create a Serverless Framework plugin that implements a custom variable source with a basic resolver function. The resolver handles variables in the format ${foo:some-variable}.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nclass MyPlugin {\n  constructor() {\n    this.configurationVariablesSources = {\n      foo: {\n        async resolve({ address }) {\n          // `address` contains the name of the variable to resolve:\n          // In `${foo:some-variable}`, address will contain `some-variable`.\n\n          // Resolver is expected to return an object with the value in the `value` property:\n          return {\n            //\n            value: `Resolving variable ${address}`,\n          }\n        },\n      },\n    }\n  }\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Output Example in JavaScript\nDESCRIPTION: Demonstrates the JSON format of structured logs output by captureError and captureWarning methods. This format is designed for human readability and compatibility with tools like CloudWatch Log Insights.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"source\": \"serverlessSdk\",\n  \"type\": \"ERROR_TYPE_CAUGHT_USER\",\n  \"message\": \"User not found\",\n  \"stackTrace\": \"...\",\n  \"tags\": {\n    \"userId\": \"eb661c69405c\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Properties with defineFunctionProperties\nDESCRIPTION: Example showing how to use the defineFunctionProperties helper to validate custom properties within function definitions. This ensures that function-level properties meet the specified schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineFunctionProperties('providerName', {\n      properties: {\n        someCustomProperty: { type: 'string' },\n        anotherProperty: { type: 'number' },\n      },\n      required: ['someCustomProperty'],\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Info Command Output Example\nDESCRIPTION: Example output showing basic service information including stage, region, API keys, endpoints and functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/info.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverless info\n\nService Information\nservice: my-serverless-service\nstage: dev\nregion: us-east-1\napi keys:\n  myKey: some123valid456api789key1011for1213api1415gateway\nendpoints:\n  GET - https://dxaynpuzd4.execute-api.us-east-1.amazonaws.com/dev/users\nfunctions:\n  my-serverless-service-dev-hello\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Distribution in Serverless Framework\nDESCRIPTION: This snippet demonstrates how to configure a CloudFront distribution for Lambda@Edge events, including cache policies and parameters for caching and forwarding to origin.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  cloudFront:\n    cachePolicies:\n      myCachePolicy1:\n        DefaultTTL: 60\n        MinTTL: 30\n        MaxTTL: 3600\n        Comment: my brand new cloudfront cache policy\n        ParametersInCacheKeyAndForwardedToOrigin:\n          CookiesConfig:\n            CookieBehavior: whitelist\n            Cookies:\n              - my-public-cookie\n          EnableAcceptEncodingBrotli: true\n          EnableAcceptEncodingGzip: true\n          HeadersConfig:\n            HeaderBehavior: whitelist\n            Headers:\n              - authorization\n              - content-type\n          QueryStringsConfig:\n            QueryStringBehavior: allExcept\n            QueryStrings:\n              - not-cached-query-string\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Example\nDESCRIPTION: YAML configuration showing environment variables with AWS CloudFormation intrinsic functions\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  functionName:\n    handler: handler.main\n    environment:\n      EXT_TABLE_NAME:\n        Fn::ImportValue: exported-tableName\n      REF_TABLE_NAME:\n        Ref: myTable\n      INT_TABLE_NAME:\n        Fn::GetAtt: [myTable, Arn]\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Span Collection in Serverless YAML\nDESCRIPTION: This YAML snippet shows how to disable HTTP Span collection by setting the SLS_DISABLE_HTTP_MONITORING environment variable to true in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    SLS_DISABLE_HTTP_MONITORING: true\n```\n\n----------------------------------------\n\nTITLE: Disabling IoT Event for AWS Lambda in YAML\nDESCRIPTION: This example demonstrates how to create and attach a disabled IoT event to an AWS Lambda function. It uses the 'enabled' property set to false in the Serverless Framework configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myIoT:\n    handler: myIoT.handler\n    events:\n      - iot:\n          sql: \"SELECT * FROM 'some_topic'\"\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Custom Named EventBridge Rules in YAML\nDESCRIPTION: Demonstrates setting a custom name and description for an EventBridge rule.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/event-bridge.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myFunction:\n    handler: index.handler\n    events:\n      - eventBridge:\n          name: event-bridge-custom-name\n          description: a description of my eventBridge event's purpose\n          schedule: rate(10 minutes)\n          input:\n            key1: value1\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Test Script in package.json\nDESCRIPTION: Configuration to run a custom script before npm test using the pretest hook in package.json\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"demo-serverless\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"pretest\": \"<your script>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Lambda Function Metrics for a Specific Timespan\nDESCRIPTION: This command displays service-wide metrics for a specific time range. It uses the --startTime and --endTime options to define the timespan.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless metrics --startTime 2016-01-01 --endTime 2016-01-02\n```\n\n----------------------------------------\n\nTITLE: Hello Handler Implementation with Route Response\nDESCRIPTION: JavaScript implementation of a simple hello handler that responds to websocket messages\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/websocket.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.helloHandler = async (event, context) => {\n  const body = JSON.parse(event.body)\n  return {\n    statusCode: 200,\n    body: `Hello, ${body.name}`,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String to Boolean Conversion Examples\nDESCRIPTION: Provides examples of how the strToBool function converts different string values to booleans, showing supported values and error cases.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n${strToBool(true)} => true\n${strToBool(false)} => false\n${strToBool(True)} => true\n${strToBool(False)} => false\n${strToBool(TRUE)} => true\n${strToBool(FALSE)} => false\n${strToBool(0)} => false\n${strToBool(1)} => true\n${strToBool(2)} => Error\n${strToBool(null)} => Error\n${strToBool(anything)} => Error\n```\n\n----------------------------------------\n\nTITLE: Extending Function Event Properties with defineFunctionEventProperties\nDESCRIPTION: Example showing how to use the defineFunctionEventProperties helper to validate additional properties on existing function event types. This ensures that the event properties meet the specified schema.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless) {\n    // For reference on JSON schema, see https://github.com/ajv-validator/ajv\n    serverless.configSchemaHandler.defineFunctionEventProperties(\n      'aws',\n      'http',\n      {\n        properties: {\n          documentation: { type: 'string' },\n        },\n        required: ['documentation'],\n      },\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in serverless.yml\nDESCRIPTION: YAML configuration to register a plugin and add custom configuration for it in the serverless.yml file. The custom section is used for plugin-specific configuration options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - custom-serverless-plugin\n\ncustom:\n  customkey: customvalue\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Source as AUTHORIZER for API Gateway Metering\nDESCRIPTION: Configuration for setting the source of the API key for metering requests to the AUTHORIZER option. This tells API Gateway to acquire the key from UsageIdentifierKey provided by a custom authorizer.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nprovider:\n  name: aws\n  apiGateway:\n    apiKeySourceType: AUTHORIZER\nfunctions:\n  hello:\n    events:\n      - http:\n          path: hello\n          method: get\n```\n\n----------------------------------------\n\nTITLE: Custom Bucket Configuration in Serverless Framework\nDESCRIPTION: Configuration example with bucket name and custom region specified in the resolver configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        region: us-west-2\n        myBucket:\n          type: s3\n          region: eu-west-1\n          bucketName: myBucket\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:myBucket:myKey}\n```\n\n----------------------------------------\n\nTITLE: Working with Named Progress Indicators\nDESCRIPTION: Creating and retrieving progress indicators using unique names in Serverless Framework plugins, which allows accessing the progress object from different parts of the code.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Progress without any name:\nconst myProgress = progress.create({\n  message: 'Doing extra work in my-plugin',\n})\n\n// Progress with a unique name\nprogress.create({\n  message: 'Doing extra work in my-plugin',\n  name: 'my-plugin-progress', // Try to make the name unique across all plugins\n})\n// elsewhere...\nprogress.get('my-plugin-progress').update('Almost finished')\n// elsewhere...\nprogress.get('my-plugin-progress').remove()\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with No Options\nDESCRIPTION: Example showing how to deploy a specific Lambda function without specifying stage or region options. This uses the default stage and region configured in your serverless.yml.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy-function.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy function --function helloWorld\n```\n\n----------------------------------------\n\nTITLE: CommonJS esbuild configuration with plugin for AWS Lambda\nDESCRIPTION: This JavaScript snippet (CommonJS) shows an esbuild configuration file that uses the esbuild-plugin-env plugin. It exports a function that returns the configuration object, with the Serverless instance passed as an argument.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/building.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst env = require('esbuild-plugin-env')\n\nmodule.exports = (serverless) => {\n  return {\n    external: ['@aws-sdk/client-s3'],\n    plugins: [env()],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output for Serverless Compose Deployment\nDESCRIPTION: Example terminal output when deploying multiple services using the Serverless Compose command. Shows the parallel deployment of services and their respective outputs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/compose.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ serverless deploy\n\nServerless œü Compose\n\nServerless Compose enables you to deploy multiple services in one command, in parallel, or ordered by dependencies.\nDocs: https://www.serverless.com/framework/docs/guides/compose\n\n‚úî service-a\n    output1: ...\n    output2: ...\n\n‚úî service-b\n    output1: ...\n    output2: ...\n\nResults: 2 services succeeded, 0 failed, 0 skipped, 2 total    Time: 38s\n```\n\n----------------------------------------\n\nTITLE: Logging Deprecation Notices in Plugins\nDESCRIPTION: How to signal deprecated features to users in Serverless Framework plugins using the logDeprecation() method, which integrates with the framework's deprecation system.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nserverless.logDeprecation(\n  'DEPRECATION_CODE',\n  'Feature X of my-plugin is deprecated. Please use Y instead.',\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with Chalk in Plugins\nDESCRIPTION: Using the chalk package to format and color text output in Serverless Framework plugins, following the recommended formatting practices.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlog.notice(chalk.gray('Here is a message'))\n```\n\n----------------------------------------\n\nTITLE: Writing Command Output to stdout\nDESCRIPTION: How to write command output to stdout instead of stderr in Serverless Framework plugins using the writeText() method, which is useful for output that needs to be parsed by other programs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, cliOptions, { writeText }) {\n    writeText('Command output')\n    writeText(['Here is a', 'multi-line output'])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Event Hooks in Serverless Plugin\nDESCRIPTION: Demonstrates how to add logic to a custom command by hooking into its lifecycle events. The plugin defines a 'my-command' with a 'run' event and attaches a hook function to execute when that event occurs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor() {\n    this.commands = {\n      'my-command': {\n        lifecycleEvents: ['run'],\n      },\n    }\n\n    this.hooks = {\n      'my-command:run': () => {\n        // Do something\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings with SDK\nDESCRIPTION: Example of capturing warnings using the capture_warning method.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.capture_warning(\"Captured warning\")\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Resolver in Serverless Framework\nDESCRIPTION: Example configuration for setting up an AWS resolver with custom profile, region, and credentials. Shows how to configure multiple AWS accounts with specific settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      aws-account-1:\n        type: aws\n        profile: account1-profile-name\n        region: us-west-2\n        accessKeyId: ${env:ACCOUNT1_AWS_ACCESS_KEY_ID}\n        secretAccessKey: ${env:ACCOUNT1_AWS_SECRET_ACCESS_KEY}\n        dashboard: false\n```\n\n----------------------------------------\n\nTITLE: Full S3 Object Configuration in Serverless Framework\nDESCRIPTION: Example with both bucket name and object key defined in the resolver configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        region: us-west-2\n        myFile:\n          type: s3\n          region: eu-west-1\n          bucketName: myBucket\n          objectKey: myKey\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:myFile}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lambda Function Handler in JavaScript\nDESCRIPTION: Implements a basic Lambda function that returns a 200 response with a JSON body.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nmodule.exports.hello = function (event, context, callback) {\n  console.log(event) // Contains incoming request data (e.g., query params, headers and more)\n\n  const response = {\n    statusCode: 200,\n    headers: {\n      'x-custom-header': 'My Header Value',\n    },\n    body: JSON.stringify({ message: 'Hello World!' }),\n  }\n\n  callback(null, response)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Structured Logs Output in Bash\nDESCRIPTION: Shows how to disable the output of structured logs for captureError and captureWarning by setting an environment variable in the runtime.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSLS_DISABLE_CAPTURED_EVENTS_STDOUT=true\n```\n\n----------------------------------------\n\nTITLE: Service-Level Layer Configuration\nDESCRIPTION: Demonstrates how to configure layers at the service level for all functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n  runtime: python3.11\n  layers:\n    - arn:aws:lambda:us-east-1:xxxxxxxxxxxxx:layer:xxxxx:mylayer1\n    - arn:aws:lambda:us-east-1:xxxxxxxxxxxxx:layer:xxxxx:mylayer2\n\nfunctions:\n  hello1:\n    handler: handler.hello1\n  hello2:\n    handler: handler.hello2\n```\n\n----------------------------------------\n\nTITLE: Local Invocation with Standard Input\nDESCRIPTION: Example of piping data from a generator script to the local function invocation\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/invoke-local.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode dataGenerator.js | serverless invoke local --function functionName\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless SDK Package\nDESCRIPTION: Command to install the serverless-sdk package via pip package manager.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install serverless-sdk\n```\n\n----------------------------------------\n\nTITLE: Example of Referencing Output from Another Application\nDESCRIPTION: Concrete example showing how to reference an output variable from a specific application, stage, and region. This references 'var-key' from 'my-service' in another application's dev stage.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/output-variables.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n${output:another-app:dev:us-east-1:my-service.var-key}\n```\n\n----------------------------------------\n\nTITLE: Activating a Dev Session in a Local Stage\nDESCRIPTION: Example command for activating a development session in a dedicated 'local' stage, which is useful for quick activation without infrastructure changes.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/dev.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverless dev --stage local\n```\n\n----------------------------------------\n\nTITLE: Throwing User Errors in Serverless Plugins\nDESCRIPTION: How to throw user errors in Serverless Framework plugins that will be properly formatted in the CLI output, distinguishing between user errors and programmer errors.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new serverless.classes.Error('Invalid configuration in X')\n```\n\n----------------------------------------\n\nTITLE: Using Printf Format in Log Methods\nDESCRIPTION: Log methods in Serverless Framework plugins support printf format for string formatting, allowing for variable interpolation in messages.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlog.warning('Here is a %s log', 'formatted')\n```\n\n----------------------------------------\n\nTITLE: Using Classic SSM Parameter References in Serverless Framework\nDESCRIPTION: Example of the classic (pre-resolvers) format for referencing SSM parameters. This pattern uses the deployment AWS credentials to access SSM Parameter Store directly in the service definition.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: ${ssm:/path/to/service/id}-service\nprovider:\n  name: aws\nfunctions:\n  hello:\n    name: ${ssm:/path/to/service/myParam}-hello\n    handler: handler.hello\n```\n\n----------------------------------------\n\nTITLE: Poor Implementation Example of AWS Lambda Function\nDESCRIPTION: Example showing a tightly coupled Lambda function implementation that is difficult to test due to direct database and mailer dependencies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = require('db').connect()\nconst mailer = require('mailer')\n\nmodule.exports.saveUser = (event, context, callback) => {\n  const user = {\n    email: event.email,\n    created_at: Date.now(),\n  }\n\n  db.saveUser(user, function (err) {\n    if (err) {\n      callback(err)\n    } else {\n      mailer.sendWelcomeEmail(event.email)\n      callback()\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Parameters for HTTP Event in AWS Lambda Function using YAML\nDESCRIPTION: Illustrates how to configure an HTTP event with path parameters for an AWS Lambda function. This example shows a GET request with an 'id' parameter in the path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/events.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  createUser:\n    handler: handler.users\n    events:\n      - httpApi: 'GET /users/{id}'\n```\n\n----------------------------------------\n\nTITLE: Managed Policies Configuration\nDESCRIPTION: Demonstrates how to add managed policies to the service-wide IAM role with support for CloudFormation functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/iam.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: new-service\n\nprovider:\n  name: aws\n  iam:\n    role:\n      managedPolicies:\n        - 'some:aws:arn:xxx:*:*'\n        - 'someOther:aws:arn:xxx:*:*'\n        - {\n            'Fn::Join':\n              [':', ['arn:aws:iam:', { Ref: 'AWS::AccountId' }, 'some/path']],\n          }\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Health Check for ALB Event in Serverless YAML\nDESCRIPTION: This snippet demonstrates how to enable a basic health check for an ALB event in a serverless.yml configuration. It sets the 'healthCheck' property to true for the ALB event.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alb.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  albEventConsumer:\n    handler: handler.hello\n    events:\n      - alb:\n          listenerArn: arn:aws:elasticloadbalancing:us-east-1:12345:listener/app/my-load-balancer/50dc6c495c0c9188/\n          priority: 1\n          conditions:\n            path: /hello\n          healthCheck: true\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Deployment with Custom Monitoring Frequency\nDESCRIPTION: Deployment command with environment variable to adjust the deployment monitoring frequency to 10 seconds.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSLS_AWS_MONITORING_FREQUENCY=10000 serverless deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Forced Updates\nDESCRIPTION: Environment variable that can be set to force the Serverless Framework to update itself.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSERVERLESS_FRAMEWORK_FORCE_UPDATE=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider-Specific Plugin\nDESCRIPTION: Example showing how to create a plugin that only runs with a specific provider.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, options) {\n    // bind to a specific provider\n    this.provider = serverless.getProvider('providerX')\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Lambda Exec Wrapper Environment Variable for Python\nDESCRIPTION: This snippet shows the correct value for the AWS_LAMBDA_EXEC_WRAPPER environment variable when using the Serverless Framework SDK with Python Lambda functions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS_LAMBDA_EXEC_WRAPPER=\"/opt/sls-sdk-python/exec_wrapper.py\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Params Property in Serverless Framework\nDESCRIPTION: Example showing the legacy top-level 'params' property for setting stage-specific parameters. While still supported, the 'stages' property is now the preferred approach in Serverless Framework V4.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/parameters.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\n\nparams:\n  default:\n    domain: ${sls:stage}.myapi.com\n  prod:\n    domain: myapi.com\n  dev:\n    domain: dev.myapi.com\n```\n\n----------------------------------------\n\nTITLE: Prebuilt Archive Layer Configuration\nDESCRIPTION: Example of configuring a layer using a prebuilt archive instead of a path.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\nlayers:\n  layerOne:\n    package:\n      artifact: layerSource.zip\n```\n\n----------------------------------------\n\nTITLE: Basic Print Command Usage - Bash\nDESCRIPTION: Basic usage of the serverless print command to display the resolved configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/print.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless print\n```\n\n----------------------------------------\n\nTITLE: Server-Side Encryption Configuration in Serverless Framework\nDESCRIPTION: Example showing how to configure server-side encryption for S3 operations using AES256.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/s3.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      awsAccount1:\n        type: aws\n        myEncryptedBucket:\n          type: s3\n          bucketName: myBucket\n          serverSideEncryption: AES256\n\nfunctions:\n  hello:\n    handler: handler.hello\n    description: ${awsAccount1:myEncryptedBucket:myKey}\n```\n\n----------------------------------------\n\nTITLE: Referencing Output Variables in serverless.yml\nDESCRIPTION: Basic syntax for referencing output variables from other services in a serverless.yml file. References another service in the same application, stage, and region.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/output-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n${output:my-service.var-key}\n```\n\n----------------------------------------\n\nTITLE: Setting Tags with Logging\nDESCRIPTION: Example of combining tag setting with logging methods.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nserverlessSdk.set_tag(\"userId\", user_id)\n\nlogging.error(\"Logged error\")\nlogging.warning(\"Logged warning %s %s\", 12, True)\n```\n\n----------------------------------------\n\nTITLE: Defining Events Array in External JSON File\nDESCRIPTION: Example of defining an events array in an external JSON file that can be referenced in the serverless.yml configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/file.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"myevents\": [\n    {\n      \"schedule\": {\n        \"rate\": \"rate(1 minute)\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Get Customers Endpoint\nDESCRIPTION: cURL command to test the endpoint that retrieves all customers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --url [insert url here]/customers\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Metrics Documentation\nDESCRIPTION: YAML frontmatter configuration defining the documentation metadata including title, description, and keywords for the Metrics feature documentation.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Serverless Framework - Monitoring & Observability - Metrics\ndescription: Overview of the Metrics feature in Serverless Dashboard, including setup, available charts, and filters.\nshort_title: Serverless Dashboard Observability - Metrics\nkeywords:\n  [\n    'Serverless Framework',\n    'Monitoring',\n    'Observability',\n    'Metrics',\n    'AWS Lambda',\n  ]\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Resource Naming Pattern\nDESCRIPTION: The standard pattern used for naming CloudFormation resources. Consists of function name (optional), resource type, resource name, and an optional identifier.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/resources.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{Function Name}{Cloud Formation Resource Type}{Resource Name}{SequentialID, instanceId or Random String}\n```\n\n----------------------------------------\n\nTITLE: Executing Serverless Framework Login Command in Bash\nDESCRIPTION: This command logs users into the Serverless Framework Dashboard. If a Serverless Framework Org doesn't exist, it will create a new one. The command is executed in a terminal or command prompt.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/login.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless login\n```\n\n----------------------------------------\n\nTITLE: Disabling AWS Span Collection in Serverless YAML\nDESCRIPTION: This YAML snippet demonstrates how to disable AWS Span collection by setting the SLS_DISABLE_AWS_SDK_MONITORING environment variable to true in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  environment:\n    SLS_DISABLE_AWS_SDK_MONITORING: true\n```\n\n----------------------------------------\n\nTITLE: Directory Exclusion Configuration\nDESCRIPTION: YAML configuration showing correct glob syntax for excluding directories\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!tmp/**'\n    - '!.git/**'\n```\n\n----------------------------------------\n\nTITLE: Using Default AWS Provider Resolvers in YAML\nDESCRIPTION: Shows how to use built-in AWS provider resolvers to access account ID, SSM parameters, and S3 objects without explicit resolver configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    handler: handler.hello\n    environment:\n      ACCOUNT_ID: ${aws:accountId} # built-in variable provided by the AWS provider\n      SSM_VALUE: ${aws:ssm:/path/to/param} # uses the default resolver configuration and the same AWS provider which is used for the deployment\n      S3_VALUE: ${aws:s3:myBucket/myKey} # uses the default resolver configuration and the same AWS provider which is used for the deployment\n```\n\n----------------------------------------\n\nTITLE: Print Transformed Keys - Bash\nDESCRIPTION: Example of printing transformed function keys using the transform option.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/print.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsls print --path functions --transform keys --format text\n```\n\n----------------------------------------\n\nTITLE: Running the Serverless Command\nDESCRIPTION: Command that starts the interactive workflow to create a new Serverless project, guiding users through template selection and setup.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Deprecated CLI Logging in Serverless Framework v2\nDESCRIPTION: The legacy approach for writing to CLI output in Serverless Framework v2 using serverless.cli.log(), which is now deprecated and should not be used in v3.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This approach is deprecated:\nserverless.cli.log('Message')\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings with Serverless SDK in Node.js\nDESCRIPTION: Use the captureWarning method or console.warn to capture and report warnings to Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/nodejs.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nserverlessSdk.captureWarning('Something bad will happen soon')\n\n// Or using console.warn\nconsole.warn('My Warning')\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments in Serverless Framework CLI\nDESCRIPTION: This command lists all existing deployments for a Serverless service, showing timestamps, datetimes, and associated files for each deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/rollback.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverless deploy list\nServerless: Listing deployments:\nServerless: -------------\nServerless: Timestamp: 1476790110568\nServerless: Datetime: 2016-10-18T11:28:30.568Z\nServerless: Files:\nServerless: - compiled-cloudformation-template.json\nServerless: - mail-service.zip\nServerless: -------------\nServerless: Timestamp: 1476889476243\nServerless: Datetime: 2016-10-19T15:04:36.243Z\nServerless: Files:\nServerless: - compiled-cloudformation-template.json\nServerless: - mail-service.zip\nServerless: -------------\nServerless: Timestamp: 1476893957131\nServerless: Datetime: 2016-10-19T16:19:17.131Z\nServerless: Files:\nServerless: - compiled-cloudformation-template.json\nServerless: - mail-service.zip\nServerless: -------------\nServerless: Timestamp: 1476895175540\nServerless: Datetime: 2016-10-19T16:39:35.540Z\nServerless: Files:\nServerless: - compiled-cloudformation-template.json\nServerless: - mail-service.zip\nServerless: -------------\nServerless: Timestamp: 1476993293402\nServerless: Datetime: 2016-10-20T19:54:53.402Z\nServerless: Files:\nServerless: - compiled-cloudformation-template.json\nServerless: - mail-service.zip\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Comment Metadata for Documentation\nDESCRIPTION: HTML comment block containing metadata about the documentation page including title, description and keywords for SEO purposes.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\ntitle: Serverless Framework - AWS Guide\nshort_title: AWS Guide\ndescription: An introduction to using AWS and AWS Lambda with the Serverless Framework.\nkeywords: ['Serverless Framework', 'AWS Lambda', 'AWS Guide', 'Serverless']\n-->\n```\n\n----------------------------------------\n\nTITLE: Request Type Authorizer Configuration\nDESCRIPTION: Illustrates configuration for request-type authorizers with multiple identity sources.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  create:\n    handler: posts.create\n    events:\n      - http:\n          path: posts/create\n          method: post\n          authorizer:\n            arn: xxx:xxx:Lambda-Name\n            resultTtlInSeconds: 0\n            identitySource: method.request.header.Authorization, context.identity.sourceIp\n            identityValidationExpression: someRegex\n            type: request\n```\n\n----------------------------------------\n\nTITLE: Alexa Event Configuration in YAML\nDESCRIPTION: Configures Alexa Skill and Smart Home event triggers with application IDs.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - alexaSkill:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          # (default: true)\n          enabled: false\n      - alexaSmartHome:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          # (default: true)\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Trace Sampling in AWS Lambda\nDESCRIPTION: This snippet shows how to disable trace sampling for an individual AWS Lambda function using an environment variable. This can be useful when troubleshooting missing traces.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSLS_DISABLE_TRACE_SAMPLING\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM Deployment Settings\nDESCRIPTION: Example samconfig.toml file containing deployment configuration parameters for the SAM application.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/sam.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 0.1\n\n[default.deploy.parameters]\nstack_name = \"my-dev-stack\"\nregion = \"us-east-1\"\ntemplate_file = \"template.yml\"\n# s3_bucket = \"my-bucket\"\n# parameter_overrides = \"Environment=dev\"\n```\n\n----------------------------------------\n\nTITLE: Basic Axiom Configuration in Serverless YAML\nDESCRIPTION: Configures Axiom as the observability provider for all stages in a Serverless Framework service. This is the simplest configuration to enable Axiom integration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/axiom.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    observability: axiom\n```\n\n----------------------------------------\n\nTITLE: Custom Package Directory Command\nDESCRIPTION: CLI command to package a Serverless project with a custom destination path for deployment artifacts\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/packaging.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless package --package my-artifacts\n```\n\n----------------------------------------\n\nTITLE: Basic Info Command Usage\nDESCRIPTION: Basic command to display service information about deployed serverless services.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/info.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless info\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of a Serverless Plugin\nDESCRIPTION: This example shows how to install a specific version of the serverless-webpack plugin (version 3.0.0-rc.2) using the Serverless Framework CLI command.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/plugin-install.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin install --name serverless-webpack@3.0.0-rc.2\n```\n\n----------------------------------------\n\nTITLE: JSON Structure from AWS Secrets Manager in Serverless\nDESCRIPTION: Example of JSON data stored in AWS Secrets Manager. When referenced in Serverless Framework, this JSON structure is automatically parsed into the appropriate object format.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/aws/ssm.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"num\": 1,\n  \"str\": \"secret\",\n  \"arr\": [true, false]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Sender Triggers in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to handle Custom Sender Triggers in a Lambda function. It checks the event.request.type to determine whether it's a custom email or SMS sender request.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cognito-user-pool.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// customSender.js\nfunction handler(event, context, callback) {\n  if (event.request.type === 'customEmailSenderRequestV1') {\n    // ...\n  }\n  if (event.request.type === 'customSMSSenderRequestV1') {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Site Link Block\nDESCRIPTION: Markdown block containing an automatically generated link to the main serverless documentation site.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://serverless.com/framework/docs/guides/cicd/troubleshooting/)\n\n<!-- DOCS-SITE-LINK:END -->\n```\n\n----------------------------------------\n\nTITLE: Multiple Lambda Layers Configuration\nDESCRIPTION: Shows how to configure multiple Lambda layers within a single service.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/layers.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: myService\n\nprovider:\n  name: aws\n\nlayers:\n  layerOne:\n    path: layerOne\n    description: optional description for your layer\n  layerTwo:\n    path: layerTwo\n  layerThree:\n    path: layerThree\n```\n\n----------------------------------------\n\nTITLE: Service Naming Prompt in Serverless CLI\nDESCRIPTION: The prompt shown when creating a new Serverless service, asking for a name which will be used in resource naming.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n? Name Your Service: ‚Ä∫\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable for Serverless SDK in AWS Lambda\nDESCRIPTION: Adds an environment variable to enable debugging for the Serverless SDK. This variable can be set either through the Serverless Framework or directly in the AWS Lambda Console.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nSLS_SDK_DEBUG=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Framework via NPM\nDESCRIPTION: Command to install Serverless Framework globally using NPM package manager\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnpm i serverless -g\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Deploy Script in serverless.yml\nDESCRIPTION: Configuration to run a custom script after serverless deploy using serverless-plugin-scripts in serverless.yml\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - serverless-plugin-scripts\ncustom:\n  scripts:\n    hooks:\n      'deploy:finalize': <your script>\n```\n\n----------------------------------------\n\nTITLE: Identifying Serverless Telemetry Payload in AWS CloudWatch Logs\nDESCRIPTION: This snippet demonstrates the start of a compressed payload in AWS CloudWatch Logs that contains trace data for an AWS Lambda function invocation when instrumented correctly with Serverless Framework Platform.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSERVERLESS_TELEMETRY\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Serverless YAML\nDESCRIPTION: Example of how to include a local plugin in serverless.yml configuration file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# serverless.yml\nservice: app\n\nfunctions:\n  # ...\n\nplugins:\n  - ./my-plugin.js\n```\n\n----------------------------------------\n\nTITLE: Forcing a Serverless Framework Update\nDESCRIPTION: Command to manually trigger an update of the Serverless Framework to the latest version.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nserverless update\n```\n\n----------------------------------------\n\nTITLE: Custom Dataset Configuration in Serverless YAML\nDESCRIPTION: Configures Axiom as the observability provider with a custom dataset name. This allows you to specify where logs will be stored in Axiom rather than using the default naming convention.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/axiom.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    observability:\n      provider: axiom\n      dataset: my-custom-dataset\n```\n\n----------------------------------------\n\nTITLE: Importing Serverless SDK\nDESCRIPTION: Basic import statement to use the Serverless SDK in Python code.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sls_sdk import serverlessSdk\n```\n\n----------------------------------------\n\nTITLE: Configuring REGIONAL Endpoint Type in Serverless Framework\nDESCRIPTION: Example configuration for setting up a REGIONAL endpoint type for an API Gateway REST API. This reduces latency when requests originate from the same region as your REST API.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\nprovider:\n  name: aws\n  endpointType: REGIONAL\nfunctions:\n  hello:\n    events:\n      - http:\n          path: user/create\n          method: get\n```\n\n----------------------------------------\n\nTITLE: HTTP API Additional Configurations\nDESCRIPTION: Various HTTP API configurations including metrics, tags, default endpoint, and service naming.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/http-api.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  tags:\n    project: myProject\n  httpApi:\n    metrics: true\n    useProviderTags: true\n    disableDefaultEndpoint: true\n    shouldStartNameWithService: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: HTML comment block containing metadata for the documentation page including title, description, and keywords.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/concepts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\ntitle: Serverless Framework Dashboard - Concepts\ndescription: The Concepts within Serverless Framework Dashboard\nshort_title: Serverless Dashboard - Concepts\nkeywords: ['Serverless Framework', 'Dashboard', 'Orgs', 'Members']\n-->\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings with Logging\nDESCRIPTION: Example of capturing warnings using Python's logging module with formatted strings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.warning(\"Logged warning %s %s\", 12, True)\n```\n\n----------------------------------------\n\nTITLE: Removing Serverless Service\nDESCRIPTION: Demonstrates how to remove a serverless service and all associated AWS resources using the Serverless CLI.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP Proxy in API Gateway with CloudFormation Templates in YAML\nDESCRIPTION: This snippet demonstrates how to create a CloudFormation template to set up an HTTP proxy in API Gateway. It includes resources for both the endpoint and method, allowing you to proxy requests from your API to another URL.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/apigateway.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nservice: service-name\nprovider: aws\nfunctions: ...\n\nresources:\n  Resources:\n    ProxyResource:\n      Type: AWS::ApiGateway::Resource\n      Properties:\n        ParentId:\n          Fn::GetAtt:\n            - ApiGatewayRestApi # our default Rest API logical ID\n            - RootResourceId\n        PathPart: serverless # the endpoint in your API that is set as proxy\n        RestApiId:\n          Ref: ApiGatewayRestApi\n    ProxyMethod:\n      Type: AWS::ApiGateway::Method\n      Properties:\n        ResourceId:\n          Ref: ProxyResource\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        HttpMethod: GET # the method of your proxy. Is it GET or POST or ... ?\n        MethodResponses:\n          - StatusCode: 200\n        Integration:\n          IntegrationHttpMethod: POST\n          Type: HTTP\n          Uri: http://serverless.com # the URL you want to set a proxy to\n          IntegrationResponses:\n            - StatusCode: 200\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variable for Serverless Framework Integration\nDESCRIPTION: This snippet shows an additional required environment variable that needs to be set on AWS Lambda functions for proper integration with Serverless Framework Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/troubleshoot.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nSLS_ORG_ID\n```\n\n----------------------------------------\n\nTITLE: Testable Users Class Implementation\nDESCRIPTION: Refactored implementation showing proper separation of business logic using dependency injection pattern for better testability.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Users {\n  constructor(db, mailer) {\n    this.db = db\n    this.mailer = mailer\n  }\n\n  save(email, callback) {\n    const user = {\n      email: email,\n      created_at: Date.now(),\n    }\n\n    this.db.saveUser(user, function (err) {\n      if (err) {\n        callback(err)\n      } else {\n        this.mailer.sendWelcomeEmail(email)\n        callback()\n      }\n    })\n  }\n}\n\nmodule.exports = Users\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Framework CLI\nDESCRIPTION: Command to globally install the Serverless Framework open-source CLI using npm\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/running-in-your-own-cicd.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g serverless\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Trace\nDESCRIPTION: Example of setting tags for the entire trace using set_tag method.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.set_tag(\"userId\", user_id)\n```\n\n----------------------------------------\n\nTITLE: Executing Rollback Command in Serverless Framework CLI\nDESCRIPTION: This command rolls back a Serverless service to a specific deployment. If no timestamp is provided, it will display existing deployments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/rollback.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless rollback --timestamp timestamp\n```\n\n----------------------------------------\n\nTITLE: Updating Serverless Framework\nDESCRIPTION: Commands to manually update Serverless Framework and set force update environment variable\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nserverless update\n```\n\n----------------------------------------\n\nTITLE: MSK Event Configuration in YAML\nDESCRIPTION: Defines MSK (Managed Streaming for Kafka) event source mappings with authentication and filtering options.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - msk:\n          # ARN of MSK Cluster\n          arn: arn:aws:kafka:us-east-1:111111111:cluster/ClusterName/a1a1a1a1a\n          # name of Kafka topic to consume from\n          topic: kafkaTopic\n          # Optional, must be in 1-10000 range\n          batchSize: 100\n          # Optional, must be in 0-300 range (seconds)\n          maximumBatchingWindow: 30\n          # Optional, can be set to LATEST, AT_TIMESTAMP or TRIM_HORIZON\n          startingPosition: LATEST\n          # Mandatory when startingPosition is AT_TIMESTAMP, must be in Unix time seconds\n          startingPositionTimestamp: 10000123\n          # (default: true)\n          enabled: false\n          # Optional, arn of the secret key for authenticating with the brokers in your MSK cluster.\n          saslScram512: arn:aws:secretsmanager:region:XXXXXX:secret:AmazonMSK_xxxxxx\n          # Optional, specifies the consumer group ID to be used when consuming from Kafka. If not provided, a random UUID will be generated\n          consumerGroupId: MyConsumerGroupId\n          # Optional, specifies event pattern content filtering\n          filterPatterns:\n            - value:\n                a: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Service Folder\nDESCRIPTION: Command to navigate to the newly created service directory before deployment.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/getting-started.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncd [your-new-service-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Test Script in package.json\nDESCRIPTION: Configuration to run a custom script after npm test using the posttest hook in package.json\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/custom-scripts.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"demo-serverless\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"posttest\": \"<your script>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Support Command with Piping - Serverless CLI\nDESCRIPTION: Example of using the support command with the --summary flag to generate a non-interactive report and pipe it to the pbcopy command for clipboard copying.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/support.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless support --summary | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test\nDESCRIPTION: Command to run a single integration test file using Mocha with AWS credentials\nSOURCE: https://github.com/serverless/serverless/blob/main/test/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=XXX AWS_SECRET_ACCESS_KEY=xxx npx mocha test/integration/{chosen}.test.js\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Captured Errors\nDESCRIPTION: Example of setting tags specifically for captured errors.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.capture_error(\n    Exception(\"Captured error\"),\n    tags={\"userId\": \"example\", \"invocationId\": invocation_id},\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Serverless Project\nDESCRIPTION: This command starts the Serverless Framework's interactive wizard for creating a new serverless project, allowing you to choose a template and configure basic settings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/tutorial.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Update with npm-check-updates\nDESCRIPTION: Command for updating dependency version ranges to the latest supported minor versions using the npm-check-updates (ncu) tool.\nSOURCE: https://github.com/serverless/serverless/blob/main/RELEASE_PROCESS.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nncu --target minor --upgrade\n```\n\n----------------------------------------\n\nTITLE: Resolved Configuration Output - Bash/YAML\nDESCRIPTION: Example output showing the resolved configuration with variables replaced with their actual values.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/print.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sls print\nservice: my-service\ncustom:\n  bucketName: test\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  stage: dev # <-- Resolved\nfunctions:\n  hello:\n    handler: handler.hello\nresources:\n  Resources:\n    MyBucket:\n      Type: 'AWS::S3::Bucket'\n      Properties:\n        BucketName: test # <-- Resolved\n```\n\n----------------------------------------\n\nTITLE: Running Release Preparation Script\nDESCRIPTION: Command to automatically bump the version in package.json based on changes since the previous release and generate a new changelog entry.\nSOURCE: https://github.com/serverless/serverless/blob/main/RELEASE_PROCESS.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prepare-release\n```\n\n----------------------------------------\n\nTITLE: Specifying Name and Description for IoT Event in YAML\nDESCRIPTION: This snippet illustrates how to specify a name and description for an IoT event in the Serverless Framework. It uses the 'name' and 'description' properties in the IoT event configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/iot.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myIoT:\n    handler: myIoT.handler\n    events:\n      - iot:\n          name: 'myIotEvent'\n          sql: \"SELECT * FROM 'some_topic'\"\n          description: 'My IoT Event Description'\n```\n\n----------------------------------------\n\nTITLE: Disabling Structured Logs\nDESCRIPTION: Environment variable setting to disable structured logs output.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSLS_DISABLE_CAPTURED_EVENTS_STDOUT=true\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with NPM\nDESCRIPTION: Command to execute unit tests configured with Mocha test framework\nSOURCE: https://github.com/serverless/serverless/blob/main/test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Disabled Kafka Event Configuration\nDESCRIPTION: Example showing how to disable a Kafka event trigger using the enabled parameter.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/kafka.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  compute:\n    handler: handler.compute\n    events:\n      - kafka:\n          accessConfigurations:\n            saslScram512Auth: arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\n          topic: AWSKafkaTopic\n          bootstrapServers:\n            - abc3.xyz.com:9092\n            - abc2.xyz.com:9092\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Swapped CloudWatch Log Groups Configuration\nDESCRIPTION: Example showing an invalid configuration where log groups are swapped between functions, which would result in a deployment failure due to circular dependencies.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudwatch-log.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello1:\n    handler: handler.hello1\n    events:\n      - cloudwatchLog: '/aws/lambda/hello2'\n  hello2:\n    handler: handler.hello2\n    events:\n      - cloudwatchLog: '/aws/lambda/hello1'\n```\n\n----------------------------------------\n\nTITLE: Defining Stage Parameters in Serverless Framework V3 (YAML)\nDESCRIPTION: Shows the old syntax for defining stage-specific parameters in Serverless Framework V3 configuration files. Parameters are defined directly under the 'params' key with stage names as sub-keys.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/upgrading-v4.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  default:\n    key1: devValue\n  prod:\n    key1: prodValue\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header with Frontmatter\nDESCRIPTION: YAML frontmatter containing metadata for the documentation page, including title, description, and keywords related to Serverless Framework CI/CD troubleshooting.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\ntitle: Serverless Dashboard - Troubleshooting CI/CD\ndescription: Guide to troubleshooting CI/CD settings in the Serverless Framework Dashboard, including resetting OAuth access and configuring GitHub app installations.\nshort_title: Serverless Dashboard - Troubleshooting\nkeywords:\n  [\n    'Serverless Framework',\n    'CI/CD',\n    'Troubleshooting',\n    'GitHub',\n    'OAuth',\n    'Serverless Dashboard',\n  ]\n-->\n```\n\n----------------------------------------\n\nTITLE: Documentation Header Configuration in Markdown\nDESCRIPTION: Frontmatter configuration for the documentation page that specifies the title, menu text, layout and other metadata properties.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\ntitle: Serverless - AWS Lambda - CLI Reference\nmenuText: CLI Reference\nshort_title: CLI Reference\nlayout: Doc\n-->\n```\n\n----------------------------------------\n\nTITLE: IoT Event Configuration in YAML\nDESCRIPTION: Sets up IoT event triggers with SQL rules and versions.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/serverless.yml.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello:\n    # ...\n    events:\n      - iot:\n          name: myIoTEvent\n          description: An IoT event\n          sql: \"SELECT * FROM 'some_topic'\"\n          sqlVersion: beta\n          # (default: true)\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Using Log Aliases in Serverless Framework Plugins\nDESCRIPTION: Aliases for different log levels to make the logging API more intuitive, showing how log() and log.verbose() map to specific log levels.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlog('Here is a message')\n// is an alias to:\nlog.notice('Here is a message')\n\nlog.verbose('Here is a verbose message') // displayed with --verbose\n// is an alias to:\nlog.info('Here is a verbose message') // displayed with --verbose\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Plugin Tags\nDESCRIPTION: Example showing how to tag a plugin as a build plugin to ensure it runs before other plugins that may depend on it.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/creating-plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  static tags = ['build']\n\n  constructor() {}\n}\n\nmodule.exports = MyPlugin\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Link\nDESCRIPTION: Automatically generated documentation site link wrapped in HTML comments.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/concepts.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/guides/orgs/)\n\n<!-- DOCS-SITE-LINK:END -->\n```\n\n----------------------------------------\n\nTITLE: HTTP Backend Configuration in Serverless\nDESCRIPTION: Configuration for accessing Terraform state stored in HTTP backend\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/terraform.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  default:\n    resolvers:\n      terraform:\n        type: terraform\n        backend: http\n```\n\n----------------------------------------\n\nTITLE: Flask Exception Propagation Configuration\nDESCRIPTION: Configuration to enable exception propagation in Flask applications.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.config['PROPAGATE_EXCEPTIONS'] = True\n```\n\n----------------------------------------\n\nTITLE: Retrieving the I/O API in Plugin Constructors\nDESCRIPTION: Getting access to the I/O API through plugin constructor injection in Serverless Framework, which provides writeText, log, and progress utilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/cli-output.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlugin {\n  constructor(serverless, cliOptions, { writeText, log, progress }) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Captured Warnings\nDESCRIPTION: Example of setting tags specifically for captured warnings.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/monitoring/sdk/python.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nserverlessSdk.capture_warning(\n    \"Captured warning\",\n    tags={\"userId\": \"example\", \"invocationid\": invocation_id},\n)\n```\n\n----------------------------------------\n\nTITLE: HashiCorp Documentation Structure in Markdown\nDESCRIPTION: Markdown structure defining documentation for HashiCorp variable integration in Serverless Framework, including frontmatter metadata and resolver links.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/hashicorp/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\ntitle: Serverless Framework - Variables - HashiCorp-specific variables\ndescription: >\n  How to reference HashiCorp-specific variables in the Serverless Framework for\n  efficient configuration and deployment.\nshort_title: Serverless Variables - HashiCorp Variables\nkeywords:\n  - Serverless Framework\n  - HashiCorp-specific variables\n  - configuration\n  - deployment\n-->\n\n# Resolvers\n\n- [HashiCorp Terraform State Outputs](terraform)\n- [HashiCorp Vault Secrets](vault)\n```\n\n----------------------------------------\n\nTITLE: Running AWS Integration Tests\nDESCRIPTION: Command to execute all AWS integration tests with required AWS credentials as environment variables\nSOURCE: https://github.com/serverless/serverless/blob/main/test/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=XXX AWS_SECRET_ACCESS_KEY=xxx npm run integration-test-run-all\n```\n\n----------------------------------------\n\nTITLE: Removing serverless-webpack Plugin Example\nDESCRIPTION: This example demonstrates how to use the plugin uninstall command to remove the serverless-webpack plugin from a Serverless service.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/plugin-uninstall.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin uninstall --name serverless-webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Alexa Skill Event in YAML\nDESCRIPTION: This code snippet demonstrates how to create a disabled Alexa Skill event for an AWS Lambda function. It includes the app ID and sets the 'enabled' flag to false, allowing for more granular control over event triggering.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/alexa-skill.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  mySkill:\n    handler: mySkill.handler\n    events:\n      - alexaSkill:\n          appId: amzn1.ask.skill.xx-xx-xx-xx\n          enabled: false\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework V4 Features - Markdown\nDESCRIPTION: List of new features introduced in Serverless Framework V.4, including MCP integration, container support, and improved TypeScript capabilities.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **Introducing Serverless MCP:** Built for Cursor, Windsurf, and other AI-powered IDEs\n- **Introducing the Serverless Container Framework:** One solution to deploy serverless workloads everywhere\n- **Support for AWS SAM, AWS Cloudformation, & Traditional Serverless Framework Projects**\n- **Native Typescript Support:** You can now use .ts handlers\n- **The AWS AI Stack:** V.4 is optimized for the AWS AI Stack\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Property References in YAML\nDESCRIPTION: Shows how to combine multiple variable sources recursively, in this case using the stage value to dynamically select a configuration file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/variables/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aws\n  environment:\n    MY_SECRET: ${file(./config.${sls:stage}.json):CREDS}\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Release Notes for Published Versions\nDESCRIPTION: Command to push updated release notes from CHANGELOG.md to GitHub for an already published version using the github-release-from-cc-changelog tool.\nSOURCE: https://github.com/serverless/serverless/blob/main/RELEASE_PROCESS.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx github-release-from-cc-changelog <version>\n```\n\n----------------------------------------\n\nTITLE: Using AWS Managed Cache Policies in CloudFront Configuration\nDESCRIPTION: Shows how to reference an AWS Managed Cache Policy using its ID in a Lambda@Edge function configuration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-response\n          origin: s3://bucketname.s3.amazonaws.com/files\n          cachePolicy:\n            id: 658327ea-f89d-4fab-a63d-7e88639e58f6\n```\n\n----------------------------------------\n\nTITLE: Invalid CloudFront Behavior Configuration Example\nDESCRIPTION: Demonstrates an invalid configuration where multiple CloudFront behaviors have conflicting empty path patterns.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/events/cloudfront.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  myLambdaAtEdge:\n    handler: myLambdaAtEdge.handler\n    events:\n      - cloudFront:\n          eventType: viewer-request\n          origin: s3://bucketname.s3.amazonaws.com/files\n      - cloudFront:\n          eventType: viewer-request\n          origin: s3://bucketname.s3.amazonaws.com/other\n```\n\n----------------------------------------\n\nTITLE: Documentation Site Link Block\nDESCRIPTION: HTML comment block containing an automatically generated link to the main serverless documentation site.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/dashboard/cicd/private-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://serverless.com/framework/docs/guides/cicd/private-packages/)\n\n<!-- DOCS-SITE-LINK:END -->\n```\n\n----------------------------------------\n\nTITLE: Using Custom Variables in Serverless Configuration\nDESCRIPTION: Shows how to use the custom variable source in a serverless.yml configuration file, demonstrating the variable syntax and plugin registration.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/plugins/custom-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: test\n# ...\n\ncustom:\n  value1: ${foo:bar}\n\nplugins:\n  - ./my-plugin\n```\n\n----------------------------------------\n\nTITLE: Streaming AWS CloudWatch Logs\nDESCRIPTION: Command to stream logs from AWS CloudWatch to terminal with function targeting and tailing options.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsls logs -f [Function name in serverless.yml] -t\n```\n\n----------------------------------------\n\nTITLE: Service Resource Configuration\nDESCRIPTION: YAML configuration showing AWS CloudFormation resource and output definitions for service composition.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  Resources:\n    MyQueue:\n      Type: AWS::SQS::Queue\n      # ...\n  Outputs:\n    queueUrl:\n      Value: !Ref MyQueue\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Deployment from Pre-packaged Directory\nDESCRIPTION: Deployment command that skips the packaging step and deploys from a specified pre-packaged directory.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy --package /path/to/package/directory\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard Observability in YAML Configuration\nDESCRIPTION: Basic configuration example showing how to enable the Serverless Dashboard observability feature for a production stage in the serverless.yml file.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/guides/observability/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prod:\n    observability: dashboard\n```\n\n----------------------------------------\n\nTITLE: Service Removal Command\nDESCRIPTION: Command to remove all AWS resources and delete the service from Serverless Dashboard.\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nserverless remove\n```\n\n----------------------------------------\n\nTITLE: Configuring App in serverless.yml\nDESCRIPTION: YAML configuration showing how to set up an app in the serverless.yml file\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: my-service\napp: my-app\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Functions\nDESCRIPTION: Commands for invoking Lambda functions directly with optional logging\nSOURCE: https://github.com/serverless/serverless/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsls invoke -f hello\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke -f hello --log\n```\n\n----------------------------------------\n\nTITLE: Documentation Site Link Reference\nDESCRIPTION: Markdown link to the main documentation site with automatic generation markers.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/cli-reference/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/cli-reference/)\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Documentation Site Link\nDESCRIPTION: HTML comments containing an auto-generated link to the main serverless documentation site.\nSOURCE: https://github.com/serverless/serverless/blob/main/docs/providers/aws/guide/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- DOCS-SITE-LINK:START automatically generated  -->\n\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/guide/)\n\n<!-- DOCS-SITE-LINK:END -->\n```"
  }
]