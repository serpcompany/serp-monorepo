[
  {
    "owner": "robotframework",
    "repo": "robotframework",
    "content": "TITLE: Python Sort Words Keyword with Keyword-Only Argument\nDESCRIPTION: This Python code defines a keyword `sort_words` that accepts variable arguments (*words) and a keyword-only argument (case_sensitive). It sorts the input words based on case sensitivity. The `case_sensitive` argument is optional with a default value of False.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Results via Listener in Python\nDESCRIPTION: This example demonstrates how to modify test execution results using a listener class. It changes the suite documentation, adds metadata based on test tags, and modifies the test status and message if the execution time exceeds a specified limit. It also shows how to modify log messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot import result, running\n\n\nclass ResultModifier:\n\n    def __init__(self, max_seconds: float = 10.0):\n        self.max_seconds = max_seconds\n\n    def start_suite(self, data: running.TestSuite, result: result.TestSuite):\n        result.doc = 'Documentation set by listener.'\n        # Information about tests only available via data at this point.\n        smoke_tests = [test for test in data.tests if 'smoke' in test.tags]\n        result.metadata['Smoke tests'] = len(smoke_tests)\n\n    def end_test(self, data: running.TestCase, result: result.TestCase):\n        elapsed_seconds = result.elapsed_time.total_seconds()\n        if result.status == 'PASS' and elapsed_seconds > self.max_seconds:\n            result.status = 'FAIL'\n            result.message = 'Test execution took too long.'\n\n    def log_message(self, msg: result.Message):\n        if msg.level == 'WARN' and not msg.html:\n            msg.message = f'<b style=\"font-size: 1.5em\">{msg.message}</b>'\n            msg.html = True\n        if self._message_is_not_relevant(msg.message):\n            msg.message = None\n\n    def _message_is_not_relevant(self, message: str) -> bool:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using @not_keyword Decorator to Exclude Functions as Keywords\nDESCRIPTION: This snippet shows how to use the `@not_keyword` decorator to prevent functions from being exposed as Robot Framework keywords. The `current_thread` function and `this_is_not_keyword` function are marked, ensuring they won't be treated as keywords. This is useful for preventing imported functions or helper functions from becoming keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import current_thread\n\nfrom robot.api.deco import not_keyword\n\n\nnot_keyword(current_thread)    # Don't expose `current_thread` as a keyword.\n\n\ndef example_keyword():\n    thread_name = current_thread().name\n    print(f\"Running in thread '{thread_name}'.\")\n\n@not_keyword\ndef this_is_not_keyword():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Example Robot Framework Test Case\nDESCRIPTION: This example showcases a simple test case written in Robot Framework syntax. It demonstrates the structure of a test case, including settings, test cases, and keywords.  It uses a resource file for login-related keywords and defines a test case 'Valid Login' with steps to interact with a web application.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/README.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation     A test suite with a single test for valid login.\n...\n...               This test has a workflow that is created using keywords in\n...               the imported resource file.\nResource          login.resource\n\n*** Test Cases ***\nValid Login\n    Open Browser To Login Page\n    Input Username    demo\n    Input Password    mode\n    Submit Credentials\n    Welcome Page Should Be Open\n    [Teardown]    Close Browser\n```\n\n----------------------------------------\n\nTITLE: Pip install examples\nDESCRIPTION: These are examples of how to use pip to install, upgrade and uninstall packages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n# Install the latest version (does not upgrade)\npip install robotframework\n\n# Upgrade to the latest stable version\npip install --upgrade robotframework\n\n# Upgrade to the latest version even if it is a pre-release\npip install --upgrade --pre robotframework\n\n# Install a specific version\npip install robotframework==7.0\n\n# Install separately downloaded package (no network connection needed)\npip install robotframework-7.0-py3-none-any.whl\n\n# Install latest (possibly unreleased) code directly from GitHub\npip install https://github.com/robotframework/robotframework/archive/master.zip\n\n# Uninstall\npip uninstall robotframework\n```\n\n----------------------------------------\n\nTITLE: VAR Syntax for Variable Creation\nDESCRIPTION: This Robot Framework code demonstrates the usage of the new VAR syntax for creating variables with different scopes during execution. It shows how to create a local variable, a suite-scoped variable, and validates their values using 'Should Be Equal'. The 'scope' argument allows specifying the variable scope.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with a value `value`.\n    VAR    ${local}    value\n\n    # Create a variable that is available throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n    Should Be Equal    ${suite}    value\n\nExample continued\n    # Suite level variables are seen also by subsequent tests.\n    Should Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework using pip\nDESCRIPTION: This snippet demonstrates how to install Robot Framework using pip, the Python package installer. It shows the basic command for installation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install robotframework\n```\n\n----------------------------------------\n\nTITLE: Passing Flags to Regex Keywords\nDESCRIPTION: This enhancement allows passing explicit flags to regular expression-related keywords. This provides more control over the regex matching process, enabling features like case-insensitive matching or multiline matching.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Multiple EXCEPT branches in Robot Framework\nDESCRIPTION: This code shows how to use multiple EXCEPT branches to handle different error messages. The EXCEPT branches are matched in order, and the first matching branch is executed. The last EXCEPT branch uses a variable for the error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple EXCEPT branches\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first.\n        Error Handler 1\n    EXCEPT    Another error    # Try this if above did not match.\n        Error Handler 2\n    EXCEPT    ${message}       # Last match attempt, this time using a variable.\n        Error Handler 3\n    END\n```\n\n----------------------------------------\n\nTITLE: TRY/EXCEPT/ELSE/FINALLY Block in Robot Framework\nDESCRIPTION: Demonstrates the usage of TRY, EXCEPT, ELSE, and FINALLY blocks in Robot Framework to handle exceptions and ensure code is always executed. The TRY block contains code that might raise an exception, the EXCEPT block handles exceptions, the ELSE block executes if no exception occurs, and the FINALLY block always executes regardless of exceptions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    TRY/EXCEPT/ELSE/FINALLY\n        TRY\n            Some keyword\n        EXCEPT\n            Log    Error occurred!\n        ELSE\n            Log    No error occurred.\n        FINALLY\n            Log    Always executed.\n        END\n\n    TRY/FINALLY\n        Open Connection\n        TRY\n            Use Connection\n        FINALLY\n            Close Connection\n        END\n```\n\n----------------------------------------\n\nTITLE: Escaping Empty Values with ${EMPTY} - Robot Framework\nDESCRIPTION: Shows how to escape empty cells in Robot Framework test data using the built-in variable `${EMPTY}`.  This method is generally recommended for improved readability compared to using backslashes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nUsing ${EMPTY}\n    Do Something    first arg    ${EMPTY}\n    Do Something    ${EMPTY}     second arg\n```\n\n----------------------------------------\n\nTITLE: Implementing TRY/EXCEPT/ELSE/FINALLY Block in Robot Framework\nDESCRIPTION: This snippet demonstrates the structure of a TRY/EXCEPT/ELSE/FINALLY block in Robot Framework. It illustrates how to handle exceptions, execute alternative code paths, and ensure code execution regardless of exceptions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    TRY/EXCEPT/ELSE/FINALLY\n        TRY\n            Some keyword\n        EXCEPT\n            Log    Error occurred!\n        ELSE\n            Log    No error occurred.\n        FINALLY\n            Log    Always executed.\n        END\n\n    TRY/FINALLY\n        Open Connection\n        TRY\n            Use Connection\n        FINALLY\n            Close Connection\n        END\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax Example\nDESCRIPTION: This snippet demonstrates the new FOR loop syntax introduced in Robot Framework 3.1. It uses `FOR` to start the loop and does not require escaping keywords inside the loop. This is the recommended syntax in Robot Framework 3.2 and later.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: VAR syntax for local variable creation\nDESCRIPTION: Demonstrates how to create a local variable using the new VAR syntax in Robot Framework. The example shows creating a local scalar variable `${local}` with a value 'value' and using `Should Be Equal` keyword to validate it.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        # Create a local variable `${local}` with value `value`.\n        VAR    ${local}    value\n\n        # The following creates a suite-scoped variable, visible throughout the suite.\n        # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n        VAR    ${suite}    value    scope=SUITE\n\n        # Validate created variables.\n        Should Be Equal    ${local}    value\n        Should Be Equal    ${suite}    value\n\n    Example continued\n        # Suite level variables are seen also by subsequent tests.\n        Should Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parser Class in Python\nDESCRIPTION: This snippet showcases a parser implemented as a Python class, accepting the file extension as an argument during initialization. The parse method reads the source file, creates tests from each line, and returns a TestSuite object.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ParserInterface.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\n\n\nclass ExampleParser:\n\n    def __init__(self, extension: str):\n        self.extension = extension\n\n    def parse(self, source: Path) -> TestSuite:\n        name = TestSuite.name_from_source(source, self.extension)\n        suite = TestSuite(name, source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line)\n            test.body.create_keyword(name='Log', args=['Hello!'])\n        return suite\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Functions as Keywords (Python)\nDESCRIPTION: Demonstrates how to define and use asynchronous functions as keywords in Robot Framework using Python's `async def` syntax. Includes examples of using `asyncio.gather` and `asyncio.sleep`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom asyncio import gather, sleep\n\nasync def gather_something():\n    print('start')\n    await gather(something(1), something(2), something(3))\n    print('done')\n\nasync def async_sleep(time: int):\n    await sleep(time)\n```\n\n----------------------------------------\n\nTITLE: New-Style FOR Loop Example in Robot Framework\nDESCRIPTION: Illustrates the recommended new-style FOR loop syntax in Robot Framework. This example replaces `:FOR` with `FOR` and includes an explicit `END` marker.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_6\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| FOR | ${x} | IN | 1 | 2\n|     | Log  | ${x}\n| END |\n```\n\n----------------------------------------\n\nTITLE: VAR syntax example (Robot Framework)\nDESCRIPTION: This Robot Framework code demonstrates the new `VAR` syntax for creating local, suite, and global variables dynamically during execution. It showcases the syntax for defining variables with different scopes and validates their values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with a value `value`.\n    VAR    ${local}    value\n\n    # Create a variable that is available throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n    Should Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Basic WHILE Loop Example Robot Framework\nDESCRIPTION: Demonstrates a basic WHILE loop in Robot Framework, where the loop continues as long as the condition `${x} > 0` is true. The variable `${x}` is decremented in each iteration until it reaches 0. The loop condition is evaluated in Python.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n*** Test Cases ***\n    Loop as long as condition is True\n        WHILE    ${x} > 0\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n        END\n```\n\n----------------------------------------\n\nTITLE: YAML Variable File Example\nDESCRIPTION: This snippet provides an example of a YAML file used as a variable file in Robot Framework. The YAML file defines a string, integer, list, and dictionary. These are then mapped to Robot Framework variables `${STRING}`, `${INTEGER}`, `@{LIST}`, and `&{DICT}` respectively.  PyYAML module needs to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nstring:   Hello, world!\ninteger:  42\nlist:\n  - one\n  - two\ndict:\n  one: yksi\n  two: kaksi\n  with spaces: kolme\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Converter in Python for Robot Framework\nDESCRIPTION: This Python snippet demonstrates how to define a custom argument converter that accepts the value to convert and the library instance.  This allows the converter to access the library's state during the conversion process. This provides more context to the converters, allowing them to use the library when needed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef converter(value, library):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic IF/ELSE Syntax in Robot Framework\nDESCRIPTION: This snippet illustrates the basic IF/ELSE syntax in Robot Framework 4.0. It executes keywords within the IF block if the condition is true, using Python evaluation context and variable substitution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n   IF    ${rc} > 0\n       Some keyword\n       Another keyword\n   END\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with Free Keyword Arguments (**kwargs)\nDESCRIPTION: This snippet demonstrates how to define Robot Framework keywords that accept free keyword arguments using the `**kwargs` syntax in Python. The `example_keyword` function iterates through the keyword arguments and prints their names and values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(**stuff):\n    for name, value in stuff.items():\n        print(name, value)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values from Keyword Python\nDESCRIPTION: This snippet showcases how to return multiple values from a keyword using a tuple or a list. This allows assigning the values to multiple scalar variables or a list variable in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_93\n\nLANGUAGE: python\nCODE:\n```\ndef return_two_values():\n    return 'first value', 'second value'\n\ndef return_multiple_values():\n    return ['a', 'list', 'of', 'strings']\n```\n\n----------------------------------------\n\nTITLE: Inline IF Robot Framework\nDESCRIPTION: These examples demonstrate the use of inline IF statements in Robot Framework, which provide a more concise way to execute a single statement conditionally. They are alternatives to the more verbose normal IF/ELSE structure, useful when only one statement needs to be executed based on a condition. The inline IF syntax also supports ELSE and ELSE IF branches. Assignment with inline IF can be used by placing the variable(s) before the IF statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Normal IF\n        IF    $condition1\n            Keyword    argument\n        END\n        IF    $condition2\n            RETURN\n        END\n\n    Inline IF\n        IF    $condition1    Keyword    argument\n        IF    $condition2    RETURN\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE\n        IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE IF/ELSE\n        IF    $cond1    Keyword 1    ELSE IF    $cond2    Keyword 2    ELSE IF    $cond3    Keyword 3    ELSE    Keyword 4\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE with assignment\n        ${var} =    IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE with assignment having multiple variables\n        ${host}    ${port} =    IF    $production    Get Production Config    ELSE    Get Testing Config\n```\n\n----------------------------------------\n\nTITLE: Documenting Library with Docstrings - Python\nDESCRIPTION: This snippet demonstrates how to document a Robot Framework library using docstrings. The library and its keywords include docstrings, which can be used by tools like Libdoc to generate library documentation. The first line of a keyword's docstring serves as a short documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nclass MyLibrary:\n    \"\"\"This is an example library with some documentation.\"\"\"\n\n    def keyword_with_short_documentation(self, argument):\n        \"\"\"This keyword has only a short documentation\"\"\"\n        pass\n\n    def keyword_with_longer_documentation(self):\n        \"\"\"First line of the documentation is here.\n\n        Longer documentation continues here and it can contain\n        multiple lines or paragraphs.\n        \"\"\"\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using Argument Files with Robot Framework\nDESCRIPTION: This example shows how to use argument files with the Robot Framework command. The `--argumentfile (-A)` option is used to specify the path to the argument file. Multiple argument files can be used, and their contents are placed into the original list of arguments at the location of the `--argumentfile` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrobot --argumentfile all_arguments.robot\nrobot --name Example --argumentfile other_options_and_paths.robot\nrobot --argumentfile default_options.txt --name Example my_tests.robot\nrobot -A first.txt -A second.txt -A third.txt tests.robot\n```\n\n----------------------------------------\n\nTITLE: Skip Execution Exception - Python\nDESCRIPTION: This snippet demonstrates how to use the `SkipExecution` exception from the `robot.api` package to skip a test. Raising this exception will mark the executed test or task as skipped. The message provided to the exception constructor is the skip message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import SkipExecution\n\n\ndef example_keyword():\n    if test_should_be_skipped():\n        raise SkipExecution('Cannot proceed, skipping test.')\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Options Usage\nDESCRIPTION: Demonstrates the syntax for using command line options in Robot Framework, including short and long option names, and setting option values. The value can be separated with a space or equals sign for long options, or omitted for short options.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot -L debug my_tests.robot\nrobot --include smoke --variable HOST:10.0.0.42 path/to/tests/\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop with Limit and On Limit RobotFramework\nDESCRIPTION: This Robot Framework snippet demonstrates the usage of the `WHILE` loop with the `limit` and `on_limit` configuration options.  It configures the loop to run a maximum of ten times and to pass if the limit is reached, preventing the test from failing.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nWHILE with 'limit' and 'on_limit'\n    WHILE    True    limit=10    on_limit=PASS\n        Log to console    Hello!\n    END\n    Log to console    Hello once more!\n```\n\n----------------------------------------\n\nTITLE: Robot Framework GROUP Syntax\nDESCRIPTION: This demonstrates the usage of the `GROUP` syntax to group related keywords and control structures within a Robot Framework test case. Groups can be named or anonymous and can be nested with each other.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nValid login\n    GROUP    Open browser to login page\n        Open Browser    ${LOGIN URL}\n        Title Should Be    Login Page\n    END\n    GROUP    Submit credentials\n        Input Username    username_field    demo\n        Input Password    password_field    mode\n        Click Button    login_button\n    END\n    GROUP    Login should have succeeded\n        Title Should Be    Welcome Page\n    END\n\nAnonymous group\n    GROUP\n        Log    Group name is optional.\n    END\n\nNesting\n    GROUP\n        GROUP    Nested group\n            Log    Groups can be nested.\n        END\n        IF    True\n            GROUP\n                Log    Groups can also be nested with other control structures.\n            END\n        END\n    END\n```\n\n----------------------------------------\n\nTITLE: Importing Variable Files via Settings (Robot Framework)\nDESCRIPTION: Demonstrates importing variable files using the 'Variables' setting in Robot Framework. Supports specifying paths, modules, and arguments for variable files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nVariables    myvariables.py\nVariables    ../data/variables.py\nVariables    ${RESOURCES}/common.yaml\nVariables    myvariables\nVariables    rootmodule.Variables\nVariables    arguments.py    arg1    ${ARG2}\nVariables    arguments    argument\n```\n\n----------------------------------------\n\nTITLE: Defining a Task in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define a task in Robot Framework. It uses the *** Tasks *** section to declare tasks and then lists the keywords to be executed as part of the task. This structure is similar to defining test cases, but uses the Tasks section instead of Test Cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/CreatingTasks.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nProcess invoice\n    Read information from PDF\n    Validate information\n    Submit information to backend system\n    Validate information is visible in web UI\n```\n\n----------------------------------------\n\nTITLE: Returning Object from Python Keyword, Usage in Robot Framework\nDESCRIPTION: These Robot Framework test cases illustrate assigning the returned string and object to variables, and then comparing the returned string value and accessing an attribute of the returned object using `Should Be Equal` keyword. It shows usage of scalar variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_92\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nReturning one value\n    ${string} =    Return String\n    Should Be Equal    ${string}    Hello, world!\n    ${object} =    Return Object    Robot\n    Should Be Equal    ${object.name}    Robot\n```\n\n----------------------------------------\n\nTITLE: Robot Framework TRY/EXCEPT Example\nDESCRIPTION: This example demonstrates how to use the `TRY/EXCEPT` syntax for handling failures within a Robot Framework test case. If `Some Keyword` fails and its error message matches `Expected error message`, the `Error Handler Keyword` will be executed. This allows for custom error handling logic.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    TRY\n        Some Keyword\n    EXCEPT    Expected error message\n        Error Handler Keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Disabling Continue-on-Failure via Tags\nDESCRIPTION: This enhancement adds support to disable the continue-on-failure mode using `robot:stop-on-failure` and `robot:recursive-stop-on-failure` tags. This provides more granular control over test execution in cases where failures should halt the process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Python Date Converter with Union Type\nDESCRIPTION: This python snippet enhances the date converter to accept both strings (in `dd.mm.yyyy` format) and integers (representing seconds since the Unix epoch). It uses the `Union` type from the `typing` module to specify that the converter can handle multiple input types. This example shows how to handle diverse input formats for a single argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Multiline Variable Assignment\nDESCRIPTION: Demonstrates how to define long scalar variables spanning multiple lines. Also showcases list and dictionary variable declaration.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Long value\n        VAR    ${long}\n        ...    This value is rather long.\n        ...    It has been split to multiple lines.\n        ...    Parts will be joined together with a space.\n\n    Multiline\n        VAR    ${multiline}\n        ...    First line.\n        ...    Second line.\n        ...    Last line.\n        ...    separator=\\n\n    List\n        # Creates a list with three items.\n        VAR    @{list}    a    b    c\n\n    Dictionary\n        # Creates a dictionary with two items.\n        VAR    &{dict}    key=value    second=item\n\n    Normal IF\n        IF    1 > 0\n            VAR    ${x}    true value\n        ELSE\n            VAR    ${x}    false value\n        END\n\n    Inline IF\n        IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Configuring Library with @library Decorator (Python)\nDESCRIPTION: This snippet illustrates the usage of the `@library` decorator to configure a Robot Framework library implemented as a class. It demonstrates setting the `scope`, `version`, `doc_format` and `listener` attributes.  Requires `robot.api.deco` and a listener instance. The class `Example` represents the library, and the decorator arguments set the corresponding `ROBOT_LIBRARY_*` attributes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\nfrom example import Listener\n\n\n@library(scope='GLOBAL', version='3.2b1', doc_format='reST', listener=Listener())\nclass Example:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python Asynchronous Functions as Keywords\nDESCRIPTION: This example demonstrates how asynchronous functions defined using `async def` in Python can now be used as keywords in Robot Framework. The `gather_something` function uses `asyncio.gather` to concurrently execute multiple `something` functions.  The `async_sleep` function uses `asyncio.sleep` to pause execution. To use these, ensure asyncio is installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncio import gather, sleep\n\nasync def gather_something():\n    print('start')\n    await gather(something(1), something(2), something(3))\n    print('done')\n\nasync def async_sleep(time: int):\n    await sleep(time)\n```\n\n----------------------------------------\n\nTITLE: VAR syntax examples\nDESCRIPTION: Examples demonstrating the new `VAR` syntax for creating variables in Robot Framework. It showcases creating local and suite-scoped scalar variables, multiline variables with custom separators, as well as list and dictionary variables. It also includes examples of conditional variable creation using IF/ELSE structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with value `value`.\n    VAR    ${local}    value\n\n    # Create a suite-scoped variable, visible throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n    Should Be Equal    ${suite}    value\n\nExample continued\n    # Suite level variables are seen also by subsequent tests.\n    Should Be Equal    ${suite}    value\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nLong value\n    VAR    ${long}\n    ...    This value is rather long.\n    ...    It has been split to multiple lines.\n    ...    Parts will be joined together with a space.\n\nMultiline\n    VAR    ${multiline}\n    ...    First line.\n    ...    Second line.\n    ...    Last line.\n    ...    separator=\\n\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nList\n    # Creates a list with three items.\n    VAR    @{list}    a    b    c\n\nDictionary\n    # Creates a dict with two items.\n    VAR    &{dict}    key=value    second=item\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nNormal IF\n    IF    1 > 0\n        VAR    ${x}    true value\n    ELSE\n        VAR    ${x}    false value\n    END\n\nInline IF\n    IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Specifying Libraries Using Physical Path\nDESCRIPTION: This snippet shows how to specify a test library to import using a path to it in the file system. The path is relative to the directory where the current test data file is located. No module search path configuration is needed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    PythonLibrary.py\nLibrary    relative/path/PythonDirLib/    possible    arguments\nLibrary    ${RESOURCES}/Example.py\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Suite Initialization File Example\nDESCRIPTION: This Robot Framework snippet demonstrates the structure of a suite initialization file (__init__.robot).  It sets suite-level documentation, a suite setup with arguments, and applies a common tag to all tests within the suite. The variables section defines a variable used in the setup keyword.  The keyword section defines a reusable keyword used in the suite setup, showcasing argument handling and nested keyword calls.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/CreatingTestSuites.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation    Example suite\nSuite Setup      Do Something    ${MESSAGE}\nTest Tags        example\nLibrary          SomeLibrary\n\n*** Variables ***\n${MESSAGE}       Hello, world!\n\n*** Keywords ***\nDo Something\n    [Arguments]    ${args}\n    Some Keyword    ${arg}\n    Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Extending SeleniumLibrary with Inheritance\nDESCRIPTION: This Python snippet demonstrates how to extend the `SeleniumLibrary` using inheritance. It adds a new keyword `title_should_start_with` to the extended library.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\nfrom SeleniumLibrary import SeleniumLibrary\n\n\nclass ExtendedSeleniumLibrary(SeleniumLibrary):\n\n    @keyword\n    def title_should_start_with(self, expected):\n        title = self.get_title()\n        if not title.startswith(expected):\n            raise AssertionError(f\"Title '{title}' did not start with '{expected}'.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in a Python Module\nDESCRIPTION: This snippet demonstrates how to define variables in a Python module that can be used by Robot Framework. It defines a dictionary containing different types of variables like strings, integers, lists, and dictionaries. The function `get_variables` returns this dictionary, making the variables available to Robot Framework tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_variables():\n    variables = {\"VARIABLE \": \"An example string\",\n                 \"ANOTHER VARIABLE\": \"This is pretty easy!\",\n                 \"INTEGER\": 42,\n                 \"STRINGS\": [\"one\", \"two\", \"kolme\", \"four\"],\n                 \"NUMBERS\": [1, 42, 3.14],\n                 \"MAPPING\": {\"one\": 1, \"two\": 2, \"three\": 3}}\n    return variables\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax Example\nDESCRIPTION: This code snippet demonstrates the new `FOR` loop syntax introduced in Robot Framework 3.1. This syntax is the recommended and currently supported syntax for FOR loops in Robot Framework 4.0.  It uses indentation to define the loop body and an `END` statement to mark the end of the loop.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_8\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Implementing Listener as a Class (v3) in Python\nDESCRIPTION: This snippet demonstrates a listener implemented as a Python class using the listener API version 3, inheriting from `robot.api.interfaces.ListenerV3`. It uses type hints for better code readability and maintainability. The `start_suite` and `end_test` methods are implemented to print messages when a suite starts and a test ends, respectively.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot import result, running\nfrom robot.api.interfaces import ListenerV3\n\n\nclass Example(ListenerV3):\n\n    def start_suite(self, data: running.TestSuite, result: result.TestSuite):\n        print(f\"Suite '{data.name}' starting.\")\n\n    def end_test(self, data: running.TestCase, result: result.TestCase):\n        print(f\"Test '{result.name}' ended with status {result.status}.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with Different Number of Arguments\nDESCRIPTION: This snippet shows how to define Robot Framework keywords that accept different numbers of arguments. It provides examples of keywords with no arguments, one argument, and three arguments. The argument names are arbitrary but should be descriptive.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef no_arguments():\n    print(\"Keyword got no arguments.\")\n\ndef one_argument(arg):\n    print(f\"Keyword got one argument '{arg}'.\")\n\ndef three_arguments(a1, a2, a3):\n    print(f\"Keyword got three arguments '{a1}', '{a2}' and '{a3}'.\")\n```\n\n----------------------------------------\n\nTITLE: Basic TRY/EXCEPT block in Robot Framework\nDESCRIPTION: This code demonstrates a basic TRY/EXCEPT block for handling exceptions in Robot Framework. If `Some Keyword` fails with the message \"Error message\", `Error Handler Keyword` is executed. Otherwise, execution continues after the END statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nFirst example\n    TRY\n        Some Keyword\n    EXCEPT    Error message\n        Error Handler Keyword\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Conditional Variable Assignment (IF/ELSE)\nDESCRIPTION: Illustrates how to conditionally assign a value to a variable using an IF/ELSE structure in Robot Framework. The variable's value depends on the condition's evaluation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\nNormal IF\n        IF    1 > 0\n            VAR    ${x}    true value\n        ELSE\n            VAR    ${x}    false value\n        END\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in Variable Section (Robot Framework)\nDESCRIPTION: Presents how variables can be defined using the variable section in Robot Framework. It includes string, integer, list and dictionary examples.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${VARIABLE}            An example string\n${ANOTHER VARIABLE}    This is pretty easy!\n${INTEGER}             ${42}\n@{STRINGS}             one          two           kolme         four\n@{NUMBERS}             ${1}         ${INTEGER}    ${3.14}\n&{MAPPING}             one=${1}     two=${2}      three=${3}\n@{ANIMALS}             cat          dog\n&{FINNISH}             cat=kissa    dog=koira\n```\n\n----------------------------------------\n\nTITLE: Using Python Debugger (pdb) in Robot Test Case\nDESCRIPTION: This snippet shows how to use the Python debugger (pdb) directly within a Robot Framework test case using the Evaluate keyword. It redirects the standard output stream to allow pdb to work correctly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\nEvaluate    pdb.Pdb(stdout=sys.__stdout__).set_trace()    modules=sys, pdb\n```\n\n----------------------------------------\n\nTITLE: Typing with Union for multiple argument types - Python\nDESCRIPTION: Demonstrates using `typing.Union` to specify that a function argument can accept multiple types (int, float, str, None). This allows Robot Framework to attempt conversion to each type in order.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\n\ndef example(length: Union[int, float], padding: Union[int, str, None] = None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Executing Robot Framework tests\nDESCRIPTION: Executes Robot Framework tests using the `robot` command, specifying the test data file or directory as an argument. The path can be absolute or relative. Other examples show specifying multiple test files and using the `--name` option to define the top-level suite name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot tests.robot\nrobot path/to/my_tests/\nrobot c:\\robot\\tests.robot\n```\n\n----------------------------------------\n\nTITLE: Logging with robot.api.logger Python\nDESCRIPTION: This snippet shows how to use the `robot.api.logger` for logging with different levels and formatting. It demonstrates logging a debug message, an info message with HTML formatting, and a console message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import logger\n\n\ndef my_keyword(arg):\n    logger.debug(f\"Got argument '{arg}'.\")\n    do_something()\n    logger.info('<i>This</i> is a boring example', html=True)\n    logger.console('Hello, console!')\n```\n\n----------------------------------------\n\nTITLE: Defining a Keyword with Multiple Types in Python\nDESCRIPTION: This snippet demonstrates how to define a Python keyword with an argument that accepts multiple types using the `Union` type hint. It highlights the changes in argument conversion behavior in Robot Framework 6.1, specifically how unrecognized types are now skipped during conversion, potentially leading to different values being passed to the keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Union[UnknownType, int]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Test Case Timeout Configuration Robot Framework\nDESCRIPTION: Demonstrates how to configure test case timeouts using the Test Timeout setting in the Settings section and the [Timeout] setting with individual test cases. Includes examples of setting default timeouts, overriding default timeouts, using variables for timeouts, and disabling timeouts.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/AdvancedFeatures.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Timeout       2 minutes\n\n*** Test Cases ***\nDefault timeout\n    [Documentation]    Default timeout from Settings is used.\n    Some Keyword    argument\n\nOverride\n    [Documentation]    Override default, use 10 seconds timeout.\n    [Timeout]    10\n    Some Keyword    argument\n\nVariables\n    [Documentation]    It is possible to use variables too.\n    [Timeout]    ${TIMEOUT}\n    Some Keyword    argument\n\nNo timeout\n    [Documentation]    Empty timeout means no timeout even when Test Timeout has been used.\n    [Timeout]\n    Some Keyword    argument\n\nNo timeout 2\n    [Documentation]    Disabling timeout with NONE works too and is more explicit.\n    [Timeout]    NONE\n    Some Keyword    argument\n```\n\n----------------------------------------\n\nTITLE: Selecting tests by name with --test\nDESCRIPTION: Demonstrates how to select tests for execution using the `--test` option, which allows matching tests by name. The option can be used multiple times, and names can be prefixed with the suite name to pinpoint tests more precisely.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_4\n\nLANGUAGE: Robot Framework\nCODE:\n```\n--test Example                   # Match only tests with name 'Example'.\n--test example*                  # Match tests starting with 'example'.\n--test first --test second       # Match tests with name 'first' or 'second'.\n--test mysuite.mytest            # Match test 'mytest' in suite 'mysuite'.\n--test root.sub.test             # Match test 'test' in suite 'sub' in suite 'root'.\n--test *.sub.test                # Match test 'test' in suite 'sub' anywhere.\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Usage of Keyword with Embedded Arguments\nDESCRIPTION: Demonstrates how to call a library keyword that uses embedded arguments.  The keyword can be called by passing the embedded argument values directly or by using named arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        Number of horses should be    2\n        Number of horses should be    count=2\n        Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Variable Creation with VAR Syntax in Robot Framework\nDESCRIPTION: Demonstrates the new `VAR` syntax for creating variables with different scopes (local, suite) within Robot Framework test cases. Includes examples of creating scalar variables with multi-line values, as well as list and dictionary variables. Shows conditional variable creation using IF/ELSE.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with value `value`.\n    VAR    ${local}    value\n\n    # Create a suite-scoped variable, visible throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n    Should Be Equal    ${suite}    value\n\nExample continued\n    # Suite level variables are seen also by subsequent tests.\n    Should Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Keywords in Python\nDESCRIPTION: This example demonstrates how to implement asynchronous keywords in Robot Framework using `async def` and the `@keyword` decorator. It shows how to use `asyncio.sleep` to wait for a period of time and how to use `asyncio.get_running_loop()` or `asyncio.get_event_loop()` to get the reference of the loop.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom robot.api.deco import keyword\n\n\n@keyword\nasync def this_keyword_waits():\n    await asyncio.sleep(5)\n```\n\n----------------------------------------\n\nTITLE: Date Conversion with Custom Function\nDESCRIPTION: This Python code defines a custom function `parse_fi_date` to convert a date string in `dd.mm.yyyy` format to a Python `date` object. It then registers this converter function with `ROBOT_LIBRARY_CONVERTERS` to be used by Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n\n\n# Register converter function for the specified type.\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\n# Keyword using custom converter. Converter is got based on argument type.\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with @keyword Decorator (List)\nDESCRIPTION: This Python code demonstrates using the `@keyword` decorator with a list to specify argument types based on position. The `types` argument is a list containing the types for each argument (`int`, `bool`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Custom Type Conversion with Union Type (Python)\nDESCRIPTION: This Python code snippet shows how to accept multiple types in a custom type converter using `Union` from the `typing` module. The `parse_fi_date` function accepts both strings and integers, converting integers to dates based on the Unix epoch. This allows flexibility in the types of arguments a keyword can receive.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop in Robot Framework\nDESCRIPTION: Illustrates the usage of WHILE loops in Robot Framework, including conditional execution, BREAK, and CONTINUE statements. The loop continues as long as the specified condition is true. Variables are resolved before evaluating the condition, and Python builtins are available.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n    *** Test Cases ***\n    Loop as long as condition is True\n        WHILE    ${x} > 0\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n        END\n\n    BREAK and CONTINUE\n        WHILE    True\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 0\n                Log    We are done!\n                BREAK\n            END\n            IF    ${x} % 2 == 0    CONTINUE    # New inline IF.\n            Log    Only executed if ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: Continuing on Failure with Test Templates\nDESCRIPTION: This example shows how to use test templates in Robot Framework. When using test templates, all top-level keywords are executed regardless of whether a keyword fails.  The `robot:stop-on-failure` or `robot:recursive-stop-on-failure` tags can be used to change this behavior.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nContinue with templates\n    [Template]    Should be Equal\n    this    fails\n    this    is run\n```\n\n----------------------------------------\n\nTITLE: Convert Test Suite to JSON - Python\nDESCRIPTION: This snippet shows how to convert a Robot Framework test suite to JSON format using the 'TestSuite.to_json' method. It demonstrates saving the JSON data to a string or a file with custom indentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import TestSuite\n\n\n# Create suite based on data on the file system.\nsuite = TestSuite.from_file_system('/path/to/data')\n\n# Get JSON data as a string.\ndata = suite.to_json()\n\n# Save JSON data to a file with custom indentation.\nsuite.to_json('data.rbt', indent=2)\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with Shell Script\nDESCRIPTION: This shell script executes Robot Framework tests using different browsers and combines the results using Rebot. It accepts command line options and forwards them to the robot command.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nrobot --name Firefox --variable BROWSER:Firefox --output out/fx.xml --log none --report none $* login\nrobot --name IE --variable BROWSER:IE --output out/ie.xml --log none --report none  $* login\nrebot --name Login --outputdir out --output login.xml out/fx.xml out/ie.xml\n```\n\n----------------------------------------\n\nTITLE: Providing Arguments to a Library - Robot Framework\nDESCRIPTION: This example shows how to pass arguments to a Robot Framework library when it is imported in the ***Settings*** section. The arguments are passed to the library's constructor.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Settings ***\nLibrary    MyLibrary     10.0.0.1    8080\nLibrary    AnotherLib    ${ENVIRONMENT}\n```\n\n----------------------------------------\n\nTITLE: Using Get Library Instance\nDESCRIPTION: This Python snippet illustrates how to get the active `SeleniumLibrary` instance from Robot Framework using the `BuiltIn` library.  This approach ensures that the library instance and state are consistent with what Robot Framework uses.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.libraries.BuiltIn import BuiltIn\n\n\ndef title_should_start_with(expected):\n    seleniumlib = BuiltIn().get_library_instance('SeleniumLibrary')\n    title = seleniumlib.get_title()\n    if not title.startswith(expected):\n        raise AssertionError(f\"Title '{title}' did not start with '{expected}'.\")\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Style (Robot Framework)\nDESCRIPTION: Illustrates the new, recommended FOR loop syntax with an explicit END marker. This syntax replaces the old-style FOR loops and is compatible with the pipe-separated format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_9\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| FOR | ${x} | IN | 1 | 2\n|     | Log  | ${x}\n| END |\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE with FOR Loop Robot Framework\nDESCRIPTION: This example demonstrates `BREAK` and `CONTINUE` within a `FOR` loop, combined with inline `IF`.  The loop breaks when `${x}` exceeds 10 and skips iterations when `${x}` is even.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    FOR    ${x}    IN RANGE    1000\n        IF    ${x} > 10    BREAK\n        Log    Executed only when ${x} < 11\n        IF    ${x} % 2 == 0    CONTINUE\n        Log    Executed only when ${x} is odd.\n    END\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Library with `get_keyword_names` and `run_keyword` (Python)\nDESCRIPTION: This code snippet presents a minimal dynamic library implementation that defines the `get_keyword_names` and `run_keyword` methods.  The `get_keyword_names` method returns a list of keyword names, and the `run_keyword` method executes the specified keyword, printing the name and arguments it receives.  It showcases the basic structure required for a dynamic library in Robot Framework and allows any argument types. The named_args is passed to the run_keyword method as dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nclass DynamicExample:\n\n    def get_keyword_names(self):\n        return ['first keyword', 'second keyword']\n\n    def run_keyword(self, name, args, named_args):\n        print(f\"Running keyword '{name}' with positional arguments {args} \"\n              f\"and named arguments {named_args}.\")\n```\n\n----------------------------------------\n\nTITLE: VAR syntax with IF/ELSE\nDESCRIPTION: Demonstrates how to use VAR syntax inside IF/ELSE blocks to create variables conditionally. The example shows both the standard IF and inline IF structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Normal IF\n        IF    1 > 0\n            VAR    ${x}    true value\n        ELSE\n            VAR    ${x}    false value\n        END\n\n    Inline IF\n        IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Matching errors using patterns in Robot Framework\nDESCRIPTION: This code demonstrates how to use glob patterns, regular expressions, and start matching to match error messages in EXCEPT branches. The `type` parameter configures the pattern type. Possible values are GLOB, REGEXP, START, and LITERAL (default).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nGlob pattern\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB\n        Error Handler 1\n    EXCEPT    [Ee]rror ?? occurred    ${pattern}    type=glob\n        Error Handler 2\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nRegular expression\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: .*    type=regexp\n        Error Handler 1\n    EXCEPT    [Ee]rror \\\\d+ occurred    type=regexp    # Backslash needs to be escaped.\n        Error Handler 2\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch start\n    TRY\n        Some Keyword\n    EXCEPT    ValueError:    ${beginning}    type=start\n        Error Handler\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExplicit exact match\n    TRY\n        Some Keyword\n    EXCEPT    Error 13 occurred    type=literal\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Date Converter with Type Restriction\nDESCRIPTION: This python snippet adds a type hint to the date converter function, restricting its usage to string inputs only. This prevents the converter from being called with arguments of other types, such as integers, which would cause errors. It demonstrates how to limit the types of values a converter can handle.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python Strict Type Validation with Converter\nDESCRIPTION: This python snippet demonstrates strict type validation by defining a custom type (`StrictType`) and a converter that always raises a `TypeError` if the argument is not an instance of `StrictType`. This effectively enforces that the keyword only accepts arguments of the specified type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nclass StrictType:\n    pass\n\n\ndef strict_converter(arg):\n    raise TypeError(f'Only StrictType instances accepted, got {type(arg).__name__}.')\n\n\nROBOT_LIBRARY_CONVERTERS = {StrictType: strict_converter}\n\n\ndef example(argument: StrictType):\n    assert isinstance(argument, StrictType)\n```\n\n----------------------------------------\n\nTITLE: Example keyword with implicit type conversion\nDESCRIPTION: This Python code snippet illustrates how Robot Framework can implicitly determine argument types from default values. If a keyword argument has a default value, Robot Framework will attempt to convert the passed argument to the same type as the default value. Here `count` will be converted to `int` and `case_insensitive` to `bool`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework IF/ELSE Example\nDESCRIPTION: This snippet demonstrates the basic IF/ELSE syntax in Robot Framework 4.0, showing how to conditionally execute keywords based on a condition.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n   IF    ${rc} > 0\n       Some keyword\n       Another keyword\n   END\n```\n\n----------------------------------------\n\nTITLE: Space Separated Format Example - Robot Framework\nDESCRIPTION: Illustrates the space separated format for defining test data in Robot Framework. Tokens such as keywords and arguments are separated by two or more spaces or one or more tab characters. It shows how to define settings, variables, test cases, and keywords using this format. Note that tabs and consecutive spaces must be escaped if needed in the actual data.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation     Example using the space separated format.\nLibrary           OperatingSystem\n\n*** Variables ***\n${MESSAGE}        Hello, world!\n\n*** Test Cases ***\nMy Test\n    [Documentation]    Example test.\n    Log    ${MESSAGE}\n    My Keyword    ${CURDIR}\n\nAnother Test\n    Should Be Equal    ${MESSAGE}    Hello, world!\n\n*** Keywords ***\nMy Keyword\n    [Arguments]    ${path}\n    Directory Should Exist    ${path}\n```\n\n----------------------------------------\n\nTITLE: Enhanced For Loop Syntax Example\nDESCRIPTION: This snippet shows the enhanced FOR loop syntax introduced in Robot Framework 3.1. It uses `FOR` to start the loop and `END` to close it. This modern syntax is more readable and eliminates the need to escape keywords inside the loop. This is the preferred style.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_6\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output\nDESCRIPTION: This example shows how to generate a JSON output file during Robot Framework execution using the `--output` option.  The format is automatically detected based on the output file extension. Prior to 7.2, Rebot was needed to achieve this.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --output output.json example.robot\n```\n\n----------------------------------------\n\nTITLE: Robot Framework ZIP Loop Modes\nDESCRIPTION: This example showcases the different modes available for the FOR IN ZIP loop in Robot Framework 6.1: STRICT, SHORTEST, and LONGEST. Each mode controls how the loop handles lists of differing lengths. STRICT mode fails if lists have different lengths, SHORTEST mode ignores items in longer lists, and LONGEST mode fills missing values in shorter lists with None or a custom fill value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSTRICT mode\n    [Documentation]    This loop fails due to lists lengths being different.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=STRICT\n        Log    ${c}: ${n}\n    END\n\nSHORTEST mode\n    [Documentation]    This loop executes three times.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=SHORTEST\n        Log    ${c}: ${n}\n    END\n\nLONGEST mode\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `None`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST\n        Log    ${c}: ${n}\n    END\n\nLONGEST mode with custom fill value\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `-`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST    fill=-\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Using LONGEST Mode in FOR IN ZIP Loops\nDESCRIPTION: This snippet demonstrates the `LONGEST` mode for `FOR IN ZIP` loops, which iterates as many times as the longest list. Missing values in shorter lists are filled with `None` by default.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_23\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nLONGEST mode\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `None`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade Robot Framework to the latest version using pip, the Python package installer.  It provides the command to upgrade to the latest version and the command to install a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1.1.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Default values for environment variables (Robot Framework)\nDESCRIPTION: This snippet refers to the ability to define default values for environment variables, e.g., `%{EXAMPLE=default}`. This is a very handy feature if you want some configurations to fall back to known good values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_12\n\nLANGUAGE: Robot Framework\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Returning String Value from Keyword Python\nDESCRIPTION: This snippet demonstrates how to return a string value from a keyword using the `return` statement in Python.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_90\n\nLANGUAGE: python\nCODE:\n```\ndef return_string():\n    return \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Restricting Value Types in Converter (Python)\nDESCRIPTION: This Python code demonstrates how to restrict the accepted value type for the custom argument converter using a type hint. This prevents the converter from being called with unexpected types, such as integers, and provides a more informative error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Literal Type Conversion in Robot Framework\nDESCRIPTION: This example demonstrates how Robot Framework converts string values to a specific set of literal values.  It showcases the use of `Literal` type hints for restricting keyword arguments to a predefined set of strings. Exact matches have precedence over normalized matches (case, space, underscore and hyphen insensitive).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\ndef kw(arg: Literal['ON', 'OFF']):\n    ...\n\n# Examples:\n# | `OFF`\n# | `on`\n```\n\n----------------------------------------\n\nTITLE: Argument Conversion Update for ByteString in Robot Framework\nDESCRIPTION: This snippet illustrates how to update argument conversion due to the deprecation of `ByteString`. Instead of using `arg: ByteString`, it's recommended to use `arg: bytes | bytearray` to achieve the same functionality.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\narg: bytes | bytearray\n```\n\n----------------------------------------\n\nTITLE: Logging with Python's logging Module\nDESCRIPTION: This snippet demonstrates how to use Python's standard `logging` module to log messages.  Messages are automatically propagated to Robot Framework's log file, providing accurate timestamps. It showcases logging a debug and an info message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n\ndef my_keyword(arg):\n    logging.debug(f\"Got argument '{arg}'.\")\n    do_something()\n    logging.info('This is a boring example')\n```\n\n----------------------------------------\n\nTITLE: Example Python Keyword with Stringified Type Hints\nDESCRIPTION: Shows how to use stringified type hints for generic types and unions in Python keyword arguments. This allows using type hints like 'list[int]' and 'int | float' even with older Python versions. This example uses the `@keyword` decorator from the `robot.api.deco` module.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Logging with Different Levels using print Python\nDESCRIPTION: This example showcases how to log messages with different levels (WARN, ERROR, INFO, CONSOLE, HTML) using the `print` function and specific prefixes. The prefixes determine the log level and formatting of the messages in the log file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello from a library.')\nprint('*WARN* Warning from a library.')\nprint('*ERROR* Something unexpected happen that may indicate a problem in the test.')\nprint('*INFO* Hello again!')\nprint('This will be part of the previous message.')\nprint('*INFO* This is a new message.')\nprint('*INFO* This is <b>normal text</b>.')\nprint('*CONSOLE* This logs into console and log file.')\nprint('*HTML* This is <b>bold</b>.')\nprint('*HTML* <a href=\"http://robotframework.org\">Robot Framework</a>')\n```\n\n----------------------------------------\n\nTITLE: Matching Errors Using Patterns in Robot Framework\nDESCRIPTION: This snippet shows how to use glob patterns, regular expressions and start matching to identify error messages within the EXCEPT block of a TRY/EXCEPT structure. `GLOB:`, `REGEXP:` and `STARTS:` prefixes define the matching type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nGlob pattern\n    TRY\n        Some Keyword\n    EXCEPT    GLOB: ValueError: *\n        Error Handler 1\n    EXCEPT    GLOB: [Ee]rror ?? occurred    GLOB: ${pattern}\n        Error Handler 2\n    END\n\nRegular expression\n    TRY\n        Some Keyword\n    EXCEPT    REGEXP: ValueError: .*\n        Error Handler 1\n    EXCEPT    REGEXP: [Ee]rror \\\\d+ occurred    # Backslash needs to be escaped.\n        Error Handler 2\n    END\n\nMatch start\n    TRY\n        Some Keyword\n    EXCEPT    STARTS: ValueError:    STARTS: ${beginning}\n        Error Handler\n    END\n\nExplicit exact match\n    TRY\n        Some Keyword\n    EXCEPT    EQUALS: ValueError: invalid literal for int() with base 10: 'ooops'\n        Error Handler\n    EXCEPT    EQUALS: Error 13 occurred\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Library Example with docstring and @keyword\nDESCRIPTION: This python example provides an illustration of a library for Robot Framework that contains documentation and uses the `@keyword` decorator to specify tags. This enables the population of the library information dictionary for the `get_library_information` method.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/RemoteLibrary.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    \"\"\"Library documentation.\"\"\"\n\n    from robot.api.deco import keyword\n\n    @keyword(tags=['x', 'y'])\n    def example(a: int, b=True):\n        \"\"\"Keyword documentation.\"\"\"\n        pass\n\n    def another():\n        pass\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop with Limit and On Limit Simplified RobotFramework\nDESCRIPTION: This Robot Framework snippet shows a simplified version of the `WHILE` loop configuration, where the loop condition is omitted. The loop will run until the specified `limit` is reached, and the `on_limit` option determines the behavior upon reaching the limit.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\nWHILE    limit=10   on_limit=PASS\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Files in Robot Framework\nDESCRIPTION: This code snippet demonstrates how to import resource files using the `Resource` setting in the Settings section. It shows examples of importing resource files with different paths: relative, absolute, and with variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nResource    example.resource\nResource    ../resources/login.resource\nResource    package/example.resource\nResource    ${RESOURCES}/common.resource\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested List/Dictionary Items - Robot Framework\nDESCRIPTION: Robot Framework 3.1 introduces the ability to access nested list and dictionary items using syntax like `${var}[key][0]`. This enhancement allows for accessing deeply nested data structures, such as JSON objects, directly within Robot Framework tests. The general item access syntax has also changed to `${var}[0]` and `${var}[key]` for both lists and dictionaries, although the old syntax `@{var}[0]` and `&{var}[key]` will still work but is deprecated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Registering Library as Listener using SELF\nDESCRIPTION: Demonstrates how a library can register itself as a listener using the `SELF` string. This is done using the `@library` decorator and specifying `listener='SELF'`. The example includes a `start_suite` method that will be called when a suite starts.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(listener='SELF')\nclass Example:\n\n    def start_suite(self, data, result):\n        ...\n\n    @keyword\n    def example(self, arg):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values, Usage in Robot Framework\nDESCRIPTION: These Robot Framework test cases demonstrate assigning multiple returned values to scalar and list variables. It showcases different ways to access returned values using indices with list variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_94\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nReturning multiple values\n    ${var1}    ${var2} =    Return Two Values\n    Should Be Equal    ${var1}    first value\n    Should Be Equal    ${var2}    second value\n    @{list} =    Return Two Values\n    Should Be Equal    @{list}[0]    first value\n    Should Be Equal    @{list}[1]    second value\n    ${s1}    ${s2}    @{li} =    Return Multiple Values\n    Should Be Equal    ${s1} ${s2}    a list\n    Should Be Equal    @{li}[0] @{li}[1]    of strings\n```\n\n----------------------------------------\n\nTITLE: Generating JSON output with Robot Framework\nDESCRIPTION: This snippet shows how to generate a JSON output file directly during Robot Framework execution. The --output option is used to specify the output file name with the .json extension, which automatically triggers the JSON output format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrobot --output output.json example.robot\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE with FOR Loop Robot Framework\nDESCRIPTION: This example demonstrates the use of BREAK and CONTINUE statements within a FOR loop in Robot Framework. The BREAK statement is used to exit the loop when a condition is met, and the CONTINUE statement skips the current iteration and moves to the next one. These statements are often combined with inline IF statements to control the loop's execution based on specific conditions. The Log keyword is used to print messages based on whether the current value of ${x} meets certain criteria.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        FOR    ${x}    IN RANGE    1000\n            IF    ${x} > 10    BREAK\n            Log    Executed only when ${x} < 11\n            IF    ${x} % 2 == 0    CONTINUE\n            Log    Executed only when ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: RETURN Keyword Example Robot Framework\nDESCRIPTION: This example demonstrates using the `RETURN` statement within a keyword containing a `WHILE` loop.  The `RETURN` statement is used to exit the keyword prematurely when a certain condition is met, skipping the `Fail` keyword.  Requires Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nKeyword with WHILE using RETURN\n    WHILE    True\n        ${x} =    Evaluate    ${x} - 1\n        IF    ${x} == 5    RETURN\n    END\n    Fail    This is not executed\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework via pip\nDESCRIPTION: These commands are used to install or upgrade Robot Framework to the latest available release or to a specific version using pip. The first command installs the latest pre-release, while the second installs a specific version (7.0.1rc2).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.1rc2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.0.1rc2\n```\n\n----------------------------------------\n\nTITLE: Example Python 3 library with named-only arguments\nDESCRIPTION: This Python 3 code snippet shows how to use named-only arguments in a Robot Framework library.  The `case_sensitive` argument can only be passed as a named argument.  The `*words` syntax allows for variable positional arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with @keyword Decorator (Dictionary)\nDESCRIPTION: This Python code showcases using the `@keyword` decorator with a dictionary to specify argument types. The `types` argument maps argument names (`count`, `case_insensitive`) to their respective types (`int`, `bool`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Function Annotations\nDESCRIPTION: This Python 3 code snippet showcases how to use function annotations to explicitly specify argument types for Robot Framework keywords. Robot Framework will automatically convert arguments to the specified types before passing them to the keyword. Case_insensitive is set to True by default if no value is passed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Date Converter (Python)\nDESCRIPTION: This Python code defines a custom argument converter function `parse_fi_date` that parses dates in the Finnish format (dd.mm.yyyy) and registers it with Robot Framework using the `ROBOT_LIBRARY_CONVERTERS` dictionary. It also shows a keyword using the custom converter.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n\n\n# Register converter function for the specified type.\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\n# Keyword using custom converter. Converter is got based on argument type.\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Usage of Keyword with Embedded Arguments\nDESCRIPTION: Illustrates how to use a keyword defined with embedded arguments in Robot Framework. Demonstrates the possibility to use both positional and named arguments to specify parameters for the function.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        Number of horses should be    2\n        Number of horses should be    count=2\n        Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Example Resource File Structure in Robot Framework\nDESCRIPTION: This example demonstrates a complete resource file including settings, variables and keywords. It showcases documentation, library imports, variable definitions, and keyword implementation using Robot Framework syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation     An example resource file\nLibrary           SeleniumLibrary\nResource          ${RESOURCES}/common.resource\n\n*** Variables ***\n${HOST}           localhost:7272\n${LOGIN URL}      http://${HOST}/\n${WELCOME URL}    http://${HOST}/welcome.html\n${BROWSER}        Firefox\n\n*** Keywords ***\nOpen Login Page\n    [Documentation]    Opens browser to login page\n    Open Browser    ${LOGIN URL}    ${BROWSER}\n    Title Should Be    Login Page\n\nInput Name\n    [Arguments]    ${name}\n    Input Text    username_field    ${name}\n\nInput Password\n    [Arguments]    ${password}\n    Input Text    password_field    ${password}\n```\n\n----------------------------------------\n\nTITLE: Python Date Converter with Validation\nDESCRIPTION: This python snippet enhances the previous date converter by adding input validation using regular expressions.  It ensures that the input string matches the expected `dd.mm.yyyy` format and raises a `ValueError` with a user-friendly message if the format is invalid. This improves error reporting and debugging.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Using named-only arguments in Robot Framework\nDESCRIPTION: This Robot Framework test case demonstrates how to call a Python keyword that uses named-only arguments.  The `case_sensitive` argument must be passed as a keyword argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Sort Words    Foo    bar    baZ\n    Sort Words    Foo    bar    baZ    case_sensitive=True\n```\n\n----------------------------------------\n\nTITLE: IF/ELSE example in Robot Framework\nDESCRIPTION: This example demonstrates the new native IF/ELSE syntax in Robot Framework 4.0. It shows a simple conditional statement where a keyword is executed if the variable ${x} is greater than 0. It also shows the equivalent using Run Keyword If.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a3.rst#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\nIF    ${x} > 0\n    Some positive keyword\nEND\n\nRun Keyword If    ${x} > 0    Some positive keyword\n```\n\n----------------------------------------\n\nTITLE: JSON Variable File Example\nDESCRIPTION: This snippet shows an example of a JSON file used as a variable file in Robot Framework. It defines a string, an integer, a list, and a dictionary, which are then used as Robot Framework variables. JSON files are automatically recognized by the `.json` extension and do not require extra modules to be installed in newer Robot Framework versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"string\": \"Hello, world!\",\n    \"integer\": 42,\n    \"list\": [\n        \"one\",\n        \"two\"\n    ],\n    \"dict\": {\n        \"one\": \"yksi\",\n        \"two\": \"kaksi\",\n        \"with spaces\": \"kolme\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging to Console and Log File using robot.api.logger Python\nDESCRIPTION: This snippet demonstrates how to use the `robot.api.logger` to log messages to both the console and the log file.  It uses the `logger.console` method to write only to the console and `logger.info` with `also_console=True` to write to both.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import logger\n\n\ndef log_to_console(arg):\n    logger.console('Message only to console.')\n\ndef log_to_console_and_log_file(arg):\n    logger.info('Message both to log and to console.', also_console=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Keywords with Embedded Arguments in Python\nDESCRIPTION: This example demonstrates how to create Robot Framework keywords that accept embedded arguments using the `@keyword` decorator from `robot.api.deco`. It shows how to define a custom name for the keyword and how the embedded arguments are passed to the function.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword('Select ${animal} from list')\ndef select_animal_from_list(animal):\n    ...\n\n\n@keyword('Number of ${animals} should be')\ndef number_of_animals_should_be(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Variable Creation in Robot Framework\nDESCRIPTION: Demonstrates how to conditionally create variables using IF/ELSE structures within Robot Framework test cases.  This allows for dynamic variable assignment based on runtime conditions. No specific dependencies are required other than the Robot Framework itself.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nLong value\n    VAR    ${long}\n    ...    This value is rather long.\n    ...    It has been split to multiple lines.\n    ...    Parts will be joined together with a space.\n\nMultiline\n    VAR    ${multiline}\n    ...    First line.\n    ...    Second line.\n    ...    Last line.\n    ...    separator=\\n\nList\n    # Creates a list with three items.\n    VAR    @{list}    a    b    c\n\nDictionary\n    # Creates a dictionary with two items.\n    VAR    &{dict}    key=value    second=item\n\nNormal IF\n    IF    1 > 0\n        VAR    ${x}    true value\n    ELSE\n        VAR    ${x}    false value\n    END\n\nInline IF\n    IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Example Python Keyword with Mixed Arguments\nDESCRIPTION: Illustrates a Python keyword that accepts both embedded and normal arguments.  The 'animals' argument is embedded in the keyword name, while 'count' is passed as a normal argument. This example requires the Robot Framework 'keyword' decorator from the robot.api.deco module.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: IF/ELSE Example in Robot Framework\nDESCRIPTION: This Robot Framework test case demonstrates the usage of IF and ELSE statements. It checks if the variable `${rc}` is greater than zero. If it is, `Some keyword` is executed; otherwise, `Another keyword` is executed. Note that `${rc}` is used in the `$rc` format, meaning the variable's value, not its string representation, is used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Using STRICT Mode in FOR IN ZIP Loops\nDESCRIPTION: This snippet demonstrates the `STRICT` mode for `FOR IN ZIP` loops, which enforces that all lists must have equal lengths. If the lists have different lengths, the loop will fail. It also defines lists of characters and numbers for demonstration.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_21\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSTRICT mode\n    [Documentation]    This loop fails due to lists lengths being different.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=STRICT\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Example Python Keyword using Literal Type Hint\nDESCRIPTION: Illustrates how to use the `Literal` type hint in a Python keyword argument.  This restricts the allowed values for the argument to a specific set. The keyword requires the `Literal` type from the `typing` module and the `@keyword` decorator from `robot.api.deco`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Literal['x', 'y', 'z']):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enhanced For Loop Syntax Robot Framework\nDESCRIPTION: Illustrates the enhanced FOR loop syntax introduced in Robot Framework 3.1, providing a cleaner and more readable way to define loops. The new syntax uses `FOR` to start the loop, does not require escaping keywords within the loop, and ends with an explicit `END` statement. This snippet showcases the recommended syntax for defining loops in modern Robot Framework tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2a1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop with 'limit' and 'on_limit' in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates the use of the `limit` and `on_limit` options in a `WHILE` loop. The loop runs a maximum of 10 times. If the limit is reached, the `on_limit=PASS` option causes the loop to exit without failing the test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nWHILE with 'limit' and 'on_limit'\n    WHILE    True    limit=10    on_limit=PASS\n        Log to console    Hello!\n    END\n    Log to console    Hello once more!\n```\n\n----------------------------------------\n\nTITLE: Python Strip Spaces Keyword with Keyword-Only Arguments\nDESCRIPTION: This Python code defines a keyword `strip_spaces` that accepts a `word` argument and two keyword-only arguments (`left` and `right`). It strips leading and/or trailing spaces from the word based on the values of the `left` and `right` arguments. Both arguments are optional with default values of True.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef strip_spaces(word, *, left=True, right=True):\n    if left:\n        word = word.lstrip()\n    if right:\n        word = word.rstrip()\n    return word\n```\n\n----------------------------------------\n\nTITLE: New For Loop Example with Pipe Separated Format\nDESCRIPTION: This snippet illustrates the new FOR loop syntax within the pipe-separated format, which is the recommended way to define loops in Robot Framework 3.2. It uses `FOR` instead of `:FOR` and includes an explicit `END` marker to define the loop's boundaries. The spaces are part of the pipe-separated format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_5\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| FOR | ${x} | IN | 1 | 2\n|     | Log  | ${x}\n| END |\n```\n\n----------------------------------------\n\nTITLE: Listener API v3 Example (Keyword and WHILE Loop)\nDESCRIPTION: This Python code demonstrates how to use the enhanced listener API version 3 to get notifications about started keywords and ended WHILE loops during Robot Framework execution. It requires the 'robot' library and defines 'start_keyword' and 'end_while' methods that print information about these events to standard output. This listener must be enabled during the Robot Framework test execution to observe the output.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot import result, running\n\n\ndef start_keyword(data: running.Keyword, result: result.Keyword):\n    print(f\"Keyword '{result.full_name}' used on line {data.lineno} started.\")\n\n\ndef end_while(data: running.While, result: result.While):\n    print(f\"WHILE loop on line {data.lineno} ended with status {result.status} \"\n          f\"after {len(result.body)} iterations.\")\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Inline Conditional Variable Assignment\nDESCRIPTION: Shows an example of an inline IF/ELSE structure used for assigning a value to a variable conditionally. This is a more concise way to express the same logic as the standard IF/ELSE.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\nInline IF\n        IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Setting Library Documentation Format (Python)\nDESCRIPTION: This snippet shows how to set the documentation format of a Robot Framework library using the `ROBOT_LIBRARY_DOC_FORMAT` attribute.  The value is set to 'reST', indicating reStructuredText. This attribute should be a module-level attribute. The `keyword` function serves as a placeholder for actual keyword implementation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A library for *documentation format* demonstration purposes.\n\n    This documentation is created using reStructuredText__. Here is a link\n    to the only `Keyword`.\n\n    __ http://docutils.sourceforge.net\n    \"\"\"\n\nROBOT_LIBRARY_DOC_FORMAT = 'reST'\n\n\ndef keyword():\n    \"\"\"**Nothing** to see here. Not even in the table below.\n\n    =======  =====  =====\n    Table    here   has\n    nothing  to     see.\n    =======  =====  =====\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Merging Suites Executed in Pieces\nDESCRIPTION: Demonstrates merging test suite results when the suite is executed in pieces using `--include` and `--exclude` options. The example runs smoke tests, then runs the remaining tests, and finally merges the results using `--merge`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nrobot --include smoke --output smoke.xml tests   # first run some tests\nrobot --exclude smoke --output others.xml tests  # then run others\nrebot --merge smoke.xml others.xml               # finally merge results\n```\n\n----------------------------------------\n\nTITLE: Date Conversion with Input Validation\nDESCRIPTION: This Python code improves the `parse_fi_date` function by adding input validation using regular expressions. If the input string does not match the expected `dd.mm.yyyy` format, a `ValueError` is raised with a descriptive error message. The converter function is then registered for the `date` type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases: Argument Handling\nDESCRIPTION: These test cases demonstrate how Robot Framework handles different types of arguments (positional, named, and free named) when using dynamic libraries.  It shows how the arguments are passed to the `run_keyword` method as `args` and `kwargs`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_101\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***                  # args, kwargs\n   No arguments\n       Dynamic                         # [], {}\n\n   Only positional\n       Dynamic    x                    # [x], {}\n       Dynamic    x      y             # [x, y], {}\n\n   Only free named\n       Dynamic    x=1                  # [], {x: 1}\n       Dynamic    x=1    y=2    z=3    # [], {x: 1, y: 2, z: 3}\n\n   Positional and free named\n       Dynamic    x      y=2           # [x], {y: 2}\n       Dynamic    x      y=2    z=3    # [x], {y: 2, z: 3}\n\n   Positional as named and free named\n       Dynamic    a=1    x=1           # [], {a: 1, x: 1}\n       Dynamic    b=2    x=1    a=1    # [], {a: 1, b: 2, x: 1}\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: These commands demonstrate how to install or upgrade Robot Framework to the latest pre-release version, or a specific release candidate version, using pip.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: robotframework\nCODE:\n```\npip install robotframework==3.1rc1\n```\n\n----------------------------------------\n\nTITLE: Importing Same Library Multiple Times with Custom Names\nDESCRIPTION: This snippet illustrates importing the same library multiple times with different arguments by using the AS keyword to assign distinct names to each instance.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    SomeLibrary    localhost        1234    AS    LocalLib\nLibrary    SomeLibrary    server.domain    8080    AS    RemoteLib\n\n*** Test Cases ***\nExample\n    LocalLib.Some Keyword     some arg       second arg\n    RemoteLib.Some Keyword    another arg    whatever\n    LocalLib.Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Adding Groups Programmatically in Python\nDESCRIPTION: This Python code demonstrates how to add a group with keywords to a test case programmatically using Robot Framework's API.  A `SuiteVisitor` is used to traverse the test suite, and the `create_group` and `create_keyword` methods add the group and its keywords to each test.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import SuiteVisitor\n\n\nclass GroupAdder(SuiteVisitor):\n\n    def start_test(self, test):\n        group = test.body.create_group(name='Example')\n        group.body.create_keyword(name='Log', args=['Hello, world!'])\n        group.body.create_keyword(name='No Operation')\n```\n\n----------------------------------------\n\nTITLE: Setting Suite Documentation in Robot Framework\nDESCRIPTION: This Robot Framework snippet demonstrates how to set suite-level documentation using the `Documentation` setting in the `Settings` section.  The documentation can be formatted using Robot Framework's formatting syntax and split across multiple lines.  This documentation will appear in reports and logs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/CreatingTestSuites.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation    An example suite documentation with *some* _formatting_.\n...              Long documentation can be split into multiple lines.\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns to Match Errors in Robot Framework\nDESCRIPTION: This example shows how to use glob patterns to match error messages. The `type=GLOB` parameter specifies that the messages should be treated as glob patterns.  `${pattern}` must be defined as a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nGlob pattern\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB\n        Error Handler 1\n    EXCEPT    [Ee]rror ?? occurred    ${pattern}    type=glob\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Install Latest Robot Framework Pre-release with Pip (Python)\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip, the Python package installer. The `--pre` flag allows installation of pre-release versions, and `--upgrade` ensures the existing Robot Framework installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1a2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Capturing error message in Robot Framework\nDESCRIPTION: This code shows how to capture the error message into a variable using the AS keyword in an EXCEPT branch. This allows the error message to be used in the error handler. The first example uses a GLOB pattern and captures the error message, while the second example captures any error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nCapture error\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB    AS   ${error}\n        Error Handler 1    ${error}\n    EXCEPT    AS    ${error}\n        Error Handler 2    ${error}\n    END\n```\n\n----------------------------------------\n\nTITLE: Automatic argument conversion from default values\nDESCRIPTION: This Python example demonstrates how Robot Framework infers argument types from default values when no explicit type is specified. The `count` argument will be treated as an integer because of the default value `-1`, and `case_insensitive` will be treated as a boolean.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: ELSE branch in Robot Framework TRY/EXCEPT\nDESCRIPTION: This example demonstrates the usage of the ELSE branch in a TRY/EXCEPT block. The ELSE branch is executed only if no error occurs in the TRY block.  It must be placed after the EXCEPT blocks.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nELSE branch\n    TRY\n        Some Keyword\n    EXCEPT    X\n        Log    Error 'X' occurred!\n    EXCEPT    Y\n        Log    Error 'Y' occurred!\n    ELSE\n        Log    No error occurred!\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Python Module with Arguments for Variable Files\nDESCRIPTION: This snippet illustrates a Python module that takes arguments to dynamically determine the variables to be returned. The `get_variables` function accepts an argument and returns different sets of variables based on its value. This allows for conditional variable loading in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nvariables1 = {'scalar': 'Scalar variable',\n                  'LIST__list': ['List','variable']}\nvariables2 = {'scalar' : 'Some other value',\n                  'LIST__list': ['Some','other','value'],\n                  'extra': 'variables1 does not have this at all'}\n\ndef get_variables(arg):\n    if arg == 'one':\n        return variables1\n    else:\n        return variables2\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution with IF/ELSE Robot Framework\nDESCRIPTION: This example demonstrates the use of IF/ELSE blocks in Robot Framework to conditionally execute keywords based on a variable's value. It checks if `${rc}` is greater than zero and executes `Some keyword` if true, otherwise executes `Another keyword`. This provides a simple way to implement branching logic within a test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    ${rc} > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Literal Type Hinting\nDESCRIPTION: Demonstrates the use of Python's `Literal` type hint to restrict argument values.  Robot Framework validates arguments against the specified literal values and performs conversion where possible.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Literal['x', 'y', 'z']):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Nested FOR and IF Loops in Robot Framework\nDESCRIPTION: This example showcases nested FOR and IF loops in Robot Framework. The outer loop iterates through rows, and the inner loop iterates through cells within each row. An IF condition checks if a cell's value is not equal to 'IGNORE', and if true, it processes the cell using `Process Cell` keyword. This demonstrates how to implement complex iterative and conditional logic.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting Keyword Tags with @keyword Decorator\nDESCRIPTION: This snippet demonstrates how to set tags for a Robot Framework keyword using the `@keyword` decorator.  The `login` and `another_example` functions are decorated with `@keyword(tags=['tag1', 'tag2'])` and `@keyword('Custom name', ['tags', 'here'])` respectively, assigning the specified tags to these keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(tags=['tag1', 'tag2'])\ndef login(username, password):\n    ...\n\n@keyword('Custom name', ['tags', 'here'])\ndef another_example():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Keyword Name with @keyword Decorator\nDESCRIPTION: This snippet shows how to set a custom name for a Robot Framework keyword using the `@keyword` decorator with an argument. The `login` function is decorated with `@keyword('Login via user panel')`, achieving the same result as setting the `robot_name` attribute directly. This is a more concise and readable way to define custom keyword names.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword('Login via user panel')\ndef login(username, password):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework GROUP Syntax with Templates\nDESCRIPTION: This demonstrates how the `GROUP` syntax can be used to group iterations when utilizing test templates in Robot Framework. It showcases grouping different sets of data for a single templated test.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary           String\nTest Template     Upper case should be\n\n*** Test Cases ***\nTemplate example\n    GROUP    ASCII characters\n        a    A\n        z    Z\n    END\n    GROUP    Latin-1 characters\n        ä    Ä\n        ß    SS\n    END\n    GROUP    Numbers\n        1    1\n        9    9\n    END\n\n*** Keywords ***\nUpper case should be\n    [Arguments]    ${char}    ${expected}\n    ${actual} =    Convert To Upper Case    ${char}\n    Should Be Equal    ${actual}    ${expected}\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution with ELSE IF Robot Framework\nDESCRIPTION: This example demonstrates the use of IF/ELSE IF/ELSE blocks in Robot Framework to conditionally execute keywords based on multiple conditions. It checks the value of `${rc}` and executes different keywords depending on whether it is positive, negative, zero, or something else.  The special `$rc` format is used to use the variable value itself, not its string representation, when conditions are evaluated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Positive keyword\n    ELSE IF    $rc < 0\n        Negative keyword\n    ELSE IF    $rc == 0\n        Zero keyword\n    ELSE\n        Fail    Unexpected rc: ${rc}\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Preprocessor Python\nDESCRIPTION: This Python snippet demonstrates how to create a custom preprocessor for Robot Framework data files. It replaces custom headers (e.g., `=== Test Cases ===`) with the standard Robot Framework headers (e.g., `*** Test Cases ***`) before parsing the data using `TestSuite.from_string`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.running import TestDefaults, TestSuite\n\nclass RobotPreprocessor:\n    extension = '.robot'\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        data = source.read_text()\n        for header in 'Settings', 'Variables', 'Test Cases', 'Keywords':\n            data = data.replace(f'=== {header} ===', f'*** {header} ***')\n        suite = TestSuite.from_string(data, defaults=defaults)\n        return suite.config(name=TestSuite.name_from_source(source), source=source)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Iteration with FOR Loops in Robot Framework\nDESCRIPTION: Demonstrates how to iterate dictionary items using FOR loops in Robot Framework when the values are `&{dict}` variables. Includes examples with multiple dictionaries and the `key=value` syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_4\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{dict}\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{first}    &{second}    one=more\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${item}    IN    &{dict}\n    Length Should Be    ${item}    2\n    Log    Key is '${item}[0]' and value is '${item}[1]'.\nEND\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${index}    ${key}    ${value}    IN ENUMERATE    &{dict}\n    Log    Key is '${key}' and value is '${value}' at index ${index}.\nEND\nFOR    ${item}    IN ENUMERATE    &{dict}\n    Length Should Be    ${item}    3\n    Log    Key is '${item}[1]' and value is '${item}[2]' at index ${item}[0].\nEND\n```\n\n----------------------------------------\n\nTITLE: Defining User Keywords with Mixed Arguments in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define user keywords that mix embedded arguments and normal arguments in Robot Framework. The `${animals}` argument is embedded within the keyword name, while `${count}` is a standard argument defined using `[Arguments]`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n   Example\n       Number of horses is    2\n       Number of dogs is      3\n\n   *** Keywords ***\n   Number of ${animals} is\n       [Arguments]    ${count}\n       Log to console    There are ${count} ${animals}.\n```\n\n----------------------------------------\n\nTITLE: Explicit Exact Match in Robot Framework\nDESCRIPTION: This snippet shows how to enforce an exact match for error messages using the 'type=literal' parameter. This is the default matching behavior, but it can be explicitly specified for clarity.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExplicit exact match\n    TRY\n        Some Keyword\n    EXCEPT    Error 13 occurred    type=literal\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with Union (New Way) - Python\nDESCRIPTION: This code snippet shows the new, more concise syntax for defining a union type for a function argument in Python 3.10 and Robot Framework 4.1.1 or newer, using the `|` operator.  It does not require any imports.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef example(arg: int | float):\n    ...\n```\n\n----------------------------------------\n\nTITLE: User Keyword with Embedded and Normal Arguments\nDESCRIPTION: This snippet shows how to define a user keyword in Robot Framework that combines both embedded arguments (e.g., `${animals}`) and normal arguments (e.g., `${count}`). It demonstrates the new capability in Robot Framework 6.1 to mix these argument types in user keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses is    2\n    Number of dogs is      3\n\n*** Keywords ***\nNumber of ${animals} is\n    [Arguments]    ${count}\n    Log to console    There are ${count} ${animals}.\n```\n\n----------------------------------------\n\nTITLE: Making Robot Files Executable\nDESCRIPTION: This example shows how to make a .robot file executable on UNIX-like systems by adding a shebang and execution permissions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n#!/usr/bin/env robot\n\n*** Test Cases ***\nExample\n    Log to console    Executing!\n```\n\n----------------------------------------\n\nTITLE: Multiple messages with one EXCEPT in Robot Framework\nDESCRIPTION: This example shows how to use multiple messages with a single EXCEPT branch. The EXCEPT branch is executed if any of the specified messages match the error message from the TRY block.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple messages with one EXCEPT\n    TRY\n        Some Keyword\n    EXCEPT    Error message    Another error    ${message}    # Match any of these.\n        Error handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Named-only arguments in User Keywords\nDESCRIPTION: These Robot Framework user keywords examples show how to use named-only arguments. The first example uses varargs and named arguments. The second example shows named arguments without varargs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWith Varargs\n    [Arguments]    @{varargs}    ${named}\n    Log Many    @{varargs}    ${named}\n```\n\nLANGUAGE: robotframework\nCODE:\n```\nWithout Varargs\n    [Arguments]    @{}    ${first}    ${second}=default\n    Log Many    ${first}    ${second}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Suite Name in Robot Framework\nDESCRIPTION: This Robot Framework snippet demonstrates how to set a custom name for a test suite using the `Name` setting in the `Settings` section. This overrides the default naming convention based on the file or directory name.  The custom name will be used in reports and logs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/CreatingTestSuites.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nName            Custom suite name\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Named-Only Arguments (Python 3)\nDESCRIPTION: This Python 3 code shows how to use keyword-only (named-only) arguments in Python libraries for Robot Framework. This allows you to enforce that certain arguments must be passed by name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework (6.0.1) using the pip package installer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==6.0.1\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Arguments in Robot Framework\nDESCRIPTION: This snippet shows how to pass arguments to variable files in Robot Framework. The `Variables` setting is used to import a Python module (`example.py`) and pass arguments to its `get_variables` function.  The first example converts '42' to an integer. The second example uses named argument syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nVariables    example.py    42              # Converted to integer.\nVariables    example.py    second=value    # Named argument syntax.\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Dictionary Variable Creation\nDESCRIPTION: Demonstrates how to create a dictionary variable in Robot Framework using the `&` prefix and assigning key-value pairs to it. This creates a dictionary with the specified items.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\nDictionary\n        # Creates a dictionary with two items.\n        VAR    &{dict}    key=value    second=item\n```\n\n----------------------------------------\n\nTITLE: User keyword with named-only arguments (Without Varargs)\nDESCRIPTION: This Robot Framework snippet showcases the usage of named-only arguments in user-defined keywords, excluding variable arguments.  `${first}` is the first positional argument, and `${second}` is a named argument with a default value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWithout Varargs\n    [Arguments]    @{}    ${first}    ${second}=default\n    Log Many    ${first}    ${second}\n```\n\n----------------------------------------\n\nTITLE: Stringified Type Hints in Python\nDESCRIPTION: Python code demonstrating the use of stringified type hints like `'list[int]'` and `'int | float'` for argument conversion. This is useful for compatibility with older Python versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Robot Framework Library Module\nDESCRIPTION: This code snippet demonstrates a simple Robot Framework library implemented as a Python module. It defines two functions, `hello` and `do_nothing`, which can be used as keywords in Robot Framework test cases. The `hello` function takes a name as input and prints a greeting.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef hello(name):\n    print(f\"Hello, {name}!\")\n\ndef do_nothing():\n    pass\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax Example - Robot Framework\nDESCRIPTION: This code demonstrates the new `FOR` loop syntax introduced in Robot Framework 3.1. This syntax is the current standard for writing loops in Robot Framework. The example iterates over a list of animals and executes keywords with each animal.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_9\n\nLANGUAGE: RobotFramework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions to Match Errors in Robot Framework\nDESCRIPTION: This example shows how to use regular expressions to match error messages.  The `type=regexp` parameter specifies that the messages should be treated as regular expressions. Because the backslash is an escape character, it needs to be escaped with another backslash when used in regular expressions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nRegular expression\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: .*    type=regexp\n        Error Handler 1\n    EXCEPT    [Ee]rror \\\\d+ occurred    type=regexp    # Backslash needs to be escaped.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Merging Re-executed Tests\nDESCRIPTION: Shows how to re-execute failing tests and merge the results back into the original output. This example first executes all tests, then re-executes the failing tests using `--rerunfailed`, and finally merges the re-execution results into the original output using `--merge`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nrobot --output original.xml tests                          # first execute all tests\nrobot --rerunfailed original.xml --output rerun.xml tests  # then re-execute failing\nrebot --merge original.xml rerun.xml                       # finally merge results\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries Using Library Setting\nDESCRIPTION: This snippet demonstrates how to import test libraries in the Settings section using the Library setting. The library name or path is case- and space-sensitive. Arguments can be passed to the library during import.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    OperatingSystem\nLibrary    path/to/MyLibrary.py\nLibrary    my.package.TestLibrary\nLibrary    LibraryAcceptingArguments    arg1    arg2\nLibrary    ${LIBRARY}\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE with FOR Loops\nDESCRIPTION: This snippet demonstrates the usage of BREAK and CONTINUE statements within a FOR loop in Robot Framework, often in combination with inline IF statements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        FOR    ${x}    IN RANGE    1000\n            IF    ${x} > 10    BREAK\n            Log    Executed only when ${x} < 11\n            IF    ${x} % 2 == 0    CONTINUE\n            Log    Executed only when ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: RETURN Statement Examples Robot Framework\nDESCRIPTION: These examples demonstrate different uses of the `RETURN` statement: returning a value at the end of a keyword, returning conditionally based on a condition, and returning early to prevent further execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nReturn at the end\n    Some Keyword\n    ${result} =    Another Keyword\n    RETURN    ${result}\n\nReturn conditionally\n    IF    ${condition}\n        RETURN    Something\n    ELSE\n        RETURN    Something else\n    END\n\nEarly return\n    IF    ${not applicable}    RETURN\n    Some Keyword\n    Another Keyword\n```\n\n----------------------------------------\n\nTITLE: TRY/EXCEPT/ELSE/FINALLY Block Robot Framework\nDESCRIPTION: This example demonstrates how to use TRY, EXCEPT, ELSE and FINALLY blocks in a Robot Framework test case for exception handling. The TRY block executes code that may raise an exception. The EXCEPT block catches any exceptions that occur within the TRY block. The ELSE block is executed only if no exception occurred in the TRY block. The FINALLY block is always executed, regardless of whether an exception occurred or not. These blocks facilitate robust error handling and resource cleanup.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    TRY/EXCEPT/ELSE/FINALLY\n        TRY\n            Some keyword\n        EXCEPT\n            Log    Error occurred!\n        ELSE\n            Log    No error occurred.\n        FINALLY\n            Log    Always executed.\n        END\n\n    TRY/FINALLY\n        Open Connection\n        TRY\n            Use Connection\n        FINALLY\n            Close Connection\n        END\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with the robot:skip-on-failure Tag\nDESCRIPTION: This example shows how to use the `robot:skip-on-failure` tag to mark a test case as skipped if it fails.  Instead of the test failing, it will be marked as skipped. This approach allows for granular control over which tests are automatically skipped on failure within the test suite itself.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    [Tags]    robot:skip-on-failure\n    Fail      this test will be marked as skipped instead of failed\n```\n\n----------------------------------------\n\nTITLE: Logging to Console - Python\nDESCRIPTION: This snippet shows how to log messages to both the log file and the console using the `CONSOLE` log level, available from Robot Framework 6.1 onwards. This is achieved by prefixing the log message with `*CONSOLE*`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_83\n\nLANGUAGE: python\nCODE:\n```\ndef my_keyword(arg):\n```\n\n----------------------------------------\n\nTITLE: Iterating with FOR IN ZIP in Robot Framework\nDESCRIPTION: This snippet illustrates how to use the `FOR IN ZIP` loop to iterate over two lists simultaneously, logging the corresponding elements.  It uses the previously defined animal lists (@{ANIMALS} and @{ELÄIMET}) to print each animal name in English and Finnish.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    FOR    ${en}    ${fi}    IN ZIP    ${ANIMALS}    ${ELÄIMET}\n        Log    ${en} is ${fi} in Finnish\n    END\n```\n\n----------------------------------------\n\nTITLE: Capturing Error Message into a Variable in Robot Framework\nDESCRIPTION: This snippet shows how to capture the error message into a variable using `AS ${var}`. This is useful when using pattern matching or catching any error.  The variable `${error}` will contain the error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nCapture error\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB    AS   ${error}\n        Error Handler 1    ${error}\n    EXCEPT    AS    ${error}\n        Error Handler 2    ${error}\n    END\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converter in Robot Framework - Python\nDESCRIPTION: This snippet registers the `parse_fi_date` function as a custom converter for the `date` type in Robot Framework. This allows Robot Framework keywords to automatically convert string arguments in 'dd.mm.yyyy' format to `datetime.date` objects.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n```\n\n----------------------------------------\n\nTITLE: Nested FOR and IF Structures in Robot Framework\nDESCRIPTION: This example shows how to nest FOR loops and IF statements in Robot Framework. It iterates through a list of rows and then through cells in each row. If a cell's value is not 'IGNORE', the `Process Cell` keyword is executed with the cell's value. This demonstrates the ability to create complex control flow logic by nesting structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Removing Tags Using Negative Syntax\nDESCRIPTION: Shows how to remove a tag that has been globally set using the `-tag` syntax within a test case's `[Tags]` setting. This allows for selectively removing tags from individual tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Dictionary Variable Definition - Robot Framework\nDESCRIPTION: Defines a dictionary variable in Robot Framework using the new `&{DICT}` syntax. This example shows how to assign key-value pairs to a dictionary variable within the variable table.  It creates a dictionary with string and numerical values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n&{DICT}    key=value    second=2    third=${3}\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework 3.1 beta 1 (specific version)\nDESCRIPTION: This command installs the specified version of Robot Framework using pip. This ensures that a consistent version of robot framework will be used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.1b1\n```\n\n----------------------------------------\n\nTITLE: Basic TRY/EXCEPT block in Robot Framework\nDESCRIPTION: This example shows a basic TRY/EXCEPT block in Robot Framework. If 'Some Keyword' passes, the EXCEPT block is skipped. If it fails with the message 'Error message', the 'Error Handler Keyword' is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nFirst example\n    TRY\n        Some Keyword\n    EXCEPT    Error message\n        Error Handler Keyword\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Reading Arguments from Standard Input\nDESCRIPTION: This example shows how to read arguments from the standard input stream using the special argument file name `STDIN`. This is useful when generating arguments with a script.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngenerate_arguments.sh | robot --argumentfile STDIN\ngenerate_arguments.sh | robot --name Example --argumentfile STDIN tests.robot\n```\n\n----------------------------------------\n\nTITLE: Match start of error message in Robot Framework EXCEPT\nDESCRIPTION: This example shows how to use the STARTS: prefix to match the beginning of error messages in EXCEPT branches.  Only the beginning of the error message needs to match.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch start\n    TRY\n        Some Keyword\n    EXCEPT    STARTS: ValueError:    STARTS: ${beginning}\n        Error Handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Combining --suite and --test options\nDESCRIPTION: This illustrates how to combine the `--suite` and `--test` options to select specific tests within specific suites.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_6\n\nLANGUAGE: Robot Framework\nCODE:\n```\n--suite mysuite --test mytest    # Match test 'mytest' if its inside suite 'mysuite'.\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework with pip\nDESCRIPTION: This command upgrades Robot Framework to the latest available version using pip, the Python package installer. It assumes pip is already installed on the system.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Basic IF Statement in Robot Framework\nDESCRIPTION: This example demonstrates the basic IF statement in Robot Framework. If the condition `${rc} > 0` is true, the keywords `Some keyword` and `Another keyword` will be executed. The `IF` and `END` markers define the conditional block.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n   IF    ${rc} > 0\n       Some keyword\n       Another keyword\n   END\n```\n\n----------------------------------------\n\nTITLE: Custom Types and Converters for Different Date Formats - Python\nDESCRIPTION: This example demonstrates how to create custom date types (FiDate and UsDate) and corresponding converters to handle different date formats.  It also shows how to register these converters using the `@library` decorator and use them in Robot Framework keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case with Named Arguments\nDESCRIPTION: This Robot Framework test case calls the `Sort Words` keyword, demonstrating how named arguments can be used. In the second example, `case_sensitive` is explicitly set to `True`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n Example\n     Sort Words    Foo    bar    baZ\n     Sort Words    Foo    bar    baZ    case_sensitive=True\n```\n\n----------------------------------------\n\nTITLE: JSON Variable File Example JSON\nDESCRIPTION: This JSON snippet shows an example of a JSON variable file used in Robot Framework. It defines string and integer variables that can be imported and used in Robot Framework test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"STRING\": \"Hello, world!\",\n    \"INTEGER\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Using ELSE in TRY/EXCEPT in Robot Framework\nDESCRIPTION: This code demonstrates how to use an ELSE branch in a TRY/EXCEPT block. The ELSE branch is executed if no error occurs in the TRY block. The first example uses specific EXCEPT branches, and the second handles both errors and no errors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nELSE branch\n    TRY\n        Some Keyword\n    EXCEPT    X\n        Log    Error 'X' occurred!\n    EXCEPT    Y\n        Log    Error 'Y' occurred!\n    ELSE\n        Log    No error occurred!\n    END\n    Keyword Outside\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nHandle everything\n    TRY\n        Some Keyword\n    EXCEPT    AS    ${err}\n        Log    Error occurred: ${err}\n    ELSE\n        Log    No error occurred!\n    END\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Conversion in Python for Robot Framework\nDESCRIPTION: Illustrates how to register custom argument converters in Python for Robot Framework libraries, allowing to override default converters and to add support for custom types. The example shows how to parse dates in the 'dd.mm.yyyy' format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n\n\n# Register converter function for the specified type.\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\n# Keyword using custom converter. Converter is got based on argument type.\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Multiple EXCEPT branches in Robot Framework\nDESCRIPTION: This example demonstrates multiple EXCEPT branches. The first matching error message will execute the corresponding error handler. ${message} represents a variable containing the error message to match against.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple EXCEPT branches\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first.\n        Error Handler 1\n    EXCEPT    Another error    # Try this if above did not match.\n        Error Handler 2\n    EXCEPT    ${message}       # Last match attempt, this time using a variable.\n        Error Handler 3\n    END\n\nMultiple messages with one EXCEPT\n    TRY\n        Some Keyword\n    EXCEPT    Error message    Another error    ${message}    # Match any of these.\n        Error handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Keyword Discovery with @library (Python)\nDESCRIPTION: This snippet demonstrates how to enable automatic keyword discovery using the `@library` decorator with the `auto_keywords` argument set to `True`.  Requires `robot.api.deco`.  The class `Example` represents the library.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', auto_keywords=True)\nclass Example:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework IF/ELSE Example\nDESCRIPTION: This snippet demonstrates the basic usage of IF/ELSE statements in Robot Framework. It evaluates a condition (`${rc} > 0`) and executes different keywords based on the result. If the condition is true, `Some keyword` is executed; otherwise, `Another keyword` is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    ${rc} > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: List and Dictionary Variable Creation with VAR in Robot Framework\nDESCRIPTION: Illustrates the creation of `@{list}` and `&{dict}` variables using the `VAR` syntax in Robot Framework. Demonstrates defining list variables with multiple items and dictionary variables with key-value pairs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nList\n    # Creates a list with three items.\n    VAR    @{list}    a    b    c\n\nDictionary\n    # Creates a dict with two items.\n    VAR    &{dict}    key=value    second=item\n```\n\n----------------------------------------\n\nTITLE: Robot Framework VAR Syntax Example\nDESCRIPTION: This Robot Framework code demonstrates the usage of the new VAR syntax for creating local, suite, test, and global scoped variables dynamically during execution. It creates a local variable `${local}` and a suite-scoped variable `${suite}` and validates their values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with a value `value`.\n    VAR    ${local}    value\n\n    # Create a variable that is available throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n    Should Be Equal    ${suite}    value\n\nExample continued\n    # Suite level variables are seen also by subsequent tests.\n    Should Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Keyword Name using robot_name Attribute\nDESCRIPTION: This snippet demonstrates how to set a custom name for a keyword using the `robot_name` attribute. The `login` function's `robot_name` attribute is set to 'Login via user panel', allowing it to be called with that name in Robot Framework test cases. This allows keywords to have more descriptive or user-friendly names.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef login(username, password):\n    ...\n\nlogin.robot_name = 'Login via user panel'\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Conditional Variable Assignment with IF/ELSE\nDESCRIPTION: This snippet demonstrates conditional variable assignment using IF/ELSE structures in Robot Framework. It shows both a normal IF/ELSE block and an inline IF/ELSE statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\nNormal IF\n        IF    1 > 0\n            VAR    ${x}    true value\n        ELSE\n            VAR    ${x}    false value\n        END\n\n    Inline IF\n        IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Updated List/Dictionary Item Access\nDESCRIPTION: This example illustrates the recommended syntax to access elements within lists and dictionaries using a unified `${var}[item]` approach, irrespective of whether the variable refers to a list or a dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n${var}[item]\n${var}[nested][item]\n```\n\n----------------------------------------\n\nTITLE: Executing Command and Assertion - Robot Framework\nDESCRIPTION: This snippet shows a Robot Framework test case that executes a command using the 'Execute Command' keyword and verifies the output with 'Should Be Equal'. It counts the number of '.txt' files and asserts it equals 42.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n| *** Test Cases *** |                 |                 |                      |\n| Escaping Pipe      | ${file count} = | Execute Command | ls -1 *.txt \\| wc -l |\n|                    | Should Be Equal | ${file count}   | 42                   |\n```\n\n----------------------------------------\n\nTITLE: Robot Framework New FOR Loop Syntax Example\nDESCRIPTION: This snippet demonstrates the new FOR loop syntax that is used in Robot Framework 4.0 and later versions. It's a more readable and structured way to define loops.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Enabling Continue-on-Failure with Tags\nDESCRIPTION: This example shows how to use the `robot:continue-on-failure` tag to make all keywords within a test case or user keyword continuable.  Any failures will be treated as continuable failures, and execution will continue.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nTest 1\n    Run Keyword and Continue on Failure    Should be Equal    1    2\n    User Keyword 1\n\nTest 2\n    [Tags]    robot:continue-on-failure\n    Should be Equal    1    2\n    User Keyword 2\n\n*** Keywords ***\nUser Keyword 1\n    Run Keyword and Continue on Failure    Should be Equal    3    4\n    Log    This is executed\n\nUser Keyword 2\n    [Tags]    robot:continue-on-failure\n    Should be Equal    3    4\n    Log    This is executed\n```\n\n----------------------------------------\n\nTITLE: Converter Accepting Union of Types\nDESCRIPTION: This code defines a converter that accepts either a string or an integer as input using the `Union` type. It converts integers representing seconds since the Unix epoch to dates and parses strings in the 'dd.mm.yyyy' format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Using BREAK and CONTINUE in a WHILE Loop\nDESCRIPTION: This snippet demonstrates the use of BREAK and CONTINUE statements within a WHILE loop in Robot Framework. It shows how to exit the loop prematurely or skip to the next iteration based on conditions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n    *** Test Cases ***\n    BREAK and CONTINUE\n        WHILE    True\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 0\n                Log    We are done!\n                BREAK\n            END\n            IF    ${x} % 2 == 0    CONTINUE    # New inline IF.\n            Log    Only executed if ${x} is odd.\n        END\n\n    RETURN\n        Keyword with WHILE using RETURN\n\n    *** Keywords ***\n    Keyword with WHILE using RETURN\n        WHILE    True\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 5    RETURN\n        END\n        Fail    This is not executed\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE with Assignment Robot Framework\nDESCRIPTION: Shows how to use inline IF statements for variable assignments. The variable to be assigned must be placed before the IF keyword. If no branch is executed, the variable gets the value `None`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_22\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE with assignment\n        ${var} =    IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE with assignment having multiple variables\n        ${host}    ${port} =    IF    $production    Get Production Config    ELSE    Get Testing Config\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax in Robot Framework\nDESCRIPTION: This snippet showcases the new FOR loop syntax introduced in Robot Framework 3.1, which uses the `FOR` keyword, standard indentation, and the `END` keyword to define the loop body. This syntax is the only supported syntax in Robot Framework 4.0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_7\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Multiple EXCEPT Branches in Robot Framework\nDESCRIPTION: This example shows how to use multiple EXCEPT branches to handle different error messages.  Each EXCEPT branch is evaluated in order. If `Some Keyword` fails with a message that matches one of the EXCEPT branches, the corresponding error handler is executed.  `${message}` must be defined as a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple EXCEPT branches\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first.\n        Error Handler 1\n    EXCEPT    Another error    # Try this if above did not match.\n        Error Handler 2\n    EXCEPT    ${message}       # Last match attempt, this time using a variable.\n        Error Handler 3\n    END\n```\n\n----------------------------------------\n\nTITLE: Normal IF Example Robot Framework\nDESCRIPTION: This example shows a normal IF statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nNormal IF\n    IF    $condition1\n        Keyword    argument\n    END\n    IF    $condition2\n        RETURN\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Type Hinting with Literal\nDESCRIPTION: This Python code demonstrates the use of `Literal` type hints to restrict the allowed values for a function argument. Robot Framework validates and converts arguments based on the `Literal` type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Literal['x', 'y', 'z']):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying custom language file in Robot Framework\nDESCRIPTION: This snippet illustrates how to activate custom language files in Robot Framework using the `--language` option. The value can be a path to the file or, if in the module search path, the module name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --language Custom.py tests.robot\nrobot --language MyLang tests.robot\n```\n\n----------------------------------------\n\nTITLE: Implementing Listener as a Module (v3) in Python\nDESCRIPTION: This snippet demonstrates a basic listener implemented as a Python module using the listener API version 3. It includes the `start_suite` and `end_test` methods, which print messages when a suite starts and a test ends. This listener is designed to receive notifications about suite and test events during execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef start_suite(data, result):\n    print(f\"Suite '{data.name}' starting.\")\n\ndef end_test(data, result):\n    print(f\"Test '{result.name}' ended with status {result.status}.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest version of Robot Framework using pip. The --pre flag includes pre-release versions, and --upgrade ensures that an existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.3.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with @keyword Decorator\nDESCRIPTION: These Python code snippets demonstrates how to use the `@keyword` decorator to explicitly specify argument types for Robot Framework keywords, compatible with both Python 2 and Python 3.  The decorator can map argument names to types using a dictionary, or map arguments to types based on position using a list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with a Static Python Class\nDESCRIPTION: This snippet demonstrates defining variables in a Python class. Variables are created as class and instance attributes. Attributes starting with an underscore or callable attributes are ignored by Robot Framework to prevent methods from being treated as variables. The defined variables are `${VARIABLE}`, `@{LIST}`, and `${ANOTHER VARIABLE}`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass StaticExample:\n    variable = 'value'\n    LIST__list = [1, 2, 3]\n    _not_variable = 'starts with an underscore'\n\n    def __init__(self):\n        self.another_variable = 'another value'\n```\n\n----------------------------------------\n\nTITLE: Calling the Keyword with Multiple Types\nDESCRIPTION: This snippet demonstrates how to call a keyword that accepts either an `UnknownType` or an `int`. The example shows that the integer conversion is now attempted even if `UnknownType` is not recognized, a change from previous versions of Robot Framework. This can lead to different behavior if a string value is passed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nExample    42\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Listeners\nDESCRIPTION: This code demonstrates how to register multiple listeners for a single Robot Framework library. The `ROBOT_LIBRARY_LISTENER` attribute is assigned a list of listener instances.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom listeners import Listener1, Listener2, Listener3\n\n\nclass LibraryWithMultipleListeners:\n    ROBOT_LIBRARY_LISTENER = [Listener1(), Listener2(), Listener3()]\n\n    def example_keyword(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Test Case with potential false positives using FOR IN ZIP Loop\nDESCRIPTION: This Robot Framework snippet illustrates a test case that uses a `FOR IN ZIP` loop to validate items returned by `Get something`. Due to the default behavior of `FOR IN ZIP`, this test case can produce false positives if `Get something` returns fewer items than expected, but the initial items match the expected values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        Validate something    expected 1    expected 2    expected 3\n\n    *** Keywords ****\n    Validate something\n        [Arguments]    @{expected}\n        @{actual} =    Get something\n        FOR    ${act}    ${exp}    IN ZIP    ${actual}    ${expected}\n            Validate one thing    ${act}    ${exp}\n        END\n```\n\n----------------------------------------\n\nTITLE: Example keyword with type annotations (Python 3)\nDESCRIPTION: This Python 3 code snippet shows how to use function annotations to specify argument types for Robot Framework keywords.  This allows Robot Framework to automatically convert arguments to the correct type. The arguments `count` and `case_insensitive` will be converted to `int` and `bool` respectively.  Requires Python 3 or later.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE in Robot Framework Loops\nDESCRIPTION: Demonstrates the use of BREAK and CONTINUE statements within FOR loops in Robot Framework, often combined with inline IF statements, to control the flow of the loop based on certain conditions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        FOR    ${x}    IN RANGE    1000\n            IF    ${x} > 10    BREAK\n            Log    Executed only when ${x} < 11\n            IF    ${x} % 2 == 0    CONTINUE\n            Log    Executed only when ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: Using LONGEST Mode with Custom Fill Value\nDESCRIPTION: This snippet shows how to use the `fill` option with the `LONGEST` mode in `FOR IN ZIP` loops to specify a custom value to fill in missing values in shorter lists. In this example, missing values are filled with `-`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_24\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nLONGEST mode with custom fill value\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `-`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST    fill=-\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Syntax Examples in Robot Framework\nDESCRIPTION: These examples illustrate using Python syntax with Robot Framework's expression evaluation. They demonstrate string comparisons and substring checks using `${{}}` for inline evaluation. The variables `${VAR}` is first defined and then used in the test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${VAR}           123\n\n*** Test Cases ***\nPython syntax\n    Should Be True       ${{'${VAR}' == '123'}}\n    Should Be True       ${{'${VAR}'.startswith('x') or '${VAR}' in '012345'}}\n```\n\n----------------------------------------\n\nTITLE: Converting paths to strings in Robot Framework listeners\nDESCRIPTION: This snippet demonstrates how to convert `pathlib.Path` objects to strings when working with result file-related listener version 3 methods in Robot Framework. It shows how to use the `str()` function to perform the conversion.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nstr(path)\n```\n\n----------------------------------------\n\nTITLE: Type Conversion with Embedded Arguments in Python\nDESCRIPTION: This snippet shows how automatic argument conversion works with embedded arguments using type hints. The `quantity` argument will be automatically converted to an integer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Add ${quantity} copies of ${item} to cart')\ndef add_copies_to_cart(quantity: int, item: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Keyword with Embedded and Normal Arguments in Robot Framework\nDESCRIPTION: This Robot Framework code demonstrates how to use a keyword that accepts both embedded and normal arguments. The example shows different ways to pass the 'count' argument: either positionally or using named argument syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses should be    2\n    Number of horses should be    count=2\n    Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Conditional Variable Creation with VAR and IF/ELSE in Robot Framework\nDESCRIPTION: Demonstrates how to conditionally create variables using the `VAR` syntax in conjunction with IF/ELSE structures in Robot Framework. Includes examples of both normal IF/ELSE blocks and inline IF statements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nNormal IF\n    IF    1 > 0\n        VAR    ${x}    true value\n    ELSE\n        VAR    ${x}    false value\n    END\n\nInline IF\n    IF    1 > 0    VAR    ${x}    true value    ELSE    VAR    ${x}    false value\n```\n\n----------------------------------------\n\nTITLE: Setting Default Visible Log Level - Robot Framework\nDESCRIPTION: This example demonstrates how to set the default visible log level in Robot Framework's log file using the `--loglevel` option.  The first log level specifies the level used during test execution, and the second specifies the default visible level in the log file. Messages below the visible level can be filtered out.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--loglevel DEBUG:INFO\n```\n\n----------------------------------------\n\nTITLE: Selecting suites by name with --suite\nDESCRIPTION: Shows how to select test suites for execution using the `--suite` option, which allows matching suites by name. The option can be used multiple times, and names can be prefixed with the parent suite name to pinpoint suites more precisely.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_5\n\nLANGUAGE: Robot Framework\nCODE:\n```\n--suite Example                  # Match only suites with name 'Example'.\n--suite example*                 # Match suites starting with 'example'.\n--suite first --suite second     # Match suites with name 'first' or 'second'.\n--suite root.child               # Match suite 'child' in root suite 'root'.\n--suite *.parent.child           # Match suite 'child' with parent 'parent' anywhere.\n```\n\n----------------------------------------\n\nTITLE: More Examples of Asynchronous Functionality in Python\nDESCRIPTION: This snippet provides more examples of asynchronous functionality, showcasing the use of `asyncio.gather`, `asyncio.create_task`, and `asyncio.TaskGroup` (Python 3.10+).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom robot.api.deco import keyword\n\n\nasync def task_async():\n    await asyncio.sleep(5)\n\n@keyword\nasync def examples():\n    tasks = [task_async() for _ in range(10)]\n    results = await asyncio.gather(*tasks)\n\n    background_task = asyncio.create_task(task_async())\n    await background_task\n\n    # If running with Python 3.10 or higher\n    async with asyncio.TaskGroup() as tg:\n        task1 = tg.create_task(task_async())\n        task2 = tg.create_task(task_async())\n```\n\n----------------------------------------\n\nTITLE: IntEnum Type Conversion in Robot Framework\nDESCRIPTION: This example shows how Robot Framework converts string or integer values to an IntEnum.  It demonstrates defining an IntEnum and using it as a type hint for a keyword argument. The snippet defines an IntEnum called `PowerState` with members `OFF` and `ON`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\nclass PowerState(IntEnum):\n    \"\"\"Turn system ON or OFF.\"\"\"\n    OFF = 0\n    ON = 1\n\ndef kw(arg: PowerState):\n    ...\n\n# Examples:\n# | `OFF` (PowerState.OFF)\n# | `1` (PowerState.ON)\n```\n\n----------------------------------------\n\nTITLE: Get From Dictionary Keyword Default Value\nDESCRIPTION: This enhancement allows specifying a default value for the `Get From Dictionary` keyword. This enables retrieving a default value if the specified key does not exist in the dictionary, preventing errors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Custom Converter for Finnish Date Format (dd.mm.yyyy) - Python\nDESCRIPTION: This code defines a custom converter function `parse_fi_date` that parses a date string in the format 'dd.mm.yyyy' and returns a `datetime.date` object. It includes input validation using regular expressions to ensure the date is in the expected format. If the input is invalid, it raises a `ValueError` with a helpful message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n```\n\n----------------------------------------\n\nTITLE: RETURN Statement Robot Framework\nDESCRIPTION: These examples demonstrate the usage of the RETURN statement in Robot Framework keywords. The RETURN statement allows for returning values at the end of a keyword execution or prematurely based on a condition. It replaces the old '[Return]' setting and 'Return From Keyword' keyword, providing a more uniform way to return from user keywords. The Log keyword is used for logging messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Return at the end\n        Some Keyword\n        ${result} =    Another Keyword\n        RETURN    ${result}\n\n    Return conditionally\n        IF    ${condition}\n            RETURN    Something\n        ELSE\n            RETURN    Something else\n        END\n\n    Early return\n        IF    ${not applicable}    RETURN\n        Some Keyword\n        Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Functions as Keywords (Python)\nDESCRIPTION: This snippet shows how to define asynchronous functions in Python using `async def` and use them as keywords in Robot Framework. It imports `gather` and `sleep` from `asyncio` and defines two async functions: `gather_something` and `async_sleep`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncio import gather, sleep\n\nasync def gather_something():\n    print('start')\n    await gather(something(1), something(2), something(3))\n    print('done')\n\nasync def async_sleep(time: int):\n    await sleep(time)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keyword Name in Robot Framework Test Case\nDESCRIPTION: This snippet demonstrates how to use a keyword with a custom name in a Robot Framework test case. The `Login Via User Panel` keyword is called with the `username` and `password` variables as arguments. This reflects the custom name set in the corresponding Python code.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMy Test\n    Login Via User Panel    ${username}    ${password}\n```\n\n----------------------------------------\n\nTITLE: Basic IF statement in Robot Framework\nDESCRIPTION: This example demonstrates the basic syntax for using IF statements in Robot Framework. The code shows how to define a test case with an IF condition that executes certain keywords if the condition is true.  `${rc}` is a variable that is compared to 0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n   IF    ${rc} > 0\n       Some keyword\n       Another keyword\n   END\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.0 with pip\nDESCRIPTION: These commands show how to install the latest version of Robot Framework using pip, or a specific version (5.0 in this case). The first command upgrades the installation if Robot Framework is already installed. The second command installs a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: robotframework\nCODE:\n```\npip install robotframework==5.0\n```\n\n----------------------------------------\n\nTITLE: Typing with tuple using @keyword decorator - Python\nDESCRIPTION: Demonstrates specifying argument types as a tuple with the `@keyword` decorator. This approach is less common with annotations but works with the decorator. It explicitly defines the allowed types for each argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(types={'length': (int, float), 'padding': (int, str, None)})\ndef example(length, padding=None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.1 Beta 1 with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip, upgrading if necessary. It is used for testing and development of new features.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b1.rst#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE in WHILE Loop Robot Framework\nDESCRIPTION: Illustrates the use of BREAK and CONTINUE statements within a WHILE loop in Robot Framework. BREAK exits the loop entirely, while CONTINUE skips the current iteration and proceeds to the next. These statements are often used with inline IF conditions for conditional loop control.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n*** Test Cases ***\n    BREAK and CONTINUE\n        WHILE    True\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 0\n                Log    We are done!\n                BREAK\n            END\n            IF    ${x} % 2 == 0    CONTINUE    # New inline IF.\n            Log    Only executed if ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: Listener v3: Library Keyword Information\nDESCRIPTION: This Python code snippet shows how to create a Robot Framework listener version 3 that retrieves and prints information about executed library keywords, including the library name, source, line number, scope, and instance. It requires importing `KeywordData`, `LibraryKeyword`, and `KeywordResult` from `robot.running` and `robot.result`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: Marking Keyword Methods with Decorator in Robot Framework (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `robot.api.deco.keyword` decorator to mark methods that should be exposed as keywords in a dynamic library. This simplifies the implementation of the `get_keyword_names` method by allowing filtering based on the presence of the `robot_name` attribute. It shows how to create the custom `robot_name` attribute on the decorated method.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\nclass DynamicExample:\n\n    def get_keyword_names(self):\n        # Get all attributes and their values from the library.\n        attributes = [(name, getattr(self, name)) for name in dir(self)]\n        # Filter out attributes that do not have 'robot_name' set.\n        keywords = [(name, value) for name, value in attributes\n                    if hasattr(value, 'robot_name')]\n        # Return value of 'robot_name', if given, or the original 'name'.\n        return [value.robot_name or name for name, value in keywords]\n\n    def helper_method(self):\n        ...\n\n    @keyword\n    def keyword_method(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case with Skip Tag\nDESCRIPTION: This example demonstrates how to use the `robot:skip` tag to skip a test case. The tag can be set directly or via a variable.  If `robot:skip` is present in the test's tags, the test will be skipped during execution.  The Log keyword will not be executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${SKIP}           robot:skip\n\n*** Test Cases ***\nLiteral\n   [Documentation]    Unconditionally skipped.\n   [Tags]    robot:skip\n   Log    This is not executed\n\nAs variable\n   [Documentation]    Skipped unless ${SKIP} is set to a different value.\n   [Tags]    ${SKIP}\n   Log    This is not executed by default\n```\n\n----------------------------------------\n\nTITLE: Catching specific errors before any error in Robot Framework\nDESCRIPTION: This example shows how to handle specific errors with named EXCEPT blocks, and then handle any other errors with a final, unnamed EXCEPT block. The unnamed block must come last.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any after testing more specific errors\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first\n        Error Handler 1\n    EXCEPT                     # Match any that did not match the above.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework ELSE IF Example\nDESCRIPTION: This snippet showcases the use of ELSE IF branches in Robot Framework. Different keywords are executed based on whether `${rc}` is positive, negative, zero, or something else. The example demonstrates the use of `$rc` to evaluate the variable's value directly and includes an ELSE branch to handle unexpected values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Positive keyword\n    ELSE IF    $rc < 0\n        Negative keyword\n    ELSE IF    $rc == 0\n        Zero keyword\n    ELSE\n        Fail    Unexpected rc: ${rc}\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Version Check (Windows)\nDESCRIPTION: This example shows how to check the Robot Framework version using the `--version` option in a Windows environment. It displays the Rebot version, Python version, and platform type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nC:\\>rebot --version\nRebot 6.1.1 (Python 3.11.0 on win32)\n```\n\n----------------------------------------\n\nTITLE: List and Dictionary Expansion with Item Access - Robot Framework\nDESCRIPTION: This snippet demonstrates how to use list and dictionary expansion with item access in Robot Framework. It shows how to iterate over a list obtained by accessing an item within a dictionary variable. Prior to this change, item access needed to be done separately.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a2.rst#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Typing with native union syntax (type1 | type2) - Python\nDESCRIPTION: Shows the native Python union syntax (using the `|` operator) for specifying multiple argument types, available in Python 3.10 and newer. Robot Framework will attempt to convert the argument to each of the specified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ndef example(length: int | float, padding: int | str | None = None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax\nDESCRIPTION: Demonstrates the new FOR loop syntax introduced in Robot Framework 3.1 and the recommended way to write loops in Robot Framework 4.0. This syntax uses `FOR`, `END`, and indentation to define the loop structure.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Resource File\nDESCRIPTION: This snippet shows how to import a JSON resource file in Robot Framework.  The resource file can have either `.json` or `.rsrc` extension.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nResource         example.rsrc\n```\n\n----------------------------------------\n\nTITLE: Stateful External Parser Implementation - Python\nDESCRIPTION: This snippet presents a more advanced external parser implemented as a class. It reads the content of the source file line by line, creates a test for each line, and adds a 'Log' keyword to each test. It uses the `Path` object for file handling and takes the extension as an initialization argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\n\n\nclass ExampleParser:\n\n    def __init__(self, extension: str):\n        self.extension = extension\n\n    def parse(self, source: Path) -> TestSuite:\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line)\n            test.body.create_keyword(name='Log', args=['Hello!'])\n        return suite\n```\n\n----------------------------------------\n\nTITLE: Creating Links from Tag Names - Robot Framework\nDESCRIPTION: This example illustrates how to add external links to the `Statistics by Tag` table using the `--tagstatlink` option. The arguments are given in the format `tag:link:name`, where `tag` specifies the tag(s), `link` is the URL, and `name` is the link's name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n--tagstatlink mytag:http://www.google.com:Google\n--tagstatlink example-bug-*:http://example.com\n--tagstatlink owner-*:mailto:%1@domain.com?subject=Acceptance_Tests:Send_Mail\n```\n\n----------------------------------------\n\nTITLE: Using ELSE Branch in TRY/EXCEPT in Robot Framework\nDESCRIPTION: This example demonstrates the use of the ELSE branch. The ELSE branch is executed if no error occurs in the TRY block. If `Some Keyword` passes, the `ELSE` branch is executed. Otherwise, the appropriate `EXCEPT` branch is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nELSE branch\n    TRY\n        Some Keyword\n    EXCEPT    X\n        Log    Error 'X' occurred!\n    EXCEPT    Y\n        Log    Error 'Y' occurred!\n    ELSE\n        Log    No error occurred!\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Limiting Keywords with @keyword Decorator and ROBOT_AUTO_KEYWORDS (Python)\nDESCRIPTION: This example demonstrates using the `@keyword` decorator in conjunction with `ROBOT_AUTO_KEYWORDS = False` to explicitly define which methods are keywords.  Requires `robot.api.deco`. Only methods decorated with `@keyword` are keywords.  `this_is_not_keyword` is not a keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library\nclass Example:\n\n    @keyword\n    def this_is_keyword(self):\n        pass\n\n    @keyword('This is keyword with custom name')\n    def xxx(self):\n        pass\n\n    def this_is_not_keyword(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Iterating Dictionary Items in FOR Loop (Robot Framework)\nDESCRIPTION: Demonstrates how to iterate through dictionary items using FOR loops in Robot Framework. This allows accessing both keys and values of a dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_4\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{dict}\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: ByteString argument conversion replacement in Robot Framework\nDESCRIPTION: This snippet demonstrates the recommended replacement for `ByteString` argument conversion in Robot Framework due to its deprecation in Python 3.14.  It shows how to use `bytes | bytearray` to achieve the same functionality.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_13\n\nLANGUAGE: RobotFramework\nCODE:\n```\narg: bytes | bytearray\n```\n\n----------------------------------------\n\nTITLE: Calculating Variable Values (Python)\nDESCRIPTION: Illustrates creating variables with calculated values using Python functions, demonstrating how to define functions and use them to set variable values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\ndef get_area(diameter):\n    radius = diameter / 2\n    area = math.pi * radius * radius\n    return area\n\nAREA1 = get_area(1)\nAREA2 = get_area(2)\n```\n\n----------------------------------------\n\nTITLE: Example Keyword Definition with Type Hints (Python)\nDESCRIPTION: This code snippet demonstrates how a keyword is defined using Python type hints, including the use of the Union type. It shows how Robot Framework handles argument conversion with multiple possible types. When an argument has multiple types, Robot Framework tries to convert using each, from left to right, until one succeeds.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndef example(arg: Union[UnknownType, int]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Automatic argument conversion with @keyword decorator\nDESCRIPTION: This example demonstrates how to use the `@keyword` decorator to specify argument types for Robot Framework keywords, working with both Python 2 and Python 3.  Two methods are shown: using a dictionary to map argument names to types, and using a list to map arguments to types based on their position.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Python Keyword Definition with Mixed Arguments\nDESCRIPTION: This Python code defines a keyword using Robot Framework's `@keyword` decorator. The keyword accepts both embedded arguments (specified in the decorator) and normal arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Testdoc Examples - Python\nDESCRIPTION: These are examples of how to use Testdoc. The first example generates documentation from 'my_test.robot' to 'testdoc.html'. The second example overrides the suite name, includes tests with the 'smoke' tag from the 'path/to/tests' directory, and outputs to 'smoke.html'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Testdoc.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npython -m robot.testdoc my_test.robot testdoc.html\npython path/to/robot/testdoc.py --name \"Smoke tests\" --include smoke path/to/tests smoke.html\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding Groups in Robot Framework\nDESCRIPTION: This python snippet demonstrates how to add a group programmatically to a test case using Robot Framework's API. It uses a SuiteVisitor to modify the test suite before execution, adding a group with two keywords to each test.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import SuiteVisitor\n\n\nclass GroupAdder(SuiteVisitor):\n\n    def start_test(self, test):\n        group = test.body.create_group(name='Example')\n        group.body.create_keyword(name='Log', args=['Hello, world!'])\n        group.body.create_keyword(name='No Operation')\n```\n\n----------------------------------------\n\nTITLE: Basic WHILE Loop in Robot Framework\nDESCRIPTION: This snippet shows a basic WHILE loop in Robot Framework, demonstrating how to execute a block of code repeatedly as long as a specified condition is true. The loop uses the Evaluate keyword to modify a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n    *** Test Cases ***\n    Loop as long as condition is True\n        WHILE    ${x} > 0\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n        END\n```\n\n----------------------------------------\n\nTITLE: Variable Evaluation - Robot Framework\nDESCRIPTION: Demonstrates the new syntax in Robot Framework 2.9 that allows accessing Robot Framework variables directly in the evaluation namespace of keywords like `Run Keyword If` using a `$` prefix. This provides a more Pythonic way to refer to variables in expressions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nMy keyword\n    Run keyword if    \"${my var}\" != \"Foo\"   ...   # old syntax\n    Run keyword if     $my_var != \"Foo\"    ...   # new syntax in 2.9\n```\n\n----------------------------------------\n\nTITLE: Execute Robot Framework Tests\nDESCRIPTION: This command demonstrates how to execute Robot Framework tests from the command line using the `robot` command. It shows two examples: one executing a single test file and another using command-line options to set variables and output directory.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/README.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrobot tests.robot\n```\n\nLANGUAGE: bash\nCODE:\n```\nrobot --variable BROWSER:Firefox --outputdir results path/to/tests/\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop with limit and on_limit in Robot Framework\nDESCRIPTION: This Robot Framework snippet showcases a `WHILE` loop with the `limit` and `on_limit` configurations. The loop runs a maximum of 10 times. If the loop limit is reached, the `on_limit` option set to `PASS` ensures the test case does not fail.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n      WHILE with 'limit' and 'on_limit'\n          WHILE    True    limit=10    on_limit=PASS\n              Log to console    Hello!\n          END\n          Log to console    Hello once more!\n```\n\n----------------------------------------\n\nTITLE: Iterating Multiple Dictionaries with FOR Loop (Robot Framework)\nDESCRIPTION: Illustrates iterating over multiple dictionaries and adding key-value pairs within a FOR loop. If keys are duplicated, the last value is used while maintaining the original order.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_5\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{first}    &{second}    one=more\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Serialize Robot Framework Test Suite to JSON (Python)\nDESCRIPTION: This Python code snippet demonstrates how to serialize a Robot Framework test suite to JSON using the `TestSuite.to_json` method. The suite is loaded from the file system and then saved to a file named 'tests.rbt'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api import TestSuite\n\nsuite = TestSuite.from_file_system('path/to/tests')\nsuite.to_json('tests.rbt')\n```\n\n----------------------------------------\n\nTITLE: Using Special Variable Syntax in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates using the special `$variable` syntax. It provides a solution to issues with string quoting and handling `None` values. The use of `$variable` makes the variable available in the evaluation namespace without needing quoting. It also showcases how to access elements in a list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nUsing special variable syntax\n    Should Be True    $rc > 0\n    IF    $status.upper() == 'PASS'\n        Log    Passed\n    END\n    IF    'FAIL' in $output\n        Log    Output contains FAIL\n    END\n\nOnly possible using special variable syntax\n    Should Be True    $example is not None\n    Should Be True    len($result) > 1 and $result[1] == 'OK'\n```\n\n----------------------------------------\n\nTITLE: External Parser with Defaults and Init File - Python\nDESCRIPTION: This snippet illustrates an external parser that extends the `Parser` base class and handles initialization files. It defines a `parse` method to create a suite and set default values to tests, and a `parse_init` method to set default tags, setup, and metadata from an initialization file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\nfrom robot.api.interfaces import Parser, TestDefaults\n\n\nclass ExampleParser(Parser):\n    extension = ('example', 'another')\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a suite and set possible defaults from init files to tests.\"\"\"\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line, doc='Example')\n            test.body.create_keyword(name='Log', args=['Hello!'])\n            defaults.set_to(test)\n        return suite\n\n    def parse_init(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a dummy suite and set some defaults.\n\n        This method is called only if there is an initialization file with\n        a supported extension.\n        \"\"\"\n        defaults.tags = ('tags', 'from init')\n        defaults.setup = {'name': 'Log', 'args': ['Hello from init!']}\n        return TestSuite(TestSuite.name_from_source(source.parent), doc='Example',\n                             source=source, metadata={'Example': 'Value'})\n```\n\n----------------------------------------\n\nTITLE: Python Result Model Modifier Example\nDESCRIPTION: This Python code shows an example of a result model modifier using Robot Framework's `SuiteVisitor`. It checks the execution time of passed tests and marks them as failed if they exceed a specified maximum time. The modifier can be used with the `--prerebotmodifier` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import SuiteVisitor\n\n\nclass ExecutionTimeChecker(SuiteVisitor):\n\n    def __init__(self, max_seconds: float):\n        self.max_milliseconds = max_seconds * 1000\n\n    def visit_test(self, test):\n        if test.status == 'PASS' and test.elapsedtime > self.max_milliseconds:\n            test.status = 'FAIL'\n            test.message = 'Test execution took too long.'\n```\n\n----------------------------------------\n\nTITLE: Listener API v3 Example (Library Keyword Information)\nDESCRIPTION: This Python code shows how to retrieve information about the executed keyword, including the library it belongs to, using the listener API version 3. It requires the 'robot' library and defines a 'start_library_keyword' method. The method prints the keyword's name, the library's name, source file, line number, scope, and current instance.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: New FOR loop syntax\nDESCRIPTION: This snippet demonstrates the new FOR loop syntax in Robot Framework 3.1. The loop ends with the `END` keyword, and keywords inside the loop do not need to be escaped with a backslash.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Logging to Console using sys.__stdout__ Python\nDESCRIPTION: This snippet demonstrates how to write messages directly to the console using `sys.__stdout__`. Messages written this way are displayed immediately but are not saved to the log file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n\ndef my_keyword(arg):\n    print('Message only to console.', file=sys.__stdout__)\n```\n\n----------------------------------------\n\nTITLE: Allow passing flags to regexp keywords\nDESCRIPTION: The enhancement allows passing flags to regexp related keywords using explicit `flags` argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Creating TestSuite from JSON using from_json\nDESCRIPTION: This example shows how to create a Robot Framework TestSuite object from JSON data, either from a file or a string. It depends on the `robot.running` module for TestSuite management. The resulting TestSuite can be used to execute or manipulate tests defined in JSON format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Create suite from JSON data in a file.\nsuite = TestSuite.from_json('data.rbt')\n\n# Create suite from a JSON string.\nsuite = TestSuite.from_json('{\"name\": \"Suite\", \"tests\": [{\"name\": \"Test\"}]}')\n```\n\n----------------------------------------\n\nTITLE: Limiting WHILE Loop Iterations Robot Framework\nDESCRIPTION: Demonstrates how to limit the number of iterations or the execution time of a WHILE loop in Robot Framework using the `limit` parameter. Examples show limiting by iteration count, time duration, and disabling the limit altogether with `NONE`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Limit as iteration count\n        WHILE    True    limit=100\n            Log    This is run 100 times.\n        END\n\n    Limit as time\n        WHILE    True    limit=10 seconds\n            Log    This is run 10 seconds.\n        END\n\n    No limit\n        WHILE    True    limit=NONE\n            Log    This must be forcefully stopped.\n        END\n```\n\n----------------------------------------\n\nTITLE: Python Stringified Type Hints\nDESCRIPTION: Illustrates the use of stringified type hints (e.g., `'list[int]'`, `'int | float'`) for argument conversion. This allows using generic types and unions with older Python versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Limiting WHILE Loop Iterations Robot Framework\nDESCRIPTION: These examples showcase how to limit the number of iterations in a `WHILE` loop using the `limit` parameter. The limit can be set as an iteration count, a time string, or disabled altogether using `NONE`. Requires Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nLimit as iteration count\n    WHILE    True    limit=100\n        Log    This is run 100 times.\n    END\n\nLimit as time\n    WHILE    True    limit=10 seconds\n        Log    This is run 10 seconds.\n    END\n\nNo limit\n    WHILE    True    limit=NONE\n        Log    This must be forcefully stopped.\n    END\n```\n\n----------------------------------------\n\nTITLE: Grouping Keywords and Control Structures in Robot Framework\nDESCRIPTION: This Robot Framework code snippet demonstrates the usage of the `GROUP` syntax to group related keywords and control structures within a test case. Groups can have names (e.g., `Open browser to login page`) or be anonymous.  This example includes nested groups and groups combined with IF control structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nValid login\n    GROUP    Open browser to login page\n        Open Browser    ${LOGIN URL}\n        Title Should Be    Login Page\n    END\n    GROUP    Submit credentials\n        Input Username    username_field    demo\n        Input Password    password_field    mode\n        Click Button    login_button\n    END\n    GROUP    Login should have succeeded\n        Title Should Be    Welcome Page\n    END\n\nAnonymous group\n    GROUP\n        Log    Group name is optional.\n    END\n\nNesting\n    GROUP\n        GROUP    Nested group\n            Log    Groups can be nested.\n        END\n        IF    True\n            GROUP\n                Log    Groups can also be nested with other control structures.\n            END\n        END\n    END\n```\n\n----------------------------------------\n\nTITLE: Keyword Flattening with robot:flatten Tag RobotFramework\nDESCRIPTION: This snippet illustrates how to use the `robot:flatten` tag in Robot Framework to flatten a keyword structure during execution. This approach simplifies the `output.xml` file by removing nested keyword structures and retaining only the messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nExample\n    [Tags]    robot:flatten\n    Log    Robot\n    Log    Framework\n```\n\n----------------------------------------\n\nTITLE: Implementing an External Parser as a Class\nDESCRIPTION: This example demonstrates an external parser implemented as a class for Robot Framework. It defines an `ExampleParser` class with an `__init__` method to accept arguments (extension) and a `parse` method to process the source file and return a `TestSuite` object. It showcases how to preserve state and use command-line arguments within a parser. It uses `pathlib` for file path manipulation and `robot.api` for creating the test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\n\n\nclass ExampleParser:\n\n    def __init__(self, extension: str):\n        self.extension = extension\n\n    def parse(self, source: Path) -> TestSuite:\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line)\n            test.body.create_keyword(name='Log', args=['Hello!'])\n        return suite\n```\n\n----------------------------------------\n\nTITLE: Iterating Dictionaries with FOR Loops in Robot Framework\nDESCRIPTION: This snippet demonstrates how to iterate through dictionary items using FOR loops in Robot Framework. It showcases the syntax for accessing keys and values, as well as the use of multiple dictionaries and additional items using the key=value syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{dict}\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Argument conversion examples - Robot Framework\nDESCRIPTION: Presents examples of how Robot Framework converts arguments based on their types when calling keywords. It shows how string arguments are converted and how variables can be used to pass arguments of different types directly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_55\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nConversion\n    Example    10        # Argument is a string. Converted to an integer.\n    Example    1.5       # Argument is a string. Converted to a float.\n    Example    ${10}     # Argument is an integer. Accepted as-is.\n    Example    ${1.5}    # Argument is a float. Accepted as-is.\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution with IF/ELSE in Robot Framework\nDESCRIPTION: This snippet demonstrates the usage of IF/ELSE conditional statements in Robot Framework. It checks if the variable `${rc}` is greater than 0. If true, `Some keyword` is executed; otherwise, `Another keyword` is executed. This example showcases the basic structure for conditional logic in Robot Framework test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    ${rc} > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with Python\nDESCRIPTION: This Python script executes Robot Framework tests using different browsers and combines the results using Rebot. It uses the robot.run_cli and robot.rebot_cli functions from Robot Framework's programmatic API.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport sys\nfrom robot import run_cli, rebot_cli\n\ncommon = ['--log', 'none', '--report', 'none'] + sys.argv[1:] + ['login']\nrun_cli(['--name', 'Firefox', '--variable', 'BROWSER:Firefox', '--output', 'out/fx.xml'] + common, exit=False)\nrun_cli(['--name', 'IE', '--variable', 'BROWSER:IE', '--output', 'out/ie.xml'] + common, exit=False)\nrebot_cli(['--name', 'Login', '--outputdir', 'out', 'out/fx.xml', 'out/ie.xml'])\n```\n\n----------------------------------------\n\nTITLE: Robot Framework IF/ELSE Example\nDESCRIPTION: This snippet demonstrates a basic IF/ELSE structure in Robot Framework. If the condition `${rc} > 0` is true, `Some keyword` is executed; otherwise, `Another keyword` is executed. This provides conditional execution of keywords based on a given condition.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    ${rc} > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Catching any error with EXCEPT in Robot Framework\nDESCRIPTION: This example demonstrates how to use an EXCEPT branch without any messages to catch any error that occurs within the TRY block. This is useful for providing a general error handler.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any error\n    TRY\n        Some Keyword\n    EXCEPT               # Match any error.\n        Error Handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Setting Keyword Tags using Documentation\nDESCRIPTION: This snippet demonstrates how to define keyword tags within the function's docstring using the `Tags:` prefix. The tags are specified on the last line of the docstring, separated by commas. This provides an alternative method for setting keyword tags.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef login(username, password):\n    \"\"\"Log user in to SUT.\n\n    Tags: tag1, tag2\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: List Expansion with Item Access in Robot Framework\nDESCRIPTION: This snippet demonstrates list expansion with item access using the `@{var}[items]` syntax in Robot Framework. It retrieves the 'items' list from the `${var}` dictionary and iterates through each item, logging it using the `Log` keyword. This approach simplifies accessing and expanding list items within dictionaries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.0 Release Candidate\nDESCRIPTION: This snippet shows how to install the Robot Framework 5.0 release candidate using pip. It includes commands to install the latest pre-release version or a specific release candidate version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: robotframework\nCODE:\n```\npip install robotframework==5.0rc1\n```\n\n----------------------------------------\n\nTITLE: Custom Date Converter Documentation\nDESCRIPTION: This example demonstrates documenting custom date converters, showcasing how docstrings can be used within either the custom type class or the converter function itself, to provide helpful information about the conversion process for users. The example uses both class level and classmethod level docstrings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass FiDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        \"\"\"Date in ``dd.mm.yyyy`` format.\"\"\"\n        # ...\n\n\nclass UsDate(date):\n    \"\"\"Date in ``mm/dd/yyyy`` format.\"\"\"\n\n    @classmethod\n    def from_string(cls, value: str):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries by Name or Path - Robot Framework\nDESCRIPTION: This example demonstrates how to import Robot Framework libraries by name or by path in the ***Settings*** section of a Robot Framework test case file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Settings ***\nLibrary    MyLibrary\nLibrary    module.LibraryClass\nLibrary    path/AnotherLibrary.py\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with Variable Number of Arguments (*args)\nDESCRIPTION: This snippet demonstrates how to define Robot Framework keywords that accept a variable number of arguments using the `*args` syntax in Python. It provides examples of keywords that accept any number of arguments, as well as keywords that combine required arguments with variable arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef any_arguments(*args):\n    print(\"Got arguments:\")\n    for arg in args:\n        print(arg)\n\ndef one_required(required, *others):\n    print(f\"Required: {required}\\nOthers:\")\n    for arg in others:\n        print(arg)\n\ndef also_defaults(req, def1=\"default 1\", def2=\"default 2\", *rest):\n    print(req, def1, def2, rest)\n```\n\n----------------------------------------\n\nTITLE: New For Loop Syntax\nDESCRIPTION: This code demonstrates the new FOR loop syntax in Robot Framework 3.1, using the `FOR`, `IN`, and `END` keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Serializing TestSuite to JSON using to_json() - Python\nDESCRIPTION: This snippet demonstrates how to serialize a Robot Framework TestSuite object to JSON format using the `to_json()` method. It shows creating a suite from files, converting it to a JSON string, and saving it to a file with custom indentation.  Dependencies: robot.running.TestSuite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Construct suite based on data on the file system.\nsuite = TestSuite.from_file_system('/path/to/data')\n# Get JSON data as a string.\ndata = suite.to_json()\n# Save JSON data to a file with custom indentation.\nsuite.to_json('data.rbt', indent=2)\n```\n\n----------------------------------------\n\nTITLE: Pre-run Modifier: Disable Setups and Teardowns - Python\nDESCRIPTION: This pre-run modifier disables setups or teardowns for a test run, useful for debugging. It allows selectively disabling suite or test setups and teardowns.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Disable suite teardowns.\nrobot --prerunmodifier disable.SuiteTeardown tests.robot\n\n# Disable both test setups and teardowns by using '--prerunmodifier' twice.\nrobot --prerunmodifier disable.TestSetup --prerunmodifier disable.TestTeardown tests.robot\n```\n\n----------------------------------------\n\nTITLE: Setting Library Scope and Version with @library Decorator (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `@library` decorator to set the scope and version of a Robot Framework library class. It shows the new way using the decorator and the old way using class attributes, highlighting their equivalence.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', version='3.2b1')\nclass NewWay:\n    # actual library code\n\n\nclass OldWay:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_VERSION = '3.2b1'\n\n    # actual library code\n```\n\n----------------------------------------\n\nTITLE: Using FINALLY in TRY/EXCEPT in Robot Framework\nDESCRIPTION: This code shows how to use a FINALLY branch in a TRY/EXCEPT block. The FINALLY branch is always executed, regardless of whether an error occurred or not. The first example uses TRY/EXCEPT/ELSE/FINALLY, and the second uses TRY/FINALLY.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nTRY/EXCEPT/ELSE/FINALLY\n    TRY\n        Some keyword\n    EXCEPT\n        Log    Error occurred!\n    ELSE\n        Log    No error occurred.\n    FINALLY\n        Log    Always executed.\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nTRY/FINALLY\n    Open Connection\n    TRY\n        Use Connection\n    FINALLY\n        Close Connection\n    END\n```\n\n----------------------------------------\n\nTITLE: Date Conversion with Error Handling Python for Robot Framework\nDESCRIPTION: This example enhances the custom date converter with error handling using regular expressions to validate the input format. If the input does not match the expected `dd.mm.yyyy` format, a `ValueError` is raised with a descriptive error message. This provides better feedback to the user when an invalid date format is used. The re module is used for regular expression matching.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Expansion with Item Access\nDESCRIPTION: This example demonstrates how to use list expansion with item access in Robot Framework using the `@{var}[items]` syntax. It assumes there's a variable `${var}` that contains a dictionary with a key 'items' whose value is a list. The FOR loop iterates through the items in that list. This syntax simplifies accessing and iterating over list items within dictionaries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version with pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip.  The version number is specified to ensure a consistent environment.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==4.1.2\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword with Embedded and Normal Arguments in Python\nDESCRIPTION: This Python code defines a keyword that accepts both embedded arguments (specified in the keyword name) and normal arguments. The 'animals' argument is embedded, while 'count' is a normal argument. The keyword is decorated with the @keyword decorator from Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Library Scope and Version with @library Decorator (Python)\nDESCRIPTION: Illustrates how to use the `@library` decorator to set the scope and version of a Robot Framework library.  This provides a concise alternative to setting `ROBOT_LIBRARY_SCOPE` and `ROBOT_LIBRARY_VERSION` attributes directly within the library class. Dependencies include `robot.api.deco.library`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', version='3.2b1')\nclass NewWay:\n    # actual library code\n\n\nclass OldWay:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_VERSION = '3.2b1'\n\n    # actual library code\n```\n\n----------------------------------------\n\nTITLE: Listener v3: Keyword and WHILE Loop\nDESCRIPTION: This Python code snippet demonstrates how to create a Robot Framework listener version 3 that prints information about started keywords and ended WHILE loops.  It imports necessary classes from `robot.running` and `robot.result` and defines the `start_keyword` and `end_while` methods to handle these events.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, While as WhileData\nfrom robot.result import Keyword as KeywordResult, While as WhileResult\n\n\ndef start_keyword(data: KeywordData, result: KeywordResult):\n    print(f\"Keyword '{result.full_name}' used on line {data.lineno} started.\")\n\n\ndef end_while(data: WhileData, result: WhileResult):\n    print(f\"WHILE loop on line {data.lineno} ended with status {result.status} \"\n          f\"after {len(result.body)} iterations.\")\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with Stringified Generics and Unions in Python\nDESCRIPTION: Illustrates the use of stringified type hints (e.g., `'list[int]'`, `'int | float'`) in Python for argument conversion in Robot Framework. This approach is compatible with older Python versions (e.g., Python 3.8) that do not natively support parameterized generics and unions in type hints.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Grouping Iterations with Test Templates in Robot Framework\nDESCRIPTION: This example shows how to use the `GROUP` syntax to group iterations with test templates in Robot Framework. The `Test Template` setting defines a keyword that will be executed for each group. The group names define the different data sets that are passed into the template keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary           String\nTest Template     Upper case should be\n\n*** Test Cases ***\nTemplate example\n    GROUP    ASCII characters\n        a    A\n        z    Z\n    END\n    GROUP    Latin-1 characters\n        ä    Ä\n        ß    SS\n    END\n    GROUP    Numbers\n        1    1\n        9    9\n    END\n\n*** Keywords ***\nUpper case should be\n    [Arguments]    ${char}    ${expected}\n    ${actual} =    Convert To Upper Case    ${char}\n    Should Be Equal    ${actual}    ${expected}\n```\n\n----------------------------------------\n\nTITLE: TRY/EXCEPT/ELSE/FINALLY Example Robot Framework\nDESCRIPTION: Illustrates the use of TRY, EXCEPT, ELSE, and FINALLY blocks in a Robot Framework test case for error handling and cleanup. The TRY block executes the code, the EXCEPT block handles exceptions, the ELSE block executes if no exception occurs, and the FINALLY block always executes, useful for cleanup tasks.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    TRY/EXCEPT/ELSE/FINALLY\n        TRY\n            Some keyword\n        EXCEPT\n            Log    Error occurred!\n        ELSE\n            Log    No error occurred.\n        FINALLY\n            Log    Always executed.\n        END\n\n    TRY/FINALLY\n        Open Connection\n        TRY\n            Use Connection\n        FINALLY\n            Close Connection\n        END\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Arguments in Robot Framework Test Cases\nDESCRIPTION: This snippet demonstrates how to use keywords with embedded arguments in Robot Framework test cases. It shows how arguments are passed to the keywords and how normal positional or named arguments can be combined with embedded arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_70\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nEmbedded arguments\n    Select cat from list\n    Select dog from list\n\nEmbedded and normal arguments\n    Number of cats should be    2\n    Number of dogs should be    count=3\n```\n\n----------------------------------------\n\nTITLE: Python Hybrid Library: __getattr__ Example\nDESCRIPTION: This Python code demonstrates the use of `__getattr__` in a hybrid library to dynamically handle keyword execution.  It shows how to return a callable object (in this case, `external_keyword`) when a keyword method is not directly defined in the class.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nfrom somewhere import external_keyword\n\n\nclass HybridExample:\n\n    def get_keyword_names(self):\n        return ['my_keyword', 'external_keyword']\n\n    def my_keyword(self, arg):\n        print(f\"My Keyword called with '{args}'.\")\n\n    def __getattr__(self, name):\n        if name == 'external_keyword':\n            return external_keyword\n        raise AttributeError(f\"Non-existing attribute '{name}'.\")\n```\n\n----------------------------------------\n\nTITLE: Robot Framework GROUP with templates example\nDESCRIPTION: This Robot Framework snippet shows how the `GROUP` syntax can be used to group iterations when using test templates. Each group provides different input values for the template keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary           String\nTest Template     Upper case should be\n\n*** Test Cases ***\nTemplate example\n    GROUP    ASCII characters\n        a    A\n        z    Z\n    END\n    GROUP    Latin-1 characters\n        ä    Ä\n        ß    SS\n    END\n    GROUP    Numbers\n        1    1\n        9    9\n    END\n\n*** Keywords ***\nUpper case should be\n    [Arguments]    ${char}    ${expected}\n    ${actual} =    Convert To Upper Case    ${char}\n    Should Be Equal    ${actual}    ${expected}\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Example with Argument Type Conversion\nDESCRIPTION: Illustrates how to define a test case that utilizes automatic argument type conversion in Robot Framework. The keyword `Example Keyword` expects an integer and a boolean.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Example Keyword    42    False\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword with @keyword Decorator in Python\nDESCRIPTION: This snippet demonstrates how to define a Robot Framework keyword using the `@keyword` decorator. The function `example_keyword` is decorated, making it available as a keyword in Robot Framework test cases. It shows how to retrieve the current thread name and print it.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import current_thread\n\nfrom robot.api.deco import keyword\n\n\nROBOT_AUTO_KEYWORDS = False\n\n\n@keyword\ndef example_keyword():\n    thread_name = current_thread().name\n    print(f\"Running in thread '{thread_name}'.\")\n\ndef this_is_not_keyword():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variable Assignment\nDESCRIPTION: Assigns the string \"value\" to the variable `${suite}` and asserts that the value of `${suite}` is indeed \"value\". This showcases basic variable assignment and assertion within Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nShould Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Date Conversion with Custom Types\nDESCRIPTION: This Python code defines custom date types (`FiDate` and `UsDate`) to handle dates in `dd.mm.yyyy` and `mm/dd/yyyy` formats, respectively. Each custom type includes a `from_string` classmethod that parses the date string. The `@library` decorator registers the converters for these custom types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Custom Skip Execution Exception - Python\nDESCRIPTION: This snippet shows how to create a custom exception that skips a test. This is done by defining a new exception class that inherits from `RuntimeError` and setting the `ROBOT_SKIP_EXECUTION` attribute to `True`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nclass MySkippingError(RuntimeError):\n    ROBOT_SKIP_EXECUTION = True\n```\n\n----------------------------------------\n\nTITLE: Using Example Library in Robot Framework Test Case\nDESCRIPTION: This snippet shows how to use the example library defined in the previous snippet within a Robot Framework test case. It imports the `MyLibrary` library and then uses the `Do Nothing` and `Hello` keywords. The `Hello` keyword is called with the argument 'world'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    MyLibrary\n\n*** Test Cases ***\nMy Test\n    Do Nothing\n    Hello    world\n```\n\n----------------------------------------\n\nTITLE: Another Library with Arguments in Python\nDESCRIPTION: This Python code demonstrates a library class `AnotherLib` that accepts an argument in its constructor (`__init__`). The argument is used to determine the environment.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass AnotherLib:\n\n   def __init__(self, environment):\n       self.environment = environment\n\n   def do_something(self):\n       if self.environment == 'test':\n           do_something_in_test_environment()\n       else:\n           do_something_in_other_environments()\n```\n\n----------------------------------------\n\nTITLE: Iterating Dictionaries with Key-Value Tuple in Robot Framework\nDESCRIPTION: This example illustrates how to iterate through a dictionary and access key-value pairs as a tuple using FOR loops in Robot Framework. The snippet shows how to assert the length of the tuple and log the key and value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    &{dict}\n    Length Should Be    ${item}    2\n    Log    Key is '${item}[0]' and value is '${item}[1]'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Capturing Error Message in Robot Framework\nDESCRIPTION: This snippet demonstrates how to capture the error message into a variable using the 'AS ${var}' syntax in an EXCEPT branch. This allows you to access and use the error message within the error handling logic.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nCapture error\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB    AS   ${error}\n        Error Handler 1    ${error}\n    EXCEPT    AS    ${error}\n        Error Handler 2    ${error}\n    END\n```\n\n----------------------------------------\n\nTITLE: Using @library decorator to enforce @keyword decorator for Robot Framework keywords\nDESCRIPTION: When using the `@library` decorator, only methods decorated with the `@keyword` decorator become keywords. This behavior can be disabled by using `@library(auto_keywords=True)` or enabled for modules by setting `ROBOT_AUTO_KEYWORDS = False`. The `library` and `keyword` decorators must be imported from `robot.api.deco`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library, keyword\n\n\n@library\nclass Example:\n\n    @keyword\n    def example_keyword(self):\n        # ...\n\n    def not_exposed_as_keyword(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Including/Excluding Tests by Tags\nDESCRIPTION: Demonstrates using the `--include` and `--exclude` options to select test cases based on tag names or patterns. Shows how to use wildcards (`*`, `?`) and logical operators (`AND`, `OR`, `NOT`) in tag patterns.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n--include example\n--exclude not_ready\n--include regression --exclude long_lasting\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n--include feature-4?\n--exclude bug*\n--include fooANDbar\n--exclude xxORyyORzz\n--include fooNOTbar\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with Function Annotations\nDESCRIPTION: This Python code demonstrates automatic argument conversion using function annotations. The `count` argument is annotated as `int`, and `case_insensitive` as `bool`, allowing Robot Framework to automatically convert the arguments to the specified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Any Type Argument Conversion Example in Robot Framework\nDESCRIPTION: Demonstrates how the introduction of the `Any` type affects argument conversion when a default value is present. Earlier, conversion was attempted based on the default value's type if `Any` was not recognized. Now, with `Any` recognized, no conversion occurs.  The recommended solution is to use `Union[int, Any]` for better typing.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\narg: Any = 1\n```\n\nLANGUAGE: Python\nCODE:\n```\narg: Union[int, Any] = 1\n```\n\n----------------------------------------\n\nTITLE: Using Objects as Variable Values (Python)\nDESCRIPTION: Demonstrates using Python objects as variable values within a variable file, allowing for more complex data structures to be used in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMAPPING = {'one': 1, 'two': 2}\n\nclass MyObject:\n    def __init__(self, name):\n        self.name = name\n\nOBJ1 = MyObject('John')\nOBJ2 = MyObject('Jane')\n```\n\n----------------------------------------\n\nTITLE: Fatal Error Exception - Python\nDESCRIPTION: This snippet demonstrates how to use the `FatalError` exception from the `robot.api` package to stop the whole test execution. Raising this exception will halt the test run. The message provided to the exception constructor is the fatal error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import FatalError\n\n\ndef example_keyword():\n    if system_is_not_running():\n        raise FatalError('System is not running!')\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Dictionary Variable Creation\nDESCRIPTION: This example shows how to create a dictionary variable (`&{dict}`) in Robot Framework with two key-value pairs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\nDictionary\n        # Creates a dictionary with two items.\n        VAR    &{dict}    key=value    second=item\n```\n\n----------------------------------------\n\nTITLE: Creating a Suite from JSON - Python\nDESCRIPTION: This snippet demonstrates how to create a Robot Framework TestSuite object from JSON data using the `from_json` method. It initializes a TestSuite by reading JSON data from a file named 'tests.rbt'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import TestSuite\n\nsuite = TestSuite.from_json('tests.rbt')\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with XML Spec File\nDESCRIPTION: This snippet demonstrates how to use a previously generated XML spec file as input for Libdoc to create documentation. The output can be in HTML or another format as needed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlibdoc Example.xml Example.html\nlibdoc Example.libspec Example.html\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with Various Argument Types (*args, **kwargs)\nDESCRIPTION: This snippet demonstrates how to define a Robot Framework keyword that accepts a combination of positional arguments, variable arguments (`*varargs`), and free keyword arguments (`**kwargs`). The `various_args` function prints the values of all received arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef various_args(arg=None, *varargs, **kwargs):\n    if arg is not None:\n        print('arg:', arg)\n    for value in varargs:\n        print('vararg:', value)\n    for name, value in sorted(kwargs.items()):\n        print('kwarg:', name, value)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Date Types with Converters (Python)\nDESCRIPTION: This Python code defines custom date types (`FiDate`, `UsDate`) with corresponding converter methods (`from_string`) that handle specific date formats (dd.mm.yyyy, mm/dd/yyyy).  It registers these converters using the `@library` decorator.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Minimal External Parser Implementation - Python\nDESCRIPTION: This snippet shows a minimal implementation of an external parser for Robot Framework.  It defines an `EXTENSION` and a `parse` function to create a simple TestSuite with a single test containing a 'Log' keyword. The parser returns the generated TestSuite instance.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import TestSuite\n\nEXTENSION = '.example'\n\ndef parse(source):\n    suite = TestSuite(name='Example', source=source)\n    test = suite.tests.create(name='Test')\n    test.body.create_keyword(name='Log', args=['Hello!'])\n    return suite\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword Using TypeInfo for Conversion\nDESCRIPTION: This Python code shows an example of manual argument conversion using `robot.api.TypeInfo`. It explicitly converts arguments to specific types using the `convert` method of `TypeInfo`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import TypeInfo\n\n\ndef example_keyword(count, case_insensitive):\n    count = TypeInfo.from_type(int).convert(count)\n    if TypeInfo.from_type(bool).convert(case_insensitive):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Basic WHILE Loop Example Robot Framework\nDESCRIPTION: This example demonstrates a basic WHILE loop in Robot Framework that iterates as long as the variable `${x}` is greater than 0.  It logs the value of `${x}` in each iteration and decrements it by 1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${x}              10\n\n*** Test Cases ***\nLoop as long as condition is True\n    WHILE    ${x} > 0\n        Log    ${x}\n        ${x} =    Evaluate    ${x} - 1\n    END\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE in FOR Loop Robot Framework\nDESCRIPTION: Demonstrates the use of BREAK and CONTINUE statements within a FOR loop, combined with inline IF statements, to control loop execution based on specific conditions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_23\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        FOR    ${x}    IN RANGE    1000\n            IF    ${x} > 10    BREAK\n            Log    Executed only when ${x} < 11\n            IF    ${x} % 2 == 0    CONTINUE\n            Log    Executed only when ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: Python Example: run_keyword with optional kwargs\nDESCRIPTION: This Python example demonstrates the structure of a `run_keyword` method in a remote server. The method takes the keyword name, a list of arguments, and an optional dictionary of keyword arguments (`kwargs`). This allows for handling free named arguments passed from the test data.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/RemoteLibrary.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef run_keyword(name, args, kwargs=None):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using Keywords with Default Arguments in Robot Framework\nDESCRIPTION: This snippet demonstrates how to use keywords with default arguments within Robot Framework test cases. It shows examples of calling `One Default` with and without an argument, and `Multiple Defaults` with varying numbers of arguments, utilizing the default values when arguments are omitted.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_26\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nDefaults\n    One Default\n    One Default    argument\n    Multiple Defaults    required arg\n    Multiple Defaults    required arg    optional\n    Multiple Defaults    required arg    optional 1    optional 2\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries Using Import Library Keyword\nDESCRIPTION: This snippet shows how to import test libraries using the Import Library keyword from the BuiltIn library. The library name or path and possible arguments are specified similarly to the Library setting. This method is useful when the library is not available at the start of the test execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Do Something\n    Import Library    MyLibrary    arg1    arg2\n    KW From MyLibrary\n```\n\n----------------------------------------\n\nTITLE: Keyword using Custom Converter - Python\nDESCRIPTION: This code defines a Robot Framework keyword `keyword` that accepts a `date` argument. Robot Framework will automatically use the registered custom converter `parse_fi_date` to convert the argument to a `datetime.date` object before passing it to the keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Catching Specific Errors Before Any Error in Robot Framework\nDESCRIPTION: This demonstrates how to handle specific errors before catching any remaining errors. The first EXCEPT block handles `Error message`, and the second (without any message) handles any other error that occurs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any after testing more specific errors\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first\n        Error Handler 1\n    EXCEPT                     # Match any that did not match the above.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Using Normal Variable Syntax in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates using the normal `${variable}` syntax within expressions. It shows examples of comparing a number, checking a string, and searching for a substring.  Be aware of the quoting requirements when using this syntax with strings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nUsing normal variable syntax\n    Should Be True    ${rc} > 0\n    IF    '${status}'.upper() == 'PASS'\n        Log    Passed\n    END\n    IF    'FAIL' in r'''${output}'''\n        Log    Output contains FAIL\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework IF/ELSE Statement\nDESCRIPTION: This snippet demonstrates a basic IF/ELSE statement in Robot Framework. It checks if the variable `${rc}` is greater than 0. If true, `Some keyword` is executed. Otherwise, `Another keyword` is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    ${rc} > 0\n        Some keyword\n    ELSE\n        Another keyword\n    END\n```\n\n----------------------------------------\n\nTITLE: Implementing a Robot Framework Preprocessor in Python\nDESCRIPTION: This snippet presents a parser acting as a preprocessor for Robot Framework data files. It replaces custom headers with standard Robot Framework headers before parsing the data using TestSuite.from_string.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ParserInterface.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.running import TestDefaults, TestSuite\n\n\nclass RobotPreprocessor:\n    extension = '.robot'\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        data = source.read_text()\n        for header in 'Settings', 'Variables', 'Test Cases', 'Keywords':\n            data = data.replace(f'=== {header} ===', f'*** {header} ***')\n        suite = TestSuite.from_string(data, defaults=defaults)\n        return suite.config(name=TestSuite.name_from_source(source), source=source)\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example\nDESCRIPTION: This Robot Framework test case demonstrates how to use a custom keyword that accepts a date in the `dd.mm.yyyy` format. It shows the intended usage of the keyword with a Finnish date.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Keyword    11.3.2022\n```\n\n----------------------------------------\n\nTITLE: Specifying Language in Robot Framework Data File\nDESCRIPTION: This snippet illustrates how to specify the language to use in a Robot Framework data file using the `language:` syntax before the first section. This enables localization of keywords and settings within the file. Language code or name can be given.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nlanguage: fi\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Example Keyword Structure in Robot Framework\nDESCRIPTION: This snippet illustrates a simple keyword structure in Robot Framework. It consists of a keyword `Example` that calls the built-in `Log` keyword twice to log messages to the console.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Example\n        Log    Robot\n        Log    Framework\n```\n\n----------------------------------------\n\nTITLE: Python Keyword Definition with Embedded Arguments\nDESCRIPTION: Demonstrates how to define a Python keyword with embedded arguments using the `@keyword` decorator. This allows for a more natural language syntax when using the keyword in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with Default Argument Values\nDESCRIPTION: This snippet demonstrates how to define Robot Framework keywords with default argument values. The `one_default` function has one argument with a default value, while `multiple_defaults` has one required argument and two optional arguments with default values. This allows for more flexible keyword usage.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef one_default(arg='default'):\n    print(f\"Got argument '{arg}'.\")\n\n\ndef multiple_defaults(arg1, arg2='default 1', arg3='default 2'):\n    print(f\"Got arguments '{arg1}', '{arg2}' and '{arg3}'.\")\n```\n\n----------------------------------------\n\nTITLE: Basic IF/ELSE syntax in Robot Framework\nDESCRIPTION: This snippet demonstrates the basic IF syntax in Robot Framework 4.0, showcasing the use of IF, END, and ELSE markers for conditional execution of keywords. The condition is evaluated in Python and supports variable replacement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n       IF    ${rc} > 0\n           Some keyword\n           Another keyword\n       END\n```\n\n----------------------------------------\n\nTITLE: Python Custom Date Types and Converters\nDESCRIPTION: This python snippet demonstrates how to create custom date types (`FiDate`, `UsDate`) and register custom argument converters for them using the `@library` decorator. It shows how to create custom classes that inherit from built-in types and provide their own conversion logic.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Defining Library Keywords with Mixed Arguments in Python\nDESCRIPTION: Shows how to define a library keyword in Python that accepts both embedded arguments (defined in the `@keyword` decorator) and normal arguments. This allows for more flexible keyword usage in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handle everything with ELSE in Robot Framework TRY/EXCEPT\nDESCRIPTION: This example shows how to combine an EXCEPT block that catches any error with an ELSE block that handles the case when no error occurs.  This allows complete handling of both successful and unsuccessful execution of the TRY block.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nHandle everything\n    TRY\n        Some Keyword\n    EXCEPT    AS    ${err}\n        Log    Error occurred: ${err}\n    ELSE\n        Log    No error occurred!\n    END\n```\n\n----------------------------------------\n\nTITLE: Output.xml Keyword Name Format Change\nDESCRIPTION: This snippet demonstrates the change in how keyword names and their owners are stored in output.xml. The `library` attribute is replaced by `owner`, and `sourcename` is replaced by `source_name`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Timestamping Output Files in Robot Framework\nDESCRIPTION: This command demonstrates how to use the `--timestampoutputs` option to add a timestamp to the output, log, and report files. This can be helpful to differentiate multiple test executions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --timestampoutputs --log mylog.html --report NONE tests.robot\n```\n\n----------------------------------------\n\nTITLE: Documenting Custom Converters (Python)\nDESCRIPTION: These Python code snippets show how to add documentation to custom converters. Documentation can be added either to the converter method itself or to the custom type class. This documentation is then used by Libdoc to generate documentation for the library.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass FiDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        \"\"\"Date in ``dd.mm.yyyy`` format.\"\"\"\n        # ...\n\n\nclass UsDate(date):\n    \"\"\"Date in ``mm/dd/yyyy`` format.\"\"\"\n\n    @classmethod\n    def from_string(cls, value: str):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade Robot Framework to the latest pre-release version using pip. It installs the newest available release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Rebot Tool JSON Output\nDESCRIPTION: Shows the command line example that demonstrates how to use the Rebot tool to create JSON output files from Robot Framework execution results. The `--output` option specifies the output file with a `.json` extension.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Enumerating Dictionaries with FOR Loops in Robot Framework\nDESCRIPTION: This snippet shows how to enumerate dictionary items with their index using FOR IN ENUMERATE loops in Robot Framework. The examples cover both separate variables for index, key, and value, and a single variable containing the index, key, and value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${index}    ${key}    ${value}    IN ENUMERATE    &{dict}\n    Log    Key is '${key}' and value is '${value}' at index ${index}.\nEND\n```\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN ENUMERATE    &{dict}\n    Length Should Be    ${item}    3\n    Log    Key is '${item}[1]' and value is '${item}[2]' at index ${item}[0].\nEND\n```\n\n----------------------------------------\n\nTITLE: Union Type Date Conversion\nDESCRIPTION: This Python code expands the `parse_fi_date` function to accept both strings and integers as input using `typing.Union`. If the input is an integer, it's treated as seconds since the Unix epoch and converted to a date. Otherwise, it's parsed as a `dd.mm.yyyy` formatted date string. Input validation using regex is also included.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Resolving keyword conflicts with embedded arguments\nDESCRIPTION: This example demonstrates how Robot Framework 6.0 resolves conflicts when multiple keywords with embedded arguments match a given call. It shows a test case and two keyword definitions, where one keyword is a better match than the other.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nAutomatic conflict resolution\n    Execute \"ls\"\n    Execute \"ls\" with \"-lh\"\n\n*** Keywords ***\nExecute \"${cmd}\"\n    Log    Running command '${cmd}'.\n\nExecute \"${cmd}\" with \"${opts}\"\n    Log    Running command '${cmd}' with options '${opts}'.\n```\n\n----------------------------------------\n\nTITLE: User Keyword with Embedded and Normal Arguments (Robot Framework)\nDESCRIPTION: This Robot Framework code snippet demonstrates how to define a user keyword that combines embedded arguments (in the keyword name) with normal arguments. The 'Number of ${animals} is' keyword takes an embedded argument '${animals}' and a normal argument '${count}'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_3\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses is    2\n    Number of dogs is      3\n\n*** Keywords ***\nNumber of ${animals} is\n    [Arguments]    ${count}\n    Log to console    There are ${count} ${animals}.\n```\n\n----------------------------------------\n\nTITLE: Example IF/ELSE syntax in Robot Framework\nDESCRIPTION: This example demonstrates the basic IF syntax in Robot Framework. It shows how to conditionally execute keywords based on a condition. If the condition `${rc} > 0` is true, then `Some keyword` and `Another keyword` are executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n   IF    ${rc} > 0\n       Some keyword\n       Another keyword\n   END\n```\n\n----------------------------------------\n\nTITLE: Mixing Embedded and Normal Arguments in Robot Framework User Keywords\nDESCRIPTION: This Robot Framework example demonstrates how to mix embedded arguments (e.g., `${animals}`) and normal arguments (e.g., `${count}`) in user keywords. The `Number of ${animals} is` keyword takes the animal type as an embedded argument and the count as a normal argument, logging the number of animals to the console.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses is    2\n    Number of dogs is      3\n\n*** Keywords ***\nNumber of ${animals} is\n    [Arguments]    ${count}\n    Log to console    There are ${count} ${animals}.\n```\n\n----------------------------------------\n\nTITLE: Using Keywords with Variable Arguments in Robot Framework\nDESCRIPTION: This snippet demonstrates how to use keywords that accept variable arguments within Robot Framework test cases. It showcases calling keywords with varying numbers of arguments, including examples with required arguments and default values combined with variable arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_28\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nVarargs\n    Any Arguments\n    Any Arguments    argument\n    Any Arguments    arg 1    arg 2    arg 3    arg 4    arg 5\n    One Required     required arg\n    One Required     required arg    another arg    yet another\n    Also Defaults    required\n    Also Defaults    required    these two    have defaults\n    Also Defaults    1    2    3    4    5    6\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variable Assignment Continued\nDESCRIPTION: Illustrates that suite-level variables are accessible to subsequent tests. It demonstrates the scope and persistence of variables within a test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\nShould Be Equal    ${suite}    value\n```\n\n----------------------------------------\n\nTITLE: Recommended List/Dictionary Access Robot Framework\nDESCRIPTION: Demonstrates the recommended syntax for accessing list and dictionary items in Robot Framework, introduced in version 3.1. The `${var}[item]` syntax works universally for both lists and dictionaries, providing a more consistent and readable approach. This snippet illustrates the preferred method for accessing items in nested data structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2a1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n${var}[item]\n${var}[nested][item]\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with Manual Argument Conversion\nDESCRIPTION: This Python code demonstrates manual argument conversion within a keyword using `int()` and `robot.utils.is_truthy()`. It converts the `count` argument to an integer and checks the truthiness of the `case_insensitive` argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.utils import is_truthy\n\n\ndef example_keyword(count, case_insensitive):\n    count = int(count)\n    if is_truthy(case_insensitive):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with SkipOnFailure Option\nDESCRIPTION: This example demonstrates how to use the `--skiponfailure` command-line option to automatically mark tests with specific tags as skipped instead of failed. This is useful for tests that are not yet ready or that are testing functionalities that are still under development. The option accepts tag patterns to determine which tests should be skipped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n--skiponfailure not-ready\n--skiponfailure experimentalANDmobile\n```\n\n----------------------------------------\n\nTITLE: Resolving Keyword Conflicts with Embedded Arguments\nDESCRIPTION: This snippet demonstrates how Robot Framework 6.0 automatically resolves conflicts when multiple keywords match a call with embedded arguments. It prioritizes the most specific match to avoid execution failures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n   Automatic conflict resolution\n       Execute \"ls\"\n       Execute \"ls\" with \"-lh\"\n\n*** Keywords ***\nExecute \"${cmd}\"\n   Log    Running command '${cmd}'.\n\nExecute \"${cmd}\" with \"${opts}\"\n   Log    Running command '${cmd}' with options '${opts}'.\n```\n\n----------------------------------------\n\nTITLE: Inline IF Example Robot Framework\nDESCRIPTION: This example shows an inline IF statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nInline IF\n    IF    $condition1    Keyword    argument\n    IF    $condition2    RETURN\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Converter (Python)\nDESCRIPTION: This Python code snippet demonstrates how to define a custom argument converter that accepts two arguments: the value to convert and the library instance. This allows the converter to access the library's state during conversion.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef converter(value, library):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Documenting Custom Converters - Python\nDESCRIPTION: This example shows how to document custom converters to add helpful information to the Libdoc generated documentation. Documentation can be added to the converter function itself, or to the custom type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass FiDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        \"\"\"Date in ``dd.mm.yyyy`` format.\"\"\"\n        # ...\n\n\nclass UsDate(date):\n    \"\"\"Date in ``mm/dd/yyyy`` format.\"\"\"\n\n    @classmethod\n    def from_string(cls, value: str):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Libdoc Demonstration Library Source (Python)\nDESCRIPTION: This example specifies that the source code for the library is located at src/SupportingTools/LoggingLibrary.py and refers to it as a realistic example.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n   src/SupportingTools/LoggingLibrary.py\n```\n\n----------------------------------------\n\nTITLE: List Expansion with Item Access Robot Framework\nDESCRIPTION: This example demonstrates list expansion with item access using the `@{var}[items]` syntax in Robot Framework.  The variable `${var}` is assumed to have a value that is a dictionary containing an 'items' key with a list as its value. The loop iterates through the list accessed via the dictionary key 'items', logging each item. Prior to Robot Framework 4.0, this required multiple lines of code.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Inline IF Statements in Robot Framework\nDESCRIPTION: This snippet illustrates the use of inline IF statements in Robot Framework, including ELSE and ELSE IF branches. It shows the concise syntax for executing single statements conditionally.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Normal IF\n        IF    $condition1\n            Keyword    argument\n        END\n        IF    $condition2\n            RETURN\n        END\n\n    Inline IF\n        IF    $condition1    Keyword    argument\n        IF    $condition2    RETURN\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE\n        IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE IF/ELSE\n        IF    $cond1    Keyword 1    ELSE IF    $cond2    Keyword 2    ELSE IF    $cond3    Keyword 3    ELSE    Keyword 4\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE with assignment\n        ${var} =    IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE with assignment having multiple variables\n        ${host}    ${port} =    IF    $production    Get Production Config    ELSE    Get Testing Config\n```\n\n----------------------------------------\n\nTITLE: Configuring Suite Statistics Level - Robot Framework\nDESCRIPTION: This example shows how to control the depth of test suite levels displayed in the `Statistics by Suite` table using the `--suitestatlevel` command-line option.  The argument specifies the number of suite levels to show. A value of 3 shows the top 3 levels.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--suitestatlevel 3\n```\n\n----------------------------------------\n\nTITLE: Python Date Converter (dd.mm.yyyy)\nDESCRIPTION: This python snippet demonstrates a custom argument converter that parses a date string in the format `dd.mm.yyyy` and converts it into a `datetime.date` object. The `ROBOT_LIBRARY_CONVERTERS` dictionary registers this converter to be used when a function expects a `date` type argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n\n\n# Register converter function for the specified type.\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\n# Keyword using custom converter. Converter is resolved based on argument type.\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Using ELSE Branch in Robot Framework TRY/EXCEPT\nDESCRIPTION: This snippet demonstrates the use of an ELSE branch in a TRY/EXCEPT block. The ELSE branch is executed if the TRY block completes without any errors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nELSE branch\n    TRY\n        Some Keyword\n    EXCEPT    X\n        Log    Error 'X' occurred!\n    EXCEPT    Y\n        Log    Error 'Y' occurred!\n    ELSE\n        Log    No error occurred!\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Conversion with Validation in Python\nDESCRIPTION: Shows how to validate input values within a custom argument converter in Python for Robot Framework. The example uses regular expressions to validate the date format and raises a ValueError with a user-friendly message if the input is invalid.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.([0-9]{1,2})\\.([0-9]{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Flattening Keyword Structures with 'robot:flatten' Tag in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates how to flatten keyword structures during execution using the `robot:flatten` tag.  This reduces the size of the output.xml file and simplifies the log file by removing nested keyword structures, preserving the log messages from the child keywords.  The `Example` keyword will have its child keywords flattened in the output XML.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nExample\n    [Tags]    robot:flatten\n    Log    Robot\n    Log    Framework\n```\n\n----------------------------------------\n\nTITLE: Improved Public API for Languages\nDESCRIPTION: This enhancement makes the public `robot.api.Languages` API easier to use for external tools. This simplifies the process of integrating Robot Framework's language support into other applications.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: These commands demonstrate how to install or upgrade Robot Framework using pip. The first command installs the latest pre-release version, while the second installs a specific version (3.2rc2).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.2rc2\n```\n\n----------------------------------------\n\nTITLE: Flattened XML output of Simple Keyword\nDESCRIPTION: The XML output after the keyword has been flattened.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<kw name=\"Keyword\">\n  <doc>_*Content flattened.*_</doc>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Robot Framework Version with pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip.  This is useful for ensuring compatibility or reproducing specific behaviors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.3.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.1.3\n```\n\n----------------------------------------\n\nTITLE: Keyword Tagging with Decorator - Python\nDESCRIPTION: Shows how to add tags to library keywords using the `robot.api.deco.keyword` decorator in Python. The `tags` parameter is used to specify a list of tags for the keyword.  These tags are then associated with the decorated function.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n@keyword(tags=['tag1', 'tag2'])\ndef select_item(user, item):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling languages in Robot Framework data files\nDESCRIPTION: This snippet demonstrates how to enable a language directly within a Robot Framework data file using the `Language:` setting.  The value after the colon is interpreted the same way as with the `--language` option. This configuration affects parsing subsequent files and the whole execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\nLanguage: Finnish\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Restricting Value Types for Converter - Python\nDESCRIPTION: This code example shows how to restrict the input types that a custom converter accepts by adding a type hint to the converter function. In this case, the `parse_fi_date` function is updated to only accept string values, preventing it from being called with other types like integers.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Flattening Keywords with robot:flatten Tag in Robot Framework\nDESCRIPTION: This snippet shows how to flatten a keyword during execution using the `robot:flatten` tag in Robot Framework. This tag instructs Robot Framework to flatten the keyword structure, resulting in a smaller output.xml file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Example\n        [Tags]    robot:flatten\n        Log    Robot\n        Log    Framework\n```\n\n----------------------------------------\n\nTITLE: RETURN Statement Usage Robot Framework\nDESCRIPTION: Demonstrates various uses of the RETURN statement in Robot Framework keywords. It shows returning values at the end of a keyword, returning values conditionally, and exiting the keyword prematurely.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_24\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Return at the end\n        Some Keyword\n        ${result} =    Another Keyword\n        RETURN    ${result}\n\n    Return conditionally\n        IF    ${condition}\n            RETURN    Something\n        ELSE\n            RETURN    Something else\n        END\n\n    Early return\n        IF    ${not applicable}    RETURN\n        Some Keyword\n        Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Robot Framework User Keyword with Varargs and Named Arguments\nDESCRIPTION: Defines a Robot Framework user keyword that accepts variable number of arguments (`@{varargs}`) and a named argument (`${named}`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWith Varargs\n    [Arguments]    @{varargs}    ${named}\n    Log Many    @{varargs}    ${named}\n```\n\n----------------------------------------\n\nTITLE: RETURN in WHILE Loop Robot Framework\nDESCRIPTION: Shows how to use the RETURN statement in a WHILE loop in Robot Framework to exit the entire user keyword prematurely. If the condition `${x} == 5` is met, the RETURN statement is executed, and the keyword exits without executing the `Fail` keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Keyword with WHILE using RETURN\n        WHILE    True\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 5    RETURN\n        END\n        Fail    This is not executed\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case with Named-Only Arguments\nDESCRIPTION: This Robot Framework test case demonstrates how to call a Python keyword that uses named-only arguments. The `case_sensitive` argument is passed by name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Sort Words    Foo    bar    baZ\n    Sort Words    Foo    bar    baZ    case_sensitive=True\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases Using Keyword-Only Arguments\nDESCRIPTION: This Robot Framework test case demonstrates the usage of keywords with keyword-only arguments. It calls the `Sort Words` and `Strip Spaces` keywords, showcasing how to pass values to the keyword-only arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_34\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Sort Words    Foo    bar    baZ\n    Sort Words    Foo    bar    baZ    case_sensitive=True\n    Strip Spaces    ${word}    left=False\n```\n\n----------------------------------------\n\nTITLE: Listener V3 - start_library_keyword\nDESCRIPTION: Example of a listener version 3 that prints information about the executed keyword and the library it belongs to. It accesses the library instance to inspect its state, including the library name, source, line number, scope, and current instance.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: Using JSON Variable File RobotFramework\nDESCRIPTION: This Robot Framework snippet demonstrates how to use a JSON variable file. It imports the variables from the `example.json` file and then uses them in a test case to verify their values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nVariables        example.json\n\n*** Test Cases ***\nExample\n    Should Be Equal    ${STRING}     Hello, world!\n    Should Be Equal    ${INTEGER}    ${42}\n```\n\n----------------------------------------\n\nTITLE: Python Strict Type Validation with None Converter\nDESCRIPTION: This python snippet shows an alternative way to achieve strict type validation by setting the converter for a custom type to `None`. This has the same effect as the previous example, ensuring that the keyword only accepts arguments of the specified type. This is a more concise approach introduced in Robot Framework 6.0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nclass StrictType:\n    pass\n\n\nROBOT_LIBRARY_CONVERTERS = {StrictType: None}\n\n\ndef example(argument: StrictType):\n    assert isinstance(argument, StrictType)\n```\n\n----------------------------------------\n\nTITLE: ZIP Loop Modes in Robot Framework\nDESCRIPTION: Demonstrates the different modes available for ZIP loops in Robot Framework: STRICT, SHORTEST, and LONGEST, including custom fill values. Shows how list lengths impact loop execution based on the selected mode.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_19\n\nLANGUAGE: Robot Framework\nCODE:\n```\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSTRICT mode\n    [Documentation]    This loop fails due to lists lengths being different.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=STRICT\n        Log    ${c}: ${n}\n    END\n\nSHORTEST mode\n    [Documentation]    This loop executes three times.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=SHORTEST\n        Log    ${c}: ${n}\n    END\n\nLONGEST mode\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `None`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST\n        Log    ${c}: ${n}\n    END\n\nLONGEST mode with custom fill value\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `-`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST    fill=-\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Listener v3 example: start_keyword and end_while\nDESCRIPTION: This Python code defines a Robot Framework listener that prints information about started keywords and ended WHILE loops. It utilizes the `KeywordData`, `KeywordResult`, `WhileData`, and `WhileResult` classes from the `robot.running` and `robot.result` modules to access keyword and loop data.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, While as WhileData\nfrom robot.result import Keyword as KeywordResult, While as WhileResult\n\n\ndef start_keyword(data: KeywordData, result: KeywordResult):\n    print(f\"Keyword '{result.full_name}' used on line {data.lineno} started.\")\n\n\ndef end_while(data: WhileData, result: WhileResult):\n    print(f\"WHILE loop on line {data.lineno} ended with status {result.status} \"\n          f\"after {len(result.body)} iterations.\")\n```\n\n----------------------------------------\n\nTITLE: Example Listener (version 2) Writing to File\nDESCRIPTION: This example implements a listener that writes all information to a text file in a temporary directory. The filename can be given from the command line with a default value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport os.path\nimport tempfile\n\n\nclass Example:\n    ROBOT_LISTENER_API_VERSION = 2\n\n    def __init__(self, file_name='listen.txt'):\n        path = os.path.join(tempfile.gettempdir(), file_name)\n        self.file = open(path, 'w')\n\n    def start_suite(self, name, attrs):\n        self.file.write(\"%s '%s'\\n\" % (name, attrs['doc']))\n\n    def start_test(self, name, attrs):\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Nested FOR and IF Loops\nDESCRIPTION: This snippet shows how to nest FOR and IF loops in Robot Framework. It iterates through rows and cells in a data structure, and processes each cell if it's not equal to \"IGNORE\".\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Generating XML Spec with HTML documentation\nDESCRIPTION: This snippet generates an XML spec file for a library, explicitly setting the format to XML and documentation format to HTML using the `--format` and `-s` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nlibdoc --format xml -s html MyLibrary MyLibrary.xml\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests with Reserved Tag\nDESCRIPTION: Illustrates how to use the `robot:exclude` reserved tag to unconditionally exclude test cases. Also shows how to dynamically exclude tests using a variable containing the reserved tag.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${EXCLUDE}        robot:exclude\n\n*** Test Cases ***\nLiteral\n   [Documentation]    Unconditionally excluded.\n   [Tags]    robot:exclude\n   Log    This is not executed\n\nAs variable\n   [Documentation]    Excluded unless ${EXCLUDE} is set to a different value.\n   [Tags]    ${EXCLUDE}\n   Log    This is not executed by default\n```\n\n----------------------------------------\n\nTITLE: Using @library decorator to set library scope and version in Robot Framework\nDESCRIPTION: The `@library` decorator provides a convenient way to set library scope, version, documentation format, and listener. It replaces the need to define `ROBOT_LIBRARY_SCOPE` and `ROBOT_LIBRARY_VERSION` as class attributes.  It is necessary to import `library` from `robot.api.deco`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', version='3.2b1')\nclass NewWay:\n\n    # actual library code\n\n\nclass OldWay:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_VERSION = '3.2b1'\n\n    # actual library code\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested List and Dictionary Items in Robot Framework\nDESCRIPTION: This code demonstrates the new syntax for accessing nested list and dictionary variable items in Robot Framework 3.1. It allows accessing deeply nested items using the `${var}[key][0]` syntax, which is useful when working with JSON objects commonly used with REST interfaces.  The old syntax `@{var}[0]` and `&{var}[key]` still works but it will be `deprecated in the future`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_15\n\nLANGUAGE: Robot Framework\nCODE:\n```\n${var}[key][0]\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\n${var}[0]\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\n${var}[key]\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\n@{var}[0]\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\n&{var}[key]\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords with @library and @keyword Decorators (Python)\nDESCRIPTION: Shows how to use the `@library` decorator in conjunction with the `@keyword` decorator to explicitly define which methods in a library class should be treated as Robot Framework keywords. This enforces a more explicit keyword definition. Requires `robot.api.deco.library` and `robot.api.deco.keyword`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library, keyword\n\n\n@library\nclass Example:\n\n    @keyword\n    def example_keyword(self):\n        # ...\n\n    def not_keyword(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Output.xml Timestamp Format Change (XML)\nDESCRIPTION: This snippet illustrates the change in timestamp format within the output.xml file.  The older format, `YYYYMMDD HH:MM:SS.mmm`, is replaced with the ISO 8601 compatible format `YYYY-MM-DDTHH:MM:SS.mmmmmm`. In addition, `starttime` and `endtime` attributes are replaced with `start` and `elapsed`, and `timestamp` is replaced with `time`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Evaluate Keyword with Nested Module in Robot Framework\nDESCRIPTION: This snippet demonstrates a workaround for accessing nested modules, specifically `selenium.webdriver.ChromeOptions`, using the `Evaluate` keyword and the `modules` argument. This resolves issues where importing the root module doesn't automatically import submodules.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nDoes not work due to nested module structure\n    Log    ${{selenium.webdriver.ChromeOptions()}}\n\nEvaluate keyword with nested module\n    ${options} =    Evaluate    selenium.webdriver.ChromeOptions()    modules=selenium.webdriver\n    Log    ${options}\n```\n\n----------------------------------------\n\nTITLE: Run tests with python -m robot (Python)\nDESCRIPTION: This command executes Robot Framework tests using the Python module execution feature. This is particularly useful when working with multiple Python interpreters, such as `python3`, `jython`, or `ipy`. A limitation is that it does not work with Python 2.6.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a2.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npython -m robot\n```\n\n----------------------------------------\n\nTITLE: Output.xml Keyword Name Change (XML)\nDESCRIPTION: This snippet showcases the change in how keyword names are stored within the output.xml file. The `library` attribute for keywords, which previously indicated the library or resource file, is now replaced with the `owner` attribute. Also, `sourcename` attribute, holding original name stored with keywords using embedded arguments, is renamed to `source_name`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: BREAK and CONTINUE Example Robot Framework\nDESCRIPTION: This example demonstrates the use of `BREAK` and `CONTINUE` statements within a `WHILE` loop in Robot Framework.  It shows how to exit the loop prematurely using `BREAK` when a condition is met and how to skip iterations using `CONTINUE` based on another condition. Requires Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${x}              10\n\n*** Test Cases ***\nBREAK and CONTINUE\n    WHILE    True\n        Log    ${x}\n        ${x} =    Evaluate    ${x} - 1\n        IF    ${x} == 0\n            Log    We are done!\n            BREAK\n        END\n        IF    ${x} % 2 == 0    CONTINUE    # New inline IF.\n        Log    Only executed if ${x} is odd.\n    END\n```\n\n----------------------------------------\n\nTITLE: Dictionary Variable Usage - Robot Framework\nDESCRIPTION: Demonstrates how to use a dictionary variable in Robot Framework. The first example passes individual key-value pairs as named arguments to a keyword. The second example passes the entire dictionary as a single argument using the `&{DICT}` syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample 1\n    My Keyword    key=value    second=2    third=${3}\nExample 2\n    My Keyword    &{DICT}\n```\n\n----------------------------------------\n\nTITLE: Creating TestSuite from JSON data using from_json() - Python\nDESCRIPTION: This snippet demonstrates how to create a Robot Framework TestSuite object from JSON data using the `from_json()` method. It shows creating a suite from a JSON file and from a JSON string. Dependencies: robot.running.TestSuite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Create suite from JSON data in a file.\nsuite = TestSuite.from_json('data.rbt')\n# Create suite from a JSON string.\nsuite = TestSuite.from_json('{\"name\": \"Suite\", \"tests\": [{\"name\": \"Test\"}]}')\n```\n\n----------------------------------------\n\nTITLE: Assigning Keyword Return Values to List and Dictionary Items in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates how to assign the return values from keywords to list and dictionary items. This allows for more direct manipulation of data structures within Robot Framework tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n${list}[0] =    Keyword\n${dict}[key] =    Keyword\n${result}[users][0] =    Keyword\n```\n\n----------------------------------------\n\nTITLE: Returning Object Value from Keyword Python\nDESCRIPTION: This example demonstrates returning an object from a keyword, enabling access to its attributes in Robot Framework using extended variable syntax. It assumes `MyObject` is a class defined in `mymodule`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nfrom mymodule import MyObject\n\n\ndef return_object(name):\n    return MyObject(name)\n```\n\n----------------------------------------\n\nTITLE: Using JSON Variable File in Robot Framework\nDESCRIPTION: This snippet shows how to use a JSON variable file in Robot Framework. The `Variables` setting specifies the path to the JSON file, and the variables defined in the file can be used in test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\n    Variables        example.json\n\n    *** Test Cases ***\n    Example\n        Should Be Equal    ${STRING}     Hello, world!\n        Should Be Equal    ${INTEGER}    ${42}\n```\n\n----------------------------------------\n\nTITLE: Adding Groups Programmatically\nDESCRIPTION: This Python code shows how to programmatically add a group with two keywords to the end of each test using a pre-run modifier. It demonstrates using the Robot Framework API to manipulate the test structure. This uses `robot.api`\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import SuiteVisitor\n\n\nclass GroupAdder(SuiteVisitor):\n\n    def start_test(self, test):\n        group = test.body.create_group(name='Example')\n        group.body.create_keyword(name='Log', args=['Hello, world!'])\n        group.body.create_keyword(name='No Operation')\n```\n\n----------------------------------------\n\nTITLE: Using BuiltIn Library in Python\nDESCRIPTION: This Python snippet shows how to use the `BuiltIn` library in Robot Framework to access variables and detect if Robot Framework is running. It's important to register methods that use `run_keyword` variants as *run keywords*.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nimport os.path\nfrom robot.libraries.BuiltIn import BuiltIn\n\n\ndef do_something(argument):\n    builtin = BuiltIn()\n    output = do_something_that_creates_a_lot_of_output(argument)\n    if builtin.robot_running:\n        output_dir = builtin.replace_variables('${OUTPUT_DIR}')\n    else:\n        output_dir = '.'\n    with open(os.path.join(output_dir, 'output.txt'), 'w') as file:\n        file.write(output)\n    print('*HTML* Output written to <a href=\"output.txt\">output.txt</a>')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Keyword Flattening Example\nDESCRIPTION: This example demonstrates how to flatten keywords using the `robot:flatten` tag within a Robot Framework keyword definition.  When executed, the keyword's content (except for log messages) will be removed during parsing, and only the log messages will be retained in the output file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nExample\n    [Tags]    robot:flatten\n    Log    Keywords and the loop are removed, but logged messages are preserved.\n    FOR     ${i}     IN RANGE     1    101\n         Log    Iteration ${i}/100.\n    END\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Keyword Exposure (Class-Based Library - Python)\nDESCRIPTION: This snippet shows how to disable automatic keyword exposure in a class-based Robot Framework library by setting the `ROBOT_AUTO_KEYWORDS` attribute to `False`.  Only methods decorated with `@keyword` will be exposed as keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Example:\n    ROBOT_AUTO_KEYWORDS = False\n```\n\n----------------------------------------\n\nTITLE: Robot Framework ZIP Loop Example\nDESCRIPTION: This example demonstrates the default behavior of the FOR IN ZIP loop in Robot Framework, where iteration stops when the shortest list is exhausted. Items from longer lists are ignored. This can lead to unexpected behavior if the lengths of the lists are not carefully managed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{ANIMALS}    dog      cat    horse    cow    elephant\n@{ELÄIMET}    koira    kissa\n\n*** Test Cases ***\nExample\n    FOR    ${en}    ${fi}    IN ZIP    ${ANIMALS}    ${ELÄIMET}\n        Log    ${en} is ${fi} in Finnish\n    END\n```\n\n----------------------------------------\n\nTITLE: Using the @not_keyword decorator\nDESCRIPTION: This code snippet illustrates the usage of the `@not_keyword` decorator to prevent a function or method from being recognized as a Robot Framework keyword.  This is useful for excluding helper functions or methods from being exposed as keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import not_keyword\n\n\ndef example_keyword(self):\n    # ...\n\n@not_keyword\ndef not_exposed_as_keyword(self):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Simple Pattern Examples for Test Matching\nDESCRIPTION: Demonstrates using simple patterns to match test cases based on their names or tags. These patterns support wildcards like `*` and `?`, and character sets using brackets, and the matching is case, space, and underscore insensitive.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n--test Example*        # Matches tests with name starting 'Example'.\n--test Example[1-2]    # Matches tests 'Example1' and 'Example2'.\n--include f??          # Matches tests with a tag that starts with 'f' is three characters long.\n```\n\n----------------------------------------\n\nTITLE: Argument Conversion Example in Robot Framework\nDESCRIPTION: Illustrates the change in argument conversion logic in Robot Framework 6.1.  Previously, unrecognized types would prevent further conversion attempts.  Now, unrecognized types are skipped, allowing subsequent conversion attempts to proceed. The example shows a Python function with a `Union` type hint, and how the argument `42` is now correctly converted to an integer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndef example(arg: Union[UnknownType, int]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: New Style For Loop Robot Framework\nDESCRIPTION: This snippet demonstrates the new-style for loop syntax in Robot Framework, which is the recommended approach. The loop starts with `FOR`, does not require escaping keywords inside the loop, and is explicitly closed with an `END` marker.  This syntax is more readable and maintainable than the old style and avoids deprecation warnings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_4\n\nLANGUAGE: RobotFramework\nCODE:\n```\n| FOR | ${x} | IN | 1 | 2\n|     | Log  | ${x}\n| END |\n```\n\n----------------------------------------\n\nTITLE: Serializing TestSuite to JSON using to_json\nDESCRIPTION: This code snippet demonstrates how to serialize a Robot Framework TestSuite object to JSON data, both as a string and to a file with custom indentation.  It relies on the `robot.running` module for TestSuite management and file system operations. The resulting JSON can be used for data transfer, storage, or alternative data formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Construct suite based on data on the file system.\nsuite = TestSuite.from_file_system('/path/to/data')\n\n# Get JSON data as a string.\ndata = suite.to_json()\n\n# Save JSON data to a file with custom indentation.\nsuite.to_json('data.rbt', indent=2)\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example of String Arguments\nDESCRIPTION: This Robot Framework test case illustrates that arguments are passed as Unicode strings by default when no type information is provided.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_38\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Example Keyword    42    False\n```\n\n----------------------------------------\n\nTITLE: Removing Globally Set Tags with `-tag` Syntax in Robot Framework\nDESCRIPTION: Demonstrates how to remove tags that are set globally (e.g., in the Settings section) from individual tests using the `-tag` syntax. This allows for more granular control over tag assignment at the test case level.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - npm\nDESCRIPTION: This command installs the necessary dependencies for the project using npm. It downloads and installs the packages defined in the `package.json` file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/src/web/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Path Handling Update in Listener Version 3 Methods in Robot Framework\nDESCRIPTION: This snippet describes how paths passed to listener version 3 methods (`output_file`, `log_file`) have changed from strings to `pathlib.Path` objects. If string representation is required, the path can be converted by using `str(path)`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nstr(path)\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Tasks Header\nDESCRIPTION: This code snippet shows how to define tasks instead of test cases by using the `*** Tasks ***` header. This activates the RPA mode, causing reports and logs to use the term \"task\" instead of \"test\".\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nExample Task\n    Log    Hello, Task!\n```\n\n----------------------------------------\n\nTITLE: Robot Framework ELSE IF Example\nDESCRIPTION: This snippet demonstrates how to use ELSE IF branches in Robot Framework. It evaluates multiple conditions sequentially and executes the block corresponding to the first true condition. If none of the conditions are true, the optional ELSE block is executed. The example uses the `$rc` variable format to ensure the variable's value is used directly in the condition evaluation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Positive keyword\n    ELSE IF    $rc < 0\n        Negative keyword\n    ELSE IF    $rc == 0\n        Zero keyword\n    ELSE\n        Fail    Unexpected rc: ${rc}\n    END\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple External Parser\nDESCRIPTION: This example demonstrates a simple external parser for Robot Framework. It defines a module-level `parse` function that takes a source file path and returns a `TestSuite` object.  The `EXTENSION` variable specifies the file extension handled by the parser. It uses the `robot.api` module to create the test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api import TestSuite\n\nEXTENSION = '.example'\n\ndef parse(source):\n    suite = TestSuite(name='Example', source=source)\n    test = suite.tests.create(name='Test')\n    test.body.create_keyword(name='Log', args=['Hello!'])\n    return suite\n```\n\n----------------------------------------\n\nTITLE: Old Style For Loop Robot Framework\nDESCRIPTION: This snippet demonstrates the old-style for loop syntax in Robot Framework, which has been deprecated in version 3.2 when using the pipe-separated format.  The loop starts with `:FOR` and each line inside the loop is escaped with a backslash.  The use of this syntax will trigger deprecation warnings and is scheduled for removal in future versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_3\n\nLANGUAGE: RobotFramework\nCODE:\n```\n| :FOR | ${x} | IN | 1 | 2\n|      | Log  | ${x}\n```\n\n----------------------------------------\n\nTITLE: New Style FOR Loop Example\nDESCRIPTION: This snippet demonstrates the new-style FOR loop syntax in Robot Framework, which is recommended for Robot Framework 3.2 and later. It includes the FOR keyword and an explicit END marker.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n| FOR | ${x} | IN | 1 | 2\n|     | Log  | ${x}\n| END |\n```\n\n----------------------------------------\n\nTITLE: Keyword Structure Without Flattening XML\nDESCRIPTION: This XML snippet illustrates the structure of the `output.xml` file when a keyword is executed without flattening. It shows the nested structure created by the `Log` keywords within the `Example` keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Robot</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.663\"/>\n  </kw>\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Framework</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n  </kw>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Create Robot Framework Test Suite from JSON (Python)\nDESCRIPTION: This Python code snippet demonstrates how to create a Robot Framework test suite from JSON data using the `TestSuite.from_json` method. The suite is loaded from a JSON file named 'tests.rbt'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api import TestSuite\n\nsuite = TestSuite.from_json('tests.rbt')\n```\n\n----------------------------------------\n\nTITLE: XML output of Simple Keyword\nDESCRIPTION: The XML output that is generated when the simple keyword is run.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<kw name=\"Keyword\">\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Robot</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.663\"/>\n  </kw>\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Framework</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n  </kw>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This command installs a specific version of Robot Framework (5.0a1) using pip. This is useful for testing or using a specific pre-release version of the framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==5.0a1\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Robot Framework Version with pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip. By specifying `robotframework==7.2.1`, the installer will ensure that exactly version 7.2.1 is installed, avoiding any potential compatibility issues with newer releases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.1.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\npip install robotframework==7.2.1\n```\n\n----------------------------------------\n\nTITLE: Set Local Variable Keyword Addition (Robot Framework)\nDESCRIPTION: This snippet refers to the addition of the `Set Local Variable` keyword. This enhancement provides a way to set variables within the local scope of a keyword, improving code organization and preventing variable conflicts.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_11\n\nLANGUAGE: Robot Framework\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE with multiple variable assignment Robot Framework\nDESCRIPTION: This example shows an inline IF/ELSE statement with multiple variable assignment.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nInline IF/ELSE with assignment having multiple variables\n    ${host}    ${port} =    IF    $production    Get Production Config    ELSE    Get Testing Config\n```\n\n----------------------------------------\n\nTITLE: Automatic argument conversion with Python 3 annotations\nDESCRIPTION: This example shows how to use Python 3 function annotations to specify argument types for Robot Framework keywords. Robot Framework will automatically convert the arguments to the specified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Custom Type Conversion in Python\nDESCRIPTION: This Python code defines custom date types (FiDate and UsDate) and their corresponding conversion functions. It uses the `@library` decorator to register these converters for use in Robot Framework keywords. The example highlights the creation of custom types extending existing types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Command Line Search for Deprecated List Access\nDESCRIPTION: This snippet shows how to use the `pss` tool to search for the deprecated list item access syntax `@{var}[item]` in Robot Framework test data files. The `-ai` option performs a case-insensitive search.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_8\n\nLANGUAGE: RobotFramework\nCODE:\n```\npss -ai \"@\\{.+\\}\\[\" path/to/tests\n```\n\n----------------------------------------\n\nTITLE: Explicit exact match in Robot Framework EXCEPT\nDESCRIPTION: This example uses the EQUALS: prefix to ensure an exact match of the error message in the EXCEPT branch. This is the default behavior if no prefix is specified.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExplicit exact match\n    TRY\n        Some Keyword\n    EXCEPT    EQUALS: ValueError: invalid literal for int() with base 10: 'ooops'\n        Error Handler\n    EXCEPT    EQUALS: Error 13 occurred\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Rebot Usage Example\nDESCRIPTION: Demonstrates different ways to use Rebot with XML output files. Includes creating a report with all test cases, a report with a subset of tests based on the 'smoke' tag, and naming the resulting suite 'Smoke_Tests'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrebot output.xml\nrebot path/to/output_file.xml\nrebot --include smoke --name Smoke_Tests c:\\results\\output.xml\n```\n\n----------------------------------------\n\nTITLE: Normal IF Example Robot Framework\nDESCRIPTION: Illustrates the standard IF/ELSE structure in Robot Framework, which requires an END marker. Each branch can contain multiple statements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Normal IF\n        IF    $condition1\n            Keyword    argument\n        END\n        IF    $condition2\n            RETURN\n        END\n```\n\n----------------------------------------\n\nTITLE: Defining Enum in Python\nDESCRIPTION: This Python code snippet defines an enumeration `Direction` using the `Enum` class. It demonstrates how to create members within the enumeration and shows an example keyword `kw` that takes a `Direction` argument. This is relevant for Robot Framework's ability to handle Enum types for argument conversion and documentation generation by Libdoc.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass Direction(Enum):\n    \"\"\"Move direction.\"\"\"\n    NORTH = auto()\n    NORTH_WEST = auto()\n\n\ndef kw(arg: Direction):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Listener example: Print keyword and library info (Python)\nDESCRIPTION: This Python code shows how to access library information within a listener function. It uses `robot.running` and `robot.result` to extract details such as the library name, source, scope, and instance related to an executed keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.2 rc1 using pip\nDESCRIPTION: This code snippet demonstrates how to install the Robot Framework 3.2 release candidate 1 using the pip package installer.  It shows the use of the `--pre` and `--upgrade` flags for installing the latest pre-release, and a specific version installation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.2rc1\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Root Suite\nDESCRIPTION: Shows how to configure the virtual root suite when running multiple suites by using initialization files (__init__.robot). This allows specifying suite setup and teardown for the root suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_20\n\nLANGUAGE: Robot Framework\nCODE:\n```\nrobot __init__.robot first.robot second.robot\n```\n\n----------------------------------------\n\nTITLE: Java Example: run_keyword with optional kwargs (overloaded)\nDESCRIPTION: This Java example demonstrates how to handle optional keyword arguments (`kwargs`) in the `run_keyword` method using method overloading. One version takes only the keyword name and a list of arguments, while the other includes a map for keyword arguments. This approach supports backwards compatibility and allows for handling named arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/RemoteLibrary.rst#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic Map run_keyword(String name, List args) {\n    // ...\n}\n\npublic Map run_keyword(String name, List args, Map kwargs) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case using Named-Only Arguments\nDESCRIPTION: Robot Framework test case showing how to call a keyword with named-only arguments.  `case_sensitive` is passed as a named argument to `Sort Words`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Sort Words    Foo    bar    baZ\n    Sort Words    Foo    bar    baZ    case_sensitive=True\n```\n\n----------------------------------------\n\nTITLE: Combining Outputs with Rebot\nDESCRIPTION: Illustrates how to combine multiple XML output files using Rebot. Includes combining two specific files and combining all XML files in a directory. The `--name` option is used to give a meaningful name to the combined test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrebot output1.xml output2.xml\nrebot outputs/*.xml\nrebot --name Browser_Compatibility firefox.xml opera.xml safari.xml ie.xml\nrebot --include smoke --name Smoke_Tests c:\\results\\*.xml\n```\n\n----------------------------------------\n\nTITLE: Library class recognition with @library decorator\nDESCRIPTION: This describes the enhancement in Robot Framework 7.2 where library classes decorated with the `@library` decorator are recognized regardless of their name. It enhances how Robot Framework identifies library classes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n- Module is not used as a library if it contains a class decorated with the\n  `@library` decorator (`#4959`_).\n...Recognize library classes decorated with `@library` decorator regardless their name (`#4959`_)\n```\n\n----------------------------------------\n\nTITLE: RETURN Statement in Robot Framework Keywords\nDESCRIPTION: Shows how to use the RETURN statement in Robot Framework keywords to return values or exit the keyword prematurely. It replaces the old '[Return]' setting and 'Return From Keyword' keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Return at the end\n        Some Keyword\n        ${result} =    Another Keyword\n        RETURN    ${result}\n\n    Return conditionally\n        IF    ${condition}\n            RETURN    Something\n        ELSE\n            RETURN    Something else\n        END\n\n    Early return\n        IF    ${not applicable}    RETURN\n        Some Keyword\n        Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Capturing Error Message in Robot Framework\nDESCRIPTION: This code snippet illustrates how to capture the error message into a variable using the `AS ${var}` syntax in the EXCEPT block. The captured error message can then be used within the error handling keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nCapture error\n    TRY\n        Some Keyword\n    EXCEPT    GLOB: ValueError: *    AS   ${error}\n        Error Handler 1    ${error}\n    EXCEPT    REGEXP: [Ee]rror \\\\d+    GLOB: ${pattern}    AS    ${error}\n        Error Handler 2    ${error}\n    EXCEPT    AS    ${error}\n        Error Handler 3    ${error}\n    END\n```\n\n----------------------------------------\n\nTITLE: Implicit Argument Type Conversion from Default Values - Robot Framework\nDESCRIPTION: Illustrates how Robot Framework infers argument types based on default values. In this example, 'count' is inferred as 'int' and 'case_insensitive' as 'bool'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Including source code from a file using sourcecode directive\nDESCRIPTION: This snippet demonstrates how to include source code from an external file within the reStructuredText document using the `.. sourcecode::` directive. The file path is relative to the root directory of the user guide. This is used to include examples in the documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n..sourcecode:: python\n\n   ExtendingRobotFramework/check_test_times.py\n```\n\n----------------------------------------\n\nTITLE: Selecting Variables to Include with Underscore Prefix (Python)\nDESCRIPTION: Demonstrates how to exclude attributes from being treated as variables by prefixing them with an underscore, which is useful for hiding helper functions or classes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport math as _math\n\ndef _get_area(diameter):\n    radius = diameter / 2.0\n    area = _math.pi * radius * radius\n    return area\n\nAREA1 = _get_area(1)\nAREA2 = _get_area(2)\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variable Definition with Line Continuation\nDESCRIPTION: Demonstrates how to define a long string variable in Robot Framework, splitting it across multiple lines using the `...` continuation marker. The lines are joined together with a space by default.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Long value\n        VAR    ${long}\n        ...    This value is rather long.\n        ...    It has been split to multiple lines.\n        ...    Parts will be joined together with a space.\n```\n\n----------------------------------------\n\nTITLE: Support for Micro and Nanosecond Time Strings\nDESCRIPTION: This enhancement adds support to parse time strings containing micro and nanoseconds, such as `100 ns`. This allows for more precise time-related operations within tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Implementing a Parser Module in Python\nDESCRIPTION: This snippet demonstrates a simple parser implemented as a Python module. It defines the EXTENSION and a parse function that creates a dummy test suite with one test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ParserInterface.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import TestSuite\n\n\nEXTENSION = '.example'\n\n\ndef parse(source):\n    suite = TestSuite(name='Example', source=source)\n    test = suite.tests.create(name='Test')\n    test.body.create_keyword(name='Log', args=['Hello!'])\n    return suite\n```\n\n----------------------------------------\n\nTITLE: Define Robot Framework Keyword\nDESCRIPTION: This code snippet defines a Robot Framework keyword named `Suite Setup`. The keyword logs the value of the variable `${msg}` to the console. This keyword is designed to be called during suite setup to verify basic setup functionality.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/with_init/__init__.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n** Keywords **\nSuite Setup      Log      ${msg}     # No more arguments!\n```\n\n----------------------------------------\n\nTITLE: Documenting Converter Functions with Type Hints in Python\nDESCRIPTION: This snippet shows how to document converter functions using type hints, and the documentation will be automatically included in Libdoc outputs. It demonstrates adding documentation to converter functions that are registered for existing types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nclass FiDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        \"\"\"Date in ``dd.mm.yyyy`` format.\"\"\"\n        ...\n\n\nclass UsDate(date):\n    \"\"\"Date in ``mm/dd/yyyy`` format.\"\"\"\n\n    @classmethod\n    def from_string(cls, value: str):\n        ...\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop Robot Framework\nDESCRIPTION: This example demonstrates the use of the WHILE loop in Robot Framework, which executes as long as the specified condition is true. It uses the Evaluate keyword to decrement a variable and the Log keyword to print its value during each iteration. The loop condition is evaluated in Python, allowing the use of variables and built-in functions. BREAK is used to exit the loop, and CONTINUE is used to skip to the next iteration, often in conjunction with inline IF statements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    ${x}              10\n\n    *** Test Cases ***\n    Loop as long as condition is True\n        WHILE    ${x} > 0\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n        END\n\n    BREAK and CONTINUE\n        WHILE    True\n            Log    ${x}\n            ${x} =    Evaluate    ${x} - 1\n            IF    ${x} == 0\n                Log    We are done!\n                BREAK\n            END\n            IF    ${x} % 2 == 0    CONTINUE    # New inline IF.\n            Log    Only executed if ${x} is odd.\n        END\n```\n\n----------------------------------------\n\nTITLE: Basic TRY/EXCEPT in Robot Framework\nDESCRIPTION: This example demonstrates the basic usage of the TRY/EXCEPT syntax in Robot Framework for handling specific error messages. If 'Some Keyword' fails with the message 'Error message', then 'Error Handler Keyword' is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nFirst example\n    TRY\n        Some Keyword\n    EXCEPT    Error message\n        Error Handler Keyword\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Executing multiple test files with custom name\nDESCRIPTION: Shows how to execute multiple Robot Framework test case files, and how to override the default top-level suite name using the `--name` option. This is useful when the default name generated by concatenating the file names is too long or complicated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot my_tests.robot your_tests.robot\nrobot --name Example path/to/tests/pattern_*.robot\n```\n\n----------------------------------------\n\nTITLE: Collections: Get From Dictionary default value\nDESCRIPTION: The `Get From Dictionary` keyword now accepts a default value if the key is missing.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Configuring System Log in Bash\nDESCRIPTION: This bash script configures the Robot Framework system log by setting the `ROBOT_SYSLOG_FILE` environment variable to specify the log file path and the `ROBOT_SYSLOG_LEVEL` environment variable to set the log level. The script then executes a Robot Framework test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nexport ROBOT_SYSLOG_FILE=/tmp/syslog.txt\nexport ROBOT_SYSLOG_LEVEL=DEBUG\n\nrobot --name Syslog_example path/to/tests\n```\n\n----------------------------------------\n\nTITLE: Nested FOR and IF/ELSE Loops in Robot Framework\nDESCRIPTION: This Robot Framework example showcases nested FOR loops with an IF/ELSE structure inside. It iterates through rows and cells, processing each cell unless its value is 'IGNORE'.  This demonstrates the ability to nest control structures, a feature added in Robot Framework 4.0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Limiting WHILE Loop Iterations\nDESCRIPTION: This snippet demonstrates how to limit the number of iterations in a WHILE loop using the `limit` parameter. It shows examples of limiting by iteration count, time, and disabling the limit.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Limit as iteration count\n        WHILE    True    limit=100\n            Log    This is run 100 times.\n        END\n\n    Limit as time\n        WHILE    True    limit=10 seconds\n            Log    This is run 10 seconds.\n        END\n\n    No limit\n        WHILE    True    limit=NONE\n            Log    This must be forcefully stopped.\n        END\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Type Hints (Python 3)\nDESCRIPTION: This Python 3 code shows how to use function annotations to explicitly specify argument types for Robot Framework keywords. This allows Robot Framework to automatically convert arguments to the specified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Listener v3 example: start_library_keyword\nDESCRIPTION: This Python code defines a Robot Framework listener that prints information about the executed keyword and the library it belongs to.  It accesses the library name, source, and scope using `implementation.owner` and other attributes. Requires `robot.running` and `robot.result` modules.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: Converting Resource File to and from JSON\nDESCRIPTION: This Python snippet demonstrates how to convert a Robot Framework resource file to JSON format and recreate it from the JSON data using the `robot.running` library.  It utilizes `ResourceFile.to_json` and `ResourceFile.from_json`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import ResourceFile\n\n\n# Create resource file based on data on the file system.\nresource = ResourceFile.from_file_system('example.resource')\n\n# Save JSON data to a file.\nresource.to_json('example.rsrc')\n\n# Recreate resource from JSON data.\nresource = ResourceFile.from_json('example.rsrc')\n```\n\n----------------------------------------\n\nTITLE: Output.xml Timestamp Format Update (XML)\nDESCRIPTION: Illustrates the change in timestamp format within the output.xml file from Robot Framework versions before and after version 7.0. The old format used a custom `YYYYMMDD HH:MM:SS.mmm`, while the new format follows `ISO 8601` standard (`YYYY-MM-DDTHH:MM:SS.mmmmmm`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework using pip\nDESCRIPTION: This command installs the Robot Framework using pip, the Python package installer. It assumes that Python and pip are already installed on the system. The command downloads and installs the latest version of Robot Framework from PyPI.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/README.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework\n```\n\n----------------------------------------\n\nTITLE: Suite Documentation RobotFramework\nDESCRIPTION: This snippet defines the documentation for the test suite. It provides a brief description of the purpose of the suite initialization file.  The `Documentation` setting allows to add description to the test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/__init__.txt#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\nDocumentation   Testing suite init file\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Positional-Only Arguments\nDESCRIPTION: This Python code defines a keyword `keyword` that accepts one positional-only argument (`posonly`) and one normal argument (`normal`). The `/` symbol indicates that `posonly` can only be passed as a positional argument. The function prints the values of both arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef keyword(posonly, /, normal):\n    print(f\"Got positional-only argument {posonly} and normal argument {normal}.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade Robot Framework to the latest available pre-release version using pip. It uses the `--pre` flag to include pre-release versions and `--upgrade` to update if already installed.  Requires pip to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: String argument examples - Robot Framework\nDESCRIPTION: Illustrates scenarios where arguments are treated as strings and not converted if one of the accepted types is string. Passing variables of different types allows non-string values to be used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_56\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nConversion\n    Example    1    big        # Argument is a string. Accepted as-is.\n    Example    1    10         # Argument is a string. Accepted as-is.\n    Example    1    ${10}      # Argument is an integer. Accepted as-is.\n    Example    1    ${None}    # Argument is `None`. Accepted as-is.\n    Example    1    ${1.5}     # Argument is a float. Converted to an integer.\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Type Conversion with Library Instance Access in Python\nDESCRIPTION: This snippet demonstrates how to define a dynamic type conversion function in Python that accesses the library instance to determine the parsing format based on the library's locale. It shows the usage of the `ROBOT_LIBRARY_CONVERTERS` dictionary to register the conversion function.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_date(value, library):\n    # Validate input using regular expression and raise ValueError if not valid.\n    # Use locale based from library state to determine parsing format.\n    if library.locale == 'en_US':\n        match = re.match(r'(?P<month>\\d{1,2})/(?P<day>\\d{1,2})/(?P<year>\\d{4})$', value)\n        format = 'mm/dd/yyyy'\n    else:\n        match = re.match(r'(?P<day>\\d{1,2})\\.(?P<month>\\d{1,2})\\.(?P<year>\\d{4})$', value)\n        format = 'dd.mm.yyyy'\n    if not match:\n        raise ValueError(f\"Expected date in format '{format}', got '{value}'.\")\n    return date(int(match.group('year')), int(match.group('month')), int(match.group('day')))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with Resource File\nDESCRIPTION: This snippet demonstrates how to generate documentation for a resource file using Libdoc. It specifies the path to the resource file and the desired output HTML file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlibdoc example.resource example.html\n```\n\n----------------------------------------\n\nTITLE: Using Keywords with Free Keyword Arguments in Robot Framework\nDESCRIPTION: This snippet demonstrates how to use keywords that accept free keyword arguments in Robot Framework test cases. The `Example Keyword` is called with various named arguments, which are then passed to the Python keyword function as a dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_30\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nKeyword Arguments\n    Example Keyword    hello=world        # Logs 'hello world'.\n    Example Keyword    foo=1    bar=42    # Logs 'foo 1' and 'bar 42'.\n```\n\n----------------------------------------\n\nTITLE: Multiple EXCEPT Branches in Robot Framework\nDESCRIPTION: This snippet shows how to use multiple EXCEPT branches to handle different error messages. The EXCEPT branches are evaluated in order, and the first matching branch is executed.  It showcases using both literal strings and variables to specify error messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple EXCEPT branches\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first.\n        Error Handler 1\n    EXCEPT    Another error    # Try this if above did not match.\n        Error Handler 2\n    EXCEPT    ${message}       # Last match attempt, this time using a variable.\n        Error Handler 3\n    END\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote\nDESCRIPTION: This command pushes the local changes to the remote repository, making them available to other collaborators.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Accepting Multiple Types in Converter Using Union - Python\nDESCRIPTION: This snippet demonstrates how to allow a custom converter to accept multiple input types using the `Union` type from the `typing` module. The `parse_fi_date` function is updated to accept both strings and integers, where integers are treated as seconds since the Unix epoch.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework (3.1a1 in this case) using pip. This ensures a consistent environment by specifying the exact version.  Requires pip to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.1a1\n```\n\n----------------------------------------\n\nTITLE: Inline Python Evaluation in Robot Framework\nDESCRIPTION: This Robot Framework snippet showcases inline Python evaluation. It uses a conditional expression within `${{}}` to determine whether `${x}` is positive or negative, then logs the result to the console.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nInline Python evaluation\n    Log to console    ${{'positive' if ${x} > 0 else 'negative'}}\n```\n\n----------------------------------------\n\nTITLE: Advanced External Parser Implementation with Defaults - Python\nDESCRIPTION: This code snippet demonstrates a more advanced external parser implementation that extends the optional Parser base class and handles suite initialization files and default test settings. Dependencies: pathlib.Path, robot.api.TestSuite, robot.api.interfaces.Parser, robot.api.interfaces.TestDefaults.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\nfrom robot.api.interfaces import Parser, TestDefaults\n\n\nclass ExampleParser(Parser):\n    extension = ('example', 'another')\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a suite and set possible defaults from init files to tests.\"\"\"\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line, doc='Example')\n```\n\n----------------------------------------\n\nTITLE: Declare Robot Framework Variable\nDESCRIPTION: This code snippet declares a Robot Framework variable named `${msg}` and assigns it the value 'Running suite setup'. This variable can be used within the test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/with_init/__init__.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n** Variables **\n${msg} =  Running suite setup\n```\n\n----------------------------------------\n\nTITLE: Checking Python version on Linux\nDESCRIPTION: This snippet demonstrates how to check the installed Python version on Linux systems.  It shows how to use the `python --version` command and version-specific commands like `python3` and `python3.x`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ python --version\nPython 3.10.13\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE Example Robot Framework\nDESCRIPTION: This example shows an inline IF/ELSE statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nInline IF/ELSE\n    IF    $condition    Keyword    argument    ELSE    Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with Literal in Python\nDESCRIPTION: This Python code snippet shows how to use the Literal type hint to restrict the possible values of an argument. The 'arg' argument can only accept the values 'x', 'y', or 'z'. Robot Framework validates the argument value based on the Literal type hint.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Literal['x', 'y', 'z']):\n   ...\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP Loop in Robot Framework\nDESCRIPTION: This Robot Framework snippet demonstrates a `FOR IN ZIP` loop that iterates over two lists. The loop executes as many times as there are items in the shorter list, effectively ignoring any remaining items in the longer list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n    @{ANIMALS}    dog      cat    horse    cow    elephant\n    @{ELÄIMET}    koira    kissa\n\n    *** Test Cases ***\n    Example\n        FOR    ${en}    ${fi}    IN ZIP    ${ANIMALS}    ${ELÄIMET}\n            Log    ${en} is ${fi} in Finnish\n        END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework VAR Syntax Example\nDESCRIPTION: This Robot Framework code snippet illustrates the usage of the new `VAR` syntax for creating local, suite, and global variables during test execution. It shows how to define variables with different scopes and then validates their values using the `Should Be Equal` keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Create a local variable `${local}` with a value `value`.\n    VAR    ${local}    value\n\n    # Create a variable that is available throughout the whole suite.\n    # Supported scopes are GLOBAL, SUITE, TEST, TASK and LOCAL (default).\n    VAR    ${suite}    value    scope=SUITE\n\n    # Validate created variables.\n    Should Be Equal    ${local}    value\n```\n\n----------------------------------------\n\nTITLE: Python Type Hinting with Stringified Generics and Unions\nDESCRIPTION: This Python code demonstrates the use of stringified type hints for generics and unions, which are compatible with older Python versions. Robot Framework supports argument conversion based on these stringified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case with Multiple Date Formats\nDESCRIPTION: This robotframework snippet shows a test case that uses keywords to handle date in different formats: Finnish (`dd.mm.yyyy`), US (`mm/dd/yyyy`), and ISO 8601 (`yyyy-mm-dd`). It exemplifies the need for custom types and converters to support different input formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_63\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     25.1.2022\n    US          1/25/2022\n    ISO 8601    2022-01-22\n```\n\n----------------------------------------\n\nTITLE: Using ELSE in TRY/EXCEPT Block in Robot Framework\nDESCRIPTION: This example shows how to use the ELSE block in a TRY/EXCEPT structure. The ELSE block executes only if no error occurs in the TRY block.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nELSE branch\n    TRY\n        Some Keyword\n    EXCEPT    X\n        Log    Error 'X' occurred!\n    EXCEPT    Y\n        Log    Error 'Y' occurred!\n    ELSE\n        Log    No error occurred!\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Multi-line Value and Separator Usage in Robot Framework VAR\nDESCRIPTION: Shows how to define scalar variables with long, multi-line values using the `VAR` syntax in Robot Framework. Demonstrates the use of the `separator` option to specify the delimiter for joining the lines. The default separator is a single space character.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nLong value\n    VAR    ${long}\n    ...    This value is rather long.\n    ...    It has been split to multiple lines.\n    ...    Parts will be joined together with a space.\n\nMultiline\n    VAR    ${multiline}\n    ...    First line.\n    ...    Second line.\n    ...    Last line.\n    ...    separator=\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an External Parser with Parser Base Class\nDESCRIPTION: This example demonstrates an external parser class extending the optional `Parser` base class from `robot.api.interfaces`. It includes a `parse` method to create a test suite and sets defaults using the `TestDefaults` object. It also has a `parse_init` method to handle suite initialization files.  This illustrates using the base class and utilizing `TestDefaults` for setting test configurations.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\nfrom robot.api.interfaces import Parser, TestDefaults\n\n\nclass ExampleParser(Parser):\n    extension = ('example', 'another')\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a suite and set possible defaults from init files to tests.\"\"\"\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line, doc='Example')\n            test.body.create_keyword(name='Log', args=['Hello!'])\n            defaults.set_to(test)\n        return suite\n\n    def parse_init(self, source: Path, defaults: TestDefaults) -> TestSuite:\n```\n\n----------------------------------------\n\nTITLE: Documenting Lists and preformatted text\nDESCRIPTION: This Robot Framework example demonstrates how to preserve leading and consecutive internal spaces within documentation and metadata.  It shows use cases of creating lists and preformatted text.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nLong list item\n    [Documentation]\n    ...    List:\n    ...    - Short item.\n    ...    - Second item is pretty long and it is split to\n    ...      multiple rows. Leading spaces are preserved.\n    ...    - Another short item.\n\nPreformatted text\n    [Documentation]\n    ...    Example with consecutive internal spaces:\n    ...\n    ...    | *** Test Cases ***\n    ...    | Example\n    ...    |     Keyword\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example\nDESCRIPTION: This Robot Framework code snippet demonstrates how to use custom type converters with different date formats within test cases. It calls keywords that utilize converters for Finnish ('dd.mm.yyyy'), US ('mm/dd/yyyy'), and ISO 8601 ('yyyy-mm-dd') date formats. It highlights the flexibility of custom type conversion in handling various input formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_23\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     25.1.2022\n    US          1/25/2022\n    ISO 8601    2022-01-22\n```\n\n----------------------------------------\n\nTITLE: Rebot Tool Merging JSON and XML Files\nDESCRIPTION: These commands demonstrate how to use the Rebot tool to merge results from both JSON and XML files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nrebot output1.xml output2.json\nrebot --merge original.xml rerun.json\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Keyword Definition\nDESCRIPTION: This section defines a keyword named `Failing` that takes an argument `${msg}` and uses the `Fail` keyword to intentionally cause a test to fail. It simulates an error condition.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/mixed_data/TXT.txt#_snippet_3\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Keyword\nFailing    [Arguments]    ${msg}\n    Fail    ${msg}\n```\n\n----------------------------------------\n\nTITLE: Recursive Continue-on-Failure\nDESCRIPTION: This example demonstrates the use of the `robot:recursive-continue-on-failure` tag, which propagates the continue-on-failure behavior to called user keywords.  All keywords in the test case and any nested user keywords will continue to execute even if they fail.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    [Tags]    robot:recursive-continue-on-failure\n    Should be Equal    1    2\n    User Keyword 1\n    Log    This is executed\n\n*** Keywords ***\nUser Keyword 1\n    Should be Equal    3    4\n    User Keyword 2\n    Log    This is executed\n\n*** Keywords ***\nUser Keyword 2\n    Should be Equal    5    6\n    Log    This is executed\n```\n\n----------------------------------------\n\nTITLE: List and dictionary expansion example\nDESCRIPTION: Illustrates the use of list expansion with item access in Robot Framework.  It demonstrates how to iterate over a list obtained from a dictionary value using the @{var}[items] syntax.  A variable `${var}` with value `{'items': ['a', 'b', 'c']}` is expected to exist.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Suppress Exception Name - Python\nDESCRIPTION: This snippet demonstrates how to suppress the exception type name from being added as a prefix to the failure message when raising a non-generic exception in Robot Framework. This is achieved by adding a `ROBOT_SUPPRESS_NAME` attribute with value `True` to your exception class.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nclass MyError(RuntimeError):\n    ROBOT_SUPPRESS_NAME = True\n```\n\n----------------------------------------\n\nTITLE: Checking Python version on Windows\nDESCRIPTION: This snippet shows how to check the Python version on Windows using the command prompt. It also shows how to use the `py` launcher to select a specific Python version when multiple versions are installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_3\n\nLANGUAGE: Batch\nCODE:\n```\nC:\\>python --version\nPython 3.10.9\n```\n\n----------------------------------------\n\nTITLE: Creating custom language files in Robot Framework using Python\nDESCRIPTION: This snippet demonstrates how to create a custom language file for Robot Framework using Python. It involves extending the `robot.api.Language` base class and overriding class attributes such as `test_cases_header`, `tags_setting`, `given_prefixes`, and `true_strings` to define translations.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import Language\n\n\nclass Example(Language):\n    test_cases_header = 'Validations'\n    tags_setting = 'Labels'\n    given_prefixes = ['Assuming']\n    true_strings = ['OK', '\\N{THUMBS UP SIGN}']\n```\n\n----------------------------------------\n\nTITLE: Pipe Separated Format Example - Robot Framework\nDESCRIPTION: Demonstrates the pipe separated format for defining test data in Robot Framework. Each line begins with a pipe character, and data elements are separated by pipes surrounded by spaces. This format can improve readability, especially when arguments contain spaces. It details how to define settings, variables, test cases, and keywords using the pipe separated format. Consecutive spaces or tabs inside arguments do not need to be escaped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n| *** Settings ***   |\n| Documentation      | Example using the pipe separated format.\n| Library            | OperatingSystem\n\n| *** Variables ***  |\n| ${MESSAGE}         | Hello, world!\n\n| *** Test Cases *** |                 |               |\n| My Test            | [Documentation] | Example test. |\n|                    | Log             | ${MESSAGE}    |\n|                    | My Keyword      | ${CURDIR}     |\n| Another Test       | Should Be Equal | ${MESSAGE}    | Hello, world!\n\n| *** Keywords ***   |                        |         |\n| My Keyword         | [Arguments]            | ${path} |\n|                    | Directory Should Exist | ${path} |\n```\n\n----------------------------------------\n\nTITLE: User keyword with named-only arguments (With Varargs)\nDESCRIPTION: This Robot Framework snippet showcases the usage of named-only arguments in user-defined keywords, including a variable number of positional arguments.  `@{varargs}` captures positional arguments into a list, and `${named}` captures the named-only argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWith Varargs\n    [Arguments]    @{varargs}    ${named}\n    Log Many    @{varargs}    ${named}\n```\n\n----------------------------------------\n\nTITLE: Multiple Messages in One EXCEPT Branch in Robot Framework\nDESCRIPTION: This snippet demonstrates how to specify multiple error messages within a single EXCEPT branch. If 'Some Keyword' fails with any of the specified messages, the 'Error handler' will be executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple messages with one EXCEPT\n    TRY\n        Some Keyword\n    EXCEPT    Error message    Another error    ${message}    # Match any of these.\n        Error handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework ELSE IF Statement\nDESCRIPTION: This snippet demonstrates using `ELSE IF` in Robot Framework. It checks multiple conditions for the `${rc}` variable. Different keywords are executed depending on whether `${rc}` is positive, negative, zero, or something else. It uses the `$rc` format to avoid evaluation failures if `${rc}` is not a number.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Positive keyword\n    ELSE IF    $rc < 0\n        Negative keyword\n    ELSE IF    $rc == 0\n        Zero keyword\n    ELSE\n        Fail    Unexpected rc: ${rc}\n    END\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.2 Beta 1 with pip\nDESCRIPTION: This command demonstrates how to install the latest available pre-release of Robot Framework using pip. It upgrades an existing installation or installs it if it's not already present. The `--pre` flag is essential to install pre-release versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Variable Definition in Robot Framework\nDESCRIPTION: Demonstrates how scalar and list variables can be defined with the same base name in Robot Framework variable tables. Prior to version 2.9, this was possible but caused confusion. This functionality has been changed in Robot Framework 2.9 to store all variables in the same namespace.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${VAR}    Scalar variable\n@{VAR}    List    variable\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework 7.0rc3 (pip)\nDESCRIPTION: This command installs the specified version of Robot Framework using pip. It ensures that exactly this version is installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==7.0rc3\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Preprocessor Example - Python\nDESCRIPTION: This snippet demonstrates an external parser that acts as a preprocessor for Robot Framework data files. It replaces custom headers like `=== Test Cases ===` with standard Robot Framework headers like `*** Test Cases ***` and then uses `TestSuite.from_string` to construct the suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.running import TestDefaults, TestSuite\n\nclass RobotPreprocessor:\n    extension = '.robot'\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        name = TestSuite.name_from_source(source)\n        data = source.read_text()\n        for header in 'Settings', 'Variables', 'Test Cases', 'Keywords':\n            data = data.replace(f'=== {header} ===', f'*** {header} ***')\n        return TestSuite.from_string(data, defaults=defaults).config(name=name)\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework manually\nDESCRIPTION: This command is used to install Robot Framework manually by extracting the tar file and running the setup script. This is an alternative installation method when pip is not available or preferred.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Specifying language in a Robot Framework data file\nDESCRIPTION: This example demonstrates how to specify the language for a Robot Framework data file using the `language:` syntax. This enables localization features for the file. Note that this affects subsequent files parsed and is not the recommended way to handle localization.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b1.rst#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\nlanguage: fi\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Specifying language in a Robot Framework data file\nDESCRIPTION: This snippet shows how to specify the language to be used within a Robot Framework data file using the `language: <lang>` syntax.  This enables localization of keywords and settings within the specific file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nlanguage: fi\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Using @library and @keyword decorators\nDESCRIPTION: This code snippet demonstrates how to use the `@library` decorator in conjunction with the `@keyword` decorator to explicitly define which methods within a class should be exposed as keywords. Only methods decorated with `@keyword` will be recognized as Robot Framework keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import library, keyword\n\n\n@library\nclass Example:\n\n    @keyword\n    def example_keyword(self):\n        # ...\n\n    def not_exposed_as_keyword(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Run Command with Subprocess (Non-Blocking)\nDESCRIPTION: This Python snippet demonstrates a more robust keyword to execute a command using `subprocess.Popen` and handles timeouts in a loop. This approach avoids blocking issues but adds complexity to the code.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\n\n\ndef run_command(command, *args):\n    process = subprocess.Popen([command, *args], encoding='UTF-8',\n                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    while True:\n        try:\n            stdout, stderr = process.communicate(timeout=0.1)\n        except subprocess.TimeoutExpired:\n            continue\n        else:\n            break\n    print(f'stdout: {stdout}\\nstderr: {stderr}')\n```\n\n----------------------------------------\n\nTITLE: Inline IF Statement in Robot Framework\nDESCRIPTION: Shows how to use inline IF statements in Robot Framework to execute a single statement conditionally. Inline IF statements can also include ELSE and ELSE IF branches. If no branch is run when using assignment, the variable gets the value None.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Normal IF\n        IF    $condition1\n            Keyword    argument\n        END\n        IF    $condition2\n            RETURN\n        END\n\n    Inline IF\n        IF    $condition1    Keyword    argument\n        IF    $condition2    RETURN\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE\n        IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE IF/ELSE\n        IF    $cond1    Keyword 1    ELSE IF    $cond2    Keyword 2    ELSE IF    $cond3    Keyword 3    ELSE    Keyword 4\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE with assignment\n        ${var} =    IF    $condition    Keyword    argument    ELSE    Another Keyword\n\n    Inline IF/ELSE with assignment having multiple variables\n        ${host}    ${port} =    IF    $production    Get Production Config    ELSE    Get Testing Config\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with Stringified Generics and Unions in Python\nDESCRIPTION: This Python code snippet shows how to use stringified type hints for generics (list[int]) and unions (int | float). This syntax allows using the type hints in older Python versions (e.g., Python 3.8) where the native syntax might not be available. Robot Framework supports argument conversion using these stringified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Keyword Call (Robot Framework)\nDESCRIPTION: This snippet illustrates how the example keyword defined in Python is called within a Robot Framework test case. It highlights the change in argument conversion behavior in Robot Framework 6.1, where unrecognized types are skipped and conversion is attempted with the remaining types. The `Example 42` call would pass the integer 42 instead of the string \"42\".\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_27\n\nLANGUAGE: Robot Framework\nCODE:\n```\nExample    42\n```\n\n----------------------------------------\n\nTITLE: Handling Errors and No Errors with EXCEPT/ELSE in Robot Framework\nDESCRIPTION: This snippet shows how to handle both error and no error conditions using an EXCEPT without a message and an ELSE branch.  This ensures that either the error is logged or a success message is logged.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nHandle everything\n    TRY\n        Some Keyword\n    EXCEPT    AS    ${err}\n        Log    Error occurred: ${err}\n    ELSE\n        Log    No error occurred!\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Removing Global Tags with -tag Syntax\nDESCRIPTION: This example shows how to remove globally set tags from individual test cases using the `-tag` syntax within the `[Tags]` setting.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Using SHORTEST Mode in FOR IN ZIP Loops\nDESCRIPTION: This snippet demonstrates the `SHORTEST` mode for `FOR IN ZIP` loops, which iterates as many times as the shortest list. Elements in longer lists are ignored. This is the default behavior if no mode is specified.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_22\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSHORTEST mode\n    [Documentation]    This loop executes three times.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=SHORTEST\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Registering Listener with External Class\nDESCRIPTION: This code snippet demonstrates how to register an external listener class for a Robot Framework library. The `ROBOT_LIBRARY_LISTENER` attribute is set to an instance of the `Listener` class, enabling it to receive notifications during test execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom listener import Listener\n\n\nclass LibraryWithExternalListener:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_LISTENER = Listener()\n\n    def example_keyword(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: These are example commands to install or upgrade Robot Framework to the latest version or to a specific version using pip, the Python package installer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.1.rst#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install robotframework==4.1.1\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case using Keyword with Mixed Arguments\nDESCRIPTION: This example shows how to use a keyword that accepts both embedded and normal arguments in a Robot Framework test case. It demonstrates passing the normal argument both positionally and using keyword syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        Number of horses should be    2\n        Number of horses should be    count=2\n        Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Generating Combined Tag Statistics with Custom Name - Robot Framework\nDESCRIPTION: This example shows how to generate combined tag statistics and assign a custom name to the combined tag using the `--tagstatcombine` option. The custom name is specified after the pattern, separated by a colon.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n--tagstatcombine \"prio1ORprio2:High priority tests\"\n```\n\n----------------------------------------\n\nTITLE: Custom Date Type Conversion with Class Methods (Python)\nDESCRIPTION: This Python code defines custom date types (`FiDate`, `UsDate`) that inherit from `datetime.date` and implement custom conversion logic using class methods (`from_string`). These methods parse date strings in specific formats ('dd.mm.yyyy' for `FiDate`, 'mm/dd/yyyy' for `UsDate`). The `@library` decorator registers these converters for use in Robot Framework keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\nfrom robot.api.deco import keyword, library\n\n\n# Custom type. Extends an existing type but that is not required.\nclass FiDate(date):\n\n    # Converter function implemented as a classmethod. It could be a normal\n    # function as well, but this way all code is in the same class.\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n        day, month, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Another custom type.\nclass UsDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        match = re.match(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})$', value)\n        if not match:\n            raise ValueError(f\"Expected date in format 'mm/dd/yyyy', got '{value}'.\")\n        month, day, year = match.groups()\n        return cls(int(year), int(month), int(day))\n\n\n# Register converters using '@library' decorator.\n@library(converters={FiDate: FiDate.from_string, UsDate: UsDate.from_string})\nclass Library:\n\n    # Uses custom converter supporting 'dd.mm.yyyy' format.\n    @keyword\n    def finnish(self, arg: FiDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses custom converter supporting 'mm/dd/yyyy' format.\n    @keyword\n    def us(self, arg: UsDate):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Uses IS0-8601 compatible default conversion.\n    @keyword\n    def iso_8601(self, arg: date):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n\n    # Accepts date in different formats.\n    @keyword\n    def any(self, arg: Union[FiDate, UsDate, date]):\n        print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Old For Loop Syntax\nDESCRIPTION: This code demonstrates the old FOR loop syntax in Robot Framework, which is still supported in 3.1 for backward compatibility, but is recommended to migrate to the new syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Keywords in reStructuredText - Robot Framework\nDESCRIPTION: This snippet demonstrates how to define keywords within a reStructuredText document, using both space and pipe-separated formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n# Both space and pipe separated formats are supported.\n\n| *** Keywords ***  |                        |         |\n| My Keyword        | [Arguments]            | ${path} |\n|                   | Directory Should Exist | ${path} |\n```\n\n----------------------------------------\n\nTITLE: Library Listener registration using 'SELF' example\nDESCRIPTION: This Python code demonstrates how a library can register itself as a listener using the string 'SELF' with the `@library` decorator. This allows the library to receive notifications about events during execution.  Requires `robot.api.deco` module.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(listener='SELF')\nclass Example:\n\n    def start_suite(self, data, result):\n        ...\n\n    @keyword\n    def example(self, arg):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Nested FOR and IF Example\nDESCRIPTION: This snippet illustrates nested FOR loops and IF/ELSE structures within Robot Framework. It processes cells in rows and executes `Process Cell` only if the cell's value is not 'IGNORE'. This demonstrates how to create complex control flow logic by nesting loops and conditional statements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Pre-run Modifier: Select Every Xth Test - Python\nDESCRIPTION: This pre-run modifier selects every Xth test case for execution, with customizable starting point. It requires Robot Framework 4.0 or later if using type hints like `x: int`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# Specify the modifier as a path. Run every second test.\nrobot --prerunmodifier path/to/SelectEveryXthTest.py:2 tests.robot\n\n# Specify the modifier as a name. Run every third test, starting from the second.\nrobot --prerunmodifier SelectEveryXthTest:3:1 tests.robot\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potential False Positives in ZIP Loops\nDESCRIPTION: This snippet shows a potential issue where `FOR IN ZIP` loops can lead to false positives if the lists being iterated over have different lengths. The loop will only execute as many times as the shortest list, potentially skipping validation steps.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Validate something    expected 1    expected 2    expected 3\n\n*** Keywords ****\nValidate something\n    [Arguments]    @{expected}\n    @{actual} =    Get something\n    FOR    ${act}    ${exp}    IN ZIP    ${actual}    ${expected}\n        Validate one thing    ${act}    ${exp}\n    END\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework 4.1 with pip\nDESCRIPTION: Installs the latest available release of Robot Framework using pip. The --pre flag allows installing pre-release versions and the --upgrade flag upgrades an existing installation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.rst#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Creating User Guide Package\nDESCRIPTION: This command creates the User Guide package by running the `doc/userguide/ug2html.py zip` script.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\ndoc/userguide/ug2html.py zip\n```\n\n----------------------------------------\n\nTITLE: Keyword Should Exist Performance Improvement\nDESCRIPTION: This enhancement improves the performance of the `Keyword Should Exist` keyword when the specified keyword is not found. This reduces the execution time in scenarios where the keyword existence check fails.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Installing Robot Framework using pip\nDESCRIPTION: This snippet shows how to install the latest pre-release of Robot Framework using the pip package manager. It upgrades the existing installation if one exists.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Parsing Robot Framework Data with Custom Preprocessor in Python\nDESCRIPTION: This Python code defines a custom preprocessor for Robot Framework data files. It replaces custom headers (e.g., `=== Test Cases ===`) with the standard Robot Framework headers (e.g., `*** Test Cases ***`) before parsing the data using `TestSuite.from_string`. This enables the use of alternative header formats in Robot Framework data files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.running import TestDefaults, TestSuite\n\nclass RobotPreprocessor:\n    extension = '.robot'\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        data = source.read_text()\n        for header in 'Settings', 'Variables', 'Test Cases', 'Keywords':\n            data = data.replace(f'=== {header} ===', f'*** {header} ***')\n        suite = TestSuite.from_string(data, defaults=defaults)\n        return suite.config(name=TestSuite.name_from_source(source), source=source)\n```\n\n----------------------------------------\n\nTITLE: Create a Test Case in Robot Framework\nDESCRIPTION: This snippet showcases how to create a test case in Robot Framework. It includes setting tags, timeout, setup, teardown, documentation, and calling custom keywords with different arguments and formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/all_settings.txt#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Test Cases ***\nMy test\n\t[tags]\tsometag\t\tsomeothertag\n\t[timeout]\t1 minute\n\t[setup]\t\tLog\t\tTest setup msg\n\t[teardown]\tLog\t\tTest teardown msg\n\t[documentation]\t\tTest docs\\nwith new line, several spaces \"   \" and a <b>bold tag</b>.\n\tMy kw\t\tThis is my _non html_ message\\nwith new line, several spaces \"   \" and a <b>bold tag</b>.\n\tMy kw\t\tThis is my <blink>HTML</blink> message\\nwith new line, several spaces \"   \" and a <b>bold tag</b>.\tHTML\n```\n\n----------------------------------------\n\nTITLE: Checking Git Branch\nDESCRIPTION: This command shows the currently active Git branch. It's crucial to be on the correct branch before starting the release process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Specifying language in Robot Framework data file\nDESCRIPTION: This snippet shows how to specify the language to use within a Robot Framework data file using the `language:` syntax. This allows for localizing headers and settings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nlanguage: fi\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variable Assignment with Multiline Values\nDESCRIPTION: This example demonstrates how to assign long string values to scalar variables in Robot Framework, splitting the value across multiple lines. It also shows how to change the default separator used to join the lines together.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Long value\n        VAR    ${long}\n        ...    This value is rather long.\n        ...    It has been split to multiple lines.\n        ...    Parts will be joined together with a space.\n\n    Multiline\n        VAR    ${multiline}\n        ...    First line.\n        ...    Second line.\n        ...    Last line.\n        ...    separator=\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Library/Resource File via Listener in Python\nDESCRIPTION: This snippet demonstrates how to access information about the executed keyword and the library or resource file it belongs to using the listener API. It accesses and prints information about the library, its scope, instance, source and line number.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, LibraryKeyword\nfrom robot.result import Keyword as KeywordResult\n\n\ndef start_library_keyword(data: KeywordData,\n                          implementation: LibraryKeyword,\n                          result: KeywordResult):\n    library = implementation.owner\n    print(f\"Keyword '{implementation.name}' is implemented in library \"\n          f\"'{library.name}' at '{implementation.source}' on line \"\n          f\"{implementation.lineno}. The library has {library.scope.name} \"\n          f\"scope and the current instance is {library.instance}.\")\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE with assignment Robot Framework\nDESCRIPTION: This example shows an inline IF/ELSE statement with assignment.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nInline IF/ELSE with assignment\n    ${var} =    IF    $condition    Keyword    argument    ELSE    Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Keyword Return Type Specification - Robot Framework\nDESCRIPTION: Demonstrates how to specify the keyword return type using the 'return' key in the type dictionary. This information is used for documentation purposes by Libdoc.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef example2(first, second, third):\n  ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example\nDESCRIPTION: This Robot Framework test case demonstrates how to use a keyword that accepts date objects in the Finnish date format (dd.mm.yyyy). It relies on a custom argument converter to handle the date conversion.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_25\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Keyword    11.3.2022\n```\n\n----------------------------------------\n\nTITLE: Basic TRY/EXCEPT Block in Robot Framework\nDESCRIPTION: This snippet demonstrates a basic TRY/EXCEPT block in Robot Framework. If 'Some Keyword' fails with the message 'Error message', the 'Error Handler Keyword' will be executed. Otherwise, the 'EXCEPT' block is skipped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nFirst example\n    TRY\n        Some Keyword\n    EXCEPT    Error message\n        Error Handler Keyword\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Robot Framework Options (Bash)\nDESCRIPTION: This example demonstrates how to set environment variables to specify default options for test execution (ROBOT_OPTIONS) and result post-processing (REBOT_OPTIONS) in a bash environment. The options are defined as a space-separated list and are placed in front of any explicit options on the command line. This is useful for setting global default values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport ROBOT_OPTIONS=\"--outputdir results --tagdoc 'mytag:Example doc with spaces'\"\nrobot tests.robot\nexport REBOT_OPTIONS=\"--reportbackground blue:red:yellow\"\nrebot --name example output.xml\n```\n\n----------------------------------------\n\nTITLE: Python 3 Library with Named-Only Arguments\nDESCRIPTION: Example of using keyword-only arguments (named-only arguments) in a Python 3 based test library. `case_sensitive` must be passed as a named argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Listener V3 - start_keyword and end_while\nDESCRIPTION: Example of a listener version 3 implementation that prints information about started keywords and ended WHILE loops.  It demonstrates how to access keyword and control structure data and results, including the line number where they are defined and the status of the WHILE loop.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, While as WhileData\nfrom robot.result import Keyword as KeywordResult, While as WhileResult\n\n\ndef start_keyword(data: KeywordData, result: KeywordResult):\n    print(f\"Keyword '{result.full_name}' used on line {data.lineno} started.\")\n\n\ndef end_while(data: WhileData, result: WhileResult):\n    print(f\"WHILE loop on line {data.lineno} ended with status {result.status} \"\n          f\"after {len(result.body)} iterations.\")\n```\n\n----------------------------------------\n\nTITLE: Installing specific Robot Framework version\nDESCRIPTION: This command installs a specific version (4.0.1b1) of Robot Framework using pip.  This is useful for testing or ensuring compatibility with specific environments. It assumes pip is installed and configured correctly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.1b1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.0.1b1\n```\n\n----------------------------------------\n\nTITLE: Rebot Tool JSON Output Example\nDESCRIPTION: This command demonstrates how to use the Rebot tool to generate a JSON output file from an XML output file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Keyword with Flatten Tag (Robot Framework)\nDESCRIPTION: This Robot Framework code snippet demonstrates how to use the `robot:flatten` tag to flatten a keyword during execution. The `Keyword` keyword is tagged with `robot:flatten`, which causes its child keywords to be flattened in the output.xml file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_7\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Keywords ***\nKeyword\n    [Tags]    robot:flatten\n    Log    Robot\n    Log    Framework\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with Union (Old Way) - Python\nDESCRIPTION: This code snippet demonstrates the old way of defining a union type for a function argument in Python, requiring the `Union` type from the `typing` module.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\n\ndef example(arg: Union[int, float]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: This command displays the current status of the Git repository, showing any uncommitted changes, untracked files, or pending commits.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: JSON Variable File Example\nDESCRIPTION: This JSON file demonstrates the structure of a JSON variable file that can be used in Robot Framework. It defines two variables, STRING and INTEGER, with their corresponding values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"STRING\": \"Hello, world!\",\n    \"INTEGER\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: FOR IN ENUMERATE Loop - Robot Framework\nDESCRIPTION: Demonstrates the new `FOR ... IN ENUMERATE` loop syntax in Robot Framework. This loop iterates over a list while also providing an increasing index number for each item. The index starts from 0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nFor in enumerate example    # take an item and an increasing index number\n    :FOR    ${index}    ${item}    IN ENUMERATE    @{LIST}\n     \\     My Keyword    ${index}    ${item}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Titles for Log and Report Files\nDESCRIPTION: This command shows how to set custom titles for the log and report files using the `--logtitle` and `--reporttitle` options. This is useful for providing more descriptive names for these files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --logtitle \"Smoke Test Log\" --reporttitle \"Smoke Test Report\" --include smoke my_tests/\n```\n\n----------------------------------------\n\nTITLE: Library as Listener using 'SELF' (Python)\nDESCRIPTION: This Python code demonstrates how a library can register itself as a listener using the `SELF` string with the `@library` decorator.  This allows the library to receive notifications about various events during execution, such as suite start.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(listener='SELF')\nclass Example:\n\n    def start_suite(self, data, result):\n        ...\n\n    @keyword\n    def example(self, arg):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Converting Paths to Strings (Python)\nDESCRIPTION: This snippet shows how to convert paths, now passed as `pathlib.Path` objects in listener version 3 methods, back to strings if required.  The `str()` function is used to perform the conversion.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nstr(path)\n```\n\n----------------------------------------\n\nTITLE: Escaping square brackets for literal string in Robot Framework\nDESCRIPTION: This snippet describes how to use literal square brackets after a variable name, which was intepreted as item access instead of a string after Robot Framework 3.1. The escape character '\\' needs to be used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_16\n\nLANGUAGE: Robot Framework\nCODE:\n```\n${var}\\[xxx]\n```\n\n----------------------------------------\n\nTITLE: Building Libdoc\nDESCRIPTION: This command generates the Libdoc HTML documentation, which provides information about Robot Framework libraries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke build-libdoc\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests\nDESCRIPTION: This command excludes tests based on tags. In this example, tests tagged with `require-lxml` are excluded. This is useful when dependencies are not met.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\natest/run.py --exclude require-lxml\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.1 alpha 1 with pip\nDESCRIPTION: This snippet shows how to install the latest preview release of Robot Framework using pip, or a specific version (5.1a1) via pip.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1a1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==5.1a1\n```\n\n----------------------------------------\n\nTITLE: Deprecating Tag Syntax in Robot Framework\nDESCRIPTION: This snippet highlights the deprecation of using literal values like `-tag` in the `Test Tags` setting to create tags starting with a hyphen. This syntax will be reserved for removing tags in higher-level suite initialization files. Users should use escaped formats like `\\-tag` for tags starting with hyphens.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nRobot Framework 7.2 deprecates using a literal value like `-tag` for creating\ntags starting with a hyphen using the `Test Tags` setting (`#5252`_). In the\nfuture this syntax will be used for removing tags set in higher level suite\ninitialization files, similarly as the `-tag` syntax can nowadays be used with\nthe `[Tags]` setting. If tags starting with a hyphen are needed, it is possible\nto use the escaped format like `\\-tag` to create them.\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output File with Robot Framework\nDESCRIPTION: This command demonstrates how to generate a JSON output file during Robot Framework execution. The `--output` option specifies the output file, and the `.json` extension automatically triggers JSON output. The input is a Robot Framework test suite file (e.g., example.robot).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrobot --output output.json example.robot\n```\n\n----------------------------------------\n\nTITLE: Matching Errors with Glob Patterns in Robot Framework\nDESCRIPTION: This snippet illustrates how to use glob patterns to match error messages in EXCEPT branches. The 'type=GLOB' parameter is used to specify that the messages should be treated as glob patterns.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nGlob pattern\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: *    type=GLOB\n        Error Handler 1\n    EXCEPT    [Ee]rror ?? occurred    ${pattern}    type=glob\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Multiple Messages with One EXCEPT in Robot Framework\nDESCRIPTION: This snippet demonstrates how a single EXCEPT branch can handle multiple error messages. If `Some Keyword` fails with any of the specified error messages (`Error message`, `Another error`, or the value of `${message}`), the `Error handler` keyword is executed. `${message}` must be defined as a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple messages with one EXCEPT\n    TRY\n        Some Keyword\n    EXCEPT    Error message    Another error    ${message}    # Match any of these.\n        Error handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Suite Setup Definition RobotFramework\nDESCRIPTION: This snippet defines the suite setup using the `Suite Setup` setting.  It calls a keyword also named `Suite Setup`, which logs a message stored in the `${msg}` variable. This is executed once before any tests in the suite run.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/__init__.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Settings        Value\nSuite Setup     Suite Setup\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: Demonstrates how to install or upgrade Robot Framework to the latest version using pip, the Python package installer. It also shows how to install a specific version of Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.2.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==3.2.2\n```\n\n----------------------------------------\n\nTITLE: Explicit Exact Match of Error Message in Robot Framework\nDESCRIPTION: This example shows how to explicitly specify that an error message should be matched exactly. The `type=literal` parameter (which is the default) ensures that the message is treated as a literal string.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExplicit exact match\n    TRY\n        Some Keyword\n    EXCEPT    Error 13 occurred    type=literal\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Matching the Start of an Error Message in Robot Framework\nDESCRIPTION: This example shows how to match only the beginning of an error message. The `type=start` parameter specifies that the messages should be matched against the start of the error message. `${beginning}` must be defined as a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch start\n    TRY\n        Some Keyword\n    EXCEPT    ValueError:    ${beginning}    type=start\n        Error Handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Library Decorator Implementation (Python)\nDESCRIPTION: This snippet refers to the implementation of the `@library` decorator in Python, which supports configuring and forces the use of `@keyword` to mark keywords. This enhancement allows for better control and clarity when defining Robot Framework libraries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Argument File Example\nDESCRIPTION: This example illustrates the syntax of an argument file, which contains command line options and paths to test data, one per line. Both short and long options are supported.  Empty lines and lines starting with '#' are ignored. This file is used to avoid problematic characters on the command line and prevent overly long commands.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n--doc This is an example (where \"special characters\" are ok!)\n--metadata X:Value with spaces\n--variable VAR:Hello, world!\n# This is a comment\npath/to/my/tests\n```\n\n----------------------------------------\n\nTITLE: Multiple messages with one EXCEPT in Robot Framework\nDESCRIPTION: This code demonstrates how to match multiple error messages with a single EXCEPT branch. If `Some Keyword` fails with any of the specified messages, the `Error handler` keyword is executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple messages with one EXCEPT\n    TRY\n        Some Keyword\n    EXCEPT    Error message    Another error    ${message}    # Match any of these.\n        Error handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Accepting Multiple Types with Union (Python)\nDESCRIPTION: This Python code shows how to use `typing.Union` to allow the custom argument converter to accept multiple types, such as strings and integers. In this example, integers are treated as seconds since the Unix epoch and converted to dates.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\nfrom typing import Union\n\n\n# Accept both strings and integers.\ndef parse_fi_date(value: Union[str, int]):\n    # Integers are converted separately.\n    if isinstance(value, int):\n        return date.fromtimestamp(value)\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Prior Item Access (Deprecated)\nDESCRIPTION: This snippet shows how item access was previously handled prior to Robot Framework 4.0. This method is now deprecated and it's recommended to use the method described above.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n@{items} =    Set Variable    ${var}[items]\nFOR    ${item}    IN    @{items}\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Loop Example\nDESCRIPTION: This snippet showcases the now-unsupported practice of using `Exit For Loop` inside a keyword called from a FOR loop.  This is no longer allowed in Robot Framework 5.0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_23\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nLooping\n    FOR    ${x}    IN    @{stuff}\n        Keyword\n    END\n\nKeyword\n    Exit For Loop\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version with pip\nDESCRIPTION: This snippet demonstrates how to install a specific version of Robot Framework using pip. This is useful for testing or using a particular release candidate.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==7.2rc1\n```\n\n----------------------------------------\n\nTITLE: Extending the Parser Base Class in Python\nDESCRIPTION: This snippet demonstrates a parser class extending the optional Parser base class from robot.api.interfaces. It supports multiple extensions, implements both parse and parse_init methods, and utilizes TestDefaults to set default values for tests.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ParserInterface.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\nfrom robot.api.interfaces import Parser, TestDefaults\n\n\nclass ExampleParser(Parser):\n    extension = ('example', 'another')\n\n    def parse(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a suite and set possible defaults from init files to tests.\"\"\"\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line, doc='Example')\n            test.body.create_keyword(name='Log', args=['Hello!'])\n            defaults.set_to(test)\n        return suite\n\n    def parse_init(self, source: Path, defaults: TestDefaults) -> TestSuite:\n        \"\"\"Create a dummy suite and set some defaults.\n\n        This method is called only if there is an initialization file with\n        a supported extension.\n        \"\"\"\n        defaults.tags = ('tags', 'from init')\n        defaults.setup = {'name': 'Log', 'args': ['Hello from init!']}\n        return TestSuite(TestSuite.name_from_source(source.parent), doc='Example',\n                         source=source, metadata={'Example': 'Value'})\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE IF/ELSE Robot Framework\nDESCRIPTION: Illustrates multiple ELSE IF branches in an inline IF statement.  This provides more conditional execution paths within a single inline structure. The example shows chaining multiple ELSE IF statements with a final ELSE.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_21\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE IF/ELSE\n        IF    $cond1    Keyword 1    ELSE IF    $cond2    Keyword 2    ELSE IF    $cond3    Keyword 3    ELSE    Keyword 4\n```\n\n----------------------------------------\n\nTITLE: Output.xml Timestamp Format Change\nDESCRIPTION: This snippet demonstrates the change in timestamp format in output.xml from Robot Framework 7.0. The old format used a custom format, while the new format uses ISO 8601 compatible format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Output XML Timestamp Format Change (New)\nDESCRIPTION: Demonstrates the new ISO 8601 timestamp format in output.xml as of Robot Framework 7.0. Instead of starttime and endtime, the start and elapsed attributes are used. Message times are now stored in the time attribute. Tools that parse output.xml files must be updated to accommodate these changes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Deprecating Multiline String Syntax in Robot Framework\nDESCRIPTION: This snippet describes the deprecation of a specific syntax for creating multiline strings in Robot Framework.  Specifically, the syntax `two\\n lines` is being deprecated in favor of `two\\nlines` because the former was primarily useful for the now-unsupported HTML format. This change aims to simplify string handling and remove obsolete syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nEarlier `two\\n lines` has been considered equivalent to `two\\nlines` in\nRobot Framework data. This syntax helped constructing multiline strings when\nusing the HTML format, but now that the HTML format is not supported this\nsyntax has been deprecated (`#3333`_). It is unlikely that it would have\nbeen used widely.\n```\n\n----------------------------------------\n\nTITLE: Output XML Keyword Name Attributes (Old)\nDESCRIPTION: Shows the old attributes used for storing keyword names and library/resource file names in output.xml files. The `library` attribute was used for both libraries and resource files, and the `sourcename` attribute stored the original name of keywords with embedded arguments. These attributes have been renamed or replaced in Robot Framework 7.0.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes Template\nDESCRIPTION: This command generates a template for the release notes using the `invoke release-notes` task. It fetches information about issues from the GitHub issue tracker and formats them into a release notes template.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke release-notes -w -v $VERSION -u $GITHUB_USERNAME -p $GITHUB_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework using pip\nDESCRIPTION: This snippet demonstrates how to install the latest pre-release version of Robot Framework using pip. It also shows how to install a specific version (6.0rc1).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==6.0rc1\n```\n\n----------------------------------------\n\nTITLE: Using JSON Variable File (Robot Framework)\nDESCRIPTION: This Robot Framework code snippet demonstrates how to use a JSON variable file defined in the previous snippet. The `Variables` setting is used to specify the path to the JSON file, and the variables defined in the file can then be used in test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_11\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Settings ***\nVariables        example.json\n\n*** Test Cases ***\nExample\n    Should Be Equal    ${STRING}     Hello, world!\n    Should Be Equal    ${INTEGER}    ${42}\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.0rc1 with pip\nDESCRIPTION: These commands install the latest available release candidate or a specific version of Robot Framework using pip. The first command upgrades Robot Framework to the newest pre-release version. The second installs a specific version, in this case, 5.0rc1.  Pip must be installed to use these commands.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==5.0rc1\n```\n\n----------------------------------------\n\nTITLE: Matching Error Start in Robot Framework\nDESCRIPTION: This snippet shows how to match the beginning of an error message using the 'type=start' parameter. This can be useful when you only want to match the initial part of the error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch start\n    TRY\n        Some Keyword\n    EXCEPT    ValueError:    ${beginning}    type=start\n        Error Handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Upgrading Robot Framework to the latest pre-release with pip\nDESCRIPTION: This command upgrades Robot Framework to the latest available pre-release version using the pip package manager. The `--pre` flag allows installation of pre-release versions, and `--upgrade` ensures the existing version is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1rc2.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Argument Conversion Example (Python)\nDESCRIPTION: Illustrates Robot Framework's argument conversion behavior with multiple types. Shows how unrecognized types are now skipped, allowing subsequent conversions to be attempted.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndef example(arg: Union[UnknownType, int]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework using pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip.  It is useful for testing or ensuring compatibility with a particular version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc2.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==6.0rc2\n```\n\n----------------------------------------\n\nTITLE: Class-based External Parser Implementation - Python\nDESCRIPTION: This code snippet shows a class-based implementation of an external parser for Robot Framework.  The parser takes an extension as an argument and parses the source file, creating a test for each line in the file. Dependencies: pathlib.Path, robot.api.TestSuite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom robot.api import TestSuite\n\n\nclass ExampleParser:\n\n    def __init__(self, extension: str):\n        self.extension = extension\n\n    def parse(self, source: Path) -> TestSuite:\n        suite = TestSuite(TestSuite.name_from_source(source), source=source)\n        for line in source.read_text().splitlines():\n            test = suite.tests.create(name=line)\n            test.body.create_keyword(name='Log', args=['Hello!'])\n        return suite\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List/Dictionary Expansion with Item Access\nDESCRIPTION: This code shows how to use list and dictionary expansion with item access in Robot Framework. It iterates over a list of items obtained from a dictionary and logs each item. It simplifies accessing and iterating over nested data structures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Catching Any Error with EXCEPT in Robot Framework\nDESCRIPTION: This example shows how to use an EXCEPT branch without any messages to catch any error that occurs within the TRY block.  Only one such EXCEPT block is permitted and it must be the last EXCEPT block.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any error\n    TRY\n        Some Keyword\n    EXCEPT               # Match any error.\n        Error Handler\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Suite Naming with Prefixes\nDESCRIPTION: This example demonstrates how to control test suite execution order by using prefixes in file and directory names. Prefixes like `01` and `02` are separated from the base name with two underscores. This example demonstrates how prefixes are used to influence the order in which suites are executed, while removing the prefix from the resulting suite name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n01__my_suite.robot -> My Suite\n02__another_suite.robot -> Another Suite\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Nested FOR and IF\nDESCRIPTION: This snippet showcases how to nest FOR loops and IF/ELSE structures within Robot Framework.  The outer loop iterates through rows, and the inner loop iterates through cells in each row.  The IF statement checks if a cell's value is not equal to \"IGNORE\", and if it is not, it calls the `Process Cell` keyword. This structure allows for complex conditional processing within loops.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Prior Item Access - Robot Framework\nDESCRIPTION: This snippet shows the older method of accessing items in lists and dictionaries in Robot Framework, before the introduction of the combined `@` and `&` syntax with item access. This method required setting a variable before iterating over the list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a2.rst#_snippet_3\n\nLANGUAGE: RobotFramework\nCODE:\n```\n@{items} =    Set Variable    ${var}[items]\nFOR    ${item}    IN    @{items}\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Running tests with `python -m robot`\nDESCRIPTION: This command executes Robot Framework tests using the specified Python interpreter. It's especially useful when working with multiple Python environments, such as `python3 -m robot`, `/opt/jython -m robot`, or `ipy -m robot`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npython -m robot\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with @keyword Decorator (List)\nDESCRIPTION: Illustrates how to specify argument types for a Python keyword using the `@keyword` decorator with a list. The types are mapped to arguments based on their position. Works with Python 2 and 3.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0rc1 with pip\nDESCRIPTION: This command uses pip to install the Robot Framework version 4.0 Release Candidate 1. The `--pre` flag allows for the installation of pre-release versions, and `--upgrade` ensures any existing Robot Framework installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Keyword Name Format (New)\nDESCRIPTION: This XML snippet demonstrates the new format for keyword names in the output.xml file, specifically the use of the `owner` attribute and the `source_name` attribute for keywords with embedded arguments.  It replaces `library` with `owner` and `sourcename` with `source_name`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Limiting Keywords with __all__ Attribute (Module-Based Library - Python)\nDESCRIPTION: This snippet shows how to limit the exposed keywords in a module-based Robot Framework library using the `__all__` attribute.  Only functions listed in `__all__` will be exposed as keywords. Only `example_keyword` would be a keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import current_thread\n\n\n__all__ = ['example_keyword']\n\n\ndef example_keyword():\n    thread_name = current_thread().name\n    print(f\"Running in thread '{thread_name}'.\")\n\ndef this_is_not_keyword():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.2 Beta 1 with pip\nDESCRIPTION: Demonstrates the pip commands to install either the latest pre-release or the specific Robot Framework 3.2 beta 1 version.  Requires `pip` to be installed. The first command upgrades if Robot Framework is already installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==3.2b1\n```\n\n----------------------------------------\n\nTITLE: Old Style FOR Loop Example (Deprecated)\nDESCRIPTION: This snippet demonstrates the old-style FOR loop syntax in Robot Framework, which is deprecated in version 3.2, especially when using the pipe-separated format. This format is no longer supported.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n| :FOR | ${x} | IN | 1 | 2\n|      | Log  | ${x}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Username Variable\nDESCRIPTION: This command sets the `GITHUB_USERNAME` environment variable, which stores the GitHub username. It's required to generate release notes from the issue tracker.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nGITHUB_USERNAME=<username>\n```\n\n----------------------------------------\n\nTITLE: Checking out master Branch\nDESCRIPTION: This command checks out the `master` branch, returning to the main development branch.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout master\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version\nDESCRIPTION: This command installs a specific version of Robot Framework (4.0b3) using pip.  It ensures that the exact version specified is installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==4.0b3\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest release of Robot Framework using pip, including pre-releases. It upgrades the existing installation to the newest version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.1rc1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install or upgrade Robot Framework to the latest version using pip, the Python package installer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Python Literal Type Hinting\nDESCRIPTION: Shows how to use `Literal` type hinting in Python to restrict the allowed values for a function argument. The specified arguments are the only ones allowed as valid inputs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Literal['x', 'y', 'z']):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Should Be True Keyword Example in Robot Framework\nDESCRIPTION: This example demonstrates the use of the `Should Be True` keyword.  It checks if the expression `${x} > 0` evaluates to true. If it doesn't, the test case will fail.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\nShould Be True keyword\n    Should Be True    ${x} > 0\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases - Multiple Date Formats\nDESCRIPTION: This Robot Framework test case demonstrates the usage of custom keywords that accept dates in different formats (Finnish, US, and ISO 8601). It highlights the need for custom type conversion to handle various date formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_24\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     11.3.2022\n    US          3/11/2022\n    ISO 8601    2022-03-11\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Installation\nDESCRIPTION: This snippet shows how to install the latest version of Robot Framework using pip, or how to install a specific version (4.0).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==4.0\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Converter in Python with Library Access\nDESCRIPTION: This Python code shows an example of a custom argument converter that accepts two arguments: the value to convert and the library instance. This allows the converter to access the library state and perform conversion based on that state.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef converter(value, library):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Union with unrecognized type - Python\nDESCRIPTION: Shows how Robot Framework handles cases where a `Union` contains an unrecognized type. Conversion to recognized types (e.g., `int`) is attempted, and if that fails, the original argument is used as-is. This behavior was enhanced in Robot Framework 6.1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef example(argument: Union[int, Unrecognized]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Command line arguments example in Robot Framework\nDESCRIPTION: This snippet demonstrates how command line arguments should be passed to `robot` or `rebot` commands. Double quotes or backslashes should be used to use space in command line arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_17\n\nLANGUAGE: Robot Framework\nCODE:\n```\n--doc \"We got spaces\"\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\n--doc We\\ got\\ spaces\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP loop with STRICT mode\nDESCRIPTION: This Robot Framework example demonstrates the STRICT mode of the FOR IN ZIP loop. In this mode, the loop will fail if the input lists have different lengths, preventing potential false positives.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSTRICT mode\n    [Documentation]    This loop fails due to lists lengths being different.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=STRICT\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Documenting with automatic newlines\nDESCRIPTION: This example shows how to use continued documentation lines to automatically insert newlines in Robot Framework. This approach improves readability by allowing long documentation strings and metadata to be split across multiple lines without manual newline characters.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation\n...    First line.\n...\n...    Second paragraph. This time\n...    with multiple lines.\nMetadata\n...    Example list\n...    - first item\n...    - second item\n...    - third\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP loop with LONGEST mode\nDESCRIPTION: This Robot Framework example illustrates the LONGEST mode of the FOR IN ZIP loop. The loop iterates as many times as the longest list, filling in missing values from shorter lists with `None`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nLONGEST mode\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `None`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Problematic Validation\nDESCRIPTION: This example illustrates a scenario where the FOR IN ZIP loop can lead to false positives. The test passes as long as the initial items from `Get something` match the expected values, regardless of the total number of items returned. This can be problematic in validation scenarios where ensuring the correct number of returned items is crucial.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Validate something    expected 1    expected 2    expected 3\n\n*** Keywords ****\nValidate something\n    [Arguments]    @{expected}\n    @{actual} =    Get something\n    FOR    ${act}    ${exp}    IN ZIP    ${actual}    ${expected}\n        Validate one thing    ${act}    ${exp}\n    END\n```\n\n----------------------------------------\n\nTITLE: Setting Version Variable\nDESCRIPTION: This command sets the `VERSION` environment variable, which stores the version number of the release. It's used by other commands during the release process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nVERSION=<version>\n```\n\n----------------------------------------\n\nTITLE: Nested FOR and IF example in Robot Framework\nDESCRIPTION: This example shows how to nest FOR and IF control structures in Robot Framework 4.0. It iterates through rows and cells, processing cells that are not equal to \"IGNORE\".\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a3.rst#_snippet_2\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${row}    IN    @{rows}\n    FOR    ${cell}    IN    @{row}\n        IF    \"${cell}\" != \"IGNORE\"\n            Process Cell    ${cell}\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework\nDESCRIPTION: This command installs the latest available release of Robot Framework using pip. The `--pre` flag includes pre-release versions, and `--upgrade` ensures that any existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditional Branches with ELSE IF in Robot Framework\nDESCRIPTION: This code illustrates how to use ELSE IF branches in Robot Framework for multiple conditional checks. It evaluates `${rc}` to determine if it's positive, negative, zero, or another type. The corresponding keyword (`Positive keyword`, `Negative keyword`, `Zero keyword`, or `Fail`) is executed based on the condition. This shows a more complex conditional scenario.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    $rc > 0\n        Positive keyword\n    ELSE IF    $rc < 0\n        Negative keyword\n    ELSE IF    $rc == 0\n        Zero keyword\n    ELSE\n        Fail    Unexpected rc: ${rc}\n    END\n```\n\n----------------------------------------\n\nTITLE: Adding Test/Keyword via Listener API in Python\nDESCRIPTION: This snippet demonstrates adding a new test to each executed suite and a new keyword call to each test using the listener API. It shows how to dynamically modify test suites and cases during execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef start_suite(data, result):\n    data.tests.create(name='New test')\n\ndef start_test(data, result):\n    data.body.create_keyword(name='Log', args=['Keyword added by listener!'])\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework via pip\nDESCRIPTION: This snippet shows how to install or upgrade to the latest version of Robot Framework using pip, the Python package installer. It also shows how to install a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==4.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Robot Framework\nDESCRIPTION: This snippet shows how to define tasks instead of test cases in Robot Framework 3.1. The `*** Tasks ***` header is used to indicate that the data contains tasks for Robotic Process Automation (RPA).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nExample Task\n    Log    This is a task\n```\n\n----------------------------------------\n\nTITLE: Example Robot Framework test case showing use of the custom converter\nDESCRIPTION: This is an example of how the custom converter would be used within a Robot Framework test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_22\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Keyword    11.3.2022\n```\n\n----------------------------------------\n\nTITLE: Status Tag Example in XML\nDESCRIPTION: This XML snippet demonstrates the structure of a `<status>` tag, showing the attributes `status`, `start`, and `elapsed`. This is likely part of a Robot Framework output.xml file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Keyword - Python\nDESCRIPTION: This code snippet shows how to deprecate a keyword in Robot Framework by including the `*DEPRECATED*` marker in the keyword's docstring. When a deprecated keyword is executed, a warning message is logged. The example shows that the short documentation after the marker is displayed in the warning.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_97\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(argument):\n    \"\"\"*DEPRECATED!!* Use keyword `Other Keyword` instead.\n\n    This keyword does something to given ``argument`` and returns results.\n    \"\"\"\n    return do_something(argument)\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0a2 with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip. It upgrades the existing installation if Robot Framework is already installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version with pip\nDESCRIPTION: This snippet demonstrates how to install a specific version of Robot Framework using pip. It ensures that the Robot Framework installation matches the exact version specified (6.0.2 in this case).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.2.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\npip install robotframework==6.0.2\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework\nDESCRIPTION: Install the latest Robot Framework release candidate using pip. This command upgrades an existing installation to the newest pre-release version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: User Keyword without Varargs with Named Argument\nDESCRIPTION: This Robot Framework keyword definition showcases how to use a named argument (`${first}`) and an optional second named argument (`${second}`) with a default value. The `@{}`, also referred to as an empty list, means it does not accept variable arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWithout Varargs\n    [Arguments]    @{}    ${first}    ${second}=default\n    Log Many    ${first}    ${second}\n```\n\n----------------------------------------\n\nTITLE: Flattened Keyword Structure Example in XML\nDESCRIPTION: This XML snippet shows the structure of a flattened keyword in the output.xml file after using the `robot:flatten` tag.  The child `Log` keywords are removed, and their messages are directly included in the parent `Example` keyword. The tag `robot:flatten` indicates that the keyword was flattened.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <tag>robot:flatten</tag>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230317 00:54:34.771\" endtime=\"20230317 00:54:34.772\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: WHILE Loop with 'limit' and 'on_limit' (Simplified) in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates a simplified `WHILE` loop header using only `limit` and `on_limit`.  When the condition is omitted, the loop will always be executed up to the limit, or until a `BREAK` keyword is used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\nWHILE    limit=10   on_limit=PASS\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with @keyword Decorator (Type Dictionary)\nDESCRIPTION: This Python code demonstrates how to use the `@keyword` decorator to specify argument types using a dictionary that maps argument names to types. This method works with both Python 2 and Python 3. This example maps 'count' to an integer and 'case_insensitive' to a boolean.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest available Robot Framework release using pip. The --pre flag is used to include pre-release versions, and --upgrade ensures that any existing installations are updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Using BuiltIn - Python\nDESCRIPTION: This snippet demonstrates how to initialize a Robot Framework library using the BuiltIn library. It initializes the library and checks if Robot Framework is running and not in dry-run mode before performing initialization tasks. This allows specific initializations during actual test execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.libraries.BuiltIn import BuiltIn\n\n\nclass MyLibrary:\n\n    def __init__(self):\n        builtin = BuiltIn()\n        if builtin.robot_running and not builtin.dry_run_active:\n            # Do some initialization that only makes sense during real execution.\n```\n\n----------------------------------------\n\nTITLE: Keyword Structure Flattened with robot:flatten Tag XML\nDESCRIPTION: This XML snippet shows the resulting `output.xml` when the `Example` keyword is flattened using the `robot:flatten` tag.  The tag is present in the keyword definition, and the nested keyword structure is replaced with a simplified structure containing only messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <tag>robot:flatten</tag>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230317 00:54:34.771\" endtime=\"20230317 00:54:34.772\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: New FOR Loop Syntax - Robot Framework\nDESCRIPTION: This snippet shows the new `FOR` loop syntax introduced in Robot Framework 3.1 and fully supported in version 4.0. It uses `FOR`, `IN`, `END` keywords to define the loop structure, enhancing readability.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation - Bash\nDESCRIPTION: This snippet demonstrates how to verify the Robot Framework installation by checking its version. It uses the `robot --version` command.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ robot --version\nRobot Framework 7.0 (Python 3.10.3 on linux)\n```\n\n----------------------------------------\n\nTITLE: Custom Date Conversion in Python for Robot Framework\nDESCRIPTION: This example demonstrates how to implement a custom argument converter for Robot Framework libraries implemented in Python. It overrides the default date converter to handle dates in the `dd.mm.yyyy` format commonly used in Finland. A custom function `parse_fi_date` parses the date string, and it is registered as a converter for the `date` type using the `ROBOT_LIBRARY_CONVERTERS` attribute. The keyword then receives the date object directly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n\n\n# Register converter function for the specified type.\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\n# Keyword using custom converter. Converter is got based on argument type.\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Validating Input with Regular Expressions (Python)\nDESCRIPTION: This Python code enhances the custom argument converter to validate the input date format using regular expressions. If the input doesn't match the expected format (dd.mm.yyyy), a `ValueError` with a helpful message is raised.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport re\n\n\ndef parse_fi_date(value):\n    # Validate input using regular expression and raise ValueError if not valid.\n    match = re.match(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$', value)\n    if not match:\n        raise ValueError(f\"Expected date in format 'dd.mm.yyyy', got '{value}'.\")\n    day, month, year = match.groups()\n    return date(int(year), int(month), int(day))\n\n\nROBOT_LIBRARY_CONVERTERS = {date: parse_fi_date}\n\n\ndef keyword(arg: date):\n    print(f'year: {arg.year}, month: {arg.month}, day: {arg.day}')\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Old FOR Loop Syntax Example\nDESCRIPTION: This snippet demonstrates the old FOR loop syntax that is no longer supported in Robot Framework 4.0. It is provided for historical context and understanding of the changes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Committing Release Notes Changes\nDESCRIPTION: This command commits the changes to the release notes file with a descriptive message, recording the changes in the Git history.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Release notes for $VERSION\" doc/releasenotes/rf-$VERSION.rst\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: Commands to install Robot Framework using pip, including upgrading to the latest version and installing a specific version. `pip` must be installed on the system.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.2\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Converter Python\nDESCRIPTION: This Python snippet demonstrates a custom argument converter that accepts two arguments: the value to be converted and the library instance or module. This allows the converter to access and utilize the library's state during the conversion process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef converter(value, library):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade Robot Framework to the latest available version using pip, the Python package installer. The `--pre` flag includes pre-release versions, and `--upgrade` ensures the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.1.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Define tasks in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define tasks in Robot Framework using the `*** Tasks ***` header, as opposed to the traditional `*** Test Cases ***` header. This is part of the RPA support introduced in Robot Framework 3.1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nExample Task\n    Log    This is a task\n```\n\n----------------------------------------\n\nTITLE: Pushing Version Changes\nDESCRIPTION: This command pushes the committed version changes to the remote Git repository.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Formatting Preformatted Text Blocks\nDESCRIPTION: Demonstrates how to embed preformatted text blocks in documentation by starting lines with '| ' (pipe followed by a space). The leading '| ' is removed in the resulting HTML, preserving all other whitespace.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nDoc before block:\n| inside block\n|    some   additional whitespace\nAfter block.\n```\n\n----------------------------------------\n\nTITLE: Creating Source Distribution and Wheel\nDESCRIPTION: This command creates a source distribution (sdist) and a wheel package for the release, which are used for distributing the software.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\npython setup.py sdist bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Python Versions on Linux\nDESCRIPTION: This snippet illustrates how to check specific Python 3 versions installed on a Linux system. This is useful when multiple Python versions are present, and a specific one needs to be targeted.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ python3.11 --version\nPython 3.11.7\n$ python3.12 --version\nPython 3.12.1\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version with pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip. This is useful for ensuring compatibility or reproducing specific environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1.1.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==7.1.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Union Type Hint\nDESCRIPTION: This code snippet defines a Python function `example` that uses a `Union` type hint containing generics (`List[int]`, `Dict[str, int]`) for the argument `arg`. This was used to illustrate a bug fix related to argument conversion in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.2b1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Union[List[int], Dict[str, int]]):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Registering Library as Listener Using 'SELF'\nDESCRIPTION: This example shows how to register a library as a listener using the string `SELF` with the `@library` decorator in Robot Framework 7.0+.  This is a concise way to register the library itself as a listener. The `@keyword` decorator must be used on keywords when using the `@library` decorator.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(scope='SUITE', listener='SELF')\nclass LibraryItselfAsListener:\n\n    # Listener version is not specified, so uses the listener version 3 by default.\n    # When using the @library decorator, keywords must use the @keyword decorator,\n    # so there is no need to use the '_' prefix here.\n    def end_suite(self, data, result):\n        print(f\"Suite '{data.name}' ending with status {result.status}.\")\n\n    @keyword\n    def example_keyword(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with Partial @keyword Type Specification (List)\nDESCRIPTION: This Python code demonstrates specifying the type for only one argument using the `@keyword` decorator with a list, using `None` as a placeholder for unspecified argument types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(types=[None, float])\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Output with Rebot\nDESCRIPTION: Shows how to create a JSON output file using Rebot by specifying a file with a `.json` extension with the `--output` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example\nDESCRIPTION: This robotframework snippet shows an example test case that uses a custom keyword with a specific date format (dd.mm.yyyy). It highlights the need for custom argument conversion when the default format (yyyy-mm-dd) is not suitable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_58\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Keyword    25.1.2022\n```\n\n----------------------------------------\n\nTITLE: Handling Embedded Arguments Conflict Resolution\nDESCRIPTION: Example Robot Framework test case demonstrating how Robot Framework 6.0 resolves conflicts when multiple keywords match a call with embedded arguments.  The more specific keyword is chosen automatically.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nAutomatic conflict resolution\n    Execute \"ls\"\n    Execute \"ls\" with \"-lh\"\n\n*** Keywords ***\nExecute \"${cmd}\"\n    Log    Running command '${cmd}'.\n\nExecute \"${cmd}\" with \"${opts}\"\n    Log    Running command '${cmd}' with options '${opts}'.\n```\n\n----------------------------------------\n\nTITLE: Custom Type Conversion with Type Hint (Python)\nDESCRIPTION: This Python code snippet demonstrates how to use type hints to restrict the types accepted by a custom type converter in Robot Framework. The type hint `str` ensures that the converter only receives string values, preventing errors when non-string values are passed as arguments. It is part of defining custom type converters within Robot Framework libraries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n     # ...\n```\n\n----------------------------------------\n\nTITLE: HTML Format Library Documentation Example (Python)\nDESCRIPTION: This snippet demonstrates documenting a Robot Framework library using HTML format. The `ROBOT_LIBRARY_DOC_FORMAT` attribute is set to 'HTML'. The library documentation uses HTML tags for formatting.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n    \"\"\"Example library in HTML format.\n\n    <ul>\n      <li>Formatting with <b>bold</b> and <i>italic</i>.\n      <li>URLs are not turned to links automatically.\n      <li>Custom links like <a href=\"http://www.w3.org/html\">HTML</a> are supported.\n      <li>Linking to `My Keyword` works.\n    </ul>\n    \"\"\"\n    ROBOT_LIBRARY_DOC_FORMAT = 'HTML'\n\n    def my_keyword():\n        \"\"\"Nothing more to see here.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Terminology configuration for RPA\nDESCRIPTION: Example demonstrating how to use the *** Tasks *** header to define tasks instead of tests in Robot Framework, when configuring for Robotic Process Automation (RPA). This activates RPA mode and changes terminology in reports and logs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nExample Task\n    Log    Hello, RPA!\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP loop with LONGEST mode and fill value\nDESCRIPTION: This Robot Framework example shows the LONGEST mode of the FOR IN ZIP loop combined with a custom fill value. Missing values from shorter lists are filled with the specified `fill` value (in this case, `-`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_17\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nLONGEST mode with custom fill value\n    [Documentation]    This loop executes five times.\n    ...                On last two rounds `${n}` has value `-`.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=LONGEST    fill=-\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet lists Python package dependencies required for the Robot Framework project. These dependencies are used for various development tasks, including task automation (invoke), release management (rellu, twine, wheel), documentation generation (docutils, sphinx), code highlighting (pygments), and data validation (pydantic).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/requirements-dev.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ninvoke >= 0.20\nrellu >= 0.7\ntwine >= 1.12\nwheel\ndocutils\npygments >= 2.8\nsphinx\npydantic < 2\ntelnetlib-313-and-up; python_version >= \"3.13\"\n```\n\n----------------------------------------\n\nTITLE: User Keyword Timeout Configuration Robot Framework\nDESCRIPTION: Demonstrates how to configure timeouts for user keywords using the [Timeout] setting. Includes examples of hardcoded timeouts, configurable timeouts using keyword arguments, and creating a wrapper keyword for running other keywords with a configurable timeout.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/AdvancedFeatures.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nHardcoded\n    [Arguments]    ${arg}\n    [Timeout]    1 minute 42 seconds\n    Some Keyword    ${arg}\n\nConfigurable\n    [Arguments]    ${arg}    ${timeout}\n    [Timeout]    ${timeout}\n    Some Keyword    ${arg}\n\nRun Keyword with Timeout\n    [Arguments]    ${keyword}    @{args}    &{kwargs}    ${timeout}=1 minute\n    [Documentation]    Wrapper that runs another keyword with a configurable timeout.\n    [Timeout]    ${timeout}\n    Run Keyword    ${keyword}    @{args}    &{kwargs}\n```\n\n----------------------------------------\n\nTITLE: Module-Based Library Example with Imported Function (Python)\nDESCRIPTION: This snippet illustrates a module-based Robot Framework library where an imported function could unexpectedly become a keyword.  If used as a library, `example_keyword` and `current_thread` would both be keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import current_thread\n\n\ndef example_keyword():\n    thread_name = current_thread().name\n    print(f\"Running in thread '{thread_name}'.\")\n```\n\n----------------------------------------\n\nTITLE: Evaluate Keyword with List Comprehension in Robot Framework\nDESCRIPTION: This snippet illustrates using the `Evaluate` keyword to perform list comprehension with modules like `json`.  It addresses the limitation of using modules directly within list comprehensions in Python 3 by importing the required module using the `modules` parameter of the Evaluate keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nDoes not work due to list comprehension\n    Log    ${{[json.loads(item) for item in ('1', '\"b\"')]}}\n\nEvaluate keyword with list comprehension\n    ${items} =    Evaluate    [json.loads(item) for item in ('1', '\"b\"')]    modules=json\n    Log    ${items}\n```\n\n----------------------------------------\n\nTITLE: Library Registration as Listener using 'SELF'\nDESCRIPTION: This Python code demonstrates how a library can register itself as a listener using the 'SELF' string.  The `@library` decorator is used to specify the listener. The Example class defines a 'start_suite' method that will be called when a suite starts, making the library act as a listener. Requires `robot.api.deco`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(listener='SELF')\nclass Example:\n\n    def start_suite(self, data, result):\n        ...\n\n    @keyword\n    def example(self, arg):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with JSON Spec File\nDESCRIPTION: This snippet demonstrates how to use a previously generated JSON spec file as input for Libdoc to create documentation. The output can be in HTML or another format as needed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nlibdoc Example.json Example.html\n```\n\n----------------------------------------\n\nTITLE: Tag Pattern Examples\nDESCRIPTION: Examples showcasing how to use tag patterns with `AND`, `OR`, and `NOT` operators to include or exclude tests based on their tags. Operators must be in uppercase.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n--include fooANDbar     # Matches tests containing tags 'foo' and 'bar'.\n--exclude xx&yy&zz      # Matches tests containing tags 'xx', 'yy', and 'zz'.\n--include fooORbar      # Matches tests containing either tag 'foo' or tag 'bar'.\n--exclude xxORyyORzz    # Matches tests containing any of tags 'xx', 'yy', or 'zz'.\n--include fooNOTbar     # Matches tests containing tag 'foo' but not tag 'bar'.\n--exclude xxNOTyyNOTzz  # Matches tests containing tag 'xx' but not tag 'yy' or tag 'zz'.\n--include NOTfoo        # Matches tests not containing tag 'foo'\n--include NOTfooANDbar  # Matches tests not containing tags 'foo' and 'bar'\n--include xANDyORz      # Matches tests containing either tags 'x' and 'y', or tag 'z'.\n--include xORyNOTz      # Matches tests containing either tag 'x' or 'y', but not tag 'z'.\n--include xNOTyANDz     # Matches tests containing tag 'x', but not tags 'y' and 'z'.\n```\n\n----------------------------------------\n\nTITLE: Output XML Keyword Names - New\nDESCRIPTION: Illustrates the new format for storing keyword names in output.xml in Robot Framework 7.0. The keyword name is in the `name` attribute, and the library/resource file is now in the `owner` attribute. The original name for keywords with embedded arguments is in `source_name`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Robot Framework GROUP syntax example\nDESCRIPTION: This Robot Framework snippet demonstrates the use of the `GROUP` syntax to group related keywords and control structures within a test case. Groups can be named or anonymous and can be nested.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nValid login\n    GROUP    Open browser to login page\n        Open Browser    ${LOGIN URL}\n        Title Should Be    Login Page\n    END\n    GROUP    Submit credentials\n        Input Username    username_field    demo\n        Input Password    password_field    mode\n        Click Button    login_button\n    END\n    GROUP    Login should have succeeded\n        Title Should Be    Welcome Page\n    END\n\nAnonymous group\n    GROUP\n        Log    Group name is optional.\n    END\n\nNesting\n    GROUP\n        GROUP    Nested group\n            Log    Groups can be nested.\n        END\n        IF    True\n            GROUP\n                Log    Groups can also be nested with other control structures.\n            END\n        END\n    END\n```\n\n----------------------------------------\n\nTITLE: Example Listener (version 2)\nDESCRIPTION: This example implements a listener that stops execution if a test fails. It uses listener version 2. It prints a message indicating the failed test and prompts the user to press enter to continue.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Listener that stops execution if a test fails.\"\"\"\n\nROBOT_LISTENER_API_VERSION = 2\n\ndef end_test(name, attrs):\n    if attrs['status'] == 'FAIL':\n        print(f\"Test '{name}'\" failed: {attrs['message']}\")\n        input(\"Press enter to continue.\")\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP loop with SHORTEST mode\nDESCRIPTION: This Robot Framework example showcases the SHORTEST mode of the FOR IN ZIP loop. The loop iterates only as many times as the shortest list allows, ignoring the remaining elements in longer lists. This is the default behavior.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{CHARACTERS}     a    b    c    d    f\n@{NUMBERS}        1    2    3\n\n*** Test Cases ***\nSHORTEST mode\n    [Documentation]    This loop executes three times.\n    FOR    ${c}    ${n}    IN ZIP    ${CHARACTERS}    ${NUMBERS}    mode=SHORTEST\n        Log    ${c}: ${n}\n    END\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework using pip\nDESCRIPTION: This command installs the latest available pre-release version of Robot Framework using pip. The `--pre` flag allows installation of pre-release versions, and `--upgrade` ensures that an existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version with pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip.  It installs version 4.1rc1.  This command requires pip to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1rc1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==4.1rc1\n```\n\n----------------------------------------\n\nTITLE: Old For Loop Example with Pipe Separated Format\nDESCRIPTION: This snippet shows the old-style FOR loop syntax within the pipe-separated format, which is no longer supported in Robot Framework 3.2. The example demonstrates the syntax using `:FOR` and requires escaping all keywords inside the loop. The spaces are part of the pipe-separated format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_4\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| :FOR | ${x} | IN | 1 | 2\n|      | Log  | ${x}\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest available version of Robot Framework using pip, including pre-releases and upgrades.  It installs or upgrades the Robot Framework package to the newest available version from PyPI.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.2.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: User Keyword with Varargs and Named Argument\nDESCRIPTION: This Robot Framework keyword definition demonstrates the use of variable arguments (`@{varargs}`) and a named argument (`${named}`). The keyword takes any number of positional arguments and one named argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWith Varargs\n    [Arguments]    @{varargs}    ${named}\n    Log Many    @{varargs}    ${named}\n```\n\n----------------------------------------\n\nTITLE: Uploading Distributions to PyPI\nDESCRIPTION: This command uses `twine` to upload the created distribution packages to the Python Package Index (PyPI), making them available for installation by others.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Implicit Type Conversion\nDESCRIPTION: This Python code showcases how Robot Framework automatically infers argument types from default values. If an argument has a default value that is not a string, Robot Framework will attempt to convert the argument passed to the keyword to that type. Here 'count' would be assumed as an integer as it has a default value of -1\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Stop on Failure Example\nDESCRIPTION: This example demonstrates the use of the `robot:stop-on-failure` tag to stop execution if a keyword fails. Even though `Run Keyword and Continue on Failure` is used, the first keyword is executed and fails, but the second `Log` keyword is still run due to the 'Continue On Failure' aspect.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    [Tags]    robot:stop-on-failure\n    Run Keyword and Continue on Failure    Should be Equal    1    2\n    Log    This is executed regardless the tag\n```\n\n----------------------------------------\n\nTITLE: Python Function with Named-Only Arguments\nDESCRIPTION: This Python 3 code illustrates the use of named-only arguments. `case_sensitive` can only be passed as a keyword argument when calling the function.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Python Library Documentation Example\nDESCRIPTION: This example demonstrates how to write documentation for a Python library using docstrings. The first line of a method's docstring is considered the short documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsrc/SupportingTools/ExampleLibrary.py\n```\n\n----------------------------------------\n\nTITLE: Basic TRY/EXCEPT Block in Robot Framework\nDESCRIPTION: This snippet demonstrates a basic TRY/EXCEPT block in Robot Framework. If `Some Keyword` fails with the message `Error message`, the `Error Handler Keyword` is executed. Otherwise, execution continues after the END statement. The match is case-sensitive.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nFirst example\n    TRY\n        Some Keyword\n    EXCEPT    Error message\n        Error Handler Keyword\n    END\n    Keyword Outside\n```\n\n----------------------------------------\n\nTITLE: Selecting files using --parseinclude\nDESCRIPTION: Demonstrates how to use the `--parseinclude` option to select specific files or directories for parsing within a Robot Framework test execution. It uses file names and paths. Glob patterns are supported and allow selecting multiple files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\nrobot --parseinclude example.robot tests       # Parse `example.robot` files anywhere under `tests`.\nrobot -I example_*.robot -I ???.robot tests    # Parse files matching `example_*.robot` or `???.robot` under `tests`.\nrobot -I tests/example.robot tests             # Parse only `tests/example.robot`.\nrobot --parseinclude tests/example tests       # Parse files under `tests/example` directory, recursively.\n```\n\n----------------------------------------\n\nTITLE: VAR syntax for long scalar variables\nDESCRIPTION: Illustrates how to create a scalar variable with a long value split across multiple lines using the VAR syntax in Robot Framework.  The example shows both the default space separator and a custom newline separator.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Long value\n        VAR    ${long}\n        ...    This value is rather long.\n        ...    It has been split to multiple lines.\n        ...    Parts will be joined together with a space.\n\n    Multiline\n        VAR    ${multiline}\n        ...    First line.\n        ...    Second line.\n        ...    Last line.\n        ...    separator=\\n\n```\n\n----------------------------------------\n\nTITLE: Install specific version of Robot Framework with pip\nDESCRIPTION: Installs a specific version of Robot Framework (4.1 in this case) using pip. This is useful for ensuring compatibility and reproducibility.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.rst#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\npip install robotframework==4.1\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Library Documentation Generation\nDESCRIPTION: This snippet shows how to access help information for the `library-docs` task in Invoke.  This will provide details on available options and usage.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ninvoke --help library-docs\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Examples\nDESCRIPTION: Demonstrates named argument syntax within Robot Framework test cases when using a dynamic library.  The `Dynamic` keyword is assumed to have the signature `[a, b=d1, c=d2]`.  It shows how `run_keyword` would be called with two (name, args) or three (name, args, kwargs) arguments based on different argument passing styles.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_100\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***                  # args          # args, kwargs\n   Positional only\n       Dynamic    x                    # [x]           # [x], {}\n       Dynamic    x      y             # [x, y]        # [x, y], {}\n       Dynamic    x      y      z      # [x, y, z]     # [x, y, z], {}\n\n   Named only\n       Dynamic    a=x                  # [x]           # [], {a: x}\n       Dynamic    c=z    a=x    b=y    # [x, y, z]     # [], {a: x, b: y, c: z}\n\n   Positional and named\n       Dynamic    x      b=y           # [x, y]        # [x], {b: y}\n       Dynamic    x      y      c=z    # [x, y, z]     # [x, y], {c: z}\n       Dynamic    x      b=y    c=z    # [x, y, z]     # [x], {y: b, c: z}\n\n   Intermediate missing\n       Dynamic    x      c=z           # [x, d1, z]    # [x], {c: z}\n```\n\n----------------------------------------\n\nTITLE: Splitting Data Across Rows - Robot Framework\nDESCRIPTION: Demonstrates how to split data across multiple rows in Robot Framework using the ellipsis (`...`).  This improves readability when test data is long.  The `SEPARATOR` keyword is used to specify custom separators like newlines.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation      Here we have documentation for this suite.\n...\nDocumentation is often quite long.\n...\n\nIt can also contain multiple paragraphs.\nDefault Tags       default tag 1    default tag 2    default tag 3\n...\ndefault tag 4    default tag 5\n\n*** Variables ***\n${STRING}          This is a long string.\n...\nIt has multiple sentences.\n...\nIt does not have newlines.\n${MULTILINE}       SEPARATOR=\\n\nThis is a long multiline string.\n...\nThis is the second line.\n...\nThis is the third and the last line.\n@{LIST}            this     list     is      quite    long     and\n...\nitems in it can also be long\n&{DICT}            first=This value is pretty long.\n...\nsecond=This value is even longer. It has two sentences.\n\n*** Test Cases ***\nExample\n[Tags]    you    probably    do    not    have    this    many\n...\ntags    in    real    life\nDo X    first argument    second argument    third argument\n...\nfourth argument    fifth argument    sixth argument\n${var} =    Get X\n...\nfirst argument passed to this keyword is pretty long\n...\nsecond argument passed to this keyword is long too\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This snippet demonstrates how to install a specific version of Robot Framework using pip. This ensures that the exact desired version is installed, avoiding potential compatibility issues with newer releases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.1rc1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.1.1rc1\n```\n\n----------------------------------------\n\nTITLE: Library as Listener with SELF\nDESCRIPTION: This Python code snippet demonstrates how a library can register itself as a Robot Framework listener using the `SELF` string. This allows the library class to directly implement listener methods like `start_suite`. The `@library` decorator is used to define the library and specify the listener.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword, library\n\n\n@library(listener='SELF')\nclass Example:\n\n    def start_suite(self, data, result):\n        ...\n\n    @keyword\n    def example(self, arg):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using @library Decorator without Arguments (Python)\nDESCRIPTION: This snippet shows how to use the `@library` decorator without arguments. This disables automatic keyword discovery by setting `ROBOT_AUTO_KEYWORDS` to `False`.  Requires `robot.api.deco`. The class `Example` represents the library.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library\nclass Example:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Inline IF Example Robot Framework\nDESCRIPTION: Demonstrates the inline IF syntax in Robot Framework, where the statement to execute follows the IF marker and condition directly, without needing an END marker. This syntax is more concise for single-statement conditional execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_19\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF\n        IF    $condition1    Keyword    argument\n        IF    $condition2    RETURN\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework with pip\nDESCRIPTION: This command installs the latest available pre-release version of Robot Framework using pip. The --pre flag includes pre-release versions, and --upgrade ensures that the existing installation is updated. This will retrieve the latest available version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2rc2.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework via pip\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip. This ensures that the installed version matches the tested and expected version of the framework, preventing unexpected behavior due to updates.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.3b1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==4.0.3b1\n```\n\n----------------------------------------\n\nTITLE: List and dictionary expansion alternative example\nDESCRIPTION: This example demonstrates the older, less concise way to achieve the same outcome as the previous example prior to Robot Framework 4.0.  It first retrieves the list from the dictionary and assigns it to a new variable, then iterates over that list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n@{items} =    Set Variable    ${var}[items]\nFOR    ${item}    IN    @{items}\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with OperatingSystem library\nDESCRIPTION: This snippet generates HTML documentation for the OperatingSystem library. The output file will be OperatingSystem.html and the default Robot Framework documentation format is used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlibdoc OperatingSystem OperatingSystem.html\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases: Named-Only Arguments\nDESCRIPTION: This example demonstrates how Robot Framework handles named-only arguments in dynamic libraries, introduced in RF 3.1.  It shows how named-only arguments are passed to the `run_keyword` method along with positional and free named arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_102\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***                                  # args, kwargs\n   Only named-only\n       Dynamic    named=value                          # [], {named: value}\n       Dynamic    named=value    named2=2              # [], {named: value, named2: 2}\n\n   Named-only with positional and varargs\n       Dynamic    argument       named=xxx             # [argument], {named: xxx}\n       Dynamic    a1             a2         named=3    # [a1, a2], {named: 3}\n\n   Named-only with positional as named\n       Dynamic    named=foo      positional=bar        # [], {positional: bar, named: foo}\n\n   Named-only with free named\n       Dynamic    named=value    foo=bar               # [], {named: value, foo=bar}\n       Dynamic    named2=2       third=3    named=1    # [], {named: 1, named2: 2, third: 3}\n```\n\n----------------------------------------\n\nTITLE: Pulling Changes with Rebase\nDESCRIPTION: This command fetches the latest changes from the remote repository and rebases the local branch on top of them, ensuring a clean and linear history.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit pull --rebase\n```\n\n----------------------------------------\n\nTITLE: `**kwargs` Support - Robot Framework\nDESCRIPTION: Illustrates how to use the `&{kwargs}` syntax in Robot Framework user keywords to accept free keyword arguments, similar to Python's `**kwargs`. This allows passing a variable number of named arguments to a keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nRun My Process\n    [Arguments]    @{arguments}    &{configuration}\n    Run Process    myproc.exe    @{arguments}    &{configuration}\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases for Custom Types\nDESCRIPTION: These Robot Framework test cases demonstrate how to use keywords that accept custom date types (FiDate, UsDate) with specific date formats. This allows supporting multiple date formats within the same test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_30\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     11.3.2022\n    US          3/11/2022\n    ISO 8601    2022-03-11\n```\n\n----------------------------------------\n\nTITLE: Iterating Dictionary with FOR IN ENUMERATE (Robot Framework)\nDESCRIPTION: Demonstrates using FOR IN ENUMERATE to iterate over a dictionary, accessing the index, key, and value.  This allows tracking the position of each item during iteration.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_7\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${index}    ${key}    ${value}    IN ENUMERATE    &{dict}\n    Log    Key is '${key}' and value is '${value}' at index ${index}.\nEND\nFOR    ${item}    IN ENUMERATE    &{dict}\n    Length Should Be    ${item}    3\n    Log    Key is '${item}[1]' and value is '${item}[2]' at index ${item}[0].\nEND\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords in Robot Framework Resource\nDESCRIPTION: This snippet demonstrates how to define keywords in a Robot Framework resource file. The keyword 'Keyword from TXT resource' performs no operation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/txt_resource.txt#_snippet_2\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*Keywords  Action  Argument  Argument  Argument\nKeyword from TXT resource  No operation      \n```\n\n----------------------------------------\n\nTITLE: Robot Framework For Loop Example (New Syntax)\nDESCRIPTION: Illustrates the new, simplified FOR loop syntax in Robot Framework 3.1, using `FOR`, `IN`, and `END` markers.  Keywords inside the loop are not escaped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${animal}    IN    cat    dog    cow\n    Keyword    ${animal}\n    Another keyword\nEND\n```\n\n----------------------------------------\n\nTITLE: XML Output of Flattened Keyword Using robot:flatten Tag\nDESCRIPTION: This XML snippet shows the output generated when the `Example` keyword is flattened using the `robot:flatten` tag. The tag is included in the output, and the keyword structure is flattened, preserving the messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <tag>robot:flatten</tag>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230317 00:54:34.771\" endtime=\"20230317 00:54:34.772\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.0 beta 1 with pip\nDESCRIPTION: Installs the latest available pre-release of Robot Framework using pip. This allows users to test new features and identify potential issues before the final release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing Docutils and Pygments with pip\nDESCRIPTION: This snippet shows how to install the required dependencies, Docutils and Pygments, using the pip package manager. These tools are necessary to generate the HTML version of the Robot Framework User Guide from the reStructuredText source files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install docutils pygments\n```\n\n----------------------------------------\n\nTITLE: Matching Errors with Regular Expressions in Robot Framework\nDESCRIPTION: This snippet demonstrates using regular expressions to match error messages in EXCEPT branches. The 'type=regexp' parameter is used to specify that the messages should be treated as regular expressions. Note that backslashes in regular expressions need to be escaped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nRegular expression\n    TRY\n        Some Keyword\n    EXCEPT    ValueError: .*    type=regexp\n        Error Handler 1\n    EXCEPT    [Ee]rror \\\\d+ occurred    type=regexp    # Backslash needs to be escaped.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Using the @library decorator in Robot Framework\nDESCRIPTION: This code snippet showcases the usage of the `@library` decorator in Robot Framework to define library scope and version. It demonstrates how to achieve the same effect as using the traditional `ROBOT_LIBRARY_SCOPE` and `ROBOT_LIBRARY_VERSION` class attributes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', version='3.2b1')\nclass NewWay:\n    # actual library code\n\n\nclass OldWay:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_VERSION = '3.2b1'\n\n    # actual library code\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case with Custom Date Formats\nDESCRIPTION: This Robot Framework test case demonstrates how to use the custom date converters defined in the previous Python example. It uses keywords that accept dates in Finnish ('dd.mm.yyyy'), US ('mm/dd/yyyy'), and ISO 8601 ('yyyy-mm-dd') formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_29\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     11.3.2022\n    US          3/11/2022\n    ISO 8601    2022-03-11\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variable Definition\nDESCRIPTION: This section defines a variable named `${msg}` with a value of '*ERROR*'. This variable is used in the test cases to simulate and verify error conditions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/mixed_data/TXT.txt#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Variable\n${msg}    *ERROR*\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases Using Positional-Only Arguments\nDESCRIPTION: This Robot Framework test case demonstrates the usage of a keyword with a positional-only argument. It shows how the keyword can be called with both positional and named arguments for the 'normal' argument, and illustrates a case where passing positional-only arguments with named syntax results in unexpected behavior.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_36\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Positional-only and normal argument used as positional arguments.\n    Keyword    foo    bar\n    # Normal argument can also be named.\n    Keyword    foo    normal=bar\n```\n\n----------------------------------------\n\nTITLE: Using Python Debugger (pdb) in Python Library\nDESCRIPTION: This snippet shows how to use the Python debugger (pdb) within a Python library used by Robot Framework. It redirects the standard output stream to allow pdb to work correctly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pdb; pdb.Pdb(stdout=sys.__stdout__).set_trace()\n```\n\n----------------------------------------\n\nTITLE: Fix for Libdoc HTML Output with Type Hints\nDESCRIPTION: This fix addresses an issue where Libdoc's HTML outputs were incorrect if type hints matched JavaScript variables in the browser namespace or keyword names. This ensures that type hints are displayed correctly in the generated documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: reStructuredText Format Library Documentation Example (Python)\nDESCRIPTION: This snippet demonstrates using reStructuredText format for Robot Framework library documentation.  The `ROBOT_LIBRARY_DOC_FORMAT` attribute is set to 'reST'.  It showcases formatting with bold and italic text, handling URLs and custom links, and linking to keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n    \"\"\"Example library in reStructuredText format.\n\n    - Formatting with **bold** and *italic*.\n    - URLs like http://example.com are turned to links.\n    - Custom links like reStructuredText__ are supported.\n    - Linking to \\`My Keyword\\` works but requires backtics to be escaped.\n\n    __ http://docutils.sourceforge.net\n\n    .. code:: robotframework\n\n        *** Test Cases ***\n        Example\n            My keyword    # How cool is this!!?!!?!1!!\n    \"\"\"\n    ROBOT_LIBRARY_DOC_FORMAT = 'reST'\n\n    def my_keyword():\n        \"\"\"Nothing more to see here.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework using pip. By specifying the version number (e.g., 3.0a1), users can ensure they are using the intended version of the framework, avoiding unintended updates or changes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==3.0a1\n```\n\n----------------------------------------\n\nTITLE: Capturing error message in Robot Framework EXCEPT\nDESCRIPTION: This example demonstrates capturing the error message into a variable using the `AS ${var}` syntax in an EXCEPT branch. This allows for dynamic error handling based on the actual error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nCapture error\n    TRY\n        Some Keyword\n    EXCEPT    GLOB: ValueError: *    AS   ${error}\n        Error Handler 1    ${error}\n    EXCEPT    REGEXP: [Ee]rror \\\\d+    GLOB: ${pattern}    AS    ${error}\n        Error Handler 2    ${error}\n    EXCEPT    AS    ${error}\n        Error Handler 3    ${error}\n    END\n```\n\n----------------------------------------\n\nTITLE: FOR Loop with Key-Value Syntax (Deprecated)\nDESCRIPTION: This example shows a FOR loop using the `key=value` syntax with a dictionary. The syntax is deprecated when *all* values are key=value pairs unless at least one value is escaped like `xxx\\=yyy`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${key}    ${value}    IN    key=value    another=item    one=more\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Robot Framework with pip\nDESCRIPTION: This command installs a specific version (7.1rc1) of Robot Framework using pip. It ensures that the installed version matches exactly the specified version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1rc1.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==7.1rc1\n```\n\n----------------------------------------\n\nTITLE: Restricting Loop Control Keywords in Robot Framework\nDESCRIPTION: This example illustrates that `Exit For Loop` and `Continue For Loop` keywords can no longer be used inside keywords called within a FOR loop in Robot Framework 5.0. It demonstrates a backwards incompatible change related to loop control.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_33\n\nLANGUAGE: robotframework\nCODE:\n```\n***Keywords***\nLooping\n    FOR    ${x}    IN    @{stuff}\n        Keyword\n    END\n\nKeyword\n    Exit For Loop\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version\nDESCRIPTION: Install a specific version of Robot Framework using pip. This allows for testing or using a particular version instead of the latest release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==7.0rc2\n```\n\n----------------------------------------\n\nTITLE: Type Hint Restriction Example\nDESCRIPTION: This snippet demonstrates how to restrict the accepted type for a converter using type hints. The converter only accepts string values, and calling the keyword with an integer will raise a ValueError.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework command line --rpa option\nDESCRIPTION: Demonstrates the use of the `--rpa` command-line option to enable RPA mode when executing Robot Framework tests. This is useful when using data compatible with older versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrebot --rpa output.xml\n```\n\n----------------------------------------\n\nTITLE: Merging Outputs with Rebot\nDESCRIPTION: Demonstrates how to merge XML output files using Rebot's `--merge` option. Includes merging two specific files and merging multiple files with a specified name. This option merges the test results, useful for re-executed tests or test suites executed in pieces.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nrebot --merge original.xml merged.xml\nrebot --merge --name Example first.xml second.xml third.xml\n```\n\n----------------------------------------\n\nTITLE: Mixed Arguments in Library Keywords (Python)\nDESCRIPTION: Python code defining a library keyword that accepts both embedded and normal arguments. This example uses the `@keyword` decorator to define the keyword and shows how to access the arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases using Mixed Argument Keyword\nDESCRIPTION: Demonstrates how to use a keyword with mixed embedded and normal arguments in Robot Framework. The embedded 'animals' argument is passed as part of the keyword name, while the 'count' argument is passed as a normal argument.  Both positional and named argument syntax are shown.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses should be    2\n    Number of horses should be    count=2\n    Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.1 with pip\nDESCRIPTION: These commands demonstrate how to install or upgrade to Robot Framework 7.1 using pip. The first command installs the latest stable version, while the second installs the specific version 7.1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==7.1\n```\n\n----------------------------------------\n\nTITLE: XML Output of Flattened Keyword\nDESCRIPTION: The XML output showing the flattened keyword with the 'robot:flatten' tag.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<kw name=\"Keyword\">\n  <tag>robot:flatten</tag>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230317 00:54:34.772\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230317 00:54:34.771\" endtime=\"20230317 00:54:34.772\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Define a Keyword in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define a custom keyword in Robot Framework. It shows how to set a timeout, define arguments with default values, provide documentation, use logging, define a return value, and add a keyword teardown.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/all_settings.txt#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Keywords ***\nMy kw\n\t[timeout]\t\t1 minute\n\t[arguments]\t\t${arg}     ${level}=WARN\n\t[documentation]\tKw docs\\nwith new line, several spaces \"   \" and a <b>bold tag</b>.\n\tLog\t\t\t\t${arg}\t\t${level}\n\t[return]\t\tfoo\n        [teardown]\tLog\tkeyword teardown\n```\n\n----------------------------------------\n\nTITLE: Equal Sign Argument File Example\nDESCRIPTION: This snippet provides different but identical formats for assigning values to command line arguments within argument files, showcasing the flexibility of using either spaces or the equal sign (=) as separators between the option and its value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n--name An Example\n--name=An Example\n--name       An Example\n```\n\n----------------------------------------\n\nTITLE: Library Decorator Example in Python\nDESCRIPTION: Demonstrates the new `@library` decorator for defining library scope and version, making it equivalent to the old way of setting `ROBOT_LIBRARY_SCOPE` and `ROBOT_LIBRARY_VERSION`. The example shows using the decorator to define library scope and version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import library\n\n\n@library(scope='GLOBAL', version='3.2b1')\nclass NewWay:\n    # actual library code\n\n\nclass OldWay:\n    ROBOT_LIBRARY_SCOPE = 'GLOBAL'\n    ROBOT_LIBRARY_VERSION = '3.2b1'\n\n    # actual library code\n```\n\n----------------------------------------\n\nTITLE: Python Builtins Examples in Robot Framework\nDESCRIPTION: These examples show how to utilize Python's built-in functions (len(), int()) within Robot Framework test cases. The `${{}}` syntax is used to evaluate the functions inline. The `${VAR}` variable is used as an argument to the builtin functions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${VAR}           123\n\n*** Test Cases ***\nPython builtins\n    Should Be Equal      ${{len('${VAR}')}}        ${3}\n    Should Be Equal      ${{int('${VAR}')}}        ${123}\n```\n\n----------------------------------------\n\nTITLE: Using JSON Variable File in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates how to use a JSON variable file to define variables.  The `Variables` setting specifies the path to the JSON file. The test case then verifies that the variables are correctly loaded and accessible.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nVariables        example.json\n\n*** Test Cases ***\nExample\n    Should Be Equal    ${STRING}     Hello, world!\n    Should Be Equal    ${INTEGER}    ${42}\n```\n\n----------------------------------------\n\nTITLE: Selecting files using --extension\nDESCRIPTION: This shows how to use the `--extension` option to specify file extensions that should be parsed during Robot Framework test execution. This option allows including files that are not parsed by default.  Multiple extensions can be separated by a colon.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_2\n\nLANGUAGE: Robot Framework\nCODE:\n```\nrobot --extension rst path/to/tests    # Parse only *.rst files.\nrobot -F robot:rst path/to/tests       # Parse *.robot and *.rst files.\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation with Specific Python Version - Bash\nDESCRIPTION: This snippet shows how to execute Robot Framework with a specific Python version using `python -m robot`. This is useful when multiple Python versions are installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ python3.12 -m robot --version\nRobot Framework 7.0 (Python 3.12.1 on linux)\n\nC:\\>py -3.11 -m robot --version\nRobot Framework 7.0 (Python 3.11.7 on win32)\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Robot Framework Example\nDESCRIPTION: This snippet demonstrates how to embed Robot Framework test data within a reStructuredText document using the 'code' directive. It includes Settings, Variables, Test Cases, and Keywords sections.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation    Example using the reStructuredText format.\nLibrary          OperatingSystem\n\n*** Variables ***\n${MESSAGE}       Hello, world!\n\n*** Test Cases ***\nMy Test\n    [Documentation]    Example test.\n    Log    ${MESSAGE}\n    My Keyword    ${CURDIR}\n\nAnother Test\n    Should Be Equal    ${MESSAGE}    Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Removing Tags\nDESCRIPTION: Demonstrates how to remove globally set tags from individual test cases using the `-tag` syntax. Tags are initially set in the Settings section.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables from Python Modules (Python)\nDESCRIPTION: Shows how to define variables directly within a Python module. All module-level attributes not starting with an underscore are treated as variables. List and dictionary prefixes are used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nVARIABLE = \"An example string\"\nANOTHER_VARIABLE = \"This is pretty easy!\"\nINTEGER = 42\nSTRINGS = [\"one\", \"two\", \"kolme\", \"four\"]\nNUMBERS = [1, INTEGER, 3.14]\nMAPPING = {\"one\": 1, \"two\": 2, \"three\": 3}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import OrderedDict\n\nLIST__ANIMALS = [\"cat\", \"dog\"]\nDICT__FINNISH = OrderedDict([(\"cat\", \"kissa\"), (\"dog\", \"koira\")])\n```\n\n----------------------------------------\n\nTITLE: Keyword Definition in Robot Framework\nDESCRIPTION: This section defines a custom keyword 'Lets fail at keyword', which uses the 'Fail' keyword to explicitly trigger a failure during test execution. This is used to demonstrate how to create and use keywords that intentionally fail.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/failing_suite.txt#_snippet_2\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Keywords ***\nLets fail at keyword\n\tFail\tFailure msg\n```\n\n----------------------------------------\n\nTITLE: Looping Example with Exit For Loop\nDESCRIPTION: This code snippet demonstrates an example of how `Exit For Loop` was used in Robot Framework, but is now considered an anti-pattern and unsupported to be used inside a keyword that is used inside a loop. It highlights the change in Robot Framework 5.0 where loop control keywords can only be used directly inside a FOR loop.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_31\n\nLANGUAGE: robotframework\nCODE:\n```\n***Keywords***\nLooping\n    FOR    ${x}    IN    @{stuff}\n        Keyword\n    END\n\nKeyword\n    Exit For Loop\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0 Beta 1 with pip\nDESCRIPTION: This command uses pip to install the latest pre-release version of Robot Framework, which includes beta versions. The --pre flag ensures that pre-release versions are considered during the installation or upgrade process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Typing with stringly typed unions - Python\nDESCRIPTION: Illustrates the use of stringly typed unions (`'type1 | type2'`) for specifying multiple argument types. This syntax is compatible with older Python versions. Robot Framework 7.0 supports this syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\ndef example(length: 'int | float', padding: 'int | str | None' = None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade Robot Framework using the pip package installer. The first command installs the latest version, while the second installs a specific version (3.1.2).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==3.1.2\n```\n\n----------------------------------------\n\nTITLE: Robot Framework For Loop Example (Old Syntax)\nDESCRIPTION: Demonstrates the old FOR loop syntax in Robot Framework, which is still supported but will be deprecated. Uses `:FOR` and backslashes for escaping keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Resource File Example\nDESCRIPTION: This is an example of a resource file written in reStructuredText format. It includes Robot Framework settings, variables, and keywords defined within `code:: robotframework` blocks.  Text outside these blocks is ignored.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_3\n\nLANGUAGE: rest\nCODE:\n```\nResource file using reStructuredText\n------------------------------------\n\nThis text is outside code blocks and thus ignored.\n\n.. code:: robotframework\n\n   *** Settings ***\n   Library          OperatingSystem\n\n   *** Variables ***\n   ${MESSAGE}       Hello, world!\n\nAlso this text is outside code blocks and is ignored. Code blocks not\ncontaining Robot Framework data are ignored as well.\n\n.. code:: robotframework\n\n   # Both space and pipe separated formats are supported.\n\n   | *** Keywords ***  |                        |         |\n   | My Keyword        | [Arguments]            | ${path} |\n   |                   | Directory Should Exist | ${path} |\n```\n\n----------------------------------------\n\nTITLE: Restricting Date Conversion Value Types\nDESCRIPTION: This Python code demonstrates how to restrict the allowed input types for the `parse_fi_date` function using a type hint (`value: str`). This prevents the converter from being called with unexpected types, such as integers, and results in a clearer error message if the input is not a string.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef parse_fi_date(value: str):\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Keyword Structure Flattened with Command Line Option XML\nDESCRIPTION: This XML snippet demonstrates how the `output.xml` file looks when the `Example` keyword is flattened using the `--flattenkeywords` command-line option. The child keywords are removed, but their messages are preserved, simplifying the structure.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Keyword\">\n  <doc>_*Content flattened.*_</doc>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip. The `--pre` flag allows installation of pre-release versions, and `--upgrade` ensures that the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Generating Combined Tag Statistics - Robot Framework\nDESCRIPTION: This example demonstrates how to combine statistics from multiple tags using the `--tagstatcombine` option.  Combined tags are created using tag patterns with wildcards (`*`, `?`) and logical operators (`AND`, `OR`, `NOT`).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n--tagstatcombine owner-*\n--tagstatcombine smokeANDmytag\n--tagstatcombine smokeNOTowner-janne*\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define list variables in Robot Framework using the `*** Variables ***` section. It shows how to define both English and Finnish lists of animals. These variables are used later in a loop example.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{ANIMALS}    dog      cat    horse    cow    elephant\n@{ELÄIMET}    koira    kissa\n```\n\n----------------------------------------\n\nTITLE: Creating Variables Dynamically (Python)\nDESCRIPTION: Shows how to dynamically create variables in a variable file using Python's standard libraries, providing example of OS variables, random integers, and current time.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport random\nimport time\n\nUSER = os.getlogin()                # current login name\nRANDOM_INT = random.randint(0, 10)  # random integer in range [0,10]\nCURRENT_TIME = time.asctime()       # timestamp like 'Thu Apr  6 12:45:21 2006'\nif time.localtime()[3] > 12:\n    AFTERNOON = True\nelse:\n    AFTERNOON = False\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Variables Section Equivalent to YAML\nDESCRIPTION: This snippet shows the Robot Framework Variables section that is equivalent to the YAML variable file example. It demonstrates how the YAML variables are represented and used in Robot Framework syntax, creating string, integer, list, and dictionary variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n${STRING}     Hello, world!\n${INTEGER}    ${42}\n@{LIST}       one         two\n&{DICT}       one=yksi    two=kaksi    with spaces=kolme\n```\n\n----------------------------------------\n\nTITLE: Updating ByteString Argument Declarations (Python)\nDESCRIPTION: This snippet illustrates how to update argument declarations that previously used `ByteString` to ensure compatibility with Robot Framework 7.0 and Python 3.14. It replaces the deprecated `ByteString` with a union of `bytes` and `bytearray`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\narg: ByteString  # Old\narg: bytes | bytearray  # New\n```\n\n----------------------------------------\n\nTITLE: Library Logging During Import with robot.api.logger Python\nDESCRIPTION: This code demonstrates how to log messages during the library import process using the `robot.api.logger`. These messages are written to the syslog and WARN/ERROR messages are shown in the 'test execution errors' section of the log file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import logger\n\n\nlogger.debug(\"Importing library\")\n\n\ndef keyword():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Evaluate Keyword Example in Robot Framework\nDESCRIPTION: This example shows how to use the `Evaluate` keyword to evaluate a Python expression. The result of the expression is assigned to a variable, which is then used in a `Log to console` keyword. This is an alternative to inline evaluation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nEvaluate keyword\n    ${type} =    Evaluate    'positive' if ${x} > 0 else 'negative'\n    Log to console    ${x} is ${type}\n```\n\n----------------------------------------\n\nTITLE: Escaping Empty Values with Backslash in Pipe Format - Robot Framework\nDESCRIPTION: Illustrates how to escape empty values at the end of a row in Robot Framework's pipe-separated format using a backslash.  This is specifically needed when the empty value is the last element in the row.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n| *** Test Cases *** |              |           |            |\n| Using backslash    | Do Something | first arg | \\          |\n|                    | Do Something |           | second arg |\n```\n\n----------------------------------------\n\nTITLE: Setting Suite Metadata\nDESCRIPTION: Illustrates how to set free suite metadata from the command line using the `--metadata` option. Explains how to provide metadata values directly or read them from external files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --metadata Name:Value tests.robot\nrobot --metadata \"Another Name:Another value, now with spaces\" tests.robot\nrobot --metadata \"Read From File:meta.txt\" tests.robot    # Value read from meta.txt if it exists.\nrobot --metadata \"Path As Value: meta.txt\" tests.robot    # Value always used as-is.\n```\n\n----------------------------------------\n\nTITLE: Embedded Arguments in Library Keywords - Python\nDESCRIPTION: Shows how to define a library keyword with embedded arguments using the `robot.api.deco.keyword` decorator in Python. The `name` parameter is used to specify the keyword's name with `${args}` placeholders for the arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n@keyword(name='User \"${user}\" selects \"${item}\" from webshop')\ndef select_item(user, item):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Generating Library Documentation using Invoke\nDESCRIPTION: This snippet demonstrates how to generate library documentation using the Invoke task runner. The `<name>` placeholder should be replaced with the name of the library or its unique prefix.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninvoke library-docs <name>\n```\n\n----------------------------------------\n\nTITLE: Mixed Arguments in Library Keywords (Robot)\nDESCRIPTION: Robot Framework test case demonstrating how to use a library keyword with mixed arguments (embedded and normal). Two different ways of passing the normal arguments are showcased: positional and named.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    Example\n        Number of horses should be    2\n        Number of horses should be    count=2\n        Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc as a Python Script\nDESCRIPTION: This snippet shows an alternative way to execute Libdoc by running the `robot.libdoc` module as a script. This method requires specifying the full path to the `libdoc.py` file within the Robot Framework installation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npython path/to/robot/libdoc.py ExampleLibrary ExampleLibrary.html\n```\n\n----------------------------------------\n\nTITLE: Simple External Parser Implementation - Python\nDESCRIPTION: This code snippet illustrates a simple implementation of an external parser for Robot Framework. It defines an `EXTENSION` attribute specifying the supported file extension and a `parse` method that creates a dummy TestSuite object. Dependencies: robot.api.TestSuite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api import TestSuite\n\nEXTENSION = '.example'\n\ndef parse(source):\n    suite = TestSuite(name='Example', source=source)\n    test = suite.tests.create(name='Test')\n    test.body.create_keyword(name='Log', args=['Hello!'])\n    return suite\n```\n\n----------------------------------------\n\nTITLE: Keyword Example in Robot Framework\nDESCRIPTION: Illustrates how local variables used to leak from test cases to keywords and from keywords to lower-level keywords in Robot Framework. This behavior was unintended and has been fixed in version 2.9, which might break existing tests that rely on this leaking behavior.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Case ***\nExample\n    ${x}=    Set Variable    hello\n    My keyword\n\n*** Keywords ***\nMy keyword\n    Should be equal    ${x}    hello\n```\n\n----------------------------------------\n\nTITLE: Keyword Decorator Usage with Library Decorator in Python\nDESCRIPTION: Illustrates how to use the `@keyword` decorator with the `@library` decorator to explicitly expose methods as keywords. Methods without the `@keyword` decorator are not exposed as keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import library, keyword\n\n\n@library\nclass Example:\n\n    @keyword\n    def example_keyword(self):\n        # ...\n\n    def not_exposed_as_keyword(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: VAR syntax for list and dictionary variables\nDESCRIPTION: Demonstrates the usage of the VAR syntax to create list and dictionary variables in Robot Framework. The examples show creating a list with three items and a dictionary with two key-value pairs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n    List\n        # Creates a list with three items.\n        VAR    @{list}    a    b    c\n\n    Dictionary\n        # Creates a dict with two items.\n        VAR    &{dict}    key=value    second=item\n```\n\n----------------------------------------\n\nTITLE: Importing ReStructuredText Resource File\nDESCRIPTION: This example shows how to import a resource file written in reStructuredText format using the `Resource` setting. Robot Framework will parse the file and extract the Robot Framework data from within code blocks.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nResource         example.rst\n```\n\n----------------------------------------\n\nTITLE: Problematic Test Case with FOR IN ZIP loop\nDESCRIPTION: This Robot Framework test case illustrates a potential false positive situation when using the FOR IN ZIP loop. The test passes even if `Get something` returns a different number of items than expected, as long as the initial elements match, or even if it returns nothing at all due to the default 'SHORTEST' mode behavior.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_13\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Validate something    expected 1    expected 2    expected 3\n\n*** Keywords ****\nValidate something\n    [Arguments]    @{expected}\n    @{actual} =    Get something\n    FOR    ${act}    ${exp}    IN ZIP    ${actual}    ${expected}\n        Validate one thing    ${act}    ${exp}\n    END\n```\n\n----------------------------------------\n\nTITLE: New output.xml Timestamp Format\nDESCRIPTION: Example of the new timestamp format in output.xml, using ISO 8601 compatible YYYY-MM-DDTHH:MM:SS.mmmmmm format and start/elapsed instead of starttime/endtime.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with Python Module Execution\nDESCRIPTION: This snippet showcases how to execute the `robot.libdoc` module directly using the `python` command. This is useful when managing multiple Python versions and needing to use a specific one with Libdoc.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npython -m robot.libdoc ExampleLibrary ExampleLibrary.html\npython3.9 -m robot.libdoc ExampleLibrary ExampleLibrary.html\n```\n\n----------------------------------------\n\nTITLE: Basic Robot Framework Library Example (Python)\nDESCRIPTION: This snippet shows a basic example of a Robot Framework library implemented as a class.  It demonstrates how Robot Framework by default excludes methods starting with an underscore from being considered keywords. `my_keyword` will be treated as keyword. `_helper_method` will not.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MyLibrary:\n\n    def my_keyword(self, arg):\n        return self._helper_method(arg)\n\n    def _helper_method(self, arg):\n        return arg.upper()\n```\n\n----------------------------------------\n\nTITLE: Conflicting Embedded Arguments Resolution\nDESCRIPTION: This robotframework code demonstrates a scenario where a test case matches multiple keyword implementations using embedded arguments. Robot Framework will attempt to find the best match rather than failing.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\n   Automatic conflict resolution\n       Execute \"ls\"\n       Execute \"ls\" with \"-lh\"\n\n*** Keywords ***\nExecute \"${cmd}\"\n   Log    Running command '${cmd}'.\n\nExecute \"${cmd}\" with \"${opts}\"\n   Log    Running command '${cmd}' with options '${opts}'.\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet demonstrates how to install the latest available release of Robot Framework using pip, including pre-releases. It also shows how to install a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Handling Everything with EXCEPT and ELSE in Robot Framework\nDESCRIPTION: This shows how to handle cases with errors and without errors in a TRY/EXCEPT/ELSE block. The EXCEPT block catches any error and the ELSE block handles the no error case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nHandle everything\n    TRY\n        Some Keyword\n    EXCEPT    AS    ${err}\n        Log    Error occurred: ${err}\n    ELSE\n        Log    No error occurred!\n    END\n```\n\n----------------------------------------\n\nTITLE: RETURN Statement Usage\nDESCRIPTION: This snippet illustrates various ways to use the RETURN statement in Robot Framework, including returning values at the end of a keyword, returning conditionally, and returning early.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_18\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\n    Return at the end\n        Some Keyword\n        ${result} =    Another Keyword\n        RETURN    ${result}\n\n    Return conditionally\n        IF    ${condition}\n            RETURN    Something\n        ELSE\n            RETURN    Something else\n        END\n\n    Early return\n        IF    ${not applicable}    RETURN\n        Some Keyword\n        Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Multiline Variable with Separator\nDESCRIPTION: Illustrates how to define a multiline variable in Robot Framework and specifies a newline character as the separator. This results in each line being treated as a separate line in the variable's value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\nMultiline\n        VAR    ${multiline}\n        ...    First line.\n        ...    Second line.\n        ...    Last line.\n        ...    separator=\\n\n```\n\n----------------------------------------\n\nTITLE: Installing specific Robot Framework version using pip\nDESCRIPTION: This command installs a specific version of Robot Framework (3.1.1 in this case) using the pip package manager. This is useful for ensuring compatibility and reproducing results with a known version. It requires pip to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.1.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==3.1.1\n```\n\n----------------------------------------\n\nTITLE: Setting Library Version with __version__ Attribute (Python)\nDESCRIPTION: This snippet demonstrates how to set the library version using the `__version__` attribute. This attribute should be a module-level attribute. The `keyword` function serves as a placeholder for actual keyword implementation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n__version__ = '0.1'\n\ndef keyword():\n    pass\n```\n\n----------------------------------------\n\nTITLE: EXCEPT without messages in Robot Framework\nDESCRIPTION: This code shows how to use an EXCEPT branch without any messages to match any error. It can be used alone or after more specific EXCEPT branches. The first example matches any error, and the second matches any error after trying to match a specific error message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any error\n    TRY\n        Some Keyword\n    EXCEPT               # Match any error.\n        Error Handler\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any after testing more specific errors\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first\n        Error Handler 1\n    EXCEPT                     # Match any that did not match the above.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Implicit Type Conversion\nDESCRIPTION: This demonstrates how Robot Framework infers argument types from default values when no explicit type is specified. In this case, `count` is inferred as an integer and `case_insensitive` as a boolean.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Enhanced Listener Methods for Control Structures\nDESCRIPTION: This enhancement adds more information to the `start/end_keyword` listener methods when they are used with control structures (e.g., loops, conditional blocks). This provides more context to listeners about the execution flow.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Logging with Timestamp - Python\nDESCRIPTION: This snippet demonstrates how to log a message with an accurate timestamp in Robot Framework. The timestamp must be in milliseconds since the Unix epoch and embedded in the message string with the format `*INFO:{timestamp}* Message with timestamp`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n\ndef example_keyword():\n    timestamp = int(time.time() * 1000)\n    print(f'*INFO:{timestamp}* Message with timestamp')\n```\n\n----------------------------------------\n\nTITLE: Equivalent --parseinclude usage\nDESCRIPTION: This example shows how the `--parseinclude` option can be used to achieve the same functionality as the `--extension` option. It is recommended to use `--parseinclude` instead of `--extension` because it's more powerful.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_3\n\nLANGUAGE: Robot Framework\nCODE:\n```\nrobot --parseinclude *.rst path/to/tests\nrobot -I *.robot -I *.rst path/to/tests\n```\n\n----------------------------------------\n\nTITLE: Variable Item Access Syntax - Robot Framework\nDESCRIPTION: In Robot Framework 3.1, syntax like `${var}[xxx]` is now interpreted as variable item access, not a variable `${var}` followed by a literal string `[xxx]`. To treat `[xxx]` as a literal string, it needs to be escaped like `${var}\\[xxx]`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip (specific version)\nDESCRIPTION: This command installs a specific version of Robot Framework using pip.  It explicitly specifies the version number to install, ensuring that the user gets the exact desired version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2rc1.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==4.1.2rc1\n```\n\n----------------------------------------\n\nTITLE: Pre-Run Modifier: Select Every Xth Test - Python\nDESCRIPTION: This Python code snippet demonstrates a pre-run modifier for Robot Framework that filters test cases, keeping only every Xth test. The modifier takes `every` and `start` arguments to determine the selection interval and the starting index.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass SelectEvery:\n\n    def __init__(self, every: int, start: int = 1):\n        self.every = every\n        self.start = start\n\n    def visit_test(self, test):\n        if test.parent.tests.index(test) % self.every != self.start - 1:\n            test.parent.tests.remove(test)\n```\n\n----------------------------------------\n\nTITLE: Generating Library Documentation\nDESCRIPTION: This command generates the library documentation using the `invoke library-docs all` task.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke library-docs all\n```\n\n----------------------------------------\n\nTITLE: Keyword Definition in Resource File\nDESCRIPTION: This snippet defines a keyword named 'Keyword in resource.txt' in a Robot Framework resource file. The keyword uses keywords and variables defined in both the current resource file and the nested resource file 'nested.resource'. It uses the 'Should Be Equal' keyword to verify the values of variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resource_extensions/resource.txt#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Keywords ***\nKeyword in resource.txt\n    Keyword in nested.resource\n    Should Be Equal    ${NESTED}      nested.resource\n    Should Be Equal    ${TXT}    resource.txt\n```\n\n----------------------------------------\n\nTITLE: Using Visitor Interface with Listener in Python\nDESCRIPTION: This example illustrates how to integrate the visitor interface within a Robot Framework listener to modify test suites. It uses a custom visitor (SelectEveryXthTest) to select specific tests within a suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom SelectEveryXthTest import SelectEveryXthTest\n\n\ndef start_suite(suite, result):\n    selector = SelectEveryXthTest(x=2)\n    suite.visit(selector)\n```\n\n----------------------------------------\n\nTITLE: Checking out a tag\nDESCRIPTION: This command checks out the specified tag, allowing you to work with the code at that specific release point.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout v$VERSION\n```\n\n----------------------------------------\n\nTITLE: Documenting robot.parsing.suitestructure module with automodule\nDESCRIPTION: This snippet uses the Sphinx automodule directive to generate documentation for the robot.parsing.suitestructure module. It specifies that all members should be included, undocumented members should be shown, and inheritance information should be displayed. This directive automatically extracts documentation directly from the Python code.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/api/autodoc/robot.parsing.rst#_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: robot.parsing.suitestructure\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework\nDESCRIPTION: This command installs a specific version of Robot Framework using pip. Specifying the exact version ensures that the environment is consistent and avoids unexpected issues due to version incompatibilities.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==4.0b1\n```\n\n----------------------------------------\n\nTITLE: IF/ELSE Structure Example in Robot Framework\nDESCRIPTION: This Robot Framework example demonstrates the basic usage of IF/ELSE structures for conditional execution based on an expression. It logs a message to the console depending on whether the variable `${x}` is positive or negative.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nIF/ELSE\n    IF    ${x} > 0\n        Log to console   ${x} is positive\n    ELSE\n        Log to console   ${x} is negative\n    END\n```\n\n----------------------------------------\n\nTITLE: Library Scope Example - Python\nDESCRIPTION: This Python code demonstrates setting the library scope to 'SUITE' using the `ROBOT_LIBRARY_SCOPE` attribute. This means a new instance of the library will be created for each test suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass ExampleLibrary:\n    ROBOT_LIBRARY_SCOPE = 'SUITE'\n\n    def __init__(self):\n        self._counter = 0\n\n    def count(self):\n        self._counter += 1\n        print(self._counter)\n\n    def clear_count(self):\n        self._counter = 0\n```\n\n----------------------------------------\n\nTITLE: Generating JSON output with Rebot\nDESCRIPTION: This snippet shows how to use the Rebot tool to convert an existing XML output file to JSON format. This is useful for generating JSON outputs with older versions of Robot Framework or for converting existing XML results.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2rc1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Old FOR loop syntax\nDESCRIPTION: This snippet demonstrates the old FOR loop syntax in Robot Framework. Keywords inside the loop must be escaped with a backslash. This syntax is deprecated and users are encouraged to migrate to the new syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Executing tests with suite initialization file\nDESCRIPTION: Example of running Robot Framework tests while using a suite initialization file for the automatically created top-level suite. The init file path is provided similarly to test case files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot __init__.robot my_tests.robot other_tests.robot\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with Batch File\nDESCRIPTION: This batch file executes Robot Framework tests using different browsers and combines the results using Rebot. It takes arguments and forwards them to the robot command.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_14\n\nLANGUAGE: bat\nCODE:\n```\n@echo off\nrobot --name Firefox --variable BROWSER:Firefox --output out\\fx.xml --log none --report none %* login\nrobot --name IE --variable BROWSER:IE --log none --output out\\ie.xml --report none %* login\nrebot --name Login --outputdir out --output login.xml out\\fx.xml out\\ie.xml\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.0 beta 1 specific version\nDESCRIPTION: Installs a specific version of Robot Framework (7.0b1) using pip. This is useful for ensuring consistency across different environments or for reproducing specific issues.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.0b1\n```\n\n----------------------------------------\n\nTITLE: Using @not_keyword decorator to exclude functions/methods from Robot Framework keywords\nDESCRIPTION: The `@not_keyword` decorator is used to explicitly mark a function or method as not being a keyword. It can be useful to prevent certain helper functions from being exposed as keywords in Robot Framework tests.  The `not_keyword` decorator must be imported from `robot.api.deco`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import not_keyword\n\n\ndef example_keyword():\n    # ...\n\n@not_keyword\ndef not_exposed_as_keyword():\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Library Name with AS\nDESCRIPTION: This snippet shows how to set a custom name for a library using the AS keyword. This is useful when importing the same library multiple times with different arguments or when the library name is inconvenient.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    packagename.TestLib    AS    TestLib\nLibrary    ${LIBRARY}    AS    MyName\n```\n\n----------------------------------------\n\nTITLE: Catching Any Error in Robot Framework\nDESCRIPTION: This snippet shows how to use an EXCEPT branch without any messages to catch any error. This branch must be placed after any EXCEPT branches with specific error messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any error\n    TRY\n        Some Keyword\n    EXCEPT               # Match any error.\n        Error Handler\n    END\n```\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any after testing more specific errors\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first\n        Error Handler 1\n    EXCEPT                     # Match any that did not match the above.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Re-executing Failed Tests\nDESCRIPTION: Demonstrates how to use the `--rerunfailed` option to re-execute failed tests from a previous output file. Explains how to combine it with other selection options for fine-tuning.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot tests                             # first execute all tests\nrobot --rerunfailed output.xml tests    # then re-execute failing\n```\n\n----------------------------------------\n\nTITLE: Removing Tags with '-tag' syntax\nDESCRIPTION: Demonstrates removing tags set in the Settings section using the `-tag` syntax in Robot Framework. This allows overriding tags on a per-test basis.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Variable Creation\nDESCRIPTION: Shows how to create a list variable in Robot Framework using the `@` prefix and assigning multiple values to it. This creates a list with the specified items.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\nList\n        # Creates a list with three items.\n        VAR    @{list}    a    b    c\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Embedded Arguments\nDESCRIPTION: Illustrates how to define a Python library keyword with embedded arguments using the `@keyword` decorator. The keyword accepts arguments within its name and additional arguments as regular parameters.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@keyword('Number of ${animals} should be')\ndef example(animals, count):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Robot Framework Test Case\nDESCRIPTION: This snippet defines a test case named 'Suite2 Test' with a specific documentation string. The test is intentionally designed to fail using the 'Fail' keyword. The expected failure message is passed as an argument to the 'Fail' keyword using a variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/with_init/sub_suite2.robot.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n* ********************* Test Cases* ***************************************\n|  Suite2 Test  |  [Documentation] |  FAIL    |  Expected failure  |\n|               |  Fail            |  ${msg}  |                    |\n|               |                  |          |  |  |  |  |  |  |  |\n```\n\n----------------------------------------\n\nTITLE: Committing Back to Dev Version\nDESCRIPTION: This command commits the changes made to the version files, setting them to the next development version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Back to dev version\" src/robot/version.py setup.py\n```\n\n----------------------------------------\n\nTITLE: Plain Text Format Library Documentation Example (Python)\nDESCRIPTION: This snippet shows how to document a Robot Framework library using plain text format.  `ROBOT_LIBRARY_DOC_FORMAT` is set to 'text'.  URLs are automatically converted to links, and internal linking is supported using backticks.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n    \"\"\"Example library in plain text format.\n\n    - Formatting is not supported.\n    - URLs like http://example.com are turned to links.\n    - Custom links are not supported.\n    - Linking to `My Keyword` works.\n    \"\"\"\n    ROBOT_LIBRARY_DOC_FORMAT = 'text'\n\n    def my_keyword():\n        \"\"\"Nothing more to see here.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Python: Timeout Handling with explicit Exception Handling\nDESCRIPTION: This Python code demonstrates how to explicitly catch and handle `TimeoutExceeded` exceptions. It's important to re-raise the exception after handling it to ensure the timeout is properly propagated. Requires `from robot.errors import TimeoutExceeded`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.errors import TimeoutExceeded\n\n\ndef example():\n    try:\n        do_something()\n    except TimeoutExceeded:\n        do_cleanup()\n        raise\n```\n\n----------------------------------------\n\nTITLE: Resource File Settings Section\nDESCRIPTION: This snippet defines the Settings section of a Robot Framework resource file. It imports another resource file named 'nested.resource'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resource_extensions/resource.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Settings ***\nResource         nested.resource\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Side Dependencies\nDESCRIPTION: This command installs the dependencies required for the Robot Framework acceptance tests test data side, conditionally depending on the platform.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -r atest/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Keyword Definition RobotFramework\nDESCRIPTION: This snippet defines a keyword named `Suite Setup` which logs a message. The `Log` keyword is a built-in Robot Framework keyword that prints the given message to the log file. The keyword is defined using the `*Keywords` section.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/__init__.txt#_snippet_3\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Keywords   Action   Argument   Argument   Argument\nSuite Setup      Log      ${msg}     # No more arguments!\n```\n\n----------------------------------------\n\nTITLE: Accessing Key-Value Tuple in FOR Loop (Robot Framework)\nDESCRIPTION: Shows how to access key-value pairs as a tuple within a FOR loop when iterating over a dictionary. The tuple contains the key at index 0 and the value at index 1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_6\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFOR    ${item}    IN    &{dict}\n    Length Should Be    ${item}    2\n    Log    Key is '${item}[0]' and value is '${item}[1]'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Rebot Tool JSON Output Example\nDESCRIPTION: Shows how to use the Rebot tool to create a JSON output file from an XML output file.  The `--output` option is used with a `.json` extension to specify the output format.  The resulting JSON file contains the test results.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command uses the pip package installer to upgrade or install a specific version of Robot Framework. It ensures that the user has the correct version of the framework for their project.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.0.2\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output with Rebot\nDESCRIPTION: This example shows how to generate a JSON output file using the Rebot tool with an existing XML output file. This was the way to generate JSON outputs before Robot Framework 7.2. This will convert an existing XML output to JSON.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with @keyword Decorator (Dictionary)\nDESCRIPTION: Demonstrates specifying argument types for a Python keyword using the `@keyword` decorator with a dictionary mapping argument names to types. Works with Python 2 and 3.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Running tests with the `robot` command.\nDESCRIPTION: This command executes Robot Framework tests specified in the `tests.robot` file. The `robot` command is a generic start-up script that automatically selects the appropriate Python interpreter, simplifying test execution across different environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrobot tests.robot\n```\n\n----------------------------------------\n\nTITLE: Output XML Keyword Name Attributes (New)\nDESCRIPTION: Illustrates the updated attributes for storing keyword names and library/resource file names in the output.xml. The `library` attribute has been replaced with `owner`, and `sourcename` has been renamed to `source_name` for consistency with the result model.  Tools processing output.xml need to adapt to these attribute name changes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using the pip package manager. The --pre flag allows installation of beta and release candidate versions, and --upgrade ensures any existing Robot Framework installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.1b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.1 beta 2 with pip\nDESCRIPTION: These commands demonstrate how to install the latest pre-release version of Robot Framework or specifically the 5.1 beta 2 version using pip.  This allows users to test and use the new features.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==5.1b2\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip3\nDESCRIPTION: This snippet demonstrates how to install the latest Robot Framework preview release, or a specific version, using pip3. This is recommended for Python 3 environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0b1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip3 install --pre robotframework\npython3 -m pip install --pre robotframework\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with specific documentation format\nDESCRIPTION: This snippet generates documentation for a resource file, specifying the output format explicitly as HTML using the `--format` option, and the source documentation format is robot.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nlibdoc --format HTML test/resource.robot doc/resource.htm\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE Robot Framework\nDESCRIPTION: Demonstrates the use of ELSE in inline IF statements. The ELSE branch is executed if the condition is false.  Only one statement can be executed in each branch.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc1.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\n    Inline IF/ELSE\n        IF    $condition    Keyword    argument    ELSE    Another Keyword\n```\n\n----------------------------------------\n\nTITLE: Testdoc Synopsis - Python\nDESCRIPTION: This snippet shows the general usage of the Testdoc tool using the python -m robot.testdoc command. It takes data sources and an output file as arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Testdoc.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython -m robot.testdoc [options] data_sources output_file\n```\n\n----------------------------------------\n\nTITLE: Including subpackage table of contents\nDESCRIPTION: This snippet uses the Sphinx toctree directive to include a table of contents for the subpackages within the robot.parsing package. The maxdepth option is set to 2, indicating that the table of contents should include headers down to level 2. This directive helps organize the documentation for the subpackages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/api/autodoc/robot.parsing.rst#_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   robot.parsing.lexer\n   robot.parsing.model\n   robot.parsing.parser\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tags in Robot Framework\nDESCRIPTION: This snippet demonstrates how to set default tags in a Robot Framework test data file. The `Default Tags` setting allows applying tags to all test cases in the file. The value 'default1' is assigned as the default tag.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/include.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDefault Tags    default1\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation\nDESCRIPTION: This command adds the generated documentation to the `gh-pages` branch using the `invoke add-docs` task.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke add-docs $VERSION --push\n```\n\n----------------------------------------\n\nTITLE: Python 3 Example Keyword with Function Annotations\nDESCRIPTION: Shows how to specify argument types for Python-based keywords using function annotations in Python 3. Robot Framework automatically converts arguments to the specified types.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count: int, case_insensitive: bool = True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Continue-on-Failure\nDESCRIPTION: This example shows how to use `robot:stop-on-failure` and `robot:recursive-stop-on-failure` tags to disable continue-on-failure behavior that was enabled by tags, teardowns, or templates. These tags override the continue-on-failure setting, causing the test execution to stop at the point of failure.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nDisable continue-in-failure set using tags\n    [Tags]    robot:recursive-continue-on-failure\n    Keyword\n    Keyword    # This is executed\n\nDisable continue-in-failure in teardown\n    No Operation\n    [Teardown]    Keyword\n\nDisable continue-in-failure with templates\n    [Tags]    robot:stop-on-failure\n    [Template]    Should be Equal\n    this    fails\n    this    is not run\n\n*** Keywords ***\nKeyword\n    [Tags]    robot:stop-on-failure\n```\n\n----------------------------------------\n\nTITLE: Generating Acceptance Test Runners\nDESCRIPTION: This script generates acceptance test runners (files under the `robot` directory) based on the test data files (files under the `testdata` directory).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\natest/genrunner.py atest/testdata/path/data.robot [atest/robot/path/runner.robot]\n```\n\n----------------------------------------\n\nTITLE: File Object Access (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated method of accessing file objects as lists in Robot Framework. This functionality has been removed in version 2.9.2 and should be replaced with the `@{file.readlines()}` syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.2.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    ${file} =    Evaluate    open('foo.txt')\n    Log many    @{file}    # logs each row of file\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.1 Alpha 2 with pip\nDESCRIPTION: This command installs the latest available pre-release of Robot Framework using pip. The `--pre` flag allows installing alpha, beta, and release candidate versions. The `--upgrade` flag ensures that if an older version of Robot Framework is already installed, it will be upgraded to the specified version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration RobotFramework\nDESCRIPTION: This snippet declares a variable named `${msg}` and assigns it the string value 'Running suite setup'. This variable can be used throughout the test suite. Variable is defined using the `*Variable` section.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/__init__.txt#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Variable\n${msg} =  Running suite setup\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.0a1 with pip\nDESCRIPTION: Instructions on using pip to install the Robot Framework 7.0 alpha 1 release. Two options are provided: installing the latest available pre-release version, or installing the specific 7.0a1 version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.0a1\n```\n\n----------------------------------------\n\nTITLE: Robot Framework User Keyword without Varargs and Named Arguments\nDESCRIPTION: Demonstrates a Robot Framework user keyword without variable arguments but with a default value for the second argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWithout Varargs\n    [Arguments]    @{}    ${first}    ${second}=default\n    Log Many    ${first}    ${second}\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Command Line Example for Programmatic Result Modification\nDESCRIPTION: These commands demonstrate how to use the `--prerebotmodifier` option with Robot Framework and Rebot to apply a custom Python script that modifies the test results.  The first example uses a path, while the second utilizes a module name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n# Specify modifier as a path when running tests. Maximum time is 42 seconds.\nrobot --prerebotmodifier path/to/ExecutionTimeChecker.py:42 tests.robot\n\n# Specify modifier as a name when using Rebot. Maximum time is 3.14 seconds.\n# ExecutionTimeChecker.py must be in the module search path.\nrebot --prerebotmodifier ExecutionTimeChecker:3.14 output.xml\n```\n\n----------------------------------------\n\nTITLE: Simplified WHILE Loop in Robot Framework\nDESCRIPTION: This Robot Framework snippet shows a simplified `WHILE` loop where the loop condition is optional. The loop executes based on the `limit` and `on_limit` configurations.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\nWHILE    limit=10   on_limit=PASS\n```\n\n----------------------------------------\n\nTITLE: EXCEPT without messages in Robot Framework\nDESCRIPTION: This code shows an EXCEPT block without any messages, which catches any error.  Only one such EXCEPT block is allowed, and it must be the last EXCEPT block in the TRY/EXCEPT structure.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMatch any error\n    TRY\n        Some Keyword\n    EXCEPT               # Match any error.\n        Error Handler\n    END\n\nMatch any after testing more specific errors\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first\n        Error Handler 1\n    EXCEPT                     # Match any that did not match the above.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Run Keyword And Continue On Failure Example\nDESCRIPTION: Demonstrates using the `Run Keyword and Continue on Failure` keyword to ensure that subsequent steps are executed even if a keyword fails.  The overall test case will still be marked as failed, but all keywords will be executed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Run Keyword and Continue on Failure    Should be Equal    1    2\n    Log    This is executed but test fails in the end\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework\nDESCRIPTION: This snippet demonstrates how to install a specific version of Robot Framework (4.0rc2 in this case) using pip.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==4.0rc2\n```\n\n----------------------------------------\n\nTITLE: Using Library Keywords with Mixed Arguments in Robot Framework\nDESCRIPTION: Illustrates how to use a library keyword that accepts both embedded and normal arguments within a Robot Framework test case. Shows examples of passing arguments both positionally and by name (count=2).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a2.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Number of horses should be    2\n    Number of horses should be    count=2\n    Number of dogs should be    3\n```\n\n----------------------------------------\n\nTITLE: Ignored Python Code Block in reStructuredText\nDESCRIPTION: This Python code block within a reStructuredText document is ignored by Robot Framework. It demonstrates that only code blocks explicitly marked as 'robotframework' are parsed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This code block is ignored.\ndef example():\n    print('Hello, world!')\n```\n\n----------------------------------------\n\nTITLE: Continuable Failure Exception - Python\nDESCRIPTION: This snippet demonstrates the use of the `ContinuableFailure` exception from the `robot.api` package. Raising this exception allows the test execution to continue even when a failure occurs. The message provided to the exception constructor is the failure message that will be logged.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import ContinuableFailure\n\n\ndef example_keyword():\n    if something_is_wrong():\n        raise ContinuableFailure('Something is wrong but execution can continue.')\n    ...\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Boolean True Examples\nDESCRIPTION: Demonstrates examples of Robot Framework keywords where the 'values' argument is treated as true. Strings other than 'FALSE', 'NONE', 'NO', 'OFF', or '0' are considered true, and Python's `True` or non-zero numbers are also true.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/BooleanArguments.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nTrue examples\n    Should Be Equal    ${x}    ${y}    Custom error    values=True         # Strings are generally true.\n    Should Be Equal    ${x}    ${y}    Custom error    values=yes          # Same as the above.\n    Should Be Equal    ${x}    ${y}    Custom error    values=${TRUE}      # Python `True` is true.\n    Should Be Equal    ${x}    ${y}    Custom error    values=${42}        # Numbers other than 0 are true.\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output File with Rebot\nDESCRIPTION: This command shows how to use the Rebot tool to convert an XML output file to JSON. The `--output` option specifies the output JSON file, and the input is an existing XML output file from a previous Robot Framework execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Define Suite Settings in Robot Framework\nDESCRIPTION: This snippet demonstrates how to define suite-level settings in a Robot Framework test suite. It includes setting up a suite setup and teardown, providing documentation, and defining metadata.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/all_settings.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Settings ***\nSuite setup\t\tLog\t\tsuite msg\nSuite teardown\tLog\t\tsuite teardown msg\nDocumentation\tSuite docs\\nwith new line, several spaces \"   \" and a <b>bold tag</b>.\nMetadata\t\tmeta\t\trulez with <b>escaped</b>\nMetadata\t\tversion\t\talpha\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with Default Argument Values\nDESCRIPTION: This Python code demonstrates how Robot Framework can implicitly determine the type of an argument from its default value. If an argument has no explicit type specified, Robot Framework tries to infer the type from the argument's default value.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef example_keyword(count=-1, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Output.xml Timestamp Format Change (XML)\nDESCRIPTION: This snippet demonstrates the change in timestamp format within the output.xml file. The old format used a custom `YYYYMMDD HH:MM:SS.mmm`, while the new format uses `ISO 8601` compatible `YYYY-MM-DDTHH:MM:SS.mmmmmm`. The attributes used to store timestamps also changed from `starttime`, `endtime`, and `timestamp` to `start`, `elapsed`, and `time`, respectively.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n\n<!-- New format -->\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Keyword Name Format (Old)\nDESCRIPTION: This XML snippet demonstrates the old format for keyword names in the output.xml file, specifically the use of the `library` attribute and the `sourcename` attribute for keywords with embedded arguments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Not Keyword Decorator Example in Python\nDESCRIPTION: Shows the use of the `@not_keyword` decorator to explicitly exclude a function or method from being treated as a keyword. This is useful when auto keyword generation is enabled and specific functions need to be excluded.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.api.deco import not_keyword\n\n\ndef example_keyword(self):\n    # ...\n\n@not_keyword\ndef not_exposed_as_keyword(self):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Escaping Empty Values with ${EMPTY} in Pipe Format - Robot Framework\nDESCRIPTION: Demonstrates escaping empty values in Robot Framework's pipe-separated format using the `${EMPTY}` built-in variable. This shows how to represent an empty cell when it is the last entry in a test data row.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n| *** Test Cases *** |              |           |            |\n| Using ${EMPTY}     | Do Something | first arg | ${EMPTY}   |\n|                    | Do Something |           | second arg |\n```\n\n----------------------------------------\n\nTITLE: Linking to Custom Sections Example (Python)\nDESCRIPTION: This snippet demonstrates how to create custom sections within the library documentation and link to them.  It uses Robot Framework's documentation syntax for section titles and illustrates how to link to these sections using backticks.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n   \"\"\"Library for Libdoc demonstration purposes.\n\n   This library does not do anything useful.\n\n   = My section  =\n\n   We do have a custom section in the documentation, though.\n   \"\"\"\n\n   def keyword():\n       \"\"\"Does nothing.\n\n       See `introduction` for more information and `My section` to test how\n       linking to custom sections works.\n       \"\"\"\n       pass\n```\n\n----------------------------------------\n\nTITLE: Adjusting TestSuite Source for JSON Serialization\nDESCRIPTION: This code snippet illustrates how to adjust the source path of a Robot Framework TestSuite to be relative before serializing it to JSON, and then adjust it back to an absolute path after deserialization. It utilizes the `TestSuite.adjust_source` method to handle potential path discrepancies when transferring suites between different machines. It depends on `robot.running` for TestSuite functionality.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Create a suite, adjust source and convert to JSON.\nsuite = TestSuite.from_file_system('/path/to/data')\nsuite.adjust_source(relative_to='/path/to')\nsuite.to_json('data.rbt')\n\n# Recreate suite elsewhere and adjust source accordingly.\nsuite = TestSuite.from_json('data.rbt')\nsuite.adjust_source(root='/new/path/to')\n```\n\n----------------------------------------\n\nTITLE: Serializing a Suite to JSON - Python\nDESCRIPTION: This snippet demonstrates how to serialize a Robot Framework TestSuite object into JSON format using the `to_json` method. It initializes a TestSuite from a file system path and then writes the JSON representation to a file named 'tests.rbt'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api import TestSuite\n\nsuite = TestSuite.from_file_system('path/to/tests')\nsuite.to_json('tests.rbt')\n```\n\n----------------------------------------\n\nTITLE: Deterministic Library Documentation with SOURCE_DATE_EPOCH\nDESCRIPTION: This enhancement adds support to generate deterministic library documentation by using the `SOURCE_DATE_EPOCH` environment variable. This ensures that the generated documentation is consistent across different environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Items Old Syntax\nDESCRIPTION: This snippet shows the old, deprecated syntax for accessing dictionary items in Robot Framework using `&{var}[item]`. This syntax is variable type-specific and is being replaced by the more general `${var}[item]` syntax, which works for both lists and dictionaries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_7\n\nLANGUAGE: RobotFramework\nCODE:\n```\n&\\{dict\\}[item]\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.1 using pip\nDESCRIPTION: This snippet demonstrates how to install or upgrade to Robot Framework version 3.1 using the pip package manager. The first command upgrades to the latest version, while the second installs the specified version (3.1).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: robotframework\nCODE:\n```\npip install robotframework==3.1\n```\n\n----------------------------------------\n\nTITLE: Executing Robot Framework files\nDESCRIPTION: These examples show how to execute Robot Framework test files using the `robot` command. Different file extensions trigger different parsers: `.robot` (standard Robot Framework parser), `.rst` (reStructuredText parser), and `.json` (JSON parser).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\nrobot example.robot    # Standard Robot Framework parser.\nrobot example.tsv      # Must be compatible with the standard parser.\nrobot example.rst      # reStructuredText parser.\nrobot x.robot y.rst    # Parse both files using an appropriate parser.\n```\n\n----------------------------------------\n\nTITLE: Defining Settings in Robot Framework Resource\nDESCRIPTION: This snippet demonstrates how to define settings in a Robot Framework resource file. The 'Resource' setting imports another resource file named 'txt_resource2.txt'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/txt_resource.txt#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*Settings*  Value  Value  Value  Value\n\nResource   txt_resource2.txt      \n```\n\n----------------------------------------\n\nTITLE: Executing Robot File from Command Line\nDESCRIPTION: This demonstrates how to execute a Robot Framework file that has been made executable using a shebang.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./example.robot\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Variable Creation\nDESCRIPTION: This snippet illustrates how to create a list variable (`@{list}`) in Robot Framework and assign it three items.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\nList\n        # Creates a list with three items.\n        VAR    @{list}    a    b    c\n```\n\n----------------------------------------\n\nTITLE: Using py launcher on Windows\nDESCRIPTION: This snippet shows how to use the `py` launcher on Windows to select a specific Python version when multiple versions are installed. The snippet shows both checking the default version and a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_4\n\nLANGUAGE: Batch\nCODE:\n```\nC:\\>py --version\nPython 3.10.9\nC:\\>py -3.12 --version\nPython 3.12.1\n```\n\n----------------------------------------\n\nTITLE: Output XML Timestamp Format - Old\nDESCRIPTION: Demonstrates the old timestamp format used in output.xml files prior to Robot Framework 7.0. The timestamp is in the format `YYYYMMDD HH:MM:SS.mmm` and is stored in the `timestamp` attribute for messages and `starttime` and `endtime` attributes for statuses.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework\nDESCRIPTION: This command installs the released version of Robot Framework from PyPI, ensuring it is working correctly.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Rebot Tool JSON Input Example\nDESCRIPTION: This command demonstrates how to use the Rebot tool to process JSON output files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nrebot output.json\nrebot output1.json output2.json\n```\n\n----------------------------------------\n\nTITLE: Performance Improvement for User Keyword Execution\nDESCRIPTION: This enhancement provides a performance improvement to user keyword execution. This speeds up the execution of tests that heavily rely on user-defined keywords.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Custom Fatal Error Exception - Python\nDESCRIPTION: This snippet shows how to create a custom exception that stops the whole test execution. This is done by defining a new exception class that inherits from `RuntimeError` and setting the `ROBOT_EXIT_ON_FAILURE` attribute to `True`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nclass MyFatalError(RuntimeError):\n    ROBOT_EXIT_ON_FAILURE = True\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.1rc2 with pip\nDESCRIPTION: This snippet demonstrates how to install the latest pre-release version of Robot Framework using pip. It upgrades the existing installation to the newest version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Python Stringified Type Hints\nDESCRIPTION: Demonstrates the use of stringified type hints in Python, such as `'list[int]'` and `'int | float'`. These hints are compatible with older Python versions and allow for specifying generic types and unions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef example(a: 'list[int]', b: 'int | float'):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest pre-release of Robot Framework using pip. It upgrades an existing installation if one exists.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Settings Definition in Robot Framework\nDESCRIPTION: This section defines settings for the Robot Framework test suite, including library and resource imports. The example shows intentionally incorrect library and resource imports to simulate errors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/failing_suite.txt#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Settings ***\nLibrary\t\tI dont exist\nResource\tAnd I'm not here\n```\n\n----------------------------------------\n\nTITLE: Generating XML Spec with explicit format\nDESCRIPTION: This snippet generates an XML spec file for a library, explicitly setting the format to XML using the `--format` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nlibdoc --format xml MyLibrary MyLibrary.spec\n```\n\n----------------------------------------\n\nTITLE: Flattened XML Output Using --flattenkeywords in Robot Framework\nDESCRIPTION: This XML snippet demonstrates the output when the `Example` keyword is flattened using the `--flattenkeywords` option. The child keywords are removed, but their messages are preserved.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Keyword\">\n  <doc>_*Content flattened.*_</doc>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Honor `SOURCE_DATE_EPOCH` for Library Documentation\nDESCRIPTION: The `SOURCE_DATE_EPOCH` environment variable is now honored when generating library documentation, ensuring reproducible builds.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version (Python)\nDESCRIPTION: This command installs a specific version of Robot Framework using pip. Specifying the version ensures that the environment remains consistent and avoids unexpected issues caused by updates. The command `pip install robotframework==3.0a2` installs Robot Framework version 3.0 alpha 2.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a2.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==3.0a2\n```\n\n----------------------------------------\n\nTITLE: Library with Arguments in Python\nDESCRIPTION: This Python code demonstrates a library class `MyLibrary` that accepts arguments in its constructor (`__init__`). These arguments are used to establish a connection.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom example import Connection\n\nclass MyLibrary:\n\n    def __init__(self, host, port=80):\n        self.connection = Connection(host, port)\n\n    def send_message(self, message):\n        self.connection.send(message)\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework using pip\nDESCRIPTION: Shows how to install the latest pre-release version of Robot Framework using pip, or how to install a specific version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==3.2b2\n```\n\n----------------------------------------\n\nTITLE: Custom Continuable Failure Exception - Python\nDESCRIPTION: This snippet shows how to create a custom exception that allows continuing execution after a failure. This is done by defining a new exception class that inherits from `RuntimeError` and setting the `ROBOT_CONTINUE_ON_FAILURE` attribute to `True`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nclass MyContinuableError(RuntimeError):\n    ROBOT_CONTINUE_ON_FAILURE = True\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Interpreter\nDESCRIPTION: This command executes all acceptance tests using a custom Python interpreter. It specifies the interpreter using the `--interpreter` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\natest/run.py --interpreter pypy3\n```\n\n----------------------------------------\n\nTITLE: Translation additions and documentation\nDESCRIPTION: This enhancement focuses on adding and documenting translations within the framework, likely for keywords, messages, and other user-facing elements.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0.3 with pip\nDESCRIPTION: This snippet shows how to install the latest version of Robot Framework or a specific version (4.0.3) using pip. The `--pre` flag allows installing pre-release versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==4.0.3\n```\n\n----------------------------------------\n\nTITLE: Rebot JSON Output Example\nDESCRIPTION: Shows how to use the Rebot tool to create JSON output files from Robot Framework results. The `--output` option is used with a `.json` extension to specify the output format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc2.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nrebot --output output.json output.xml\n```\n\n----------------------------------------\n\nTITLE: Continue-on-Failure with FOR Loops\nDESCRIPTION: This example demonstrates how the `robot:continue-on-failure` tag affects the execution of FOR loops. When the tag is used, the loop will continue to execute even if keywords within the loop fail.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/TestExecution.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    [Tags]    robot:continue-on-failure\n    FOR    ${index}    IN RANGE    10\n        Do Something\n    END\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for Unit Tests\nDESCRIPTION: This command installs the necessary Python modules listed in the `utest/requirements.txt` file. These modules are required to run the Robot Framework unit tests. Using `pip` with the `-r` option ensures all dependencies are installed from the specified file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/README.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -r utest/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version with pip\nDESCRIPTION: This command installs a specific version (5.0.1rc1) of Robot Framework using pip. It ensures that the exact specified version is installed, overriding any other versions that may already be present.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.1rc1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==5.0.1rc1\n```\n\n----------------------------------------\n\nTITLE: Specifying Libraries Using Library Name\nDESCRIPTION: This snippet demonstrates how to specify a test library to import using its name. Robot Framework searches for the library in the module search path. Requires the module search path to be properly configured.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/UsingTestLibraries.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    OperatingSystem\nLibrary    CustomLibrary    possible    arguments\nLibrary    librarymodule.LibraryClass\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Robot Framework Version using pip\nDESCRIPTION: This code snippet shows how to install a specific version of Robot Framework using pip. It uses the `==` operator to specify the exact version to install.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.2b1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.0.2b1\n```\n\n----------------------------------------\n\nTITLE: Setting Development Version\nDESCRIPTION: This command sets the version information to a development version using the `invoke set-version dev` task.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_32\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke set-version dev\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.1rc1 with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip. The --pre flag includes pre-release versions, and --upgrade ensures that the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1rc1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Run Command with Subprocess (Blocking)\nDESCRIPTION: This Python snippet demonstrates a simple keyword to execute a command using `subprocess.run`. It is susceptible to blocking issues, especially on Windows, where timeouts might not work effectively.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\n\n\ndef run_command(command, *args):\n    result = subprocess.run([command, *args], encoding='UTF-8')\n    print(f'stdout: {result.stdout}\\nstderr: {result.stderr}')\n```\n\n----------------------------------------\n\nTITLE: ValueError Example: Type Hint Restriction Failure\nDESCRIPTION: This snippet shows the ValueError that occurs when a restricted type is violated. In this case the converter only accepts strings, so passing an integer will trigger this error.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nValueError: Argument 'arg' got value '42' (integer) that cannot be converted to date.\n```\n\n----------------------------------------\n\nTITLE: Checking pip version on Windows\nDESCRIPTION: This snippet demonstrates checking pip version on Windows using `pip --version` and `py -m <version> -m pip --version`\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_6\n\nLANGUAGE: Batch\nCODE:\n```\nC:\\> pip --version\npip 23.2.1 from ... (python 3.10)\nC:\\> py -m 3.12 -m pip --version\npip 23.3.2 from ... (python 3.12)\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP loop example with Variables and Test Case\nDESCRIPTION: This Robot Framework example demonstrates the default behavior of the FOR IN ZIP loop when the lists have different lengths. The loop iterates only twice, corresponding to the length of the shorter list, ignoring the remaining elements of the longer list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Variables ***\n@{ANIMALS}    dog      cat    horse    cow    elephant\n@{ELÄIMET}    koira    kissa\n\n*** Test Cases ***\nExample\n    FOR    ${en}    ${fi}    IN ZIP    ${ANIMALS}    ${ELÄIMET}\n        Log    ${en} is ${fi} in Finnish\n    END\n```\n\n----------------------------------------\n\nTITLE: Example Robot Framework test case using named-only arguments\nDESCRIPTION: This Robot Framework test case demonstrates how to call a Python keyword with named-only arguments. The `case_sensitive` argument is passed by name.  Demonstrates usage with and without the named argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Sort Words    Foo    bar    baZ\n    Sort Words    Foo    bar    baZ    case_sensitive=True\n```\n\n----------------------------------------\n\nTITLE: Resource File Variables Section\nDESCRIPTION: This snippet defines the Variables section of a Robot Framework resource file. It defines a variable `${TXT}` and assigns the value 'resource.txt' to it.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resource_extensions/resource.txt#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*** Variables ***\n${TXT}      resource.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command installs the latest available Robot Framework release using pip. The --pre flag allows installation of pre-release versions, and --upgrade ensures that the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.1rc1.rst#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Command Line Search for Deprecated Dictionary Access\nDESCRIPTION: This snippet shows how to use the `pss` tool to search for the deprecated dictionary item access syntax `&{var}[item]` in Robot Framework test data files. The `-ai` option performs a case-insensitive search.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_9\n\nLANGUAGE: RobotFramework\nCODE:\n```\npss -ai \"&\\{.+\\}\\[\" path/to/tests\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Expansion with Item Access\nDESCRIPTION: This snippet demonstrates list expansion with item access. It shows how to access a list within a dictionary and iterate through it using a FOR loop. It requires a variable `${var}` with a value like `{'items': ['a', 'b', 'c']}`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b1.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Access Token Variable\nDESCRIPTION: This command sets the `GITHUB_ACCESS_TOKEN` environment variable, which stores the GitHub access token. It's required to generate release notes from the issue tracker.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nGITHUB_ACCESS_TOKEN=<token>\n```\n\n----------------------------------------\n\nTITLE: Using @library to Enforce @keyword Decorator (Python)\nDESCRIPTION: This code snippet shows how the `@library` decorator enforces the use of `@keyword` to expose methods as Robot Framework keywords. Methods without the `@keyword` decorator are not exposed as keywords, providing better control over library API.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import library, keyword\n\n\n@library\nclass Example:\n\n    @keyword\n    def example_keyword(self):\n        # ...\n\n    def not_exposed_as_keyword(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework using pip\nDESCRIPTION: These commands demonstrate how to install the latest pre-release version of Robot Framework using pip, or how to install a specific version (6.1a1) of Robot Framework using pip.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install robotframework==6.1a1\n```\n\n----------------------------------------\n\nTITLE: Running ug2html.py to generate the User Guide\nDESCRIPTION: This snippet shows how to run the `ug2html.py` script to generate the Robot Framework User Guide. The script requires Python to be executed and generates the user guide based on the reStructuredText source files. Running the script without arguments displays its usage information.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython ug2html.py\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework 5.1 Beta 1 with pip\nDESCRIPTION: This command installs a specific beta version of Robot Framework using pip. It allows users to target a particular release for testing purposes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1b1.rst#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install robotframework==5.1b1\n```\n\n----------------------------------------\n\nTITLE: Documenting: Ignoring newline with backslash\nDESCRIPTION: This snippet demonstrates how to prevent automatic newlines in Robot Framework documentation by ending a line with a literal newline (`\\n`) or an escaping backslash (`\\`). This can be useful for fine-grained control over formatting.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nEnds with newline\n    [Documentation]    Ends with a newline and\\n\n    ...                automatic newline is not added.\n\nEnds with backslash\n    [Documentation]    Ends with a backslash and \\\n    ...                no newline is added.\n```\n\n----------------------------------------\n\nTITLE: Inline IF/ELSE IF/ELSE Example Robot Framework\nDESCRIPTION: This example shows an inline IF/ELSE IF/ELSE statement.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_16\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keyword ***\nInline IF/ELSE IF/ELSE\n    IF    $cond1    Keyword 1    ELSE IF    $cond2    Keyword 2    ELSE IF    $cond3    Keyword 3    ELSE    Keyword 4\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Loop Example\nDESCRIPTION: This example demonstrates how loop control keywords (Exit For Loop) can no longer be used directly inside keywords called within a FOR loop in Robot Framework 5.0. This represents a backwards incompatible change from previous versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_27\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nLooping\n    FOR    ${x}    IN    @{stuff}\n        Keyword\n    END\n\nKeyword\n    Exit For Loop\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command is used to install the latest pre-release version of Robot Framework using the pip package installer. It ensures you get the newest version, including alpha releases, which might contain unstable features.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre robotframework\n```\n\n----------------------------------------\n\nTITLE: Regular expression matching in Robot Framework EXCEPT\nDESCRIPTION: This example shows how to use regular expressions to match error messages in EXCEPT branches. The REGEXP: prefix allows for complex pattern matching. Backslashes need to be escaped.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nRegular expression\n    TRY\n        Some Keyword\n    EXCEPT    REGEXP: ValueError: .*\n        Error Handler 1\n    EXCEPT    REGEXP: [Ee]rror \\\\d+ occurred    # Backslash needs to be escaped.\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Command Line Tool Search Example\nDESCRIPTION: This snippet demonstrates how to use the `pss` tool (Python Simple Search) to find old-style for loops (`:FOR`) in Robot Framework test data files. The `-ai` option performs a case-insensitive search, and `path/to/tests` should be replaced with the actual path to the test data directory.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_5\n\nLANGUAGE: RobotFramework\nCODE:\n```\npss -ai \": ?FOR\" path/to/tests\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This snippet shows how to install a specific version of Robot Framework using pip.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==7.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing a specific Robot Framework version\nDESCRIPTION: This command installs a specific version of Robot Framework (7.2.2 in this case) using pip.  Specifying the version ensures that the installation is consistent and avoids potential compatibility issues with other software.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.2.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.2.2\n```\n\n----------------------------------------\n\nTITLE: Installing Execution Side Dependencies\nDESCRIPTION: This command installs the dependencies required for running the Robot Framework acceptance tests execution side, such as coverage.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -r atest/requirements-run.txt\n```\n\n----------------------------------------\n\nTITLE: JSON Variable File Example\nDESCRIPTION: This JSON file defines two variables: `STRING` with the value \"Hello, world!\" and `INTEGER` with the value 42. This file can be used as a variable file in Robot Framework to define variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"STRING\": \"Hello, world!\",\n    \"INTEGER\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Template with Variable and List\nDESCRIPTION: This Robot Framework snippet demonstrates how to use a simple variable ${NAME} and a list variable @{OCCASION} within a Robot Framework template or resource file. The variables can be replaced by their values during test execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/standard_libraries/builtin/template.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\nHello ${NAME}!\nHow are you on this @{OCCASION}?\n```\n\n----------------------------------------\n\nTITLE: Using @not_keyword Decorator (Python)\nDESCRIPTION: This snippet illustrates how to use the `@not_keyword` decorator to prevent a function or method from being treated as a Robot Framework keyword. This provides a way to explicitly exclude certain functions from the library's keyword list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import not_keyword\n\n\ndef example_keyword(self):\n    # ...\n\n@not_keyword\ndef not_exposed_as_keyword(self):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Checking pip version on Linux\nDESCRIPTION: This snippet demonstrates how to check the pip version on Linux. It shows using `pip --version` and `python -m pip --version` to specify the Python version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ pip --version\npip 23.2.1 from ... (python 3.10)\n$ python3.12 -m pip --version\npip 23.3.1 from ... (python 3.12)\n```\n\n----------------------------------------\n\nTITLE: Python Example Keyword with Partial @keyword Type Specification (Dictionary)\nDESCRIPTION: This Python code demonstrates specifying the type for only one argument using the `@keyword` decorator with a dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.api.deco import keyword\n\n\n@keyword(types={'second': float})\ndef example1(first, second, third):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 5.0 beta 1 using pip\nDESCRIPTION: These commands demonstrate how to install the latest pre-release of Robot Framework using pip, or how to install the specific 5.0b1 version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==5.0b1\n```\n\n----------------------------------------\n\nTITLE: Documenting paragraphs\nDESCRIPTION: This code snippet shows how to create paragraphs in Robot Framework documentation. Lines separated by a single newline are combined into one paragraph, while multiple newlines create separate paragraphs.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation\n...    First paragraph has only one line.\n...\n...    Second paragraph, this time created\n...    with multiple lines.\n```\n\n----------------------------------------\n\nTITLE: Install or Upgrade Robot Framework using pip\nDESCRIPTION: This command uses pip to install or upgrade Robot Framework to the latest available version. It is the recommended method for installing Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.4.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Setting Suite Name\nDESCRIPTION: Illustrates how to override the default suite name using the `--name` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --name \"Custom name\" tests.robot\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with a Dynamic Python Class\nDESCRIPTION: This snippet shows how to dynamically generate variables in a Python class using a `get_variables` method. The method accepts arguments and returns a dictionary of variables, enabling dynamic variable creation based on input.  This example creates a single variable `${DYNAMIC VARIABLE}`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass DynamicExample:\n\n    def get_variables(self, *args):\n        return {'dynamic variable': ' '.join(args)}\n```\n\n----------------------------------------\n\nTITLE: Output XML Timestamp Format - New\nDESCRIPTION: Shows the new timestamp format introduced in Robot Framework 7.0 for output.xml files. The timestamp is now `ISO 8601` compatible `YYYY-MM-DDTHH:MM:SS.mmmmmm` and is stored in the `time` attribute for messages and `start` and `elapsed` attributes for statuses.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<msg time=\"2023-11-08T15:36:34.278343\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" start=\"2023-11-08T15:37:35.046153\" elapsed=\"0.000161\"/>\n```\n\n----------------------------------------\n\nTITLE: Example keyword with @keyword decorator (Python 2 & 3)\nDESCRIPTION: This Python code snippet demonstrates using the `@keyword` decorator to specify argument types for Robot Framework keywords. This approach works with both Python 2 and Python 3.  Two variants are shown: mapping argument names to types with a dictionary, and mapping arguments to types based on position with a list. In the first case, the `count` argument will be converted to an integer and `case_insensitive` to a boolean. In the second case arguments will be converted to an `int` and `bool` according to their position.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Changing Keyword Status via Listener in Python\nDESCRIPTION: This snippet illustrates modifying keyword status within a listener to affect execution flow. It fails keywords that exceed a specified execution time, demonstrating control over keyword results and halting execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot import result, running\n\n\nclass KeywordPerformanceMonitor:\n\n    def __init__(self, max_seconds: float = 0.1):\n        self.max_seconds = max_seconds\n\n    def end_keyword(self, data: running.Keyword, result: result.Keyword):\n        elapsed_seconds = result.elapsed_time.total_seconds()\n        if result.status == 'PASS' and elapsed_seconds > self.max_seconds:\n            result.status = 'FAIL'\n            result.message = 'Keyword execution took too long.'\n```\n\n----------------------------------------\n\nTITLE: Adjusting TestSuite source using adjust_source() - Python\nDESCRIPTION: This snippet demonstrates how to adjust the source information of a Robot Framework TestSuite object using the `adjust_source()` method.  This is useful when recreating suites on different machines where the original source paths may not be valid. Dependencies: robot.running.TestSuite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom robot.running import TestSuite\n\n# Create a suite, adjust source and convert to JSON.\nsuite = TestSuite.from_file_system('/path/to/data')\nsuite.adjust_source(relative_to='/path/to')\nsuite.to_json('data.rbt')\n\n# Recreate suite elsewhere and adjust source accordingly.\nsuite = TestSuite.from_json('data.rbt')\nsuite.adjust_source(root='/new/path/to')\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework using pip\nDESCRIPTION: This code snippet shows how to install or upgrade Robot Framework to the latest available pre-release version using pip.  It uses the `--pre` flag to allow installation of beta versions. Alternatively, a specific version can be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.2b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Run Development Server - npm\nDESCRIPTION: This command starts the development server using npm. It typically uses Parcel to bundle and serve the application, enabling hot reloading and other development features. The server runs on `localhost:1234`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/src/web/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Multiple EXCEPT branches in Robot Framework\nDESCRIPTION: This example shows how to use multiple EXCEPT branches to handle different error messages. The EXCEPT branches are evaluated in order, and the first matching branch is executed. Variables can be used to specify the error message to match.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nMultiple EXCEPT branches\n    TRY\n        Some Keyword\n    EXCEPT    Error message    # Try matching this first.\n        Error Handler 1\n    EXCEPT    Another error    # Try this if above did not match.\n        Error Handler 2\n    EXCEPT    ${message}       # Last match attempt, this time using a variable.\n        Error Handler 3\n    END\n```\n\n----------------------------------------\n\nTITLE: Using Union with generics as type hint in Python\nDESCRIPTION: This example demonstrates how to use Union containing subscribed generics as a type hint in a Python function. This was causing errors in earlier Robot Framework versions and has been fixed in 4.0.2.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.2.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef example(arg: Union[List[int], Dict[str, int]]):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading Robot Framework using pip\nDESCRIPTION: This command upgrades the installed Robot Framework to the latest stable version using the pip package manager. It requires pip to be installed and connected to the internet to download the latest package.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Output XML Timestamp Format Change (Old)\nDESCRIPTION: Illustrates the old timestamp format used in the output.xml file before Robot Framework 7.0.  The timestamp, starttime, and endtime attributes used a custom YYYYMMDD HH:MM:SS.mmm format. External tools parsing these attributes need to be updated to handle the new ISO 8601 format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0a1.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with Library and HTML output\nDESCRIPTION: This snippet demonstrates the basic usage of the `libdoc` command to generate HTML documentation for a library. It specifies the library name and the desired output file name, with the `.html` extension indicating the format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlibdoc ExampleLibrary ExampleLibrary.html\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework with pip (Python)\nDESCRIPTION: This command uses the pip package installer to install the latest pre-release version of Robot Framework. It is the recommended method for installing Robot Framework and ensures that all dependencies are properly managed. The `--pre` flag is required to install alpha or beta versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre robotframework\n```\n\n----------------------------------------\n\nTITLE: Listing Invoke Tasks\nDESCRIPTION: This command lists all available tasks defined in the `tasks.py` file, which are used for automating various release-related steps.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke --list\n```\n\n----------------------------------------\n\nTITLE: Access Modules Examples in Robot Framework\nDESCRIPTION: These examples demonstrate how to access Python modules (os, math, robot) within Robot Framework. The `${{}}` syntax enables direct use of module attributes and functions. It is important to note the possible limitations regarding nested modules.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/EvaluatingExpressions.rst#_snippet_6\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nAccess modules\n    Should Be Equal      ${{os.sep}}               ${/}\n    Should Be Equal      ${{round(math.pi, 2)}}    ${3.14}\n    Should Start With    ${{robot.__version__}}    4.\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases with Literal Value\nDESCRIPTION: This Robot Framework test case demonstrates passing a literal string that contains an equals sign to a keyword with a positional-only argument.  The first example shows that `posonly=foo` is treated as a literal string. The second example showcases a failure due to incorrect argument syntax.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_37\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    # Positional-only argument gets literal value `posonly=foo` in this case.\n    Keyword    posonly=foo    normal=bar\n    # This fails.\n    Keyword    normal=bar    posonly=foo\n```\n\n----------------------------------------\n\nTITLE: Output.xml Keyword Name Attribute Changes (XML)\nDESCRIPTION: Demonstrates changes in how keyword names and library/resource file associations are stored in output.xml. The `library` attribute is replaced with the generic `owner` attribute. Additionally, the original keyword name for embedded arguments is moved from `sourcename` to `source_name`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Run Tests - npm\nDESCRIPTION: This command executes the unit tests for the project using Jest. It runs the test suite defined in the `package.json` and reports the test results.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/src/web/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Flattened Keyword Structure using --flattenkeywords option in XML\nDESCRIPTION: This XML snippet shows how a keyword would look flattened using the `--flattenkeywords` option. Note that the `<doc>_*Content flattened.*_</doc>` shows that the keyword has been flattened, removing the child keywords. The messages are preserved.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Keyword\">\n  <doc>_*Content flattened.*_</doc>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n  <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Version Check\nDESCRIPTION: This example shows how to check the Robot Framework version using the `--version` option. It displays the Robot Framework version, Python version, and platform type.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/BasicUsage.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ robot --version\nRobot Framework 7.0 (Python 3.12.1 on darwin)\n```\n\n----------------------------------------\n\nTITLE: Install specific Robot Framework version using pip\nDESCRIPTION: This command installs a specific version of Robot Framework (7.0rc1) using pip. Specifying the version number ensures that the exact version is installed, avoiding any potential compatibility issues with other dependencies.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.0rc1\n```\n\n----------------------------------------\n\nTITLE: Multilingual Support for Markers in Data\nDESCRIPTION: This enhancement focuses on multilanguage support for markers used in test data, likely allowing for localized keywords and values.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with Pip\nDESCRIPTION: This command demonstrates how to install or upgrade to the latest version of Robot Framework using pip, a package installer for Python. It ensures you have the most recent version of the framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests and Specifying Data\nDESCRIPTION: This command excludes tests tagged with `no-ci` and executes tests within the `atest/robot/standard_libraries` directory. This is necessary when a specified directory contains tests that would otherwise be excluded.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\natest/run.py --exclude no-ci atest/robot/standard_libraries\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework 3.1 beta 1 with pip\nDESCRIPTION: This command installs the latest pre-release version of Robot Framework using pip. The --pre flag allows installing pre-release versions, and --upgrade ensures that an existing installation is updated. Alternatively, a specific version can be installed using 'robotframework==3.1b1'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Documenting with newlines using escape sequence\nDESCRIPTION: This code snippet demonstrates how to add newlines manually using the `\\n` escape sequence within Robot Framework documentation and metadata. It illustrates defining multi-line documentation strings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation    First line.\\n\\nSecond paragraph. This time\\nwith multiple lines.\nMetadata         Example list    - first item\\n- second item\\n- third\n```\n\n----------------------------------------\n\nTITLE: Running Libdoc with custom library name and remote address\nDESCRIPTION: This snippet generates HTML documentation for a library named `MyLibrary` that is accessed via a remote interface. It demonstrates using the `--name` option to set a custom library name.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nlibdoc --name MyLibrary Remote::http://10.0.0.42:8270 MyLibrary.html\n```\n\n----------------------------------------\n\nTITLE: Setting Suite Documentation\nDESCRIPTION: Demonstrates how to set suite documentation from the command line using the `--doc` option. Shows how to provide the documentation directly or read it from an external file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --doc \"Example documentation\" tests.robot\nrobot --doc doc.txt tests.robot    # Documentation read from doc.txt if it exits.\n```\n\n----------------------------------------\n\nTITLE: Using functools.wraps with Python Decorators for Robot Framework Keywords\nDESCRIPTION: Explains how to use `functools.wraps` when implementing keywords with Python decorators to ensure Robot Framework correctly reads the function signature, including argument default values and type hints. This resolves issues with decorators modifying function signatures.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport functools\n\n@functools.wraps(decorator)\ndef my_keyword(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking out gh-pages Branch\nDESCRIPTION: This command checks out the `gh-pages` branch, which is used for hosting the Robot Framework documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout gh-pages\n```\n\n----------------------------------------\n\nTITLE: Escaping Empty Values with Backslash - Robot Framework\nDESCRIPTION: Demonstrates how to escape empty cells in Robot Framework test data using the backslash character. This is particularly important when using space-separated format where multiple spaces act as separators.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_9\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nUsing backslash\n    Do Something    first arg    \\\n    Do Something    \\            second arg\n```\n\n----------------------------------------\n\nTITLE: Python Keyword with @keyword Decorator (Type List)\nDESCRIPTION: This Python code shows how to use the `@keyword` decorator to specify argument types using a list. The list maps arguments to types based on their position in the function signature. This approach works with both Python 2 and Python 3. This example maps 'count' to an integer and 'case_insensitive' to a boolean.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Tag\nDESCRIPTION: This command creates an annotated Git tag for the release, including a message describing the release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -a v$VERSION -m \"Release $VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Case with Expected Failure in Robot Framework\nDESCRIPTION: This snippet defines a test case named 'Suite2 Test' with documentation specifying an expected failure. The test case uses the 'Fail' keyword to trigger the failure and passes the failure message stored in the ${msg} variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/sub_suite2.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n|  Suite2 Test  |  [Documentation]  |  FAIL    |  Expected failure  |\t\n|               |  Fail        |  ${msg}  |                    |\n|               |              |          |  |  |  |  |  |  |  |\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework (3.2.1 in this case) using pip. This is useful for ensuring compatibility or reproducing specific environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==3.2.1\n```\n\n----------------------------------------\n\nTITLE: Install Robot Framework 7.0rc3 (pip)\nDESCRIPTION: This command installs the specified version of Robot Framework using pip. The --pre flag ensures that pre-release versions (like release candidates) are considered during the installation/upgrade process.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework via pip\nDESCRIPTION: This snippet shows how to install the latest pre-release of Robot Framework using pip. It utilizes the --pre flag to include pre-release versions during installation. The --upgrade flag ensures that the existing Robot Framework installation is updated to the newest version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.3b1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install or upgrade Robot Framework to the latest version using pip, the Python package installer. It also demonstrates how to install a specific version of Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==3.0.3\n```\n\n----------------------------------------\n\nTITLE: Using Extended Library in Robot Framework\nDESCRIPTION: This Robot Framework snippet shows how to use both the original `SeleniumLibrary` and an extended library `SeLibExtensions` in a test case.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_111\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    SeleniumLibrary\nLibrary    SeLibExtensions\n\n*** Test Cases ***\nExample\n    Open Browser    http://example      # SeleniumLibrary\n    Title Should Start With    Example  # SeLibExtensions\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework (4.1.2rc2) using pip. Specifying the version ensures that the exact release candidate is installed, avoiding potential compatibility issues with newer versions. This command uses the == operator to specify the exact version number.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2rc2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\npip install robotframework==4.1.2rc2\n```\n\n----------------------------------------\n\nTITLE: Defining Suite Metadata in Robot Framework\nDESCRIPTION: This Robot Framework snippet demonstrates how to define free suite metadata as name-value pairs using the `Metadata` setting in the `Settings` section. Metadata is displayed in reports and logs alongside documentation. Values can be formatted with HTML and split across multiple rows, and variables can be used.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/CreatingTestSuites.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nMetadata        Version            2.0\nMetadata        Robot Framework    http://robotframework.org\nMetadata        Platform           ${PLATFORM}\nMetadata        Longer Value\n...             Longer metadata values can be split into multiple\n...             rows. Also *simple* _formatting_ is supported.\n```\n\n----------------------------------------\n\nTITLE: Installing from Source - Bash\nDESCRIPTION: This snippet shows how to install Robot Framework from source after cloning the repository. It uses the `setup.py` script with the `install` argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases\nDESCRIPTION: This section defines several test cases, including passing and failing scenarios. It demonstrates the use of keywords and assertions to verify expected outcomes. It also calls keywords from imported TSV resources and verifies the imported variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/mixed_data/TXT.txt#_snippet_2\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Test Case\nTXT Passing    No operation\nTXT Failing    [Documentation]    FAIL    **ERROR**\n    Failing    *${msg}*\nTSV Resource    Keyword from TSV resource\n    Keyword from TSV resource 2\n    Should Be Equal    ${tsv_resource_var}    TSV Resource Variable\n    Should Be Equal    ${tsv_resource_var2}    TSV Resource Variable From Recursive Resource\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in Robot Framework Resource\nDESCRIPTION: This snippet demonstrates how to define variables in a Robot Framework resource file. The variable '${txt_resource_var}' is assigned the value 'TXT Resource Variable'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/txt_resource.txt#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*Variables*  Value  Value  Value  Value\n${txt_resource_var}  TXT Resource Variable      \n```\n\n----------------------------------------\n\nTITLE: Handling Everything with EXCEPT and ELSE in Robot Framework\nDESCRIPTION: This snippet shows how to handle both errors and success cases using a combination of an EXCEPT branch without a message (to catch any error) and an ELSE branch (to handle the success case).\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0rc2.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nHandle everything\n    TRY\n        Some Keyword\n    EXCEPT    AS    ${err}\n        Log    Error occurred: ${err}\n    ELSE\n        Log    No error occurred!\n    END\n```\n\n----------------------------------------\n\nTITLE: Removing Tags Set Globally in Robot Framework\nDESCRIPTION: This Robot Framework code demonstrates how to remove tags set in the Settings section by using the '-tag' syntax. The 'Test Tags' setting sets global tags, and the 'T2' test case removes the 'most' tag.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\n    No Operation\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with Pip3\nDESCRIPTION: These commands demonstrate how to install Robot Framework using pip3, the package installer for Python 3. It ensures the framework is installed for the Python 3 interpreter.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npip3 install robotframework\n```\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m pip install robotframework\n```\n\n----------------------------------------\n\nTITLE: Enabling languages via command line using Robot Framework\nDESCRIPTION: This snippet demonstrates how to enable multiple languages in Robot Framework using the `--language` option on the command line. The example shows enabling Finnish, Portuguese, and Brazilian Portuguese for a Robot Framework test execution.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_14\n\nLANGUAGE: robotframework\nCODE:\n```\nrobot --language Finnish testit.robot\nrobot --language pt --language ptbr testes.robot\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This command installs a specific version of Robot Framework using pip. Specifying the version ensures that you have a consistent environment and avoids potential compatibility issues with other libraries or systems.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.1.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==5.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing specific Robot Framework version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework, in this case, version 7.0.1rc1, using pip. It ensures that the installed version is exactly the one specified.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.1rc1.rst#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\npip install robotframework==7.0.1rc1\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest pre-release version of Robot Framework using pip. It upgrades the existing installation to the newest available release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Robot Framework 3.1 Alpha 2 Version\nDESCRIPTION: This command installs a specific version of Robot Framework using pip. By specifying the version number (e.g., `3.1a2`), you ensure that exactly that version is installed, regardless of whether newer pre-release versions are available.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.1a2\n```\n\n----------------------------------------\n\nTITLE: Documenting robot.parsing package with automodule\nDESCRIPTION: This snippet uses the Sphinx automodule directive to generate documentation for the robot.parsing package. It specifies that all members should be included, undocumented members should be shown, and inheritance information should be displayed. The automodule directive automatically extracts the documentation from the Python code.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/api/autodoc/robot.parsing.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: robot.parsing\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Simple Keyword (Robot Framework)\nDESCRIPTION: A simple robotframework keyword that logs two messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1a1.rst#_snippet_4\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Keywords ***\nKeyword\n    Log    Robot\n    Log    Framework\n```\n\n----------------------------------------\n\nTITLE: Installing specific Robot Framework version with pip\nDESCRIPTION: This command installs a specific version of Robot Framework.  Useful for testing against specific versions, or reverting to an earlier version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0b1.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==3.0b1\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework from source\nDESCRIPTION: This demonstrates installing Robot Framework from a downloaded source distribution. First, extract the archive, navigate to the extracted directory, and run the installation command.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0b1.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Pre-run Modifier: Exclude Tests by Name - Python\nDESCRIPTION: This pre-run modifier excludes tests based on a given name pattern, acting as a negative version of the `--test` option. It requires defining a name pattern to exclude.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# Exclude test named 'Example'.\nrobot --prerunmodifier path/to/ExcludeTests.py:Example tests.robot\n\n# Exclude all tests ending with 'something'.\nrobot --prerunmodifier path/to/ExcludeTests.py:*something tests.robot\n```\n\n----------------------------------------\n\nTITLE: Combine Robot Framework Results\nDESCRIPTION: This command uses the `rebot` tool to combine multiple Robot Framework output files into a single report. It allows post-processing of the results and renaming the report using the `--name` option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/README.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrebot --name Example output1.xml output2.xml\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Expansion Prior Syntax\nDESCRIPTION: This Robot Framework example demonstrates the old way to iterate over a list obtained from a dictionary.  It first sets the variable @{items} to the value of the list 'items' in the dictionary `${var}`, then iterates and logs each item.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a3.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n@{items} =    Set Variable    ${var}[items]\nFOR    ${item}    IN    @{items}\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Generating Libspec File\nDESCRIPTION: This snippet generates a `.libspec` file for a resource file. The `.libspec` format is an XML spec file where the keyword documentation is converted to HTML.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nlibdoc test/resource.robot doc/resource.libspec\n```\n\n----------------------------------------\n\nTITLE: Checking Distribution Packages\nDESCRIPTION: This command uses `twine` to check the created distribution packages for any issues or errors.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\ntwine check dist/*\n```\n\n----------------------------------------\n\nTITLE: Rebot Invocation Example\nDESCRIPTION: Illustrates the basic syntax for invoking the Rebot tool. This can be done directly using the `rebot` command, or by executing the `robot.rebot` module or `robot/rebot.py` file with a Python interpreter.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrebot [options] outputs\npython -m robot.rebot [options] outputs\npython path/to/robot/rebot.py [options] outputs\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Project Directory\nDESCRIPTION: This command cleans up the project directory by removing temporary files, build artifacts, and distribution packages, ensuring a clean state for the release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke clean\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version using pip\nDESCRIPTION: This command uses pip to install a specific version of Robot Framework. This is useful for ensuring compatibility or replicating specific environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.4.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==3.0.4\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework from Local Source via Pip\nDESCRIPTION: This command shows how to install Robot Framework from a local source distribution (e.g., a .tar.gz file) using pip.  It's useful when you've downloaded the source archive and want to install it without an internet connection.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework-3.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: These commands install Robot Framework, either the latest version or a specific version (6.0.1), using the pip package installer.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Removing Globally Set Tags in Robot Framework\nDESCRIPTION: Demonstrates how to remove tags set globally in the Settings section using the `-tag` syntax in a test's `[Tags]` setting. This example showcases the 'Test Tags' setting and how to override it for individual test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nTest Tags      all    most\n\n*** Test Cases ***\nT1\n    No Operation\nT2\n    [Tags]    one    -most\nT3\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Test Case Definition in Robot Framework\nDESCRIPTION: This section defines three test cases. The first fails explicitly with a 'Fail' keyword, the second calls a keyword that fails, and the third attempts to call a non-existent keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/failing_suite.txt#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Test Cases ***\nThis fails at test\n\tFail\tFailure msg\nThis fails at kw\n\tLets fail at keyword\nThis Errors\n\tThis does not exist\n```\n\n----------------------------------------\n\nTITLE: Creating Output File with Rebot\nDESCRIPTION: Shows how to create an XML output file using Rebot and how to disable log and report generation using the `--log none` and `--report none` options. The `--output` option specifies the name of the output file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrebot --include smoke --output smoke.xml --log none --report none original.xml\n```\n\n----------------------------------------\n\nTITLE: Defining a Keyword from REST Resource\nDESCRIPTION: This snippet defines a Robot Framework keyword named 'Keyword from REST resource'. The keyword contains a single step, 'No Operation', which is a built-in Robot Framework keyword that performs no action. This demonstrates how keywords can be defined within reST directives.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/rest_directive_resource.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nKeyword from REST resource\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Create Test Suite from JSON - Python\nDESCRIPTION: This snippet shows how to create a Robot Framework test suite from JSON data using the 'TestSuite.from_json' method. It demonstrates creating a suite from a JSON file or a JSON string and executing it.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import TestSuite\n\n\n# Create suite from JSON data in a file.\nsuite = TestSuite.from_json('data.rbt')\n\n# Create suite from a JSON string.\nsuite = TestSuite.from_json('{\"name\": \"Suite\", \"tests\": [{\"name\": \"Test\"}]}')\n\n# Execute suite. Notice that log and report needs to be created separately.\nsuite.run(output='example.xml')\n```\n\n----------------------------------------\n\nTITLE: Generating XML Spec File\nDESCRIPTION: This snippet generates an XML spec file for the OperatingSystem library.  XML spec files are designed for tools to programmatically read the library documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nlibdoc OperatingSystem OperatingSystem.xml\n```\n\n----------------------------------------\n\nTITLE: Old FOR Loop Syntax in Robot Framework\nDESCRIPTION: This snippet demonstrates the old FOR loop syntax in Robot Framework, which was deprecated in version 3.2 and removed in version 4.0.  It uses the `:FOR` keyword, indentation with backslashes, and is no longer supported.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_6\n\nLANGUAGE: Robot Framework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Example JSON Variable File\nDESCRIPTION: This JSON snippet represents a simple variable file containing a string and an integer. This file can be used in Robot Framework tests to define variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"STRING\": \"Hello, world!\",\n    \"INTEGER\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests\nDESCRIPTION: The Robot Framework acceptance tests are executed using the `run.py` script. The script accepts options for interpreter selection, schema validation, and data path specification. The `data` parameter specifies the directory or file to execute, and defaults to all tests without the `no-ci` tag. Options are the same as with the `robot` command.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natest/run.py [--interpreter interpreter] [--schema-validation] [options] [data]\n```\n\n----------------------------------------\n\nTITLE: ValueError Example: Invalid Date Conversion\nDESCRIPTION: This snippet shows an example of a ValueError that occurs when an argument cannot be converted to a date because it's in an unexpected format. It demonstrates the error message provided by Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nValueError: Argument 'arg' got value 'invalid' that cannot be converted to date: Expected date in format 'dd.mm.yyyy', got 'invalid'.\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Robot Framework with pip\nDESCRIPTION: This command installs Robot Framework version 4.0 alpha 2 using pip. It ensures that the exact specified version is installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a2.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.0a2\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip (latest)\nDESCRIPTION: This command uses pip to install or upgrade Robot Framework to the latest available pre-release version. The `--pre` flag allows installing pre-release versions and the `--upgrade` flag ensures that the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1.2rc1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Example of changing a keyword to avoid FOR clash in Robot Framework\nDESCRIPTION: This snippet presents a possible workaround for cases in which the keyword name is `FOR` and may start a `for loop` unexpectedly after Robot Framework 3.1.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_18\n\nLANGUAGE: Robot Framework\nCODE:\n```\nFor\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.2 with pip\nDESCRIPTION: These commands demonstrate how to install or upgrade to Robot Framework 7.2 using pip. The first command installs the latest version, while the second installs the specific 7.2 version. These commands need pip installed to work.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade robotframework\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.2\n```\n\n----------------------------------------\n\nTITLE: Pushing Dev Version Changes\nDESCRIPTION: This command pushes the changes made to the version files, setting them to the next development version to the remote repository.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable in Robot Framework\nDESCRIPTION: This snippet defines a global variable named '${msg}' and assigns it the value 'Expected failure'. This variable can be used within the test cases to pass the expected failure message to the 'Fail' keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/txt/with_init/sub_suite2.txt#_snippet_1\n\nLANGUAGE: RobotFramework\nCODE:\n```\n|  ${msg}  |  Expected failure  |\n```\n\n----------------------------------------\n\nTITLE: Define Robot Framework Suite Setup\nDESCRIPTION: This code snippet defines the settings for a Robot Framework test suite. It includes the `Suite Setup` keyword to be executed at the start of the suite, the suite documentation, and an attempt to set an invalid setting.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/with_init/__init__.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n** Settings **\nSuite Setup     Suite Setup\nDocumentation   Testing suite init file\nInvalid Init    Setting\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 3.2 Alpha 1 with pip\nDESCRIPTION: Installs the latest available pre-release of Robot Framework or a specific version using pip, the Python package installer. Requires pip to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2a1.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==3.2a1\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0 alpha 3 using pip\nDESCRIPTION: This snippet demonstrates how to install the Robot Framework 4.0 alpha 3 release using the pip package manager. It provides two options: installing the latest available pre-release version or installing the specific 4.0a3 version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a3.rst#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: Robot Framework\nCODE:\n```\npip install robotframework==4.0a3\n```\n\n----------------------------------------\n\nTITLE: Output XML Keyword Names - Old\nDESCRIPTION: Illustrates the old format for storing keyword names in output.xml.  The keyword name is in the `name` attribute, and the library/resource file is in the `library` or `sourcename` attribute.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Adding Release Notes File to Git\nDESCRIPTION: This command adds the generated release notes file to the Git staging area, preparing it to be committed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngit add doc/releasenotes/rf-$VERSION.rst\n```\n\n----------------------------------------\n\nTITLE: Running All Tests\nDESCRIPTION: This command executes all acceptance tests. It doesn't require any specific options. The results are written to an interpreter-specific directory under the `atest/results` directory.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/README.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\natest/run.py\n```\n\n----------------------------------------\n\nTITLE: Dictionary Iteration with Key-Value Pairs\nDESCRIPTION: Demonstrates iterating over a dictionary using the `&{dict}` syntax in a FOR loop, including additional key-value pairs after the dictionary variable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_11\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{dict}    another=item    one=more\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting language in a Robot Framework data file\nDESCRIPTION: This snippet demonstrates how to specify the language for a Robot Framework data file using the `language:` syntax. This allows for localization of keywords and settings within the file. This must appear before the first section in the Robot Framework file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0rc2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\nlanguage: fi\n\n*** Asetukset ***\nDokumentaatio        Example using Finnish.\n```\n\n----------------------------------------\n\nTITLE: Installing specific version Robot Framework 4.0 alpha 1 with pip\nDESCRIPTION: This command installs Robot Framework version 4.0 alpha 1 specifically using pip.  This is useful for testing or reproducing issues with a particular version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==4.0a1\n```\n\n----------------------------------------\n\nTITLE: Example of escaping the value `FOR` in Robot Framework\nDESCRIPTION: This snippet shows how to escape the value `FOR` to avoid conflicts with `FOR` loop statements in Robot Framework templates.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_19\n\nLANGUAGE: Robot Framework\nCODE:\n```\n\\FOR\n```\n\n----------------------------------------\n\nTITLE: Install Specific Robot Framework Version with Pip (Python)\nDESCRIPTION: This command installs a specific version of Robot Framework (5.1a2 in this case) using pip. This is useful for testing or using a specific version of the framework.  This command will install the RobotFramework with the exact version specified.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.1a2.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install robotframework==5.1a2\n```\n\n----------------------------------------\n\nTITLE: XML Output of a Keyword Execution in Robot Framework\nDESCRIPTION: This XML snippet shows the output generated by executing the `Example` keyword. It includes detailed information about each keyword call, including arguments, documentation, timestamps, and status.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1b1.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Robot</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.663\"/>\n  </kw>\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Framework</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n  </kw>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: Including and Excluding Tag Statistics - Robot Framework\nDESCRIPTION: This example demonstrates how to include and exclude specific tags from the `Statistics by Tag` table using the `--tagstatinclude` and `--tagstatexclude` options.  This allows for a more focused view of tag statistics by filtering out irrelevant tags based on exact names or patterns.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n--tagstatinclude some-tag --tagstatinclude another-tag\n--tagstatexclude owner-*\n--tagstatinclude prefix-* --tagstatexclude prefix-13\n```\n\n----------------------------------------\n\nTITLE: Named-only arguments in Python 3\nDESCRIPTION: This Python example shows how to use keyword-only arguments (named-only arguments) in a Python 3 library. The `case_sensitive` argument can only be passed as a keyword argument.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef sort_words(*words, case_sensitive=False):\n    key = str.lower if case_sensitive else None\n    return sorted(words, key=key)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for an Invoke Task\nDESCRIPTION: This command displays the usage instructions and options for a specific Invoke task. Replace `task` with the name of the task you want to learn more about.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke --help task\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This code snippet demonstrates how to install the latest pre-release version of Robot Framework using pip. The --pre flag ensures that pre-release versions are considered, and --upgrade updates the package if it's already installed. This command requires pip to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.1rc1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Tags - Robot Framework\nDESCRIPTION: This example shows how to add documentation to tags using the `--tagdoc` option. The documentation is shown in the `Test Details by Tag` table and as a tooltip in the `Statistics by Tag` table.  The format is `tag:doc`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n--tagdoc mytag:Example\n--tagdoc \"regression:See http://example.com/info.html\"\n--tagdoc \"owner-*:Original author\"\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework 7.2 Beta 1 Version\nDESCRIPTION: This command shows how to install a specific beta version of Robot Framework (7.2b1) using pip. This is useful for testing or reproducing issues with a particular release.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.2b1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.2b1\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This command installs the latest available pre-release version of Robot Framework using pip. The `--pre` flag allows installation of pre-release versions, and `--upgrade` ensures that any existing Robot Framework installation is updated to the specified version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.1rc1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: HTML in Error Messages - Python\nDESCRIPTION: This snippet shows how to include HTML formatted error messages in Robot Framework. By starting the error message with the text `*HTML*`, the message will be rendered as HTML in the log.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nraise AssertionError(\"*HTML* <a href='robotframework.org'>Robot Framework</a> rulez!!\")\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0 alpha 1 with pip\nDESCRIPTION: This command installs the latest available pre-release of Robot Framework using pip. The `--pre` flag allows installing pre-release versions, and `--upgrade` ensures that any existing Robot Framework installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Define a Keyword in Robot Framework TXT Resource\nDESCRIPTION: This snippet defines a keyword named 'Keyword from TXT resource 2' in a Robot Framework TXT resource file. The keyword performs a 'No operation'. Keywords defined in resource files can be imported and used in test cases.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/txt_resource2.txt#_snippet_1\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| *Keywords                     |  Action  |  Argument  |  Argument  |  Argument |\n| Keyword from TXT resource 2  |  No operation    |\n```\n\n----------------------------------------\n\nTITLE: Deprecated Old FOR Loop Syntax - Robot Framework\nDESCRIPTION: This snippet demonstrates the old `:FOR` loop syntax that is no longer supported in Robot Framework 4.0. This syntax was replaced by a more readable and maintainable `FOR ... IN ... END` structure.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc2.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Notes to Remote\nDESCRIPTION: This command pushes the committed release notes changes to the remote Git repository, making them available to other collaborators.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Old output.xml Timestamp Format\nDESCRIPTION: Example of the old timestamp format in output.xml, using a custom YYYYMMDD HH:MM:SS.mmm format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0b1.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<msg timestamp=\"20231108 15:36:34.278\" level=\"INFO\">Hello world!</msg>\n<status status=\"PASS\" starttime=\"20231108 15:37:35.046\" endtime=\"20231108 15:37:35.046\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Library in Robot Framework\nDESCRIPTION: This snippet demonstrates how to import the Remote library in a Robot Framework test suite. It showcases specifying the remote server address, assigning an alias, and setting a custom timeout for the connection.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/RemoteLibrary.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nLibrary    Remote    http://127.0.0.1:8270       AS    Example1\nLibrary    Remote    http://example.com:8080/    AS    Example2\nLibrary    Remote    http://10.0.0.2/example    1 minute    AS    Example3\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework from Local Source Manually\nDESCRIPTION: This command demonstrates how to manually install Robot Framework by navigating to the extracted source directory and running the setup script using Python.  It requires extracting the source distribution first.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework with pip\nDESCRIPTION: This snippet shows how to install the latest Robot Framework preview release, or a specific version, using pip.  This is the standard way to install the framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0b1.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Linking to Keywords Example (Python)\nDESCRIPTION: This example illustrates how to link to other keywords within the library documentation. It showcases how to refer to other keywords using backticks, like `Another Keyword` or `Keyword`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n   def keyword(log_level=\"INFO\"):\n       \"\"\"Does something and logs the output using the given level.\n\n       Valid values for log level` are \"INFO\" (default) \"DEBUG\" and \"TRACE\".\n\n       See also `Another Keyword`.\n       \"\"\"\n       # ...\n\n   def another_keyword(argument, log_level=\"INFO\"):\n       \"\"\"Does something with the given argument else and logs the output.\n\n       See `Keyword` for information about valid log levels.\n       \"\"\"\n       # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Robot Framework 4.0rc1\nDESCRIPTION: This command uses pip to install a specific version (4.0rc1) of Robot Framework. This ensures that the exact version is installed, avoiding potential compatibility issues with newer versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==4.0rc1\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Suite Settings\nDESCRIPTION: This section defines the settings for the Robot Framework test suite, including documentation and resource file imports. It sets up the environment for the tests by importing necessary resources.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/mixed_data/TXT.txt#_snippet_0\n\nLANGUAGE: RobotFramework\nCODE:\n```\n*Setting\nDocumentation    Test suite in TXT file\nResource    ../resources/rest_resource.rst\nResource    ../resources/tsv_resource.tsv\n```\n\n----------------------------------------\n\nTITLE: File Object Access (Recommended)\nDESCRIPTION: This snippet demonstrates the recommended method of accessing all lines of a file object using extended variable syntax in Robot Framework. This approach replaces the deprecated method of treating file objects as lists.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.2.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    ${file} =    Evaluate    open('foo.txt')\n    Log many    @{file.readlines()}    # logs each row of file\n```\n\n----------------------------------------\n\nTITLE: Glob pattern matching in Robot Framework EXCEPT\nDESCRIPTION: This example demonstrates using glob patterns to match error messages in EXCEPT branches. The GLOB: prefix allows for wildcard matching of error messages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nGlob pattern\n    TRY\n        Some Keyword\n    EXCEPT    GLOB: ValueError: *\n        Error Handler 1\n    EXCEPT    GLOB: [Ee]rror ?? occurred    GLOB: ${pattern}\n        Error Handler 2\n    END\n```\n\n----------------------------------------\n\nTITLE: Documenting Converter Functions\nDESCRIPTION: This snippet illustrates how to document converter functions using docstrings. The documentation is used by Libdoc to provide information about the converters in the generated documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass FiDate(date):\n\n    @classmethod\n    def from_string(cls, value: str):\n        \"\"\"Date in ``dd.mm.yyyy`` format.\"\"\"\n        # ...\n\n\nclass UsDate(date):\n    \"\"\"Date in ``mm/dd/yyyy`` format.\"\"\"\n\n    @classmethod\n    def from_string(cls, value: str):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Rulers\nDESCRIPTION: Illustrates how to insert horizontal rulers ( `<hr>` tags) to separate sections by using three or more hyphens on a line. The hyphens must be the only content on that line.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/DocumentationFormatting.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nSome text here.\n\n---\n\nMore text...\n```\n\n----------------------------------------\n\nTITLE: Old FOR Loop Syntax Example (Deprecated)\nDESCRIPTION: This snippet shows the old FOR loop syntax in Robot Framework, which is deprecated in version 3.2 and will be removed in version 4.0. It uses `:FOR` to start the loop and a backslash to escape keywords inside the loop.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_8\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0 beta 2 with pip\nDESCRIPTION: This snippet shows how to install the latest pre-release of Robot Framework or a specific version (4.0b2) using pip. It requires pip to be installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b2.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework==4.0b2\n```\n\n----------------------------------------\n\nTITLE: Customizing Report Background Colors\nDESCRIPTION: This example demonstrates how to customize the background colors of the report file using the `--reportbackground` option.  It allows specifying colors for pass, fail, and skip statuses.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/OutputFiles.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n--reportbackground blue:red\n--reportbackground blue:red:orange\n--reportbackground #00E:#E00\n```\n\n----------------------------------------\n\nTITLE: Listener example: Print keyword and WHILE loop info (Python)\nDESCRIPTION: This Python code demonstrates how to use the enhanced listener API version 3 to print information about started keywords and ended WHILE loops. It utilizes the `robot.running` and `robot.result` modules to access keyword and WHILE loop data and results.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import Keyword as KeywordData, While as WhileData\nfrom robot.result import Keyword as KeywordResult, While as WhileResult\n\n\ndef start_keyword(data: KeywordData, result: KeywordResult):\n    print(f\"Keyword '{result.full_name}' used on line {data.lineno} started.\")\n\n\ndef end_while(data: WhileData, result: WhileResult):\n    print(f\"WHILE loop on line {data.lineno} ended with status {result.status} \"\n          f\"after {len(result.body)} iterations.\")\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Cases Example\nDESCRIPTION: This code snippet demonstrates how to use a keyword with arguments within a Robot Framework test case. The `Example Keyword` is called with arguments '42' and 'False', which are initially passed as Unicode strings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1a2.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Example Keyword    42    False\n```\n\n----------------------------------------\n\nTITLE: Keyword Tagging - Robot Framework\nDESCRIPTION: Demonstrates how to add tags to Robot Framework user keywords using the `[Tags]` setting. Tags can also be added as the last line of the keyword's documentation.  Tags are used for categorization.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_4\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nMy keyword\n    [Tags]    tag1    tag2\n    No Operation\nMy other keyword\n    [Documentation]    Tags can also be added as last line of documentation.\n    ...                Tags: tag1, tag2\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Define a Variable in Robot Framework TXT Resource\nDESCRIPTION: This snippet defines a variable named 'txt_resource_var2' with the value 'TXT Resource Variable From Recursive Resource' in a Robot Framework TXT resource file. Variables defined in resource files can be imported and used in test cases and other resource files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/txt_resource2.txt#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| *Variables             |  Value                                          |  Value  |  Value  |  Value |\n| ${txt_resource_var2}  |  TXT Resource Variable From Recursive Resource  |\n```\n\n----------------------------------------\n\nTITLE: Deprecated Old For Loop Syntax Robot Framework\nDESCRIPTION: Demonstrates the deprecated old-style FOR loop syntax in Robot Framework, which is being replaced by a more readable and explicit syntax. The old syntax requires using `:FOR` to start the loop and escaping keywords inside the loop with a backslash. This example highlights the syntax that will be removed in future versions of Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2a1.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Defining a Robot Framework Variable\nDESCRIPTION: This snippet defines a variable named '${msg}' in Robot Framework. This variable is used to store the expected failure message for the test case defined in the other snippet. Using variables makes tests more maintainable and readable.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/rest/with_init/sub_suite2.robot.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\n* ********************* Variables *****************************************\n|  ${msg}  |  Expected failure  |\n```\n\n----------------------------------------\n\nTITLE: Format Code - npm\nDESCRIPTION: This command formats the code using Prettier. It automatically formats the code according to the configured style rules, ensuring consistent code formatting across the project.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/src/web/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run pretty\n```\n\n----------------------------------------\n\nTITLE: User Keyword with Named-Only Arguments\nDESCRIPTION: These Robot Framework keywords demonstrate defining named-only arguments with and without varargs.  The `[Arguments]` section defines the arguments for the keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nWith Varargs\n    [Arguments]    @{varargs}    ${named}\n    Log Many    @{varargs}    ${named}\n```\n\nLANGUAGE: robotframework\nCODE:\n```\nWithout Varargs\n    [Arguments]    @{}    ${first}    ${second}=default\n    Log Many    ${first}    ${second}\n```\n\n----------------------------------------\n\nTITLE: FOR IN ZIP Loop - Robot Framework\nDESCRIPTION: Illustrates the new `FOR ... IN ZIP ...` loop syntax in Robot Framework.  This loop iterates over multiple lists simultaneously, taking elements from each list at each iteration.  Both lists must be of the same length or the loop will stop after the shortest list.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nFor in zip example    # take elements from both lists\n    :FOR    ${number}    ${name}    IN ZIP    ${NUMBERS}    ${NAMES}\n     \\     Number Should Be Named    ${number}    ${name}\n```\n\n----------------------------------------\n\nTITLE: ByteString argument conversion update (Python)\nDESCRIPTION: This snippet describes the removal of `ByteString` argument conversion support in Robot Framework due to its deprecation in Python 3.14. Users are advised to replace `arg: ByteString` with `arg: bytes | bytearray` for equivalent functionality.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc3.rst#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\narg: ByteString -> arg: bytes | bytearray\n```\n\n----------------------------------------\n\nTITLE: Keyword Name Format Change in Output.xml (XML)\nDESCRIPTION: This snippet showcases changes in how keyword names are stored in the output.xml. The 'library' attribute used to indicate the source of a keyword has been replaced with a generic 'owner' attribute. Additionally, the attribute storing the original name of a keyword with embedded arguments has changed from 'sourcename' to 'source_name'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.0rc1.rst#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old format -->\n<kw name=\"Log\" library=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" sourcename=\"Number of ${animals} should be\" library=\"my_resource\">...</kw>\n\n<!-- New format -->\n<kw name=\"Log\" owner=\"BuiltIn\">...</kw>\n<kw name=\"Number of horses should be\" source_name=\"Number of ${animals} should be\" owner=\"my_resource\">...</kw>\n```\n\n----------------------------------------\n\nTITLE: Old FOR Loop Syntax Example (Deprecated) - Robot Framework\nDESCRIPTION: This code demonstrates the old `:FOR` loop syntax that was deprecated in Robot Framework 3.2 and removed in Robot Framework 4.0. It is provided for historical context to illustrate the syntax that is no longer supported. The example iterates over a list of animals and executes keywords with each animal.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_8\n\nLANGUAGE: RobotFramework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Remote\nDESCRIPTION: This command pushes the created Git tag to the remote repository, making it available to others.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Example Test Case with Teardown Bug\nDESCRIPTION: This Robot Framework test case demonstrates a bug related to `Run Keyword If Test Failed/Passed` and ignored failures.  The test is designed to fail in the teardown, but the ignored error is incorrectly considered a test failure. It uses the `Run Keyword And Ignore Error` keyword to suppress an error and subsequently checks if the test failed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-2.9.1.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    No Operation\n    [Teardown]    Teardown bug\n\n*** Keywords ***\nTeardown bug\n    Run Keyword And Ignore Error\n    ...    Fail    This error should be ignored\n    Run Keyword If Test Failed\n    ...    Fail    Test should have passed\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Robot Framework with pip\nDESCRIPTION: This snippet shows how to install a specific version (3.1rc2) of Robot Framework using pip. This is useful for replicating environments or testing with specific versions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install robotframework==3.1rc2\n```\n\n----------------------------------------\n\nTITLE: Registering Library Itself as Listener\nDESCRIPTION: This snippet showcases how a Robot Framework library can act as its own listener.  The `ROBOT_LIBRARY_LISTENER` attribute is set to `self` within the constructor. Listener methods are prefixed with an underscore to prevent them from being exposed as keywords. The `ROBOT_LISTENER_API_VERSION` specifies the listener interface version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/ListenerInterface.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass LibraryItselfAsListener:\n    ROBOT_LIBRARY_SCOPE = 'SUITE'\n    ROBOT_LISTENER_API_VERSION = 2\n\n    def __init__(self):\n        self.ROBOT_LIBRARY_LISTENER = self\n\n    # Use the '_' prefix to avoid listener method becoming a keyword.\n    def _end_suite(self, name, attrs):\n        print(f\"Suite '{name}' ending with status {attrs['id']}.\")\n\n    def example_keyword(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Deprecated List/Dictionary Item Access\nDESCRIPTION: This shows the deprecated syntax for accessing list and dictionary items using `@{list}[item]` and `&{dict}[item]`. The recommended syntax is `${var}[item]` regardless of whether `${var}` is a list or a dictionary.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_12\n\nLANGUAGE: robotframework\nCODE:\n```\n@{list}[item]\n&{dict}[item]\n```\n\n----------------------------------------\n\nTITLE: Listing Distribution Files\nDESCRIPTION: This command lists the files in the `dist` directory, which contains the created distribution packages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nls -l dist\n```\n\n----------------------------------------\n\nTITLE: ValueError Example: Invalid Type Conversion\nDESCRIPTION: This snippet showcases a ValueError raised when an argument of the wrong type (integer) is passed to a converter expecting a string. It illustrates the error message indicating the type mismatch.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nValueError: Argument 'arg' got value '42' (integer) that cannot be converted to date: TypeError: expected string or bytes-like object\n```\n\n----------------------------------------\n\nTITLE: Python Library Documentation with Robot Format\nDESCRIPTION: This example illustrates how to write documentation for a Python library using Robot Framework's own documentation syntax, which supports formatting, links, and more.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example library in Robot Framework format.\n\n- Formatting with *bold* and _italic_.\n- URLs like http://example.com are turned to links.\n- Custom links like [http://robotframework.org|Robot Framework] are supported.\n- Linking to `My Keyword` works.\n\"\"\"\n\ndef my_keyword():\n    \"\"\"Nothing more to see here.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Resource File Documentation Example\nDESCRIPTION: This example shows how to document a Robot Framework resource file and its keywords using the `Documentation` setting. The first line of the keyword documentation is considered the short documentation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_15\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nDocumentation    Resource file for demo purposes.\n...              This resource is only used in an example and it doesn't do anything useful.\n\n*** Keywords ***\nMy Keyword\n    [Documentation]   Does nothing\n    No Operation\n\nYour Keyword\n    [Arguments]  ${arg}\n    [Documentation]   Takes one argument and *does nothing* with it.\n    ...\n    ...    Examples:\n    ...    | Your Keyword | xxx |\n    ...    | Your Keyword | yyy |\n    No Operation\n```\n\n----------------------------------------\n\nTITLE: Parameterized Generics Support (Initial)\nDESCRIPTION: This enhancement adds initial support for parameterized generics, such as `list[int]`. This allows defining the type of elements within collections, improving type safety and code readability.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Support for non-English Given/When/Then prefixes\nDESCRIPTION: This enhancement allows the use of Given/When/Then prefixes in languages other than English, enabling tests to be written in different languages.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Old For Loop Syntax Example (Deprecated)\nDESCRIPTION: This code illustrates the old FOR loop syntax that is deprecated in Robot Framework 3.2 and will be removed in version 3.3. It uses `:FOR` to start the loop and requires escaping all keywords within the loop with a backslash. The loops lack an explicit `END` marker.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b2.rst#_snippet_7\n\nLANGUAGE: Robot Framework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Python Library TOC generation\nDESCRIPTION: This example showcases how to use the %TOC% marker to automatically generate a table of contents in the library documentation, based on the top-level section titles.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example library demonstrating TOC generation.\n\nThe %TOC% marker only creates the actual table of contents and possible\nheader or other explanation needs to be added separately like done below.\n\n== Table of contents ==\n\n%TOC%\n\n= Section title =\n\nThe top-level section titles are automatically added to the TOC.\n\n= Second section =\n\n== Sub section ==\n\nSub section titles are not added to the TOC.\n\"\"\"\n\ndef my_keyword():\n    \"\"\"Nothing more to see here.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Old FOR Loop Style (Deprecated)\nDESCRIPTION: Demonstrates the old-style FOR loop syntax, which is deprecated in Robot Framework 3.2, especially when using the pipe-separated format. This syntax is no longer supported.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc2.rst#_snippet_8\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| :FOR | ${x} | IN | 1 | 2\n|      | Log  | ${x}\n```\n\n----------------------------------------\n\nTITLE: Deprecated FOR Loop Syntax\nDESCRIPTION: Illustrates the old FOR loop syntax that is no longer supported in Robot Framework 4.0. The example shows how loops were written prior to Robot Framework 3.1, using the `:FOR` keyword and backslash for continuation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework via pip\nDESCRIPTION: This command installs or upgrades Robot Framework to the latest version using pip, the Python package installer. It ensures that you have the most recent features and bug fixes.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Old FOR Loop Syntax Example (Deprecated)\nDESCRIPTION: This code snippet demonstrates the old `:FOR` loop syntax that was supported in Robot Framework versions prior to 3.1 and deprecated in 3.2. It is no longer supported in Robot Framework 4.0. The code shows how to iterate through a list of animals and execute keywords within the loop.  This syntax used backslashes for continuation.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0rc1.rst#_snippet_7\n\nLANGUAGE: Robot Framework\nCODE:\n```\n:FOR    ${animal}    IN    cat    dog    cow\n\\    Keyword    ${animal}\n\\    Another keyword\n```\n\n----------------------------------------\n\nTITLE: Accessing List Items Old Syntax\nDESCRIPTION: This snippet shows the old, deprecated syntax for accessing list items in Robot Framework using `@{var}[item]`.  This syntax is variable type-specific and is being replaced by the more general `${var}[item]` syntax, which works for both lists and dictionaries.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2b1.rst#_snippet_6\n\nLANGUAGE: RobotFramework\nCODE:\n```\n@\\{list\\}[item]\n```\n\n----------------------------------------\n\nTITLE: Setting Version in Python Files\nDESCRIPTION: This command sets the version information in the `src/robot/version.py` and `setup.py` files using the `invoke set-version` task.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke set-version $VERSION\n```\n\n----------------------------------------\n\nTITLE: Custom Date Parser Python\nDESCRIPTION: This Python code defines a function `parse_fi_date` that parses dates in the Finnish `dd.mm.yyyy` format and converts them to `datetime.date` objects. This is used for custom argument conversion in Robot Framework.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n\n# Converter function.\ndef parse_fi_date(value):\n    day, month, year = value.split('.')\n    return date(int(year), int(month), int(day))\n```\n\n----------------------------------------\n\nTITLE: Iterating Multiple Dictionaries with FOR Loops in Robot Framework\nDESCRIPTION: This snippet demonstrates iterating through multiple dictionaries and adding new key-value pairs within a FOR loop in Robot Framework. The example highlights how the last value is used if the same key appears multiple times.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2rc1.rst#_snippet_5\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${key}    ${value}    IN    &{first}    &{second}    one=more\n    Log    Key is '${key}' and value is '${value}'.\nEND\n```\n\n----------------------------------------\n\nTITLE: Test Library Initialization with Argument\nDESCRIPTION: This code snippet illustrates how to document the `__init__` method of a test library, which is used to generate the 'Importing' section in the documentation. The documentation and arguments of the `__init__` method are displayed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/SupportingTools/Libdoc.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass TestLibrary:\n\n    def __init__(self, mode='default')\n        \"\"\"Creates new TestLibrary. `mode` argument is used to determine mode.\"\"\"\n        self.mode = mode\n\n    def some_keyword(self, arg):\n        \"\"\"Does something based on given `arg`.\n\n        What is done depends on the `mode` specified when `importing` the library.\n        \"\"\"\n        if self.mode == 'secret':\n             # ...\n```\n\n----------------------------------------\n\nTITLE: Old-Style FOR Loop Example in Robot Framework (Deprecated)\nDESCRIPTION: Shows an example of the old-style FOR loop syntax in Robot Framework, which is deprecated in RF 3.2, especially when using the pipe-separated format.  This example is not supported anymore.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2.rst#_snippet_5\n\nLANGUAGE: Robot Framework\nCODE:\n```\n| :FOR | ${x} | IN | 1 | 2\n|      | Log  | ${x}\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Robot Framework Version with pip\nDESCRIPTION: This snippet demonstrates how to install a specific version of Robot Framework using pip. Specifying the version ensures that the correct version is installed.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.0.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install robotframework==6.0\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Robot Framework Version\nDESCRIPTION: This snippet demonstrates installing a specific version of Robot Framework (6.1.1) using pip. This ensures the project uses a consistent and tested version.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.1.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==6.1.1\n```\n\n----------------------------------------\n\nTITLE: Deprecated List/Dictionary Access Robot Framework\nDESCRIPTION: Shows the deprecated syntax for accessing list and dictionary items in Robot Framework using `@{var}[item]` and `&{var}[item]`. This syntax is being replaced by the more generic `${var}[item]` which works regardless of whether `${var}` is a list or dictionary.  This example demonstrates the syntax that will trigger deprecation warnings.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.2a1.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n@{list}[item]\n&{dict}[item]\n```\n\n----------------------------------------\n\nTITLE: IF/ELSE IF Example in Robot Framework\nDESCRIPTION: This Robot Framework test case demonstrates the usage of IF, ELSE IF, and ELSE statements. It checks the value of the `${direction}` variable and executes different `Log` keywords based on its value.  If none of the conditions are met, the `Fail` keyword is executed.  The `${direction}` variable is quoted, or could alternatively be used in the `$direction` format.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    IF    \"${direction}\" == \"STRAIGHT\"\n        Log    Going straight\n    ELSE IF    \"${direction}\" == \"LEFT\"\n        Log    Turning left\n    ELSE IF    \"${direction}\" == \"RIGHT\"\n        Log    Turning right\n    ELSE\n        Fail    Unrecognized direction: ${direction}\n    END\n```\n\n----------------------------------------\n\nTITLE: List Expansion with Item Access (Old Method) Robot Framework\nDESCRIPTION: This example demonstrates the older, pre-Robot Framework 4.0, method of accessing a list within a dictionary for use in a FOR loop. This method requires first setting the list value into a variable and then looping over that variable, which is less concise than the new method. This method is no longer recommended.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_7\n\nLANGUAGE: robotframework\nCODE:\n```\n@{items} =    Set Variable    ${var}[items]\nFOR    ${item}    IN    @{items}\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Example Robot Framework Task Definition\nDESCRIPTION: This Robot Framework snippet demonstrates the usage of the `*** Tasks ***` header to define tasks instead of test cases, enabling Robotic Process Automation (RPA) mode.  This is an alternative to using the `--rpa` command-line option.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc2.rst#_snippet_2\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Tasks ***\nExample\n    Log    Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Loop Control Keywords Usage (Robot Framework)\nDESCRIPTION: This Robot Framework code snippet demonstrates the (now disallowed) usage of `Exit For Loop` inside a keyword called from a loop.  Robot Framework 5.0 and later restrict loop control keywords to be used directly inside `FOR` loops. It is an example of a backwards incompatible change.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0a1.rst#_snippet_25\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Keywords ***\nLooping\n    FOR    ${x}    IN    @{stuff}\n        Keyword\n    END\n\nKeyword\n    Exit For Loop\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 4.0 beta 3 with pip\nDESCRIPTION: This command installs the latest available release of Robot Framework using pip. The `--pre` flag allows installing pre-release versions, and `--upgrade` ensures that the existing installation is updated.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0b3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --upgrade robotframework\n```\n\n----------------------------------------\n\nTITLE: Robot Framework List Expansion Example\nDESCRIPTION: This Robot Framework example demonstrates how to iterate over a list obtained from a dictionary using the `@{var}[item]` syntax. It first accesses the list 'items' from the dictionary `${var}`, then iterates and logs each item.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-4.0a3.rst#_snippet_3\n\nLANGUAGE: robotframework\nCODE:\n```\nFOR    ${item}    IN    @{var}[items]\n    Log    ${item}\nEND\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Boolean False Examples\nDESCRIPTION: Demonstrates examples of Robot Framework keywords where the 'values' argument is treated as false. Specifically, the strings 'False', 'no', empty string, and Python's `False` are considered false. An example of a special false string specific to a keyword is also included.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/Appendices/BooleanArguments.rst#_snippet_1\n\nLANGUAGE: robotframework\nCODE:\n```\nFalse examples\n    Should Be Equal    ${x}    ${y}    Custom error    values=False        # String `false` is false.\n    Should Be Equal    ${x}    ${y}    Custom error    values=no           # Also string `no` is false.\n    Should Be Equal    ${x}    ${y}    Custom error    values=${EMPTY}     # Empty string is false.\n    Should Be Equal    ${x}    ${y}    Custom error    values=${FALSE}     # Python `False` is false.\n    Should Be Equal    ${x}    ${y}    Custom error    values=no values    # Special false string with this keyword.\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework from local file with pip\nDESCRIPTION: This command is used to install Robot Framework from a local tar.gz file using pip. This method is useful when you have downloaded the source distribution and want to install it without an internet connection.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0a1.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npip install robotframework-3.0a1.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework 7.1rc2 with pip\nDESCRIPTION: This command installs the Robot Framework 7.1 release candidate 2 using the pip package manager. It specifies the exact version to install, ensuring consistency across different environments.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-7.1rc2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install robotframework==7.1rc2\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: This command installs the necessary Python dependencies for release automation using pip, based on the `requirements-dev.txt` file.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Committing Version Changes\nDESCRIPTION: This command commits the changes to the version files with a descriptive message.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/BUILD.rst#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Updated version to $VERSION\" src/robot/version.py setup.py\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Test Case Example\nDESCRIPTION: This snippet demonstrates how to define test cases in Robot Framework using different date formats. It shows the need for custom type conversion to handle various date formats.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-5.0b1.rst#_snippet_20\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Finnish     25.1.2022\n    US          1/25/2022\n    ISO 8601    2022-01-22\n```\n\n----------------------------------------\n\nTITLE: Adjusting Suite Source - Python\nDESCRIPTION: This snippet demonstrates how to adjust the suite source to be relative before converting to JSON and then adjust it back to an absolute path after recreating the suite.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/TestDataSyntax.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom robot.running import TestSuite\n\n\n# Create a suite, adjust source and convert to JSON.\nsuite = TestSuite.from_file_system('/path/to/data')\nsuite.adjust_source(relative_to='/path/to')\nsuite.to_json('data.rbt')\n\n# Recreate suite elsewhere and adjust source accordingly.\nsuite = TestSuite.from_json('data.rbt')\nsuite.adjust_source(root='/new/path/to')\n```\n\n----------------------------------------\n\nTITLE: Selecting Variables to Include with __all__ (Python)\nDESCRIPTION: Shows how to use the `__all__` attribute to specify which attributes in a variable file should be treated as variables, providing a way to explicitly define the exported variables.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/CreatingTestData/ResourceAndVariableFiles.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\n__all__ = ['AREA1', 'AREA2']\n\ndef get_area(diameter):\n    radius = diameter / 2.0\n    area = math.pi * radius * radius\n    return area\n\nAREA1 = get_area(1)\nAREA2 = get_area(2)\n```\n\n----------------------------------------\n\nTITLE: Original Keyword Structure Example in XML\nDESCRIPTION: This XML snippet shows the original structure of a keyword in the output.xml file *before* using the `robot:flatten` tag or the `--flattenkeywords` option. Note the nested `kw` elements representing the individual `Log` calls within the `Example` keyword.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1rc1.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<kw name=\"Example\">\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Robot</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Robot</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.663\"/>\n  </kw>\n  <kw name=\"Log\" library=\"BuiltIn\">\n    <arg>Framework</arg>\n    <doc>Logs the given message with the given level.</doc>\n    <msg timestamp=\"20230103 20:06:36.663\" level=\"INFO\">Framework</msg>\n    <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n  </kw>\n  <status status=\"PASS\" starttime=\"20230103 20:06:36.663\" endtime=\"20230103 20:06:36.664\"/>\n</kw>\n```\n\n----------------------------------------\n\nTITLE: TestSuite Defaults Initialization Python\nDESCRIPTION: This snippet shows how to create a dummy test suite and set default tags, setup, and metadata using the `TestSuite` class in Robot Framework. It's typically used when parsing initialization files with supported extensions.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-6.1.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndefaults.tags = ('tags', 'from init')\ndefaults.setup = {'name': 'Log', 'args': ['Hello from init!']}\nreturn TestSuite(TestSuite.name_from_source(source.parent), doc='Example',\n                         source=source, metadata={'Example': 'Value'})\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Square Brackets - Robot Framework\nDESCRIPTION: Robot Framework 3.1 introduces support for using `[chars]` as a pattern matching any character inside the brackets in glob-like patterns. This change affects existing patterns that use square brackets as literal characters, requiring them to be escaped or replaced with a question mark (`?`). Additionally, a bug related to trailing newlines in matched strings has been fixed, making pattern matching more strict.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1rc1.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Console Output Control Examples\nDESCRIPTION: Examples of using console output control options.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/ConfiguringExecution.rst#_snippet_17\n\nLANGUAGE: RobotFramework\nCODE:\n```\nrobot --console quiet tests.robot\nrobot --dotted tests.robot\n```\n\n----------------------------------------\n\nTITLE: Example test case using automatic argument conversion\nDESCRIPTION: This robotframework snippet shows how to define test cases which use the automatic argument conversion feature of Robot Framework 3.1. The values 42 and False will be automatically converted to an integer and a boolean respectively before being passed to `Example Keyword`.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.1b1.rst#_snippet_10\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Test Cases ***\nExample\n    Example Keyword    42    False\n```\n\n----------------------------------------\n\nTITLE: Python: Timeout Handling with try/finally\nDESCRIPTION: This Python code demonstrates how to use `try/finally` to ensure cleanup activities are always executed, even if a `TimeoutExceeded` exception occurs during keyword execution. The `do_cleanup` function will always be called.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExtendingRobotFramework/CreatingTestLibraries.rst#_snippet_104\n\nLANGUAGE: python\nCODE:\n```\ndef example():\n    try:\n        do_something()\n    finally:\n        do_cleanup()\n```\n\n----------------------------------------\n\nTITLE: Installing Robot Framework from Source\nDESCRIPTION: These commands describe how to install Robot Framework from a source distribution downloaded from PyPI.  It involves extracting the archive and running the setup script with Python.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-3.0.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Using JSON Output with Rebot\nDESCRIPTION: Demonstrates how to use JSON output files as input to Rebot for creating reports and logs.  Also shows examples of combining and merging XML and JSON output files.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/doc/userguide/src/ExecutingTestCases/PostProcessing.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nrebot output.json\nrebot output1.json output2.json\nrebot output1.xml output2.json\nrebot --merge original.xml rerun.json\n```\n\n----------------------------------------\n\nTITLE: Robot Framework Settings Definition\nDESCRIPTION: This snippet defines settings for a Robot Framework test suite. It includes documentation for the root suite, metadata, a suite setup that logs 'Rock on', and a suite teardown that fails.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/utest/resources/golden_suite/__init__.txt#_snippet_0\n\nLANGUAGE: Robot Framework\nCODE:\n```\n*** Settings ***\ndocumentation\troot docs \\nwith new line, several spaces \" \\ \\ \\ \" and a <b>bold tag</b>.\nmetadata\t\troot\trocks\nsuite setup\t\tLog\t\tRock on\nSuite teardown\t\tFail\n```\n\n----------------------------------------\n\nTITLE: Defining Settings and Variables in Robot Framework\nDESCRIPTION: This snippet defines Robot Framework settings including Resource and Invalid Resource, along with a variable named rest_resource_var. The Resource setting imports 'rest_directive_resource2.rest' and 'Setting' for Invalid Resource. The variable is assigned the value 'ReST Resource Variable'.\nSOURCE: https://github.com/robotframework/robotframework/blob/master/atest/testdata/parsing/data_formats/resources/rest_directive_resource.rst#_snippet_0\n\nLANGUAGE: robotframework\nCODE:\n```\n*** Settings ***\nResource                rest_directive_resource2.rest\nInvalid Resource        Setting\n\n*** Variables ***\n${rest_resource_var}    ReST Resource Variable\n```"
  }
]