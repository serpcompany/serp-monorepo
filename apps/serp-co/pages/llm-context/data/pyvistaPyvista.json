[
  {
    "owner": "pyvista",
    "repo": "pyvista",
    "content": "TITLE: Installing PyVista with pip\nDESCRIPTION: Command to install PyVista using pip package manager. The basic command installs the core package while the second command with [all] flag installs PyVista with all optional dependencies.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyvista\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install pyvista[all]\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Cloud Mesh in PyVista\nDESCRIPTION: Creates a random point cloud using NumPy and displays it as a PyVista PolyData mesh. The example shows how to generate random 3D points and visualize them as a point cloud.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pyvista as pv\n\nrng = np.random.default_rng(seed=0)\npoints = rng.random((100, 3))\nmesh = pv.PolyData(points)\nmesh.plot(point_size=10, style='points')\n```\n\n----------------------------------------\n\nTITLE: Testing PyVista Installation with Demo\nDESCRIPTION: Python code snippet to verify PyVista installation by running a demo visualization. This showcases the wave plot demo that is included with PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import demos\n>>> demos.plot_wave()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Surface Elevation Map with PyVista\nDESCRIPTION: This code downloads a digital elevation model of Mount St. Helens, warps it by elevation values, extracts the surface, triangulates it, decimates the mesh to reduce density, and plots it with an earth-colored map.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import examples\nmesh = examples.download_st_helens()\nwarped = mesh.warp_by_scalar('Elevation')\nsurf = warped.extract_surface().triangulate()\nsurf = surf.decimate_pro(0.75)  # reduce the density of the mesh by 75%\nsurf.plot(cmap='gist_earth')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Points and Edges in a Triangulated Surface Mesh\nDESCRIPTION: Displays the Stanford bunny mesh with both edges and points visible. This demonstrates how a triangulated surface mesh is composed of points connected by edges to form triangular cells.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmesh = examples.download_bunny_coarse()\n\npl = pv.Plotter()\npl.add_mesh(mesh, show_edges=True, color='white')\npl.add_points(mesh.points, color='red',\n              point_size=2)\npl.camera_position = [(0.02, 0.30, 0.73),\n                      (0.02, 0.03, -0.022),\n                      (-0.03, 0.94, -0.34)]\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Downloading and Visualizing a Stanford Dragon Mesh with PyVista\nDESCRIPTION: Downloads the Stanford dragon mesh, adds scalar values based on the y-coordinate of each point, and plots the mesh with specific camera position and color mapping parameters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> mesh = examples.download_dragon()\n>>> mesh['scalars'] = mesh.points[:, 1]\n>>> mesh.plot(cpos='xy', cmap='plasma')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Triangle Mesh in PyVista\nDESCRIPTION: This snippet demonstrates how to create a simple triangle mesh using PyVista by defining points and cells. It shows the basic structure of a PolyData object.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> cells = [3, 0, 1, 2]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh = pyvista.PolyData(points, cells)\n>>> mesh\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh = pyvista.PolyData(points, [3, 0, 1, 2])\n>>> mesh.plot(cpos='xy', show_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Performing Boolean Operations on 3D Meshes with PyVista\nDESCRIPTION: This code demonstrates Boolean operations by creating a cube and a sphere, then subtracting the sphere from the cube using boolean_difference(). The resulting mesh is plotted with enhanced visualization options like smooth shading and edge splitting.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nimport numpy as np\n\ndef make_cube():\n    x = np.linspace(-0.5, 0.5, 25)\n    grid = pyvista.StructuredGrid(*np.meshgrid(x, x, x))\n    surf = grid.extract_surface().triangulate().flip_faces()\n    return surf\n\n# Create example PolyData meshes for boolean operations\nsphere = pyvista.Sphere(radius=0.65, center=(0, 0, 0))\ncube = make_cube()\n\n# Perform a boolean difference\nboolean = cube.boolean_difference(sphere)\nboolean.plot(color='darkgrey', smooth_shading=True, split_sharp_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Highlighting a Single Cell in a Mesh\nDESCRIPTION: Extracts and highlights a single cell (voxel) from a hexahedral beam mesh. This example demonstrates what a cell is - the volumetric region defined by a set of connected points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmesh = examples.load_hexbeam()\n\npl = pv.Plotter()\npl.add_mesh(mesh, show_edges=True, color='white')\npl.add_points(mesh.points, color='red', point_size=20)\n\nsingle_cell = mesh.extract_cells(mesh.n_cells - 1)\npl.add_mesh(single_cell, color='pink', edge_color='blue',\n            line_width=5, show_edges=True)\n\npl.camera_position = [(6.20, 3.00, 7.50),\n                      (0.16, 0.13, 2.65),\n                      (-0.28, 0.94, -0.21)]\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Plotting with PyVista in Python\nDESCRIPTION: Shows how to create a basic plot of a PyVista mesh object using the plot() method.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\n\nmesh = examples.load_airplane()\nmesh.plot()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Volumetric Hydrogen Orbital Data with PyVista\nDESCRIPTION: This example loads a pre-computed dataset representing a hydrogen orbital (3d_xy) and creates a volume rendering with custom opacity mapping and a magma color map. This visualization shows the probability distribution of an electron in a hydrogen atom.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import examples\ngrid = examples.load_hydrogen_orbital(3, 2, -2)\ngrid.plot(volume=True, opacity=[1, 0, 1], cmap='magma')\n```\n\n----------------------------------------\n\nTITLE: Plotting Finite Element Analysis Results with PyVista\nDESCRIPTION: This snippet loads a 3D notch specimen dataset with stress analysis results and visualizes the X component of elastic stress using a color map. The 'cpos' parameter sets the camera position to an XY view.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import examples\nmesh = examples.download_notch_stress()\nmesh.plot(scalars='Nodal Stress', component=0, cmap='turbo', cpos='xy')\n```\n\n----------------------------------------\n\nTITLE: Animating Beam Deformation in PyVista (Python)\nDESCRIPTION: This snippet loads a hexagonal beam example, applies fictitious displacements, and creates an animated GIF showing the beam's deformation over time. It demonstrates PyVista's ability to handle dynamic mesh deformation and create animations.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\nimport numpy as np\n\ngrid = pv.UnstructuredGrid(examples.hexbeamfile)\n\nd = np.zeros_like(grid.points)\nd[:, 1] = grid.points[:, 2]**3/250\ngrid['Y Displacement'] = d[:, 1]\n\ncpos = [(11.915, 6.114, 3.612),\n        (0.0, 0.375, 2.0),\n        (-0.425, 0.902, -0.0679)]\n\nplotter = pv.Plotter(window_size=(800, 600))\nplotter.add_mesh(grid, scalars='Y Displacement',\n                 show_edges=True, rng=[-d.max(), d.max()],\n                 interpolate_before_map=True)\nplotter.add_axes()\nplotter.camera_position = cpos\n\nplotter.open_gif('beam.gif')  # or beam.mp4\n\npts = grid.points.copy()\nfor phase in np.linspace(0, 2*np.pi, 20):\n    grid.points = pts + d * np.cos(phase)\n    grid['Y Displacement'] = d[:, 1] * np.cos(phase)\n    plotter.write_frame()\n\nplotter.close()\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting a Simple Point Cloud in PyVista\nDESCRIPTION: Complete example showing how to create a simple point mesh from a list of coordinates and plot it using PyVista's plotting capabilities with customized visualization parameters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> points = [[0, 0, 0], [1, 0, 0], [0.5, 0.667, 0]]\n>>> mesh = pyvista.PolyData(points)\n>>> mesh.plot(show_bounds=True, cpos='xy', point_size=20)\n```\n\n----------------------------------------\n\nTITLE: Creating and Visualizing Point Clouds with PyVista and NumPy\nDESCRIPTION: This code generates a random point cloud using NumPy, converts it to a PyVista PolyData object, assigns scalar values, and creates a glyph representation using small spheres. The resulting point cloud is visualized with a red color map.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pyvista\n\nrng = np.random.default_rng(seed=0)\npoint_cloud = rng.random((100, 3))\npdata = pyvista.PolyData(point_cloud)\npdata['orig_sphere'] = np.arange(100)\n\n# create many spheres from the point cloud\nsphere = pyvista.Sphere(radius=0.02, phi_resolution=10, theta_resolution=10)\npc = pdata.glyph(scale=False, geom=sphere, orient=False)\npc.plot(cmap='Reds')\n```\n\n----------------------------------------\n\nTITLE: Time Series Data Plotting - Python/PyVista\nDESCRIPTION: Shows how to create animated visualizations with time-varying data using threading. Creates an interactive globe visualization with dynamic updates.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/plotting.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Thread\nimport time\nimport numpy as np\nimport pyvista as pv\nimport pyvistaqt as pvqt\nfrom pyvista import examples\n\nglobe = examples.load_globe()\ntexture = examples.load_globe_texture()\nglobe.point_data['scalars'] = np.random.rand(globe.n_points)\nglobe.set_active_scalars('scalars')\n\nplotter = pvqt.BackgroundPlotter()\nplotter.add_mesh(\n    globe,\n    lighting=False,\n    show_edges=True,\n    texture=texture,\n    scalars='scalars',\n)\nplotter.view_isometric()\n\ndef shrink():\n    for i in range(50):\n        globe.points *= 0.95\n        # Update scalars\n        globe.point_data['scalars'] = np.random.rand(globe.n_points)\n        time.sleep(0.5)\n\nthread = Thread(target=shrink)\nthread.start()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PyVista Core API with Sphere Mesh and Slicing\nDESCRIPTION: Creates a spherical mesh using PyVista and applies a slice filter to it, then accesses the length property of the resulting slice. This demonstrates PyVista's mesh creation and filtering capabilities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista as pv\n>>> mesh = pv.Sphere()\n>>> sliced = mesh.slice()\n>>> sliced.length\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting UnstructuredGrid in PyVista\nDESCRIPTION: This example loads an UnstructuredGrid from a VTK file, applies fictitious displacements, and creates a plot. It demonstrates loading, data manipulation, and visualization of UnstructuredGrid objects.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Load module and example file\nimport pyvista as pv\nfrom pyvista import examples\nimport numpy as np\n\n# Load example beam grid\ngrid = pv.UnstructuredGrid(examples.hexbeamfile)\n\n# Create fictitious displacements as a function of Z location\nd = np.zeros_like(grid.points)\nd[:, 1] = grid.points[:, 2]**3/250\n\n# Displace original grid\ngrid.points += d\n\n# Camera position.\n# it's hard-coded in this example\ncpos = [(11.9151, 6.1139, 3.61249),\n        (0.0, 0.375, 2.0),\n        (-0.4254, 0.9024, -0.0678)]\n\ngrid.plot(scalars=d[:, 1], scalar_bar_args={'title': 'Y Displacement'}, cpos=cpos)\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting STL with PyVista\nDESCRIPTION: Simplified PyVista approach for reading and displaying an STL file. Shows how PyVista reduces boilerplate code while maintaining functionality.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/why.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nmesh = pyvista.read('bunny.stl')\nmesh.plot()\n```\n\n----------------------------------------\n\nTITLE: Using PyVista's Plotting API with Cube Mesh\nDESCRIPTION: Creates a cube mesh and visualizes it in a PyVista Plotter with scalar coloring based on point coordinates. The example shows how to create and customize a mesh actor with the plotting interface.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista as pv\n>>> mesh = pv.Cube()\n>>> pl = pv.Plotter()\n>>> actor = pl.add_mesh(mesh, scalars=mesh.points)\n>>> actor.prop\n```\n\n----------------------------------------\n\nTITLE: Basic PyVista Trame Plotting in Jupyter\nDESCRIPTION: Demonstrates how to use the Trame backend to display an interactive PyVista plot in a Jupyter notebook. Includes both a short and long syntax example.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\nsphere = pv.Sphere()\n\n# short example\nsphere.plot(jupyter_backend='trame')\n\n# long example\nplotter = pv.Plotter(notebook=True)\nplotter.add_mesh(sphere)\nplotter.show(jupyter_backend='trame')\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Multiple PyVista Objects in Python\nDESCRIPTION: This snippet demonstrates how to create multiple PyVista objects (a sphere and a cube) and plot them together. It showcases PyVista's ability to handle multiple geometries in a single visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Google/vocab.txt#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsphere = pv.Sphere()\ncube = pv.Cube()\n\np = pv.Plotter()\np.add_mesh(sphere, color='red')\np.add_mesh(cube, color='blue')\np.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Mesh Collision Detection and Visualization with PyVista\nDESCRIPTION: This snippet demonstrates how to perform collision detection between two meshes using PyVista's collision method and visualize the results. It uses the generate_scalars option and sets the contact_mode to 2.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nout, n_coll = mesh_a.collision(mesh_b, generate_scalars=True, contact_mode=2)\n\npl = pyvista.Plotter()\npl.add_mesh(out)\npl.add_mesh(mesh_b, style='wireframe', color='k')\npl.camera_position = 'xy'\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Adding and Visualizing Cell Data on a Mesh\nDESCRIPTION: Adds an array of values to the cell_data dictionary of a mesh and visualizes it. This shows how cell data assigns a single value to each cell of the mesh.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmesh.cell_data['my cell values'] = np.arange(mesh.n_cells)\nmesh.plot(scalars='my cell values', cpos=cpos, show_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Frustum Visualization in PyVista\nDESCRIPTION: Creates a 3D visualization showing a camera frustum, bunny model, and camera positioning. Demonstrates camera clipping range, direction vectors, and view frustum rendering with labeled points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/camera.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nimport numpy as np\nimport vtk\nfrom pyvista import examples\n\npv.set_plot_theme(\"document\")\n\ncamera = pv.Camera()\nnear_range = 0.3\nfar_range = 0.8\ncamera.clipping_range = (near_range, far_range)\nunit_vector = np.array(camera.direction) / np.linalg.norm(\n    np.array([camera.focal_point]) - np.array([camera.position])\n)\n\nfrustum = camera.view_frustum(1.0)\n\nposition = camera.position\nfocal_point = camera.focal_point\nline = pv.Line(position, focal_point)\n\nbunny = examples.download_bunny()\nxyz = camera.position + unit_vector * 0.6 - np.mean(bunny.points, axis=0)\nbunny.translate(xyz, inplace=True)\n\npl = pv.Plotter(shape=(2, 1))\npl.subplot(0, 0)\npl.add_text(\"Camera Position\")\npl.add_mesh(bunny)\npl.add_mesh(frustum, style=\"wireframe\")\npl.add_mesh(bunny)\npl.add_mesh(line, color=\"b\")\npl.add_point_labels(\n    [\n        position,\n        camera.position + unit_vector * near_range,\n        camera.position + unit_vector * far_range,\n        focal_point,\n    ],\n    [\"Camera Position\", \"Near Clipping Plane\", \"Far Clipping Plane\", \"Focal Point\"],\n    margin=0,\n    fill_shape=False,\n    font_size=14,\n    shape_color=\"white\",\n    point_color=\"red\",\n    text_color=\"black\",\n)\npl.camera.position = (1.1, 1.5, 0.0)\npl.camera.focal_point = (0.2, 0.3, 0.3)\npl.camera.up = (0.0, 1.0, 0.0)\npl.camera.zoom(1.4)\n\npl.subplot(1, 0)\npl.add_text(\"Camera View\")\npl.add_mesh(bunny)\npl.camera = camera\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Advanced Plotting with PyVista Plotter in Python\nDESCRIPTION: Demonstrates how to use PyVista's Plotter class for more control over the visualization, including adding a mesh and adjusting the camera.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmesh = examples.load_airplane()\n\nplotter = pv.Plotter()    # instantiate the plotter\nplotter.add_mesh(mesh)    # add a mesh to the scene\nplotter.camera.zoom(2)    # Note how we can now access underlying attributes\nplotter.show()            # show the rendering window\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista with Conda\nDESCRIPTION: Command to install PyVista using the Conda package manager from the conda-forge channel.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pyvista\n```\n\n----------------------------------------\n\nTITLE: Manipulating Mesh Data in PyVista with Python\nDESCRIPTION: Demonstrates how to access and modify point and cell data arrays in a PyVista mesh object, including adding new arrays.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh = examples.load_uniform()\n\nFetch a data array from the point data dictionary\n\n>>> arr = mesh.point_data['Spatial Point Data']\n\nAssign a new array to the cell data:\n\n>>> mesh.cell_data['foo'] = np.random.rand(mesh.n_cells)\n\nDon't remember if your array is point or cell data? You can\ndirectly query the mesh object and access the array from the\ndataset.\n\n>>> foo = mesh['foo']\n>>> isinstance(foo, np.ndarray)\nTrue\n\nOr maybe you just want to add an array where it fits.\n\n>>> mesh['new-array'] = np.random.rand(mesh.n_points)\n```\n\n----------------------------------------\n\nTITLE: Manipulating and Plotting Multiple Meshes in PyVista\nDESCRIPTION: This snippet loads two meshes, manipulates them by scaling, rotating, and translating, then plots them together using a PyVista Plotter object. It demonstrates mesh manipulation and multi-mesh plotting.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import examples\n\n# load and shrink airplane\nairplane = pyvista.PolyData(examples.planefile)\nairplane.points /= 10 # shrink by 10x\n\n# rotate and translate ant so it is on the plane\nant = pyvista.PolyData(examples.antfile)\nant.rotate_x(90, inplace=True)\nant.translate([90, 60, 15], inplace=True)\n\n# Make a copy and add another ant\nant_copy = ant.copy()\nant_copy.translate([30, 0, -10], inplace=True)\n\n# Create plotter object\nplotter = pyvista.Plotter()\nplotter.add_mesh(ant, 'r')\nplotter.add_mesh(ant_copy, 'b')\n\n# Add airplane mesh and make the color equal to the Y position. Add a\n# scalar bar associated with this mesh\nplane_scalars = airplane.points[:, 1]\nplotter.add_mesh(airplane, scalars=plane_scalars,\n                 scalar_bar_args={'title': 'Airplane Y\\nLocation'})\n\n# Add annotation text\nplotter.add_text('Ants and Plane Example')\nplotter.show()\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting 3D Splines with PyVista\nDESCRIPTION: This snippet creates a 3D spiral using parametric equations with NumPy, generates a PyVista Spline from the points, converts it to a tube with specified radius, and plots it using arc length as a scalar for coloring.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pyvista\n\n# Make the xyz points\ntheta = np.linspace(-10 * np.pi, 10 * np.pi, 100)\nz = np.linspace(-2, 2, 100)\nr = z**2 + 1\nx = r * np.sin(theta)\ny = r * np.cos(theta)\npoints = np.column_stack((x, y, z))\n\nspline = pyvista.Spline(points, 500).tube(radius=0.1)\nspline.plot(scalars='arc_length', show_scalar_bar=False)\n```\n\n----------------------------------------\n\nTITLE: Interactive Plotting with Anti-aliasing - Python/PyVista\nDESCRIPTION: Creates an enhanced plot with anti-aliasing, custom window size, and styling options. Demonstrates more advanced plotting features.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/plotting.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplotter = pv.Plotter(window_size=(600, 400))\nplotter.background_color = 'w'\nplotter.enable_anti_aliasing()\nplotter.add_mesh(sphere, color='lightblue', show_edges=True)\nplotter.show(jupyter_backend='static')\n```\n\n----------------------------------------\n\nTITLE: Creating ImageData with PyVista\nDESCRIPTION: This snippet shows how to create an equivalent ImageData object using PyVista. It uses numpy to generate the grid and values, then creates the ImageData object in a more concise manner.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> import numpy as np\n\n# Use the meshgrid function to create 2D \"grids\" of the x and y values.\n# This section effectively replaces the vtkDoubleArray.\n\n>>> xi = np.arange(300)\n>>> x, y = np.meshgrid(xi, xi)\n>>> values = 127.5 + (1.0 + np.sin(x / 25.0) * np.cos(y / 25.0))\n\n# Create the grid. Note how the values must use Fortran ordering.\n\n>>> grid = pyvista.ImageData(dimensions=(300, 300, 1))\n>>> grid.point_data[\"values\"] = values.flatten(order=\"F\")\n```\n\n----------------------------------------\n\nTITLE: Projecting Random Hills to Finite Plane using PyVista and KDTree\nDESCRIPTION: This example expands on the vectorized ray tracing by projecting the load_random_hills() example data to a triangular plane. It uses PyVista for 3D visualization, pykdtree for efficient nearest neighbor search, and numpy for numerical operations. The script creates a triangular plane, performs ray tracing, and visualizes the projected data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/optional_features.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pykdtree.kdtree import KDTree\nfrom tqdm import tqdm\n\nimport pyvista as pv\nfrom pyvista import examples\n\n# Load data\ndata = examples.load_random_hills()\ndata.translate((10, 10, 10), inplace=True)\n\n# Create triangular plane (vertices [10, 0, 0], [0, 10, 0], [0, 0, 10])\nsize = 10\nvertices = np.array([[size, 0, 0], [0, size, 0], [0, 0, size]])\nface = np.array([3, 0, 1, 2])\n\nplanes = pv.PolyData(vertices, face)\n\n# Subdivide plane so we have multiple points to project to\nplanes = planes.subdivide(8)\n\n# Get origins and normals\norigins = planes.cell_centers().points\nnormals = planes.compute_normals(\n    cell_normals=True, point_normals=False\n)[\"Normals\"]\n\n# Vectorized Ray trace\npoints, pt_inds, cell_inds = data.multi_ray_trace(\n    origins, normals\n)  # Must have rtree, trimesh, and pyembree installed\n\n# Filter based on distance threshold, if desired (mimics VTK ray_trace behavior)\n# threshold = 10  # Some threshold distance\n# distances = np.linalg.norm(origins[inds] - points, ord=2, axis=1)\n# inds = inds[distances <= threshold]\n\ntree = KDTree(data.points.astype(np.double))\n_, data_inds = tree.query(points)\n\nelevations = data.point_data[\"Elevation\"][data_inds]\n\n# Mask points on planes\nplanes.cell_data[\"Elevation\"] = np.zeros(planes.n_cells)\nplanes.cell_data[\"Elevation\"][pt_inds] = elevations\n\n# Create axes\naxis_length = 20\ntip_length = 0.25 / axis_length * 3\ntip_radius = 0.1 / axis_length * 3\nshaft_radius = 0.05 / axis_length * 3\nx_axis = pv.Arrow(\n    direction=(axis_length, 0, 0),\n    tip_length=tip_length,\n    tip_radius=tip_radius,\n    shaft_radius=shaft_radius,\n    scale=\"auto\",\n)\ny_axis = pv.Arrow(\n    direction=(0, axis_length, 0),\n    tip_length=tip_length,\n    tip_radius=tip_radius,\n    shaft_radius=shaft_radius,\n    scale=\"auto\",\n)\nz_axis = pv.Arrow(\n    direction=(0, 0, axis_length),\n    tip_length=tip_length,\n    tip_radius=tip_radius,\n    shaft_radius=shaft_radius,\n    scale=\"auto\",\n)\nx_label = pv.PolyData([axis_length, 0, 0])\ny_label = pv.PolyData([0, axis_length, 0])\nz_label = pv.PolyData([0, 0, axis_length])\nx_label.point_data[\"label\"] = [\n    \"x\",\n]\ny_label.point_data[\"label\"] = [\n    \"y\",\n]\nz_label.point_data[\"label\"] = [\n    \"z\",\n]\n\n# Plot results\np = pv.Plotter()\np.add_mesh(x_axis, color=\"r\")\np.add_point_labels(x_label, \"label\", show_points=False, font_size=24)\np.add_mesh(y_axis, color=\"r\")\np.add_point_labels(y_label, \"label\", show_points=False, font_size=24)\np.add_mesh(z_axis, color=\"r\")\np.add_point_labels(z_label, \"label\", show_points=False, font_size=24)\np.add_mesh(data)\np.add_mesh(planes)\np.show()\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting STL with VTK\nDESCRIPTION: Traditional VTK approach for reading and displaying an STL file using VTK's rendering pipeline. This example shows the verbose nature of VTK's API requiring explicit setup of readers, mappers, actors, and rendering windows.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/why.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vtk\nreader = vtk.vtkSTLReader()\nreader.SetFileName(\"bunny.stl\")\nmapper = vtk.vtkDataSetMapper()\noutput_port = reader.GetOutputPort()\nmapper.SetInputConnection(output_port)\nactor = vtk.vtkActor()\nactor.SetMapper(mapper)\nren = vtk.vtkRenderer()\nrenWin = vtk.vtkRenderWindow()\nrenWin.AddRenderer(ren)\niren = vtk.vtkRenderWindowInteractor()\nstyle = vtk.vtkInteractorStyleTrackballCamera()\niren.SetRenderWindow(renWin)\niren.SetInteractorStyle(style)\nren.AddActor(actor)\niren.Initialize()\nrenWin.Render()\niren.Start()\ndel iren, renWin\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive PyVista Visualization in Jupyter\nDESCRIPTION: This Python code demonstrates how to create an interactive PyVista visualization in Jupyter. It creates a plotter with two subplots, adds a cube and a sphere, and sets a custom background color.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\n\npl = pyvista.Plotter(shape=(1, 2))\nactor = pl.add_mesh(pyvista.Cube())\npl.subplot(0, 1)\nactor = pl.add_mesh(pyvista.Sphere())\npl.set_background('orange', all_renderers=False)\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Mesh Subdivision with PyVista\nDESCRIPTION: Example of using PyVista's high-level API to perform mesh subdivision operations on a triangulated plane surface.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/why.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nmesh = pyvista.Plane().triangulate()\nsubmesh = mesh.subdivide(2, 'linear')\nsubmesh.plot(show_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Plotting with PyVista\nDESCRIPTION: This snippet shows how to plot the same data using PyVista. It demonstrates the simplicity of PyVista's plotting interface compared to VTK.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngrid.plot(cpos='xy', show_scalar_bar=False, cmap='coolwarm')\n```\n\n----------------------------------------\n\nTITLE: Setting Point Data in PyVista UnstructuredGrid\nDESCRIPTION: This snippet shows how to create a numpy array of data and set it as point data in a PyVista UnstructuredGrid object. It demonstrates using the set_array() method to assign data to points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> data = np.linspace(0, 1, ugrid.n_points)\n>>> ugrid.point_data.set_array(data, 'my-point-data')\n>>> ugrid.point_data\n```\n\n----------------------------------------\n\nTITLE: Adding and Visualizing Point Data on a Mesh\nDESCRIPTION: Adds an array of values to the point_data dictionary of a mesh and visualizes it. This demonstrates how point data is stored and visualized with interpolation between points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmesh.point_data['my point values'] = np.arange(mesh.n_points)\nmesh.plot(scalars='my point values', cpos=cpos, show_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting Random Hills Example in PyVista\nDESCRIPTION: This snippet demonstrates how to load and plot the built-in random hills dataset using PyVista's examples module.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/examples/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> hills = examples.load_random_hills()\n>>> hills.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Shadow Effects with Positional Lighting in PyVista\nDESCRIPTION: Demonstrates how to create a shadow effect by positioning a light above a sphere. The example configures a positional light with specific cone angle and exponent values to cast an eclipse-like shadow on a plane below.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/lights.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\nplotter = pv.Plotter(lighting=None, window_size=(800, 800))\n\n# create a top down light\nlight = pv.Light(position=(0, 0, 3), show_actor=True, positional=True,\n                 cone_angle=30, exponent=20, intensity=1.5)\nplotter.add_light(light)\n\n# add a sphere to the plotter\nsphere = pv.Sphere(radius=0.3, center=(0, 0, 1))\nplotter.add_mesh(sphere, ambient=0.2, diffuse=0.5, specular=0.8,\n                 specular_power=30, smooth_shading=True,\n                 color='dodgerblue')\n\n# add the grid\ngrid = pv.Plane(i_size=4, j_size=4)\nplotter.add_mesh(grid, ambient=0, diffuse=0.5, specular=0.8, color='white')\n\n# set up and show the plotter\nplotter.enable_shadows()\nplotter.set_background('darkgrey')\nplotter.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing an UnstructuredGrid from a MultiBlock\nDESCRIPTION: Shows how to access the 'internalMesh' component from a loaded dataset, which is an UnstructuredGrid within the MultiBlock hierarchy.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndata[\"internalMesh\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh Points in PyVista with Python\nDESCRIPTION: Shows how to access the points of a PyVista mesh as a NumPy array and inspect specific point coordinates.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> the_pts = mesh.points\n>>> isinstance(the_pts, np.ndarray)\nTrue\n\n>>> the_pts[0:5, :]\narray([[896.994 ,  48.7601,  82.2656],\n       [906.593 ,  48.7601,  80.7452],\n       [907.539 ,  55.4902,  83.6581],\n       [896.994 ,  55.4902,  85.3283],\n       [896.994 ,  42.8477,  77.825 ]], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Converting Arrays between VTK and NumPy in PyVista\nDESCRIPTION: This function facilitates the conversion of data arrays between VTK and NumPy formats. It's essential for interoperability between VTK datasets and numerical computations in Python.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.arrays.convert_array\n```\n\n----------------------------------------\n\nTITLE: Fitting a Plane to Points in PyVista\nDESCRIPTION: This function fits a plane to a set of 3D points using least squares regression. It's useful for finding the best-fit plane for a point cloud or surface data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.points.fit_plane_to_points\n```\n\n----------------------------------------\n\nTITLE: Downloading and Plotting Turbine Blade Dataset in PyVista\nDESCRIPTION: This code shows how to download and visualize the turbine blade dataset using PyVista's examples module.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/examples/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> blade_mesh = examples.download_turbine_blade()\n>>> blade_mesh.plot()\n```\n\n----------------------------------------\n\nTITLE: Plotting a MultiBlock Dataset in PyVista\nDESCRIPTION: Renders all meshes contained in a MultiBlock object with smooth shading enabled. This shows how MultiBlock automatically handles plotting all its contained data elements.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nblocks.plot(smooth_shading=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to a Plot in PyVista (Python)\nDESCRIPTION: This snippet demonstrates how to add point labels to a PyVista plot. It loads an example beam, creates a plot, and adds labels to points on the yz plane. It also shows how to combine labels with a scalar bar to display exact values of certain points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\n\ngrid = pv.UnstructuredGrid(examples.hexbeamfile)\n\nplotter = pv.Plotter()\nplotter.add_mesh(grid, show_edges=True, color='lightblue')\n\npoints = grid.points\nmask = points[:, 0] == 0\nplotter.add_point_labels(points[mask], points[mask].tolist())\n\nplotter.camera_position = [\n                (-1.4643015810492384, 1.5603923627830638, 3.16318236536270),\n                (0.05268120500967251, 0.639442034364944, 1.204095304165153),\n                (0.2364061044392675, 0.9369426029156169, -0.25739213784721)]\n\nplotter.show()\n\n# Label the Z position\nvalues = grid.points[:, 2]\n\nplotter = pv.Plotter()\nplotter.add_mesh(grid, scalars=values,\n                 scalar_bar_args={'title': 'Z Position'},\n                 show_edges=True)\n\nmask = grid.points[:, 0] == 0\nplotter.add_point_labels(points[mask], values[mask].tolist(), font_size=24)\n\nplotter.add_text('Example showing plot labels')\n\nplotter.view_vector((-6, -3, -4), (0.,-1., 0.))\nplotter.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a More Complex Mesh in PyVista\nDESCRIPTION: This snippet creates a more complex mesh using ImageData and converting it to an UnstructuredGrid. It's used as a basis for demonstrating data array assignments.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> grid = pyvista.ImageData(dimensions=(3, 3, 1))\n>>> ugrid = grid.cast_to_unstructured_grid()\n>>> ugrid\n```\n\n----------------------------------------\n\nTITLE: Fitting a Line to Points in PyVista\nDESCRIPTION: This function fits a line to a set of 3D points using least squares regression. It's helpful for finding the best-fit linear representation of a point set or trajectory data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.points.fit_line_to_points\n```\n\n----------------------------------------\n\nTITLE: Visualizing PyVista UnstructuredGrid with Point Labels\nDESCRIPTION: This code snippet demonstrates how to create a PyVista Plotter, add an unstructured grid mesh with edges, and label the points. It also sets the camera position and displays the plot.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> pl = pyvista.Plotter()\n>>> pl.add_mesh(ugrid, show_edges=True, line_width=5)\n>>> label_coords = ugrid.points + [0, 0, 0.02]\n>>> point_labels = [f'Point {i}' for i in range(ugrid.n_points)]\n>>> pl.add_point_labels(\n...     label_coords, point_labels, font_size=25, point_size=20\n... )\n>>> pl.camera_position = 'xy'\n>>> pl.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Scene with Custom Lighting in PyVista\nDESCRIPTION: Creates a 3D visualization with custom lighting by disabling default lighting and manually adding a red spotlight to a scene with the Stanford bunny model.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/lights.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\nplotter = pv.Plotter(lighting='none')\nplotter.background_color = 'white'\nmesh = examples.download_bunny()\nmesh.rotate_x(90, inplace=True)\nmesh.rotate_z(180, inplace=True)\nplotter.add_mesh(mesh, specular=1.0, diffuse=0.7, smooth_shading=True)\nplotter.add_light(light)\nplotter.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Cell Data to PyVista Mesh\nDESCRIPTION: This snippet demonstrates how to add cell data to a PyVista mesh using the [] operator and the set_array() method. It also shows how to access and modify the active scalars.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> simple_range = range(ugrid.n_cells)\n>>> ugrid.cell_data['my-data'] = simple_range\n>>> ugrid.cell_data['my-data']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.plot(cpos='xy', show_edges=True)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> data = np.linspace(0, 1, ugrid.n_cells)\n>>> ugrid.cell_data.set_array(data, 'my-cell-data')\n>>> ugrid.cell_data\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.cell_data.active_scalars_name = 'my-cell-data'\n>>> ugrid.cell_data\n```\n\n----------------------------------------\n\nTITLE: Adding Point Data to PyVista Mesh\nDESCRIPTION: This snippet shows how to add point data to a PyVista mesh using the [] operator. It demonstrates the difference between cell data and point data visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> simple_list = list(range(ugrid.n_points))\n>>> ugrid.point_data['my-data'] = simple_list\n>>> ugrid.point_data['my-data']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.point_data\n```\n\n----------------------------------------\n\nTITLE: Modifying VTK Arrays Through NumPy Views\nDESCRIPTION: Shows how modifying a NumPy view of a VTK array changes the underlying VTK data since the arrays are linked through shallow copying.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> wrapped[0, 0] = 10\n>>> vtk_array.GetValue(0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Red Spotlight in PyVista\nDESCRIPTION: Creates a red spotlight positioned at (-1, 1, 1) that shines on the origin. The example demonstrates how to create a custom light and make it positional.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/lights.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\nlight = pv.Light(position=(-1, 1, 1), color='red')\nlight.positional = True\n```\n\n----------------------------------------\n\nTITLE: Extracting a Face from a PyVista Cell\nDESCRIPTION: This code shows how to extract a single face from a previously obtained cell using the get_face method of the Cell class.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/cells.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nface = cell.get_face(0)\nface\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Blocks by Name in MultiBlock\nDESCRIPTION: Shows how to create a named MultiBlock with two geometric primitives, set names for each block, and then access a block by its name rather than its index.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nblocks = pv.MultiBlock([pv.Sphere(), pv.Cube()])\nblocks.set_block_name(0, \"sphere\")\nblocks.set_block_name(1, \"cube\")\nblocks[\"sphere\"]  # Sphere\n```\n\n----------------------------------------\n\nTITLE: Configuring PyVista Plotting Environment\nDESCRIPTION: Sets up PyVista's plotting environment by configuring the Jupyter backend, background color, window size, and rendering options for optimal visualization quality.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\npyvista.set_jupyter_backend('static')\npyvista.global_theme.background = 'white'\npyvista.global_theme.window_size = [600, 400]\npyvista.global_theme.axes.show = False\npyvista.global_theme.smooth_shading = True\npyvista.global_theme.anti_aliasing = 'fxaa'\n```\n\n----------------------------------------\n\nTITLE: Creating UnstructuredGrid with Points and Cells in PyVista\nDESCRIPTION: Demonstrates how to create an UnstructuredGrid object with points and cells directly during initialization. This example creates two hexahedron cells.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pyvista\nfrom pyvista import CellType\ncells = np.array(\n    [8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]\n)\ncell_type = np.array(\n    [CellType.HEXAHEDRON, CellType.HEXAHEDRON], np.int8\n)\ncell1 = np.array(\n    [\n        [0, 0, 0],\n        [1, 0, 0],\n        [1, 1, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [1, 0, 1],\n        [1, 1, 1],\n        [0, 1, 1],\n    ],\n    dtype=np.float32,\n)\ncell2 = np.array(\n    [\n        [0, 0, 2],\n        [1, 0, 2],\n        [1, 1, 2],\n        [0, 1, 2],\n        [0, 0, 3],\n        [1, 0, 3],\n        [1, 1, 3],\n        [0, 1, 3],\n    ],\n    dtype=np.float32,\n)\npoints = np.vstack((cell1, cell2))\ngrid = pyvista.UnstructuredGrid(cells, cell_type, points)\ngrid\n```\n\n----------------------------------------\n\nTITLE: Listing PyVista Parametric Surface Functions\nDESCRIPTION: This code block lists various parametric surface functions available in PyVista. These functions create different types of parametric surfaces such as Bohemian Dome, Bour surface, Boy's surface, and more.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/parametric.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary\n\n   ParametricBohemianDome\n   ParametricBour\n   ParametricBoy\n   ParametricDini\n   ParametricCatalanMinimal\n   ParametricConicSpiral\n   ParametricCrossCap\n   ParametricEllipsoid\n   ParametricEnneper\n   ParametricFigure8Klein\n   ParametricHenneberg\n   ParametricKlein\n   ParametricKuen\n   ParametricMobius\n   ParametricPluckerConoid\n   ParametricPseudosphere\n   ParametricRandomHills\n   ParametricRoman\n   ParametricSuperEllipsoid\n   ParametricSuperToroid\n   ParametricTorus\n```\n\n----------------------------------------\n\nTITLE: Comparing Point Data vs Cell Data Visualization\nDESCRIPTION: Creates a side-by-side comparison of the same mesh colored by point data versus cell data. This demonstrates how point data is interpolated across cells while cell data maintains a constant value for each cell.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\nuni = examples.load_uniform()\n\npl = pv.Plotter(shape=(1, 2), border=False)\npl.add_mesh(uni, scalars='Spatial Point Data', show_edges=True)\npl.subplot(0, 1)\npl.add_mesh(uni, scalars='Spatial Cell Data', show_edges=True)\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Importing PyVista and Creating a Sphere in Python\nDESCRIPTION: This snippet demonstrates how to import PyVista and create a simple sphere object. It showcases the basic usage of PyVista's geometry creation capabilities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Google/vocab.txt#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nsphere = pv.Sphere()\n```\n\n----------------------------------------\n\nTITLE: Importing PyVista Themes in Python\nDESCRIPTION: This snippet shows how to import various theme classes and configuration objects from the pyvista.plotting module. These classes are used to customize the appearance of PyVista plots.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/theme.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista.plotting import themes\n```\n\n----------------------------------------\n\nTITLE: Creating ImageData with VTK Python\nDESCRIPTION: This snippet demonstrates how to create a vtkImageData object using VTK's Python bindings. It sets up points, creates the image structure, and assigns scalar values to the points.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import vtk\n>>> from math import cos, sin\n\n# Create (x, y) points for a 300x300 image dataset\n\n>>> points = vtk.vtkDoubleArray()\n>>> points.SetName(\"points\")\n>>> points.SetNumberOfComponents(1)\n>>> points.SetNumberOfTuples(300 * 300)\n\n>>> for x in range(300):\n...     for y in range(300):\n...         points.SetValue(\n...             x * 300 + y,\n...             127.5 + (1.0 + sin(x / 25.0) * cos(y / 25.0)),\n...         )\n...\n\n# Create the image structure\n\n>>> image_data = vtk.vtkImageData()\n>>> image_data.SetOrigin(0, 0, 0)\n>>> image_data.SetSpacing(1, 1, 1)\n>>> image_data.SetDimensions(300, 300, 1)\n\n# Assign the points to the image\n\n>>> image_data.GetPointData().SetScalars(points)\n```\n\n----------------------------------------\n\nTITLE: Plotting a PyVista Cell\nDESCRIPTION: This code shows how to plot an individual PyVista Cell using its plot method, with customized appearance settings like showing edges and setting line width.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/cells.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncell.plot(show_edges=True, line_width=3)\n```\n\n----------------------------------------\n\nTITLE: Assigning Scalars to Cell and Point Data with Visualization Comparison\nDESCRIPTION: Creates two cubes, assigns data to cell_data for one and point_data for the other, then displays them side by side. This demonstrates the difference in visualization between cell-based and point-based data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncube = pv.Cube()\ncube.cell_data['myscalars'] = range(6)\n\nother_cube = cube.copy()\nother_cube.point_data['myscalars'] = range(8)\n\npl = pv.Plotter(shape=(1, 2), border_width=1)\npl.add_mesh(cube, cmap='coolwarm')\npl.subplot(0, 1)\npl.add_mesh(other_cube, cmap='coolwarm')\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Manipulating and Viewing Block Keys in MultiBlock\nDESCRIPTION: Demonstrates how to reverse the order of blocks in a MultiBlock and view the keys (names) associated with the blocks. Shows how PyVista maintains key ordering during list operations.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nblocks.reverse()\nblocks.keys()\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme\nDESCRIPTION: Demonstrates how to create a custom theme based on a built-in theme, customize it, and apply it globally.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a theme based off the DocumentTheme\n\nmy_theme = pyvista.plotting.themes.DocumentTheme()\nmy_theme.cmap = 'jet'\nmy_theme.show_edges = True\n\n# Apply it globally\n\npyvista.global_theme.load_theme(my_theme)\n```\n\n----------------------------------------\n\nTITLE: Plotting with Default Parameters\nDESCRIPTION: Example showing how to load and plot a 3D model (Stanford Dragon) using the default theme settings.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> from pyvista import examples\n>>> dragon = examples.download_dragon()\n>>> dragon.plot(cpos='xy')\n```\n\n----------------------------------------\n\nTITLE: Creating Points Using VTK Array in Python\nDESCRIPTION: Demonstrates how to create points for a triangle using VTK's native API by initializing a vtkDoubleArray, setting the number of components and values, and defining individual point coordinates.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import vtk\n>>> vtk_array = vtk.vtkDoubleArray()\n>>> vtk_array.SetNumberOfComponents(3)\n>>> vtk_array.SetNumberOfValues(9)\n>>> vtk_array.SetValue(0, 0)\n>>> vtk_array.SetValue(1, 0)\n>>> vtk_array.SetValue(2, 0)\n>>> vtk_array.SetValue(3, 1)\n>>> vtk_array.SetValue(4, 0)\n>>> vtk_array.SetValue(5, 0)\n>>> vtk_array.SetValue(6, 0.5)\n>>> vtk_array.SetValue(7, 0.667)\n>>> vtk_array.SetValue(8, 0)\n>>> print(vtk_array)\n```\n\n----------------------------------------\n\nTITLE: Plotting ImageData dataset examples\nDESCRIPTION: Code to demonstrate ImageData datasets using the built-in demos module in PyVista. This shows a visual example of datasets with uniform spacing in the three coordinate directions.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/grids.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import demos\ndemos.plot_datasets('ImageData')\n```\n\n----------------------------------------\n\nTITLE: Adding Meshes to a MultiBlock Dataset\nDESCRIPTION: Demonstrates adding geometric primitives (sphere and cube) to a MultiBlock container. The append method is used to sequentially add meshes to the collection.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nblocks.append(pv.Sphere())\nblocks.append(pv.Cube(center=(0, 0, -1)))\n```\n\n----------------------------------------\n\nTITLE: Background Plotting Example - Python/PyVista\nDESCRIPTION: Demonstrates background plotting using PyVistaQt's BackgroundPlotter. Creates an interactive rendering window that runs in the background.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/plotting.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nimport pyvistaqt as pvqt\nfrom pyvista import examples\n\ndataset = examples.load_hexbeam()\n\np = pvqt.BackgroundPlotter()\np.add_mesh(dataset)\np.show_bounds(grid=True, location='back')\n```\n\n----------------------------------------\n\nTITLE: Camera Roll Adjustment in PyVista\nDESCRIPTION: Demonstrates how to modify camera roll angle for an orientation cube visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/camera.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import demos\npl = demos.orientation_plotter()\npl.camera_position = 'yz'\npl.camera.roll += 10\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Segments from Points in PyVista\nDESCRIPTION: This function generates line segments from a set of points. It's useful for creating discontinuous line representations or for visualizing connections between point pairs.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.points.line_segments_from_points\n```\n\n----------------------------------------\n\nTITLE: Vectorized Ray Tracing with PyVista and Optional Dependencies\nDESCRIPTION: This snippet demonstrates how to perform multiple ray traces simultaneously using a PolyData object in PyVista. It requires optional dependencies trimesh, rtree, and pyembree. The example creates a sphere, defines ray origins and directions, performs the ray trace, and visualizes the results.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/optional_features.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom math import sin, cos, radians\nimport pyvista as pv\n\n# Create source to ray trace\nsphere = pv.Sphere(radius=0.85)\n\n# Define a list of origin points and a list of direction vectors for each ray\nvectors = [\n    [cos(radians(x)), sin(radians(x)), 0] for x in range(0, 360, 5)\n]\norigins = [[0, 0, 0]] * len(vectors)\n\n# Perform ray trace\npoints, ind_ray, ind_tri = sphere.multi_ray_trace(origins, vectors)\n\n# Create geometry to represent ray trace\nrays = [pv.Line(o, v) for o, v in zip(origins, vectors)]\nintersections = pv.PolyData(points)\n\n# Render the result\np = pv.Plotter()\np.add_mesh(\n    sphere,\n    show_edges=True,\n    opacity=0.5,\n    color=\"w\",\n    lighting=False,\n    label=\"Test Mesh\",\n)\np.add_mesh(rays[0], color=\"blue\", line_width=5, label=\"Ray Segments\")\nfor ray in rays[1:]:\n    p.add_mesh(ray, color=\"blue\", line_width=5)\np.add_mesh(\n    intersections,\n    color=\"maroon\",\n    point_size=25,\n    label=\"Intersection Points\",\n)\np.add_legend()\np.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Active Scalars in PyVista UnstructuredGrid\nDESCRIPTION: This code demonstrates how to set the active scalars for point data in a PyVista UnstructuredGrid object. It shows how to change the active scalars name and access the point data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.point_data.active_scalars_name = 'my-point-data'\n>>> ugrid.point_data\n```\n\n----------------------------------------\n\nTITLE: Performing List Operations on MultiBlock (Append, Pop, Reverse)\nDESCRIPTION: Demonstrates various list operations on a MultiBlock: appending a cone with a name, popping the last element, and reversing the order of blocks.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nblocks.append(pv.Cone(), name=\"cone\")\ncone = blocks.pop(-1)  # Pops Cone\nblocks.reverse()\n```\n\n----------------------------------------\n\nTITLE: Loading PolyData from File in Python\nDESCRIPTION: Demonstrates how to load a PolyData object from a file using PyVista's example datasets. The loaded mesh can then be manipulated or saved to other formats.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import examples\n\n# Load mesh\nmesh = pyvista.PolyData(examples.planefile)\nmesh\n```\n\n----------------------------------------\n\nTITLE: Creating PolyData from Different Point Representations\nDESCRIPTION: Creates PyVista PolyData objects from three different point representations (VTK array, NumPy array, and Python list) to demonstrate PyVista's flexible input handling.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from_vtk = pyvista.PolyData(vtk_array)\n>>> from_np = pyvista.PolyData(np_points)\n>>> from_list = pyvista.PolyData(points)\n```\n\n----------------------------------------\n\nTITLE: Generating Point Normals in Python\nDESCRIPTION: A function that computes point normals for a mesh or grid data. It uses VTK's normal generation functionality and allows for customization of normal calculation parameters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef generate_point_normals(mesh, point_normals=True, cell_normals=True,\n                        split_vertices=False, flip_normals=False,\n                        consistent_normals=True, auto_orient_normals=False,\n                        non_manifold_traversal=True, feature_angle=30.0,\n                        inplace=False):\n    \"\"\"\n    Generate point normals for a mesh or grid data.\n\n    Optionally also compute cell normals. This is a convenience\n    wrapper around the more configurable ``compute_normals``.\n\n    The options available in this filter are somewhat obtuse and\n    depend on the particular use case. For most applications you can\n    simply use the default parameters.\n\n    Parameters\n    ----------\n    mesh : pyvista.DataSet\n        The input mesh to compute the normals on.\n\n    point_normals : bool, default: True\n        Compute point normals. If both ``point_normals`` and ``cell_normals``\n        are ``False``, point normals will be computed.\n\n    cell_normals : bool, default: True\n        Compute cell normals.\n\n    split_vertices : bool, default: False\n        Split mesh vertices on sharp edges.\n\n    flip_normals : bool, default: False\n        Flip normals so all are pointing in the same direction.\n\n    consistent_normals : bool, default: True\n        Make direction of normals consistent with neighboring polygons.\n\n    auto_orient_normals : bool, default: False\n        Orient normals outward. Requires a closed surface.\n\n    non_manifold_traversal : bool, default: True\n        Traverse non-manifold edges. This may lead to less consistent\n        normals for meshes with lots of non-manifold edges.\n\n    feature_angle : float, default: 30.0\n        Feature angle for sharp edges (in degrees).\n\n    inplace : bool, default: False\n        Updates mesh in-place. Defaults to ``False`` to have a new mesh returned.\n\n    Return\n    ------\n    pyvista.DataSet\n        Dataset with computed normals, or\n        mesh reference if inplace=True.\n\n    \"\"\"\n    if not inplace:\n        mesh = mesh.copy()\n\n    # if both are false, set the default to compute point normals\n    if not point_normals and not cell_normals:\n        point_normals = True\n\n    # Calculate the point normals\n    if feature_angle <= 0 or feature_angle >= 180:\n        feature_angle = 30.0\n\n    # create a default mesh to avoid modified input parameters\n    if auto_orient_normals and consistent_normals:\n        raise ValueError('`consistent_normals` and `auto_orient_normals`'\n                         ' cannot be both `True`')\n\n    # ensure the inputs have some faces for vtk normalization to succeed\n    if not isinstance(mesh, pyvista.PolyData) and mesh.n_cells == 0:\n        raise ValueError(\"Input mesh must have faces to compute normals\")\n\n    poly_data = mesh.extract_surface()  # all normals calculated off of surfaces\n    mesh_normal = vtk.vtkPolyDataNormals()\n    algo.set_algorithm_input(poly_data, mesh_normal)\n    mesh_normal.SetComputePointNormals(point_normals)\n    mesh_normal.SetComputeCellNormals(cell_normals)\n    mesh_normal.SetSplitting(split_vertices)\n    mesh_normal.SetFlipNormals(flip_normals)\n    mesh_normal.SetConsistency(consistent_normals)\n    mesh_normal.SetAutoOrientNormals(auto_orient_normals)\n    mesh_normal.SetNonManifoldTraversal(non_manifold_traversal)\n    mesh_normal.SetFeatureAngle(feature_angle)\n    mesh_normal.Update()\n\n    result = mesh_normal.GetOutput()\n    if point_normals:\n        # apply computed result to new dataset\n        if isinstance(mesh, pyvista.PolyData):\n            mesh.point_data['Normals'] = algo.get_array(result, 'Normals')\n        else:  # unstructured grid or structured grid\n            # need to extract surface, apply normals, and fix issue of missing normals\n            # where cells not in the surface\n            norm = algo.get_array(result, 'Normals')  # computed normals\n            mesh.point_data['Normals'] = np.zeros([mesh.n_points, 3])  # initialize normals\n\n            # grab output indices from the extracted surface\n            ind_poly = poly_data.point_data.get('vtkOriginalPointIds',\n                                             np.arange(poly_data.n_points))\n            if poly_data.n_points != mesh.n_points:\n                # only update normals to vertices on the surface\n                mesh.point_data['Normals'][ind_poly] = norm\n            else:  # don't bother indexing, just replace (they match 1:1)\n                mesh.point_data['Normals'] = norm\n\n    if cell_normals:\n        # apply computed result to the input dataset\n        if isinstance(mesh, pyvista.PolyData):\n            mesh.cell_data['Normals'] = algo.get_array(result, 'Normals', preference='cell')\n        else:  # unstructured grid or structured grid\n            # same as above for the cell normals\n            norm = algo.get_array(result, 'Normals', preference='cell')  # computed normals\n            faces = range(mesh.n_cells)\n            faces_ind = np.in1d(mesh.celltypes, pyvista.vtk_triangle_types())\n            surface_ind = np.where(faces_ind)[0].ravel()\n\n            # initialize normals array\n            mesh.cell_data['Normals'] = np.zeros([mesh.n_cells, 3])\n\n            if len(surface_ind) != mesh.n_cells:\n                # for each face, grab the existing cell normals\n                mesh.cell_data['Normals'][surface_ind] = norm\n            else:  # don't bother indexing, just replace (they match 1:1)\n                mesh.cell_data['Normals'] = norm\n\n    if not inplace:\n        return mesh\n\n    return mesh\n```\n\n----------------------------------------\n\nTITLE: Setting Active Scalars with Preference in PyVista UnstructuredGrid\nDESCRIPTION: This snippet shows how to set the active scalars in a PyVista UnstructuredGrid object with a preference for cell data. It demonstrates using the set_active_scalars() method with the preference parameter.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.set_active_scalars('my-data', preference='cell')\n>>> ugrid.active_scalars_info\n```\n\n----------------------------------------\n\nTITLE: Manipulating PartitionedDataSet in PyVista\nDESCRIPTION: This code demonstrates various operations on a PartitionedDataSet, including appending a new object (Cone) and reversing the order of partitions.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npartitions.append(pv.Cone())\npartitions.reverse()\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Blocks by Index\nDESCRIPTION: Demonstrates accessing a specific mesh from a MultiBlock container using index notation. This list-like behavior allows retrieving the first mesh (Sphere) in the collection.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nblocks[0]  # Sphere\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Orientation Cube Plotter Demo in PyVista\nDESCRIPTION: This example illustrates how to create and show the orientation cube plotter demo using PyVista's demos module.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/examples/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import demos\n>>> plotter = demos.orientation_plotter()\n>>> plotter.show()\n```\n\n----------------------------------------\n\nTITLE: Listing PyVista Parametric Surface Building Functions\nDESCRIPTION: This code block lists utility functions for building parametric surfaces in PyVista. It includes functions for handling parametric keywords and creating surfaces from parametric equations.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/parametric.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autosummary::\n   :toctree: _autosummary\n\n   parametric_keywords\n   surface_from_para\n```\n\n----------------------------------------\n\nTITLE: Visualizing Points and Edges in a Hexahedral Beam Mesh\nDESCRIPTION: Displays both the mesh structure and points of a hexahedral beam. This example highlights the distinction between the points (vertices) and the connectivity (edges) that forms the mesh.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/what-is-a-mesh.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import examples\n\nmesh = examples.load_hexbeam()\ncpos = [(6.20, 3.00, 7.50),\n        (0.16, 0.13, 2.65),\n        (-0.28, 0.94, -0.21)]\n\npl = pv.Plotter()\npl.add_mesh(mesh, show_edges=True, color='white')\npl.add_points(mesh.points, color='red',\n              point_size=20)\npl.camera_position = cpos\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Wrapping VTK Dataset in PyVista\nDESCRIPTION: This function wraps a VTK dataset into a PyVista object. It allows for easier manipulation and visualization of VTK data within the PyVista framework.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.helpers.wrap\n```\n\n----------------------------------------\n\nTITLE: Slicing PartitionedDataSet in PyVista\nDESCRIPTION: This snippet shows how to use slicing to get a subset of partitions from a PartitionedDataSet. It retrieves the first two partitions (Sphere and Cube) in a new PartitionedDataSet.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npartitions[0:2]  # The Sphere and Cube objects in a new ``PartitionedDataSet``\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh Properties in PyVista\nDESCRIPTION: These snippets show how to access various properties of a PyVista mesh, including points, faces, and other attributes.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh.points\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh.faces\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh\n```\n\n----------------------------------------\n\nTITLE: Determining MultiBlock Size Using len() and n_blocks\nDESCRIPTION: Shows two ways to determine the number of meshes in a MultiBlock container: using the Python built-in len() function or accessing the n_blocks attribute.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlen(blocks)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty MultiBlock Dataset in PyVista\nDESCRIPTION: Initializes an empty MultiBlock composite dataset. This code sets up the necessary imports and creates an empty container that can hold multiple meshes.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\nblocks = pv.MultiBlock()\nblocks\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty PolyData Object in Python\nDESCRIPTION: Initializes an empty PolyData object using PyVista. This creates a mesh to which points, vertices, lines, and faces can be added later.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nmesh = pyvista.PolyData()\n```\n\n----------------------------------------\n\nTITLE: Camera Azimuth Adjustment in PyVista\nDESCRIPTION: Shows how to adjust camera azimuth angle to view X+ and Y+ faces of an orientation cube.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/camera.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import demos\npl = demos.orientation_plotter()\npl.camera_position = 'yz'\npl.camera.azimuth = 45\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Nested MultiBlock from a Parent MultiBlock\nDESCRIPTION: Demonstrates how to access a nested MultiBlock named 'boundary' from a parent MultiBlock object, showcasing the hierarchical nature of MultiBlock containers.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndata[\"boundary\"]\n```\n\n----------------------------------------\n\nTITLE: Slicing a MultiBlock to Get a Subset of Blocks\nDESCRIPTION: Demonstrates how to use Python slicing syntax to extract a subset of blocks from a MultiBlock container. This returns a new MultiBlock containing only the specified blocks.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nblocks[0:2]  # The Sphere and Cube objects in a new ``MultiBlock``\n```\n\n----------------------------------------\n\nTITLE: Accessing Point and Cell Data in PyVista UnstructuredGrid\nDESCRIPTION: This snippet shows how to access both point and cell data from a PyVista UnstructuredGrid object. It demonstrates printing the contents of point_data and cell_data attributes.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.point_data\n\n>>> ugrid.cell_data\n```\n\n----------------------------------------\n\nTITLE: Extracting and Displaying a Cell from a PyVista UnstructuredGrid\nDESCRIPTION: This snippet demonstrates how to extract a hexahedral cell from a PyVista UnstructuredGrid example and display its information. It uses the get_cell method of the DataSet class.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/cells.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import examples\nmesh = examples.load_hexbeam()\ncell = mesh.get_cell(0)\ncell\n```\n\n----------------------------------------\n\nTITLE: Creating PolyData with PyVista\nDESCRIPTION: This snippet shows how to create a PolyData object with PyVista, demonstrating the simplified syntax for setting up cell connectivity.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> faces = np.array([3, 0, 1, 2])\n>>> poly_data = pyvista.PolyData(np_points, faces)\n>>> poly_data.faces\n```\n\n----------------------------------------\n\nTITLE: Plotting RectilinearGrid dataset examples\nDESCRIPTION: Code to demonstrate RectilinearGrid datasets using the built-in demos module in PyVista. This shows a visual example of datasets with variable spacing in the three coordinate directions.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/grids.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyvista import demos\ndemos.plot_datasets('RectilinearGrid')\n```\n\n----------------------------------------\n\nTITLE: Creating Triangular Mesh from Points in PyVista\nDESCRIPTION: This function simplifies the construction of a triangular mesh from a set of points. It's useful for quickly creating surface representations from point cloud data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.points.make_tri_mesh\n```\n\n----------------------------------------\n\nTITLE: Setting Default Jupyter Backend for PyVista\nDESCRIPTION: Shows how to set Trame as the default Jupyter backend for PyVista, eliminating the need to specify the backend with each plot call.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\npv.set_jupyter_backend('trame')\n```\n\n----------------------------------------\n\nTITLE: Plotting Static Sphere in Jupyter Notebook - Python/PyVista\nDESCRIPTION: Demonstrates basic static sphere plotting in a Jupyter notebook using PyVista. Uses the jupyter_backend='static' parameter to render a static plot.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/plotting.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nsphere = pv.Sphere()\nsphere.plot(jupyter_backend='static')\n```\n\n----------------------------------------\n\nTITLE: Accessing PyVista Mesh Properties in Python\nDESCRIPTION: Demonstrates how to access various properties of a PyVista mesh object, including number of cells, points, arrays, bounds, and center.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista as pv\n>>> from pyvista import examples\n>>> import numpy as np\n\n>>> mesh = examples.load_airplane()\n\nInspect how many cells are in this mesh\n\n>>> mesh.n_cells\n2452\n\nInspect how many points are in this mesh\n>>> mesh.n_points\n1335\n\nWhat about scalar arrays? Are there any?\n\n>>> mesh.n_arrays\n0\n\nWhat are the mesh bounds?\n>>> mesh.bounds\nBoundsTuple(x_min=139.061, x_max=1654.93, y_min=32.09, y_max=1319.95, z_min-17.74, z_max=282.13)\n\nWhere is the center of this mesh?\n\n>>> mesh.center\n(897.0, 676.02, 132.19)\n```\n\n----------------------------------------\n\nTITLE: Extracting an Edge from a PyVista Cell Face\nDESCRIPTION: This snippet demonstrates how to extract an edge from a previously obtained face using the get_edge method of the Face class.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/cells.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nedge = face.get_edge(0)\nedge\n```\n\n----------------------------------------\n\nTITLE: Creating StructuredGrid from NumPy Arrays in PyVista\nDESCRIPTION: Demonstrates how to create a StructuredGrid object directly from NumPy arrays. This is useful for creating grids from scratch or copying from another format.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nimport numpy as np\n\nx = np.arange(-10, 10, 1, dtype=np.float32)\ny = np.arange(-10, 10, 2, dtype=np.float32)\nz = np.arange(-10, 10, 5, dtype=np.float32)\nx, y, z = np.meshgrid(x, y, z, indexing='ij')\n\n# create the unstructured grid directly from the numpy arrays and plot\ngrid = pv.StructuredGrid(x, y, z)\ngrid.plot(show_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing PolyData Points and Comparing Arrays\nDESCRIPTION: Shows how to access the points array from a PyVista PolyData object and verifies that the point data is identical regardless of the original input format.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from_vtk.points\n>>> assert np.array_equal(from_vtk.points, from_np.points)\n>>> assert np.array_equal(from_vtk.points, from_list.points)\n>>> assert np.array_equal(from_np.points, from_list.points)\n```\n\n----------------------------------------\n\nTITLE: Wrapping VTK Data Object with PyVista in Python\nDESCRIPTION: Demonstrates how to use pyvista.wrap to convert a VTK polydata object into a PyVista object for easier manipulation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vtk\nimport pyvista as pv\n\nstuff = vtk.vtkPolyData()\nbetter = pv.wrap(stuff)\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Scalars Info in PyVista UnstructuredGrid\nDESCRIPTION: This code snippet demonstrates how to access the active scalars information from a PyVista UnstructuredGrid object. It shows how to retrieve the active scalars info at the dataset level.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.active_scalars_info\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty PartitionedDataSet in PyVista\nDESCRIPTION: This snippet demonstrates how to create an empty PartitionedDataSet object in PyVista. It imports the necessary modules and initializes an empty partitioned dataset.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\nfrom pyvista import examples\npartitions = pv.PartitionedDataSet()\npartitions\n```\n\n----------------------------------------\n\nTITLE: Generating Lines from Points in PyVista\nDESCRIPTION: This function creates a line representation from a series of points. It's helpful for visualizing paths or trajectories defined by ordered point sets.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/helpers.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npyvista.core.utilities.points.lines_from_points\n```\n\n----------------------------------------\n\nTITLE: Animating Wireframe Beam Deformation in PyVista (Python)\nDESCRIPTION: This snippet is similar to the previous one but renders the beam as a wireframe. It demonstrates how to change the rendering style in PyVista and create animations with different visual representations of the same data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nplotter = pv.Plotter(window_size=(800, 600))\nplotter.add_mesh(grid, scalars='Y Displacement',\n                show_edges=True,\n                rng=[-d.max(), d.max()], interpolate_before_map=True,\n                style='wireframe')\nplotter.add_axes()\nplotter.camera_position = cpos\n\nplotter.open_gif('beam_wireframe.gif')\nfor phase in np.linspace(0, 2*np.pi, 20):\n    grid.points = pts + d * np.cos(phase)\n    grid['Y Displacement'] = d[:, 1] * np.cos(phase)\n    plotter.write_frame()\n\nplotter.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Points Using Python Lists\nDESCRIPTION: Shows how to create points using Python lists, which PyVista automatically converts to NumPy arrays internally when creating mesh objects.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> points = [[0, 0, 0], [1, 0, 0], [0.5, 0.667, 0]]\n```\n\n----------------------------------------\n\nTITLE: Using Plotter Class for Static Visualization - Python/PyVista\nDESCRIPTION: Shows how to use the Plotter class with notebook mode to create static visualizations. Creates a sphere mesh and displays it using the Plotter class.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/plotting.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplotter = pv.Plotter(notebook=True)\nplotter.add_mesh(sphere)\nplotter.show(jupyter_backend='static')\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Partitions in PyVista PartitionedDataSet\nDESCRIPTION: This snippet demonstrates how to access individual partitions in a PartitionedDataSet using index notation. It retrieves the first partition (index 0) which is a Sphere object.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npartitions[0]  # Sphere\n```\n\n----------------------------------------\n\nTITLE: Getting the Length of PartitionedDataSet in PyVista\nDESCRIPTION: These code snippets show two ways to get the number of partitions in a PartitionedDataSet: using the len() function and accessing the n_partitions attribute.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlen(partitions)\n```\n\nLANGUAGE: python\nCODE:\n```\npartitions.n_partitions\n```\n\n----------------------------------------\n\nTITLE: Camera Elevation Adjustment in PyVista\nDESCRIPTION: Demonstrates setting camera elevation to view X+ and Z+ faces of an orientation cube.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/camera.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import demos\npl = demos.orientation_plotter()\npl.camera_position = 'yz'\npl.camera.elevation = 45\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Setting up PyVista for JupyterLab visualization\nDESCRIPTION: Configuration for PyVista in a JupyterLab environment with document theme, static backend, and various visualization settings including window size, axis visibility, and anti-aliasing.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/grids.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# jupyterlab boiler plate setup\nimport pyvista\npyvista.set_plot_theme('document')\npyvista.set_jupyter_backend('static')\npyvista.global_theme.window_size = [600, 400]\npyvista.global_theme.axes.show = False\npyvista.global_theme.anti_aliasing = 'fxaa'\npyvista.global_theme.show_scalar_bar = False\n```\n\n----------------------------------------\n\nTITLE: Basic Orientation Cube Visualization in PyVista\nDESCRIPTION: Creates a basic orientation cube visualization with camera positioned to view the YZ plane.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/camera.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista import demos\npl = demos.orientation_plotter()\npl.camera_position = 'yz'\npl.show()\n```\n\n----------------------------------------\n\nTITLE: Modifying Multiple Global Theme Parameters\nDESCRIPTION: Shows how to change several global theme parameters including the color, background, and axes visibility.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> pyvista.global_theme.color = 'red'\n>>> pyvista.global_theme.background = 'white'\n>>> pyvista.global_theme.axes.show = False\n```\n\n----------------------------------------\n\nTITLE: Exporting PyVista Mesh Using Meshio in Python\nDESCRIPTION: Demonstrates how to export a PyVista mesh to various file formats supported by meshio using the save_meshio() function.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npv.save_meshio(\"mesh.obj\", mesh)\n```\n\n----------------------------------------\n\nTITLE: Creating Parametric Geometry with PyVista Utilities\nDESCRIPTION: Creates a parametric superellipsoid geometric object with specific radius parameters. This demonstrates PyVista's capabilities for programmatically generating geometric objects.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista as pv\n>>> mesh = pv.ParametricSuperEllipsoid(xradius=0.1)\n>>> mesh\n```\n\n----------------------------------------\n\nTITLE: Adding Data to PartitionedDataSet in PyVista\nDESCRIPTION: This code shows how to add data to a PartitionedDataSet. It appends a sphere and a cube to the partitioned dataset using the append method.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/partitioned.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npartitions.append(pv.Sphere())\npartitions.append(pv.Cube(center=(0, 0, -1)))\n```\n\n----------------------------------------\n\nTITLE: Creating PointSet with PyVista\nDESCRIPTION: This snippet shows how to create a PointSet using PyVista. It uses a numpy array to represent the points and then creates a PolyData object.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> np_points = np.array([[0, 0, 0], [1, 0, 0], [0.5, 0.667, 0]])\n>>> import pyvista\n>>> poly_data = pyvista.PolyData(np_points)\n```\n\n----------------------------------------\n\nTITLE: Plotting a PyVista Sphere with Custom Styling in Python\nDESCRIPTION: This code shows how to plot a PyVista sphere object with custom styling options. It illustrates the use of the plot() method and various parameters for customizing the appearance of the 3D visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Google/vocab.txt#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsphere.plot(color='red', show_edges=True, line_width=1)\n```\n\n----------------------------------------\n\nTITLE: Converting NumPy Arrays to VTK Point Arrays in Python\nDESCRIPTION: A function that converts NumPy arrays to VTK point array format. It handles various input types, performs type checking, and ensures proper array dimensionality for VTK compatibility.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef convert_array(arr, name=None, deep=False, array_type=None):\n    \"\"\"\n    Convert a NumPy array to a vtkDataArray or vice versa.\n\n    Parameters\n    ----------\n    arr : ndarray or vtkDataArray\n        A numpy array or vtkDataArray to convert.\n\n    name : str\n        The name of the data array for VTK.\n\n    deep : bool\n        If input is numpy array then deep copy values.\n\n    array_type : int\n        VTK array type ID as specified in vtkType.h.\n\n    Return\n    ------\n    vtkDataArray, ndarray, or DataFrame:\n        The converted array (if input is a NumPy ndaray then returns\n        ``vtkDataArray`` or is input is ``vtkDataArray`` then returns NumPy\n        ``ndarray``). If the input is table-like (``vtkTable``,\n        ``vtkRecombinedGrid``), return a pandas DataFrame.\n\n    \"\"\"\n    if arr is None:\n        return\n    if isinstance(arr, (list, tuple)):\n        arr = np.array(arr)\n\n    # Convert vtk data object to numpy\n    if isinstance(arr, (vtk.vtkRecombinedGrid, vtk.vtkTable)):\n        return _convert_to_dataframe(arr)\n    elif isinstance(arr, vtk.vtkDataArray):\n        return _vtk_to_numpy(arr)\n    elif isinstance(arr, vtk.vtkAbstractArray):\n        arr = _vtk_to_numpy_empty(arr)\n\n    # Check if this is a masked array\n    if isinstance(arr, np.ma.MaskedArray):\n        mask_copy = arr.mask.copy()\n        data = arr.data  # get underlying data\n        if np.any(mask_copy):\n            # Mask inactive values\n            mask_copy = mask_copy.ravel()\n            data = data.copy().ravel()\n            if data.dtype in (np.bool_, np.integer):\n                data[mask_copy] = 0\n            else:  # floats\n                data[mask_copy] = np.nan\n            arr = data.reshape(arr.shape)\n\n    # Convert numpy array to vtk array\n    if isinstance(arr, np.ndarray):\n        if arr.dtype == np.dtype('O'):\n            arr = arr.astype('|S')\n        arr = np.ascontiguousarray(arr)\n\n        try:\n            # This will handle numerical data\n            if array_type is None:\n                array_type = _get_vtk_type(arr.dtype)\n            arr_vtk = _numpy_to_vtk(num_array=arr, deep=deep, array_type=array_type)\n        except ValueError:\n            # This handles string arrays\n            if arr.dtype.kind in ['U', 'O', 'S']:\n                arr_vtk = convert_string_array(arr)\n            else:\n                raise\n\n        if name:\n            arr_vtk.SetName(name)\n        return arr_vtk\n\n    # Otherwise, assume a vtk data object was given and return\n    return arr\n```\n\n----------------------------------------\n\nTITLE: Exporting PyVista Mesh to VTK File in Python\nDESCRIPTION: Shows how to save a PyVista mesh object to a VTK file format using the save() method.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmesh.save(\"mesh.vtk\")\n```\n\n----------------------------------------\n\nTITLE: Reading VTK File with PyVista in Python\nDESCRIPTION: Shows how to use pyvista.read function to load a VTK file into a PyVista data object.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/simple.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\nmesh = pv.read('my_strange_vtk_file.vtk')\n```\n\n----------------------------------------\n\nTITLE: Adding Field Data to PyVista UnstructuredGrid\nDESCRIPTION: This code demonstrates how to add field data to a PyVista UnstructuredGrid object. It shows adding a string array as field data and accessing it.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.field_data['my-field-data'] = ['hello', 'world']\n>>> ugrid.field_data['my-field-data']\n```\n\n----------------------------------------\n\nTITLE: Importing PyVista Reader Classes in Python\nDESCRIPTION: This snippet shows how to import various reader classes from PyVista. These classes allow for reading different file formats and provide control over the data reading process.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/readers/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyvista import (\n    AVSucdReader,\n    BMPReader,\n    BYUReader,\n    BinaryMarchingCubesReader,\n    CGNSReader,\n    DEMReader,\n    DICOMReader,\n    EnSightReader,\n    ExodusIIBlockSet,\n    ExodusIIReader,\n    FacetReader,\n    FLUENTCFFReader,\n    FluentReader,\n    GambitReader,\n    GaussianCubeReader,\n    GESignaReader,\n    GIFReader,\n    GLTFReader,\n    HDFReader,\n    HDRReader,\n    JPEGReader,\n    MFIXReader,\n    MetaImageReader,\n    MINCImageReader,\n    MultiBlockPlot3DReader,\n    Nek5000Reader,\n    NIFTIReader,\n    NRRDReader,\n    OBJReader,\n    OpenFOAMReader,\n    ParticleReader,\n    PDBReader,\n    PLYReader,\n    PNGReader,\n    PNMReader,\n    POpenFOAMReader,\n    PTSReader,\n    PVDReader,\n    Plot3DMetaReader,\n    ProStarReader,\n    SLCReader,\n    STLReader,\n    SegYReader,\n    TIFFReader,\n    TecplotReader,\n    VTKDataSetReader,\n    VTKPDataSetReader,\n    XMLImageDataReader,\n    XMLMultiBlockDataReader,\n    XMLPImageDataReader,\n    XMLPRectilinearGridReader,\n    XMLPUnstructuredGridReader,\n    XMLPartitionedDataSetReader,\n    XMLPolyDataReader,\n    XMLRectilinearGridReader,\n    XMLStructuredGridReader,\n    XMLUnstructuredGridReader,\n    XdmfReader\n)\n```\n\n----------------------------------------\n\nTITLE: Exploring PyVista Examples and Demos\nDESCRIPTION: Python code to import and explore the available examples and demos in PyVista. This shows how to access the example datasets and demonstration visualizations included in the package.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> from pyvista import demos\n\nList all available examples.\n\n>>> print(dir(examples))\n\nList all available demos.\n```\n\n----------------------------------------\n\nTITLE: Saving a Custom Theme to Disk\nDESCRIPTION: Shows how to save a custom theme to a JSON file for later use.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmy_theme.save('my_theme.json')\n```\n\n----------------------------------------\n\nTITLE: Creating Points Using NumPy Arrays in PyVista\nDESCRIPTION: Shows how to create points for a triangle using NumPy arrays, which is more efficient as PyVista directly links the underlying C array to VTK without looping overhead.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> np_points = np.array([[0, 0, 0], [1, 0, 0], [0.5, 0.667, 0]])\n>>> np_points\n```\n\n----------------------------------------\n\nTITLE: Modifying VTK Data Through VTK API\nDESCRIPTION: Demonstrates that changes made through the VTK API are reflected in the NumPy wrapped array, showing the bidirectional nature of the shallow copy.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> vtk_array.SetValue(0, 0)\n>>> wrapped[0, 0]\n```\n\n----------------------------------------\n\nTITLE: Importing Base Reader Classes in Python\nDESCRIPTION: This snippet shows how to import the base reader classes from PyVista. These classes provide basic functionality for all readers and support for specific features like point/cell data selection and time-based reading.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/readers/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyvista import BaseReader, PointCellDataSelection, TimeReader\n```\n\n----------------------------------------\n\nTITLE: Retrieving PyVista Version Information in Python\nDESCRIPTION: This snippet demonstrates how to obtain the version information of the installed PyVista library. It imports PyVista and accesses the version_info attribute, which returns a tuple containing the major, minor, and patch version numbers.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/utilities.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Output the version of PyVista.\nimport pyvista\npyvista.version_info\n```\n\n----------------------------------------\n\nTITLE: Specifying Plot Parameters Directly\nDESCRIPTION: Shows how to set the same parameters directly in the plot call, equivalent to using a modified global theme.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> dragon.plot(\n...     cpos='xy', color='red', background='white', show_axes=False\n... )\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista Development Branch from GitHub\nDESCRIPTION: Instructions for installing the latest development version of PyVista directly from GitHub repository. Provides two alternative methods: direct pip install from GitHub URL or cloning the repository and installing locally.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U git+https://github.com/pyvista/pyvista.git@main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pyvista/pyvista.git\ncd pyvista\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Working with Structured Data from Files in MultiBlock\nDESCRIPTION: Loads an OpenFoam dataset and examines the keys at the top level of the resulting MultiBlock structure. This demonstrates how MultiBlock facilitates working with complex hierarchical data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndata = examples.download_cavity()\ndata.keys()\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Trame Backend Mode in PyVista\nDESCRIPTION: Demonstrates how to choose a specific Trame rendering mode by setting a global default and how to override it for a specific plot.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\npv.set_jupyter_backend('client')\n\npv.Cone().plot()\n```\n\n----------------------------------------\n\nTITLE: Accessing the PyVista Global Theme\nDESCRIPTION: Shows how to access and display the global theme parameters in PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> pyvista.global_theme\n```\n\n----------------------------------------\n\nTITLE: Accessing MultiBlock Size Through n_blocks Attribute\nDESCRIPTION: Shows how to access the number of blocks in a MultiBlock container through its n_blocks attribute, which provides the same information as len().\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nblocks.n_blocks\n```\n\n----------------------------------------\n\nTITLE: Example Docstring in Python using numpydoc Style\nDESCRIPTION: Demonstrates the proper format for documenting a PyVista method including parameters, returns, and examples sections. Shows specific formatting for optional parameters and default values.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef slice_x(self, x=None, generate_triangles=False):\n    \"\"\"Create an orthogonal slice through the dataset in the X direction.\n\n    Parameters\n    ----------\n    x : float, optional\n        The X location of the YZ slice. By default this will be the X center\n        of the dataset.\n\n    generate_triangles : bool, default: False\n        If this is enabled, the output will be all triangles. Otherwise the\n        output will consist of the intersection polygons.\n\n    Returns\n    -------\n    pyvista.PolyData\n        Sliced dataset.\n\n    Examples\n    --------\n    Slice the random hills dataset with one orthogonal plane.\n\n    >>> from pyvista import examples\n    >>> hills = examples.load_random_hills()\n    >>> slices = hills.slice_x(5, generate_triangles=False)\n    >>> slices.plot(line_width=5)\n\n    See :ref:`slice_example` for more examples using this filter.\n\n    \"\"\"\n\n    pass  # implementation goes here\n```\n\n----------------------------------------\n\nTITLE: Wrapping VTK Arrays with PyVista\nDESCRIPTION: Demonstrates how to wrap a VTK array using PyVista's wrap function, which creates a NumPy-like representation that is memory-efficient through shallow copying.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> wrapped = pyvista.wrap(vtk_array)\n>>> wrapped\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Theme Parameters\nDESCRIPTION: Demonstrates how to access and modify individual theme parameters like the default color.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pyvista.global_theme.color = 'lightblue'\n```\n\n----------------------------------------\n\nTITLE: Creating PolyData with VTK\nDESCRIPTION: This snippet demonstrates how to create a PolyData object with VTK, including setting up cell connectivity.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> vtk_poly_data = vtk.vtkPolyData()\n>>> vtk_poly_data.SetPoints(vtk_points)\n>>> cell_arr = vtk.vtkCellArray()\n>>> cell_arr.InsertNextCell(3)\n>>> cell_arr.InsertCellPoint(0)\n>>> cell_arr.InsertCellPoint(1)\n>>> cell_arr.InsertCellPoint(2)\n>>> vtk_poly_data.SetPolys(cell_arr)\n```\n\n----------------------------------------\n\nTITLE: Viewing Keys of a Nested MultiBlock\nDESCRIPTION: Shows how to view the keys of a nested MultiBlock. This helps in understanding the structure of complex datasets by displaying the names of components within a nested container.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/composite.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndata[\"boundary\"].keys()\n```\n\n----------------------------------------\n\nTITLE: Defining a New Dataset Carousel Class in Python\nDESCRIPTION: This snippet shows how to create a new carousel class for grouping related datasets in the PyVista dataset gallery. It demonstrates setting up the class properties and methods.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass InstrumentCarousel(DatasetGalleryCarousel):\n    \"\"\"Class to generate a carousel of instrument dataset cards.\"\"\"\n\n    name = 'instrument_carousel'\n    doc = 'Instrument datasets.'\n    badge = CategoryBadge('Instrument', ref='instrument_gallery')\n\n    @classmethod\n    def fetch_dataset_names(cls):\n        return sorted(\n            (\n                'guitar',\n                'trumpet',\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Accessing VTK Major Version Number in Python using PyVista\nDESCRIPTION: This snippet demonstrates how to retrieve the major version number of the VTK library used by PyVista. It accesses the major attribute of the vtk_version_info object, which returns an integer representing the major version of VTK.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/utilities.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Get the major version of VTK\npyvista.vtk_version_info.major\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle with VTK and Plotting with PyVista\nDESCRIPTION: This snippet shows how to create a circle using VTK's vtkRegularPolygonSource, then wrap the output with PyVista for plotting. It demonstrates the integration of VTK and PyVista functionalities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport vtk\nimport pyvista\n\n# Create a circle using vtk\npolygonSource = vtk.vtkRegularPolygonSource()\npolygonSource.GeneratePolygonOff()\npolygonSource.SetNumberOfSides(50)\npolygonSource.SetRadius(5.0)\npolygonSource.SetCenter(0.0, 0.0, 0.0)\npolygonSource.Update()\n\n# wrap and plot using pyvista\nmesh = pyvista.wrap(polygonSource.GetOutput())\nmesh.plot(line_width=3, cpos='xy', color='k')\n```\n\n----------------------------------------\n\nTITLE: Setting PyVista Jupyter Backend\nDESCRIPTION: This snippet demonstrates how to set the global Jupyter plotting backend for PyVista. It imports the PyVista library and sets the Jupyter backend to 'trame', which is the recommended rendering method.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\npv.set_jupyter_backend('trame')\n```\n\n----------------------------------------\n\nTITLE: Loading a Theme from Disk\nDESCRIPTION: Demonstrates how to load a previously saved theme from a JSON file.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npyvista.global_theme.load_theme('my_theme.json')\n```\n\n----------------------------------------\n\nTITLE: Documenting a New Dataset Download Function in Python\nDESCRIPTION: This snippet demonstrates how to properly document a new dataset download function, including examples and references to the dataset gallery.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef download_my_new_mesh(load=True):\n    \"\"\"Download my new mesh.\n\n    Examples\n    --------\n    >>> from pyvista import examples\n    >>> dataset = examples.download_my_new_mesh()\n    >>> dataset.plot()\n\n    .. seealso::\n\n       :ref:`My New Mesh Dataset <my_new_mesh_dataset>`\n           See this dataset in the Dataset Gallery for more info.\n\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing PyVista from Source\nDESCRIPTION: Commands to clone the PyVista repository from GitHub and install the latest development version locally.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pyvista/pyvista.git\ncd pyvista\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Plotting Spheres with Different Colors in PyVista\nDESCRIPTION: This example shows how to create two separate plots of spheres with different colors using PyVista. It demonstrates the use of color and camera position (cpos) parameters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> pyvista.Sphere().plot(color='blue', cpos='xy')\n\n>>> pyvista.Sphere().plot(color='red', cpos='xy')\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Trame Backend in PyVista\nDESCRIPTION: Shows how to override the default Jupyter backend setting for a specific plot while maintaining the global default for other plots.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\n\npv.set_jupyter_backend('trame')\n\npl = pv.Plotter()\npl.add_mesh(pv.Cone())\npl.show(jupyter_backend='client')\n```\n\n----------------------------------------\n\nTITLE: Plotting with Modified Global Theme\nDESCRIPTION: Example showing a plot that uses the modified global theme parameters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/themes.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> dragon.plot(cpos='xy')\n```\n\n----------------------------------------\n\nTITLE: Converting Cell Arrays to VTK Format in Python\nDESCRIPTION: A function that converts cell arrays from various formats to VTK cell arrays. It handles different input types including Python lists, NumPy arrays, and existing VTK arrays, ensuring proper format for VTK mesh creation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef convert_cell(offset, cell, deep=True):\n    \"\"\"\n    Convert to a vtk cell array using both cell and offset arrays.\n\n    Parameters\n    ----------\n    offset : sequence\n        Cell offset indices for collections of cell points. For example:\n        ``offset = [0, 1, 3, 7]``\n\n    cell : sequence\n        Cell indices for collections of cell points. For example:\n        ``cell = [0, 1, 2, 3, 4, 5, 6]``\n\n    deep : sequence\n        Deep copy arrays.\n\n    Return\n    ------\n    vtk.vtkCellArray :\n        VTK cell array.\n\n    \"\"\"\n    if offset is None or cell is None:\n        return None\n\n    # check if offset and cell are vtk arrays\n    if isinstance(offset, vtk.vtkDataArray) and isinstance(cell, vtk.vtkDataArray):\n        arr = vtk.vtkCellArray()\n        arr.SetData(offset, cell)\n        return arr\n\n    # Check if inputs are the same array\n    if isinstance(offset, type(cell)):\n        if np.array_equal(offset, cell):\n            offset, numcells, index = _check_face_array(offset)\n            return _make_cell_array(cell=offset, celltypes=numcells, index=index, deep=deep)\n\n    # make both a numpy array\n    offset = np.asarray(offset)\n    cell = np.asarray(cell)\n\n    if cell.dtype != vtk.vtkIdTypeArray().GetDataType() or not cell.flags.c_contiguous:\n        cell = np.ascontiguousarray(cell, dtype=np.int64)\n    if offset.dtype != vtk.vtkIdTypeArray().GetDataType() or not offset.flags.c_contiguous:\n        offset = np.ascontiguousarray(offset, dtype=np.int64)\n\n    # Create cell topology\n    arr = vtk.vtkCellArray()\n    if deep:\n        offset_vtk = numpy_to_idarr(offset)\n        cell_vtk = numpy_to_idarr(cell)\n    else:\n        offset_vtk = numpy_to_idarr(offset)\n        cell_vtk = numpy_to_idarr(cell)\n\n    arr.SetData(offset_vtk, cell_vtk)\n\n    return arr\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyVista on Remote Servers (AWS EC2)\nDESCRIPTION: Bash commands for setting up PyVista on an AWS EC2 Ubuntu server. Includes installing Miniconda, creating a Python environment, installing dependencies, and configuring a headless display with Xvfb.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\nbash miniconda.sh -b -p miniconda\necho '. $HOME/miniconda/etc/profile.d/conda.sh' >> ~/.bashrc && source ~/.bashrc\nconda create --name vtk_env python=3.9\nconda activate vtk_env\nconda install nodejs  # required when importing pyvista in Jupyter\npip install jupyter pyvista trame\n\n# To avoid \"ModuleNotFoundError: No module named 'vtkOpenGLKitPython' \" when importing vtk\n# https://stackoverflow.com/q/32389599\n# https://askubuntu.com/q/629692\nsudo apt update && sudo apt install python-qt4 libgl1-mesa-glx\n```\n\n----------------------------------------\n\nTITLE: Creating PointSet with VTK\nDESCRIPTION: This snippet demonstrates how to create a PointSet using VTK. It involves creating a vtkDoubleArray, setting values, and then creating a vtkPoints object.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import vtk\n>>> vtk_array = vtk.vtkDoubleArray()\n>>> vtk_array.SetNumberOfComponents(3)\n>>> vtk_array.SetNumberOfValues(9)\n>>> vtk_array.SetValue(0, 0)\n>>> vtk_array.SetValue(1, 0)\n>>> vtk_array.SetValue(2, 0)\n>>> vtk_array.SetValue(3, 1)\n>>> vtk_array.SetValue(4, 0)\n>>> vtk_array.SetValue(5, 0)\n>>> vtk_array.SetValue(6, 0.5)\n>>> vtk_array.SetValue(7, 0.667)\n>>> vtk_array.SetValue(8, 0)\n>>> vtk_points = vtk.vtkPoints()\n>>> vtk_points.SetData(vtk_array)\n>>> print(vtk_points)\n```\n\n----------------------------------------\n\nTITLE: Plotting a Sphere with PyVista\nDESCRIPTION: This snippet demonstrates how to create a basic plot of a sphere using PyVista. It imports the pyvista library and uses the Sphere() method to generate and plot a 3D sphere.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\npyvista.Sphere().plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Empty StructuredGrid in PyVista\nDESCRIPTION: Initializes an empty StructuredGrid object using PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\ngrid = pv.StructuredGrid()\n```\n\n----------------------------------------\n\nTITLE: Matching Points Function in Python\nDESCRIPTION: A function that finds the indices of points in an array that match target points. It supports different matching methods and returns the indices of matching points within a specified tolerance.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef match_points(source_points, target_points, tol=None):\n    \"\"\"\n    Find the indices of target_points that match source_points.\n\n    Parameters\n    ----------\n    source_points : numpy.ndarray\n        Source points.\n\n    target_points : numpy.ndarray\n        Target points.\n\n    tol : float, optional\n        If None, match exact points. If specified, return indexes\n        where point pairs are less than a tolerance.\n\n    Return\n    ------\n    numpy.ndarray\n        Indices of target_points that match source_points.\n\n    \"\"\"\n    # This is a pretty expensive operation, which get much worse as\n    # the point clouds become large\n    if 0 < len(source_points) < 100 and 0 < len(target_points) < 100:\n        # brute force to avoid computing all pairwise distances\n        # when point clouds are small\n        matched_indices = []\n        if tol is None:\n            for i, source_point in enumerate(source_points):\n                for j, target_point in enumerate(target_points):\n                    if np.array_equal(source_point, target_point):\n                        matched_indices.append(j)\n                        break\n        else:\n            for i, source_point in enumerate(source_points):\n                for j, target_point in enumerate(target_points):\n                    if np.linalg.norm(source_point - target_point) < tol:\n                        matched_indices.append(j)\n                        break\n        return np.array(matched_indices)\n\n    else:\n        # This has a lower complexity if the point clouds are large\n        if tol is None:\n            # Convert the points to a dictionary\n            target_points_dict = {tuple(point): i for i, point in enumerate(target_points)}\n            return np.array(\n                [target_points_dict.get(tuple(point), -1) for point in source_points]\n            )\n        else:\n            # Compute all pairwise distances\n            from scipy.spatial import distance_matrix\n\n            dist = distance_matrix(source_points, target_points)\n            # Find the minimum distance for each source point\n            min_dist_idx = np.argmin(dist, axis=1)\n            # Check if the minimum distance is less than the tolerance\n            min_dist = np.min(dist, axis=1)\n            matched_indices = min_dist_idx[min_dist < tol]\n            return np.array(matched_indices)\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Display on Remote Servers\nDESCRIPTION: Bash commands for setting up a headless display environment on remote servers. Installs Xvfb, sets environment variables for display configuration, and starts the virtual framebuffer.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install xvfb\nexport DISPLAY=:99.0\nexport PYVISTA_OFF_SCREEN=true\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nsleep 3\n```\n\n----------------------------------------\n\nTITLE: Configuring PyInstaller Analysis for PyVista with VTK v9\nDESCRIPTION: This code snippet shows how to set up the Analysis object in a PyInstaller spec file for a PyVista application using VTK v9. It includes the necessary hidden imports to ensure all required modules are included in the frozen application.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/pyinstaller.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmain_py = os.path.join(some_path, \"main.py\")\na = Analysis(\n    [main_py],\n    pathex=[],\n    binaries=[],\n    hiddenimports=[\n        \"vtkmodules\",\n        \"vtkmodules.all\",\n        \"vtkmodules.qt.QVTKRenderWindowInteractor\",\n        \"vtkmodules.util\",\n        \"vtkmodules.util.numpy_support\",\n        \"vtkmodules.numpy_interface.dataset_adapter\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting a Cube with PyVista using Doctest Syntax\nDESCRIPTION: This example shows how to plot a cube using PyVista with doctest syntax. It imports pyvista and uses the Cube() method to create and display a 3D cube.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> pyvista.Cube().plot()\n```\n\n----------------------------------------\n\nTITLE: PyVista Chart Plot Classes Import Reference\nDESCRIPTION: List of specialized plotting classes available in pyvista.plotting.charts module including various plot types like Line, Scatter, Bar, Area, Stack, Box and Pie plots along with styling utilities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/charts/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nPen\nBrush\nAxis\nLinePlot2D\nScatterPlot2D\nBarPlot\nAreaPlot\nStackPlot\nBoxPlot\nPiePlot\n```\n\n----------------------------------------\n\nTITLE: Converting Vector Array to RGB Values in Python\nDESCRIPTION: A function that transforms normal vector arrays to RGB color values. It supports different sign handling options and can process both point and cell data, generating a color representation of directional information.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef vector_array_to_rgb(vector_array, n_colors=256, preference='point',\n                     attr=None, sign=1, cpos=None):\n    \"\"\"\n    Create an RGB array from a vectorized array.\n\n    Parameters\n    ----------\n    vector_array : numpy.ndarray or datasetattributes.DatasetAttributes\n        The vector array to convert to RGB values. If a dataset\n        attribute object is passed, the inputs preference and\n        attr are used. Vector arrays should be 2D arrays with the\n        last dimension being of size 3 (i.e., x, y, z).\n\n    n_colors : int, default: 256\n        We normalize the input vector array to the range [-1, 1] and then\n        we need to scale that to [0, 255]. This parameter sets the number of\n        values to scale to between.  A lower value will result in more\n        discretized colors.\n\n    preference : str, default: 'point'\n        If ``vector_array`` is a dataset attribute object, this is the\n        preference for which normals to use.  Options are 'point'.\n\n    attr : str, optional\n        If ``vector_array`` is a dataset attribute object, this is the\n        name of the normal vector array to use.\n\n    sign : int, default: 1\n        Use to multiply the values by -1 to reverse direction.\n\n    cpos : list(tuple(floats)), optional\n        The camera position when using ``sign``.\n\n    Return\n    ------\n    numpy.ndarray\n        RGB array.\n\n    \"\"\"\n    from pyvista.datasetattributes import DatasetAttributes\n    # get the normal array\n    if isinstance(vector_array, DatasetAttributes):\n        attrs = vector_array\n        normal_array = attrs.get_vectors(preference, attr)\n        if normal_array is None:\n            normal_array = attrs.get_vectors(preference, 'Normals')\n    else:\n        normal_array = vector_array\n\n    if normal_array is None:\n        raise ValueError('No vectors present to compute RGB values')\n\n    if sign < 0:\n        if cpos is None:\n            raise ValueError('When using ``sign<0``, a camera position, ``cpos``, must be set.')\n        if cpos[2] is None:\n            raise ValueError('When using ``sign<0``, a camera ``look_at`` must be set.'\n                           ' E.g. [camera, look_at, viewup]')\n        normal_array = np.negative(normal_array)\n\n    # Rescale for coordinates within the range of [-1,1]\n    # Scalar value for each x, y and z\n    vector_array = normalize(normal_array)\n\n    # Now compute RGB\n    rgb = (vector_array + 1) * (n_colors - 1) / 2\n    return rgb.astype(np.uint8)\n```\n\n----------------------------------------\n\nTITLE: Checking PyVista Rendering Capabilities with NVIDIA GPU\nDESCRIPTION: Python code to verify that PyVista is using the NVIDIA GPU for rendering by checking the render window capabilities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista\n>>> pl = pyvista.Plotter()\n>>> print(pl.render_window.ReportCapabilities())\n\nOpenGL vendor string:  NVIDIA Corporation\nOpenGL renderer string:  Tesla K80/PCIe/SSE2\nOpenGL version string:  4.6.0 NVIDIA 450.51.06\nOpenGL extensions:\n  GL_AMD_multi_draw_indirect\n  GL_AMD_seamless_cubemap_per_texture\n  GL_ARB_arrays_of_arrays\n  GL_ARB_base_instance\n  GL_ARB_bindless_texture\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty UnstructuredGrid in PyVista\nDESCRIPTION: Initializes an empty UnstructuredGrid object using PyVista. Points and cells can be added later to this grid.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/core/pointsets.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista as pv\ngrid = pv.UnstructuredGrid()\n```\n\n----------------------------------------\n\nTITLE: Retrieving VTK Version Information in Python using PyVista\nDESCRIPTION: This snippet shows how to get the version information of the VTK library that PyVista depends on. It imports PyVista and accesses the vtk_version_info attribute, which returns a VTKVersionInfo object containing the major, minor, and micro version numbers of VTK.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/utilities.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Output the version of VTK.\nimport pyvista\npyvista.vtk_version_info\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Data in PyVista UnstructuredGrid\nDESCRIPTION: This snippet shows how to access and display the field data of a PyVista UnstructuredGrid object. It demonstrates that field data has no association with points or cells.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/data_model.rst#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> ugrid.field_data\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for PyVista Plotting Functions\nDESCRIPTION: ReStructuredText documentation defining the available plotting convenience functions in PyVista. Lists the main plotting functions including plot(), plot_arrows(), set_plot_theme(), and axes creation utilities.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/conv_func.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nConvenience Functions\n~~~~~~~~~~~~~~~~~~~~~\nThese functions provide a simplified interface to the various plotting\nroutines in PyVista.\n\n.. currentmodule:: pyvista\n\n.. autosummary::\n   :toctree: _autosummary\n\n   plot\n   plot_arrows\n   set_plot_theme\n   create_axes_orientation_box\n   create_axes_marker\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building VTK for PyVista Wheel using CMake\nDESCRIPTION: This snippet configures VTK build options using CMake and initiates the build process with ninja. It sets various VTK modules and build parameters, including Python wrapping and WebGL support.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -GNinja \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DVTK_BUILD_TESTING=OFF \\\n      -DVTK_BUILD_DOCUMENTATION=OFF \\\n      -DVTK_BUILD_EXAMPLES=OFF \\\n      -DVTK_DATA_EXCLUDE_FROM_ALL:BOOL=ON \\\n      -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \\\n      -DVTK_MODULE_ENABLE_VTK_WebCore:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebGLExporter:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebPython:STRING=YES \\\n      -DVTK_WHEEL_BUILD=ON \\\n      -DVTK_PYTHON_VERSION=3 \\\n      -DVTK_WRAP_PYTHON=ON \\\n      -DVTK_OPENGL_HAS_EGL=False \\\n      -DPython3_EXECUTABLE=$PYBIN ../\nninja-build\n```\n\n----------------------------------------\n\nTITLE: Installing Custom VTK Wheel in Docker\nDESCRIPTION: Dockerfile snippet to install a custom VTK wheel with GPU support in a PyVista Docker container.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nCOPY vtk-9.0.20201105-cp38-cp38-linux_x86_64.whl /tmp/\nRUN pip install /tmp/vtk-9.0.20201105-cp38-cp38-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Object Wrapper Classes in Python\nDESCRIPTION: This snippet defines a dictionary that maps VTK class names to their corresponding PyVista wrapper classes. It's used for automatic type conversion when working with VTK objects in PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/namespace/namespace-top.txt#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_wrappers = {'vtkExplicitStructuredGrid': <class 'pyvista.core.pointset.ExplicitStructuredGrid'>, 'vtkUnstructuredGrid': <class 'pyvista.core.pointset.UnstructuredGrid'>, 'vtkRectilinearGrid': <class 'pyvista.core.grid.RectilinearGrid'>, 'vtkStructuredGrid': <class 'pyvista.core.pointset.StructuredGrid'>, 'vtkPolyData': <class 'pyvista.core.pointset.PolyData'>, 'vtkImageData': <class 'pyvista.core.grid.UniformGrid'>, 'vtkStructuredPoints': <class 'pyvista.core.grid.UniformGrid'>, 'vtkMultiBlockDataSet': <class 'pyvista.core.composite.MultiBlock'>, 'vtkTable': <class 'pyvista.core.objects.Table'>, 'vtkPointSet': <class 'pyvista.core.pointset.PointSet'>}\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista with pip\nDESCRIPTION: Command for installing PyVista from PyPI using pip. Requires Python 3.9 or newer.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyvista\n```\n\n----------------------------------------\n\nTITLE: Converting Vector Arrays to RGB Values in Python\nDESCRIPTION: A function that converts vector arrays to RGB values based on their directions. It uses normalized vectors and maps them to the RGB color space, useful for visualization of directional data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef vectors_from_normals(mesh, **kwargs):\n    \"\"\"\n    Calculate vectors from normals.\n\n    This function is deprecated. Use mesh.arrows_from_normals instead.\n\n    Return\n    ------\n    pyvista.PolyData\n        Dataset with glyphs pointing in normal direction.\n\n    \"\"\"\n    import warnings\n    warnings.warn(\"vectors_from_normals is deprecated. Use mesh.arrows_from_normals instead.\", \n                  np.VisibleDeprecationWarning, stacklevel=2)\n    return mesh.arrows_from_normals(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Building ManyLinux VTK Wheels with Docker\nDESCRIPTION: Script for building VTK wheels using manylinux Docker image for better ABI compatibility across Linux distributions. The build_wheels.sh script handles dependencies, CMake configuration, and wheel creation with auditwheel repair for various Python versions.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# builds python wheels on docker container and tests installation\n\nset -e -x\n\n# build based on python version from args\nPYTHON_VERSION=\"$1\"\ncase $PYTHON_VERSION in\n3.9)\n  PYBIN=\"/opt/python/cp39-cp39/bin/python\"\n  ;;\n3.10)\n  PYBIN=\"/opt/python/cp310-cp310/bin/python\"\n  ;;\n3.11)\n  PYBIN=\"/opt/python/cp311-cp311/bin/python\"\n  ;;\nesac\n\nyum install -y ninja-build cmake mesa-libGL-devel mesa-libGLU-devel\n\nrm -rf /io/build\nmkdir /io/build -p\ncd /io/build\n\ncmake -GNinja \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DVTK_BUILD_TESTING=OFF \\\n      -DVTK_BUILD_DOCUMENTATION=OFF \\\n      -DVTK_BUILD_EXAMPLES=OFF \\\n      -DVTK_DATA_EXCLUDE_FROM_ALL:BOOL=ON \\\n      -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \\\n      -DVTK_MODULE_ENABLE_VTK_WebCore:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebGLExporter:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebPython:STRING=YES \\\n      -DVTK_WHEEL_BUILD=ON \\\n      -DVTK_PYTHON_VERSION=3 \\\n      -DVTK_WRAP_PYTHON=ON \\\n      -DVTK_OPENGL_HAS_EGL=False \\\n      -DPython3_EXECUTABLE=$PYBIN ../\nninja-build\n\n# build wheel in dist\nrm -rf dist\n$PYBIN -m pip install wheel\n$PYBIN setup.py bdist_wheel\n\n# cleanup wheel\nrm -rf wheelhouse\nauditwheel repair dist/*.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Trame Jupyter Extension for Jupyter Lab 3.x\nDESCRIPTION: Bash command to install a compatible version of Trame Jupyter Extension specifically for Jupyter Lab 3.x environments.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install \"trame_jupyter_extension<2\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Local VTK Data Repository for PyVista\nDESCRIPTION: Commands to clone the PyVista VTK data repository locally and set the PYVISTA_VTK_DATA environment variable to use local data files instead of downloading them.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/vtk_data.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pyvista/vtk-data.git path/to/repo/vtk-data  # change the path\nexport PYVISTA_VTK_DATA=path/to/repo/vtk-data  # change the path\n```\n\n----------------------------------------\n\nTITLE: Accessing PyVista's Local Examples Cache Path\nDESCRIPTION: This snippet shows how to retrieve the local cache path for PyVista examples on a Linux system.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/examples/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> # Get the local examples path on Linux\n>>> examples.PATH\n'/home/user/.cache/pyvista_3'\n```\n\n----------------------------------------\n\nTITLE: Plotting a Disc with PyVista and Adding a Caption\nDESCRIPTION: This example shows how to create a plot of a disc using PyVista and add a caption to it. It uses the :caption: option to specify the text that appears below the plot.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\npyvista.Disc().plot()\n```\n\n----------------------------------------\n\nTITLE: Building VTK with EGL for Off-Screen GPU Rendering\nDESCRIPTION: Script for building VTK with EGL support for accelerated off-screen rendering. This configuration enables GPU hardware acceleration without requiring a virtual framebuffer, ideal for headless systems and remote visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# install build dependencies (Linux/Debian)\napt-get update\napt-get install -y ninja-build cmake libegl1-mesa-dev python3-dev\n\n# build using EGL\ngit clone https://github.com/Kitware/VTK\nmkdir VTK/build\ncd VTK/build \\\ngit checkout v9.1.0\ncd /VTK/build\ncmake -GNinja \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DVTK_BUILD_TESTING=OFF \\\n  -DVTK_BUILD_DOCUMENTATION=OFF \\\n  -DVTK_BUILD_EXAMPLES=OFF \\\n  -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \\\n  -DVTK_MODULE_ENABLE_VTK_WebCore:STRING=YES \\\n  -DVTK_MODULE_ENABLE_VTK_WebGLExporter:STRING=YES \\\n  -DVTK_MODULE_ENABLE_VTK_WebPython:STRING=YES \\\n  -DVTK_WHEEL_BUILD=ON \\\n  -DVTK_PYTHON_VERSION=3 \\\n  -DVTK_WRAP_PYTHON=ON \\\n  -DVTK_OPENGL_HAS_EGL:BOOL=ON \\\n  -DVTK_USE_X:BOOL=OFF \\\n  -DVTK_USE_COCOA:BOOL=OFF \\\n  -DVTK_DEFAULT_RENDER_WINDOW_HEADLESS:BOOL=ON \\\n  -DPython3_EXECUTABLE=/usr/bin/python3 ../\nninja\n\n# build the python wheel\npython3 -m pip install wheel \\\npython3 setup.py bdist_wheel \\\npip install dist/vtk-*.whl\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecation Warnings in Python\nDESCRIPTION: Example of how to write tests for deprecated functions using pytest, including version checks for conversion to errors and function removal.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.warns(PyVistaDeprecationWarning):\n    addition(a, b)\n    if pv._version.version_info[:2] > (0, 40):\n        raise RuntimeError(\"Convert error this function\")\n    if pv._version.version_info[:2] > (0, 41):\n        raise RuntimeError(\"Remove this function\")\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista Environment with Miniconda\nDESCRIPTION: This bash script sets up a Miniconda environment with PyVista and necessary dependencies. It includes steps for installing Miniconda, creating a virtual environment, and installing required packages.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\nbash miniconda.sh -b -p miniconda\necho '. $HOME/miniconda/etc/profile.d/conda.sh' >> ~/.bashrc && source ~/.bashrc\nconda create --name vtk_env python=3.9\nconda activate vtk_env\nconda install nodejs  # required when importing pyvista in Jupyter\npip install jupyter pyvista[jupyter] trame\n\n# To avoid \"ModuleNotFoundError: No module named 'vtkOpenGLKitPython' \" when importing vtk\n# https://stackoverflow.com/q/32389599\n# https://askubuntu.com/q/629692\nsudo apt update && sudo apt install python-qt4 libgl1-mesa-glx\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Display for VTK Rendering\nDESCRIPTION: This bash script sets up a headless display using Xvfb for VTK rendering in a headless environment. It installs Xvfb, sets necessary environment variables, and starts the virtual framebuffer.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install xvfb\nexport DISPLAY=:99.0\nexport PYVISTA_OFF_SCREEN=true\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nsleep 3\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Plots with PyVista\nDESCRIPTION: This snippet demonstrates how to create multiple plots in a single code block using PyVista. It creates two Text3D objects with different texts and plots them separately.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\npyvista.Text3D('hello').plot()\n\npyvista.Text3D('world').plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom PyVista Docker Container\nDESCRIPTION: Commands to clone the PyVista repository, build a custom Docker image, and push it to a registry.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pyvista/pyvista\ncd pyvista/docker\nIMAGE=my-pyvista-jupyterlab:v0.1.0\ndocker build -t $IMAGE .\ndocker push $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecation Warning in Python\nDESCRIPTION: Shows how to properly deprecate a function in PyVista using PyVistaDeprecationWarning and Sphinx deprecated directive. Includes version tracking for conversion to error and eventual removal.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\nfrom pyvista.core.errors import PyVistaDeprecationWarning\n\n\ndef addition(a, b):\n    \"\"\"Add two numbers.\n\n    .. deprecated:: 0.37.0\n       Since PyVista 0.37.0, you can use :func:`pyvista.add` instead.\n\n    Parameters\n    ----------\n    a : float\n        First term to add.\n\n    b : float\n        Second term to add.\n\n    Returns\n    -------\n    float\n        Sum of the two inputs.\n\n    \"\"\"\n    # deprecated 0.37.0, convert to error in 0.40.0, remove 0.41.0\n    warnings.warn(\n        '`addition` has been deprecated. Use pyvista.add instead',\n        PyVistaDeprecationWarning,\n    )\n    add(a, b)\n\n\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n\n    pass  # implementation goes here\n```\n\n----------------------------------------\n\nTITLE: Using the New Dataset Download Function in Python\nDESCRIPTION: This snippet shows how to use the newly created download function to obtain the dataset in a Python script.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyvista import examples\n>>> dataset = examples.download_my_new_mesh()\n```\n\n----------------------------------------\n\nTITLE: Importing PyVista Parametric Surface Functions\nDESCRIPTION: This code snippet shows the import statement for PyVista's parametric surface functions. It sets up the current module for the subsequent function listings.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/parametric.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: pyvista\n```\n\n----------------------------------------\n\nTITLE: Building Local PyVista Docker Image\nDESCRIPTION: Steps to build a local PyVista Docker image, including installing build dependencies, creating a source distribution, and building the Docker image using a custom Dockerfile.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install build\npython -m build --sdist\ndocker build -t my-pyvista-jupyterlab -f docker/jupyter.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Running Type Hint Tests with Mypy\nDESCRIPTION: Executes Mypy to check type hints for a specific function call. This is part of the input validation testing suite.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmypy -c \"from pyvista.core._validation import validate_array; reveal_type(validate_array([1.0]))\" | grep \\<string\\>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx-Gallery for PyVista Dynamic 3D Scenes\nDESCRIPTION: This Python code configures Sphinx-Gallery to work with PyVista for generating dynamic 3D scenes. It sets up the DynamicScraper and adds necessary extensions for embedding interactive 3D visualizations in the documentation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nfrom pyvista.plotting.utilities.sphinx_gallery import DynamicScraper\n\n# necessary when building the sphinx gallery\npyvista.BUILDING_GALLERY = True\npyvista.OFF_SCREEN = True\n\n# Optional - set parameters like theme or window size\npyvista.set_plot_theme('document')\npyvista.global_theme.window_size = np.array([1024, 768]) * 2\n\nextensions = [\n    ...,\n    \"sphinx_gallery.gen_gallery\",\n    \"pyvista.ext.viewer_directive\",\n]\n\n# Add the PyVista image scraper to SG\nsphinx_gallery_conf = {\n    ...: ...,\n    \"image_scrapers\": (DynamicScraper(), ...),\n    ...: ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista with Development Dependencies\nDESCRIPTION: Command to install PyVista with all packages required for development.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e '[dev]'\n```\n\n----------------------------------------\n\nTITLE: Creating a Matplotlib Plot in PyVista Documentation\nDESCRIPTION: This example shows how to include a Matplotlib plot alongside PyVista plots in the documentation. It creates a simple sine wave plot using Matplotlib.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2*np.pi)\nplt.plot(x, np.sin(x))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Display for MyBinder\nDESCRIPTION: Bash script for setting up a headless display environment for running PyVista on MyBinder. This script configures the virtual display, sets PyVista to off-screen mode, and starts Xvfb.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -x\nexport DISPLAY=:99.0\nexport PYVISTA_OFF_SCREEN=true\nwhich Xvfb\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nsleep 3\nset +x\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Running Image Regression Tests with pytest\nDESCRIPTION: Executes image regression tests and resets the image cache. This is used to verify that plotting functionality remains consistent.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/plotting --reset_image_cache\n```\n\n----------------------------------------\n\nTITLE: Importing PyVista Image Classes in Python\nDESCRIPTION: This code snippet demonstrates how to import various image source classes from the PyVista library. These classes are used to generate different types of 2D image data, including ellipsoids, Gaussian distributions, grids, Mandelbrot sets, noise, and sinusoids.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/utilities/image.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyvista import (\n    ImageEllipsoidSource,\n    ImageGaussianSource,\n    ImageGridSource,\n    ImageMandelbrotSource,\n    ImageNoiseSource,\n    ImageSinusoidSource\n)\n```\n\n----------------------------------------\n\nTITLE: Parallel Documentation Build in Bash\nDESCRIPTION: Command to build documentation in parallel, improving build time on multi-core systems.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake -C doc phtml\n```\n\n----------------------------------------\n\nTITLE: Documenting New Parameters with Version Information\nDESCRIPTION: Shows how to document a new parameter addition to an existing method using the versionadded Sphinx directive.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef Cube(clean=True):\n    \"\"\"Create a cube.\n\n    Parameters\n    ----------\n    clean : bool, default: True\n        Whether to clean the raw points of the mesh.\n\n        .. versionadded:: 0.33.0\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Lab for PyVista Visualization\nDESCRIPTION: This bash command starts Jupyter Lab with specific configurations for PyVista visualization. It disables token authentication and sets the port to 8888.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njupyter lab --NotebookApp.token='' --no-browser --port=8888\n```\n\n----------------------------------------\n\nTITLE: Defining Color Character to Word Mapping in Python\nDESCRIPTION: This snippet defines a dictionary that maps single-character color codes to their corresponding color names. It's used for color specification in PyVista plotting functions.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/namespace/namespace-top.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncolor_char_to_word = {'b': 'blue', 'g': 'green', 'r': 'red', 'c': 'cyan', 'm': 'magenta', 'y': 'yellow', 'k': 'black', 'w': 'white'}\n```\n\n----------------------------------------\n\nTITLE: Tagging PyVista Release Version in Git\nDESCRIPTION: This command creates a Git tag for the current PyVista version. It uses Python to import PyVista and extract its version number, then uses that to create a Git tag.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v$(python -c \"import pyvista as pv; print(pv.__version__)\")\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running PyVista Docker Image\nDESCRIPTION: Commands to pull the latest PyVista Docker image from GitHub Packages and run it, exposing port 8888 for Jupyter Lab access.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/pyvista/pyvista:latest\ndocker run -p 8888:8888 ghcr.io/pyvista/pyvista:latest\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Section for PyVista Examples\nDESCRIPTION: This RST code defines a section for PyVista examples, including a reference anchor and a header. It also provides a brief introduction to the examples gallery.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/examples/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _examples:\n\nExamples\n========\n\nHere is a gallery of several examples demonstrating what PyVista can\ndo.\n\nAll of these examples are live and available on MyBinder.\n```\n\n----------------------------------------\n\nTITLE: Pushing PyVista Release Branch and Tag to Git\nDESCRIPTION: These commands push the current HEAD and the newly created version tag to the origin repository. The version tag is dynamically generated using Python to import PyVista and get its version number.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin HEAD\ngit push origin v$(python -c \"import pyvista as pv; print(pv.__version__)\")\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Drivers in Docker Container\nDESCRIPTION: Dockerfile commands to install NVIDIA drivers in a Docker container without building the kernel module.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nCOPY NVIDIA-Linux-x86_64-450.51.06.run nvidia_drivers.run\nRUN sudo apt-get install kmod libglvnd-dev pkg-config -yq\nRUN ./NVIDIA-Linux-x86_64-450.51.06.run -s --no-kernel-module\n```\n\n----------------------------------------\n\nTITLE: Building Standard VTK Python Wheel\nDESCRIPTION: Script for building a standard VTK Python wheel from source using Ninja build system. Includes steps for installing dependencies on Debian/Ubuntu and CentOS, cloning the repository, configuring with CMake, and building the wheel.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Install build dependencies\n\n# Linux/Debian\nsudo add-apt-repository -y ppa:deadsnakes/ppa  # if on Ubuntu 20.04 or 18.04, building 3.10 for example\nsudo apt update\nsudo apt install -y ninja-build cmake libgl1-mesa-dev python3-dev git\nsudo apt install -y python3.10-dev python3.10-distutils  # if using deadsnakes + Python 3.10\n# If on 18.04, you'll need a newer cmake. You can follow VTK's instructions @ https://apt.kitware.com\n\n# Linux/CentOS\nsudo yum install epel-release\nsudo yum install ninja-build cmake mesa-libGL-devel mesa-libGLU-devel\n\ngit clone https://gitlab.kitware.com/vtk/vtk.git\nmkdir vtk/build\ncd vtk/build\ngit checkout v9.1.0  # optional to select a version, but recommended\n\nexport PYBIN=/usr/bin/python3.10  # select your version of choice\ncmake -GNinja \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DVTK_BUILD_TESTING=OFF \\\n      -DVTK_BUILD_DOCUMENTATION=OFF \\\n      -DVTK_BUILD_EXAMPLES=OFF \\\n      -DVTK_DATA_EXCLUDE_FROM_ALL:BOOL=ON \\\n      -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \\\n      -DVTK_MODULE_ENABLE_VTK_WebCore:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebGLExporter:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebPython:STRING=YES \\\n      -DVTK_WHEEL_BUILD=ON \\\n      -DVTK_PYTHON_VERSION=3 \\\n      -DVTK_WRAP_PYTHON=ON \\\n      -DVTK_OPENGL_HAS_EGL=False \\\n      -DPython3_EXECUTABLE=$PYBIN ../\nninja\n\n# build wheel in dist\n$PYBIN -m pip install wheel\n$PYBIN setup.py bdist_wheel\n$PYBIN -m pip install dist/vtk-*.whl  # optionally install it\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Image Generation\nDESCRIPTION: Runs tests matching 'volume' in the plotting directory and saves generated images for debugging.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/plotting/ -k volume --generated_image_dir debug_images\n```\n\n----------------------------------------\n\nTITLE: Embedding MyBinder Badge in ReStructuredText\nDESCRIPTION: This RST code embeds a MyBinder badge image with a link to launch the PyVista examples repository on MyBinder. It includes alt text for accessibility.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/examples/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: https://static.mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/pyvista/pyvista-examples/master\n   :alt: Launch on Binder\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx-Gallery for PyVista Static Images\nDESCRIPTION: This Python code configures Sphinx-Gallery to work with PyVista for generating static images. It sets up necessary PyVista parameters and adds the PyVista image scraper to the Sphinx-Gallery configuration.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\n\n# necessary when building the sphinx gallery\npyvista.BUILDING_GALLERY = True\npyvista.OFF_SCREEN = True\n\n# Optional - set parameters like theme or window size\npyvista.set_plot_theme('document')\npyvista.global_theme.window_size = np.array([1024, 768]) * 2\n\nextensions = [\n    ...,\n    \"sphinx_gallery.gen_gallery\",\n]\n\n# Add the PyVista image scraper to SG\nsphinx_gallery_conf = {\n    ...: ...,\n    \"image_scrapers\": ('pyvista', ...),\n    ...: ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Running PyVista Docker Container with JupyterLab\nDESCRIPTION: Command to pull and run the official PyVista Docker image with JupyterLab exposed on port 8888.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8888:8888 ghcr.io/pyvista/pyvista:latest\n```\n\n----------------------------------------\n\nTITLE: Plotting with VTK\nDESCRIPTION: This snippet demonstrates how to set up a plot using VTK. It involves creating actors, renderers, and interactors to visualize the data.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/vtk_to_pyvista.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> actor = vtk.vtkImageActor()\n>>> actor.GetMapper().SetInputData(image_data)\n>>> ren = vtk.vtkRenderer()\n>>> renWin = vtk.vtkRenderWindow()\n>>> renWin.AddRenderer(ren)\n>>> renWin.SetWindowName('ReadSTL')\n>>> iren = vtk.vtkRenderWindowInteractor()\n>>> iren.SetRenderWindow(renWin)\n>>> ren.AddActor(actor)\n>>> iren.Initialize()\n>>> renWin.Render()\n>>> iren.Start()\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation Template with Jinja2\nDESCRIPTION: A Jinja2 template for Sphinx documentation that structures class documentation with method and attribute sections. It includes special handling for different PyVista classes like Plotter, DataSetMapper, and ImageData, and filters inherited members according to specific rules.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/_templates/autosummary/class.rst#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n\n   {% if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in methods %}\n      {% if not item in skipmethods %}\n        {% if name == 'Plotter' or item not in inherited_members %}\n          {{ name }}.{{ item }}\n        {% endif %}\n      {% endif %}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in attributes %}\n      {% if name == 'Plotter' or name == 'DataSetMapper' or name == 'ImageData' or item not in inherited_members %}\n        {% if item.0 != item.upper().0 %}\n          {{ name }}.{{ item }}\n        {% endif %}\n      {% endif %}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Building VTK Wheel for Raspberry Pi (64-bit)\nDESCRIPTION: Command for building VTK wheels for 64-bit ARM architecture (aarch64) using the manylinux Docker image. This is specifically for Raspberry Pi and other ARM-based systems running 64-bit Linux.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPYTHON_VERSION=3.9\nrm -rf build\ndocker run -e \\\n       --rm -v `pwd`:/io quay.io/pypa/manylinux2014_aarch64 \\\n       /io/build_wheels.sh $PYTHON_VERSION\n```\n\n----------------------------------------\n\nTITLE: Building VTK with OSMesa for CPU-Based Visualization\nDESCRIPTION: Script for building VTK with OSMesa support, which provides higher visualization performance on CPU-based hosts. This is an alternative to using xvfb and is useful when GPU acceleration is not available.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libosmesa6-dev cmake ninja-build\n\ngit clone https://github.com/Kitware/VTK.git\ncd VTK\ngit checkout v9.1.0\nmkdir build\ncd build\n\nPYBIN=/usr/bin/python\ncmake -GNinja \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DVTK_BUILD_TESTING=OFF \\\n      -DVTK_BUILD_DOCUMENTATION=OFF \\\n      -DVTK_BUILD_EXAMPLES=OFF \\\n      -DVTK_DATA_EXCLUDE_FROM_ALL:BOOL=ON \\\n      -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \\\n      -DVTK_MODULE_ENABLE_VTK_WebCore:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebGLExporter:STRING=YES \\\n      -DVTK_MODULE_ENABLE_VTK_WebPython:STRING=YES \\\n      -DVTK_WHEEL_BUILD=ON \\\n      -DVTK_PYTHON_VERSION=3 \\\n      -DVTK_WRAP_PYTHON=ON \\\n      -DVTK_OPENGL_HAS_EGL=False \\\n      -DVTK_OPENGL_HAS_OSMESA=True \\\n      -DVTK_USE_COCOA=FALSE \\\n      -DVTK_USE_X=FALSE \\\n      -DVTK_DEFAULT_RENDER_WINDOW_HEADLESS=True \\\n      -DPython3_EXECUTABLE=$PYBIN ../\nninja\n$PYBIN setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Forcing Static Plots in PyVista Documentation\nDESCRIPTION: Example of how to force static plots in PyVista documentation using RST directives and Python comments.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_22\n\nLANGUAGE: rst\nCODE:\n```\n.. pyvista-plot::\n   :force_static:\n\n   >>> import pyvista as pv\n   >>> # Your example code here\n   >>> # ...\n   >>> mesh = pv.sphere()\n   >>> mesh.plot()\n```\n\nLANGUAGE: python\nCODE:\n```\n# sphinx_gallery_start_ignore\nPYVISTA_GALLERY_FORCE_STATIC_IN_DOCUMENT = True\n# sphinx_gallery_end_ignore\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Plotting a Plane with PyVista\nDESCRIPTION: This example shows how to define variables in a context block and create a plot. It sets a variable 'a', imports pyvista, and plots a 3D plane.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\na = 10\nimport pyvista\npyvista.Plane().plot()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Warning Block for Documentation Issue\nDESCRIPTION: This RST directive creates a warning block to notify users about an ongoing documentation issue related to the Sphinx and numpydoc handling of the trame module.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/trame.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   We are having an issue with Sphinx and numpydoc documenting this module\n   because it is not in the top level namespace of the PyVista package.\n   We will fix this later\n```\n\n----------------------------------------\n\nTITLE: Plotting a Cube with PyVista Using Skip Option\nDESCRIPTION: This snippet demonstrates the use of the :skip: option in PyVista plots. It creates a plot of a cube that will never be skipped during documentation generation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\npyvista.Cube().plot()\n```\n\n----------------------------------------\n\nTITLE: Including Authors List in reStructuredText\nDESCRIPTION: This snippet includes the content of the AUTHORS.rst file into the current document using reStructuredText's include directive.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/authors.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../../AUTHORS.rst\n```\n\n----------------------------------------\n\nTITLE: Running ManyLinux Docker Build\nDESCRIPTION: Command to execute the ManyLinux wheel building script within a Docker container. This specifies the Python version and mounts the local directory to the container for building the wheel.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHON_VERSION=3.10\ndocker run --cpus 4.5 -e \\\n       --rm -v `pwd`:/io quay.io/pypa/manylinux2014_x86_64 \\\n       /io/build_wheels.sh $PYTHON_VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing PyVista with Trame Support for Jupyter\nDESCRIPTION: Bash command to install JupyterLab, ipywidgets, and PyVista with all dependencies and Trame support for interactive 3D visualization.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install 'jupyterlab>=3' ipywidgets 'pyvista[all,trame]'\n```\n\n----------------------------------------\n\nTITLE: Running Docstring Tests in Python\nDESCRIPTION: Executes all code examples in the docstrings using pytest. This ensures that documented code examples are valid and up-to-date.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -v --doctest-modules pyvista\n```\n\n----------------------------------------\n\nTITLE: Specifying dependency versions for pyvista/pyvista\nDESCRIPTION: This snippet defines the version constraints for the project's dependencies. It includes trame and related packages with specific version ranges to ensure compatibility.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/examples_trame/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrame>=2.5.2,<3.8.3\ntrame-server>=3.2.6,<3.5.0\ntrame-vtk>=2.8.13,<2.9.0\ntrame-vuetify>=2.3.1,<3.0.1\n```\n\n----------------------------------------\n\nTITLE: Asserting Variable Presence in PyVista Plot Context\nDESCRIPTION: This snippet demonstrates that a variable defined in a previous context block is accessible. It asserts that the variable 'a' exists and has the expected value.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassert a == 10\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data in Python with NumPy\nDESCRIPTION: Example of how to generate reproducible random data using NumPy's random number generator with a seed.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nrng = np.random.default_rng(seed=0)\nrng.random()  # generate a floating point number between 0 and 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all user agents (web crawlers/bots) to access all parts of the website or repository. The wildcard (*) specifies all crawlers, and the Allow directive grants permission to crawl all paths.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/_extra/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: / # Allow everything\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter with SSH Port Forwarding for Remote PyVista\nDESCRIPTION: Bash commands for reconnecting to a server with SSH port forwarding and starting JupyterLab for remote PyVista visualization. Includes activating the conda environment and configuring Jupyter server options.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/installation.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nssh -i \"your-ssh-key\" your-user-name@your-server-ip -L 8888:localhost:8888\nconda activate vtk_env\njupyter lab --NotebookApp.token='' --no-browser --port=8888\n```\n\n----------------------------------------\n\nTITLE: Installing Trame Jupyter Extension\nDESCRIPTION: Bash command to install the Trame Jupyter Extension, which enables communication over Jupyter Comms without requiring a separate WebSocket connection.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install trame_jupyter_extension\n```\n\n----------------------------------------\n\nTITLE: Testing Interactive Plot File Size in Bash\nDESCRIPTION: Command to test the file size of interactive plots generated in the documentation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/doc/tst_doc_images.py::test_interactive_plot_file_size\n```\n\n----------------------------------------\n\nTITLE: Normalizing Unit Vectors in Python\nDESCRIPTION: A utility function for normalizing direction vectors to unit vectors. It scales input vectors to have a magnitude of 1 and handles both single vectors and arrays of vectors.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/styles/Vocab/pyvista/reject.txt#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef normalize(vector, tolerance=1e-15):\n    \"\"\"\n    Normalize a vector.\n\n    Return\n    ------\n    numpy.ndarray\n        Normalized vector(s).\n\n    \"\"\"\n    if isinstance(vector, collections.abc.Sequence) and not isinstance(vector, np.ndarray):\n        vector = np.asarray(vector)\n\n    # Check if a scalar has been passed\n    if vector.ndim == 0:\n        raise ValueError('Vector must have at least 1 dimension')\n\n    # Check if we've been passed a single vector\n    vec_dim = vector.ndim\n    if vec_dim == 1:\n        vector = vector.reshape(1, -1)\n\n    # Normalize\n    # We don't use linalg.norm as we need to perform these operations on each row\n    mag = np.sqrt(np.sum(vector**2, axis=1))\n    mask = mag > tolerance\n    vector[mask, :] /= mag[mask, np.newaxis]\n\n    # Return with original dimensions (if a single vector was passed)\n    if vec_dim == 1:\n        vector = vector.ravel()\n\n    return vector\n```\n\n----------------------------------------\n\nTITLE: Running Vale for Documentation Style Checking\nDESCRIPTION: Command to run Vale locally for checking documentation style in the PyVista project.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install vale\nvale --config doc/.vale.ini doc pyvista examples ./*.rst --glob='!*{_build,AUTHORS.rst}*'\n```\n\n----------------------------------------\n\nTITLE: Documenting PyVista Sample Functions with Autosummary\nDESCRIPTION: This reStructuredText code snippet sets up autosummary documentation for various PyVista sample functions. It includes sphere creation functions and examples with plotters.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_autodocs.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n###################\nAutosummary Testing\n###################\n\n.. currentmodule:: samples\n\n.. autofunction:: make_sphere\n\n.. autofunction:: make_sphere_second\n\n.. autofunction:: example_with_empty_plotter\n\n.. autofunction:: example_with_closed_plotter\n```\n\n----------------------------------------\n\nTITLE: Installing VTK with OSMesa Support for CPU Rendering\nDESCRIPTION: Bash commands to uninstall regular VTK and install VTK with OSMesa support for offscreen rendering without GPU acceleration.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall vtk -y\npip install --no-cache-dir --extra-index-url https://wheels.vtk.org vtk-osmesa\n```\n\n----------------------------------------\n\nTITLE: Setting Jupyter Server Proxy Prefix Environment Variable\nDESCRIPTION: Bash command to set the environment variable that configures the server proxy prefix for PyVista's Trame backend in remote Jupyter environments.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/user-guide/jupyter/trame.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PYVISTA_TRAME_SERVER_PROXY_PREFIX='/proxy/'\n```\n\n----------------------------------------\n\nTITLE: Importing 'this' Module in Python\nDESCRIPTION: Code snippet demonstrating how to import the 'this' module, which prints \"The Zen of Python\".\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport this\n```\n\n----------------------------------------\n\nTITLE: Including External RST File in PyVista Documentation\nDESCRIPTION: This snippet demonstrates how to include an external RST file within another RST document. It specifically imports the main CONTRIBUTING.rst file from the project's root directory using the include directive.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/developer_notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _developer_notes:\n\n.. include:: ../../../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Documenting Plot3DFunctionEnum in PyVista using reStructuredText\nDESCRIPTION: This reStructuredText code creates documentation for the Plot3DFunctionEnum class within the PyVista library. It includes a section header, module specification, and an auto-enumeration directive to automatically generate documentation from the class definition.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/readers/enums.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nReader Enumerations\n===================\n\n.. currentmodule:: pyvista\n\nPlot3DFunctionEnum\n------------------\n.. autoenum:: Plot3DFunctionEnum\n```\n\n----------------------------------------\n\nTITLE: Running Style Checks with pre-commit\nDESCRIPTION: Installs pre-commit and runs style checks on all files. This ensures code meets PyVista's style standards based on PEP8.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Version and Build Environment for PyVista Wheel in Bash\nDESCRIPTION: This snippet sets up the build environment by selecting the appropriate Python binary based on the version argument and installing necessary dependencies. It prepares the system for building PyVista wheels.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# builds python wheels on docker container and tests installation\n\nset -e -x\n\n# build based on python version from args\nPYTHON_VERSION=\"$1\"\ncase $PYTHON_VERSION in\n3.9)\n  PYBIN=\"/opt/python/cp39-cp39/bin/python\"\n  ;;\n3.10)\n  PYBIN=\"/opt/python/cp310-cp310/bin/python\"\n  ;;\n3.11)\n  PYBIN=\"/opt/python/cp311-cp311/bin/python\"\n  ;;\nesac\n\n/bin/bash\nyum install epel-release\nyum install ninja-build\nyum install mesa-libEGL-devel  # only needed when building EGL\n\nmkdir /io/build -p\ncd /io/build\n```\n\n----------------------------------------\n\nTITLE: Asserting Variable Absence in PyVista Plot Context\nDESCRIPTION: This snippet demonstrates the use of context in PyVista plots. It asserts that a variable 'a' is not present in the global namespace, showing that each plot block has its own context.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/some_plots.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nassert 'a' not in globals()\n```\n\n----------------------------------------\n\nTITLE: Building Documentation on Linux/Mac\nDESCRIPTION: Generates the HTML documentation for PyVista using Sphinx on Linux or Mac OS.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake -C doc html\n```\n\n----------------------------------------\n\nTITLE: Building and Auditing PyVista Wheel Package in Bash\nDESCRIPTION: This snippet builds the PyVista wheel package, performs cleanup, and uses auditwheel to repair and finalize the wheel. It then copies the resulting wheel to the output directory.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/building_vtk.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# build wheel\nrm -rf dist\n$PYBIN setup.py bdist_wheel\n\n# cleanup wheel\nrm -rf wheelhouse\nauditwheel repair dist/*.whl\ncp wheelhouse/vtk*.whl /io/wheels\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit Hook\nDESCRIPTION: Sets up pre-commit as a git hook to automatically check style before each commit.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Building Documentation on Windows\nDESCRIPTION: Generates the HTML documentation for PyVista using Sphinx on Windows.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_16\n\nLANGUAGE: winbatch\nCODE:\n```\ncd doc\npython -msphinx -M html source _build\npython -msphinx -M html . _build\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Function for a New Dataset in Python\nDESCRIPTION: This snippet demonstrates how to create a download function for a new dataset in PyVista's examples module. It shows the structure of the function and how to use the _SingleFileDownloadableDatasetLoader.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef download_my_new_mesh(load=True):\n    \"\"\"Download my new mesh.\"\"\"\n    return _download_dataset(_dataset_my_new_mesh, load=load)\n\n\n_dataset_my_new_mesh = _SingleFileDownloadableDatasetLoader(\n    'mydata/my_new_mesh.vtk'\n)\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally\nDESCRIPTION: Starts a local HTTP server to view the generated documentation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmake serve-html\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Documentation Build in Bash\nDESCRIPTION: Commands to clear the locally built documentation, either completely or preserving the examples gallery.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmake -C doc clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -C doc clean-except-examples\n```\n\n----------------------------------------\n\nTITLE: Adding a New Carousel to the Dataset Gallery in RST\nDESCRIPTION: This snippet demonstrates how to include a newly created dataset carousel in the PyVista dataset gallery documentation using reStructuredText.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_28\n\nLANGUAGE: rst\nCODE:\n```\n.. dropdown:: Instrument Datasets\n   :name: instrument_gallery\n\n   .. include:: /api/examples/dataset-gallery/instrument_carousel.rst\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Template with Jinja2\nDESCRIPTION: A comprehensive Sphinx documentation template that uses Jinja2 templating to generate structured API documentation. The template creates sections for module attributes, functions, classes, exceptions, and submodules, using autosummary directives for automatic generation of documentation stubs.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/_templates/autosummary/module.rst#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. automodule:: {{ fullname }}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Module Attributes\n\n   .. autosummary::\n      :toctree:\n   {% for item in attributes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block functions %}\n   {% if functions %}\n   .. rubric:: {{ _('Functions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: {{ _('Classes') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: {{ _('Exceptions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{% block modules %}\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template:\n   :recursive:\n{% for item in modules %}\n   {{ item }}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Verifying NVIDIA GPU Support with nvidia-smi\nDESCRIPTION: Example output of the nvidia-smi command showing GPU information and driver version.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nvidia-smi\nSun Nov  8 05:48:46 2020\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Tesla K80           Off  | 00000001:00:00.0 Off |                    0 |\n| N/A   34C    P8    32W / 149W |   1297MiB / 11441MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Section for PyVista Lighting\nDESCRIPTION: ReStructuredText section defining the structure and content of lighting examples documentation, including a reference label and bullet points outlining various lighting control features.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/examples/04-lights/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _light_examples:\n\nLighting\n--------\n\nThese examples demonstrate how to take fine-tuned control over lighting conditions\nin a scene. Explore them to learn how to go beyond the default lighting setup to\ntruly bring out the best of your visualization:\n\n* Choose between preset lighting systems for plotters\n* Disable lighting on the mesh level\n* Learn about the different light types\n* Customize the shape of positional lights\n* Use actors to visualize the beams of spotlights\n```\n\n----------------------------------------\n\nTITLE: Running Image Regression Tests in Bash\nDESCRIPTION: Command to run image regression tests on documentation images using pytest.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/doc/tst_doc_images.py::test_static_images\n```\n\n----------------------------------------\n\nTITLE: Generating PyVista API Documentation with Sphinx and Jinja2\nDESCRIPTION: This template generates documentation for PyVista objects using Sphinx. It includes the full name of the object, sets the current module, and auto-generates documentation based on the object type.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/_templates/autosummary/base.rst#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. auto{{ objtype }}:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive for Trame API Reference\nDESCRIPTION: This RST directive sets up a reference label for the Trame API section in the documentation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/trame.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _trame_api:\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Style Check on Linux/macOS\nDESCRIPTION: Command to run documentation style check using Make on Linux or macOS systems.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CONTRIBUTING.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docstyle\n```\n\n----------------------------------------\n\nTITLE: Adding Index and Search Links in Sphinx Documentation\nDESCRIPTION: This snippet adds links to the general index, module index, and search functionality in the Sphinx documentation. These are standard features provided by Sphinx for easy navigation and searching within the documentation.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Sphinx Documentation\nDESCRIPTION: This snippet defines the table of contents for the Tinypages documentation using Sphinx's toctree directive. It includes links to 'some_plots' and 'some_autodocs' pages with a maximum depth of 2.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/tests/plotting/tinypages/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    some_plots\n    some_autodocs\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for PyVista\nDESCRIPTION: A BibTeX entry for citing the PyVista paper in academic publications. The citation references the 2019 paper by Sullivan and Kaszynski published in the Journal of Open Source Software.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/CITATION.rst#2025-04-17_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n@article{sullivan2019pyvista,\n  doi = {10.21105/joss.01450},\n  url = {https://doi.org/10.21105/joss.01450},\n  year = {2019},\n  month = {May},\n  publisher = {The Open Journal},\n  volume = {4},\n  number = {37},\n  pages = {1450},\n  author = {Bane Sullivan and Alexander Kaszynski},\n  title = {{PyVista}: {3D} plotting and mesh analysis through a streamlined interface for the {Visualization Toolkit} ({VTK})},\n  journal = {Journal of Open Source Software}\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Field Visualization with PyVista and NumPy\nDESCRIPTION: Advanced example showing PyVista's integration with NumPy to create and visualize a 3D vector field using arrows.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/why.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyvista\nimport numpy as np\n\nx, y, z = np.meshgrid(np.linspace(-5, 5, 20),\n                      np.linspace(-5, 5, 20),\n                      np.linspace(-5, 5, 5),\n                      indexing='ij')\n\npoints = np.empty((x.size, 3))\npoints[:, 0] = x.ravel('F')\npoints[:, 1] = y.ravel('F')\npoints[:, 2] = z.ravel('F')\n\ndirection = np.sin(points)**3\n\npl = pyvista.Plotter()\npl.add_arrows(points, direction, 0.5)\npl.show()\n```\n\n----------------------------------------\n\nTITLE: JupyterLab Server URL Example\nDESCRIPTION: Example output showing the URLs to access the JupyterLab server after running the Docker container.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/extras/docker.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTo access the notebook, open this file in a browser:\n    file:///home/jovyan/.local/share/jupyter/runtime/nbserver-6-open.html\nOr copy and paste one of these URLs:\n    http://861c873f6352:8888/?token=b3ac1f6397188944fb21e1f58b673b5b4e6f1ede1a84787b\n or http://127.0.0.1:8888/?token=b3ac1f6397188944fb21e1f58b673b5b4e6f1ede1a84787b\n```\n\n----------------------------------------\n\nTITLE: Reading Data Files with PyVista's Reader API\nDESCRIPTION: Demonstrates how to use PyVista's get_reader function to create a reader for a specific file from the examples module. This shows the file loading capabilities of PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyvista as pv\n>>> from pyvista import examples\n>>> reader = pv.get_reader(examples.hexbeamfile)\n>>> reader\n```\n\n----------------------------------------\n\nTITLE: Including Citation Information in reStructuredText\nDESCRIPTION: This snippet includes the content of the CITATION.rst file into the current document using reStructuredText's include directive.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/authors.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../../CITATION.rst\n```\n\n----------------------------------------\n\nTITLE: PyVista Chart Classes Import Reference\nDESCRIPTION: List of core chart classes available in PyVista's main module including Chart2D, ChartBox, ChartPie, and ChartMPL.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/api/plotting/charts/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nChart2D\nChartBox\nChartPie\nChartMPL\n```\n\n----------------------------------------\n\nTITLE: Including License Information in reStructuredText\nDESCRIPTION: This snippet includes the content of the LICENSE file into the current document under the 'License' section using reStructuredText's include directive.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/doc/source/getting-started/authors.rst#2025-04-17_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../../LICENSE\n```\n\n----------------------------------------\n\nTITLE: Citing PyVista in BibTex Format\nDESCRIPTION: BibTex citation for the PyVista paper published in the Journal of Open Source Software. This snippet provides the formatted citation for use in academic papers or research that utilizes PyVista.\nSOURCE: https://github.com/pyvista/pyvista/blob/main/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n@article{sullivan2019pyvista,\n  doi = {10.21105/joss.01450},\n  url = {https://doi.org/10.21105/joss.01450},\n  year = {2019},\n  month = {May},\n  publisher = {The Open Journal},\n  volume = {4},\n  number = {37},\n  pages = {1450},\n  author = {Bane Sullivan and Alexander Kaszynski},\n  title = {{PyVista}: {3D} plotting and mesh analysis through a streamlined interface for the {Visualization Toolkit} ({VTK})},\n  journal = {Journal of Open Source Software}\n}\n```"
  }
]