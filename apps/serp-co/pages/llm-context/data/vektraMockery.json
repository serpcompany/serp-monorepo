[
  {
    "owner": "vektra",
    "repo": "mockery",
    "content": "TITLE: Writing a Test with the Generated Mock\nDESCRIPTION: A Go test function that demonstrates how to use the generated mock implementation for testing. It creates a mock DB, sets expectations for method calls, and verifies the output.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/index.md#2025-04-23_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_getFromDB(t *testing.T) {\n\tmockDB := NewMockDB(t)\n\tmockDB.EXPECT().Get(\"ice cream\").Return(\"chocolate\").Once()\n\tflavor := getFromDB(mockDB)\n\tassert.Equal(t, \"chocolate\", flavor)\n}\n```\n\n----------------------------------------\n\nTITLE: Extended mockery configuration example\nDESCRIPTION: A more complex mockery configuration showcasing hierarchical parameter merging, template variables, and multiple interface configurations. This example demonstrates package-specific settings and creating multiple mock implementations of the same interface.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nall: False\ntemplate-data:\n  boilerplate-file: ./path/to/boilerplate.txt\ntemplate: testify\npackages:\n  github.com/vektra/example:\n    config:\n      # Make use of the template variables to place the mock in the same\n      # directory as the original interface.\n      dir: \"{{.InterfaceDir}}\"\n      filename: \"mocks_test.go\"\n      outpkg: \"{{.PackageName}}_test\"\n      structname: \"{{.Mock}}{{.InterfaceName}}\"\n    interfaces:\n      Foo:\n      Bar:\n        config:\n          # Make it unexported instead\n          structname: \"mock{{.InterfaceName}}\"\n      Baz:\n        # Create two mock implementations of Baz with different names.\n        configs:\n          - filename: \"mocks_baz_one_test.go\"\n            structname: \"MockBazOne\"\n          - filename: \"mocks_baz_two_test.go\"\n            structname: \"MockBazTwo\"\n  io:\n    config:\n      dir: path/to/io/mocks\n      filename: \"mocks_io.go\"\n```\n\n----------------------------------------\n\nTITLE: Example Mock Usage with Testify\nDESCRIPTION: Demonstrates how to use the generated mock in a test case with testify assertions\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage test\n\nimport (\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestRequesterMock(t *testing.T) {\n    m := NewMockRequester(t)\n    m.EXPECT().Get(\"foo\").Return(\"bar\", nil).Once()\n    retString, err := m.Get(\"foo\")\n    assert.NoError(t, err)\n    assert.Equal(t, retString, \"bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Golang Interface for Mocking\nDESCRIPTION: An example of a simple Go interface definition that can be mocked using Mockery. This interface defines a DB with a Get method that takes and returns a string.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype DB interface {\n\tGet(val string) string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Using the Interface\nDESCRIPTION: An example function that takes the DB interface as a parameter and calls its Get method. This function will be tested using the mock implementation.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nfunc getFromDB(db DB) string {\n\treturn db.Get(\"ice cream\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Matryer-Style Mock in a Go Test\nDESCRIPTION: This example demonstrates how to use a matryer-style mock in a Go test. It shows creating a mock Requester, defining its behavior, and making assertions on the result.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/matryer.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestRequesterMoq(t *testing.T) {\n    m := &MoqRequester{\n        GetFunc: func(path string) (string, error) {\n            fmt.Printf(\"Go path: %s\\n\", path)\n            return path + \"/foo\", nil\n        },\n    }\n    result, err := m.Get(\"/path\")\n    assert.NoError(t, err)\n    assert.Equal(t, \"/path/foo\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Once() method for sequenced return values in Mockery\nDESCRIPTION: Demonstrates how to use the .Once() method to configure a mock to return different values on successive calls with the same arguments. Each expectation will be consumed after a single matching call.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\n----------------------------------------\n\nTITLE: Using Times() method for controlling return values in Mockery\nDESCRIPTION: Shows how to use the .Times() method to specify how many times each return value should be provided. This allows more precise control over the mock's behavior across multiple matching calls.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\n----------------------------------------\n\nTITLE: Using mock.Anything with variadic arguments in Mockery\nDESCRIPTION: Example of using mock.Anything to match variadic arguments. The behavior depends on the 'unroll-variadic' configuration setting, which affects how mock.Anything is interpreted.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nm.On(\"Bar\", mock.Anything).Return(nil)\n```\n\n----------------------------------------\n\nTITLE: Running mockery with configuration\nDESCRIPTION: Example of running mockery using a configuration file to generate mock implementations. The command scans packages defined in the configuration and executes the template to create mock files.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mockery\n2025-03-14T23:42:17.014113000-05:00 INF Starting mockery config-file=/Users/landon/git/LandonTClipp/mockery/.mockery.yaml version=v0.0.0-dev\n2025-03-14T23:42:17.014258000-05:00 INF Parsing configured packages... version=v0.0.0-dev\n2025-03-14T23:42:17.527483000-05:00 INF Done parsing configured packages. version=v0.0.0-dev\n[...]\n2025-03-14T23:42:17.531239000-05:00 INF Executing template file=/Users/landon/git/LandonTClipp/mockery/internal/fixtures/mocks_test.go version=v0.0.0-dev\n2025-03-14T23:42:17.690601000-05:00 INF Writing template to file file=/Users/landon/git/LandonTClipp/mockery/internal/fixtures/mocks_test.go version=v0.0.0-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Mockery with YAML\nDESCRIPTION: A YAML configuration file for Mockery that specifies which interfaces to generate mocks for. This configuration targets the DB interface in the github.com/org/repo package.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n\tgithub.com/org/repo:\n\t\tinterfaces:\n\t\t\tDB:\n```\n\n----------------------------------------\n\nTITLE: Basic variadic arguments assertion in Go using Mockery\nDESCRIPTION: A typical assertion example for a function with variadic string arguments. This sets up a mock expectation for the Bar method with specific string arguments 'hello' and 'world'.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFoo(t *testing.T) {\n  m := NewMockFoo(t)\n  m.On(\"Bar\", \"hello\", \"world\").Return(nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing mockery configuration for a module\nDESCRIPTION: Demonstrates using the 'mockery init' command to bootstrap a configuration file for a specific module. This creates a basic .mockery.yml file that can be used to generate mocks.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mockery init github.com/vektra/mockery/v3/internal/fixtures\n2025-03-14T23:06:12.535709000-05:00 INF writing to file file=.mockery.yml version=v0.0.0-dev\n2025-03-14T23:06:12.536493000-05:00 INF done version=v0.0.0-dev\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Sample YAML configuration showing various configuration parameters for Mockery with their default values and descriptions\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrecursive: false\nreplace-type: {}\nbuild-tags: \"\"\nrequire-template-schema-exists: true\ntemplate: \"\"\ntemplate-data: {}\ntemplate-schema: \"{{.Template}}.schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Generated Mock Implementation\nDESCRIPTION: Auto-generated mock code using the testify template, including expecter struct and mock methods\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by mockery; DO NOT EDIT.\n// github.com/vektra/mockery\n\npackage test\n\nimport (\n    mock \"github.com/stretchr/testify/mock\"\n)\n\n\n// NewRequester creates a new instance of Requester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewRequester (t interface {\n    mock.TestingT\n    Cleanup(func())\n}) *Requester {\n   // ...\n}\n\n\n// Requester is an autogenerated mock type for the Requester type\ntype Requester struct {\n    mock.Mock\n}\n\ntype Requester_Expecter struct {\n    mock *mock.Mock\n}\n\nfunc (_m *Requester) EXPECT() *Requester_Expecter {\n    // ...\n}\n\n\n\n// Get provides a mock function for the type Requester\nfunc (_mock *Requester) Get(path string) (string, error) {\n    // ...\n}\n\n\n\n// Requester_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'\ntype Requester_Get_Call struct {\n    *mock.Call\n}\n\n\n\n// Get is a helper method to define mock.On call\n//  - path\nfunc (_e *Requester_Expecter) Get(path interface{}, ) *Requester_Get_Call {\n    // ...\n}\n\nfunc (_c *Requester_Get_Call) Run(run func(path string)) *Requester_Get_Call {\n   // ...\n}\n\nfunc (_c *Requester_Get_Call) Return(s string, err error) *Requester_Get_Call {\n    // ...\n}\n\nfunc (_c *Requester_Get_Call) RunAndReturn(run func(path string)(string, error)) *Requester_Get_Call {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface for Mocking in Go\nDESCRIPTION: This snippet shows the definition of a simple 'Requester' interface with a single 'Get' method, which will be mocked using matryer-style mocks.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/matryer.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage test\n\ntype Requester interface {\n    Get(path string) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Example behavior requiring multiple expectations with same arguments\nDESCRIPTION: A test scenario where a mock needs to return different values on successive calls with the same arguments. This example shows the behavior we want to test where the first call returns 'foo' and the second returns 'bar'.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Return \"foo\" on the first call\ngetter := NewGetter()\nassert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n```\n\n----------------------------------------\n\nTITLE: Distinguishing between variadic argument matching cases with proposed testify enhancement\nDESCRIPTION: Example showing how the proposed testify enhancement would allow clearer distinction between matching any number of arguments versus matching a single argument of any value.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// case 1\nm.On(\"Bar\", mock.Anything).Return(nil)\n// case 2\nm.On(\"Bar\", []interface{}{mock.Anything}).Return(nil)\n```\n\n----------------------------------------\n\nTITLE: Basic mockery YAML configuration\nDESCRIPTION: Example of a basic .mockery.yml configuration file generated by 'mockery init'. It includes global settings and package-specific configuration for generating mocks.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nall: false\ndir: '{{.InterfaceDir}}'\nfilename: mocks_test.go\nforce-file-write: false\nformatter: goimports\nlog-level: info\nstructname: {{.Mock}}{{.InterfaceName}}\npkgname: '{{.SrcPackageName}}'\nrecursive: false\ntemplate: testify\npackages:\n  github.com/vektra/mockery/v3/internal/fixtures:\n    config:\n      all: true\n```\n\n----------------------------------------\n\nTITLE: Config Source Examples\nDESCRIPTION: Examples showing how to specify configuration values through different sources including command line, environment variables, and YAML\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Command line\n--enable-feature=true\n\n# Environment variable\nMOCKERY_ENABLE_FEATURE=True\n\n# YAML configuration\nenable-feature: True\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Data in Mockery Go Templates\nDESCRIPTION: This snippet demonstrates how to access the template data in mockery, specifically showing how to reference the package name and iterate through imports. It uses Go template syntax to generate mock imports, including the testify/mock package that's essential for mocks.\nSOURCE: https://github.com/vektra/mockery/blob/v3/template/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage {{.PkgName}}\n\nimport (\n{{- range .Imports}}\n\t{{. | importStatement}}\n{{- end}}\n    mock \"github.com/stretchr/testify/mock\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Mockery via Docker\nDESCRIPTION: Commands to pull the Mockery Docker image and generate mocks for a project using Docker.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull vektra/mockery\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"$PWD\":/src -w /src vektra/mockery --all\n```\n\n----------------------------------------\n\nTITLE: Installing Mockery via Homebrew\nDESCRIPTION: Commands to install and upgrade Mockery using Homebrew package manager.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mockery\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew upgrade mockery\n```\n\n----------------------------------------\n\nTITLE: Configuring Mockery for Matryer-Style Mocks in YAML\nDESCRIPTION: This YAML configuration for Mockery specifies the use of the matryer template and sets up mocking for the Requester interface.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/matryer.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate: matryer\npackages:\n    github.com/vektra/mockery/v3/pkg/fixtures:\n        config:\n            dir: \"{{.InterfaceDir}}\"\n            filename: \"mocks_moq.go\"\n            pkgname: \"test\"\n            structname: \"Moq{{.InterfaceName}}\"\n        interfaces:\n            Requester:\n```\n\n----------------------------------------\n\nTITLE: Examining generated mock file header\nDESCRIPTION: Output showing the header of a mock file generated by mockery. It includes the package declaration, imports, and dependencies needed for the mock implementation.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ head -n 17 /Users/landon/git/LandonTClipp/mockery/internal/fixtures/mocks_test.go\n// Code generated by mockery; DO NOT EDIT.\n// github.com/vektra/mockery\n\npackage test\n\nimport (\n        \"encoding/json\"\n        \"io\"\n        \"net/http\"\n        \"unsafe\"\n\n        mock \"github.com/stretchr/testify/mock\"\n        http1 \"github.com/vektra/mockery/v3/internal/fixtures/12345678/http\"\n        \"github.com/vektra/mockery/v3/internal/fixtures/constraints\"\n        http0 \"github.com/vektra/mockery/v3/internal/fixtures/http\"\n        test \"github.com/vektra/mockery/v3/internal/fixtures/redefined_type_b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Original Mock Implementation Before Type Replacement\nDESCRIPTION: The mock implementation generated by Mockery before applying type replacement. The method signature uses the original rt1.RType1 type.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/replace-type.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Replace2 provides a mock function for the type RTypeReplaced1\nfunc (_mock *RTypeReplaced1) Replace1(f rt1.RType1) {\n    _mock.Called(f)\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Matryer-Style Mock in Go\nDESCRIPTION: This is an example of a generated matryer-style mock for the Requester interface. It includes the mock struct definition, method implementation, and call tracking.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/matryer.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by mockery; DO NOT EDIT.\n// github.com/vektra/mockery\n\npackage test\n\nimport (\n    \"sync\"\n)\n\n// Ensure, that MoqRequester does implement Requester.\n// If this is not the case, regenerate this file with moq.\nvar _ Requester = &MoqRequester{}\n\n// MoqRequester is a mock implementation of Requester.\n//\n//\tfunc TestSomethingThatUsesRequester(t *testing.T) {\n//\n//\t\t// make and configure a mocked Requester\n//\t\tmockedRequester := &MoqRequester{\n//\t\t\tGetFunc: func(path string) (string, error) {\n//\t\t\t\tpanic(\"mock out the Get method\")\n//\t\t\t},\n//\t\t}\n//\n//\t\t// use mockedRequester in code that requires Requester\n//\t\t// and then make assertions.\n//\n//\t}\ntype MoqRequester struct {\n    // GetFunc mocks the Get method.\n    GetFunc func(path string) (string, error)\n\n    // calls tracks calls to the methods.\n    calls struct {\n        // Get holds details about calls to the Get method.\n        Get []struct {\n            // Path is the path argument value.\n            Path string\n        }\n    }\n    lockGet sync.RWMutex\n}\n\n// Get calls GetFunc.\nfunc (mock *MoqRequester) Get(path string) (string, error) {\n   // ...\n}\n\n// GetCalls gets all the calls that were made to Get.\n// Check the length with:\n//\n//\tlen(mockedRequester.GetCalls())\nfunc (mock *MoqRequester) GetCalls() []struct {\n    Path string\n} {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Mock Implementation After Type Replacement\nDESCRIPTION: The mock implementation after applying type replacement where rt1.RType1 has been replaced with rt2.RType2 as specified in the configuration.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/replace-type.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Replace2 provides a mock function for the type RTypeReplaced1\nfunc (_mock *RTypeReplaced1) Replace1(f rt2.RType2) {\n    _mock.Called(f)\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Template in YAML\nDESCRIPTION: Example YAML configuration for specifying a remote template and its schema in Mockery.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate: https://raw.githubusercontent.com/vektra/mockery/refs/tags/v3.0.0-beta.8/e2e/test_template_exercise/exercise.templ\ntemplate-schema: https://raw.githubusercontent.com/vektra/mockery/refs/tags/v3.0.0-beta.8/e2e/test_template_exercise/exercise.templ.schema.json\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Mockery Template\nDESCRIPTION: Example JSON schema definition for a Mockery template, specifying allowed properties and their types.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"vektra/mockery testify mock\",\n    \"type\": \"object\",\n    \"additionalProperties\": false,\n    \"properties\": {\n      \"boilerplate-file\": {\n        \"type\": \"string\"\n      },\n      \"mock-build-tags\": {\n        \"type\": \"string\"\n      },\n      \"unroll-variadic\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"required\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a v2 Configuration Schema in YAML\nDESCRIPTION: Example of a Mockery v2 configuration file in YAML format showing various options including package configurations, interface specifications, and type replacements.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/v3.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nquiet: False\ndisable-version-string: True\nwith-expecter: True\nstructname: \"{{.InterfaceNameCamel}}\"\nfilename: \"{{.StructName}}_mock.go\"\noutpkg: mocks\ntags: \"custom2\"\nissue-845-fix: True\nresolve-type-alias: False\npackages:\n  github.com/vektra/mockery/v2/pkg/fixtures:\n    config:\n      all: True\n    interfaces:\n      RequesterVariadic:\n        config:\n          with-expecter: False\n        configs:\n          - structname: RequesterVariadicOneArgument\n            unroll-variadic: False\n          - structname: RequesterVariadic\n            unroll-variadic: True\n      ReplaceGeneric:\n        config:\n          replace-type:\n            - github.com/vektra/mockery/v2/pkg/fixtures.ReplaceGeneric[-TImport]=github.com/vektra/mockery/v2/pkg/fixtures/redefined_type_b.B\n            - github.com/vektra/mockery/v2/pkg/fixtures.ReplaceGeneric[TConstraint]=github.com/vektra/mockery/v2/pkg/fixtures/constraints.String\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface with External Types in Go\nDESCRIPTION: Example interface that imports external types which may need replacement in mock implementations. The interface depends on types from other packages that might need to be replaced.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/replace-type.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage replace_type\n\nimport (\n    \"github.com/vektra/mockery/v3/internal/fixtures/example_project/replace_type/rti/rt1\"\n    \"github.com/vektra/mockery/v3/internal/fixtures/example_project/replace_type/rti/rt2\"\n)\n\ntype RType interface {\n    Replace1(f rt1.RType1)\n}\n```\n\n----------------------------------------\n\nTITLE: Generated v3 Configuration in YAML\nDESCRIPTION: The translated Mockery v3 configuration file generated by the migration tool, showing the new structure with template data and other v3-specific changes.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/v3.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstructname: '{{.InterfaceNameCamel}}'\npkgname: mocks\ntemplate: testify\ntemplate-data:\n  with-expecter: true\npackages:\n  github.com/vektra/mockery/v2/pkg/fixtures:\n    config:\n      all: true\n    interfaces:\n      ReplaceGeneric:\n        config: {}\n      RequesterVariadic:\n        config:\n          template-data:\n            with-expecter: false\n        configs:\n          - structname: RequesterVariadicOneArgument\n            template-data:\n              unroll-variadic: false\n          - structname: RequesterVariadic\n            template-data:\n              unroll-variadic: true\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Command\nDESCRIPTION: Terminal command to run the mockery migrate tool with a v2 configuration file, showing the command output with information and warnings about breaking changes.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/v3.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mockery migrate --config ./.mockery_v2.yml\n2025-03-28T00:26:44.762164000-05:00 INF using config config=./.mockery_v2.yml version=v0.0.0-dev\n2025-03-28T00:26:44.762804000-05:00 INF writing v3 config config=./.mockery_v2.yml v3-config=.mockery_v3.yml version=v0.0.0-dev\n2025-03-28T00:26:44.762914000-05:00 WRN breaking changes detected that possibly require manual intervention. See table below. config=./.mockery_v2.yml version=v0.0.0-dev\n```\n\n----------------------------------------\n\nTITLE: Deprecation Table Display from Migration Tool\nDESCRIPTION: Terminal output showing the deprecation table generated by the migration tool, listing all breaking changes, deprecated parameters, and issues requiring manual intervention.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/v3.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│                                                              Deprecations                                                              │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ IDX  DEPRECATION TYPE      MESSAGE                                                                                                     │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 0    template-variable     InterfaceNameCamel template variable has been deleted. Use \"{{ .InterfaceName | camelcase }}\" instead       │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 1    deprecated-parameter  `tags` is no longer supported, parameter not migrated. Use `mock-build-tags` instead.                       │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 2    deprecated-parameter  `disable-func-mocks` permanently enabled in v3.                                                             │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 3    deprecated-parameter  `fail-on-missing` is permanently set to True in v3.                                                         │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 4    deprecated-parameter  `disable-version-string` is permanently set to True in v3.                                                  │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 5    deprecated-parameter  `issue-845-fix` is permanently set to true in v3.                                                           │\n├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n│ 6    deprecated-parameter  `replace-type` has moved to a new schema. Cannot automatically migrate. Please visit                        │\n│                            https://vektra.github.io/mockery/latest-v3/replace-type/ for more information.                              │\n╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Dynamically Fetching Latest Mockery Version for Installation\nDESCRIPTION: JavaScript code to fetch the latest Mockery version from GitHub API and display the installation command. It handles version comparison and caching in session storage.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = performance.now();\n\nfunction insert_installation_command(element_to_override,version){\n    element_to_override.innerHTML=`\n``` title=\"\"\ngo install github.com/vektra/mockery/v3@${version}\n```\n`;\n}\n\nfunction compareSemver(v1, v2) {\n    const parseVersion = (version) => {\n        const [main, preRelease] = version.replace(/^v/, \"\").split(\"-\");\n        const mainParts = main.split('.').map(Number);\n        const preParts = preRelease ? preRelease.split('.').map((part) => isNaN(part) ? part : Number(part)) : [];\n        return { mainParts, preParts };\n    };\n\n    const compareParts = (a, b) => {\n        for (let i = 0; i < Math.max(a.length, b.length); i++) {\n            const partA = a[i] || 0;\n            const partB = b[i] || 0;\n            if (partA > partB) return 1;\n            if (partA < partB) return -1;\n        }\n        return 0;\n    };\n\n    const { mainParts: main1, preParts: pre1 } = parseVersion(v1);\n    const { mainParts: main2, preParts: pre2 } = parseVersion(v2);\n\n    const mainComparison = compareParts(main1, main2);\n    if (mainComparison !== 0) return mainComparison;\n\n    // Compare pre-release parts\n    if (pre1.length === 0 && pre2.length > 0) return 1; // No pre-release > pre-release\n    if (pre1.length > 0 && pre2.length === 0) return -1; // Pre-release < no pre-release\n    return compareParts(pre1, pre2);\n}\n\n\n\nconst version_key=\"/mockery/version\";\nconst element = document.getElementById('mockery-install-go-command');\nconst url = `https://api.github.com/repos/vektra/mockery/releases`;\n\nlet version = sessionStorage.getItem(version_key);\n\n\nif (version !== null) {\n    insert_installation_command(element,version);\n} else {\n  const request = new Request(url, {\n    method: \"GET\",\n  });\n\n  fetch(request)\n    .then((response) => response.json())\n    .then((data) => {\n      let latest_version = \"\";\n      data.forEach((release) => {\n        let release_tag=release.tag_name;\n        if (!release_tag.startsWith(\"v3\")){\n          return\n        };\n        if (latest_version === \"\" || compareSemver(release_tag, latest_version) === 1) {\n          latest_version=release_tag;\n        };\n      });\n      sessionStorage.setItem(version_key, latest_version);\n      insert_installation_command(element,latest_version);\n    })\n    .catch((error) =>{\n          console.error(error);\n          element.innerHTML=`failed to fetch latest release info from: https://api.github.com/repos/vektra/mockery/releases/tags/v3`;\n    }\n  );\n}\n\nconst end = performance.now();\nconsole.log(`Execution time for finding latest mockery tag: ${end - start} milliseconds`);\n```\n\n----------------------------------------\n\nTITLE: Running Mockery Command Line Tool\nDESCRIPTION: Terminal output showing the execution of the mockery command which generates the mock implementation based on the configuration file.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mockery\n05 Mar 23 21:49 CST INF Starting mockery dry-run=false version=v3.0.0\n05 Mar 23 21:49 CST INF Using config: .mockery.yaml dry-run=false version=v3.0.0\n05 Mar 23 21:49 CST INF Generating mock dry-run=false interface=DB qualified-name=github.com/org/repo version=v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Replacement in Mockery\nDESCRIPTION: YAML configuration for replacing types in Mockery. It specifies replacing rt1.RType1 with rt2.RType2 by defining the package path and type name for the replacement.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/replace-type.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreplace-type:\n  github.com/vektra/mockery/v3/internal/fixtures/example_project/replace_type/rti/rt1:\n    RType1:\n      pkg-path: github.com/vektra/mockery/v3/internal/fixtures/example_project/replace_type/rti/rt2\n      type-name: RType2\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Go File to Fix Package Detection\nDESCRIPTION: When using recursive package scanning, create an empty Go file with a package declaration in packages without Go files to help Mockery detect the package location.\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage [name]\n```\n\n----------------------------------------\n\nTITLE: Exercise Interface Definition with Type Parameters in Go\nDESCRIPTION: Defines an Exercise interface with type parameters T and Ordered. The interface has a Foo method that accepts a context, a type parameter, and an ordered value, returning an error. This interface is used to render templates that exercise all parts of template data.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GenDecl comments\n\n// Exercise is an interface that is used to render a template that exercises\n// all parts of the template data passed to the template.\n// This is a line comment\ntype Exercise[T any, Ordered constraints.Ordered] interface {\n    Foo(ctx context.Context, typeParam T, ordered Ordered) (err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Mockery Type Parameter Definitions\nDESCRIPTION: Defines two type parameters for the Exercise interface: T of type any and Ordered of type constraints.Ordered. Includes metadata about each type parameter such as whether it's nullable, its string representation, and how it should be used in method arguments.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# TYPE PARAM: 0\n$typeparam.Var.Name: T\n$typeparam.Var.IsSlice: false\n$typeparam.Var.Nillable: true\n$typeparam.Var.Type.String: any\n$typeparam.Var.TypeString: any\n$typeparam.CallName: T\n$typeparam.CallName: T\n$typeparam.MethodArg: T any\n$typeparam.Name: T\n$typeparam.TypeString: any\n$typeparam.TypeStringEllipsis: any\n$typeparam.TypeStringVariadicUnderlying: any\n\n# TYPE PARAM: 1\n$typeparam.Var.Name: Ordered\n$typeparam.Var.IsSlice: false\n$typeparam.Var.Nillable: true\n$typeparam.Var.Type.String: golang.org/x/exp/constraints.Ordered\n$typeparam.Var.TypeString: constraints.Ordered\n$typeparam.CallName: Ordered\n$typeparam.CallName: Ordered\n$typeparam.MethodArg: Ordered constraints.Ordered\n$typeparam.Name: Ordered\n$typeparam.TypeString: constraints.Ordered\n$typeparam.TypeStringEllipsis: constraints.Ordered\n$typeparam.TypeStringVariadicUnderlying: constraints.Ordered\n$typeparam.Constraint.String: golang.org/x/exp/constraints.Integer\n```\n\n----------------------------------------\n\nTITLE: Mockery Method Definition for Foo\nDESCRIPTION: Defines the Foo method of the Exercise interface. Specifies its signature, parameters, and return values. The method accepts a context, a type parameter, and an ordered value, and returns an error.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# METHOD: 0\n$method.Name: Foo\n$method.ReturnStatement: return\n$method.Call: Foo(ctx, typeParam, ordered)\n$method.AcceptsContext: true\n$method.Signature: (ctx context.Context, typeParam T, ordered Ordered) (err error)\n$method.SignatureNoName: (context.Context, T, Ordered) (error)\n$method.Declaration: Foo(ctx context.Context, typeParam T, ordered Ordered) (err error)\n$method.ReturnsError: true\n$method.HasParams: true\n$method.HasReturns: true\n$method.ReturnArgList: err error\n$method.ReturnArgListNoName: error\n$method.ArgList: ctx context.Context, typeParam T, ordered Ordered\n$method.ArgListNoName: context.Context, T, Ordered\n```\n\n----------------------------------------\n\nTITLE: Mockery Parameter Definitions for Foo Method\nDESCRIPTION: Defines the parameters of the Foo method. Includes three parameters: ctx of type context.Context, typeParam of type T, and ordered of type Ordered. Each parameter includes metadata about its type and usage.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# PARAM: 0\n$param.Var.Name: ctx\n$param.Var.IsSlice: false\n$param.Var.Nillable: true\n$param.Var.Type.String: context.Context\n$param.Var.TypeString: context.Context\n$param.MethodArg: ctx context.Context\n$param.MethodArgNoName: context.Context\n\n\n# PARAM: 1\n$param.Var.Name: typeParam\n$param.Var.IsSlice: false\n$param.Var.Nillable: true\n$param.Var.Type.String: T\n$param.Var.TypeString: T\n$param.MethodArg: typeParam T\n$param.MethodArgNoName: T\n\n\n# PARAM: 2\n$param.Var.Name: ordered\n$param.Var.IsSlice: false\n$param.Var.Nillable: true\n$param.Var.Type.String: Ordered\n$param.Var.TypeString: Ordered\n$param.MethodArg: ordered Ordered\n$param.MethodArgNoName: Ordered\n```\n\n----------------------------------------\n\nTITLE: Mockery Import Declarations for Template\nDESCRIPTION: Import declarations used in the mockery template. Imports the context package and the constraints package from golang.org/x/exp for type parameter constraints.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$import.Alias: \n$import.Path: context\n$import.Qualifier: context\n\n$import.Alias: \n$import.Path: golang.org/x/exp/constraints\n$import.Qualifier: constraints\n```\n\n----------------------------------------\n\nTITLE: Mockery Return Value Definition for Foo Method\nDESCRIPTION: Defines the return value of the Foo method. The method returns a single value named err of type error.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# RETURN: 0\n$return.Var.Name: err\n$return.Var.IsSlice: false\n$return.Var.Nillable: true\n$return.Var.Type.String: error\n$return.Var.TypeString: error\n```\n\n----------------------------------------\n\nTITLE: Mockery Configuration in YAML\nDESCRIPTION: Configuration file for Mockery showing template and package settings\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate: testify\npackages:\n    github.com/vektra/mockery/v3/pkg/fixtures:\n        config:\n            dir: \"{{.InterfaceDir}}\"\n            filename: \"mocks.go\"\n            pkgname: \"test\"\n            structname: \"Mock{{.InterfaceName}}\"\n        interfaces:\n            Requester:\n```\n\n----------------------------------------\n\nTITLE: Mockery Interface Configuration Block\nDESCRIPTION: Defines the configuration for generating a mock of the Exercise interface. Specifies the interface name and the name of the struct that will implement the mock.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$interface.Name: Exercise\n$interface.StructName: MockExercise\n```\n\n----------------------------------------\n\nTITLE: Mockery Interface Comments Configuration\nDESCRIPTION: Defines the comments that should be included with the generated mock. Includes both declaration comments and interface documentation that explains the purpose of the Exercise interface.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$interface.Comments.GenDeclDoc.Text: GenDecl comments\n\n$interface.Comments.GenDeclDoc.List:\n// GenDecl comments\n$interface.Comments.TypeSpecDoc.Text: Exercise is an interface that is used to render a template that exercises\nall parts of the template data passed to the template.\n\n$interface.Comments.TypeSpecDoc.List:\n// Exercise is an interface that is used to render a template that exercises\n// all parts of the template data passed to the template.\n$interface.Comments.TypeSpecComment.Text: This is a line comment\n\n$interface.Comments.TypeSpecComment.List:\n// This is a line comment\n```\n\n----------------------------------------\n\nTITLE: Mockery Scope Management for Variable Names\nDESCRIPTION: Demonstrates scope management functionality for allocating and checking variable names. Shows how the scope allocates unique names and tracks their existence to avoid conflicts in generated code.\nSOURCE: https://github.com/vektra/mockery/blob/v3/e2e/test_template_exercise/exercise_expected.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# SCOPE\n$method.Scope.AllocateName \"foo\": foo\n$method.Scope.AllocateName \"foo\": foo1\n$method.Scope.NameExists \"foo\": true\n$method.Scope.NameExists \"foo1\": true\n$method.Scope.NameExists \"notexists\": false\n```\n\n----------------------------------------\n\nTITLE: Serving MkDocs Documentation for Mockery Project\nDESCRIPTION: This task installs the required MkDocs plugins and theme, then runs the MkDocs server with real-time updating and refreshing for local documentation preview.\nSOURCE: https://github.com/vektra/mockery/blob/v3/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntask mkdocs.serve\n```\n\n----------------------------------------\n\nTITLE: Listing Valid Task Targets in Mockery Project\nDESCRIPTION: This command lists all valid targets for the Taskfile, which is used as an alternative to Makefile in the Mockery project.\nSOURCE: https://github.com/vektra/mockery/blob/v3/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntask -l\n```\n\n----------------------------------------\n\nTITLE: Downloading Development Tools Using Go in Mockery Project\nDESCRIPTION: This command initializes and downloads all the development tools for the Mockery project. The tools are versioned in the go.mod file and are go-based.\nSOURCE: https://github.com/vektra/mockery/blob/v3/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo download -x\n```\n\n----------------------------------------\n\nTITLE: Installing Mockery Development Dependencies\nDESCRIPTION: Command to download all Go build tools required for Mockery development. This initializes the project's dependencies using Go modules.\nSOURCE: https://github.com/vektra/mockery/blob/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download -x\n```\n\n----------------------------------------\n\nTITLE: Running Mockery Test Tasks\nDESCRIPTION: Example command showing how to run tests for the Mockery project using the task runner. This executes the test command defined in Taskfile.yml and generates a coverage report.\nSOURCE: https://github.com/vektra/mockery/blob/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ task test\ntask: [test] go test -v -coverprofile=coverage.txt ./...\n```\n\n----------------------------------------\n\nTITLE: Test Mockery Boilerplate Comment in Go\nDESCRIPTION: A comment line marker used to indicate the start of mockery test boilerplate code. This is a standard marker used across mockery test files.\nSOURCE: https://github.com/vektra/mockery/blob/v3/.boilerplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// TEST MOCKERY BOILERPLATE\n```\n\n----------------------------------------\n\nTITLE: Describing Test Case for Replace Type Functionality in Mockery\nDESCRIPTION: Explains the purpose of the test package, which is to verify that mockery correctly handles multiple types from the same source package ('replace_type/rti/internal') that result in types in different packages ('replace_type/rt1' and 'replace_type/rt2'). It references Issue 710 and mentions specific test functions that use this setup.\nSOURCE: https://github.com/vektra/mockery/blob/v3/internal/fixtures/example_project/replace_type/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fix replace-type for different packages from the same source\n\n[Issue 710](https://github.com/vektra/mockery/pull/710)\n\nThis package is used to test the case where multiple types come from the same package (`replace_type/rti/internal`),\nbut results in types in different packages (`replace_type/rt1` and `replace_type/rt2`).\n\nTests `TestReplaceTypePackageMultiplePrologue` and `TestReplaceTypePackageMultiple` use it to check if this outputs\nthe correct import and type names.\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for Mocking in Go\nDESCRIPTION: Sample interface definition that will be mocked using Mockery's testify template\nSOURCE: https://github.com/vektra/mockery/blob/v3/docs/template/testify.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage test\n\ntype Requester interface {\n    Get(path string) (string, error)\n}\n```"
  }
]