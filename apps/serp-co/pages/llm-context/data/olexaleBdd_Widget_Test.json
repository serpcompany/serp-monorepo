[
  {
    "owner": "olexale",
    "repo": "bdd_widget_test",
    "content": "TITLE: Adding bdd_widget_test Dependency in pubspec.yaml\nDESCRIPTION: Adds `build_runner` and `bdd_widget_test` as dev dependencies in the `pubspec.yaml` file. This enables the generation of Dart files from feature files using the `build_runner` tool.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  build_runner:\n  bdd_widget_test: <put the latest version here>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running build_runner for Code Generation\nDESCRIPTION: Executes the `build_runner` command to generate Dart files from feature files. The `--delete-conflicting-outputs` flag ensures that any conflicting files are deleted before generating new files.  This step is crucial to translate the feature files into executable dart tests.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart run build_runner watch --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Running the Build Runner in Dart\nDESCRIPTION: This command executes the `build_runner` tool in watch mode, which generates Dart code based on the `.feature` files. The `--delete-conflicting-outputs` flag ensures that any conflicting generated files are deleted before the build process starts.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/example/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ndart run run build_runner watch --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File Example\nDESCRIPTION: Example Gherkin feature file demonstrating a simple counter scenario. It defines a Feature, Scenario, and steps using Given, Then keywords. The file serves as a template for writing feature files to specify widget tests.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Counter\n    Scenario: Initial counter value is 0\n        Given the app is running\n        Then I see {'0'} text\n```\n\n----------------------------------------\n\nTITLE: Defining a Feature with Gherkin\nDESCRIPTION: This code snippet shows a basic `.feature` file written in Gherkin, which defines a simple test scenario for a counter application. The scenario verifies that the initial counter value is 0 when the app is running.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/example/README.md#_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\nFeature: Counter\n    Scenario: Initial counter value is 0\n        Given the app is running\n        Then I see {'0'} text\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Test Code\nDESCRIPTION: This Dart code is automatically generated from the `.feature` file using the `build_runner` tool. It includes imports for Flutter testing libraries and step definitions, and defines a `testWidgets` function to execute the test scenario using provided step implementations.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/example/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// GENERATED CODE - DO NOT MODIFY BY HAND\n// ignore_for_file: unused_import\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport './step/the_app_is_running.dart';\nimport './step/i_see_text.dart';\n\nvoid main() {\n  group('Counter app', () {\n    testWidgets('Initial counter value is 0', (WidgetTester tester) async {\n      await theAppIsRunning(tester);\n      await iSeeText(tester, '0');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Runs Flutter tests using the `flutter test` command. This command executes the generated Dart tests based on feature files and step definitions. The tests are standard Flutter widget tests.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Dart Step Definition with DataTable Parameter\nDESCRIPTION: Illustrates how to access data from a DataTable within a Dart step definition. The `DataTable` parameter provides methods to access the data as lists or maps, facilitating interaction with structured test data.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bdd_widget_test/data_table.dart' as bdd;\nimport 'package:flutter_test/flutter_test.dart';\n\n/// Usage: Given available songs\nFuture<void> availableSongs(WidgetTester tester, bdd.DataTable dataTable) async {\n  throw UnimplementedError();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal dataAsList = dataTable.asLists(); // [['artist', 'name'], ['The Doors', 'Riders on the storm'], ...]\nfinal dataAsMaps = dataTable.asMaps(); // [{'artist: 'The Doors', 'name: 'Riders on the storm'}, ...]\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature with DataTable-like Syntax\nDESCRIPTION: Presents a Gherkin feature utilizing a DataTable-like syntax for repeated steps with different parameters. This approach enables concise representation of scenarios with multiple inputs and associated actions.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Sample\n\n  Scenario: An answer\n    Given the app is running\n    When I enter <input> text into <field> text field\n    | input      | field |\n    | '42'       |   0   |\n    | 'question' |   1   |\n    Then I see {'Do not forget your towel!'} text\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature with explicit DataTable\nDESCRIPTION: Demonstrates the use of data tables within Gherkin feature files to provide structured data for test scenarios. This allows defining prerequisites or assertions in a readable and domain-driven manner.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Search songs\n\n  Scenario: Searched text matches a song's details\n    Given available songs\n    | 'artist'      | 'name'                      |\n    | 'The Doors'   | 'Riders on the storm'       |\n    | 'Bob Dylan'   | \"Knockin' On Heaven's Door\" |\n    | 'The Beatles' | 'Here Comes the Sun'        |\n    When I search for text {'door'}\n    Then I see songs\n    | 'artist'      | 'name'                      |\n    | 'The Doors'   | 'Riders on the storm'       |\n    | 'Bob Dylan'   | \"Knockin' On Heaven's Door\" |\n```\n\n----------------------------------------\n\nTITLE: Gherkin Scenario Outline Example\nDESCRIPTION: Shows an example of a Gherkin Scenario Outline, which allows running the same scenario multiple times with different data sets.  The `Examples` table provides the data variations for each execution of the scenario.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Sample\n\n  Scenario Outline: Plus button increases the counter\n    Given the app is running\n    When I tap {Icons.add} icon <times> times\n    Then I see <result> text\n\n    Examples:\n    | times | result |\n    |    0  |   '0'  |\n    |    1  |   '1'  |\n    |   42  |  '42'  |\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File with Background and After\nDESCRIPTION: Illustrates a Gherkin feature file with `Background` and `After` sections, demonstrating how to add context and cleanup operations to scenarios. It outlines the use of `Given`, `When`, and `Then` steps to define test arrangements, interactions, and assertions.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n# comment here\n\nFeature: Counter\n\n  Background:\n    Given the answer is {42}\n\n  After:\n    Then clean up after the test\n\n  Scenario: Initial counter value is 0\n    Given the app is running\n    Then I see {'0'} text\n\n  Scenario: Plus button increases the counter\n    Given the app is running\n    When I tap {Icons.add} icon\n    Then I see {'1'} text\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tags\nDESCRIPTION: Shows how to execute Flutter tests filtered by tags. The `--tags` option includes tests with the specified tag, while `--exclude-tags` excludes tests with the specified tag.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nflutter test --tags important\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter test --exclude-tags slow\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters in Gherkin Steps (Gherkin)\nDESCRIPTION: This Gherkin snippet demonstrates how to pass parameters to a step using curly brackets. The values inside the brackets are copied directly to the Dart test file and must be valid Dart code.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_13\n\nLANGUAGE: gherkin\nCODE:\n```\n  When I see {42} number\n  And I see {Icons.add} icon\n```\n\n----------------------------------------\n\nTITLE: Tagging Scenarios in Gherkin\nDESCRIPTION: Demonstrates the use of tags to categorize and filter scenarios within Gherkin feature files. Tags are used to selectively run or exclude tests based on specific criteria.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_9\n\nLANGUAGE: gherkin\nCODE:\n```\n@slow\n@integration\nFeature: Sample\n\n  @important\n  Scenario: An answer\n    Given the app is running\n```\n\n----------------------------------------\n\nTITLE: BDD Scenario with Patrol Framework (Gherkin)\nDESCRIPTION: This Gherkin snippet demonstrates a BDD scenario using the Patrol framework, including annotations for native UI automation and specifying the tester type.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_25\n\nLANGUAGE: gherkin\nCODE:\n```\nimport 'package:patrol/patrol.dart';\n\n@testMethodName: patrolTest\n@testerName: $\n@testerType: PatrolIntegrationTester\nFeature: Counter\n    \n    Background:\n        Given the app is running\n    \n    Scenario: Initial counter value is 0\n        Then I see {'0'} text\n\n    @scenarioParams: nativeAutomation: true\n    Scenario: Add button increments the counter\n        When I tap {Icons.add} icon\n        Then I see {'1'} text\n```\n\n----------------------------------------\n\nTITLE: build.yaml Configuration for External Steps\nDESCRIPTION: Demonstrates how to configure external steps in the `build.yaml` file, allowing the reuse of predefined steps from the `bdd_widget_test` package without including them in the project's `steps` folder.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          externalSteps:\n            - package:bdd_widget_test/step/i_see_text.dart\n            - package:bdd_widget_test/step/i_dont_see_text.dart\n            - package:bdd_widget_test/step/i_see_multiple_texts.dart\n            - package:bdd_widget_test/step/i_tap_text.dart\n            - package:bdd_widget_test/step/i_see_icon.dart\n            - package:bdd_widget_test/step/i_dont_see_icon.dart\n            - package:bdd_widget_test/step/i_tap_icon.dart\n            - package:bdd_widget_test/step/i_see_rich_text.dart\n            - package:bdd_widget_test/step/i_dont_see_rich_text.dart\n            - package:bdd_widget_test/step/i_see_widget.dart\n            - package:bdd_widget_test/step/i_dont_see_widget.dart\n            - package:bdd_widget_test/step/i_see_exactly_widgets.dart\n            - package:bdd_widget_test/step/i_see_multiple_widgets.dart\n            - package:bdd_widget_test/step/i_enter_into_input_field.dart\n            - package:bdd_widget_test/step/i_see_disabled_elevated_button.dart\n            - package:bdd_widget_test/step/i_see_enabled_elevated_button.dart\n            - package:bdd_widget_test/step/i_wait.dart\n            - package:bdd_widget_test/step/i_dismiss_the_page.dart\n```\n\n----------------------------------------\n\nTITLE: Adding Imports to Gherkin Feature Files (Gherkin)\nDESCRIPTION: This Gherkin snippet shows how to add additional imports to feature files, typically for accessing domain models or components in steps.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_14\n\nLANGUAGE: gherkin\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nFeature: ...\n  Then I see {CupertinoIcons.back} cupertino icon\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks Generation in build.yaml (YAML)\nDESCRIPTION: This YAML snippet configures the `bdd_widget_test` builder to generate hooks files. It sets the `addHooks` option to true and specifies the `hookFolderName` where the generated hooks will be placed.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          addHooks: true\n          hookFolderName: bdd_hooks\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Test Support in build.yaml (YAML)\nDESCRIPTION: This YAML snippet configures the `build.yaml` file to support code generation in the `integration_test` folder by modifying the `sources` property. It also shows how to set a common step folder.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    sources:\n      - integration_test/**   # By default, build runner will not generate code in the integration folder\n      - test/**               # so we override paths for code generation here\n      - lib/**\n      - $package$\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstepFolderName: step\n```\n\n----------------------------------------\n\nTITLE: Referencing External Steps in build.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to reference external steps using the `externalSteps` option in the `build.yaml` file, allowing step reuse between projects.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          externalSteps:\n            - package:<your_package>/<your_step>.dart\n```\n\n----------------------------------------\n\nTITLE: Including an External Configuration in build.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to include an external configuration file (`bdd_options.yaml`) using the `include` option in the `build.yaml` file.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          include: package:<your_package>/bdd_options.yaml\n```\n\n----------------------------------------\n\nTITLE: Patrol Configuration in build.yaml (YAML)\nDESCRIPTION: This YAML snippet configures key parameters in the `build.yaml` file to streamline Patrol testing setup, including `testMethodName`, `testerName`, and `testerType`.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          testMethodName: patrolTest\n          testerName: $\n          testerType: PatrolIntegrationTester\n          includeIntegrationTestBinding: false\n```\n\n----------------------------------------\n\nTITLE: Customizing Folder Locations in build.yaml (YAML)\nDESCRIPTION: This YAML snippet shows how to change default plugin paths to have steps and hooks in a desired location by setting `relativeToTestFolder` to `false` and then specifying absolute paths for `stepFolderName` and `hookFolderName`.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nrelativeToTestFolder: false\nstepFolderName: integration_test/steps # if you want to have steps in the integration_test folder\nhookFolderName: integration_test/bdd_hooks # if you want to have hooks in the integration_test folder\n```\n\n----------------------------------------\n\nTITLE: Adding integration_test dependency to pubspec.yaml (YAML)\nDESCRIPTION: This YAML snippet adds `integration_test` as a dev dependency to the `pubspec.yaml` file.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  integration_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Creating bdd_options.yaml for External Steps (YAML)\nDESCRIPTION: This YAML snippet defines a `bdd_options.yaml` file to include and extend default steps with custom external steps. It demonstrates how to reuse existing steps and add new ones.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:bdd_widget_test/bdd_options.yaml # if you want to reuse default steps as well\nexternalSteps:\n  - package:<your_package>/<your_step>.dart\n```\n\n----------------------------------------\n\nTITLE: Overriding testMethodName in build.yaml (YAML)\nDESCRIPTION: This YAML snippet overrides the default `testMethodName` in the `build.yaml` file.  This allows you to use `testGoldens` for golden tests.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          testMethodName: testGoldens\n```\n\n----------------------------------------\n\nTITLE: Setting testMethodName using Tag in Gherkin (Gherkin)\nDESCRIPTION: This Gherkin snippet shows how to specify the `testMethodName` using tag for individual scenarios.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_16\n\nLANGUAGE: gherkin\nCODE:\n```\n@testMethodName: testGoldens\nScenario: My golden scenario\n```\n\n----------------------------------------\n\nTITLE: Setting testMethodName using Tag in Gherkin for Feature (Gherkin)\nDESCRIPTION: This Gherkin snippet shows how to specify the `testMethodName` using tag above the feature for multiple golden tests.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_17\n\nLANGUAGE: gherkin\nCODE:\n```\n@testMethodName: testGoldens\nFeature: My golden feature\n```\n\n----------------------------------------\n\nTITLE: Ignoring Linter Rules in Gherkin Feature Files (Gherkin)\nDESCRIPTION: This Gherkin snippet demonstrates how to ignore linter rules for auto-generated tests by adding linter directives at the beginning of the feature file.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_15\n\nLANGUAGE: gherkin\nCODE:\n```\n// ignore_for_file: avoid_as, prefer_is_not_empty\n\nFeature: ...\n```\n\n----------------------------------------\n\nTITLE: Changing the Step Folder Name in build.yaml (YAML)\nDESCRIPTION: This YAML snippet configures the `stepFolderName` parameter in the `build.yaml` file to change the default folder name (`step`) where the step definitions are generated.\nSOURCE: https://github.com/olexale/bdd_widget_test/blob/master/README.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      bdd_widget_test|featureBuilder:\n        options:\n          stepFolderName: bdd_steps\n```"
  }
]