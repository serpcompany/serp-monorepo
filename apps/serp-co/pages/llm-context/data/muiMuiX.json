[
  {
    "owner": "mui",
    "repo": "mui-x",
    "content": "TITLE: Complete Data Grid Implementation\nDESCRIPTION: Full example showing how to implement a Data Grid component with defined rows and columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { DataGrid, GridRowsProp, GridColDef } from '@mui/x-data-grid';\n\nconst rows: GridRowsProp = [\n  { id: 1, name: 'Data Grid', description: 'the Community version' },\n  { id: 2, name: 'Data Grid Pro', description: 'the Pro version' },\n  { id: 3, name: 'Data Grid Premium', description: 'the Premium version' },\n];\n\nconst columns: GridColDef[] = [\n  { field: 'name', headerName: 'Product Name', width: 200 },\n  { field: 'description', headerName: 'Description', width: 300 },\n];\n\nexport default function App() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Grid Columns\nDESCRIPTION: TypeScript code showing how to define column configurations using GridColDef interface.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  { field: 'name', headerName: 'Product Name', width: 200 },\n  { field: 'description', headerName: 'Description', width: 300 },\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Assistant in Data Grid Premium (TSX)\nDESCRIPTION: This snippet demonstrates how to enable the AI Assistant feature on a DataGridPremium component by passing the aiAssistant prop and using the GridAiAssistantPanel component for the aiAssistantPanel slot.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/ai-assistant/ai-assistant.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataGridPremium, GridAiAssistantPanel } from '@mui/x-data-grid-premium';\n// ...\n<DataGridPremium aiAssistant slots={{ aiAssistantPanel: GridAiAssistantPanel }} />;\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data Grid Columns with useMemo in React\nDESCRIPTION: Shows how to use React.useMemo and React.useCallback to maintain stable references for columns that depend on component scope.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/performance/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App(props) {\n  const renderCell = React.useCallback(\n    (params) => {\n      return (\n        <strong>\n          {params.value} {props.someValue}\n        </strong>\n      );\n    },\n    [props.someValue],\n  );\n\n  const columns = React.useMemo(\n    () => [\n      { field: 'id' },\n      { field: 'firstName' },\n      { field: 'lastName' },\n      { field: 'age' },\n      { field: 'fullName', renderCell },\n    ],\n    [renderCell],\n  );\n\n  return <DataGrid columns={columns} {...other} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Data Grid Components\nDESCRIPTION: JavaScript code showing different import options for Data Grid components based on the package version being used.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// choose one\nimport { DataGrid, GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport { DataGridPro, GridRowsProp, GridColDef } from '@mui/x-data-grid-pro';\nimport { DataGridPremium, GridRowsProp, GridColDef } from '@mui/x-data-grid-premium';\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Column Interface in TypeScript\nDESCRIPTION: The core interface definition for columns in the Data Grid component. It shows the required 'field' property which serves as the column identifier and is used to match with GridRowModel values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridColDef {\n  /**\n   * The column identifier. It's used to match with [[GridRowModel]] values.\n   */\n  field: string;\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Making a column editable in Data Grid with TypeScript\nDESCRIPTION: Shows how to make specific columns editable by using the 'editable' property in the column definition. In this example, the 'name' column is editable while the 'id' column is not.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid columns={[{ field: 'id' }, { field: 'name', editable: true }]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data Source for Server-side Tree Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom data source for server-side tree data in React Data Grid. It includes methods for getting rows, group keys, and children count.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/tree-data.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customDataSource: GridDataSource = {\n  getRows: async (params) => {\n    // Fetch the data from the server.\n  },\n  getGroupKey: (row) => {\n    // Return the group key for the row, e.g. `name`.\n    return row.name;\n  },\n  getChildrenCount: (row) => {\n    // Return the number of children for the row.\n    return row.childrenCount;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Material Dependencies\nDESCRIPTION: Commands for installing required peer dependencies including @mui/material and emotion packages using different package managers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Setting Up Web Worker for Excel Export in MUI X Data Grid\nDESCRIPTION: This snippet demonstrates how to set up a web worker for Excel export in MUI X Data Grid. It includes the worker script content and examples of how to use it with different components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// in file ./worker.ts\nimport { setupExcelExportWebWorker } from '@mui/x-data-grid-premium/setupExcelExportWebWorker';\n\nsetupExcelExportWebWorker();\n\n// Default toolbar:\n<DataGridPremium\n  slotProps={{\n    toolbar: {\n      excelOptions: {\n        worker: () => new Worker('/worker.ts'),\n      },\n    },\n  }}\n/>;\n\n// Custom trigger:\n<ExportExcel\n  options={{\n    worker: () => new Worker('/worker.ts'),\n  }}\n/>;\n\n// API method:\napiRef.current.exportDataAsExcel({\n  worker: () => new Worker('/worker.ts'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Gmail Clone using Simple Tree View\nDESCRIPTION: This example demonstrates how to recreate Google's Gmail sidebar using the Tree View component, replicating one of the web's most famous tree view implementations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"GmailTreeView.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using React Hooks in Cell Renderers with Component Pattern\nDESCRIPTION: Examples showing incorrect and correct ways to use React hooks inside cell renderers. It demonstrates the proper pattern of creating a separate component when hooks are needed.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ Not valid\nconst column = {\n  // ...other properties,\n  renderCell: () => {\n    const [count, setCount] = React.useState(0);\n\n    return (\n      <Button onClick={() => setCount((prev) => prev + 1)}>{count} click(s)</Button>\n    );\n  },\n};\n\n// ✅ Valid\nconst CountButton = () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <Button onClick={() => setCount((prev) => prev + 1)}>{count} click(s)</Button>\n  );\n};\n\nconst column = {\n  // ...other properties,\n  renderCell: () => <CountButton />,\n};\n```\n\n----------------------------------------\n\nTITLE: Helper Text Implementation\nDESCRIPTION: Shows how to add helper text to Date Picker for format guidance\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nHelperText.js\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Cell Content with Button in Data Grid\nDESCRIPTION: Demonstrates how to use renderCell() to create a custom cell containing a year value and an interactive button. The example shows column definition with type safety using GridColDef and handling focus states.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/cells/cells.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    headerName: 'Year',\n    renderCell: (params: GridRenderCellParams<any, Date>) => (\n      <strong>\n        {params.value.getFullYear()}\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          style={{ marginLeft: 16 }}\n          tabIndex={params.hasFocus ? 0 : -1}\n        >\n          Open\n        </Button>\n      </strong>\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Click Editing in Data Grid - JavaScript\nDESCRIPTION: This snippet demonstrates how to implement single-click editing in a Data Grid using the controlled mode and listening to click events. It allows entering the edit mode with just a single click instead of the default double-click.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-editing/recipes-editing.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"SingleClickEditing.js\", \"bg\": \"inline\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Data Structure in DataGridPro\nDESCRIPTION: Demonstrates two approaches to implement tree data structure using the treeData and getTreeDataPath props. Shows how to structure data either as nested arrays or delimited strings to create hierarchical relationships.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/tree-data/tree-data.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [{ field: 'jobTitle', width: 250 }];\n\n// Without transformation\nconst rows: GridRowsProp = [\n  { path: ['Sarah'], jobTitle: 'CEO', id: 0 },\n  { path: ['Sarah', 'Thomas'], jobTitle: 'Head of Sales', id: 1 },\n  { path: ['Sarah', 'Thomas', 'Robert'], jobTitle: 'Sales Person', id: 2 },\n  { path: ['Sarah', 'Thomas', 'Karen'], jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) => row.path;\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n\n// With transformation\nconst rows: GridRowsProp = [\n  { path: 'Sarah', jobTitle: 'CEO', id: 0 },\n  { path: 'Sarah/Thomas', jobTitle: 'Head of Sales', id: 1 },\n  { path: 'Sarah/Thomas/Robert', jobTitle: 'Sales Person', id: 2 },\n  { path: 'Sarah/Thomas/Karen', jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) =>\n  row.path.split('/');\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Persisting Filters in Local Storage with React Data Grid\nDESCRIPTION: This snippet demonstrates how to persist filters in local storage using the React.useSyncExternalStore hook to synchronize the filters with the local storage, keeping them applied after page reload.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering-recipes/filtering-recipes.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"FilteringLocalStorage.js\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Cell Selection in DataGridPremium\nDESCRIPTION: Demonstrates how to enable cell selection in the DataGridPremium component by applying the cellSelection prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/cell-selection/cell-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium cellSelection />\n```\n\n----------------------------------------\n\nTITLE: Filtering Built-in Operators in JavaScript\nDESCRIPTION: Demonstrates how to remove specific built-in operators, keeping only the '>' and '<' operators for numeric columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/customization.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Only keep '>' and '<' default operators\nconst filterOperators = getGridNumericOperators().filter(\n  (operator) => operator.value === '>' || operator.value === '<',\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Filter Logic with GridLogicOperator in React Data Grid\nDESCRIPTION: Examples showing how to use the GridLogicOperator to apply multiple filter conditions with either OR or AND logic. These examples demonstrate filtering rows based on rating and admin status.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Example 1: get rows with rating > 4 OR isAdmin = true\nconst filterModel: GridFilterModel = {\n  items: [\n    { id: 1, field: 'rating', operator: '>', value: '4' },\n    { id: 2, field: 'isAdmin', operator: 'is', value: 'true' },\n  ],\n  logicOperator: GridLogicOperator.Or,\n};\n\n// Example 2: get rows with rating > 4 AND isAdmin = true\nconst filterModel: GridFilterModel = {\n  items: [\n    { id: 1, field: 'rating', operator: '>', value: '4' },\n    { id: 2, field: 'isAdmin', operator: 'is', value: 'true' },\n  ],\n  logicOperator: GridLogicOperator.And,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing validation with preProcessEditCellProps\nDESCRIPTION: Demonstrates how to validate user input using the preProcessEditCellProps callback. This example checks if the firstName value has at least 3 characters and returns an error state when validation fails.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'firstName',\n    preProcessEditCellProps: (params: GridPreProcessEditCellProps) => {\n      const hasError = params.props.value.length < 3;\n      return { ...params.props, error: hasError };\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing API Object Outside Data Grid with useGridApiRef\nDESCRIPTION: Demonstrates how to initialize and use the API object outside the Data Grid components using the useGridApiRef hook. The apiRef is then passed to the Data Grid's apiRef prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/api-object/api-object.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>\n      <DataGrid apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Column Width and Order in MUI X Data Grid\nDESCRIPTION: This snippet demonstrates how to persist column width and order in the MUI X Data Grid when the columns prop reference is updated. It shows a pattern for storing column state in userland rather than relying on the grid's internal state.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-recipes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nColumnSizingPersistWidthOrder.js\n```\n\n----------------------------------------\n\nTITLE: Defining Data Grid Rows\nDESCRIPTION: TypeScript code demonstrating how to define row data for the Data Grid with proper typing.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst rows: GridRowsProp = [\n  { id: 1, name: 'Data Grid', description: 'the Community version' },\n  { id: 2, name: 'Data Grid Pro', description: 'the Pro version' },\n  { id: 3, name: 'Data Grid Premium', description: 'the Premium version' },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Select Column in MUI X Data Grid (TSX)\nDESCRIPTION: Shows how to set up a 'singleSelect' column type with valueOptions for filtering and editing. Includes examples of using simple string options and object options with custom value and label attributes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  field: 'country',\n  type: 'singleSelect',\n  valueOptions: ['United Kingdom', 'Spain', 'Brazil']\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Without getOptionValue and getOptionLabel\n{\n  valueOptions: [\n    { value: 'BR', label: 'Brazil' },\n    { value: 'FR', label: 'France' }\n  ]\n}\n\n// With getOptionValue and getOptionLabel\n{\n  getOptionValue: (value: any) => value.code,\n  getOptionLabel: (value: any) => value.name,\n  valueOptions: [\n    { code: 'BR', name: 'Brazil' },\n    { code: 'FR', name: 'France' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing value parser in column definition\nDESCRIPTION: Shows how to define a value parser in the column definition to modify user-entered values before they are saved. In this example, the parser converts the value to lowercase.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    valueParser: (value, row, column, apiRef) => {\n      return value.toLowerCase();\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Transforming Values with valueGetter in Data Grid\nDESCRIPTION: Example of using valueGetter to transform a decimal tax rate into a percentage value. This demonstrates how to manipulate raw data before it's used for filtering, sorting, and rendering in the grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'taxRate',\n    valueGetter: (value) => {\n      if (!value) {\n        return value;\n      }\n      // Convert the decimal value to a percentage\n      return value * 100;\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing ChartDataProvider and ChartsSurface in React\nDESCRIPTION: Demonstrates how to use ChartDataProvider to provide data and ChartsSurface to render SVG elements for a chart. This structure allows for more customization of chart components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/composition/composition.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartDataProvider\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n>\n  <ChartsSurface\n    // Ref needs to be directly on the ChartsSurface\n    ref={mySvgRef}\n  >\n    {children}\n  </ChartsSurface>\n</ChartDataProvider>\n```\n\n----------------------------------------\n\nTITLE: Basic Date Picker Implementation\nDESCRIPTION: Complete example showing how to implement a basic Date Picker component with proper provider setup.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\nexport default function App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePicker />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pagination Component with MUI X Data Grid Hooks\nDESCRIPTION: This snippet demonstrates how to create a custom pagination component using the useGridApiContext and useGridSelector hooks to access and interact with the Data Grid's state and API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/components.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomPagination() {\n  const apiRef = useGridApiContext();\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\n\n  return (\n    <Pagination\n      count={pageCount}\n      page={paginationModel.page + 1}\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically stopping row edit mode\nDESCRIPTION: Demonstrates how to programmatically stop editing a row by using the API reference method 'stopRowEditMode'. Includes options to save or discard all changes made to the row.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\napiRef.current.stopRowEditMode({ id: 1 });\n\n// or\n\napiRef.current.stopRowEditMode({\n  id: 1,\n  ignoreModifications: true, // will also discard the changes made\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler for Data Grid in TSX\nDESCRIPTION: Example of creating an event handler for the 'rowClick' event in a Data Grid. This handler receives three parameters: the event parameters, the MUI event, and the callback details.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/events/events.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleEvent: GridEventListener<'rowClick'> = (\n  params, // GridRowParams\n  event, // MuiEvent<React.MouseEvent<HTMLElement>>\n  details, // GridCallbackDetails\n) => {\n  setMessage(`Movie \"${params.row.title}\" clicked`);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Filters for Non-Filterable Columns in React Data Grid\nDESCRIPTION: Example showing how to apply filters programmatically to columns that are marked as non-filterable in the UI. These filters will be applied but users won't be able to modify them.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  { field: 'name', filterable: false },\n  ...otherColumns,\n]\n\n<DataGrid\n  filterModel={{\n    items: [{ field: 'name', operator: 'contains', value: 'a' }],\n  }}\n  columns={columns}\n/>\n```\n\n----------------------------------------\n\nTITLE: Calculating Filtered Row Counts in Advance for React Data Grid\nDESCRIPTION: This snippet illustrates how to use the Grid API's getFilterState method to display the row count for predefined filters before applying them to the Data Grid. It allows for showing filtered row counts upfront without modifying the grid's current state.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering-recipes/filtering-recipes.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"FilteredRowCount.js\"\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Data Grid Package with npm\nDESCRIPTION: Command to install the @mui/x-data-grid package using npm. This installs the Community plan edition of the Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-data-grid\n```\n\n----------------------------------------\n\nTITLE: Controlling Row Edit Modes in DataGrid with TSX\nDESCRIPTION: Examples of using rowModesModel prop to control row editing modes. Demonstrates setting entire rows to edit or view mode with additional options.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Changes the mode of the row with id=1 to \"edit\"\n<DataGrid\n  editMode=\"row\"\n  rowModesModel={{ 1: { mode: GridRowModes.Edit } }}\n/>\n\n// Changes the mode of the row with id=1 to \"view\", ignoring modifications made\n<DataGrid\n  editMode=\"row\"\n  rowModesModel={{ 1: { mode: GridRowModes.View, ignoreModifications: true } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Row Selection in MUI X Data Grid\nDESCRIPTION: Demonstrates basic single row selection functionality in the MUI X Data Grid component. Selection can be done by clicking a row or using keyboard shortcuts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"SingleRowSelectionGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Fields with valueGetter in Data Grid\nDESCRIPTION: Example showing how to use valueGetter to combine multiple fields into a single value. Here it creates a fullName by concatenating firstName and lastName fields.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'fullName',\n    valueGetter: (value, row) => {\n      return `${row.firstName || ''} ${row.lastName || ''}`;\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Filtering in MUI X Data Grid\nDESCRIPTION: This code snippet demonstrates how to set up server-side filtering for the MUI X Data Grid component. It involves setting the filterMode prop to 'server' and implementing the onFilterModelChange handler to process filter changes on the server.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/server-side.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"ServerFilterGrid.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options with Default Toolbar in React\nDESCRIPTION: Shows how to provide CSV export options to the Data Grid's default toolbar. This approach is used when you want to customize export behavior while using the built-in toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Default toolbar:\n<DataGrid slotProps={{ toolbar: { csvOptions } }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Functions for Server-side Data Grid in React\nDESCRIPTION: This snippet demonstrates how to pass available aggregation functions to the Data Grid using the aggregationFunctions prop. It defines size and sum functions with their respective labels and column types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/aggregation.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst aggregationFunctions: Record<string, GridAggregationFunctionDataSource> = {\n  size: { label: 'Size' },\n  sum: { label: 'Sum', columnTypes: ['number'] },\n}\n\n<DataGridPremium aggregationFunctions={aggregationFunctions} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Types for Chart Axes in React MUI X-Charts\nDESCRIPTION: Example showing how to configure different scale types (linear and logarithmic) for two line series sharing the same data. Each axis is identified with an id and the series specify which axis to use with xAxisId and yAxisId properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ScaleExample.js\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Y-Coordinate to Value in MUI X Charts\nDESCRIPTION: Demonstrates how to use the invert method of a scale to convert an SVG coordinate back to a data value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/components/components.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<text>{leftAxisScale.invert(yCoordinate).toFixed(0)}</text>\n```\n\n----------------------------------------\n\nTITLE: Creating a USD Price Custom Column Type in Data Grid\nDESCRIPTION: Defines a custom column type 'usdPrice' that extends the native 'number' column type with custom width, value formatting, and cell styling for tabular numbers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/custom-columns/custom-columns.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usdPrice: GridColTypeDef = {\n  type: 'number',\n  width: 130,\n  valueFormatter: (value) => valueFormatter.format(Number(value)),\n  cellClassName: 'font-tabular-nums',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Row Grouping in DataGridPremium\nDESCRIPTION: Demonstrates how to control row grouping state using rowGroupingModel and onRowGroupingModelChange props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<DataGridPremium\n  rowGroupingModel={rowGroupingModel}\n  onRowGroupingModelChange={(newModel) => setRowGroupingModel(newModel)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Item Structure in Rich Tree View\nDESCRIPTION: Demonstrates the basic structure for defining items with unique identifiers in Rich Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ITEMS = [{ id: 'tree-view-community' }];\n\n<RichTreeView items={ITEMS} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Rendering with renderCell in Data Grid\nDESCRIPTION: Example showing how to use renderCell to create custom cell content including a button. This demonstrates returning React elements from the renderCell function to create rich interactive grid cells.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    headerName: 'Year',\n    renderCell: (params: GridRenderCellParams<any, Date>) => (\n      <strong>\n        {params.value.getFullYear()}\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          style={{ marginLeft: 16 }}\n          tabIndex={params.hasFocus ? 0 : -1}\n        >\n          Open\n        </Button>\n      </strong>\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using Module Augmentation for Custom Props in Data Grid Community Version\nDESCRIPTION: This example demonstrates how to use TypeScript module augmentation to add custom properties to the toolbar slot in MUI X Data Grid Community version.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/components.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGrid\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n  showToolbar\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Time Range Picker\nDESCRIPTION: Example showing controlled and uncontrolled state management of the Time Range Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TimeRangePickerValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Visibility in MUI DataGrid\nDESCRIPTION: Demonstrates how to control column visibility using the columnVisibilityModel prop. This allows for dynamic control of column visibility throughout the component lifecycle.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  columnVisibilityModel={{\n    // Hide columns status and traderName, the other columns will remain visible\n    status: false,\n    traderName: false,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Cell Selection with cellSelectionModel\nDESCRIPTION: Shows how to programmatically select or deselect cells using the cellSelectionModel prop. The example demonstrates selecting and deselecting a cell in the 'name' column for row with id=1.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/cell-selection/cell-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Selects the cell with field=name from row with id=1\n<DataGridPremium cellSelectionModel={{ 1: { name: true } }} />\n\n// Unselects the cell with field=name from row with id=1\n<DataGridPremium cellSelectionModel={{ 1: { name: false } }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring row editing mode in Data Grid\nDESCRIPTION: Demonstrates how to enable row editing mode by setting the 'editMode' prop to 'row'. This allows users to edit all editable cells in a row simultaneously rather than one cell at a time.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid editMode=\"row\" columns={[{ field: 'name', editable: true }]} />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Row Identifier in React Data Grid\nDESCRIPTION: This snippet demonstrates how to use the 'getRowId' prop to specify a custom row identifier for the Data Grid component. It retrieves the unique identifier from a property named 'internalId' instead of the default 'id'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-definition/row-definition.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getRowId(row) {\n  return row.internalId;\n}\n\n<DataGrid getRowId={getRowId} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Row Spanning in MUI X Data Grid\nDESCRIPTION: This snippet demonstrates how to enable basic row spanning in a Data Grid component. It uses the rowSpanning prop to automatically merge consecutive cells with repeating values in the same column.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-spanning/row-spanning.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nexport default function RowSpanning() {\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6,\n  });\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro {...data} rowSpanning />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing value setter in column definition\nDESCRIPTION: Shows how to define a value setter in the column definition to customize how a row is updated with new values. This example splits a full name into first and last name components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    valueSetter: (value, row) => {\n      const [firstName, lastName] = value!.toString().split(' ');\n      return { ...row, firstName, lastName };\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Export Trigger Component in React\nDESCRIPTION: Demonstrates how to use a dedicated export component when implementing a custom toolbar. This approach gives more control over the export UI and behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Custom trigger:\n<ExportCsv options={csvOptions} />\n```\n\n----------------------------------------\n\nTITLE: Memoizing Row Count for Server Pagination in React Data Grid\nDESCRIPTION: Shows how to memoize the rowCount value to prevent unwanted page resets during loading in server-side pagination.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst rowCountRef = React.useRef(pageInfo?.totalRowCount || 0);\n\nconst rowCount = React.useMemo(() => {\n  if (pageInfo?.totalRowCount !== undefined) {\n    rowCountRef.current = pageInfo.totalRowCount;\n  }\n  return rowCountRef.current;\n}, [pageInfo?.totalRowCount]);\n\n<DataGrid rowCount={rowCount} />;\n```\n\n----------------------------------------\n\nTITLE: Initializing Quick Filter Values in Data Grid\nDESCRIPTION: Demonstrates how to set initial values for the quick filter using the initialState prop of the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    filter: {\n      filterModel: {\n        items: [],\n        quickFilterValues: ['Disney', 'Star'],\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Pro Data Grid in React\nDESCRIPTION: Shows how to import the Pro version of the MUI X Data Grid component, which includes advanced features like column pinning and tree data support.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/overview/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Row Selection in MUI X Data Grid Pro\nDESCRIPTION: Shows how to enable multiple row selection in MUI X Data Grid Pro and Premium components. Users can select multiple rows using Ctrl/Cmd or Shift keys.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MultipleRowSelectionGrid.js\", \"disableAd\": true, \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Pie Chart Implementation in React\nDESCRIPTION: Demonstrates the basic structure for creating a pie chart using PieChart component. The data property should contain an array of objects with 'value' and optional 'label' and 'id' properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/pie/pie.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PieChart\n  series={[{\n    data: [\n      { id: 1, value: 10, label: 'series A' },\n      { id: 2, value: 15, label: 'series B' },\n      { id: 3, value: 20, label: 'series C' }\n    ]\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing updateRow() Method in Data Source\nDESCRIPTION: Demonstrates how to add the updateRow() method to a data source object for updating rows on the server. This method returns a promise that resolves when the row is updated.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource: GridDataSource = {\n  getRows: async (params: GridGetRowsParams) => {\n    // fetch rows from the server\n  },\n  updateRow: async (params: GridUpdateRowParams) => {\n    // update row on the server\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Axis Values with valueFormatter in MUI X-Charts\nDESCRIPTION: Demonstration of using valueFormatter to customize how axis data is displayed in ticks and tooltips. The formatter uses context.location to apply different formatting for ticks versus tooltip display.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"FormatterDemo.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Chart Fill with Gradients in MUI X Charts\nDESCRIPTION: This example shows how to use SVG gradients to customize the fill of an area chart based on data values. It uses hooks like useDrawingArea() and useYScale() to calculate gradient positions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AreaChartFillByValue.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Using processRowUpdate for Data Grid Editing in TSX\nDESCRIPTION: This snippet demonstrates how to use the processRowUpdate callback to save edited row data to a server. It also shows how to handle processing errors.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/persistence.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  rows={rows}\n  columns={columns}\n  processRowUpdate={(updatedRow, originalRow) =>\n    mySaveOnServerFunction(updatedRow);\n  }\n  onProcessRowUpdateError={handleProcessRowUpdateError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing DayJS Adapter\nDESCRIPTION: TypeScript import for the DayJS adapter used with MUI X date pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n```\n\n----------------------------------------\n\nTITLE: Configuring LocalizationProvider with date adapter\nDESCRIPTION: React component example showing how to set up the LocalizationProvider with different date adapters (DateFns, Dayjs, Luxon, or Moment) to provide localization context for MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n// date-fns\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// or for dayjs\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n// or for luxon\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\n// or for moment\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\n\nfunction App({ children }) {\n  return <LocalizationProvider dateAdapter={AdapterDateFns}>{children}</LocalizationProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Slots for Header Filter Cell in MUI-X Data Grid\nDESCRIPTION: Example of using the slots.headerFilterCell prop to completely customize the header filter cell component. This approach replaces the default header filter cell implementation with a custom one.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/header-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro {...data} slots={{ headerFilterCell: MyCustomHeaderFilterCell }} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aggregation Functions\nDESCRIPTION: This example demonstrates how to create a custom aggregation function for string columns that returns the first alphabetical value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstAlphabeticalAggregation: GridAggregationFunction<string, string | null> =\n  {\n    apply: (params) => {\n      if (params.values.length === 0) {\n        return null;\n      }\n\n      const sortedValue = params.values.sort((a = '', b = '') => a.localeCompare(b));\n\n      return sortedValue[0];\n    },\n    label: 'firstAlphabetical',\n    columnTypes: ['string'],\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Container for Data Grid in React\nDESCRIPTION: Demonstrates how to use a flex container with column direction to wrap the Data Grid component. This allows the grid to take up as much space as needed to display all rows, with the option to set minimum and maximum heights.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/layout/layout.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ height: 400, width: '100%', display: 'flex', flexDirection: 'column' }}>\n  <DataGrid\n    rows={rows}\n    columns={columns}\n    initialState={{\n      pagination: {\n        paginationModel: {\n          pageSize: 5,\n        },\n      },\n    }}\n    pageSizeOptions={[5]}\n    checkboxSelection\n    disableRowSelectionOnClick\n  />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Rendering Chart Overview Demo in React\nDESCRIPTION: This code snippet demonstrates a basic usage of MUI X Charts, importing necessary components and rendering a demo visualization. It shows how to use the Charts library in a React component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ChartsOverviewDemo.js\", \"defaultCodeOpen\": true}\n```\n\n----------------------------------------\n\nTITLE: Including Hidden Columns in Export with React\nDESCRIPTION: Demonstrates how to include all columns (including hidden ones) in the export by using the allColumns property in the csvOptions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid slotProps={{ toolbar: { csvOptions: { allColumns: true } } }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Row Selection in MUI X Data Grid\nDESCRIPTION: Shows how to implement controlled row selection using the rowSelectionModel prop and onRowSelectionModelChange callback in MUI X Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ControlledSelectionGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Selection to MUI X Data Grid\nDESCRIPTION: Demonstrates how to enable checkbox selection in MUI X Data Grid using the checkboxSelection prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CheckboxSelectionGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diacritic Insensitive Filtering\nDESCRIPTION: Shows how to enable diacritic-insensitive filtering in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid ignoreDiacritics />\n```\n\n----------------------------------------\n\nTITLE: Customizing Aggregation Position with Row Grouping\nDESCRIPTION: This snippet demonstrates various ways to customize the position of aggregated values when using row grouping, using the getAggregationPosition prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Aggregate the root group in the top-level footer\n// and the other groups in their grouping row\n// (default behavior)\ngetAggregationPosition={(groupNode) => (groupNode.depth === -1 ? 'footer' : 'inline')}\n\n// Aggregate all the groups in their grouping row;\n// the root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode == null ? null : 'inline'}\n\n// Only aggregate the company groups in the grouping row;\n// director groups and root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode?.groupingField === 'company' ? 'inline' : null}\n\n// Only aggregate the company group \"Universal Pictures\" in the grouping row\ngetAggregationPosition={(groupNode) =>\n(groupNode?.groupingField === 'company' &&\n  groupNode?.groupingKey === 'Universal Pictures') ? 'inline' : null\n}\n\n// Only aggregate the root group in the top-level footer\ngetAggregationPosition={(groupNode) => groupNode == null ? 'footer' : null}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toolbar in DataGrid\nDESCRIPTION: Shows how to integrate a custom toolbar into the DataGrid component using slots prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return <DataGrid slots={{ toolbar: CustomToolbar }} showToolbar />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Data Grid Implementation\nDESCRIPTION: Traditional implementation of server-side data fetching with React Data Grid, handling pagination, sorting and filtering states manually.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst [rows, setRows] = React.useState([]);\nconst [paginationModel, setPaginationModel] = React.useState({\n  page: 0,\n  pageSize: 10,\n});\nconst [filterModel, setFilterModel] = React.useState({ items: [] });\nconst [sortModel, setSortModel] = React.useState([]);\n\nReact.useEffect(() => {\n  const fetcher = async () => {\n    // fetch data from server\n    const data = await fetch('https://my-api.com/data', {\n      method: 'GET',\n      body: JSON.stringify({\n        page: paginationModel.page,\n        pageSize: paginationModel.pageSize,\n        sortModel,\n        filterModel,\n      }),\n    });\n    setRows(data.rows);\n  };\n  fetcher();\n}, [paginationModel, sortModel, filterModel]);\n\n<DataGrid\n  columns={columns}\n  pagination\n  sortingMode=\"server\"\n  filterMode=\"server\"\n  paginationMode=\"server\"\n  onPaginationModelChange={setPaginationModel}\n  onSortModelChange={setSortModel}\n  onFilterModelChange={setFilterModel}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Filter Outside of React Data Grid\nDESCRIPTION: This example shows how to place the Quick Filter component outside of the Data Grid, addressing the challenges posed by the Grid's context structure. It demonstrates a solution for cases where the Quick Filter needs to be positioned externally.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering-recipes/filtering-recipes.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"QuickFilterOutsideOfGrid.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Filters in React Data Grid\nDESCRIPTION: Example of how to implement controlled filtering in the DataGrid component. This directly sets the filterModel prop to show only rows with a rating greater than 2.5.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  filterModel={{\n    items: [{ field: 'rating', operator: '>', value: '2.5' }],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-Filter Example in MUI X Data Grid Pro\nDESCRIPTION: Demonstrates how to implement multi-filtering in MUI X Data Grid Pro, allowing users to filter rows by multiple columns with multiple criteria.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/multi-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"BasicExampleDataGridPro.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Validation in Data Grid - JavaScript\nDESCRIPTION: This snippet demonstrates how to implement conditional validation in a Data Grid, where the Payment method column is required only if the Is paid? column is checked. It uses the preProcessEditCellProps callback to validate fields by comparing their values against one another.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-editing/recipes-editing.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ConditionalValidationGrid.js\", \"bg\": \"inline\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Data Source in DataGridPro\nDESCRIPTION: Example showing how to configure server-side data source for DataGridPro component with pagination, sorting and filtering support. The dataSource prop accepts a getRows function that fetches data from an API endpoint.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nconst dataSource = {\n  getRows: async (params: GridServerGetRowsParams) => {\n    const data = await fetch(\n      `https://api.example.com/data?${new URLSearchParams({\n        page: params.page,\n        pageSize: params.pageSize,\n        sortModel: JSON.stringify(params.sortModel),\n        filterModel: JSON.stringify(params.filterModel),\n      }).toString()}`,\n    );\n    return {\n      rows: data.rows, \n      totalRows: data.totalRows,\n    };\n  },\n}\n<DataGridPro\n  unstable_dataSource={dataSource}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Component for MUI X Date and Time Pickers\nDESCRIPTION: This code demonstrates how to create a custom layout component for MUI X Date and Time Pickers using the usePickerLayout hook. It allows for full customization of the DOM structure.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-layout/custom-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  usePickerLayout,\n  PickersLayoutRoot,\n  pickersLayoutClasses,\n  PickersLayoutContentWrapper,\n} from '@mui/x-date-pickers/PickersLayout';\n\nfunction MyCustomLayout(props) {\n  const { toolbar, tabs, content, actionBar, ownerState } = usePickerLayout(props);\n\n  // Put the action bar before the content\n  return (\n    <PickersLayoutRoot className={pickersLayoutClasses.root} ownerState={ownerState}>\n      {toolbar}\n      {actionBar}\n      <PickersLayoutContentWrapper\n        className={pickersLayoutClasses.contentWrapper}\n        ownerState={ownerState}\n      >\n        {tabs}\n        {content}\n      </PickersLayoutContentWrapper>\n    </PickersLayoutRoot>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Explorer using Rich Tree View Customizations\nDESCRIPTION: This comprehensive example combines various customization techniques to create a file explorer-like interface using the Rich Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/customization/customization.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"FileExplorer.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animations with React Spring in MUI X Charts\nDESCRIPTION: This example showcases how to use a third-party animation library (React Spring) to create custom animations for MUI X chart components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/animation/animation.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"ReactSpringAnimationCustomization.js\"}\n```\n\n----------------------------------------\n\nTITLE: Custom Data Source Implementation\nDESCRIPTION: Implementation of a custom data source using the GridDataSource interface for simplified server-side data handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst customDataSource: GridDataSource = {\n  getRows: async (params: GridGetRowsParams): GetRowsResponse => {\n    const response = await fetch('https://my-api.com/data', {\n      method: 'GET',\n      body: JSON.stringify(params),\n    });\n    const data = await response.json();\n\n    return {\n      rows: data.rows,\n      rowCount: data.totalCount,\n    };\n  },\n}\n\n<DataGrid\n  columns={columns}\n  dataSource={customDataSource}\n  pagination\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stacked Area Chart with MUI X Charts in JavaScript\nDESCRIPTION: This code snippet shows how to create a stacked area chart using MUI X Charts, which displays multiple data series stacked on top of each other.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// StackedAreaChart.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Infinite Loading Implementation in React Data Grid\nDESCRIPTION: Demonstrates infinite loading mode where new pages are loaded when scrolling reaches viewport bottom. Uses scrollEndThreshold prop to control loading trigger area.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nServerSideLazyLoadingInfinite.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Pagination Model in React Data Grid\nDESCRIPTION: Demonstrates how to create a controlled pagination model using React state and the paginationModel and onPaginationModelChange props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [paginationModel, setPaginationModel] = React.useState({\n  pageSize: 25,\n  page: 0,\n});\n\n<DataGrid\n  paginationModel={paginationModel}\n  onPaginationModelChange={setPaginationModel}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing RichTreeView Component in React\nDESCRIPTION: JSX code snippet showing how to import the RichTreeView component from the MUI X Tree View package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RichTreeView } from '@mui/x-tree-view/RichTreeView';\n```\n\n----------------------------------------\n\nTITLE: Optimized Data Grid Prop Passing in React\nDESCRIPTION: Shows how to optimize prop passing to Data Grid by extracting static objects and memoizing dynamic objects to prevent unnecessary re-renders.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/performance/performance.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst slots = {\n  row: CustomRow,\n};\n\nfunction Component(props) {\n  const cellModesModel = React.useMemo(\n    () => ({ [props.rows[0].id]: { name: { mode: GridCellModes.Edit } } }),\n    [props.rows],\n  );\n\n  return (\n    <DataGrid rows={props.rows} slots={slots} cellModesModel={cellModesModel} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actions Column in MUI X Data Grid (TSX)\nDESCRIPTION: Illustrates how to create an 'actions' column type with custom action buttons, including options for showing actions in a menu and controlling menu behavior on click.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  field: 'actions',\n  type: 'actions',\n  getActions: (params: GridRowParams) => [\n    <GridActionsCellItem icon={...} onClick={...} label=\"Delete\" />,\n    <GridActionsCellItem icon={...} onClick={...} label=\"Print\" showInMenu />,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Date Time Range Pickers - React\nDESCRIPTION: Demonstrates responsive implementation of Date Time Range Picker components for different device types\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ResponsiveDateTimeRangePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sort Comparator in MUI-X Data Grid (TSX)\nDESCRIPTION: Creates a custom sort comparator for the 'Name' column that combines sorting based on 'isAdmin' and 'name' fields.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/sorting/sorting.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef = [\n  { field: 'rating', sortingOrder: ['desc', 'asc', null] },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Menu Item in TypeScript\nDESCRIPTION: Example showing how to add a new custom menu item to the GridColumnMenu using slots and slotProps. Demonstrates adding a new columnMenuUserItem with custom display order and props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-menu/column-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Add new item\n        columnMenuUserItem: CustomUserItem,\n      }}\n      slotProps={{\n        columnMenuUserItem: {\n          // set `displayOrder` for the new item\n          displayOrder: 15,\n          // Additional props\n          myCustomValue: 'Do custom action',\n          myCustomHandler: () => alert('Custom handler fired'),\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Value Formatter for Aggregation in MUI X Data Grid (TS)\nDESCRIPTION: This snippet shows the structure of a custom aggregation function with a valueFormatter method to override the default column formatting for aggregated values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst aggregationFunction: GridAggregationFunction = {\n  apply: () => {\n    /* */\n  },\n  valueFormatter: (params) => {\n    /* format the aggregated value */\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Funnel Chart in React\nDESCRIPTION: Demonstrates how to create a basic funnel chart using MUI X Charts. The chart requires a data property containing an array of objects, each representing a section of the funnel with a 'value' property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicFunnel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Master Detail Implementation in MUI Data Grid\nDESCRIPTION: Shows basic usage of getDetailPanelContent and getDetailPanelHeight props to implement expandable detail panels. Height can be fixed or auto-sized based on content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/master-detail/master-detail.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro\n  getDetailPanelContent={({ row }) => <div>Row ID: {row.id}</div>}\n  getDetailPanelHeight={({ row }) => 100} // Optional, default is 500px.\n/>\n\n// or\n\n<DataGridPro\n  getDetailPanelContent={({ row }) => <div>Row ID: {row.id}</div>}\n  getDetailPanelHeight={({ row }) => 'auto'} // Height based on the content.\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Toolbar with GridToolbar Components\nDESCRIPTION: This snippet shows how to create a custom toolbar by combining GridToolbar components and overriding tooltip and button props using the slotProps prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/components.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton />\n      <GridToolbarDensitySelector\n        slotProps={{ tooltip: { title: 'Change density' } }}\n      />\n      <Box sx={{ flexGrow: 1 }} />\n      <GridToolbarExport\n        slotProps={{\n          tooltip: { title: 'Export data' },\n          button: { variant: 'outlined' },\n        }}\n      />\n    </GridToolbarContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Stop Edit Mode on Focus Out in MUI X Data Grid\nDESCRIPTION: This example demonstrates how to prevent users from exiting edit mode when clicking outside a cell. It uses the onCellEditStop prop to check if the reason is 'cellFocusOut' and if so, it disables the default behavior. Users can only exit edit mode using Enter, Escape, or Tab keys.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing-events.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nDisableStopEditModeOnFocusOut.js\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with React Query for Rich Tree View\nDESCRIPTION: This snippet shows how to use fetchQuery from react-query to load data for the Rich Tree View component. It integrates react-query's data fetching capabilities with the Tree View's lazy loading mechanism.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"FetchingWithReactQuery.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache with React Query for Rich Tree View\nDESCRIPTION: This example demonstrates how to use QueryClient from react-query as a custom data source cache for Rich Tree View. It implements the DataSourceCache interface to integrate with react-query's caching mechanism.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ReactQueryCache.js\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Value Formatter for CSV Export in React\nDESCRIPTION: Demonstrates how to define a valueFormatter for a column to ensure proper string representation in CSV exports, especially for complex values or columns with custom rendering.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  columns={[\n    {\n      field: 'progress',\n      valueFormatter: (value) => `${value * 100}%`,\n      renderCell: ({ value }) => <ProgressBar value={value} />,\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Export Components in React Data Grid\nDESCRIPTION: Code showing how to import the Export components from MUI X Data Grid packages. Print and CSV exports are available in the base package, while Excel export requires the premium package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/export/export.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExportPrint, ExportCsv } from '@mui/x-data-grid';\nimport { ExportExcel } from '@mui/x-data-grid-premium';\n\n<ExportPrint />\n<ExportCsv />\n<ExportExcel />\n```\n\n----------------------------------------\n\nTITLE: Handling Bar Chart Click Events in React\nDESCRIPTION: Example showing how to implement click event handlers for bar charts. Demonstrates both item-specific clicks and axis-level click handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bars/bars.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst clickHandler = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```\n\n----------------------------------------\n\nTITLE: Auto-stop Edit Component Implementation\nDESCRIPTION: Demonstrates how to implement an auto-stop edit component that exits edit mode automatically after a valid value change.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/custom-edit-component.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleChange = async (event: SelectChangeEvent) => {\n  const isValid = await apiRef.current.setEditCellValue({\n    id,\n    field,\n    value: event.target.value,\n  });\n\n  if (isValid) {\n    apiRef.current.stopCellEditMode({ id, field });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Edit Component Implementation in TypeScript\nDESCRIPTION: Demonstrates how to create a basic custom edit component for a Data Grid column using TypeScript and the renderEditCell property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/custom-edit-component.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  return <input type=\"text\" value={params.value} onValueChange={...} />;\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: 'firstName',\n    renderEditCell: (params: GridRenderEditCellParams) => (\n      <CustomEditComponent {...params} />\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Reordering in MUI X Data Grid Pro\nDESCRIPTION: This snippet demonstrates how to enable row reordering in the DataGridPro component using the rowReordering prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-ordering/row-ordering.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro rowReordering />\n```\n\n----------------------------------------\n\nTITLE: Deriving Complex Values with valueGetter in Data Grid\nDESCRIPTION: Example demonstrating how to derive a calculated value from multiple row fields. This calculates a profit value by subtracting costs from gross revenue.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'profit',\n    valueGetter: (value, row) => {\n      if (!row.gross || !row.costs) {\n        return null;\n      }\n      return row.gross - row.costs;\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Stacking Implementation in MUI X Charts\nDESCRIPTION: Demonstrates how to implement basic stacking in MUI X Charts by assigning a 'stack' attribute to series. Series with the same stack value will be stacked together.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/stacking/stacking.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"BasicStacking.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Biaxial Bar Chart with MUI X in JavaScript\nDESCRIPTION: This snippet demonstrates the creation of a biaxial bar chart using MUI X Charts. It likely includes two y-axes to represent different scales or types of data alongside the bars.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Editing with Clipboard Paste in Data Grid Premium - JavaScript\nDESCRIPTION: This snippet demonstrates bulk editing with clipboard paste functionality in Data Grid Premium. It automatically applies bulk editing to row updates from clipboard paste, utilizing the Editing API for persistence.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-editing/recipes-editing.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BulkEditingPremiumNoSnap.js\", \"bg\": \"inline\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Handling Autogenerated Rows in MUI X Data Grid (TSX)\nDESCRIPTION: Demonstrates how to detect and handle autogenerated rows in column definitions, particularly useful for features like row grouping or aggregation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  field: 'title',\n  valueGetter: (value, row) => {\n    if (isAutogeneratedRow(row)) {\n      return '[this is an autogenerated row]';\n    }\n    return `title: ${value}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Day.js Timezone\nDESCRIPTION: Demonstrates using a date with a specific timezone in DateTimePicker component using Day.js adapter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker\n        defaultValue={dayjs.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically stopping cell edit mode\nDESCRIPTION: Shows how to programmatically stop editing a cell by using the API reference method 'stopCellEditMode'. Includes options to save or discard the changes made during editing.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\napiRef.current.stopCellEditMode({ id: 1, field: 'name' });\n\n// or\n\napiRef.current.stopCellEditMode({\n  id: 1,\n  field: 'name',\n  ignoreModifications: true, // will also discard the changes made\n});\n```\n\n----------------------------------------\n\nTITLE: Value Change Handler Implementation in Custom Edit Component\nDESCRIPTION: Shows how to handle value changes in a custom edit component and update the Data Grid using the apiRef.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/custom-edit-component.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value; // The new value entered by the user\n    apiRef.current.setEditCellValue({ id, field, value: newValue });\n  };\n\n  return <input type=\"text\" value={value} onChange={handleValueChange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Basic Y-Values\nDESCRIPTION: Creates a line chart using an array of numbers for y-values, with default x-values (integers starting from 0).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/lines/lines.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  series={[{ data: [null, null, 10, 11, 12] }]}\n  xAxis={[{ data: [0, 1, 2, 3, 4, 5, 6] }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with FilterPanelTrigger\nDESCRIPTION: Demonstrates various ways to use the render prop for customizing component rendering and accessing internal state.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FilterPanelTrigger render={<CustomButton />} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<FilterPanelTrigger\n  render={(props) => <ToolbarButton onClick={props.onClick}>Filters</ToolbarButton>}\n/>\n\n<FilterPanelTrigger\n  render={(props, state) => (\n    <ToolbarButton {...props}>\n      {state.open ? 'Close filter panel' : 'Open filter panel'}\n    </ToolbarButton>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ScrollPlayground Usage\nDESCRIPTION: Example implementation showing how to scroll to specific cells using apiRef.current.scrollToIndexes()\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/scrolling/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ScrollPlayground.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Using Module Augmentation for Custom Props in Data Grid Premium Version\nDESCRIPTION: This example demonstrates how to use TypeScript module augmentation to add custom properties to the toolbar slot in MUI X Data Grid Premium version.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/components.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-premium' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPremium\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n  showToolbar\n/>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Size Options in React Data Grid\nDESCRIPTION: Demonstrates how to set custom page size options for the Data Grid component, including using numbers and objects with labels.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid pageSizeOptions={[5, 10, 25]}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid pageSizeOptions={[10, 100, { value: 1000, label: '1,000' }, { value: -1, label: 'All' }]}>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Export Format Options in Default Toolbar\nDESCRIPTION: Shows how to customize CSV export settings such as filename, delimiter, and UTF-8 BOM support when using the default toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid\n  slotProps={{\n    toolbar: {\n      csvOptions: {\n        fileName: 'customerDataBase',\n        delimiter: ';',\n        utf8WithBom: true,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Self-contained BarChart Component\nDESCRIPTION: TypeScript example of importing and using the self-contained BarChart component from MUI X Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/quickstart/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BarChart } from '@mui/x-charts/BarChart';\n```\n\n----------------------------------------\n\nTITLE: Basic Date Time Picker Usage in React\nDESCRIPTION: Demonstrates the basic implementation of the Date Time Picker component in a React application.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicDateTimePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tree Items using Headless API\nDESCRIPTION: This example demonstrates how to use the useTreeItem hook to create a custom Tree Item component with an avatar and custom typography elements.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"HeadlessAPI.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Pagination with Row Selection in MUI X Data Grid\nDESCRIPTION: Shows how to use controlled selection with server-side pagination, using keepNonExistentRowsSelected prop to maintain selection across page changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid keepNonExistentRowsSelected />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ControlledSelectionServerPaginationGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Selection Column in MUI X Data Grid\nDESCRIPTION: Shows how to customize the checkbox selection column in MUI X Data Grid, including repositioning and resizing.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CheckboxSelectionCustom.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Area Chart with MUI X Charts in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic area chart using the MUI X Charts library. It likely includes setting up data, axes, and the area plot.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// SimpleAreaChart.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tooltip Content in MUI-X Charts\nDESCRIPTION: Example demonstrating how to create custom tooltip content by providing a custom component to slots.tooltip along with useItemTooltip hook for data retrieval.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ChartsTooltipContainer } from '@mui/x-charts/ChartsTooltip';\n\nfunction CustomItemTooltipContent() {\n  const tooltipData = useItemTooltip();\n\n  if (!tooltipData) { // No data to display\n    return null;\n  }\n\n  return <div>{/** Your custom content **/}</div>;\n}\n\n<LineChart\n  slots={{ tooltip: CustomItemTooltip }}\n/>\n\n// With composition\n<ChartContainer>\n  // ...\n  <ChartsTooltipContainer trigger=\"item\">\n    <CustomItemTooltipContent />\n  </ChartsTooltipContainer>\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in React Scatter Chart\nDESCRIPTION: Demonstrates how to implement a click event handler for scatter chart items. The handler receives the mouse event and parameters identifying the clicked element.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/scatter/scatter.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onItemClick = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```\n\n----------------------------------------\n\nTITLE: Disabling Reordering for Specific Columns in MUI X Data Grid Pro\nDESCRIPTION: This snippet illustrates how to disable reordering for a specific column by setting the disableReorder property to true in the GridColDef of the respective column.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-ordering/column-ordering.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"const columns = [\n  { field: 'name', headerName: 'Name', disableReorder: true },\n  // ... other columns\n];\n\n<DataGridPro columns={columns} {...props} />\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Density State in React Data Grid\nDESCRIPTION: Demonstrates how to implement controlled density state in a Data Grid by using both density and onDensityChange props. This allows programmatic control and response to user density changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/accessibility/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [density, setDensity] = React.useState<GridDensity>('compact');\n\nreturn (\n  <DataGrid\n    density={density}\n    onDensityChange={(newDensity) => setDensity(newDensity)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Column Ordering in MUI X Data Grid Pro\nDESCRIPTION: This snippet demonstrates the basic implementation of column ordering in MUI X Data Grid Pro. It allows users to reorder columns by dragging and dropping header cells.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-ordering/column-ordering.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<DataGridPro {...props} />\"\n```\n\n----------------------------------------\n\nTITLE: Defining Column Groups in MUI Data Grid using columnGroupingModel\nDESCRIPTION: This example shows how to create a basic column grouping structure with nested groups. It demonstrates defining column groups with the required groupId and children properties, creating a hierarchy of groups and column fields.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-groups/column-groups.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  columnGroupingModel={[\n    {\n      groupId: 'internal data',\n      children: [{ field: 'id' }],\n    },\n    {\n      groupId: 'character',\n      children: [\n        {\n          groupId: 'naming',\n          children: [{ field: 'lastName' }, { field: 'firstName' }],\n        },\n        { field: 'age' },\n      ],\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Programmatically starting row edit mode\nDESCRIPTION: Demonstrates how to programmatically start editing an entire row by using the API reference method 'startRowEditMode' and passing the row ID. This is only available when editMode is set to 'row'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\napiRef.current.startRowEditMode({ id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Stack Offset Demo in MUI X Charts\nDESCRIPTION: Shows how to use different stack offset strategies ('none', 'expand', 'diverging') to handle positive and negative values in stacked visualizations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/stacking/stacking.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"StackOffsetDemo.js\"}\n```\n\n----------------------------------------\n\nTITLE: Multi-Calendar Date Time Range Picker - React\nDESCRIPTION: Demonstrates customization of calendar display with multiple months using the calendars prop\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateTimeRangePickerCalendarProp.js\"}\n```\n\n----------------------------------------\n\nTITLE: Composing Gauge with Container and Sub-components in React\nDESCRIPTION: Illustrates how to use the GaugeContainer along with individual Gauge elements like GaugeReferenceArc and GaugeValueArc for more granular control over the chart's composition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/gauge/gauge.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  GaugeContainer,\n  Gauge,\n  GaugeReferenceArc,\n  GaugeValueArc,\n} from '@mui/x-charts/Gauge';\n\n<GaugeContainer value={25} valueMax={50}>\n  <GaugeReferenceArc />\n  <GaugeValueArc />\n  <AddedElement />\n</GaugeContainer>;\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Cells\nDESCRIPTION: Demonstrates cell styling using the cellClassName property of GridColDef with conditional classes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'name',\n    cellClassName: 'super-app-theme--cell',\n  },\n  {\n    field: 'score',\n    type: 'number',\n    cellClassName: (params: GridCellParams<number>) =>\n      clsx('super-app', {\n        negative: params.value < 0,\n        positive: params.value > 0,\n      }),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Value Pivoting Demo\nDESCRIPTION: Complex example showing pivoting with multiple rows, columns, and aggregated values for comprehensive data analysis.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting-explained.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGridPivotingMultipleValues.js\n```\n\n----------------------------------------\n\nTITLE: Responsive Time Pickers Implementation\nDESCRIPTION: Demonstrates different Time Picker variants for desktop and mobile devices\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"ResponsiveTimePickers.js\"\n```\n\n----------------------------------------\n\nTITLE: Memoizing Pagination Meta for Unknown Row Count in React Data Grid\nDESCRIPTION: Demonstrates how to memoize the paginationMeta object to handle undefined hasNextPage values during loading in server-side pagination with unknown row count.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst paginationMetaRef = React.useRef<GridPaginationMeta>();\n\nconst paginationMeta = React.useMemo(() => {\n  if (\n    hasNextPage !== undefined &&\n    paginationMetaRef.current?.hasNextPage !== hasNextPage\n  ) {\n    paginationMetaRef.current = { hasNextPage };\n  }\n  return paginationMetaRef.current;\n}, [hasNextPage]);\n```\n\n----------------------------------------\n\nTITLE: Grid Pivoting with Values Demo\nDESCRIPTION: Illustrates value-based pivoting where numeric fields are aggregated into sums, averages, or counts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting-explained.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGridPivotingValues.js\n```\n\n----------------------------------------\n\nTITLE: Server Data Integration in Calendar\nDESCRIPTION: Demonstrates how to display dynamic data from server requests in calendar view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nDateCalendarServerRequest.js\n```\n\n----------------------------------------\n\nTITLE: Viewport Loading Implementation in React Data Grid\nDESCRIPTION: Demonstrates viewport loading mode where the grid fetches the first page immediately and adds skeleton rows. Additional pages are fetched as users scroll through skeleton rows.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nServerSideLazyLoadingViewport.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Quick Filter Parser and Formatter\nDESCRIPTION: Demonstrates how to implement custom parsing and formatting logic for quick filter values, allowing for more complex search patterns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid\n  showToolbar\n  slotProps={{\n    toolbar: {\n      quickFilterProps: {\n        quickFilterParser: (searchInput) => searchInput.split(',').map((value) => value.trim()),\n        quickFilterFormatter: (quickFilterValues) => quickFilterValues.join(', '),\n        debounceMs: 200, // time before applying the new quick filter value\n      },\n    },\n  }}\n/>\n\n// Custom quick filter:\n<QuickFilter\n  parser={(searchInput) => searchInput.split(',').map((value) => value.trim())}\n  formatter={(quickFilterValues) => quickFilterValues.join(', ')}\n  debounceMs={200} // time before applying the new quick filter value\n>\n  {/* ... */}\n</QuickFilter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Row Height in React Data Grid\nDESCRIPTION: This code shows how to set up dynamic row heights in a DataGrid component. It uses 'auto' as the return value for getRowHeight and includes an optional getEstimatedRowHeight prop for better scrollbar behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-height/row-height.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid getRowHeight={() => 'auto'} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid getRowHeight={() => 'auto'} getEstimatedRowHeight={() => 200} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree View from Structured Data with RichTreeView Component\nDESCRIPTION: Example showing how to use the new RichTreeView component to create a tree view from structured data instead of manually creating TreeItem components. The items prop accepts an array of objects with id, label, and optional children properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_56\n\nLANGUAGE: tsx\nCODE:\n```\nconst ITEMS = [\n  {\n    id: 'node-1',\n    label: 'Node 1',\n    children: [\n      { id: 'node-1-1', label: 'Node 1.1' },\n      { id: 'node-1-2', label: 'Node 1.2' },\n    ],\n  },\n  {\n    id: 'node-2',\n    label: 'Node 2',\n  },\n];\n\n<RichTreeView\n  items={MUI_X_PRODUCTS}\n  defaultCollapseIcon={<ExpandMoreIcon />}\n  defaultExpandIcon={<ChevronRightIcon />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Controlling Cell Edit Modes in DataGrid with TSX\nDESCRIPTION: Examples of using cellModesModel prop to control cell editing modes. Shows how to set a cell to edit mode and view mode with additional options like ignoreModifications.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Changes the mode of field=name from row with id=1 to \"edit\"\n<DataGrid\n  cellModesModel={{ 1: { name: { mode: GridCellModes.Edit } } }}\n/>\n\n// Changes the mode of field=name from row with id=1 to \"view\", ignoring modifications made\n<DataGrid\n  cellModesModel={{ 1: { name: { mode: GridCellModes.View, ignoreModifications: true } } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Heatmap Chart in React\nDESCRIPTION: Demonstrates the basic implementation of a Heatmap chart requiring two axes with data properties to define x and y categories. The series data is provided as an array of 3-tuples representing x-index, y-index, and cell value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/heatmap/heatmap.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBasicHeatmap.js\n```\n\n----------------------------------------\n\nTITLE: Controlling Selected Sections in Date Field (React)\nDESCRIPTION: This snippet demonstrates how to control selected sections in a date field component using the 'selectedSections' and 'onSelectedSectionsChange' props. It also shows how to focus the input and select specific sections programmatically.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/fields/fields.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { DateField } from '@mui/x-date-pickers/DateField';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nexport default function ControlledSelectedSections() {\n  const [selectedSections, setSelectedSections] = React.useState(null);\n  const inputRef = React.useRef(null);\n\n  const selectSection = (section) => () => {\n    inputRef.current.focus();\n    setSelectedSections(section);\n  };\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer components={['DateField']}>\n        <div>\n          <DateField\n            label=\"Date field\"\n            inputRef={inputRef}\n            selectedSections={selectedSections}\n            onSelectedSectionsChange={(newValue) => setSelectedSections(newValue)}\n          />\n          <div style={{ display: 'flex', flexDirection: 'column', marginTop: 8 }}>\n            <button onClick={selectSection('year')}>Select year</button>\n            <button onClick={selectSection('month')}>Select month</button>\n            <button onClick={selectSection('day')}>Select day</button>\n            <button onClick={selectSection('all')}>Select all</button>\n            <button onClick={selectSection(null)}>Select none</button>\n          </div>\n        </div>\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Locale Translations\nDESCRIPTION: Shows how to combine translations from multiple MUI packages including core, data-grid, and date-pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/localization/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { bgBG } from '@mui/x-data-grid/locales';\nimport { bgBG as pickersBgBG } from '@mui/x-date-pickers/locales';\nimport { bgBG as coreBgBG } from '@mui/material/locale';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  bgBG, // x-data-grid translations\n  pickersBgBG, // x-date-pickers translations\n  coreBgBG, // core translations\n);\n\n<ThemeProvider theme={theme}>\n  <DataGrid />\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Custom Column Sorting via API Object\nDESCRIPTION: Shows how to implement custom sorting for a column that has default sorting disabled. The example uses the API object to programmatically sort the 'firstName' column through custom buttons.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/api-object/api-object.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [{ field: 'rating', sortable: false }, ...otherColumns];\n\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'asc')}>\n        Sort by ASC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'desc')}>\n        Sort by DESC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', null)}>\n        Clear sort\n      </Button>\n      <DataGrid columns={columns} apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Row Height in React Data Grid\nDESCRIPTION: This snippet demonstrates how to use the getRowHeight prop to set variable row heights in a DataGridPro component. It emphasizes the importance of memoizing the function to optimize rendering.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-height/row-height.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRowHeight = React.useCallback(() => { ... }, []);\n\n<DataGridPro getRowHeight={getRowHeight} />\n```\n\n----------------------------------------\n\nTITLE: Combining Row and Column Spanning in MUI X Data Grid\nDESCRIPTION: This demo showcases how to use row spanning in conjunction with column spanning to create cells that span multiple rows and columns simultaneously, creating a class schedule layout.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-spanning/row-spanning.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n\nconst columns = [\n  { field: 'time', headerName: 'Time', width: 130 },\n  { field: 'monday', headerName: 'Monday', width: 180 },\n  { field: 'tuesday', headerName: 'Tuesday', width: 180 },\n  { field: 'wednesday', headerName: 'Wednesday', width: 180 },\n  { field: 'thursday', headerName: 'Thursday', width: 180 },\n  { field: 'friday', headerName: 'Friday', width: 180 },\n];\n\nconst rows = [\n  {\n    id: 1,\n    time: '8:00 - 9:00',\n    monday: 'Math',\n    tuesday: 'English',\n    wednesday: 'Science',\n    thursday: 'History',\n    friday: 'PE',\n  },\n  {\n    id: 2,\n    time: '9:00 - 10:00',\n    monday: 'Math',\n    tuesday: 'English',\n    wednesday: 'Science',\n    thursday: 'History',\n    friday: 'PE',\n  },\n  {\n    id: 3,\n    time: '10:00 - 11:00',\n    monday: 'Art',\n    tuesday: 'Music',\n    wednesday: 'Math',\n    thursday: 'English',\n    friday: 'Science',\n  },\n  {\n    id: 4,\n    time: '11:00 - 12:00',\n    monday: 'Art',\n    tuesday: 'Music',\n    wednesday: 'Math',\n    thursday: 'English',\n    friday: 'Science',\n  },\n  {\n    id: 5,\n    time: '12:00 - 13:00',\n    monday: 'Lunch',\n    tuesday: 'Lunch',\n    wednesday: 'Lunch',\n    thursday: 'Lunch',\n    friday: 'Lunch',\n  },\n  {\n    id: 6,\n    time: '13:00 - 14:00',\n    monday: 'History',\n    tuesday: 'PE',\n    wednesday: 'Art',\n    thursday: 'Music',\n    friday: 'Math',\n  },\n  {\n    id: 7,\n    time: '14:00 - 15:00',\n    monday: 'History',\n    tuesday: 'PE',\n    wednesday: 'Art',\n    thursday: 'Music',\n    friday: 'Math',\n  },\n];\n\nexport default function RowSpanningClassSchedule() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        rowSpanning\n        columnHeaderHeight={50}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows Using updateRows API Method in TypeScript\nDESCRIPTION: Demonstrates how to delete a row from the Data Grid using the updateRows API method by passing the _action property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-updates/row-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiRef.current.updateRows([{ id: 1, _action: 'delete' }]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Moment Timezone with MUI X\nDESCRIPTION: Shows how to configure Moment.js with timezone support in MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n<LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n  {children}\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Field with Value Getter in MUI X Data Grid (TSX)\nDESCRIPTION: This snippet demonstrates how to define a custom 'profit' field that calculates its value based on 'gross' and 'budget' fields from each row.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  field: 'profit',\n  type: 'number',\n  valueGetter: (value, row) => {\n    if (!row.gross || !row.budget) {\n      return null;\n    }\n    return (row.gross - row.budget) / row.budget;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filter Operator in TypeScript\nDESCRIPTION: Demonstrates how to create a custom 'From' operator for filtering numeric values. The operator checks if the cell value is greater than or equal to the filter value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst operator: GridFilterOperator<any, number> = {\n  label: 'From',\n  value: 'from',\n  getApplyFilterFn: (filterItem, column) => {\n    if (!filterItem.field || !filterItem.value || !filterItem.operator) {\n      return null;\n    }\n\n    return (value, row, column, apiRef) => {\n      return Number(value) >= Number(filterItem.value);\n    };\n  },\n  InputComponent: RatingInputValue,\n  InputComponentProps: { type: 'number' },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bar Chart with MUI X in JavaScript\nDESCRIPTION: This code snippet shows the implementation of a basic bar chart using MUI X Charts. It probably includes standard features like axes, labels, and a single series of data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Accessing API Object Inside Data Grid Components with useGridApiContext\nDESCRIPTION: Shows how to access the API object inside component slots or renders using the useGridApiContext hook. This allows interaction with Data Grid methods from within custom components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/api-object/api-object.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomFooter() {\n  const apiRef = useGridApiContext();\n\n  return <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Chart Zoom Options\nDESCRIPTION: Example demonstrating zoom options configuration including minStart, maxEnd, step, minSpan, maxSpan, and panning settings for MUI-X charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/zoom-and-pan/zoom-and-pan.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  minStart: 0,\n  maxEnd: 100,\n  step: 1,\n  minSpan: 5,\n  maxSpan: 100,\n  panning: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Moment Timezone\nDESCRIPTION: Demonstrates using Moment.js with timezone support in MUI X DateTimePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n      <DateTimePicker\n        defaultValue={moment.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Heatmap Color Mapping in React\nDESCRIPTION: Shows how to customize the color mapping of a Heatmap chart using the zAxis configuration. Supports both piecewise and continuous color mapping approaches for visualizing data values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/heatmap/heatmap.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nColorConfig.js\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid State Using useGridSelector Hook\nDESCRIPTION: Shows how to access Data Grid state using the useGridSelector hook for reactive state binding.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/state/state.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic Time Range Picker in React\nDESCRIPTION: Basic implementation of the Time Range Picker component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicTimeRangePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Tree View State Synchronization\nDESCRIPTION: Shows how to synchronize two tree views by sending the entire dataset using getItemTree API method when reordering occurs.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nSendAllItemsToServer.js\n```\n\n----------------------------------------\n\nTITLE: Converting Column Value Types in MUI X Data Grid (TSX)\nDESCRIPTION: Demonstrates how to use valueGetter to convert a column value to the correct type, specifically converting a string to a Date object for a 'dateTime' column type.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  field: 'lastLogin',\n  type: 'dateTime',\n  valueGetter: (value) => value && new Date(value),\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Date Time Picker Variants in React\nDESCRIPTION: Shows the implementation of different Date Time Picker variants (Desktop, Mobile, and Static) in a responsive layout.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ResponsiveDateTimePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Grid Pivoting with Columns Demo\nDESCRIPTION: Demonstrates column-based pivoting where unique values in selected fields create new column groups.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting-explained.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGridPivotingColumns.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Size Data Grid in React\nDESCRIPTION: Demonstrates how to set predefined dimensions for the Data Grid's parent container. This approach provides a fixed size for the grid regardless of its content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/layout/layout.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ height: 400, width: '100%' }}>\n  <DataGrid\n    rows={rows}\n    columns={columns}\n    initialState={{\n      pagination: {\n        paginationModel: {\n          pageSize: 5,\n        },\n      },\n    }}\n    pageSizeOptions={[5]}\n    checkboxSelection\n    disableRowSelectionOnClick\n  />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Composition with Click Events\nDESCRIPTION: Shows how to set up click event handlers when using chart composition, allowing for handling both bar and line series interactions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bars/bars.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer onAxisClick={onAxisClick}>\n  {/* ... */}\n  <BarPlot onItemClick={onItemClick} />\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Styling Data Grid with sx Prop\nDESCRIPTION: Demonstrates applying basic styling to the Data Grid component using the sx prop for one-off customizations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid sx={{ m: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Basic Radar Chart Implementation in React\nDESCRIPTION: Shows the minimal implementation of a Radar chart with required 'series' prop for data and 'radar' prop for axis configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/radar/radar.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RadarDataProvider>\\n  <ChartsWrapper>\\n    <ChartsLegend />\\n    <ChartsSurface>\\n      {/* The background of the chart */}\\n      <RadarGrid />\\n      <RadarMetricLabels />\\n      {/* The data with axis highlight on top of area and below marks */}\\n      <RadarSeriesArea />\\n      <RadarAxisHighlight />\\n      <RadarSeriesMarks />\\n      {/* Other components */}\\n      <ChartsOverlay />\\n      <Tooltip />\\n    </ChartsSurface>\\n  </ChartsWrapper>\\n</RadarDataProvider>\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Pinning for Specific Columns\nDESCRIPTION: Example showing how to disable pinning for a specific column by setting the pinnable property to false in the column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-pinning/column-pinning.md#2025-04-21_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<DataGridPro columns={[{ field: 'id', pinnable: false }]} /> // Default is `true`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Loading Overlay in MUI Data Grid\nDESCRIPTION: Demonstrates how to configure loading overlay variants in Data Grid using slotProps. Supports skeleton, linear-progress, and circular-progress variants.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/overlays/overlays.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  {...data}\n  loading\n  slotProps={{\n    loadingOverlay: {\n      variant: 'linear-progress',\n      noRowsVariant: 'skeleton',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Fields in Data Grid - TypeScript\nDESCRIPTION: This snippet shows how to create linked fields in a Data Grid where the options of one field depend on the value of another. It uses a function for valueOptions to return relevant options based on another field's value, and a custom edit component to reset the dependent field when the main field changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-editing/recipes-editing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'account',\n    type: 'singleSelect',\n    valueOptions: ({ row }) => {\n      if (!row) {\n        // The row is not available when filtering this column\n        return ['Sales', 'Investments', 'Ads', 'Taxes', 'Payroll', 'Utilities'];\n      }\n\n      return row.type === 'Income' // Gets the value of the \"type\" field\n        ? ['Sales', 'Investments', 'Ads']\n        : ['Taxes', 'Payroll', 'Utilities'];\n    },\n  },\n];\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTypeEditComponent = (props: GridEditSingleSelectCellProps) => {\n  const apiRef = useGridApiContext();\n\n  const handleValueChange = async () => {\n    await apiRef.current.setEditCellValue({\n      id: props.id,\n      field: 'account',\n      value: '',\n    });\n  };\n\n  return <GridEditSingleSelectCell onValueChange={handleValueChange} {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Gauge Implementation in React\nDESCRIPTION: Demonstrates the basic usage of the Gauge component to display a numeric value within a defined range.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/gauge/gauge.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Gauge value={25} valueMax={50} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Reorder Column in MUI X Data Grid Pro\nDESCRIPTION: This example shows how to customize the reorder column by spreading GRID_REORDER_COL_DEF and adding custom properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-ordering/row-ordering.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro\n  columns={[\n    {\n      ...GRID_REORDER_COL_DEF, // Already contains the right field\n      width: 40,\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Views Configuration\nDESCRIPTION: Shows how to configure different views (day, month, year) in the Date Picker component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nDatePickerViews.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Tree View with Lazy Loading and Initial State\nDESCRIPTION: This snippet shows how to set up a Rich Tree View with lazy loading and an initial state. It defines a data source with a getChildrenCount method and uses the items prop for initial state.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"LazyLoadingInitialState.js\"}\n```\n\n----------------------------------------\n\nTITLE: File Explorer with Drag and Drop\nDESCRIPTION: Implements a file explorer interface with drag and drop reordering functionality limited to folder contents.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nFileExplorer.js\n```\n\n----------------------------------------\n\nTITLE: Basic Date Field Usage in React\nDESCRIPTION: Demonstrates the basic implementation of the Date Field component. This snippet likely shows how to render a simple date input field using the MUI X Date Field component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-field/date-field.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"demo\": \"BasicDateField.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Lazy Loading for Rich Tree View\nDESCRIPTION: This example demonstrates basic lazy loading for Rich Tree View. It passes an empty array to the items prop, causing the getTreeItems method to be called on the first render to load all items dynamically.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicLazyLoading.js\"}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Date Time Range Field Usage in React\nDESCRIPTION: This code snippet demonstrates the basic usage of Date Time Range Field components in React. It shows how to render the field with either one input using SingleInputDateTimeRangeField or two inputs using MultiInputDateTimeRangeField.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-field/date-time-range-field.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicDateTimeRangeField.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions with Modal in MUI X Data Grid (JavaScript)\nDESCRIPTION: An example demonstrating how to configure action buttons in a Data Grid that open modals, with control over menu behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ActionsWithModalGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Range Field Implementation - React\nDESCRIPTION: Demonstrates the basic usage of Date Range Field components with reference to BasicDateRangeField.js demo file.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-field/date-range-field.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"BasicDateRangeField.js\"}\n```\n\n----------------------------------------\n\nTITLE: Custom Time View Renderer for Date Time Picker in React\nDESCRIPTION: Shows how to customize the time view renderer in the Date Time Picker, including using a Time Clock or removing the time view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DateTimePickerViewRenderers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Custom Header Rendering in Data Grid with TSX\nDESCRIPTION: Example of how to customize column headers using the renderHeader method in a Data Grid component. This snippet shows how to replace the default header with a custom component that includes text and an emoji.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-header/column-header.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    width: 150,\n    type: 'date',\n    renderHeader: (params: GridColumnHeaderParams) => (\n      <strong>\n        {'Birthday '}\n        <span role=\"img\" aria-label=\"enjoy\">\n          🎂\n        </span>\n      </strong>\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Date Time Format Implementation\nDESCRIPTION: Demonstrates how to customize the date and time format in the DateTimeField component using localization options.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-field/date-time-field.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCustomDateTimeFormat.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipping in React Charts\nDESCRIPTION: Demonstrates how to use ChartsClipPath to confine chart elements within a designated drawing area, and how to apply the clip path to specific chart elements.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/composition/composition.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer>\n  <g clipPath={`url(#${clipPathId})`}>\n    // The plotting to clip in the drawing area.\n    <ScatterPlot />\n    <LinePlot />\n  </g>\n  <ChartsClipPath id={clipPathId} /> // Defines the clip path of the drawing area.\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinned Rows in MUI X Data Grid with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up pinned rows at the top and bottom of a Data Grid using the pinnedRows prop. It shows the structure for defining pinned rows data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-pinning/row-pinning.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst pinnedRows: GridPinnedRowsProp = {\n  top: [{ id: 0, brand: 'Nike' }],\n  bottom: [\n    { id: 1, brand: 'Adidas' },\n    { id: 2, brand: 'Puma' },\n  ],\n};\n\n<DataGridPro pinnedRows={pinnedRows} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing an Area Chart with Connected Nulls in MUI X Charts\nDESCRIPTION: This code demonstrates how to create an area chart that handles null values by connecting the data points on either side, maintaining chart continuity.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AreaChartConnectNulls.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker with Shortcuts\nDESCRIPTION: Implementation of predefined date range shortcuts for quick selection\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"BasicRangeShortcuts.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Quick Filter Function\nDESCRIPTION: Shows how to create a custom quick filter function for a date column to filter by year.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst getApplyQuickFilterFn: GetApplyQuickFilterFn<any, unknown> = (value) => {\n  if (!value || value.length !== 4 || !/\\d{4}/.test(value)) {\n    // If the value is not a 4 digit string, it cannot be a year so applying this filter is useless\n    return null;\n  }\n  return (cellValue) => {\n    if (cellValue instanceof Date) {\n      return cellValue.getFullYear() === Number(value);\n    }\n    return false;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Quick Filter Logic Operator\nDESCRIPTION: Demonstrates how to change the quick filter logic operator to 'OR' instead of the default 'AND' behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ninitialState={{\n  filter: {\n    filterModel: {\n      items: [],\n      quickFilterLogicOperator: GridLogicOperator.Or,\n    },\n  },\n}}\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Time Clock Values\nDESCRIPTION: Demonstrates both controlled and uncontrolled value management in TimeClock component using value and defaultValue props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-clock/time-clock.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nTimeClockValue.js\n```\n\n----------------------------------------\n\nTITLE: Handling Data Source Errors in DataGrid Component\nDESCRIPTION: Shows how to implement error handling for data fetching and updating operations using the onDataSourceError prop. It demonstrates type checking for different error types and their corresponding params.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  columns={columns}\n  dataSource={customDataSource}\n  onDataSourceError={(error) => {\n    if (error instanceof GridGetRowsError) {\n      // `error.params` is of type `GridGetRowsParams`\n      // fetch related logic, e.g set an overlay state\n    }\n    if (error instanceof GridUpdateRowError) {\n      // `error.params` is of type `GridUpdateRowParams`\n      // update related logic, e.g set a snackbar state\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Date Format in React Date Field\nDESCRIPTION: Shows how to customize the date format in the Date Field component. This example likely demonstrates various ways to format the date display according to specific requirements.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-field/date-field.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"demo\": \"CustomDateFormat.js\"\n```\n\n----------------------------------------\n\nTITLE: Using D3 Formatter for Axis Ticks in MUI X-Charts\nDESCRIPTION: Example showing how to access the D3 tickFormat method through the context to adapt tick formatting based on scale properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"FormatterD3.js\"}\n```\n\n----------------------------------------\n\nTITLE: Formatting Series Values in Chart Tooltips with JSX\nDESCRIPTION: Example showing how to use the valueFormatter property to format series values in the tooltip. This snippet formats numbers as US dollars and date display.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  series={[\n    {\n      data: [ ... ],\n      valueFormatter: (value) => `$${value}`\n    }\n  ]}\n  xAxis={[{\n    data: [ ... ],\n    valueFormatter: (value) => value.getFullYear(),\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Clipboard Data Format in React Data Grid\nDESCRIPTION: Shows how to customize the cell delimiter for copy and paste operations, using a comma instead of the default tab character.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/clipboard/clipboard.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium\n  {...otherProps}\n  // support comma separated values\n  clipboardCopyCellDelimiter=','\n  splitClipboardPastedText={(text) => text.split('\\n').map((row) => row.split(','))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone with Luxon\nDESCRIPTION: Example showing how to set a default timezone globally using Luxon's Settings API for use with MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'America/New_York';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\n----------------------------------------\n\nTITLE: Using Row Selection API in MUI X Data Grid\nDESCRIPTION: Demonstrates the use of the apiRef to programmatically control row selection in MUI X Data Grid. This should be used as a last resort when props are not sufficient.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"RowSelectionApiNoSnap.js\", \"bg\": \"inline\", \"hideToolbar\": true}\n```\n\n----------------------------------------\n\nTITLE: Creating a Calendar with Row Spanning in MUI X Data Grid\nDESCRIPTION: This demo recreates a calendar layout using the row spanning feature in MUI X Data Grid. It demonstrates how to structure data and configure columns to achieve a calendar-like display.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-spanning/row-spanning.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180 },\n  { field: 'monday', headerName: 'Monday', width: 100 },\n  { field: 'tuesday', headerName: 'Tuesday', width: 100 },\n  { field: 'wednesday', headerName: 'Wednesday', width: 100 },\n  { field: 'thursday', headerName: 'Thursday', width: 100 },\n  { field: 'friday', headerName: 'Friday', width: 100 },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: 'Morning',\n    monday: '08:00',\n    tuesday: '08:00',\n    wednesday: '08:00',\n    thursday: '08:00',\n    friday: '08:00',\n  },\n  {\n    id: 2,\n    name: 'Afternoon',\n    monday: '12:00',\n    tuesday: '12:00',\n    wednesday: '12:00',\n    thursday: '12:00',\n    friday: '12:00',\n  },\n  {\n    id: 3,\n    name: 'Evening',\n    monday: '17:00',\n    tuesday: '17:00',\n    wednesday: '17:00',\n    thursday: '17:00',\n    friday: '17:00',\n  },\n];\n\nexport default function RowSpanningCalendar() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        rowSpanning\n        columnHeaderHeight={50}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Time Picker Basic Usage\nDESCRIPTION: Demonstrates basic implementation of the Time Picker component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"BasicTimePicker.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing getRows Method with Group Parameters in TypeScript\nDESCRIPTION: Shows how to implement the getRows callback function that handles group keys and fields for server-side data fetching.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/row-grouping.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRows: async (params) => {\n  const urlParams = new URLSearchParams({\n    // Example: JSON.stringify(['20th Century Fox', 'James Cameron'])\n    groupKeys: JSON.stringify(params.groupKeys),\n    // Example: JSON.stringify(['company', 'director'])\n    groupFields: JSON.stringify(params.groupFields),\n  });\n  const getRowsResponse = await fetchRows(\n    // Server should group the data based on `groupFields` and\n    // extract the rows for the nested level based on `groupKeys`.\n    `https://mui.com/x/api/data-grid?${urlParams.toString()}`,\n  );\n  return {\n    rows: getRowsResponse.rows,\n    rowCount: getRowsResponse.rowCount,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Expanded Detail Panel in React Data Grid\nDESCRIPTION: A controlled implementation that ensures only one detail panel can be expanded at a time in the Data Grid master detail view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-recipes/row-recipes.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nDetailPanelOneExpandedRow.js\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Lazy Loading Data Grid\nDESCRIPTION: Demonstrates error handling implementation using onDataSourceError prop and retry mechanism with GridGetRowsParams.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/lazy-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nServerSideLazyLoadingErrorHandling.js\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Digital Clock in React\nDESCRIPTION: Demonstrates the basic implementation of the DigitalClock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockBasic.js\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Event Behavior in TSX\nDESCRIPTION: Example showing how to prevent the default behavior of a cell click event by setting the defaultMuiPrevented property to true. This allows implementation of custom behavior instead of the default action.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/events/events.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  onCellClick={(params: GridCellParams, event: MuiEvent<React.MouseEvent>) => {\n    event.defaultMuiPrevented = true;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Text with Theme Provider\nDESCRIPTION: Demonstrates how to configure locale text using ThemeProvider and createTheme with Bulgarian locale.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/localization/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { bgBG } from '@mui/x-data-grid/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  bgBG,\n);\n\n<ThemeProvider theme={theme}>\n  <DataGrid />\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with onChange Callback in React\nDESCRIPTION: Example of setting up a DatePicker component with an onChange callback to update a state value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker onChange={(value) => setValue(value)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing One Filter Per Column in MUI X Data Grid Pro\nDESCRIPTION: Shows how to limit filtering to one filter per column while still allowing filtering on other columns using the filterColumns and getColumnForNewFilter props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/multi-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"DisableMultiFiltersDataGridPro.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Paste Cancellation in React Data Grid\nDESCRIPTION: Demonstrates how to use the onBeforeClipboardPasteStart prop to confirm or cancel a paste operation with a custom confirmation dialog.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/clipboard/clipboard.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst onBeforeClipboardPasteStart = async () => {\n  const confirmed = window.confirm('Are you sure you want to paste?');\n  if (!confirmed) {\n    throw new Error('Paste operation cancelled');\n  }\n};\n\n<DataGridPremium onBeforeClipboardPasteStart={onBeforeClipboardPasteStart} />;\n```\n\n----------------------------------------\n\nTITLE: Controlled Aggregation in Data Grid Premium\nDESCRIPTION: This example shows how to control aggregation using the aggregationModel prop and listen to changes with onAggregationModelChange.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGridPremium\n  {...data}\n  aggregationModel={aggregationModel}\n  onAggregationModelChange={(newModel) => setAggregationModel(newModel)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Click Handler for Chart Legends\nDESCRIPTION: Implementation of click event handlers for ChartsLegend and PiecewiseColorLegend components. The handler receives event, context, and index parameters for processing legend item clicks.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/legend/legend.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst clickHandler = (event, context, index) => {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Axes on the Same Side in MUI X-Charts\nDESCRIPTION: Demo showing how to display multiple axes on the same side, using height and width properties to control spacing and prevent overlap.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MultipleAxes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Handling Validation in DatePicker onChange Callback\nDESCRIPTION: Demonstrates how to use the context argument in the onChange callback to check for validation errors before running logic.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker\n  onChange={(newValue, context) => {\n    setValue(value);\n    if (context.validationError == null) {\n      runSomeLogic();\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source for Server-side Row Grouping in TypeScript\nDESCRIPTION: Demonstrates how to configure a custom data source with grouping capabilities including getGroupKey and getChildrenCount methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/row-grouping.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst customDataSource: GridDataSource = {\n  getRows: async (params) => {\n    // Fetch the data from the server.\n  },\n  getGroupKey: (row) => {\n    // Return the group key for the row, e.g. `name`.\n    return row.name;\n  },\n  getChildrenCount: (row) => {\n    // Return the number of children for the row.\n    return row.childrenCount;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Highlighting in MUI X Charts (JSX)\nDESCRIPTION: This snippet demonstrates how to customize axis highlighting behavior in MUI X Charts. It allows setting the highlight type for both x and y axes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/highlighting/highlighting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\naxisHighlight={{\n  x: 'line', // Or 'none', or 'band'\n  y: 'line', // Or 'none'\n}}\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Handle Implementation\nDESCRIPTION: Implements a custom Tree Item component with a dedicated drag handle for triggering reordering operations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nOnlyReorderFromDragHandle.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Column Visibility with InitialState in MUI DataGrid\nDESCRIPTION: Shows how to initialize visible columns using the initialState prop. This approach only affects the initial render and won't update column visibility after the first render.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    columns: {\n      columnVisibilityModel: {\n        // Hide columns status and traderName, the other columns will remain visible\n        status: false,\n        traderName: false,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Proper Component Nesting Pattern\nDESCRIPTION: Shows the correct way to compose components to avoid nested elements issues.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ This creates nested button elements\n<FilterPanelTrigger>\n  <ToolbarButton>\n    Filters\n  </ToolbarButton>\n</FilterPanelTrigger>\n\n// ✅ This merges the props and renders a single button\n<FilterPanelTrigger render={<ToolbarButton />}>\n  Filters\n</FilterPanelTrigger>\n```\n\n----------------------------------------\n\nTITLE: Setting Tree Item Expansion with API Method\nDESCRIPTION: Demonstrates how to use the setItemExpansion API method to programmatically control tree item expansion state. The method accepts an event object, itemId, and optional expansion state.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/expansion/expansion.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiRef.current.setItemExpansion({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to expand or collapse\n  itemId,\n  // If `true` the item will be expanded\n  // If `false` the item will be collapsed\n  // If not defined, the item's expansion status will be toggled.\n  shouldBeExpanded,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection in React Tree View\nDESCRIPTION: Demonstrates how to implement controlled selection in a Tree View component using the selectedItems prop and onSelectedItemsChange callback.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ControlledSelection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Hiding Drag Handles for Non-Resizable Columns in MUI Data Grid (JavaScript)\nDESCRIPTION: This code snippet shows how to hide the drag handles for columns that are not resizable in the MUI Data Grid. It uses the resizable property in the GridColDef object and applies custom CSS to hide the separator for non-resizable columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style-recipes/style-recipes.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nconst VISIBLE_FIELDS = ['name', 'rating', 'country', 'dateCreated', 'isAdmin'];\n\nexport default function ColumnHeaderHideSeparator() {\n  const { data } = useDemoData({\n    dataSet: 'Employee',\n    visibleFields: VISIBLE_FIELDS,\n    rowLength: 100,\n  });\n\n  const columns = React.useMemo(\n    () =>\n      data.columns.map((col) => ({\n        ...col,\n        resizable: col.field === 'name',\n      })),\n    [data.columns],\n  );\n\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <style>\n        {\n          `\n          .MuiDataGrid-columnSeparator:not(.MuiDataGrid-columnSeparator--resizable) {\n            display: none !important;\n          }\n        `\n        }\n      </style>\n      <DataGrid {...data} columns={columns} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default JavaScript Animations in Custom MUI X Chart Components\nDESCRIPTION: This example shows how to use default JavaScript animations in custom chart components using MUI X's built-in animation hooks like useAnimateArea, useAnimateBar, etc.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/animation/animation.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"JSDefaultAnimation.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Excel Column Styles in MUI X Data Grid\nDESCRIPTION: This snippet demonstrates how to customize Excel column styles using the columnsStyles property. It shows examples for both default toolbar and custom trigger scenarios.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGridPremium\n  slotProps={{\n    toolbar: {\n      excelOptions: {\n        columnsStyles: {\n          // replace the dd.mm.yyyy default date format\n          recruitmentDay: { numFmt: 'dd/mm/yyyy' },\n          // set this column in green\n          incomes: { font: { argb: 'FF00FF00' } },\n        },\n      },\n    },\n  }}\n/>\n\n// Custom trigger:\n<ExportExcel\n  options={{\n    columnsStyles: {\n      recruitmentDay: { numFmt: 'dd/mm/yyyy' },\n      incomes: { font: { argb: 'FF00FF00' } },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Premium Data Grid in React\nDESCRIPTION: Shows how to import the Premium version of the MUI X Data Grid component, which includes all Pro features plus advanced data analysis capabilities and Excel export.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/overview/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataGridPremium } from '@mui/x-data-grid-premium';\n```\n\n----------------------------------------\n\nTITLE: Sorting Row Groups by Child Row Count\nDESCRIPTION: Demonstrates how to customize group sorting by overriding the sortComparator to sort based on the number of child rows in each group.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-row-grouping/recipes-row-grouping.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRowGroupingSortByChildRows.js\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ColumnsPanelTrigger in React Data Grid\nDESCRIPTION: Basic example showing how to import and use the ColumnsPanelTrigger component from the MUI X Data Grid package. This component renders a button that opens and closes the columns panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/columns-panel/columns-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColumnsPanelTrigger } from '@mui/x-data-grid';\n\n<ColumnsPanelTrigger />;\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Styles in React Heatmap\nDESCRIPTION: Shows how to override the default highlight styling by using heatmapClasses.highlighted and heatmapClasses.faded CSS classes to apply custom visual effects like border radius instead of saturation changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/heatmap/heatmap.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighlightClasses.js\n```\n\n----------------------------------------\n\nTITLE: Form Props Implementation in React Date Picker\nDESCRIPTION: Demonstrates usage of form-related props (disabled, readOnly, name) with Date Picker components\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nFormPropsDatePickers.js\n```\n\n----------------------------------------\n\nTITLE: Correct Calendar Header Slot Implementation - React Component\nDESCRIPTION: Example showing correct implementation of calendar header slot that maintains component reference and prevents unnecessary remounting.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/common-concepts/custom-components/custom-components.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomCalendarHeader = ({ name, setName }) => (\n  <input value={name} onChange={(event) => setName(event.target.value)} />\n);\n\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{ calendarHeader: CustomCalendarHeader }}\n      slotProps={{ calendarHeader: { name, setName } }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Axis Components in Composition Mode with MUI X-Charts\nDESCRIPTION: Example showing how to use XAxis and YAxis components within a ChartContainer in composition mode, linking them to axis definitions and setting their positions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"AxisWithComposition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading Mode Updates in React Data Grid\nDESCRIPTION: Shows how the grid dynamically changes loading mode based on rowCount updates, handling transitions between known and unknown row counts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nServerSideLazyLoadingModeUpdate.js\n```\n\n----------------------------------------\n\nTITLE: Request Throttling in React Data Grid\nDESCRIPTION: Shows how to implement request throttling for lazy loading to avoid making unnecessary server requests. Uses lazyLoadingRequestThrottleMs prop to set custom throttle time.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nServerSideLazyLoadingRequestThrottle.js\n```\n\n----------------------------------------\n\nTITLE: Fetching Rows Based on Group Keys in TypeScript\nDESCRIPTION: This snippet shows how to fetch rows from the server based on group keys. It uses URLSearchParams to construct the query string and handles the response to return rows and row count.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/tree-data.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getRows: async (params) => {\n  const urlParams = new URLSearchParams({\n    // Example: JSON.stringify(['Billy Houston', 'Lora Dean']).\n    groupKeys: JSON.stringify(params.groupKeys),\n  });\n  const getRowsResponse = await fetchRows(\n    // Server should extract the rows for the nested level based on `groupKeys`.\n    `https://mui.com/x/api/data-grid?${urlParams.toString()}`,\n  );\n  return {\n    rows: getRowsResponse.rows,\n    rowCount: getRowsResponse.rowCount,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: GridDataSource Interface Definition\nDESCRIPTION: Definition of the minimal GridDataSource interface required for implementing server-side data fetching.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface GridDataSource {\n  /**\n   * This method will be called when the grid needs to fetch some rows.\n   * @param {GridGetRowsParams} params The parameters required to fetch the rows.\n   * @returns {Promise<GridGetRowsResponse>} A promise that resolves to the data of\n   * type [GridGetRowsResponse].\n   */\n  getRows(params: GridGetRowsParams): Promise<GridGetRowsResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Row Height in DataGrid\nDESCRIPTION: Example of how to set variable row heights in the DataGrid component. The code uses the getRowHeight callback to assign different heights based on row ID.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid getRowHeight={({ id }: GridRowHeightParams) => (id % 2 === 0 ? 100 : null)} />\n```\n\n----------------------------------------\n\nTITLE: Including Hidden Columns in Quick Filter\nDESCRIPTION: Shows how to configure the DataGrid to include hidden columns in the quick filter by setting quickFilterExcludeHiddenColumns to false.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    filter: {\n      filterModel: {\n        items: [],\n        quickFilterExcludeHiddenColumns: false,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Module Augmentation for Custom Props in Data Grid Pro Version\nDESCRIPTION: This example demonstrates how to use TypeScript module augmentation to add custom properties to the toolbar slot in MUI X Data Grid Pro version.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/components.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-pro' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPro\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n  showToolbar\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating Expand/Collapse All Detail Panels Control in React Data Grid\nDESCRIPTION: Implementation of a custom header element that provides functionality to expand or collapse all detail panels simultaneously using gridRowsLookupSelector and Grid API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-recipes/row-recipes.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nDetailPanelExpandCollapseAll.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Sorting Model in MUI-X Data Grid (JSX)\nDESCRIPTION: Sets an initial sorting order for the Data Grid using the initialState prop. This example sorts the 'rating' field in descending order.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/sorting/sorting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    sorting: {\n      sortModel: [{ field: 'rating', sort: 'desc' }],\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosize Options for DataGrid in React\nDESCRIPTION: Example of configuring autosize options for columns in MUI X DataGrid component. The options include specifying which columns to autosize, whether to include outliers, and whether to include headers in the calculation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-dimensions/column-dimensions.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  {...otherProps}\n  autosizeOptions={{\n    columns: ['name', 'status', 'createdBy'],\n    includeOutliers: true,\n    includeHeaders: false,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events Using useGridEvent Hook in TSX\nDESCRIPTION: Example showing how to use the useGridEvent hook to subscribe to the 'rowClick' event. This approach can only be used inside the scope of the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/events/events.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nuseGridEvent(apiRef, 'rowClick', handleEvent);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Y-Axes Scatter Chart with MUI X Charts (JavaScript)\nDESCRIPTION: This code snippet shows the implementation of a scatter chart with multiple Y-axes using MUI X Charts. It would include the configuration for multiple axes and data series.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/scatter-demo/scatter-demo.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Accessing X-Axis Scale in MUI X Charts\nDESCRIPTION: Shows how to use the useXScale() hook to access the x-axis scale and map a value to SVG coordinates.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/components/components.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst xAxisScale = useXScale(); // get the default X scale\nconst xOrigin = xAxisScale(0);\n```\n\n----------------------------------------\n\nTITLE: Controlled Desktop Date Picker\nDESCRIPTION: Implementation of a controlled DesktopDatePicker with value and onChange props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker value={value} onChange={(newValue) => setValue(newValue)} />\n```\n\n----------------------------------------\n\nTITLE: Setting Item Expansion - TypeScript\nDESCRIPTION: API method demonstrating how to programmatically change the expansion state of a tree view item using setItemExpansion(). Includes parameters for event handling, item identification, and expansion state control.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/expansion/expansion.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiRef.current.setItemExpansion({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to expand or collapse\n  itemId,\n  // If `true` the item will be expanded\n  // If `false` the item will be collapsed\n  // If not defined, the item's expansion status will be toggled.\n  shouldBeExpanded,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Grouping Column in DataGridPremium\nDESCRIPTION: Shows how to customize the grouping column using the groupingColDef prop with a callback function.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<DataGridPremium\n  groupingColDef={(params) => ({\n    headerName: params[0] === 'company' ? 'Company' : 'Director',\n    width: 200,\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Editing in Data Grid - JavaScript\nDESCRIPTION: This snippet shows how to implement bulk editing in a Data Grid. It uses the processRowUpdate callback to batch edits locally and then persist or discard them in bulk when the user clicks Save or Discard buttons.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-editing/recipes-editing.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BulkEditing.js\", \"bg\": \"inline\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Initializing Aggregation in Data Grid Premium\nDESCRIPTION: This snippet demonstrates how to initialize aggregation without controlling its state by providing the model to the initialState prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGridPremium\n  {...data}\n  initialState={{\n    aggregation: {\n      model: {\n        gross: 'max',\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Translations via Theme\nDESCRIPTION: Demonstrates how to set up global translations for MUI X components using the theme configuration with the German locale.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // use 'de' locale for UI texts (start, next month, ...)\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Plugin Type Implementation\nDESCRIPTION: Demonstrates a complete plugin signature implementation with all available type definitions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype UseCustomPluginSignature = TreeViewPluginSignature<{\n  params: {\n    customParam?: boolean;\n    customModel?: boolean;\n    defaultCustomModel?: boolean;\n  };\n  defaultizedParams: {\n    customParam: boolean;\n    customModel?: boolean;\n    defaultCustomModel: boolean;\n  };\n  instance: { toggleCustomModel: () => void };\n  events: {\n    toggleCustomModel: {\n      params: { value: boolean };\n    };\n  };\n  contextValue: { customPlugin: { enabled: boolean } };\n  dependencies: [UseTreeViewExpansionSignature];\n}>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Rendered Months in Date Range Calendar\nDESCRIPTION: Demonstrates how to customize the number of months rendered in the Date Range Calendar using the 'calendars' prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateRangeCalendarCalendarsProp.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Spanning in MUI X Data Grid\nDESCRIPTION: This example shows how to customize row spanning using the colDef.rowSpanValueGetter prop. It prevents unwanted merging of age cells that don't belong to the same person.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-spanning/row-spanning.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n\nconst rows = [\n  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n];\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 150,\n    rowSpanValueGetter: (params) => params.row.firstName,\n  },\n  {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 150,\n    rowSpanValueGetter: (params) => params.row.lastName,\n  },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 110,\n    rowSpanValueGetter: (params) => `${params.row.firstName}|${params.row.lastName}|${params.row.age}`,\n  },\n];\n\nexport default function RowSpanningCustom() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        rowSpanning\n        columnHeaderHeight={50}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scroll API Methods\nDESCRIPTION: Demonstration of scroll-related API methods using the imperative apiRef\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/scrolling/scrolling.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ScrollApiNoSnap.js\", \"bg\": \"inline\", \"hideToolbar\": true}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Zoom State Management\nDESCRIPTION: Structure for managing chart zoom state externally using initialZoom prop and zoom state object configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/zoom-and-pan/zoom-and-pan.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  axisId: \"axis-id\",\n  start: 0,\n  end: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Excel Document in MUI X Data Grid\nDESCRIPTION: This code snippet shows how to customize the Excel document using exceljsPreProcess and exceljsPostProcess callback functions. It demonstrates adding metadata, modifying worksheet name, and adding custom content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nfunction exceljsPreProcess({ workbook, worksheet }) {\n  workbook.created = new Date(); // Add metadata\n  worksheet.name = 'Monthly Results'; // Modify worksheet name\n\n  // Write on first line the date of creation\n  worksheet.getCell('A1').value = `Values from the`;\n  worksheet.getCell('A2').value = new Date();\n}\n\nfunction exceljsPostProcess({ worksheet }) {\n  // Add a text after the data\n  worksheet.addRow(); // Add empty row\n\n  const newRow = worksheet.addRow();\n  newRow.getCell(1).value = 'Those data are for internal use only';\n}\n\n// ...\n\n// Default toolbar:\n<DataGridPremium\n  slotProps={{\n    toolbar: {\n      excelOptions: {\n        exceljsPreProcess,\n        exceljsPostProcess,\n      },\n    },\n  }}\n/>\n\n// Custom trigger:\n<ExportExcel\n  options={{\n    exceljsPreProcess,\n    exceljsPostProcess,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Row Grouping in DataGridPremium\nDESCRIPTION: Sets up initial row grouping by company and director using the initialState prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<DataGridPremium\n  initialState={{\n    rowGrouping: {\n      model: ['company', 'director'],\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with processRowUpdate in Data Grid TSX\nDESCRIPTION: This code shows how to use processRowUpdate to delete a row from the Data Grid's internal state by returning an object with _action: 'delete'. It's more performant than updating the rows prop or using setRows().\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/persistence.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  {...otherProps}\n  processRowUpdate={(updatedRow, originalRow) => {\n    if (shouldDeleteRow(updatedRow)) {\n      return { ...updatedRow, _action: 'delete' };\n    }\n    return updatedRow;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing getRows Method for Server-side Aggregation in React Data Grid\nDESCRIPTION: This code shows how to modify the getRows method of the GridDataSource to include aggregationModel and return aggregateRow in the response. It fetches data from the server with aggregation parameters and includes the aggregated values in the response.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/aggregation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = {\n  getRows: async ({\n    sortModel,\n    filterModel,\n    paginationModel,\n    aggregationModel,\n  }) => {\n    const response = await fetchData({ sortModel, filterModel, paginationModel, aggregationModel });\n    return {\n      rows: response.rows,\n      rowCount: getRowsResponse.totalCount,\n      aggregateRow: response.aggregateRow,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Views for MultiSectionDigitalClock in React\nDESCRIPTION: Demonstrates how to customize the views (hours, minutes, seconds) for the MultiSectionDigitalClock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockViews.js\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Series Color in LineChart\nDESCRIPTION: Shows how to set a custom color for a series in a LineChart component by using the color property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart series={[{ ..., color: '#fdb462'}]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Series Types in ChartContainer for React\nDESCRIPTION: Illustrates how to explicitly define series types when using ChartContainer, allowing for multiple chart types in a single composition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/composition/composition.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer\n  series={[\n    { data: [1, 2, 3], type: 'bar' }, // This series is for the bar chart\n    { data: [3, 2, 1], type: 'line' } // This series is for the line chart\n  ]}\n>\n  <BarPlot /> {/* Will only display series with type: 'bar' */}\n  <LinePlot /> {/* Will only display series with type: 'line' */}\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Fastify Proxy for AI Assistant API (TypeScript)\nDESCRIPTION: This code sets up a Fastify proxy to securely handle API requests for the AI Assistant. It adds the necessary API key header and rewrites the request path to the correct endpoint.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/ai-assistant/ai-assistant.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.register(proxy, {\n  upstream: 'https://api.mui.com',\n  prefix: '/api/my-custom-path',\n  rewritePrefix: '/v1/datagrid/prompt',\n  replyOptions: {\n    rewriteRequestHeaders: (_, headers) => ({\n      ...headers,\n      'x-api-key': process.env.MUI_DATAGRID_API_KEY,\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Drawing Area Hook in MUI X Charts\nDESCRIPTION: Demonstrates how to use the useDrawingArea() hook to get the coordinates of the drawing area in a chart component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/components/components.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDrawingArea } from '@mui/x-charts';\n\nconst { left, top, width, height } = useDrawingArea();\n```\n\n----------------------------------------\n\nTITLE: Combining Global and Local Translations\nDESCRIPTION: Shows how to combine LocalizationProvider translations with component-specific translations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<LocalizationProvider\n  localeText={{ clearButtonLabel: 'Empty', todayButtonLabel: 'Now' }}\n>\n  <DatePicker\n    // ...other props\n    localeText={{\n      clearButtonLabel: 'Vider',\n    }}\n  />\n</LocalizationProvider>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Lazy Loading for Rich Tree View\nDESCRIPTION: This example demonstrates error management in lazy loading for Rich Tree View. It shows how to handle and display errors that may occur during the data fetching process.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ErrorManagement.js\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing isRtl Prop with useRtl Hook\nDESCRIPTION: Shows how to migrate from using the isRtl prop to using the useRtl hook from @mui/system/RtlProvider to determine right-to-left direction.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n+import { useRtl } from '@mui/system/RtlProvider';\n\n-  const { isRtl } = props;\n+  const isRtl = useRtl();\n```\n\n----------------------------------------\n\nTITLE: Disabling Filtering for All Columns in React Data Grid\nDESCRIPTION: Example of how to disable filtering functionality for all columns in the DataGrid component using the disableColumnFilter prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid disableColumnFilter />\n```\n\n----------------------------------------\n\nTITLE: Programmatically starting cell edit mode\nDESCRIPTION: Shows how to programmatically start editing a cell by using the API reference method 'startCellEditMode' and passing the row ID and column field to identify the target cell.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/editing/editing.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\napiRef.current.startCellEditMode({ id: 1, field: 'name' });\n```\n\n----------------------------------------\n\nTITLE: Responsive Date Range Picker Variants\nDESCRIPTION: Implementation of different DateRangePicker variants for desktop and mobile devices\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"ResponsiveDateRangePickers.js\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Date Range Picker\nDESCRIPTION: Example showing basic implementation of DateRangePicker component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"BasicDateRangePicker.js\"\n```\n\n----------------------------------------\n\nTITLE: Including Checkboxes in Print Export with Custom Trigger\nDESCRIPTION: Shows how to configure the print export to include checkboxes for selected rows when using a custom export trigger.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom trigger:\n<ExportPrint options={{ includeCheckboxes: true }} />\n```\n\n----------------------------------------\n\nTITLE: Positioning Funnel Chart Labels in React\nDESCRIPTION: Demonstrates how to position labels in a funnel chart using the 'sectionLabel' property. This property accepts an object with various positioning options or a function for dynamic label configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelLabelPositioning.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Time Range Picker Implementation - React\nDESCRIPTION: Demonstrates basic usage of the Date Time Range Picker component referenced in the demo file BasicDateTimeRangePicker.js\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicDateTimeRangePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting for Chart Labels in JavaScript\nDESCRIPTION: Example demonstrating how to use a function for conditional label formatting in MUI-X Charts. The function receives a location parameter which can be 'legend' or 'tooltip' to customize the label display accordingly.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/label/label.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"FunctionLabel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Focusing a Specific Item in Rich Tree View using TypeScript\nDESCRIPTION: This code shows how to use the focusItem API method to focus a specific item in the Rich Tree View. It requires the DOM event that triggered the change and the ID of the item to focus.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/focus/focus.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\napiRef.current.focusItem(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to focus\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Funnel Chart Colors in React\nDESCRIPTION: Explains two methods to customize funnel chart colors: using a color palette or providing a 'color' property in data objects to override the palette.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelColor.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Desktop Date Picker Implementation\nDESCRIPTION: Simple implementation of a DesktopDatePicker component showing default behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker />\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in Rich Tree View with Material-UI\nDESCRIPTION: This snippet demonstrates how to customize icons in the Rich Tree View component using both Material Icons and custom SVG icons.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/customization/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"CustomIcons.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Tree View Instance Population\nDESCRIPTION: Demonstrates how to add methods to the Tree View instance for use across plugins.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ store }) => {\n  const toggleCustomModel = () =>\n    store.update((prevState) => ({\n      ...prevState,\n      customModel: !prevState.customModel,\n    }));\n\n  return {\n    instance: {\n      toggleCustomModel,\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Axes in MUI X-Charts\nDESCRIPTION: Example demonstrating how to hide an axis by setting its position to 'none' while still using it for scaling calculations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"HidingAxis.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Day.js UTC\nDESCRIPTION: Shows how to use a UTC date with DateTimePicker component using Day.js adapter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker defaultValue={dayjs.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Clear Icon in Date Field (React)\nDESCRIPTION: This snippet demonstrates how to customize the clear icon in a date field component. It shows how to replace the default clear icon with a custom icon using the 'clearIcon' slot prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/fields/fields.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DateField } from '@mui/x-date-pickers/DateField';\nimport { DemoContainer, DemoItem } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nexport default function CustomizeClearIcon() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer components={['DateField']}>\n        <DemoItem label=\"Custom clear icon\">\n          <DateField\n            label=\"Date\"\n            defaultValue={new Date()}\n            clearable\n            slotProps={{\n              clearIcon: { fontSize: 'small' },\n              clearButton: {\n                title: 'Clear date',\n                'aria-label': 'Clear date',\n              },\n            }}\n            slots={{\n              clearIcon: DeleteIcon,\n            }}\n          />\n        </DemoItem>\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Input Date Range Picker\nDESCRIPTION: Implementation using MultiInputDateRangeField for separate start and end date inputs\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"MultiInputDateRangePicker.js\"\n```\n\n----------------------------------------\n\nTITLE: Customizing JavaScript Animations for MUI X Charts\nDESCRIPTION: This snippet demonstrates how to use the useAnimation hook to create custom JavaScript animations for chart elements, specifically for positioning and animating labels above bars.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/animation/animation.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"JSAnimationCustomization.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Elements with CSS\nDESCRIPTION: Shows how to style line chart elements using CSS selectors, including adding dashed lines and custom gradients for specific series.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/lines/lines.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nsx={{\n  '& .MuiLineElement-root': {\n    strokeDasharray: '10 5',\n    strokeWidth: 4,\n  },\n  '& .MuiAreaElement-series-Germany': {\n    fill: \"url('#myGradient')\",\n  },\n}}\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Dates with Luxon\nDESCRIPTION: Demonstrates various ways to create UTC dates using Luxon.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.utc(2022, 4, 17, 15, 30);\nconst date2 = DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' });\nconst date3 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'UTC' });\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection for Specific Rows in MUI X Data Grid\nDESCRIPTION: Shows how to use the isRowSelectable prop to conditionally disable selection for certain rows based on their data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DisableRowSelection.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Reorder Value in MUI X Data Grid Pro\nDESCRIPTION: This example shows how to customize the value displayed when reordering rows by adding a __reorder__ field to each row object.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-ordering/row-ordering.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns: GridColDef[] = [{ field: 'brand' }];\n\nconst rows: GridRowsProp = [\n  { id: 0, brand: 'Nike', __reorder__: 'Nike' },\n  { id: 1, brand: 'Adidas', __reorder__: 'Adidas' },\n  { id: 2, brand: 'Puma', __reorder__: 'Puma' },\n];\n\n<DataGridPro rows={rows} columns={columns} rowReordering />;\n```\n\n----------------------------------------\n\nTITLE: Customizing Gauge with Additional Elements in React\nDESCRIPTION: Shows how to add custom elements to a Gauge component by including them as children, which will be stacked on top of the default rendering.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/gauge/gauge.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Gauge } from '@mui/x-charts/Gauge';\n\n<Gauge value={25} valueMax={50}>\n  <AddedElement />\n</Gauge>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid State Using Direct Selector\nDESCRIPTION: Demonstrates how to access Data Grid state directly using a selector function with apiRef parameter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/state/state.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst paginationModel = gridPaginationModelSelector(apiRef);\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Tick Positions in MUI X-Charts\nDESCRIPTION: Demonstration of using the tickInterval property to control exact tick positions, either through an array of values or a filtering function for point scale types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TickPosition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Custom Month Layout Calendar\nDESCRIPTION: Demonstrates showing additional days and fixed week numbers in calendar view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nCustomMonthLayout.js\n```\n\n----------------------------------------\n\nTITLE: Developing a Mixed Bar Chart with MUI X in JavaScript\nDESCRIPTION: This snippet showcases a mixed bar chart implementation using MUI X Charts. It probably combines different types of data visualization elements within the same chart.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Legend Label Formatter Implementation\nDESCRIPTION: TypeScript interface for legend label formatter function that customizes the display of piecewise legend labels. Takes index, length, min, max, and formatted values as parameters.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/legend/legend.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlabelFormatter = ({ index, length, min, max, formattedMin, formattedMax }) => string | null;\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Implementation\nDESCRIPTION: Shows how to subscribe to events emitted by other plugins.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst useOtherCustomPlugin = ({ instance }) => {\n  useInstanceEventHandler(instance, 'toggleCustomModel', ({ value }) => {\n    console.log('New value of customModel', value);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Reordering Column Menu Items in TypeScript\nDESCRIPTION: Shows how to reorder menu items by modifying their displayOrder values through slotProps configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-menu/column-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slotProps={{\n        // Swap positions of filter and sort items\n        columnMenuFilterItem: {\n          displayOrder: 0, // Previously `10`\n        },\n        columnMenuSortItem: {\n          displayOrder: 10, // Previously `0`\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Type with Filtered Operators in TypeScript\nDESCRIPTION: Shows how to create a custom 'rating' column type that extends the 'number' type and only includes the '>' and '<' filter operators.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/customization.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ratingColumnType: GridColTypeDef = {\n  type: 'number',\n  filterOperators: getGridNumericOperators().filter(\n    (operator) => operator.value === '>' || operator.value === '<',\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Clearable Behavior in Date Field (React)\nDESCRIPTION: This example shows how to implement clearable behavior in a date field using the 'clearable' prop and 'onClear' callback. It demonstrates clearing the field value and handling the clear event.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/fields/fields.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { DateField } from '@mui/x-date-pickers/DateField';\nimport { DemoContainer, DemoItem } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nexport default function ClearableBehavior() {\n  const [value, setValue] = React.useState(null);\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer components={['DateField']}>\n        <DemoItem label=\"Clearable DateField\">\n          <DateField\n            label=\"Date\"\n            value={value}\n            onChange={(newValue) => setValue(newValue)}\n            clearable\n            onClear={() => setValue(null)}\n          />\n        </DemoItem>\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChartContainer for Simplified Chart Creation in React\nDESCRIPTION: Shows how to use the ChartContainer component, which combines ChartDataProvider and ChartsSurface, for easier chart creation when custom outer structure is not needed.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/composition/composition.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n  // Ref is forwarded internally to the ChartsSurface\n  ref={mySvgRef}\n>\n  {children}\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Initializing Uncontrolled Pivoting in DataGridPremium\nDESCRIPTION: Example showing how to initialize uncontrolled pivoting using the initialState prop in DataGridPremium component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium\n  initialState={{ pivoting: { model: pivotModel, active: true, panelOpen: true } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlled Desktop Date Picker with Multiple Views\nDESCRIPTION: Implementation of a controlled DesktopDatePicker with custom views configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker\n  value={value}\n  onChange={(newValue) => setValue(newValue)}\n  views={['year', 'month', 'day']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Column Headers\nDESCRIPTION: Shows how to customize column headers using headerClassName and headerAlign properties in GridColDef.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'first',\n    headerClassName: 'super-app-theme--header',\n    headerAlign: 'center',\n  },\n  {\n    field: 'last',\n    headerClassName: 'super-app-theme--header',\n    headerAlign: 'center',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Text in MUI X-Charts\nDESCRIPTION: Interactive demonstration showing how to customize text elements including tick labels and axis labels using tickLabelStyle and labelStyle properties, with angle adjustments.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"AxisTextCustomization.js\", \"hideToolbar\": true, \"bg\": \"playground\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Default UTC Zone in Luxon\nDESCRIPTION: Shows how to set the default zone to UTC for all Luxon operations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'UTC';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\n----------------------------------------\n\nTITLE: Splitting Field Props for Safe DOM Forwarding\nDESCRIPTION: This snippet demonstrates the use of the useSplitFieldProps hook to separate props that can be safely forwarded to the DOM from internal props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { internalProps, forwardedProps } = useSplitFieldProps(\n  // The props received by the field component\n  props,\n  // The value type (\"date\", \"time\" or \"date-time\")\n  'date',\n);\n\nreturn <TextField {...forwardedProps}>;\n```\n\n----------------------------------------\n\nTITLE: Controlling Selected Sections in Multi Input Range Field (React)\nDESCRIPTION: This snippet demonstrates how to control selected sections in a multi-input range field. It shows how to focus the correct input before updating the selected section(s) to ensure proper selection.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/fields/fields.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { MultiInputDateRangeField } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nexport default function ControlledSelectedSectionsMultiInputRangeField() {\n  const [selectedSections, setSelectedSections] = React.useState(null);\n  const startInputRef = React.useRef(null);\n  const endInputRef = React.useRef(null);\n\n  const selectSection = (input, section) => () => {\n    input.current.focus();\n    setSelectedSections(section);\n  };\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer components={['MultiInputDateRangeField']}>\n        <div>\n          <MultiInputDateRangeField\n            slotProps={{\n              textField: ({ position }) => ({\n                inputRef: position === 'start' ? startInputRef : endInputRef,\n              }),\n            }}\n            selectedSections={selectedSections}\n            onSelectedSectionsChange={(newValue) => setSelectedSections(newValue)}\n          />\n          <div style={{ display: 'flex', flexDirection: 'column', marginTop: 8 }}>\n            <button onClick={selectSection(startInputRef, 'year')}>Select start year</button>\n            <button onClick={selectSection(startInputRef, 'month')}>Select start month</button>\n            <button onClick={selectSection(startInputRef, 'day')}>Select start day</button>\n            <button onClick={selectSection(endInputRef, 'year')}>Select end year</button>\n            <button onClick={selectSection(endInputRef, 'month')}>Select end month</button>\n            <button onClick={selectSection(endInputRef, 'day')}>Select end day</button>\n            <button onClick={selectSection(startInputRef, 'all')}>Select all</button>\n            <button onClick={selectSection(startInputRef, null)}>Select none</button>\n          </div>\n        </div>\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Time Picker Value Control Demo\nDESCRIPTION: Shows both controlled and uncontrolled value implementations of the Time Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"TimePickerValue.js\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Selected Sections in Single Input Range Field (React)\nDESCRIPTION: This example shows how to control selected sections in a single input range field using the 'unstableFieldRef' prop to access the full list of sections. It demonstrates selecting specific sections by index.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/fields/fields.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { SingleInputDateRangeField } from '@mui/x-date-pickers-pro/SingleInputDateRangeField';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nexport default function ControlledSelectedSectionsSingleInputRangeField() {\n  const [selectedSections, setSelectedSections] = React.useState(null);\n  const fieldRef = React.useRef(null);\n\n  const selectSection = (sectionIndex) => () => {\n    fieldRef.current.querySelector('input').focus();\n    setSelectedSections(sectionIndex);\n  };\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DemoContainer components={['SingleInputDateRangeField']}>\n        <div>\n          <SingleInputDateRangeField\n            label=\"Date range field\"\n            unstableFieldRef={fieldRef}\n            selectedSections={selectedSections}\n            onSelectedSectionsChange={(newValue) => setSelectedSections(newValue)}\n          />\n          <div style={{ display: 'flex', flexDirection: 'column', marginTop: 8 }}>\n            <button onClick={selectSection(0)}>Select start year</button>\n            <button onClick={selectSection(1)}>Select start month</button>\n            <button onClick={selectSection(2)}>Select start day</button>\n            <button onClick={selectSection(3)}>Select end year</button>\n            <button onClick={selectSection(4)}>Select end month</button>\n            <button onClick={selectSection(5)}>Select end day</button>\n            <button onClick={selectSection('all')}>Select all</button>\n            <button onClick={selectSection(null)}>Select none</button>\n          </div>\n        </div>\n      </DemoContainer>\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Desktop Time Picker Implementation\nDESCRIPTION: Simple implementation of a DesktopTimePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopTimePicker />\n```\n\n----------------------------------------\n\nTITLE: Conditional Axis Formatting in Chart Tooltips\nDESCRIPTION: Example showing how to conditionally format axis values based on the location (tick or tooltip) using the context parameter in valueFormatter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  xAxis={[{\n    data: [ ... ],\n    valueFormatter: (value, context) => {\n      if (context.location === 'tooltip') {\n        return `Country: ${value.name} (${value.code})`;\n      }\n      return value.code; // Just show code on the axis\n    },\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Export Format Options with Custom Trigger\nDESCRIPTION: Shows how to customize CSV export settings such as filename, delimiter, and UTF-8 BOM support when using a custom export trigger component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom trigger:\n<ExportCsv\n  options={{\n    fileName: 'customerDataBase',\n    delimiter: ';',\n    utf8WithBom: true,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Restoring Partial Grid State\nDESCRIPTION: Example of restoring specific state properties in the Data Grid using the restoreState method.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/state/state.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\napiRef.current.restoreState({\n  pinnedColumns: ['brand'],\n});\n```\n\n----------------------------------------\n\nTITLE: Traditional Server-Side Features Implementation\nDESCRIPTION: Example showing how to implement server-side features without using the data source abstraction.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  columns={columns}\n  rows={rows}\n  pagination\n  sortingMode=\"server\"\n  filterMode=\"server\"\n  paginationMode=\"server\"\n  onPaginationModelChange={(newPaginationModel) => {\n    // fetch data from server\n  }}\n  onSortModelChange={(newSortModel) => {\n    // fetch data from server\n  }}\n  onFilterModelChange={(newFilterModel) => {\n    // fetch data from server\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Day Rendering in Date Range Calendar\nDESCRIPTION: Illustrates how to customize the rendering of individual days in the Date Range Calendar using the 'Day' component slot.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CustomDateRangePickerDay.js\"}\n```\n\n----------------------------------------\n\nTITLE: Form Props for Date Time Picker in React\nDESCRIPTION: Demonstrates the usage of form-related props (disabled, readOnly, name) with the Date Time Picker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FormPropsDateTimePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggleable Columns in MUI DataGrid Premium\nDESCRIPTION: Demonstrates how to customize which columns can be toggled in the column visibility panel using the slotProps.columnsManagement.getTogglableColumns prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DataGridPremium,\n  GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD,\n} from '@mui/x-data-grid-premium';\n\n// stop `id`, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, and `status` columns to be togglable\nconst hiddenFields = ['id', GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, 'status'];\n\nconst getTogglableColumns = (columns: GridColDef[]) => {\n  return columns\n    .filter((column) => !hiddenFields.includes(column.field))\n    .map((column) => column.field);\n};\n\n<DataGridPremium\n  showToolbar\n  slotProps={{\n    columnsManagement: {\n      getTogglableColumns,\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Visibility Panel in MUI DataGrid\nDESCRIPTION: Shows how to disable the column visibility panel while maintaining programmatic control over column visibility using the columnVisibilityModel prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid disableColumnSelector columnVisibilityModel={columnVisibilityModel} />\n```\n\n----------------------------------------\n\nTITLE: Removing Cell Focus Outline in MUI Data Grid (JavaScript/CSS)\nDESCRIPTION: This snippet demonstrates how to remove the focus outline from Data Grid cells by overriding the :focus and :focus-within styles. It's important to note that this may negatively impact accessibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style-recipes/style-recipes.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nconst VISIBLE_FIELDS = ['name', 'rating', 'country', 'dateCreated', 'isAdmin'];\n\nexport default function CellFocusNoOutline() {\n  const { data } = useDemoData({\n    dataSet: 'Employee',\n    visibleFields: VISIBLE_FIELDS,\n    rowLength: 100,\n  });\n\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <style>\n        {\n          `\n          .MuiDataGrid-cell:focus, .MuiDataGrid-cell:focus-within {\n            outline: none !important;\n          }\n          .MuiDataGrid-columnHeader:focus, .MuiDataGrid-columnHeader:focus-within {\n            outline: none !important;\n          }\n        `\n        }\n      </style>\n      <DataGrid {...data} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Animations for Charts in MUI X\nDESCRIPTION: This snippet demonstrates how to customize CSS animations for chart elements by overriding CSS classes. It uses the CSSAnimationCustomization component to showcase the customization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/animation/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"CSSAnimationCustomization.js\"}\n```\n\n----------------------------------------\n\nTITLE: Tree Item Context Integration\nDESCRIPTION: Shows how to pass elements to Tree Items using context and implement custom state hooks.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst useCustomPlugin = ({ params }) => {\n  return {\n    contextValue: () => ({\n      customPlugin: { enabled: true },\n    }),\n  };\n};\n\nfunction useTreeItemState(itemId: string) {\n  const {\n    customPlugin,\n  } = useTreeViewContext<DefaultTreeViewPluginSignatures>();\n\n  return {\n    customPlugin,\n  };\n}\n\nfunction TreeItemContent() {\n  const {\n    customPlugin,\n  } = useTreeItemState(props.itemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Grid Elements with CSS Transform in React\nDESCRIPTION: Demonstrates how component positions are updated using CSS transform to avoid re-painting. This technique is used in both column headers and main content virtualization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/virtualization.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ncomponentRef!.current!.style.transform = `translate3d(${left}px, ${top}px, 0px)`\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start with date-fns for MUI X\nDESCRIPTION: This code shows how to override the weekStartsOn option in the date-fns locale. It imports the enUS locale and creates a custom locale object with the weekStartsOn option set to Monday (1).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale } from 'date-fns';\n// with date-fns v3.x or v4.x\nimport { enUS } from 'date-fns/locale/en-US';\n// with date-fns v2.x\nimport enUS from 'date-fns/locale/en-US';\n\nconst customEnLocale: Locale = {\n  ...enUS,\n  options: {\n    ...enUS.options,\n    // Sunday = 0, Monday = 1.\n    weekStartsOn: 1,\n  },\n};\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={customEnLocale}>\n```\n\n----------------------------------------\n\nTITLE: Applying Curve Interpolation to Funnel Chart in React\nDESCRIPTION: Shows how to customize the interpolation between data points in a funnel chart using the 'curve' property. Available options include 'linear', 'bump', and 'step'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelCurves.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Click Detail Panel Toggle in React Data Grid\nDESCRIPTION: Configuration that enables detail panel toggling through row clicks instead of the default expand/collapse control.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-recipes/row-recipes.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nDetailPanelExpandOnRowClick.js\n```\n\n----------------------------------------\n\nTITLE: Setting Translations with LocalizationProvider\nDESCRIPTION: Shows how to set translations using LocalizationProvider without theme configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { deDE } from '@mui/x-date-pickers/locales';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n<LocalizationProvider\n  localeText={deDE.components.MuiLocalizationProvider.defaultProps.localeText}\n>\n  <DatePicker />\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Desktop Date Picker with Custom Close Behavior\nDESCRIPTION: Implementation of DesktopDatePicker with disabled auto-close and custom action bar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker\n  closeOnSelect={false}\n  slotProps={{ actionBar: { actions: ['cancel', 'accept'] } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Trigger in MUI-X Charts with JSX\nDESCRIPTION: Example demonstrating how to set the tooltip trigger mode in MUI-X charts. The tooltip can be triggered by 'item', 'axis', or 'none' events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  slotProps={{ tooltip: { trigger: 'axis' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Axis Domain Limits in MUI X-Charts\nDESCRIPTION: Demo showing different ways to set the y-axis range relatively to its data using the domainLimit option, which can be set to \"nice\", \"strict\", or a custom function.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CustomDomainYAxis.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initial State Configuration for Expanded Rows\nDESCRIPTION: Demonstrates how to initialize the Data Grid with specific rows already expanded using initialState prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/master-detail/master-detail.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro initialState={{ detailPanel: { expandedRowIds: new Set([1, 2, 3]) } }}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visible Rows Selection in MUI X Data Grid Pro\nDESCRIPTION: Demonstrates the use of checkboxSelectionVisibleOnly prop to select only visible rows when using the 'Select All' checkbox in MUI X Data Grid Pro.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CheckboxSelectionVisibleOnlyGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Pivoting for Specific Columns\nDESCRIPTION: Example demonstrating how to exclude specific columns from pivoting by setting the pivotable property in column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [{ field: 'id', pivotable: false }];\n\n<DataGridPremium columns={columns} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toggle Animations in Rich Tree View\nDESCRIPTION: This code shows how to create custom toggle animations for the Rich Tree View using Material-UI's Collapse component and the react-spring library.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/customization/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"CustomAnimation.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone in Day.js\nDESCRIPTION: Demonstrates how to set a default timezone for all Day.js operations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dayjs } from 'dayjs';\n\ndayjs.tz.setDefault('America/New_York');\n\nconst date = dayjs.tz('2022-04-17T15:30');\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Expansion Default Behavior in TSX\nDESCRIPTION: Example showing how to configure default group expansion based on specific grouping field and key conditions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nisGroupExpandedByDefault={\n  node => node.groupingField === 'company' && node.groupingKey === '20th Century Fox'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Percent Area Chart with MUI X Charts in JavaScript\nDESCRIPTION: This snippet shows how to create an area chart where the y-axis represents percentages, useful for showing proportional data over time.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// PercentAreaChart.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Icon to Date Range Picker\nDESCRIPTION: Example of using the textField slot to add a warning icon when the date range picker value is invalid, specifically for multi input field scenarios.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-opening-button/custom-opening-button.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker onOpen={handleOpen} onClose={handleClose} />\n```\n\n----------------------------------------\n\nTITLE: Time Validation with Disable Rules\nDESCRIPTION: Examples of time validation using shouldDisableTime callback to restrict specific time selections.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/validation/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() > 12 && value.hour() < 15}\n\nshouldDisableTime={(value, view) => view === 'minutes' && value.minute() >= 45}\n\nshouldDisableTime={(value, view) => view === 'seconds' && value.second() > 30}\n\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() < 10 && value.date() % 3 === 0}\n```\n\n----------------------------------------\n\nTITLE: Time Field Value Control Demo in React\nDESCRIPTION: Shows how to implement controlled and uncontrolled value states in the TimeField component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-field/time-field.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"TimeFieldValue.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Start with luxon for MUI X\nDESCRIPTION: This snippet demonstrates how to use luxon's Settings.defaultWeekSettings to set a custom week start day. It sets the firstDay to Monday (1) while preserving other default week settings.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  // Sunday = 7, Monday = 1.\n  firstDay: 1,\n  // Makes sure we don't lose the other information from `defaultWeekSettings`\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in Simple Tree View using Material UI\nDESCRIPTION: This snippet demonstrates how to customize icons in the Simple Tree View component using both Material Icons and custom SVG icons.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomIcons.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Attaching Click Events in Composed Charts\nDESCRIPTION: Demonstrates how to attach click event handlers when using the composition approach with LineChart components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/lines/lines.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer onAxisClick={onAxisClick}>\n  {/* ... */}\n  <LinePlot onItemClick={onLineClick} />\n  <AreaPlot onItemClick={onAreaClick} />\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Slot Props Interface - Type Definition\nDESCRIPTION: Example showing TypeScript type definition for custom slot components using PropsFromSlot interface.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/common-concepts/custom-components/custom-components.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CustomCalendarHeader({\n  currentMonth,\n}: PropsFromSlot<DateCalendarSlots['calendarHeader']>) {\n  return <div>{currentMonth?.format('MM-DD-YYYY')}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Week Picker Implementation\nDESCRIPTION: Example of implementing week selection functionality.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nWeekPicker.js\n```\n\n----------------------------------------\n\nTITLE: Handling Validation in DatePicker onAccept Callback\nDESCRIPTION: Shows how to use the context argument in the onAccept callback to check for validation errors before running logic.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker\n  onAccept={(newValue, context) => {\n    if (context.validationError == null) {\n      runSomeLogic();\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Filter with renderHeaderFilter Method in MUI-X Data Grid\nDESCRIPTION: Example of using the renderHeaderFilter method in GridColDef to customize the header filter cell for a specific column. This approach allows creating a custom header filter component for individual columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/header-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'isAdmin',\n    renderHeaderFilter: (params: GridHeaderFilterCellProps) => (\n      <MyCustomHeaderFilter {...params} />\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Upgrading from DataGridPro to DataGridPremium in React\nDESCRIPTION: Demonstrates how to upgrade from using DataGridPro to DataGridPremium, which includes the row grouping feature without requiring an experimental flag. This change is part of the new Premium plan release.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n-import { DataGridPro } from '@mui/x-data-grid-pro';\n+import { DataGridPremium } from '@mui/x-data-grid-premium';\n\n-<DataGridPro experimentalFeatures={{ rowGrouping: true }} />\n+<DataGridPremium />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregation Function for Profit Calculation in MUI X Data Grid (TSX)\nDESCRIPTION: This code defines a custom aggregation function for the 'profit' field that aggregates 'gross' and 'budget' values separately before calculating the final profit.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst profit: GridAggregationFunction<{ gross: number; budget: number }, number> = {\n  label: 'profit',\n  getCellValue: ({ row }) => ({ budget: row.budget, gross: row.gross }),\n  apply: ({ values }) => {\n    let budget = 0;\n    let gross = 0;\n    values.forEach((value) => {\n      if (value) {\n        gross += value.gross;\n        budget += value.budget;\n      }\n    });\n    return (gross - budget) / budget;\n  },\n  columnTypes: ['number'],\n};\n```\n\n----------------------------------------\n\nTITLE: Landscape Orientation for Static Date Time Picker in React\nDESCRIPTION: Demonstrates how to implement a landscape-oriented static Date Time Picker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"StaticDateTimePickerLandscape.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Adding Label to Tree Item in Simple Tree View\nDESCRIPTION: This snippet shows how to add a label to a TreeItem component within a SimpleTreeView.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/items/items.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SimpleTreeView>\n  <TreeItem label=\"Item label\" {...otherItemProps} />\n</SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Pinning Non-Pinnable Columns\nDESCRIPTION: Three different approaches to programmatically pin columns that are otherwise not pinnable through the UI, including initializing, controlling, and using the API method.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-pinning/column-pinning.md#2025-04-21_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// (A) Initializing the pinning\n<DataGridPro\n  disableColumnPinning\n  initialState={{ pinnedColumns: { left: ['name'] } }}\n/>\n\n// (B) Controlling the pinned columns\n<DataGridPro\n  disableColumnPinning\n  pinnedColumns={{ left: ['name'] }}\n/>\n\n// (C) Using the API method `setPinnedColumns` to set the pinned columns\n<React.Fragment>\n  <DataGridPro disableColumnPinning />\n  <Button onClick={() => apiRef.current.setPinnedColumns({ left: ['name'] })}>\n    Pin name column\n  </Button>\n</React.Fragment>\n```\n\n----------------------------------------\n\nTITLE: Conditional Series Label Formatting in Chart Tooltips\nDESCRIPTION: Demonstrates how to conditionally format series labels based on where they appear (tooltip or chart) using the label function.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  series={[\n    {\n      data: [ ... ],\n      label: (location) => location === 'tooltip' ? 'BR' : 'Brazil'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Date-Fns-Jalali Adapter in React\nDESCRIPTION: This snippet shows how to import the AdapterDateFnsJalali for different versions of date-fns-jalali. It demonstrates the correct import statements for v3.x/v4.x and v2.x versions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/calendar-systems/calendar-systems.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// with date-fns-jalali v3.x or v4.x\nimport { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n// with date-fns-jalali v2.x\nimport { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV2';\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Steps for Digital Clock in React\nDESCRIPTION: Illustrates how to set custom time intervals for both DigitalClock and MultiSectionDigitalClock components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockTimeStep.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Time Field Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of the TimeField component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-field/time-field.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"BasicTimeField.js\"\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getMeridiemText Method (JavaScript)\nDESCRIPTION: The adapter.getMeridiemText method has been removed. It can be replaced using adapter.setHours, adapter.date, and adapter.format methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n-const meridiem = adapter.getMeridiemText('am');\n+const getMeridiemText = (meridiem: 'am' | 'pm') => {\n+  const date = adapter.setHours(adapter.date()!, meridiem === 'am' ? 2 : 14);\n+  return utils.format(date, 'meridiem');\n+};\n+\n+const meridiem = getMeridiemText('am');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toggle Animations in Simple Tree View\nDESCRIPTION: This example shows how to create custom toggle animations for the Tree Item using Material UI's Collapse component and the react-spring library.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomAnimation.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Combining Lazy Loading and Label Editing in Rich Tree View\nDESCRIPTION: This snippet illustrates how to implement lazy loading along with label editing in Rich Tree View. It uses the onItemLabelChange callback to update labels on the server and manually updates the dataSourceCache to reflect changes in the tree.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"LazyLoadingAndLabelEditing.js\"}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Column Menu Items in TypeScript\nDESCRIPTION: Shows how to override default menu items using the slots prop to replace the default implementation with a custom component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-menu/column-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Override `columnMenuFilterItem` component\n        columnMenuFilterItem: CustomFilterItem,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Row Selection with Filtering in MUI X Data Grid\nDESCRIPTION: Demonstrates the use of keepNonExistentRowsSelected prop to maintain selection on filtered-out rows in the MUI X Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"KeepNonExistentRowsSelected.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Date Field in React\nDESCRIPTION: Illustrates the difference between controlled and uncontrolled value management for the Date Field component. This example likely demonstrates how to implement both approaches.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-field/date-field.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"demo\": \"DateFieldValue.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for Chart Axis Domain\nDESCRIPTION: Code demonstrating how to set specific value ranges for an axis by providing min and max properties in the axis definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nxAxis={[\n  {\n    min: 10,\n    max: 50,\n  },\n]}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Label Change Handler\nDESCRIPTION: Implementation of label change handling with lazy loading support, including data source cache management.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/editing/editing.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleItemLabelChange = (itemId: TreeViewItemId, newLabel: string) => {\n  // update your cache here\n};\n\n<RichTreeViewPro\n  items={[]}\n  onItemLabelChange={handleItemLabelChange}\n  isItemEditable\n  dataSource={{\n    getChildrenCount: (item) => item?.childrenCount as number,\n    getTreeItems: fetchData,\n  }}\n  {...otherProps}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Positive and Negative Bar Chart with MUI X in JavaScript\nDESCRIPTION: This code demonstrates how to create a bar chart with both positive and negative values using MUI X Charts. It likely shows bars extending above and below a central axis.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Rendering Date and Time Pickers Playground in React\nDESCRIPTION: This code snippet renders a playground component for customizing Date and Time Pickers. It uses the 'demo' property to specify the component to render and sets additional display options.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/playground/playground.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"PickersPlaygroundWrapper.js\", \"hideToolbar\": true, \"bg\": \"playground\"}\n```\n\n----------------------------------------\n\nTITLE: Auto Height Configuration for Detail Panels\nDESCRIPTION: Shows how to configure automatic height calculation for detail panels based on content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/master-detail/master-detail.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro getDetailPanelHeight={() => 'auto'} />\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Lines to Charts with MUI X-Charts\nDESCRIPTION: Code snippets showing how to add grid lines to a chart background using either the grid prop or the ChartsGrid component in composition mode.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart grid={{ vertical: true }}>\n\n<ChartContainer>\n  <ChartsGrid vertical >\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Tracking Item Selection in React Tree View\nDESCRIPTION: Shows how to use the onItemSelectionToggle prop to react to changes in item selection within a Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TrackItemSelectionToggle.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customized Time Range Picker Behavior\nDESCRIPTION: Example of customizing the Time Range Picker with custom end time label showing duration\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedBehaviorTimeRangePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Date Time Field in React\nDESCRIPTION: Shows how to implement both controlled and uncontrolled versions of the DateTimeField component using value and defaultValue props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-field/date-time-field.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDateTimeFieldValue.js\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Rendering with Tab Index Management\nDESCRIPTION: Shows how to properly manage tab indices when using custom cell rendering in Data Grid. This ensures proper focus management and accessibility by using the tabIndex parameter provided by renderCell.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/accessibility/accessibility.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrenderCell: (params) => (\n  <div>\n    <Link tabIndex={params.tabIndex} href=\"/#\">\n      more info\n    </Link>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Styles with Page Style Option in Custom Trigger\nDESCRIPTION: Shows how to customize print styling using the pageStyle option to override default styles when printing with a custom export trigger.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom trigger:\n<ExportPrint options={{ pageStyle: '.MuiDataGrid-root .MuiDataGrid-main { color: rgba(0, 0, 0, 0.87); }' }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Item Selection Using TreeView API\nDESCRIPTION: TypeScript interface showing the parameters for the setItemSelection API method used to programmatically control item selection.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/selection/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napiRef.current.setItemSelection({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to select or deselect\n  itemId,\n  // If `true`, the other already selected items will remain selected\n  // Otherwise, they will be deselected\n  // This parameter is only relevant when `multiSelect` is `true`\n  keepExistingSelection,\n  // If `true` the item will be selected\n  // If `false` the item will be deselected\n  // If not defined, the item's selection status will toggled\n  shouldBeSelected,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start with moment for MUI X\nDESCRIPTION: This code shows how to use moment's updateLocale method to set a custom week start day. It updates the 'en' locale to start the week on Monday (1).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport moment from 'moment';\n\n// Replace \"en\" with the name of the locale you want to update.\nmoment.updateLocale('en', {\n  week: {\n    // Sunday = 0, Monday = 1.\n    dow: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Form Props Time Pickers\nDESCRIPTION: Shows implementation of form properties like disabled, readOnly, and name\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"FormPropsTimePickers.js\"\n```\n\n----------------------------------------\n\nTITLE: React Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing the required React and React DOM peer dependency versions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Date Calendar Form Properties\nDESCRIPTION: Shows how to implement disabled and read-only states in DateCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nDateCalendarFormProps.js\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props to Date Picker Field in JSX\nDESCRIPTION: This snippet demonstrates how to pass commonly used props to a DatePicker component, which should be forwarded to the field DOM elements.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker label=\"Birth date\" name=\"birthdate\" className=\"date-picker\" sx={{ borderColor: 'red'}}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Prompt Processing (TypeScript)\nDESCRIPTION: This function demonstrates how to implement a custom prompt processing method using the unstable_gridDefaultPromptResolver. It includes additional context and handles different base URLs for development and production environments.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/ai-assistant/ai-assistant.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROMPT_RESOLVER_PROXY_BASE_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3000'\n    : 'https://api.my-proxy.com';\n\nfunction processPrompt(query: string, context: string, conversationId?: string) {\n  const additionalContext = `The rows represent: List of employees with their company, position and start date`;\n\n  return unstable_gridDefaultPromptResolver(\n    `${PROMPT_RESOLVER_PROXY_BASE_URL}/api/my-custom-path`,\n    query,\n    context,\n    conversationId,\n    additionalContext,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Disabled Options in Digital Clock for React\nDESCRIPTION: Demonstrates how to use the skipDisabled prop to hide unavailable time options in the Digital Clock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockSkipDisabled.js\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.mergeDateAndTime Method (TypeScript)\nDESCRIPTION: The adapter.mergeDateAndTime method has been removed. It can be replaced using adapter.setHours, adapter.setMinutes, and adapter.setSeconds methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\n-const result = adapter.mergeDateAndTime(valueWithDate, valueWithTime);\n+const mergeDateAndTime = <TDate>(\n+   dateParam,\n+   timeParam,\n+ ) => {\n+   let mergedDate = dateParam;\n+   mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));\n+   mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));\n+   mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));\n+\n+   return mergedDate;\n+ };\n+\n+const result = mergeDateAndTime(valueWithDate, valueWithTime);\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Field to Date Picker Components\nDESCRIPTION: These examples show how to pass a custom field component to various date picker components using the slots prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction DatePickerWithCustomField() {\n  return <DatePicker slots={{ field: CustomDateField }}>;\n}\n\n// Also works with the other variants of the component\nfunction DesktopDatePickerWithCustomField() {\n  return <DesktopDatePicker slots={{ field: CustomDateField }}>\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating useMultiInputDateRangeField to useMultiInputRangeField with useDateRangeManager\nDESCRIPTION: Shows how to migrate from the removed useMultiInputDateRangeField hook to the new useMultiInputRangeField hook with useDateRangeManager.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputDateRangeField as useMultiInputDateRangeField } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n+import { useDateRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n-  const fieldResponse = useMultiInputDateRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useDateRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n----------------------------------------\n\nTITLE: Renaming Data Grid Event Hooks in JavaScript\nDESCRIPTION: Example of renaming the Data Grid event hooks after the API change. The 'useGridApiEventHandler' is renamed to 'useGridEvent' and 'useGridApiOptionHandler' to 'useGridEventPriority'.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old usage\n// useGridApiEventHandler()\n// useGridApiOptionHandler()\n\n// New usage\nuseGridEvent()\nuseGridEventPriority()\n```\n\n----------------------------------------\n\nTITLE: Form Props for Date Range Calendar in React\nDESCRIPTION: Illustrates how to use form properties like disabled and read-only with the Date Range Calendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateRangeCalendarFormProps.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Padding for Dynamic Row Heights in React Data Grid\nDESCRIPTION: This snippet demonstrates how to add custom padding to cells when using dynamic row heights. It uses inline styles to adjust padding based on the grid's density setting.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-height/row-height.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  sx={{\n    '&.MuiDataGrid-root--densityCompact .MuiDataGrid-cell': { py: '8px' },\n    '&.MuiDataGrid-root--densityStandard .MuiDataGrid-cell': { py: '15px' },\n    '&.MuiDataGrid-root--densityComfortable .MuiDataGrid-cell': { py: '22px' },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling New Editing API in DataGrid (TypeScript)\nDESCRIPTION: Demonstrates how to enable the new experimental editing API in DataGrid by setting a flag in the props.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid experimentalFeatures={{ newEditingApi: true }} />\n```\n\n----------------------------------------\n\nTITLE: Time Picker View Renderers\nDESCRIPTION: Shows how to customize view rendering using different time selection interfaces\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"TimePickerViewRenderers.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting MUI X License Key in React\nDESCRIPTION: This code snippet demonstrates how to set the MUI X license key in a React application using the LicenseInfo object from the @mui/x-license package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Feature in Funnel Chart\nDESCRIPTION: Shows how to implement highlighting for hovered elements in a funnel chart using the 'highlightScope.highlight' and 'highlightScope.fade' properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"HighlightFunnel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Lines to MUI Charts in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the ChartsReferenceLine component to add reference lines to charts. It supports both vertical and horizontal lines, customizable labels, and styling options.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ChartsReferenceLine />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Component Translations\nDESCRIPTION: Shows how to combine translations for multiple MUI components including core, data grid, and date pickers using theme configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE as dataGridDeDE } from '@mui/x-data-grid';\nimport { deDE as coreDeDE } from '@mui/material/locale';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // x-date-pickers translations\n  dataGridDeDE, // x-data-grid translations\n  coreDeDE, // core translations\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Configuration\nDESCRIPTION: Shows how to configure custom background colors for the Data Grid using theme customization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport type {} from '@mui/x-data-grid/themeAugmentation';\n\nconst theme = createTheme({\n  palette: {\n    DataGrid: {\n      // Container background\n      bg: '#f8fafc',\n      // Pinned rows and columns background\n      pinnedBg: '#f1f5f9',\n      // Column header background\n      headerBg: '#eaeff5',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Tree Data Grouping Column Field\nDESCRIPTION: Shows how to access the grouping column field for use with column pinning using the GRID_TREE_DATA_GROUPING_FIELD constant.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/tree-data/tree-data.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro\n  treeData\n  initialState={{\n    pinnedColumns: {\n      left: [GRID_TREE_DATA_GROUPING_FIELD],\n    },\n  }}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Quick Filter Components in React\nDESCRIPTION: Shows how to import the various Quick Filter components from the MUI X Data Grid package and their basic usage structure.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/quick-filter/quick-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  QuickFilter,\n  QuickFilterControl,\n  QuickFilterClear,\n  QuickFilterTrigger,\n} from '@mui/x-data-grid';\n\n<QuickFilter>\n  <QuickFilterTrigger />\n  <QuickFilterControl />\n  <QuickFilterClear />\n</QuickFilter>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Lines in MUI X-Charts\nDESCRIPTION: Demo showing how to configure vertical and horizontal grid lines in a chart background.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"GridDemo.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to Simple Tree View\nDESCRIPTION: This snippet illustrates how to use treeItemClasses to target and style internal elements of the Tree Item component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomStyling.js\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations in Line Charts\nDESCRIPTION: Shows how to disable animations in both single component and composed charts by using the skipAnimation property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/lines/lines.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// For a single component chart\n<LineChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <LinePlot skipAnimation />\n  <AreaPlot skipAnimation />\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial View in React Date Time Picker\nDESCRIPTION: Illustrates how to set the initial view that opens when the Date Time Picker is rendered.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DateTimePickerOpenTo.js\"}\n```\n\n----------------------------------------\n\nTITLE: Form Properties in Time Range Picker\nDESCRIPTION: Example showing form-related props like disabled, readOnly, and name in Time Range Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FormPropsTimeRangePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Custom X-Axis Configuration in React Sparkline\nDESCRIPTION: Demonstrates how to configure the x-axis of a sparkline chart. Shows how to override default sequential numbering with custom data points and scale types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/sparkline/sparkline.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} xAxis={{ scaleType, data }} />\n```\n\n----------------------------------------\n\nTITLE: Get Item by ID API Method\nDESCRIPTION: Demonstrates how to retrieve an item using its ID through the API reference.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst item = apiRef.current.getItem(\n  // The id of the item to retrieve\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Luxon UTC\nDESCRIPTION: Shows how to use a UTC date with DateTimePicker component using Luxon adapter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' })}\n      />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: 12/24 Hour Format for Digital Clock in React\nDESCRIPTION: Shows how to set 12-hour or 24-hour format for the Digital Clock component using the ampm prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockAmPm.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Filters with the initialState Prop in React Data Grid\nDESCRIPTION: Example of how to initialize filters non-controllably using the initialState prop in the DataGrid component. This sets up an initial filter that shows only rows with a rating greater than 2.5.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    filter: {\n      filterModel: {\n        items: [{ field: 'rating', operator: '>', value: '2.5' }],\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Number in MUI X-Charts\nDESCRIPTION: Example showing how to control the number of ticks with tickMinStep and tickMaxStep properties, which affect the spacing between ticks on time axes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TickNumber.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pie Chart Colors in React\nDESCRIPTION: Shows how to customize pie chart colors using a color palette or individual color properties for data objects.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/pie/pie.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PieChart\n  colors={['red', 'blue', 'green']} // Use palette\n  series={[\n    {\n      data: [\n        { value: 10, color: 'orange' }, // Use color property\n        // ...\n      ],\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaled Sections in Funnel Chart\nDESCRIPTION: Demonstrates how to scale funnel sections based on their values using a linear scale. This is achieved by setting the 'scaleType' property to 'linear' in the 'categoryAxis'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelLinearScale.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating page index from 1-based to 0-based in DataGrid\nDESCRIPTION: Shows how to migrate code after the DataGrid pagination changed from 1-based to 0-based indexing for consistency with TablePagination and JavaScript arrays.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n-const [page, setPage] = React.useState(1);\n+const [page, setPage] = React.useState(0);\n\n return (\n   <div className=\"grid-container\">\n     <DataGrid rows={rows} columns={columns} page={page} />\n   </div>\n );\n```\n\n----------------------------------------\n\nTITLE: Updating State Access in MUI X Data Grid\nDESCRIPTION: Demonstrates how to replace direct state access with selectors and update the state access method.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-const state = apiRef.current.getState();\n+const state = apiRef.current.state\n\n const filterModel = gridFilterModelSelector(state);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Spacing in React Data Grid\nDESCRIPTION: This code shows how to use the getRowSpacing prop to add spacing between rows in a DataGrid. It includes an example of setting top and bottom margins based on row position.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-height/row-height.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRowSpacing = React.useCallback((params: GridRowSpacingParams) => {\n  return {\n    top: params.isFirstVisible ? 0 : 5,\n    bottom: params.isLastVisible ? 0 : 5,\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView Selection Propagation Types in TypeScript\nDESCRIPTION: Type definition for the selectionPropagation prop that controls how selection propagates between parent and child nodes in the tree view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/selection/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TreeViewSelectionPropagation = {\n  descendants?: boolean; // default: false\n  parents?: boolean; // default: false\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Grouping Value in DataGridPremium\nDESCRIPTION: Shows how to use groupingValueGetter for complex grouping values in a column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns: GridColDef[] = [\n  {\n    field: 'composer',\n    groupingValueGetter: (value) => value.name,\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Renaming onSelectionChange to onSelectionModelChange in DataGrid\nDESCRIPTION: Shows how to update code after the onSelectionChange prop was renamed to onSelectionModelChange for consistency in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid onSelectionChange={selectionChangeHandler} />\n+<DataGrid onSelectionModelChange={onSelectionModelChangeHandler} />\n```\n\n----------------------------------------\n\nTITLE: Migrating from XGrid to DataGridPro\nDESCRIPTION: Code changes required to migrate from the XGrid component to the renamed DataGridPro component after the rebranding in v4.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { XGrid } from '@material-ui/x-grid';\n-<XGrid />\n+import { DataGridPro } from '@mui/x-data-grid-pro';\n+<DataGridPro />\n```\n\n----------------------------------------\n\nTITLE: Set Item Disabled State API Method\nDESCRIPTION: Shows how to imperatively toggle an item's disabled state through the public API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\npublicAPI.setIsItemDisabled({\n  // The id of the item to disable or enable\n  itemId,\n  // If `true` the item will be disabled\n  // If `false` the item will be enabled\n  // If not defined, the item's new disable status will be the opposite of its current one\n  shouldBeDisabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Action Bar\nDESCRIPTION: Example showing how to customize the action bar behavior in DatePicker component. Demonstrates setting different actions for desktop and mobile variants.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-components/custom-components.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  slotProps={{\n    // The actions will be the same between desktop and mobile\n    actionBar: {\n      actions: ['clear'],\n    },\n    // The actions will be different between desktop and mobile\n    actionBar: ({ variant }) => ({\n      actions: variant === 'desktop' ? [] : ['clear'],\n    }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Axis Values in React Scatter Chart\nDESCRIPTION: Shows three different methods to set the z-axis value in a scatter chart, including using the series data, zAxis prop, and dataset with dataKey.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/scatter/scatter.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ScatterChart\n  // First option\n  series={[{ data: [{ id: 0, x: 1, y: 1, z: 5 }] }]}\n  // Second option\n  zAxis={[{ data: [5] }]}\n  // Third option\n  dataset={[{ price: 5 }]}\n  zAxis={[{ dataKey: 'price' }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Parent-Constrained Reordering in React TreeView\nDESCRIPTION: Implements reordering restrictions to only allow items to be reordered within their current parent using canMoveItemToNewPosition prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nOnlyReorderInSameParent.js\n```\n\n----------------------------------------\n\nTITLE: Multi Input Time Range Picker Configuration\nDESCRIPTION: Implementation of Time Range Picker with MultiInputTimeRangeField component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"MultiInputTimeRangePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree View API Reference in React\nDESCRIPTION: Demonstrates how to initialize and use the apiRef object for imperative control of the Tree View component using the useTreeViewApiRef hook.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Row Count in Footer\nDESCRIPTION: Shows how to implement a custom footer component that displays both the number of groups and their child rows using gridFilteredDescendantRowCountSelector.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-row-grouping/recipes-row-grouping.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRowGroupingChildRowCount.js\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Toolbar\nDESCRIPTION: Example showing how to customize toolbar format, placeholder and visibility in DatePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-components/custom-components.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  slotProps={{\n    toolbar: {\n      // Customize value display\n      toolbarFormat: 'YYYY',\n      // Change what is displayed given an empty value\n      toolbarPlaceholder: '??',\n      // Show the toolbar\n      hidden: false,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid State with Events and Setters\nDESCRIPTION: Shows different methods for updating the DataGrid state, including using direct setters and publishing events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napiRef.current.setEditCellValue(newParams, event);\n// or\napiRef.current.publishEvent('cellKeyDown', params, event as any);\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting for Specific Column in MUI-X Data Grid (TSX)\nDESCRIPTION: Disables sorting for a specific column (rating) by setting the sortable property to false in the column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/sorting/sorting.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid columns={[...columns, { field: 'rating', sortable: false }]} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Column Menu Items in TypeScript\nDESCRIPTION: Demonstrates how to hide specific menu items by setting their slot value to null in the slots configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-menu/column-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Hide `columnMenuColumnsItem`\n        columnMenuColumnsItem: null,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Tick Label Overflow in MUI X-Charts\nDESCRIPTION: Example showing how to handle tick label overflow by modifying axis size and using margins to prevent clipping of long labels.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MarginAndLabelPosition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pagination Model in React Data Grid\nDESCRIPTION: Shows how to initialize the pagination model with a custom page size and page number using the initialState prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    pagination: {\n      paginationModel: { pageSize: 25, page: 0 },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tree View Label Editing Configuration\nDESCRIPTION: Example showing basic tree view setup with editable labels enabled for all items using the isItemEditable prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/editing/editing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\n----------------------------------------\n\nTITLE: Responsive Time Range Picker Implementation\nDESCRIPTION: Demonstration of responsive Time Range Picker variants for desktop and mobile\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-picker/time-range-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ResponsiveTimeRangePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Export in Data Grid Definition\nDESCRIPTION: Shows how to configure specific columns to be excluded from exports using the disableExport property in the column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid columns={[{ field: 'name', disableExport: true }, { field: 'brand' }]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Styles with Page Style Option in Default Toolbar\nDESCRIPTION: Shows how to customize print styling using the pageStyle option to override default styles when printing from the default toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid\n  slotProps={{\n    toolbar: {\n      printOptions: {\n        pageStyle:\n          '.MuiDataGrid-root .MuiDataGrid-main { color: rgba(0, 0, 0, 0.87); }',\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Luxon Timezone\nDESCRIPTION: Shows how to use Luxon with MUI X DateTimePicker component while specifying a timezone.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', {\n          zone: 'America/New_York',\n        })}\n      />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Time Clock Views Customization\nDESCRIPTION: Example of customizing available views (hours, minutes, seconds) in the TimeClock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-clock/time-clock.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nTimeClockViews.js\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Height for Data Grid Container in React\nDESCRIPTION: Shows how to set minimum and maximum heights for the Data Grid's parent container using a flex layout. This allows the grid to adapt its height based on the number of rows while staying within defined limits.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/layout/layout.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={{\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: 200,\n    maxHeight: 400,\n  }}\n>\n  <DataGrid\n    rows={rows}\n    columns={columns}\n    initialState={{\n      pagination: {\n        paginationModel: {\n          pageSize: 5,\n        },\n      },\n    }}\n    pageSizeOptions={[5]}\n    checkboxSelection\n    disableRowSelectionOnClick\n  />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Memoization Example for Detail Panel Content\nDESCRIPTION: Demonstrates proper memoization of getDetailPanelContent function to optimize rendering performance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/master-detail/master-detail.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst getDetailPanelContent = React.useCallback(() => { ... }, []);\n\n<DataGridPro getDetailPanelContent={getDetailPanelContent} />\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Funnels in React Chart\nDESCRIPTION: Demonstrates how to display multiple funnel series in a single chart. Multiple series are stacked by default, with the order of series determining the display order.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelStacked.js\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous Color Map Configuration\nDESCRIPTION: TypeScript interface for creating a continuous color map that interpolates between colors based on min/max values. Supports both color pair interpolation and custom interpolation functions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  type: 'continuous';\n  min?: Value;\n  max?: Value;\n  color: [string, string] | ((t: number) => string);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Input-related Props in React Date Picker\nDESCRIPTION: Shows how to update InputAdornmentProps, OpenPickerButtonProps, and other input-related props to use the new API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  InputAdornmentProps={{ position: 'start' }}\n+  slotProps={{ inputAdornment: { position: 'start' } }}\n-  OpenPickerButtonProps={{ ref: buttonRef }}\n+  slotProps={{ openPickerButton: { ref: buttonRef } }}\n-  InputProps={{ color: 'primary' }}\n+  slotProps={{ textField: { InputProps: { color: 'primary' } } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pickers: Preset-Safe Codemod Command\nDESCRIPTION: Command to run all safe transformations for Pickers components in v8.0.0, including renaming adapters and type imports.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/pickers/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Configuring DesktopDatePicker with Custom Close Behavior\nDESCRIPTION: Sets up a DesktopDatePicker with closeOnSelect set to false and a custom action bar for user validation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker\n  closeOnSelect={false}\n  slotProps={{ actionBar: { actions: ['cancel', 'accept'] } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Item indentation in MUI-X Tree View (TSX)\nDESCRIPTION: This snippet illustrates how to set custom indentation for Tree Items using the new 'itemChildrenIndentation' prop. This change supports the new DOM structure required for features like drag and drop re-ordering.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<RichTreeView\n  items={MUI_X_PRODUCTS}\n  itemChildrenIndentation={24}\n  defaultExpandedItems={['grid']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipboard Copy in React Data Grid\nDESCRIPTION: Sets the ignoreValueFormatterDuringExport prop to true to ensure correct formatting of copied cells for parsing during paste operations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/clipboard/clipboard.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium ignoreValueFormatterDuringExport />\n```\n\n----------------------------------------\n\nTITLE: Form Props Date Time Range Pickers - React\nDESCRIPTION: Shows usage of form properties like disabled, readOnly, and name with Date Time Range Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"FormPropsDateTimeRangePickers.js\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Grid Filter Types in TypeScript\nDESCRIPTION: Defines the core interfaces and enums for the Data Grid filtering system. Includes GridFilterModel for overall filter state, GridFilterItem for individual filter conditions, and GridLogicOperator for combining filters.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridFilterModel {\n  items: GridFilterItem[];\n  logicOperator?: GridLogicOperator;\n}\n\ninterface GridFilterItem {\n  id?: number | string;\n  field: string;\n  value?: any;\n  operator: string;\n}\n\nenum GridLogicOperator {\n  And = 'and',\n  Or = 'or',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Non-Pivoted Grid Demo\nDESCRIPTION: Demonstrates a basic non-pivoted data grid displaying flat transaction data with products, regions, and sales.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting-explained.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGridNonPivoted.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Formula Escaping in Excel Export for MUI X Data Grid\nDESCRIPTION: This code snippet shows how to disable formula escaping in Excel export for MUI X Data Grid. It demonstrates setting the escapeFormulas option to false for both default toolbar and custom trigger scenarios.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGridPremium slotProps={{ toolbar: { excelOptions: { escapeFormulas: false } } }} />\n\n// or\n<ExportExcel options={{ escapeFormulas: false }} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Reordering in MUI X Data Grid Pro\nDESCRIPTION: This code shows how to disable column reordering for all columns in the Data Grid Pro component by setting the disableColumnReorder prop to true.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-ordering/column-ordering.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"<DataGridPro disableColumnReorder={true} {...props} />\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart Stacked by Sign with MUI X in JavaScript\nDESCRIPTION: This example shows how to implement a bar chart where positive and negative values are stacked separately using MUI X Charts. It probably groups positive and negative values within each category.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events Using Component Props in TSX\nDESCRIPTION: Example showing how to subscribe to the 'rowClick' event using the component prop approach. This is the most direct way to attach event handlers to Data Grid events that have dedicated props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/events/events.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid onRowClick={handleEvent} {...other} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Funnel Chart Legend in React\nDESCRIPTION: Shows how to display and configure legends for a funnel chart. Legends are displayed by default when 'label' values are provided in the data objects. The 'hideLegend' property can be used to disable the legend.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelLegend.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Initial Pagination State (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to update the initial pagination state in the DataGrid component to use the new paginationModel structure.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n-initialState={{ pagination: { page: 1, pageSize: 10 } }}\n+initialState={{ pagination: { paginationModel: { page: 1, pageSize: 10 } } }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting for All Columns in MUI-X Data Grid (JSX)\nDESCRIPTION: Disables sorting functionality for all columns in the Data Grid by setting the disableColumnSorting prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/sorting/sorting.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid disableColumnSorting />\n```\n\n----------------------------------------\n\nTITLE: Reversing Axis Direction in MUI X-Charts\nDESCRIPTION: Example demonstrating how to change the default axis direction using the reverse property, which flips the orientation from left-to-right/bottom-to-top to right-to-left/top-to-bottom.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ReverseExample.js\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing UseDateTimeFieldComponentProps Type in TypeScript\nDESCRIPTION: Definition for UseDateTimeFieldComponentProps type that combines component props with DateTimeField specific props. This type is a generic that works with any valid date type and accessibility settings.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseDateTimeFieldProps } from '@mui/x-date-pickers/DateTimeField';\nimport { PickerValidDate } from '@mui/x-date-pickers/models';\n\ntype UseDateTimeFieldComponentProps<\n  TDate extends PickerValidDate,\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  keyof UseDateTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n> &\n  UseDateTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Date Time Picker in React\nDESCRIPTION: Illustrates the difference between controlled and uncontrolled value management in the Date Time Picker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DateTimePickerValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Tree View Label Update API Usage\nDESCRIPTION: Demonstrates how to use the Tree View API to programmatically update item labels.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/editing/editing.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\napiRef.current.updateItemLabel(\n  // The id of the item to to update\n  itemId,\n  // The new label of the item.\n  newLabel,\n);\n```\n\n----------------------------------------\n\nTITLE: Month and Year Calendar Implementation\nDESCRIPTION: Example of using standalone MonthCalendar and YearCalendar components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nYearMonthCalendar.js\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTimePicker Tabs\nDESCRIPTION: Example showing how to customize tab icons and visibility in DateTimePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-components/custom-components.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      dateIcon: <LightModeIcon />,\n      timeIcon: <AcUnitIcon />,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Generic Typing with GridColDef in TypeScript\nDESCRIPTION: Example of using generic typing with GridColDef to strongly type row and cell values in the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows: Movie[] = [];\n\nreturn (\n  <DataGrid\n    rows={rows}\n    columns={[\n      {\n        // typeof params.row => Movie (R)\n        valueGetter: (params) => params.row.year,\n      },\n    ]}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Row Height Processing in TypeScript\nDESCRIPTION: Processor that modifies row heights based on custom feature requirements. Adds or removes custom feature height from the row height calculation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/processing.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst addCustomFeatureHeight = React.useCallback<GridPipeProcessor<'rowHeight'>>(\n  (initialValue, row) => {\n    if (props.disableCustomFeature) {\n      return {\n        ...initialValue,\n        customFeature: 0,\n      };\n    }\n\n    return {\n      ...initialValue,\n      customFeature: customFeatureHeightLookup[row.id],\n    };\n  },\n  [apiRef, customFeatureHeightLookup],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing DataGrid State with Selectors and Getters\nDESCRIPTION: Demonstrates how to access the DataGrid state using either selectors or getter methods through the apiRef context.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiRef = useGridApiContext();\n// or\nconst filterModel = useGridSelector(apiRef, gridFilterModelSelector);\nconst row = apiRef.current.getRow(id);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events Using apiRef in TSX\nDESCRIPTION: Example showing how to subscribe to the 'rowClick' event using the apiRef.current.subscribeEvent method. This approach is useful for programmatic subscription and allows for dynamic event handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/events/events.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\napiRef.current.subscribeEvent('rowClick', handleEvent);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Filter Height in MUI-X Data Grid\nDESCRIPTION: Example of customizing the height of the header filter row using the headerFilterHeight prop. By default, it uses the same height as the column header.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/header-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro {...data} headerFilterHeight={52} />\n```\n\n----------------------------------------\n\nTITLE: Adding Use Client Directive to Date Pickers Components\nDESCRIPTION: Adds the 'use client' directive to every public component and hook in the Date Pickers component for Next.js compatibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n[pickers] Add \"use client\" directive to every public component and hook (#14562) @flaviendelangle\n```\n\n----------------------------------------\n\nTITLE: Server-side Sorting Warning Example\nDESCRIPTION: Demonstrates valid and invalid row arrangements when using server-side sorting with tree data, emphasizing that children must follow their parent rows immediately.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/tree-data/tree-data.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// ✅ The row A.A is immediately after its parent\nconst validRows = [{ path: ['A'] }, { path: ['A', 'A'] }, { path: ['B'] }];\n\n// ❌ The row A.A is not immediately after its parent\nconst invalidRows = [{ path: ['A'] }, { path: ['B'] }, { path: ['A', 'A'] }];\n```\n\n----------------------------------------\n\nTITLE: Stack Order Demo in MUI X Charts\nDESCRIPTION: Demonstrates different stack ordering strategies ('none', 'reverse', 'appearance', 'ascending', 'descending') to control the sequence of stacked elements based on their values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/stacking/stacking.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"StackOrderDemo.js\"}\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration for Light/Dark Mode\nDESCRIPTION: Demonstrates setting up different color schemes for light and dark modes in Material UI v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport type {} from '@mui/x-data-grid/themeAugmentation';\n\nconst theme = createTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        DataGrid: {\n          bg: '#f8fafc',\n          pinnedBg: '#f1f5f9',\n          headerBg: '#eaeff5',\n        },\n      },\n    },\n    dark: {\n      palette: {\n        DataGrid: {\n          bg: '#334155',\n          pinnedBg: '#293548',\n          headerBg: '#1e293b',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing DialogProps with component slots in DatePicker\nDESCRIPTION: Migration for replacing the DialogProps prop with the new component slots pattern in mobile and responsive Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n // Same on MobileDatePicker, DateTimePicker, MobileDateTimePicker,\n // TimePicker, MobileTimePicker, DateRangePicker and MobileDateRangePicker.\n <DatePicker\n-  DialogProps={{ backgroundColor: 'red' }}\n+  componentsProps={{ dialog: { backgroundColor: 'red' }}}\n />\n```\n\n----------------------------------------\n\nTITLE: Clearable Date Picker Implementation\nDESCRIPTION: Demonstrates how to implement clearable behavior in Date Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nClearableProp.js\n```\n\n----------------------------------------\n\nTITLE: Including Checkboxes in Print Export with Default Toolbar\nDESCRIPTION: Shows how to configure the print export to include checkboxes for selected rows when using the default toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid\n  slotProps={{\n    toolbar: {\n      printOptions: {\n        includeCheckboxes: true,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing rowsScroll event listener to replace onViewportRowsChange\nDESCRIPTION: Shows how to use the rowsScroll event with useEffect to replace the removed onViewportRowsChange prop and viewportRowsChange event in DataGridPro.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useGridApiRef();\nconst prevRenderContext = React.useRef(null);\n\nReact.useEffect(() => {\n  return apiRef.current.subscribeEvent('rowsScroll', ({ renderContext }) => {\n    if (\n      !prevRenderContext.current ||\n      renderContext.firstRowIdx !== prevRenderContext.current.firstRowIndex ||\n      renderContext.lastRowIdx !== prevRenderContext.current.lastRowIndex\n    ) {\n      prevRenderContext.current = renderContext;\n      const params = {\n        firstRowIndex: renderContext.firstRowIndex,\n        lastRowIndex: renderContext.lastRowIndex,\n      };\n    }\n  });\n}, [apiRef]);\n\n<DataGridPro apiRef={apiRef} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Luxon Week Settings in JavaScript\nDESCRIPTION: Example of how to hardcode week settings when using AdapterLuxon with Luxon v3.4.4 or higher to keep the start of the week on Monday.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  firstDay: 1,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: [6, 7],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Preference Panel Processing in MUI-X Grid with TypeScript\nDESCRIPTION: Demonstrates how to implement a custom processor for the GridPreferencePanel component using the GridPipeProcessor. The processor checks for a specific preference panel value and conditionally renders a custom feature panel component with provided props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/processing.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst preferencePanelPreProcessing = React.useCallback<GridPipeProcessor<'preferencePanel'>>(\\n  (initialValue, value) => {\\n    if (value === GridPreferencePanelsValue.customFeature) {\\n      const CustomFeaturePanel = props.components.CustomFeaturePanel;\\n      return <CustomFeaturePanel {...props.componentsProps?.customFeaturePanel} />;\\n    }\\n\\n    return initialValue;\\n  },\\n  [props.components.CustomFeaturePanel, props.componentsProps?.customFeaturePanel],\\n);\\n\\nuseGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n```\n\n----------------------------------------\n\nTITLE: Customizing Funnel Chart Labels in React\nDESCRIPTION: Explains how to customize labels in a funnel chart. Labels display the 'value' of each section by default. A 'valueFormatter' function can be provided to format the labels.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelLabels.js\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tick Labels in MUI X-Charts\nDESCRIPTION: Example showing how to display labels only on selected ticks using the tickLabelInterval filtering function, which controls which ticks get labels displayed.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TickLabelPosition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Lifetime for Rich Tree View\nDESCRIPTION: This snippet shows how to customize the cache lifetime (Time To Live) for the Rich Tree View's data source. It uses DataSourceCacheDefault with a custom TTL value passed to the constructor.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/lazy-loading/lazy-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"LowTTLCache.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handlers for Line Charts\nDESCRIPTION: Shows the signature for click event handlers that can be used with line charts, providing event and parameter information.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/lines/lines.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst clickHandler = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Charts Array in TypeScript\nDESCRIPTION: Example showing how to use readonly arrays with Charts component using 'as const'\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst xAxis = [{ position: 'bottom' }] as const\n<BarChart xAxis={xAxis} />\n```\n\n----------------------------------------\n\nTITLE: Migrating useTreeItem Hook\nDESCRIPTION: Example showing how to migrate from useTreeItem to useTreeItemState hook\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: jsx\nCODE:\n```\n-import { TreeItem, useTreeItem } from '@mui/x-tree-view/TreeItem';\n+import { TreeItem, useTreeItemState } from '@mui/x-tree-view/TreeItem';\n\nconst CustomContent = React.forwardRef((props, ref) => {\n-  const { disabled } = useTreeItem(props.nodeId);\n+  const { disabled } = useTreeItemState(props.nodeId);\n\n  // Render some UI\n});\n\nfunction App() {\n  return (\n    <SimpleTreeView>\n      <TreeItem ContentComponent={CustomContent} />\n    </SimpleTreeView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Item Selection in React Tree View API\nDESCRIPTION: Illustrates the usage of the setItemSelection API method to programmatically select or deselect items in a Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napiRef.current.setItemSelection({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to select or deselect\n  itemId,\n  // If `true`, the other already selected items will remain selected\n  // Otherwise, they will be deselected\n  // This parameter is only relevant when `multiSelect` is `true`\n  keepExistingSelection,\n  // If `true` the item will be selected\n  // If `false` the item will be deselected\n  // If not defined, the item's selection status will be toggled\n  shouldBeSelected,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Formula Escaping in CSV Export with Custom Trigger\nDESCRIPTION: Shows how to allow formulas to be exported as-is in CSV files by disabling the default escaping behavior when using a custom export trigger.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom trigger:\n<ExportCsv options={{ escapeFormulas: false }} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Metadata in DataGrid (JavaScript)\nDESCRIPTION: Shows the change in how to retrieve column metadata such as total width and positions. The method has been replaced with selector functions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n-const { totalWidth, positions } = apiRef.current.getColumnsMeta();\n+const totalWidth = gridColumnsTotalWidthSelector(apiRef);\n+const positions = gridColumnPositionsSelector(apiRef);\n```\n\n----------------------------------------\n\nTITLE: Custom Item Identifier Implementation\nDESCRIPTION: Shows how to use getItemId prop to specify custom identifier property for tree view items.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst ITEMS = [{ internalId: 'tree-view-community' }];\n\nfunction getItemId(item) {\n  return item.internalId;\n}\n\n<RichTreeView items={ITEMS} getItemId={getItemId} />;\n```\n\n----------------------------------------\n\nTITLE: Using ownerState in Theme and SlotProps\nDESCRIPTION: Examples demonstrating how to use ownerState for advanced component customization in theme styleOverrides and slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiDateCalendar: {\n      styleOverrides: {\n        root: ({ ownerState }) => ({\n          /** Style based on the ownerState */\n        }),\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<DatePicker\n  slotProps={{\n    actionBar: (ownerState) => ({\n      /** Props based on the ownerState */\n    }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useItemHighlighted Hook in React for MUI X Charts\nDESCRIPTION: This snippet demonstrates how to use the new useItemHighlighted hook to check if an item is highlighted or faded in MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst { isFaded, isHighlighted } = useItemHighlighted({\n  seriesId,\n  dataIndex,\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Columns to Export in Data Grid\nDESCRIPTION: Shows how to explicitly define which fields should be exported and in what order using the fields array property in csvOptions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid slotProps={{ toolbar: { csvOptions: { fields: ['name', 'brand'] } } }} />\n```\n\n----------------------------------------\n\nTITLE: Styling Cells without Affecting Aggregation Cells in MUI Data Grid (JavaScript)\nDESCRIPTION: This premium feature snippet demonstrates how to style all cells in the MUI Data Grid without impacting aggregation cells. It uses a custom getClassName function to apply styles selectively.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style-recipes/style-recipes.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { DataGridPremium } from '@mui/x-data-grid-premium';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nconst VISIBLE_FIELDS = ['name', 'rating', 'country', 'dateCreated', 'isAdmin'];\n\nexport default function StylingAllCellsButAggregation() {\n  const { data } = useDemoData({\n    dataSet: 'Employee',\n    visibleFields: VISIBLE_FIELDS,\n    rowLength: 100,\n  });\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <style>\n        {\n          `\n          .customCell {\n            background-color: rgba(0, 255, 0, 0.1);\n          }\n          .customCell[data-aggregation=\"true\"] {\n            background-color: inherit;\n          }\n        `\n        }\n      </style>\n      <DataGridPremium\n        {...data}\n        getRowClassName={() => 'customCell'}\n        aggregationModel={{\n          name: 'count',\n        }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTimePicker Tab Visibility\nDESCRIPTION: Example showing how to control the visibility of tabs in DateTimePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-components/custom-components.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      hidden: false,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Sparkline Chart Implementation in React\nDESCRIPTION: Shows how to create a basic sparkline chart using the SparkLineChart component with minimal props. Data is provided as an array of numbers, with option to switch between line and bar plot types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/sparkline/sparkline.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} xAxis={{ scaleType, data }} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Formula Escaping in CSV Export with Default Toolbar\nDESCRIPTION: Shows how to allow formulas to be exported as-is in CSV files by disabling the default escaping behavior when using the default toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid slotProps={{ toolbar: { csvOptions: { escapeFormulas: false } } }} />\n```\n\n----------------------------------------\n\nTITLE: State Export Processing in TypeScript\nDESCRIPTION: Processor that adds custom feature state to the exported grid state. Only adds custom feature data if it differs from default values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/processing.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst stateExportPreProcessing = React.useCallback<GridPipeProcessor<'exportState'>>(\n  (prevState) => {\n    const customFeatureModel = gridCustomFeatureModel(apiRef);\n\n    if (customFeatureModel.length === 0) {\n      return prevState;\n    }\n\n    return {\n      ...prevState,\n      customFeature: {\n        model: customFeatureModel,\n      },\n    };\n  },\n  [apiRef],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Toolbar Component in React TSX\nDESCRIPTION: Demonstrates how to create a custom toolbar by composing Toolbar and FilterPanelTrigger components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar, ToolbarButton, FilterPanelTrigger } from '@mui/x-data-grid';\n\nfunction CustomToolbar() {\n  return (\n    <Toolbar>\n      <FilterPanelTrigger render={<ToolbarButton />}>Filters</FilterPanelTrigger>\n    </Toolbar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Start with dayjs for MUI X\nDESCRIPTION: This snippet demonstrates how to use the updateLocale plugin in dayjs to set a custom week start day. It extends dayjs with the updateLocale plugin and then updates the 'en' locale to start the week on Monday (1).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport updateLocale from 'dayjs/plugin/updateLocale';\n\ndayjs.extend(updateLocale);\n\n// Replace \"en\" with the name of the locale you want to update.\ndayjs.updateLocale('en', {\n  // Sunday = 0, Monday = 1.\n  weekStart: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Borders to Simple Tree View\nDESCRIPTION: This snippet shows how to add connection borders between Tree View items by targeting the treeItemClasses.groupTransition class.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/customization/customization.md#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BorderedTreeView.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Effects in React Heatmap\nDESCRIPTION: Demonstrates how to configure highlight effects for Heatmap cells by setting highlightScope.highlight to 'item' and highlightScope.fade to 'global' to enhance interactive visualization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/heatmap/heatmap.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighlightHeatmap.js\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Implementation\nDESCRIPTION: Example of implementing a custom cache with a specified Time To Live (TTL) for the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GridDataSourceCacheDefault } from '@mui/x-data-grid';\n\nconst lowTTLCache = new GridDataSourceCacheDefault({ ttl: 1000 * 10 }); // 10 seconds\n\n<DataGrid\n  columns={columns}\n  dataSource={customDataSource}\n  dataSourceCache={lowTTLCache}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Updating Tree View Expand Icon Props\nDESCRIPTION: Example showing how to migrate expand icon props to the new slots API in Tree View component\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\n-import ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\n<SimpleTreeView\n-  defaultExpandIcon={<ChevronRightIcon />}\n>\n  {items}\n</SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Updating ChartsYAxis Configuration in React for MUI X Charts v8\nDESCRIPTION: This diff shows how to move the position prop from ChartsYAxis component to the axis configuration in ChartContainer for MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n <ChartContainer\n   yAxis={[\n     {\n       id: 'my-axis',\n+      position: 'right',\n     },\n   ]}\n >\n-  <ChartsYAxis axisId=\"my-axis\" position=\"right\" />\n+  <ChartsYAxis axisId=\"my-axis\" />\n </ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Date Calendar Views Configuration\nDESCRIPTION: Demonstrates customization of available views (day, month, year) in DateCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nDateCalendarViews.js\n```\n\n----------------------------------------\n\nTITLE: Hiding Axis Values in Chart Tooltips\nDESCRIPTION: Shows how to hide axis values in the tooltip by setting the hideTooltip property, which removes the header showing the x-axis value.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  xAxis={[{ data: [ ... ], hideTooltip: true }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Positioning Current Month in Date Range Calendar\nDESCRIPTION: Shows how to adjust the position of the current month in the Date Range Calendar using the 'currentMonthCalendarPosition' prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateRangeCalendarCurrentMonthCalendarPositionProp.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Day.js with UTC and Timezone Plugins\nDESCRIPTION: Sets up Day.js with both UTC and timezone plugins for timezone support.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading and No Data Overlays\nDESCRIPTION: Demonstrates how to customize the loading and no data overlay messages in a BarChart component using slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart\n  slotProps={{\n    // Custom loading message\n    loadingOverlay: { message: 'Data should be available soon.' },\n    // Custom message for empty chart\n    noDataOverlay: { message: 'Select some data to display.' },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events on Pie Chart in React\nDESCRIPTION: Demonstrates the structure of the onItemClick handler for pie charts, which provides event information and parameters identifying the clicked element.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/pie/pie.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst onItemClick = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked element.\n) => {};\n```\n\n----------------------------------------\n\nTITLE: Updating useGridSelector Hook Signature\nDESCRIPTION: Breaking change showing the updated useGridSelector hook signature with new arguments parameter.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-const output = useGridSelector(apiRef, selector, equals)\n+const output = useGridSelector(apiRef, selector, arguments, equals)\n```\n\n----------------------------------------\n\nTITLE: Updating publicAPI.setItemExpansion() signature in MUI-X Tree View (JavaScript)\nDESCRIPTION: This code shows the modification of the 'setItemExpansion' method signature. It now accepts a single object parameter instead of separate parameters. The method can also toggle expansion when 'shouldBeExpanded' is not provided.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n const { publicAPI } = useTreeItemUtils();\n\n const handleExpandItem() {\n-  publicAPI.setItemExpansion(event, props.itemId, true)\n+  publicAPI.setItemExpansion({ event, itemId: props.itemId, shouldBeExpanded: true })\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Compatible Themes for MUI v4 and v5\nDESCRIPTION: Sets up separate but matching themes for Material UI v4 and v5 to ensure consistent styling across versions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMuiTheme as createThemeV4 } from '@material-ui/core/styles';\nimport { createTheme as createThemeV5 } from '@mui/material/styles';\n\nconst themeV4 = createThemeV4({\n  palette: {\n    primary: {\n      main: '#2196f3',\n    },\n  },\n});\n\nconst themeV5 = createThemeV5({\n  palette: {\n    primary: {\n      main: themeV4.palette.primary.main,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Row Selection on Click in MUI X Data Grid\nDESCRIPTION: Demonstrates how to disable row selection on click using the disableRowSelectionOnClick prop, useful when cells contain interactive content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-selection/row-selection.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DisableClickSelectionGrid.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Estimated Row Count in Data Grid\nDESCRIPTION: Example showing how to implement localized pagination display for estimated row counts in MUI Data Grid. This code demonstrates custom labelDisplayedRows implementation for Croatian language with estimated count support.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pagination/pagination.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst labelDisplayedRows = ({ from, to, count, estimated }) => {\n  if (!estimated) {\n    return `${from}–${to} od ${count !== -1 ? count : `više nego ${to}`}`;\n  }\n  const estimateLabel =\n    estimated && estimated > to ? `oko ${estimated}` : `više nego ${to}`;\n  return `${from}–${to} od ${count !== -1 ? count : estimateLabel}`;\n};\n\n<DataGrid\n  {...data}\n  localeText={{\n    MuiTablePagination: {\n      labelDisplayedRows,\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Removing useClearableField Hook for Custom Field Components\nDESCRIPTION: Migration example showing how to replace the removed useClearableField hook with the new clearable and onClear props in custom field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n-import { useClearableField } from '@mui/x-date-pickers-pro/hooks';\n\n function CustomField(props) {\n   const {\n     id,\n     label\n     value,\n+    clearable,\n+    onClear,\n   } = props;\n-  const processedFieldProps = useClearableField({\n-    ...fieldResponse,\n-    slots,\n-    slotProps,\n-  });\n+  {clearable && value && (\n+    <IconButton title=\"Clear\" tabIndex={-1} onClick={onClear}>\n+      <ClearIcon />\n+    </IconButton>\n+  )}\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Labels for Pie Charts in JavaScript\nDESCRIPTION: Example showing how to handle labels in MUI-X Pie charts, which differ from other chart types. Pie charts have labels per slice instead of per series, and can be displayed in legend, tooltip, or as arc labels.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/label/label.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"PieLabel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Restricted Leaf Reordering in React TreeView\nDESCRIPTION: Shows how to limit reordering to only leaf nodes using the isItemReorderable prop and getItemOrderedChildrenIds API method.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nOnlyReorderLeaves.js\n```\n\n----------------------------------------\n\nTITLE: Year Order Configuration in Date Picker\nDESCRIPTION: Shows how to configure ascending or descending order of years display\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nDatePickerYearsOrder.js\n```\n\n----------------------------------------\n\nTITLE: Updating dayOfWeekFormatter prop\nDESCRIPTION: Shows how to update the dayOfWeekFormatter prop to use date object instead of string argument for more flexibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <DateCalendar\n   // If you were still using the day string, you can get it back with your date library.\n-  dayOfWeekFormatter={dayStr => `${dayStr}.`}\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n\n   // If you were already using the day object, just remove the first argument.\n-  dayOfWeekFormatter={(_dayStr, day) => `${day.format('dd')}.`\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n />\n```\n\n----------------------------------------\n\nTITLE: Interactive Axis Customization in MUI X-Charts\nDESCRIPTION: Interactive demonstration of various axis customization options available in MUI X-Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"AxisCustomization.js\", \"hideToolbar\": true, \"bg\": \"playground\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating shortcuts slot isValid prop to useIsValidValue hook\nDESCRIPTION: Shows how to replace the isValid prop with the useIsValidValue hook in a shortcuts slot component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n+import { useIsValidValue } from '@mui/x-date-pickers/hooks';\n\n-const { isValid } = props;\n-const isTodayValid = isValid(dayjs());\n+const isValidValue = useIsValidValue();\n+const isTodayValid = isValidValue(dayjs());\n```\n\n----------------------------------------\n\nTITLE: Updating Axis Configuration in React for MUI X Charts v8\nDESCRIPTION: This diff demonstrates how to replace the rightAxis prop with the new position property in the axis configuration for MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n <LineChart\n   yAxis={[\n     {\n       scaleType: 'linear',\n+      position: 'right',\n     },\n   ]}\n   series={[{ data: [1, 10, 30, 50, 70, 90, 100], label: 'linear' }]}\n   height={400}\n-  rightAxis={{}}\n />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Autogenerated Rows in MUI X Data Grid (JavaScript)\nDESCRIPTION: An interactive example showing how autogenerated rows are handled in the Data Grid, with custom rendering for these special rows.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-definition/column-definition.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"AutogeneratedRows.js\", \"bg\": \"inline\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Domain Limits in MUI X-Charts\nDESCRIPTION: Example showing how to set custom domain limits for chart axes, illustrating the options for controlling the visible range of values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MinMaxExample.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating ValueFormatter Signature\nDESCRIPTION: Shows the changes in GridColDef's valueFormatter signature for better performance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-valueFormatter: ({ value }) => value,\n+valueFormatter: (value, row, column, apiRef) => value,\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Scatter Chart in MUI X Charts (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a basic scatter chart using MUI X Charts. It likely includes the setup for data points and chart configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/scatter-demo/scatter-demo.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Gauge Chart in React\nDESCRIPTION: Demonstrates how to create an accessible Gauge chart by adding appropriate ARIA attributes for labeling and value representation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/gauge/gauge.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<h3 id=\"battery_level_label\">\n  Battery level\n</h3>\n<Gauge\n  value={6}\n  valueMax={12}\n  aria-labelledby=\"battery_level_label\"\n  aria-valuetext=\"50% (6 hours) remaining\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Row Selection Manager Usage\nDESCRIPTION: Example of using the new createRowSelectionManager utility function for managing row selection\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst rowSelectionManager = createRowSelectionManager({\\n  type: 'include',\\n  ids: new Set(),\\n});\\nrowSelectionManager.select(rowId);\\nrowSelectionManager.unselect(rowId);\\nrowSelectionManager.has(rowId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Height Data Grid in React (Deprecated)\nDESCRIPTION: Demonstrates the deprecated autoHeight prop for the Data Grid. This prop allows the grid to adjust its size based on its content, making all rows visible simultaneously without scrolling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/layout/layout.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ height: 400, width: '100%' }}>\n  <DataGrid\n    rows={rows}\n    columns={columns}\n    autoHeight\n    initialState={{\n      pagination: {\n        paginationModel: {\n          pageSize: 5,\n        },\n      },\n    }}\n    pageSizeOptions={[5]}\n    checkboxSelection\n    disableRowSelectionOnClick\n  />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Translation Hook in Custom Components\nDESCRIPTION: Shows how to access translations in custom components using the usePickerTranslations hook.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n\nconst translations = usePickerTranslations();\n```\n\n----------------------------------------\n\nTITLE: Handling DataGrid Events with Event Listeners\nDESCRIPTION: Example of subscribing to DataGrid events using the useGridEvent hook for event handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseGridEvent(apiRef, 'cellKeyDown', handleCellKeyDown);\n```\n\n----------------------------------------\n\nTITLE: Customizing Cell Indent in Data Grid Premium\nDESCRIPTION: Demonstrates how to modify the default cell indent using CSS variables in the DataGridPremium component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium\n  sx={{\n    // default value is 2\n    '--DataGrid-cellOffsetMultiplier': 6,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Toolbar Button Props in React\nDESCRIPTION: This example demonstrates how to update the props for toolbar buttons in the Data Grid. The new version uses slotProps to customize button and tooltip properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nfunction CustomToolbar() {\n return (\n   <GridToolbarContainer>\n     <GridToolbarColumnsButton />\n     <GridToolbarFilterButton\n-       title=\"Custom filter\" // 🛑 This was previously forwarded to the tooltip component\n+       slotProps={{ tooltip: { title: 'Custom filter' } }} // ✅ This is the correct way now\n     />\n     <GridToolbarDensitySelector\n-       variant=\"outlined\"    // 🛑 This was previously forwarded to the button component\n+       slotProps={{ button: { variant: 'outlined' } }} // ✅ This is the correct way now\n     />\n   </GridToolbarContainer>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Stabilized experimentalFeatures in Data Grid\nDESCRIPTION: Codemod to remove feature flags for stabilized experimentalFeatures in MUI X Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPremium\n-  experimentalFeatures={{\n-    ariaV8: true,\n-  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Hook Implementation\nDESCRIPTION: Demonstrates the basic structure of a Tree View plugin hook with custom parameters.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ params }) => {\n  React.useEffect(() => {\n    console.log(params.customParam);\n  });\n\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Overlay Height for Data Grid in React\nDESCRIPTION: Shows how to customize the height of overlays (such as 'Loading' or 'No rows') in the Data Grid using CSS variables. This allows for better control of the grid's appearance when it has no content.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/layout/layout.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={{\n    height: 400,\n    width: '100%',\n    '& .MuiDataGrid-root': {\n      '--DataGrid-overlayHeight': '300px',\n    },\n  }}\n>\n  <DataGrid\n    rows={[]}\n    columns={columns}\n    initialState={{\n      pagination: {\n        paginationModel: {\n          pageSize: 5,\n        },\n      },\n    }}\n    pageSizeOptions={[5]}\n  />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing Print Grid Display with Custom Trigger\nDESCRIPTION: Demonstrates how to hide footer and toolbar components when printing the Data Grid, providing a cleaner output when using a custom export trigger.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom trigger:\n<ExportPrint options={{ hideFooter: true, hideToolbar: true }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Behavior for Filtered Results in MUI DataGrid\nDESCRIPTION: Shows how to customize the Show/Hide All checkbox behavior to only affect columns visible in current search results.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  slotProps={{\n    columnsManagement: {\n      toggleAllMode: 'filteredOnly',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Translation Key Change Example - Date Pickers\nDESCRIPTION: Shows how translation keys now accept formatted string values instead of utils and date objects for better localization support.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Before v8.x\nclockLabelText: (utils, date) => `Select time (${utils.format(date, 'h:mm')})`,\n\n// After v8.x \nclockLabelText: (formattedValue) => `Select time (${formattedValue})`\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Dependencies with Package Managers\nDESCRIPTION: Commands for installing MUI Material and its emotion dependencies using different package managers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Importing DatePicker Component in TypeScript\nDESCRIPTION: Different valid import methods for the DatePicker component from MUI X date pickers packages.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/base-concepts/base-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { DatePicker } from '@mui/x-date-pickers-pro';\n```\n\n----------------------------------------\n\nTITLE: Custom View Renderer Date Time Range Picker - React\nDESCRIPTION: Demonstrates how to customize view rendering in Date Time Range Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateTimeRangePickerViewRenderer.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Class Name Generator for MUI v4/v5 Compatibility\nDESCRIPTION: Creates a custom class name generator to disable global class names in JSS and avoid naming collisions between MUI versions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createGenerateClassName } from '@material-ui/core/styles';\n\nconst generateClassName = createGenerateClassName({\n  // By enabling this option, if you have non-MUI elements (for example `<div />`)\n  // using MUI classes (for example `.MuiButton`) they will lose styles.\n  // Make sure to convert them to use `styled()` or `<Box />` first.\n  disableGlobal: true,\n  // Class names will receive this seed to avoid name collisions.\n  seed: 'mui-jss',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Label Implementation for MUI-X Charts in JavaScript\nDESCRIPTION: Example showing how to set a basic label for series in MUI-X Charts. The label property is set as a string and will be visible in different locations like legends and tooltips.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/label/label.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"BasicLabel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Styling for Dynamic Row Height in TypeScript\nDESCRIPTION: This snippet shows how to update cell styling when using dynamic row height in the Data Grid. It demonstrates adding display: 'flex' and handling text overflow.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  display: 'flex',\n  renderCell: ({ value }) => (\n    <div style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n      {value}\n    </div>\n  ),\n},\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Multi-Select Tree View Controls\nDESCRIPTION: Table defining keyboard controls specifically for multi-select Tree View interactions, including complex selection patterns\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/accessibility/accessibility.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                                 Keys | Description                                                       |\n| -----------------------------------------------------------------------------------: | :---------------------------------------------------------------- |\n|                                                         <kbd class=\"key\">Space</kbd> | Toggles the selection state of the focused item.                  |\n|                         <kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Arrow Up</kbd> | Moves focus and toggles the selection state of the previous item. |\n|                       <kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Arrow Down</kbd> | Moves focus and toggles the selection state of the next item.     |\n| <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Home</kbd> | Selects the focused item and all items up to the first item.      |\n|  <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">End</kbd> | Selects the focused item and all the items down to the last item. |\n|                                 <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">A</kbd> | Selects all items.                                                |\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Time Range Field in React\nDESCRIPTION: Demonstrates the basic usage of SingleInputTimeRangeField and MultiInputTimeRangeField components for selecting a range of time.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-field/time-range-field.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicTimeRangeField.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Luxon Locale in LocalizationProvider\nDESCRIPTION: Shows how to configure locale with Luxon adapter in MUI X Date Pickers\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\n\n<LocalizationProvider dateAdapter={AdapterLuxon} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Creating Date with Specific Timezone in Day.js\nDESCRIPTION: Shows how to create a date in a specific timezone using Day.js.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dayjs } from 'dayjs';\n\nconst date = dayjs.tz('2022-04-17T15:30', 'America/New_York');\n```\n\n----------------------------------------\n\nTITLE: Renaming date prop to value\nDESCRIPTION: Updates the date prop name to value for consistency across components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-<MonthPicker date={dayjs()} />\n+<MonthCalendar value={dayjs()} />\n\n-<YearPicker date={dayjs()} />\n+<YearCalendar value={dayjs()} />\n\n-<ClockPicker date={dayjs()} />\n+<TimeClock value={dayjs()} />\n\n-<CalendarPicker date={dayjs()} />\n+<DateCalendar value={dayjs()} />\n```\n\n----------------------------------------\n\nTITLE: Updating Various Props in React Date Picker\nDESCRIPTION: Illustrates changes to multiple props including PopperProps, TransitionComponent, DialogProps, PaperProps, and TrapFocusProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  PopperProps={{ onClick: handleClick }}\n+  slotProps={{ popper: { onClick: handleClick } }}\n-  TransitionComponent={Fade}\n+  slots={{ desktopTransition: Fade }}\n-  DialogProps={{ backgroundColor: 'red' }}\n+  slotProps={{ dialog: { backgroundColor: 'red' }}}\n-  PaperProps={{ backgroundColor: 'red' }}\n+  slotProps={{ desktopPaper: { backgroundColor: 'red' } }}\n-  TrapFocusProps={{ isEnabled: () => false }}\n+  slotProps={{ desktopTrapFocus: { isEnabled: () => false } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Day Component in React Date Picker\nDESCRIPTION: Shows how to replace the renderDay prop with a day slot and handle the selectedDay prop in a custom day component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomDay({ selectedDay, ...other }) {\n  // do something with 'selectedDay'\n  return <PickersDay {...other} />;\n}\n\nfunction App() {\n  const [value, setValue] = React.useState(null);\n\n  return (\n    <DatePicker\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n      slots={{ day: CustomDay }}\n      slotProps={{\n        day: { selectedDay: value },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forwarded Props in Custom Field Component\nDESCRIPTION: This code shows how to retrieve forwarded props in a custom field component using the usePickerContext hook, and apply them to a TextField component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { label, name, rootClassName, rootSx, rootRef } = usePickerContext();\n\nreturn (\n  <TextField\n    label={label}\n    name={name}\n    className={rootClassName}\n    sx={rootSx}\n    ref={rootRef}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multiple Values 'Between' Operator in TypeScript\nDESCRIPTION: Shows how to create a custom 'Between' operator that accepts an array of two values and filters for numbers within that range. This example is applied to a 'Quantity' column.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst operator: GridFilterOperator<any, number> = {\n  label: 'Between',\n  value: 'between',\n  getApplyFilterFn: (filterItem) => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length !== 2) {\n      return null;\n    }\n    if (filterItem.value[0] == null || filterItem.value[1] == null) {\n      return null;\n    }\n    return (value) => {\n      return (\n        value != null && filterItem.value[0] <= value && value <= filterItem.value[1]\n      );\n    };\n  },\n  InputComponent: InputNumberInterval,\n};\n```\n\n----------------------------------------\n\nTITLE: Pinning Grouped Column in Data Grid\nDESCRIPTION: Shows how to pin a grouped column using GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD in MUI-X Data Grid, with the Company column being pinned.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-row-grouping/recipes-row-grouping.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRowGroupingPinning.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Views in React Date Time Picker\nDESCRIPTION: Shows how to customize the available views and their order in the Date Time Picker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-picker/date-time-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DateTimePickerViews.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to FilterPanelTrigger\nDESCRIPTION: Examples of applying static and dynamic CSS classes to components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FilterPanelTrigger className=\"text-blue-600 underline\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<FilterPanelTrigger\n  className={(state) => (state.open ? 'text-blue-600' : 'text-gray-900')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Default Event Prevention with New setOpen API\nDESCRIPTION: Example showing how to manually prevent default event behavior when using the new setOpen method instead of the previous onClose method that handled it automatically.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n   <div\n   onKeyDown={(event) => {\n     if (event.key === 'Escape') {\n-      pickerContext.onClose();\n+      event.preventDefault();\n+      pickerContext.setOpen(false);\n     }\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Column Management Props\nDESCRIPTION: Shows the migration path for column management component props from columnsPanel to the new columnsManagement slot.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n  slotProps={{\n-   columnsPanel: {\n+   columnsManagement: {\n      sort: 'asc',\n      autoFocusSearchField: false,\n    },\n  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Fallback to Non-Accessible DOM Structure in Date Components\nDESCRIPTION: Use the enableAccessibleFieldDOMStructure prop set to false to fallback to the old, non-accessible DOM structure for date components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField enableAccessibleFieldDOMStructure={false} />\n<DatePicker enableAccessibleFieldDOMStructure={false} />\n<DateRangePicker enableAccessibleFieldDOMStructure={false} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Children Using TypeScript\nDESCRIPTION: Example showing how to get row IDs for a specific group using the API reference methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst rows: GridRowId[] = apiRef.current.getRowGroupChildren({\n  groupId: params.id,\n\n  // If true, the rows will be in the order displayed on screen\n  applySorting: true,\n\n  // If true, only the rows matching the current filters will be returned\n  applyFiltering: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Date Time Range Picker - React\nDESCRIPTION: Shows implementation of controlled and uncontrolled value handling in Date Time Range Picker referenced in DateTimeRangePickerValue.js\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateTimeRangePickerValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Components Theme\nDESCRIPTION: Configuration example for customizing Input components and their Pickers counterparts in the theme.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n    MuiPickersInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Theme Configuration\nDESCRIPTION: The Data Grid theming configuration has changed. The background color customization has moved from theme.mixins.MuiDataGrid to theme.palette.DataGrid with new property names.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = createTheme({\n-  mixins: {\n-    MuiDataGrid: {\n-      containerBackground: '#f8fafc',\n-      pinnedBackground: '#f1f5f9',\n-    },\n-  },\n+  palette: {\n+    DataGrid: {\n+      bg: '#f8fafc',\n+      headerBg: '#e2e8f0',\n+      pinnedBg: '#f1f5f9',\n+    },\n+  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeView ApiRef in TypeScript/React\nDESCRIPTION: Shows how to initialize and use the apiRef object with the useTreeViewApiRef hook for Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/expansion/expansion.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\n----------------------------------------\n\nTITLE: Applying Print-Specific Styling with Media Queries\nDESCRIPTION: Demonstrates how to use media queries to apply specific styles to the Data Grid when it's being printed, ensuring appropriate appearance in the printed output.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  sx={{\n    '@media print': {\n      '.MuiDataGrid-main': { color: 'rgba(0, 0, 0, 0.87)' },\n    },\n  }}\n  {/* ... */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Imperative API with Simple Tree View in React\nDESCRIPTION: This code demonstrates how to initialize and use the apiRef object with SimpleTreeView using the useTreeViewApiRef hook.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/items/items.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\n----------------------------------------\n\nTITLE: Replacing DataGrid show/hide buttons prop in React\nDESCRIPTION: Demonstrates how to replace the separate show all and hide all button props with a single toggle prop in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n-  disableShowAllButton\n-  disableHideAllButton\n+  disableShowHideToggle\n />\n```\n\n----------------------------------------\n\nTITLE: Using Column MaxWidth Property in GridColDef\nDESCRIPTION: Example showing how to use the maxWidth property in GridColDef to limit the width of flexible and resizable columns within the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns: GridColDef[] = [\n  { field: 'director', flex: 1, maxWidth: 200 }, // will take the free space up to 200px and will not be resizable above 200px\n  { field: 'year', maxWidth: 150 }, // will not be resizable above 150px\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Row Event Handler Props\nDESCRIPTION: Shows the migration path for deprecated row event handlers to the new component props approach.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid onRowOver={handleRowOver} />;\n+<DataGrid\n+  componentsProps={{\n+    row: { onMouseOver: handleRowOver },\n+  }}\n+/>;\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeView API Reference in React\nDESCRIPTION: Example showing how to initialize and use the TreeView API reference using the useTreeViewApiRef hook.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/selection/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\n----------------------------------------\n\nTITLE: Updating getApplyQuickFilterFn Signature in JavaScript\nDESCRIPTION: This code demonstrates the changes in the signature of the function returned by getApplyQuickFilterFn. The function now receives individual parameters and uses apiRef to get formatted values for performance optimization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nconst getGridStringQuickFilterFn: GetApplyQuickFilterFn<any, unknown> = (value) => {\n  if (!value) {\n    return null;\n  }\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n-  return (cellParams) => {\n-    const { formattedValue } = cellParams;\n+  return (value, row, column, apiRef) => {\n+    let formattedValue = apiRef.current.getRowFormattedValue(row, column);\n    return formattedValue != null ? filterRegex.test(formattedValue.toString()) : false;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin Parameters Definition\nDESCRIPTION: Shows how to define default parameters for a Tree View plugin.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseCustomPlugin.params = {\n  customParam: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimePicker with Moment UTC\nDESCRIPTION: Shows how to use Moment.js with MUI X DateTimePicker component while using UTC dates.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport moment from 'moment';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment}>\n      <DateTimePicker defaultValue={moment.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeView API Reference - TypeScript\nDESCRIPTION: Example showing how to initialize and use the TreeView apiRef object with the useTreeViewApiRef hook for imperative control.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/expansion/expansion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to Rich Tree View Items\nDESCRIPTION: This snippet illustrates how to use treeItemClasses to target and style internal elements of the Tree Item component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/customization/customization.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"CustomStyling.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Charts Package with npm\nDESCRIPTION: Command to install the MUI X Charts package in your project directory using npm.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-charts\n```\n\n----------------------------------------\n\nTITLE: Migrating actionBar slot props to usePickerActionsContext hook\nDESCRIPTION: Shows how to replace onClear, onSetToday, onAccept, and onCancel props with the usePickerActionsContext hook in an actionBar slot component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerActionsContext } from '@mui/x-date-pickers/hooks';\n\n-const { onClear } = props;\n+const { clearValue } = usePickerActionsContext();\n\n-const { onSetToday } = props;\n+const { setValueToToday } = usePickerActionsContext();\n\n-const { onAccept } = props;\n+const { acceptValueChanges } = usePickerActionsContext();\n\n-const { onCancel } = props;\n+const { cancelValueChanges } = usePickerActionsContext();\n```\n\n----------------------------------------\n\nTITLE: Updating getApplyFilterFn Signature in JavaScript\nDESCRIPTION: This snippet shows the changes in the signature of the function returned by getApplyFilterFn. The function now receives individual parameters instead of a cellParams object for performance reasons.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nconst getApplyFilterFn: GetApplyFilterFn<any, unknown> = (filterItem) => {\n  if (!filterItem.value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(filterItem.value), 'i');\n-  return (cellParams) => {\n-    const { value } = cellParams;\n+  return (value, row, colDef, apiRef) => {\n    return value != null ? filterRegex.test(String(value)) : false;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Item Selection Toggle Event\nDESCRIPTION: Example of using the new onItemSelectionToggle prop for handling individual item selection events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<SimpleTreeView\n  onItemSelectionToggle={(event, itemId, isSelected) =>\n    console.log(itemId, isSelected)\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Position Change Handler in React TreeView\nDESCRIPTION: Demonstrates how to handle item position changes using the onItemPositionChange callback prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nOnItemPositionChange.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Pagination Translation in Data Grid\nDESCRIPTION: Example showing how to customize the table pagination translation using the localeText prop with MuiTablePagination component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/localization/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  {...data}\n  localeText={{\n    MuiTablePagination: {\n      labelDisplayedRows: ({ from, to, count }) =>\n        `${from} - ${to} of ${count === -1 ? `more than ${to}` : count}`,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: DataGrid CSV Export\nDESCRIPTION: Implementation of CSV export functionality through GridToolbarExport component or apiRef methods exportDataAsCsv/getDataAsCsv.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\napiRef.current.exportDataAsCsv()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Opening Icon in Date Picker\nDESCRIPTION: Example of using the openPickerIcon slot to customize the icon that opens the date picker without changing its behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-opening-button/custom-opening-button.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker onOpen={handleOpen} onClose={handleClose} />\n```\n\n----------------------------------------\n\nTITLE: Replacing BaseSingleInputFieldProps for Custom DateTime Field\nDESCRIPTION: Simplified replacement for BaseSingleInputFieldProps when building a custom date-time field. The complex type combination is replaced with the more straightforward DateTimePickerFieldProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n-import {\n-  BaseSingleInputFieldProps,\n-  DateTimeValidationError,\n-  FieldSection,\n-} from '@mui/x-date-pickers/models';\n-import { UseDateTimeFieldProps } from '@mui/x-date-pickers/DateTimeField';\n+import { DateTimePickerFieldProps } from '@mui/x-date-pickers/DateTimePicker';\n\n-interface CustomDateTimeFieldProps\n-  extends UseDateTimeFieldProps<Dayjs, true>,\n-    BaseSingleInputFieldProps<\n-      Dayjs | null,\n-      Dayjs,\n-      FieldSection,\n-      true,\n-      DateTimeValidationError\n-    > {}\n+interface CustomDateTimeFieldProps extends DateTimePickerFieldProps {}\n```\n\n----------------------------------------\n\nTITLE: Renaming InputFormat Prop in MUI X Pickers\nDESCRIPTION: Migration codemod to replace the deprecated inputFormat prop with format in Picker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n-  inputFormat=\"YYYY\"\n+  format=\"YYYY\"\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-inputFormat-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Simple Tree View Components in React\nDESCRIPTION: This snippet shows how to import the SimpleTreeView and TreeItem components from the @mui/x-tree-view package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/items/items.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\nimport { TreeItem } from '@mui/x-tree-view/TreeItem';\n```\n\n----------------------------------------\n\nTITLE: Updating ValueGetter Signature\nDESCRIPTION: Demonstrates the changes in GridColDef's valueGetter signature for improved performance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-valueGetter: ({ value, row }) => value,\n+valueGetter: (value, row, column, apiRef) => value,\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies\nDESCRIPTION: Shows how to update the Date Pickers package versions in package.json\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-date-pickers\": \"^6.0.0\",\n+\"@mui/x-date-pickers\": \"^7.0.0\",\n\n-\"@mui/x-date-pickers-pro\": \"^6.0.0\",\n+\"@mui/x-date-pickers-pro\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Replacing BaseSingleInputFieldProps for Custom Time Field\nDESCRIPTION: Simplified replacement for BaseSingleInputFieldProps when building a custom time field. The complex type combination is replaced with the more straightforward TimePickerFieldProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n-import {\n-  BaseSingleInputFieldProps,\n-  TimeValidationError,\n-  FieldSection,\n-} from '@mui/x-date-pickers/models';\n-import { UseTimeFieldProps } from '@mui/x-date-pickers/TimeField';\n+import { TimePickerFieldProps } from '@mui/x-date-pickers/TimePicker';\n\n-interface CustomTimeFieldProps\n- extends UseTimeFieldProps<Dayjs, true>,\n- BaseSingleInputFieldProps<\n-      Dayjs | null,\n-      Dayjs,\n-      FieldSection,\n-      true,\n-      TimeValidationError\n- > {}\n+interface CustomTimeFieldProps extends TimePickerFieldProps {}\n```\n\n----------------------------------------\n\nTITLE: Migrating shortcuts slot isLandscape prop to usePickerContext hook\nDESCRIPTION: Shows how to replace the isLandscape prop with the orientation from usePickerContext hook in a shortcuts slot component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { isLandscape } = props;\n+const { orientation } = usePickerContext();\n+const isLandscape = orientation === 'landscape';\n```\n\n----------------------------------------\n\nTITLE: Updating Legend Props in PieChart Component\nDESCRIPTION: Change the way legend props are passed to the PieChart component using slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-<PieChart legend={{ ... }} />\n+<PieChart slotProps={{ legend: { ... } }} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Pinning Feature\nDESCRIPTION: Example of how to disable the column pinning feature entirely for the DataGridPro component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-pinning/column-pinning.md#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<DataGridPro disableColumnPinning />\n```\n\n----------------------------------------\n\nTITLE: Migrating Action Props to usePickerActionsContext\nDESCRIPTION: Shows how to migrate from action props like onClear, onSetToday, onAccept, etc. to using the appropriate methods from usePickerActionsContext.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerActionsContext } from '@mui/x-date-pickers/hooks';\n\n-const { onClear } = props;\n+const { clearValue } = usePickerActionsContext();\n\n-const { onSetToday } = props;\n+const { setValueToToday } = usePickerActionsContext();\n\n-const { onAccept } = props;\n+const { acceptValueChanges } = usePickerActionsContext();\n\n-const { onCancel } = props;\n+const { cancelValueChanges } = usePickerActionsContext();\n\n-const { onOpen } = props;\n+const { setOpen } = usePickerActionsContext();\n+const onOpen = event => {\n+  event.preventDefault();\n+  setOpen(true);\n+}\n\n-const { onClose } = props;\n+const { setOpen } = usePickerActionsContext();\n+const onClose = event => {\n+  event.preventDefault();\n+  setOpen(false);\n+}\n\n // This contains a small behavior change.\n // If the picker is not controlled and has a default value,\n // opening it and calling `acceptValueChanges` without any change calls `onAccept`\n // with the default value.\n // Whereas before, opening it and calling `onDimiss` without any change\n // did not call `onAccept`.\n-const { onDismiss } = props;\n+const { acceptValueChanges } = usePickerActionsContext();\n+const onDismiss = acceptValueChanges\n\n-const { onChange } = props;\n-onChange(dayjs(), 'partial');\n-onChange(dayjs(), 'finish');\n+const { setValue } = usePickerActionsContext();\n+setValue(dayjs(), { changeImportance: 'set' });\n+setValue(dayjs(), { changeImportance: 'accept' });\n\n-const { onSelectShortcut } = props;\n-onSelectShortcut(dayjs(), 'accept', myShortcut);\n+const { setValue } = usePickerActionsContext();\n+setValue(dayjs(), { changeImportance: 'accept', shortcut: myShortcut });\n```\n\n----------------------------------------\n\nTITLE: Initializing apiRef for Rich Tree View in React\nDESCRIPTION: This snippet demonstrates how to initialize the apiRef object using the useTreeViewApiRef hook and pass it to the RichTreeView component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/focus/focus.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid toolbar button props in React\nDESCRIPTION: Demonstrates how to update props for DataGrid toolbar buttons, which are now wrapped with tooltips and have a consistent interface.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n    <GridToolbarColumnsButton />\n    <GridToolbarFilterButton\n-     title=\"Custom filter\" // 🛑 This was previously forwarded to the tooltip component\n+     slotProps={{ tooltip: { title: 'Custom filter' } }} // ✅ This is the correct way now\n    />\n    <GridToolbarDensitySelector\n-     variant=\"outlined\"    // 🛑 This was previously forwarded to the button component\n+     slotProps={{ button: { variant: 'outlined' } }} // ✅ This is the correct way now\n    />\n    </GridToolbarContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Range Picker Components\nDESCRIPTION: Shows migration from Range Picker components to Field components for date/time ranges\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-<DateRangePicker disableOpenPicker>\n+<SingleInputDateRangeField> // If you want a single input for both dates.\n+<MultiInputDateRangeField> // If you want one input for each date.\n\n-<TimeRangePicker disableOpenPicker>\n+<SingleInputTimeRangeField> // If you want a single input for both dates.\n+<MultiInputTimeRangeField> // If you want one input for each date.\n\n-<DateTimeRangePicker disableOpenPicker>\n+<SingleInputDateTimeRangeField> // If you want a single input for both dates.\n+<MultiInputDateTimeRangeField> // If you want one input for each date.\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker TextField Props\nDESCRIPTION: Examples showing how to pass props to DatePicker's TextField component through slotProps, both with and without accessible field DOM structure.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<DatePicker\n  slotProps={{ textField: { size: 'small' } }}\n  enableAccessibleFieldDOMStructure={false}\n/>\n<DatePicker\n  slotProps={{ textField: { size: 'small' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Typing Grid Event Listeners\nDESCRIPTION: Example of type-safe event handling in Data Grid using TypeScript, showing how to create and subscribe to properly typed event handlers for specific grid events.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst handleRowClick: GridEventListener<'rowClick'> = (\n  params, // has type `GridRowParams`\n  event, // has type `MuiEvent<React.MouseEvent<HTMLElement>>\n  details, // has type `GridCallbackDetails\n) => {\n  /* ... */\n};\n\n// with string event name\napiRef.current.subscribeEvent('rowClick', handleRowClick);\nuseGridApiEventHandler(apiRef, 'rowClick', handleRowClick);\n\n// or with enum event name\napiRef.current.subscribeEvent(GridEvents.rowClick, handleRowClick);\nuseGridApiEventHandler(apiRef, GridEvents.rowClick, handleRowClick);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating setItemSelection API in React Tree View\nDESCRIPTION: Shows an example of using the setItemSelection API method in a Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ApiMethodSetItemSelection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Component Translations\nDESCRIPTION: Demonstrates how to set translations for a specific DatePicker component instance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/localization/localization.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker localeText={{ clearButtonLabel: 'Empty' }} />\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods\nDESCRIPTION: Commands to run the automated codemods for migrating to v8\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Data Grid specific\\nnpx @mui/x-codemod@latest v8.0.0/data-grid/preset-safe <path>\\n\\n# Target the other packages as well\\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Creating Timezone-Specific Dates with Moment\nDESCRIPTION: Shows how to create dates in specific timezones using Moment.js timezone functionality.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport moment from 'moment-timezone';\n\nconst date = moment.tz('2022-04-17T15:30', 'America/New_York');\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Management Footer Actions in MUI DataGrid\nDESCRIPTION: Shows how to disable Show/Hide All checkbox and Reset button in the columns management component footer.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-visibility/column-visibility.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  showToolbar\n  slotProps={{\n    columnsManagement: {\n      disableShowHideToggle: true,\n      disableResetButton: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleTreeView with apiRef in React TSX\nDESCRIPTION: Demonstrates how to initialize the apiRef object using the useTreeViewApiRef hook and pass it to the SimpleTreeView component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/focus/focus.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\n----------------------------------------\n\nTITLE: Direct Locale Text Implementation\nDESCRIPTION: Shows how to directly apply locale translations to DataGrid without using ThemeProvider.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/localization/localization.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DataGrid } from '@mui/x-data-grid';\nimport { nlNL } from '@mui/x-data-grid/locales';\n\n<DataGrid localeText={nlNL.components.MuiDataGrid.defaultProps.localeText} />;\n```\n\n----------------------------------------\n\nTITLE: Disabling Pivoting for DataGridPremium\nDESCRIPTION: Example showing how to completely disable the pivoting feature in DataGridPremium component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium disablePivoting />\n```\n\n----------------------------------------\n\nTITLE: Data Grid ValueGetter Signature Change\nDESCRIPTION: Breaking change in GridColDef valueGetter method signature for performance optimization\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n- valueGetter: ({ value, row }) => value,\n+ valueGetter: (value, row, column, apiRef) => value,\n```\n\n----------------------------------------\n\nTITLE: Updating Action Bar Props in React Date Picker\nDESCRIPTION: Demonstrates how to update the action prop to use a callback function in the slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  componentsProps={{\n-     actionBar: {\n-       actions: (variant) => (variant === 'desktop' ? [] : ['clear']),\n-     },\n-  }}\n+  slotProps={{\n+     actionBar: ({ wrapperVariant }) => ({\n+       actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n+     }),\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Get Item Children API Method\nDESCRIPTION: Shows how to retrieve an item's children using its ID through the API reference.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst childrenIds = apiRef.current.getItemOrderedChildrenIds(\n  // The id of the item to retrieve the children from\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Item Label Implementation\nDESCRIPTION: Demonstrates how to use getItemLabel prop to specify custom label property for tree view items.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst ITEMS = [{ name: '@mui/x-tree-view' }];\n\nfunction getItemLabel(item) {\n  return item.name;\n}\n\n<RichTreeView items={ITEMS} getItemLabel={getItemLabel} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Stable Columns Outside Component in React\nDESCRIPTION: Demonstrates how to define Data Grid columns outside the component to maintain a stable reference and avoid re-renders.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/performance/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [\n  { field: 'id' },\n  { field: 'firstName' },\n  { field: 'lastName' },\n  { field: 'age' },\n  { field: 'fullName' },\n];\n\nfunction App() {\n  return <DataGrid columns={columns} {...other} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods\nDESCRIPTION: Commands for running migration codemods to automatically update code for v7\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v7.0.0/pickers/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Date Time Picker Input Validation Behavior\nDESCRIPTION: Demonstrates how validation feedback appears on input fields when invalid values are entered.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/validation/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 10 && value.date() % 3 === 0}>\n```\n\n----------------------------------------\n\nTITLE: Form Properties for Digital Clock in React\nDESCRIPTION: Illustrates how to use form properties like disabled and read-only with the Digital Clock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockFormProps.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Multi Input Date Range Field Props\nDESCRIPTION: Migration example for updating custom multi input field implementation for Date Range Picker using simplified DateRangePickerFieldProps interface with specific omissions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n-import {\n-  DateRangeValidationError,\n-  RangeFieldSection,\n-  DateRange,\n-} from '@mui/x-date-pickers-pro/models';\n-import {\n-  UseMultiInputDateRangeFieldProps\n-} from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n+import { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n-interface CustomDateRangeFieldProps\n-  extends UseMultiInputDateRangeFieldProps<Dayjs, true>,\n-    BaseMultiInputFieldProps<\n-      DateRange<Dayjs>,\n-      Dayjs,\n-      RangeFieldSection,\n-      true,\n-      DateRangeValidationError\n-    > {}\n+interface CustomDateRangeFieldProps\n+  extends Omit<\n+     DateRangePickerFieldProps,\n+    'unstableFieldRef' | 'clearable' | 'onClear'\n+  >,\n+  MultiInputFieldRefs {}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Class Names for MUI Picker Components\nDESCRIPTION: CSS class name changes for picker components, replacing Private prefix with Mui prefix for root classes\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-.PrivatePickersMonth-root {\n+.MuiPickersMonth-root {\n\n-.PrivatePickersSlideTransition-root {\n+.MuiPickersSlideTransition-root {\n\n-.PrivatePickersToolbarText-root {\n+.MuiPickersToolbarText-root {\n\n-.PrivatePickersYear-root {\n+.MuiPickersYear-root {\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handler Props\nDESCRIPTION: Changes to event handling props to use the new API\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-<SimpleTreeView>\n-  <TreeItem onClick={handleItemClick}>\n+<SimpleTreeView onItemClick={handleItemClick}>\n+  <TreeItem>\n </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Updating Input Rendering\nDESCRIPTION: Replaces renderInput prop with input component slot props for customization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n   <DatePicker\n-  renderInput={(inputProps) => <TextField {...props} variant=\"outlined\" />}\n+  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n\n   <DateRangePicker\n-  renderInput={(startProps, endProps) => (\n-    <React.Fragment>\n-      <TextField {...startProps} variant=\"outlined\" />\n-      <Box sx={{ mx: 2 }}> - </Box>\n-      <TextField {...endProps} variant=\"outlined\" />\n-    </React.Fragment>\n-  )}\n+  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n```\n\n----------------------------------------\n\nTITLE: Replacing UseDateFieldComponentProps Type in TypeScript\nDESCRIPTION: Definition for UseDateFieldComponentProps type that combines component props with DateField specific props. This type is a generic that works with any valid date type and accessibility settings.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseDateFieldProps } from '@mui/x-date-pickers/DateField';\nimport { PickerValidDate } from '@mui/x-date-pickers/models';\n\ntype UseDateFieldComponentProps<\n  TDate extends PickerValidDate,\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  keyof UseDateFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n> &\n  UseDateFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n```\n\n----------------------------------------\n\nTITLE: Updating monthAndYear format configuration\nDESCRIPTION: Shows how to replace the deprecated monthAndYear format with the new calendarHeader slot props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <LocalizationProvider\n   adapter={AdapterDayJS}\n-  formats={{ monthAndYear: 'MM/YYYY' }}\n />\n   <DatePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n   <DateRangePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n <LocalizationProvider />\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for SparkLineChart Colors Prop Update\nDESCRIPTION: This bash command runs the codemod to automatically update the colors prop to color in SparkLineChart components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/charts/rename-sparkline-colors-to-color <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Component in React Date Picker\nDESCRIPTION: Shows how to replace the PaperContent component with a custom Layout component using the new API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePickerLayout } from '@mui/x-date-pickers/PickersLayout';\n\nfunction MyCustomLayout(props) {\n  const { toolbar, tabs, content, actionBar } = usePickerLayout(props);\n\n  return (\n    <React.Fragment>\n      {toolbar}\n      {tabs}\n      {content}\n      {actionBar}\n      <div>Custom component</div>\n    </React.Fragment>\n  );\n}\n\nfunction App() {\n  return (\n    <DatePicker\n      slots={{\n        layout: MyCustomLayout,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MUI X License Key in Next.js App Router\nDESCRIPTION: This code snippet shows how to set the MUI X license key in a Next.js application using the App Router, by creating a dummy component and rendering it in the layout.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n\nexport default function MuiXLicense() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale in LocalizationProvider\nDESCRIPTION: Shows how to set up a custom locale with DayJS adapter in MUI X Date Pickers using LocalizationProvider\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport 'dayjs/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring LocalizationProvider with Date Adapter\nDESCRIPTION: Example of setting up the LocalizationProvider component with different date adapters for various supported date libraries.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers-pro/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalizationProvider } from '@mui/x-date-pickers-pro';\n// date-fns\nimport { AdapterDateFns } from '@mui/x-date-pickers-pro/AdapterDateFns';\n// or for dayjs\nimport { AdapterDayjs } from '@mui/x-date-pickers-pro/AdapterDayjs';\n// or for luxon\nimport { AdapterLuxon } from '@mui/x-date-pickers-pro/AdapterLuxon';\n// or for moment\nimport { AdapterMoment } from '@mui/x-date-pickers-pro/AdapterMoment';\n\nfunction App({ children }) {\n  return <LocalizationProvider dateAdapter={AdapterDateFns}>{children}</LocalizationProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating locale import in MUI X Date Pickers React\nDESCRIPTION: Demonstrates how to update the import statement for locales in MUI X Date Pickers, as they are no longer exported from the root.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n-import { frFR } from '@mui/x-date-pickers';\n+import { frFR } from '@mui/x-date-pickers/locales';\n```\n\n----------------------------------------\n\nTITLE: Updating inputAdornment Position in DatePicker\nDESCRIPTION: Shows how to migrate from using the inputAdornment.position prop to the new openPickerButtonPosition prop in the field slotProps to control the position of the opening button.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n   slotProps={{\n-    inputAdornment: { position: 'start' },\n+    field: { openPickerButtonPosition: 'start' },\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Focusing a Specific Item in Tree View using TypeScript\nDESCRIPTION: Shows how to use the focusItem API method to focus a specific item in the Tree View. It requires the DOM event that triggered the change and the ID of the item to focus.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/focus/focus.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\napiRef.current.focusItem(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to focus\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Tiny Bar Chart with MUI X in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a small, compact bar chart using the MUI X Charts library. It likely includes minimal data and styling for a simple visualization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Running Codemods for MUI X Charts v8 Migration\nDESCRIPTION: Execute the preset-safe codemod to automatically adjust code for breaking changes in v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Charts-specific\nnpx @mui/x-codemod@latest v8.0.0/charts/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Getting Item DOM Element by ID in Simple Tree View\nDESCRIPTION: This snippet shows how to use the getItemDOMElement() API method to retrieve an item's DOM element by its ID in the Simple Tree View.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/items/items.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Plugin Signature Type Definition\nDESCRIPTION: Shows how to define TypeScript types for plugin signatures including params, instance methods, and events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype UseCustomPluginSignature = TreeViewPluginSignature<{\n  params: UseCustomPluginParams;\n  defaultizedParams: UseCustomPluginDefaultizedParams;\n  instance: UseCustomPluginInstance;\n  events: UseCustomPluginEvents;\n  state: UseCustomPluginState;\n  dependencies: UseCustomPluginDependantPlugins;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Migrating view, views, and onViewChange Props\nDESCRIPTION: Shows how to access view, views, and handle view changes using the usePickerContext hook instead of receiving them as props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { view } = props;\n+const { view } = usePickerContext();\n\n-const { views } = props;\n+const { views } = usePickerContext();\n\n-const { onViewChange } = props;\n-onViewChange('month');\n+const { setView } = usePickerContext();\n+setView('month');\n```\n\n----------------------------------------\n\nTITLE: Defining Pivot Model Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the pivot model configuration object that defines rows, columns and values for the pivot grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridPivotModel {\n  rows: Array<{\n    field: string;\n    hidden?: boolean;\n  }>;\n  columns: Array<{\n    field: string;\n    sort?: 'asc' | 'desc';\n    hidden?: boolean;\n  }>;\n  values: Array<{\n    field: string;\n    aggFunc: string;\n    hidden?: boolean;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TreeView setItemExpansion Method Signature\nDESCRIPTION: Breaking change showing the modification of setItemExpansion method to accept a single object parameter instead of individual arguments for event, itemId and expansion state.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nconst { publicAPI } = useTreeItemUtils();\n\nconst handleExpandItem() {\n-  publicAPI.setItemExpansion(event, props.itemId, true)\n+  publicAPI.setItemExpansion({ event, itemId: props.itemId, shouldBeExpanded: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Default Calendar Month Transformation\nDESCRIPTION: Updates DateCalendar by replacing the 'defaultCalendarMonth' prop with 'referenceDate' for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n-<DateCalendar defaultCalendarMonth={dayjs('2022-04-01')};\n+<DateCalendar referenceDate{dayjs('2022-04-01')} />\n```\n\n----------------------------------------\n\nTITLE: Migrating Toolbar Title in React Date Picker\nDESCRIPTION: Shows how to move the toolbarTitle prop to the localeText prop and updates the translation key names for various pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  toolbarTitle=\"Title\"\n+  localeText={{ toolbarTitle: 'Title' }}\n/>\n\n<LocalizationProvider\n  localeText={{\n-    datePickerDefaultToolbarTitle: 'Date Picker',\n+    datePickerToolbarTitle: 'Date Picker',\n-    timePickerDefaultToolbarTitle: 'Time Picker',\n+    timePickerToolbarTitle: 'Time Picker',\n-    dateTimePickerDefaultToolbarTitle: 'Date Time Picker',\n+    dateTimePickerToolbarTitle: 'Date Time Picker',\n-    dateRangePickerDefaultToolbarTitle: 'Date Range Picker',\n+    dateRangePickerToolbarTitle: 'Date Range Picker',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Filtering for Specific Columns in React Data Grid\nDESCRIPTION: Example of how to disable filtering for a specific column by setting the filterable property to false in the column definition. In this case, the rating column cannot be filtered.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/index.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<DataGrid columns={[...columns, { field: 'rating', filterable: false }]} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tree Items with Headless API in Rich Tree View\nDESCRIPTION: This code demonstrates how to use the useTreeItem hook to create a custom Tree Item component with an avatar and custom typography elements.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/customization/customization.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"HeadlessAPI.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Field Component Implementation\nDESCRIPTION: Shows changes required in custom field components to handle picker context and props\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n import { unstable_useDateField } from '@mui/x-date-pickers/DateField';\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n function CustomField(props) {\n+  const pickerContext = usePickerContext();\n\n   return (\n    <TextField\n      {...customProps}\n-      InputProps={props.InputProps}\n+      InputProps={{\n+        ref: pickerContext.triggerRef,\n+        endAdornment: (\n+          <InputAdornment position=\"end\">\n+            <IconButton\n+              onClick={() => pickerContext.setOpen((prev) => !prev)}\n+              edge=\"end\"\n+              aria-label={fieldResponse.openPickerAriaLabel}\n+            >\n+              <CalendarIcon />\n+            </IconButton>\n+          </InputAdornment>\n+        ),\n+      }}\n    />\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Date with Day.js\nDESCRIPTION: Demonstrates how to create a UTC date using Day.js.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst date = dayjs.utc('2022-04-17T15:30');\n```\n\n----------------------------------------\n\nTITLE: Event Publishing Implementation\nDESCRIPTION: Demonstrates how to emit events from a plugin for other plugins to consume.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ store }) => {\n  const toggleCustomModel = () => {\n    const newValue = !selectorCustomModel(store.value);\n    store.update((prevState) => ({\n      ...prevState,\n      customModel: newValue,\n    }));\n    publishTreeViewEvent(instance, 'toggleCustomModel', { value: newValue });\n  };\n\n  return {\n    instance: {\n      toggleCustomModel,\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Running MUI X Migration Codemod\nDESCRIPTION: Command to run the codemod for migrating date picker imports from @mui/lab to MUI X packages.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v5.0.0/date-pickers-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Function Signature Interface for Column Spanning\nDESCRIPTION: The TypeScript interface showing the function signature for colSpan which allows spanning only specific cells in a column based on the GridCellParams input.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-spanning/column-spanning.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridColDef {\n  colSpan?: (params: GridCellParams<R, V, F>) => number | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputDateRangeFieldProps Interface in TypeScript\nDESCRIPTION: Interface definition for UseMultiInputDateRangeFieldProps that combines DateRangeManagerFieldInternalProps with MultiInputFieldRefs. Used for multi-input date range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ninterface UseMultiInputDateRangeFieldProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n> extends DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n    MultiInputFieldRefs {}\n```\n\n----------------------------------------\n\nTITLE: Removing Stabilized Experimental Features in MUI X Data Grid v6.0.0\nDESCRIPTION: This code snippet shows how to remove feature flags for stabilized experimentalFeatures in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n-  experimentalFeatures={{\n-    newEditingApi: true,\n-  }}\n />\n```\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n  experimentalFeatures={{\n-   newEditingApi: true,\n    columnGrouping: true,\n  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating DatePicker closeOnSelect Prop\nDESCRIPTION: Example of updating the DatePicker component to use the new closeOnSelect prop instead of disableCloseOnSelect.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n // If you don't want to close after the last step\n-<DatePicker disableCloseOnSelect={false} />\n+<DatePicker closeOnSelect />\n\n // If you want to close after the last step\n-<DatePicker disableCloseOnSelect />\n+<DatePicker closeOnSelect={false} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Sorting Label per Column in Data Grid\nDESCRIPTION: Enables customization of the sorting label for individual columns in the Data Grid. This allows for more specific sorting descriptions per column.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n[l10n] Allow to customize sorting label per column (#10839) @JerryWu1234\n```\n\n----------------------------------------\n\nTITLE: Disabling Filter Action Buttons in MUI X Data Grid Pro\nDESCRIPTION: Demonstrates how to disable 'Add filter' or 'Remove all' buttons in the filter panel using the disableAddFilterButton and disableRemoveAllButton props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/multi-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"DisableActionButtonsDataGridPro.js\"\n```\n\n----------------------------------------\n\nTITLE: Field Validation Hook Implementation\nDESCRIPTION: Example demonstrating the usage of useValidation hook for validating picker field values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useValidation, validateDate } from '@mui/x-date-pickers/validation';\n\nconst {\n  validationError,\n  hasValidationError,\n  getValidationErrorForNewValue,\n} = useValidation({\n  value,\n  timezone,\n  props,\n  validator: validateDate,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled Mobile Date Picker\nDESCRIPTION: Implementation of a controlled MobileDatePicker with value and onChange props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MobileDatePicker value={value} onChange={(newValue) => setValue(newValue)} />\n```\n\n----------------------------------------\n\nTITLE: Updating adapter.isEqual method to accept date objects instead of strings\nDESCRIPTION: Shows how to modify code using the isEqual method across different date adapters (dayjs, luxon, moment, date-fns) to accept proper date objects instead of string literals.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_87\n\nLANGUAGE: diff\nCODE:\n```\n-const isEqual = adapterDayjs.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDayjs.isEqual(dayjs('2022-04-17'), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterLuxon.isEqual(DateTime.fromISO('2022-04-17'), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterMoment.isEqual(moment('2022-04-17'), moment('2022-04-17'));\n\n-const isEqual = adapterDateFns.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDateFns.isEqual(new Date('2022-04-17'), new Date('2022-04-17'));\n```\n\n----------------------------------------\n\nTITLE: Updating Filtered Rows Lookup Usage\nDESCRIPTION: The filteredRowsLookup object structure has changed. This snippet shows how to update code that relied on filteredRowsLookup to get ids of filtered rows.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n-const filteredRowIds = Object.keys(filteredRowsLookup).filter((rowId) => filteredRowsLookup[rowId] === true);\n+const rowIds = gridDataRowIdsSelector(apiRef);\n+const filteredRowIds = rowIds.filter((rowId) => filteredRowsLookup[rowId] !== false);\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Adapter Date-Fns Imports Transformation\nDESCRIPTION: Updates the adapter imports for date-fns, renaming AdapterDateFns to AdapterDateFnsV2 and AdapterDateFnsV3 to AdapterDateFns.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n-import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n+import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV2';\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n-import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV3';\n+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n+import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Container Sizes with TypeScript\nDESCRIPTION: Shows how to access data container sizes after removal of gridDataContainerSizesSelector\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataContainerSizes = gridContainerSizesSelector(state)?.dataContainerSizes ?? null;\n```\n\n----------------------------------------\n\nTITLE: Updating Node Focus Event Handler\nDESCRIPTION: Shows how to migrate from onNodeFocus to the new onItemFocus prop name.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n <SimpleTreeView\n-  onNodeFocus={onNodeFocus}\n+  onItemFocus={onItemFocus}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating fullTime Format in LocalizationProvider (JSX)\nDESCRIPTION: This snippet demonstrates how to update the 'fullTime' format to use separate 12-hour and 24-hour formats in the LocalizationProvider component. It shows the removal of the deprecated 'fullTime' format and its replacement with 'fullTime12h' and 'fullTime24h'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_67\n\nLANGUAGE: jsx\nCODE:\n```\n<LocalizationProvider\n  dateFormats={{\n-     fullTime: 'LT',\n+     fullTime12h: 'hh:mm A',\n+     fullTime24h: 'hh:mm',\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Updating Legend Props in MUI X Charts\nDESCRIPTION: Codemod to rename legend props to corresponding slotProps in MUI X Charts components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <LineChart\n-  legend={{ hiden: true}}\n+  slotProps={{ legend: { hiden: true} }}\n />\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewport Row Change Handler with Row Scroll Event\nDESCRIPTION: Shows how to replace the deprecated onViewportRowsChange prop with a rowsScroll event listener.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useGridApiRef();\nconst prevRenderContext = React.useRef(null);\n\nReact.useEffect(() => {\n  return apiRef.current.subscribeEvent('rowsScroll', ({ renderContext }) => {\n    if (\n      !prevRenderContext.current ||\n      renderContext.firstRowIdx !== prevRenderContext.current.firstRowIndex ||\n      renderContext.lastRowIdx !== prevRenderContext.current.lastRowIndex\n    ) {\n      prevRenderContext.current = renderContext;\n      const params = {\n        firstRowIndex: renderContext.firstRowIndex,\n        lastRowIndex: renderContext.lastRowIndex,\n      };\n    }\n  });\n}, [apiRef]);\n\n<DataGridPro apiRef={apiRef} />;\n```\n\n----------------------------------------\n\nTITLE: Replacing wrapperVariant Prop with usePickerContext\nDESCRIPTION: Shows how to access the variant (formerly wrapperVariant) using the usePickerContext hook instead of receiving it as a prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { wrapperVariant } = props;\n+const { variant } = usePickerContext();\n```\n\n----------------------------------------\n\nTITLE: Updating shouldDisableTime Prop Usage in DateTimePicker\nDESCRIPTION: Breaking change replacing shouldDisableClock prop with shouldDisableTime prop. The new prop receives a date object instead of numeric value.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n<DateTimePicker\n-  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing getEditCellValueParams from apiRef in XGrid\nDESCRIPTION: Removes the getEditCellValueParams method from the apiRef and provides an alternative using getEditCellPropsParams.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_18\n\nLANGUAGE: Diff\nCODE:\n```\n-const { value } = apiRef.current.getEditCellValueParams(id, field);\n+const { props: { value } } = apiRef.current.getEditCellPropsParams(id, field);\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs Props in React Date Time Picker\nDESCRIPTION: Shows how to move tab-related props to the slotProps and rename the onChange prop to onViewChange in custom tab components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n<DateTimePicker\n-  hideTabs={false}\n-  dateRangeIcon={<DateIcon />}\n-  timeIcon={<TimeIcon />}\n+  slotProps={{\n+    tabs: {\n+      hidden: false,\n+      dateIcon: <DateIcon />,\n+      timeIcon: <TimeIcon />,\n+    }\n+  }}\n/>\n\n<DateTimePickerTabs\n-  onChange={() => {}}\n+  onViewChange={() => {}}\n/>\n\nconst CustomTabsComponent = props => (\n  <div>\n-    <button onClick={() => props.onChange('day')}>Show day view</button>\n+    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n  </div>\n)\n\n<DateTimePicker\n  slots={{\n    tabs: CustomTabsComponent\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Data Source API\nDESCRIPTION: Update to data source API method calls, removing unstable_ prefix.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- apiRef.current.unstable_dataSource.getRows()\n+ apiRef.current.dataSource.getRows()\n```\n\n----------------------------------------\n\nTITLE: Demo Data Hook Implementation\nDESCRIPTION: Example showing how to use the useDemoData hook for generating sample data in development.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nexport default function Demo() {\n  const { data } = useDemoData({ dataSet: 'Commodity', rowLength: 100 });\n\n  return <DataGrid {...data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Range Field Value Control - React\nDESCRIPTION: Shows implementation of controlled and uncontrolled value patterns in Date Range Field components with reference to DateRangeFieldValue.js demo file.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-field/date-range-field.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"DateRangeFieldValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Column Spanning Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for GridColDef showing the colSpan property, which can be either a number or a function that determines how many columns a cell should span.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-spanning/column-spanning.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridColDef {\n  /**\n   * Number of columns a cell should span.\n   * @default 1\n   */\n  colSpan?: number | ((params: GridCellParams<R, V, F>) => number | undefined);\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Grid State Initializers\nDESCRIPTION: Shows how to update code after the state initializers were removed. Use getDefaultGridFilterModel instead of getInitialGridFilterState, and hardcode values for other initializers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-const [filterModel, setFilterModel] = React.useState(getInitialGridFilterState);\n+const [filterModel, setFilterModel] = React.useState(getDefaultGridFilterModel);\n\n-const [sortModel, setSortModel] = React.useState(() => getInitialGridSortingState().sortModel);\n+const [sortModel, setSortModel] React.useState([]);\n\n-getInitialGridColumnReorderState\n-getInitialGridColumnResizeState\n-getInitialGridColumnsState\n-getInitialGridRenderingState\n-getInitialGridRowState\n-getInitialGridState\n-getInitialVisibleGridRowsState\n-getInitialGridState\n```\n\n----------------------------------------\n\nTITLE: Date Calendar Value Control Examples\nDESCRIPTION: Demonstrates controlled and uncontrolled value management in DateCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nDateCalendarValue.js\n```\n\n----------------------------------------\n\nTITLE: Plugin Parameters with Default Values\nDESCRIPTION: Demonstrates how to implement default parameter values using getDefaultizedParams property.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ params }) => {\n  React.useEffect(() => {\n    console.log(params.customParam);\n  });\n\n  return {};\n};\n\nuseCustomPlugin.params = { customParam: true };\n\nuseCustomPlugin.getDefaultizedParams = ({ params }) => ({\n  ...params,\n  customParam: params.customParam ?? false,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Virtualization in DataGrid Component (TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates how to disable virtualization in the DataGrid component using the disableVirtualization prop. This is useful for testing purposes or small datasets, but should be avoided for large datasets due to performance implications.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/virtualization/virtualization.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid {...data} disableVirtualization />\n```\n\n----------------------------------------\n\nTITLE: Updating Localization Props\nDESCRIPTION: Migrates to new localeText prop structure for text customization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n <DateRangePicker\n-  startText=\"From\"\n-  endText=\"To\"\n+  localeText={{\n+    start: 'From',\n+    end: 'To',\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Replacing useGridSlotComponentProps hook in Data Grid\nDESCRIPTION: Shows how to replace the removed useGridSlotComponentProps hook with separate hooks for accessing API context, grid state, and root element reference.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n-const { apiRef, state, rootElement } = useGridSlotComponentProps();\n+const apiRef = useGridApiContext();\n+const [state] = useGridState(apiRef);\n+const rootElement = apiRef.current.rootElementRef;\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Preset-Safe Codemod Command for v7.0.0\nDESCRIPTION: Command to run all safe transformations for Data Grid components in v7.0.0, including renaming components to slots.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/data-grid/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Handling Edit Mode in React Data Grid\nDESCRIPTION: Fixes an issue where edit mode would start when pressing Shift+Space. This prevents unintended editing when using keyboard shortcuts.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nDon't start edit mode when pressing <kbd>Shift</kbd> + <kbd>Space</kbd>\n```\n\n----------------------------------------\n\nTITLE: Updating TreeItem CSS selectors for group transition\nDESCRIPTION: Code example showing how to update CSS selectors for styled TreeItem components to use the renamed groupTransition class instead of group class.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n const StyledTreeItem = styled(TreeItem)({\n-  [`& .${treeItemClasses.group}`]: {\n+  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 20,\n  },\n });\n```\n\n----------------------------------------\n\nTITLE: Disabled Items Configuration\nDESCRIPTION: Shows how to implement disabled state for tree view items using isItemDisabled prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction isItemDisabled(item) {\n  return item.disabled ?? false;\n}\n\n<RichTreeView isItemDisabled={isItemDisabled} />;\n```\n\n----------------------------------------\n\nTITLE: Updating Tree View import statements\nDESCRIPTION: Example of how the codemod transforms import statements from @mui/lab to @mui/x-tree-view.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-lab/migration-tree-view-lab.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import TreeView from '@mui/lab/TreeView';\n+import { TreeView } from '@mui/x-tree-view/TreeView';\n\n-import { TreeView, TreeItem } from '@mui/lab';\n+import { TreeView, TreeItem } from '@mui/x-tree-view';\n```\n\n----------------------------------------\n\nTITLE: Date Picker Opening View Selection\nDESCRIPTION: Demonstrates how to set the initial opening view of the Date Picker using openTo prop\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nDatePickerOpenTo.js\n```\n\n----------------------------------------\n\nTITLE: Using TimePicker with Custom Views and AMPM Format in React\nDESCRIPTION: Example of using TimePicker component with custom views and AMPM format, showing the updated default format behavior in version 6.7.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TimePicker views={['hours', 'minutes', 'seconds']} ampm />\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.parseISO Method (JavaScript)\nDESCRIPTION: The adapter.parseISO method has been removed. It can be replaced with direct usage of date library methods for Day.js, Luxon, DateFns, and Moment.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// For Day.js\n-const value = adapter.parseISO(isoString);\n+const value = dayjs(isoString);\n\n// For Luxon\n-const value = adapter.parseISO(isoString);\n+const value = DateTime.fromISO(isoString);\n\n// For DateFns\n-const value = adapter.parseISO(isoString);\n+const value = dateFns.parseISO(isoString);\n\n// For Moment\n-const value = adapter.parseISO(isoString);\n+const value = moment(isoString, true);\n```\n\n----------------------------------------\n\nTITLE: Installing @mui/x-tree-view package using npm\nDESCRIPTION: Command to install the @mui/x-tree-view package using npm package manager.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-lab/migration-tree-view-lab.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-tree-view\n```\n\n----------------------------------------\n\nTITLE: Date Calendar Reference Date Implementation\nDESCRIPTION: Shows how to set initial year/month display using referenceDate prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nDateCalendarReferenceDate.js\n```\n\n----------------------------------------\n\nTITLE: Customizing InputBase Theme\nDESCRIPTION: Example showing how to customize InputBase and PickersInputBase components through theme configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiInputBase: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n    MuiPickersInputBase: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Get Item Tree API Method\nDESCRIPTION: Demonstrates how to retrieve the current item tree structure through the API reference.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst itemTree = apiRef.current.getItemTree();\n```\n\n----------------------------------------\n\nTITLE: Updating Column RenderCell Return Value (TypeScript/React)\nDESCRIPTION: This snippet demonstrates the change in behavior for the renderCell function in column definitions. Now, returning undefined falls back to the default formatted value, while null renders an empty cell.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderCell = () => {\n if (condition) {\n   return <CustomComponent />;\n }\n- return null;\n+ return undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Restructuring useClearableField API\nDESCRIPTION: Breaking change to simplify useClearableField hook API by accepting a single props parameter\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n const fieldResponse = useDateField(props);\n\n-const { InputProps, onClear, clearable, slots, slotProps, ...otherFieldProps } = fieldResponse\n-const { InputProps: ProcessedInputProps, fieldProps: processedFieldProps } = useClearableField({\n-  fieldProps: otherFieldProps,\n-  InputProps,\n-  clearable,\n-  onClear,\n-  slots,\n-  slotProps,\n-});\n-\n- return <MyCustomTextField {...processedFieldProps} InputProps={ProcessedInputProps} />\n\n+const processedFieldProps = useClearableField(fieldResponse);\n+\n+return <MyCustomTextField {...processedFieldProps} />\n```\n\n----------------------------------------\n\nTITLE: Multi-Calendar Date Range Picker\nDESCRIPTION: Configuration for displaying multiple months in DateRangePicker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"DateRangePickerCalendarProp.js\"\n```\n\n----------------------------------------\n\nTITLE: GridRowParams Interface Definition\nDESCRIPTION: TypeScript interface definition for GridRowParams used in row styling callbacks.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/style/style.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface GridRowParams<R extends GridRowModel = GridRowModel> {\n  /**\n   * The grid row id.\n   */\n  id: GridRowId;\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: R;\n  /**\n   * All grid columns.\n   */\n  columns: GridColDef[];\n}\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Components to Slots Transformation\nDESCRIPTION: Updates Data Grid components by renaming 'components' prop to 'slots' and 'componentsProps' to 'slotProps' for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  components={{ Toolbar: CustomToolbar }}\n-  componentsProps={{ toolbar: { showQuickFilter: true }}}\n+  slots={{ toolbar: CustomToolbar }}\n+  slotProps={{ toolbar: { showQuickFilter: true }}}\n />;\n```\n\n----------------------------------------\n\nTITLE: Enabling column grouping by default in DataGrid React\nDESCRIPTION: Shows how to remove the experimental flag for column grouping in DataGrid, as it is now enabled by default.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid experimentalFeatures={{ columnGrouping: true }} />\n+<DataGrid />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PivotPanelTrigger in React Data Grid\nDESCRIPTION: This snippet demonstrates how to import and implement the PivotPanelTrigger component from the MUI X Data Grid Premium package. The component serves as a button to open and close the pivot panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/pivot-panel/pivot-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PivotPanelTrigger } from '@mui/x-data-grid-premium';\n\n<PivotPanelTrigger />;\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Formatting in Chart Tooltips with DataIndex\nDESCRIPTION: Example demonstrating advanced tooltip formatting using the dataIndex property from the context parameter in valueFormatter.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n  // ...\n  series={[\n    {\n      data: [ ... ],\n      valueFormatter: (value, context) => {\n        // Use context.dataIndex to calculate rank or other data-related values\n        return `Value: ${value}, Rank: ${context.dataIndex + 1}`;\n      }\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker Action Bar in React\nDESCRIPTION: Demonstrates how to configure the action bar buttons for a DatePicker component using the new 'actions' prop. This allows customizing which buttons are displayed and in what order, with different configurations possible for desktop and mobile variants.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  componentsProps={{\n    actionBar: {\n      // The actions will be the same between desktop and mobile\n      actions: ['clear'],\n\n      // The actions will be different between desktop and mobile\n      actions: (variant) => (variant === 'desktop' ? [] : ['clear']),\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Bar Chart Animations\nDESCRIPTION: Examples showing how to disable animations in both single component and composed bar charts using the skipAnimation prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bars/bars.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// For a single component chart\n<BarChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <BarPlot skipAnimation />\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date-fns Locale in LocalizationProvider\nDESCRIPTION: Demonstrates setting up custom locale with date-fns adapter, supporting v2.x, v3.x, and v4.x versions\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// with date-fns v3.x or v4.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// with date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n// with date-fns v3.x or v4.x\nimport { de } from 'date-fns/locale/de';\n// with date-fns v2.x\nimport de from 'date-fns/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={de}>\n  {children}\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Tree View and Dependencies with npm\nDESCRIPTION: Command to install MUI X Tree View component along with its Material UI peer dependencies using npm.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 4 for Modern JavaScript Features\nDESCRIPTION: Webpack configuration modification to handle modern JavaScript features like Nullish Coalescing and Optional Chaining when using webpack 4 with MUI X-Charts v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v6/migration-charts-v6.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = (env) => ({\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [path.resolve(__dirname, 'node_modules/@mui/x-charts')],\n+          },\n+        ],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Use Client Directive to Charts Components\nDESCRIPTION: Adds the 'use client' directive to every public component and hook in the Charts component for Next.js compatibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n[charts] Add \"use client\" directive to every public component and hook (#14578) @flaviendelangle\n```\n\n----------------------------------------\n\nTITLE: Using Custom Grid Filter Input Variant\nDESCRIPTION: Customization example showing usage of filter input variant in DataGrid's filter panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport { GridPreProcessEditCellProps } from '@mui/x-data-grid';\n\n// Example of using customized filter input variant\n<DataGrid filterModel={{...}} />\n```\n\n----------------------------------------\n\nTITLE: Adding Turkish (tr-TR) Locale for Data Grid\nDESCRIPTION: Adds Turkish translations for the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Add Turkish (tr-TR) locale (#5026) @Rassilion\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputDateRangeFieldComponentProps Type in TypeScript\nDESCRIPTION: Type definition that combines component props with DateRangeManagerFieldInternalProps and MultiInputFieldRefs. Used for creating custom multi-input date range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ntype UseMultiInputDateRangeFieldComponentProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  | keyof DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n  | keyof MultiInputFieldRefs\n> &\n  DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n  MultiInputFieldRefs;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Components with Chart Data in React\nDESCRIPTION: Example of creating custom HTML components using chart data in the MUI X Charts library.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChartDataProvider, BarChart, ChartsSurface } from '@mui/x-charts';\n\nconst MyCustomLegend = () => {\n  const { series } = useChartData();\n  return (\n    <ul>\n      {series.bar.map((item) => (\n        <li key={item.dataKey}>{item.label}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default function App() {\n  return (\n    <ChartDataProvider\n      series={[\n        { type: 'bar', data: [1, 2, 3], label: 'Series A' },\n        { type: 'bar', data: [4, 5, 6], label: 'Series B' },\n      ]}\n    >\n      <ChartsSurface>\n        <BarChart />\n      </ChartsSurface>\n      <MyCustomLegend />\n    </ChartDataProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeepGroupedColumnsHidden Hook with DataGridPremium\nDESCRIPTION: Demonstrates how to use the useKeepGroupedColumnsHidden hook to automatically hide grouped columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiRef = useGridApiRef();\n\nconst initialState = useKeepGroupedColumnsHidden({\n  apiRef,\n  initialState: {\n    rowGrouping: {\n      model: ['company'],\n    },\n    columns: {\n      // Other hidden columns\n      columnVisibilityModel: { gross: false },\n    },\n  },\n});\n\nreturn <DataGridPremium {...data} apiRef={apiRef} initialState={initialState} />;\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Visibility in DataGrid\nDESCRIPTION: Example demonstrating both controlled and uncontrolled approaches to manage column visibility in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n// To fully control\n<DataGrid\n  columnVisibilityModel={columnVisibilityModel}\n  onColumnVisilibilityModelChange={newModel => setColumnVisibilityModel(newModel)}\n/>\n\n// To initialize without controlling\n<DataGrid\n  initialState={{\n    columns: {\n      columnVisibilityModel\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GitHub Assets Video Reference\nDESCRIPTION: Link to an assets video showcasing clipboard paste functionality in the documentation.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_31\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://github.com/mui/mui-x/assets/13808724/abfcb5c6-9db6-4677-9ba7-ae97de441080\n```\n\n----------------------------------------\n\nTITLE: Upgrading Data Grid from Pro to Premium in React\nDESCRIPTION: This code snippet shows how to upgrade from the Pro version of the Data Grid to the Premium version by updating the import statement.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { DataGridPro } from '@mui/x-data-grid-pro';\n+import { DataGridPremium } from '@mui/x-data-grid-premium';\n```\n\n----------------------------------------\n\nTITLE: Adding ChartsReferenceLine Component to Charts Package\nDESCRIPTION: Introduces a new ChartsReferenceLine component to the Charts package, allowing for the addition of reference lines in charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n[charts] Add `<ChartsReferenceLine />` component (#10597) @wascou\n```\n\n----------------------------------------\n\nTITLE: Renaming MonthPicker to MonthCalendar\nDESCRIPTION: The MonthPicker component has been renamed to MonthCalendar to better reflect its purpose.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n-<MonthPicker {...props} />\n+<MonthCalendar {...props} />\n```\n\n----------------------------------------\n\nTITLE: Updating Single Input DateTime Range Field Props\nDESCRIPTION: Migration example for updating custom single input field implementation for DateTime Range Picker by using simplified DateTimeRangePickerFieldProps interface.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n-import {\n-  DateTimeRangeValidationError,\n-  RangeFieldSection,\n-  DateRange,\n-} from '@mui/x-date-pickers-pro/models';\n-import {\n-  UseSingleInputDateTimeRangeFieldProps\n-} from '@mui/x-date-pickers-pro/SingleInputDateTimeRangeField';\n+import {\n+  DateTimeRangePickerFieldProps\n+} from '@mui/x-date-pickers-pro/DateTimeRangePicker';\n\n-interface CustomDateTimeRangeFieldProps\n-  extends UseSingleInputDateTimeRangeFieldProps<Dayjs, true>,\n-    BaseSingleInputFieldProps<\n-      DateRange<Dayjs>,\n-      Dayjs,\n-      RangeFieldSection,\n-      true,\n-      DateTimeRangeValidationError\n-    >\n+interface CustomDateTimeRangeFieldProps extends DateTimeRangePickerFieldProps {}\n```\n\n----------------------------------------\n\nTITLE: Extending Day.js with Custom Parse Format Plugin in TypeScript\nDESCRIPTION: Example of how to manually extend Day.js with the customParseFormat plugin before using LocalizationProvider.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport dayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\n\ndayjs.extend(customParseFormatPlugin);\n```\n\n----------------------------------------\n\nTITLE: Replacing UseTimeFieldComponentProps Type in TypeScript\nDESCRIPTION: Definition for UseTimeFieldComponentProps type that combines component props with TimeField specific props. This type is a generic that works with any valid date type and accessibility settings.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseTimeFieldProps } from '@mui/x-date-pickers/TimeField';\nimport { PickerValidDate } from '@mui/x-date-pickers/models';\n\ntype UseTimeFieldComponentProps<\n  TDate extends PickerValidDate,\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  keyof UseTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n> &\n  UseTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n```\n\n----------------------------------------\n\nTITLE: Extending Tree Item Props with Custom Slot Properties\nDESCRIPTION: Example showing how to pass additional props to a Tree Item content slot\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/tree-item-customization/tree-item-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CustomTreeItemContent\n  {...getContentProps({\n    className: 'overridingClassName',\n    newProp: 'I am passing this to the content slot'\n  })}\n>\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Date Pickers (Community Plan)\nDESCRIPTION: Commands for installing the community version of MUI X Date Pickers using different package managers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-date-pickers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/x-date-pickers\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/x-date-pickers\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Types in TypeScript\nDESCRIPTION: Demonstrates the correct way to type column definitions in TypeScript using GridColDef interface or const assertions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// 🛑 `type` is inferred as `string` and is too wide\nconst columns = [{ type: 'number', field: 'id' }];\n<DataGrid columns={columns} />;\n\n// ✅ `type` is `'number'`\nconst columns: GridColDef[] = [{ type: 'number', field: 'id' }];\n<DataGrid columns={columns} />;\n\n// ✅ Alternalively, `as const` can be used to narrow down the type\nconst columns = [{ type: 'number' as const, field: 'id' }];\n<DataGrid columns={columns} />;\n```\n\n----------------------------------------\n\nTITLE: DOM Structure Update - Date Picker Fields\nDESCRIPTION: Demonstrates the new DOM structure for date picker fields that improves accessibility by setting aria attributes on individual sections.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<!-- Before v8.x -->\n<input value=\"full date value\" />\n\n<!-- After v8.x -->\n<div role=\"group\">\n  <input aria-label=\"day\" />\n  <input aria-label=\"month\" />\n  <input aria-label=\"year\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Migrating from state to initialState prop in Data Grid\nDESCRIPTION: Shows how to update code when migrating from the removed state prop to the new initialState prop in the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  state={{\n+  initialState={{\n     preferencePanel: {\n       open: true,\n       openedPanelValue: GridPreferencePanelsValue.filters,\n     },\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Keyboard navigation table for field components\nDESCRIPTION: Markdown table showing keyboard shortcuts and their functions for date/time field components\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/accessibility/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                  Keys | Description                                  |\n| --------------------------------------------------------------------: | :------------------------------------------- |\n| <kbd class=\"key\">Arrow Left</kbd>, <kbd class=\"key\">Arrow Right</kbd> | Moves focus among date/time sections         |\n|                                       <kbd class=\"key\">Arrow Up</kbd> | Increases focused section value by 1         |\n|                                     <kbd class=\"key\">Arrow Down</kbd> | Decreases focused section value section by 1 |\n|                                        <kbd class=\"key\">Page Up</kbd> | Increases focused section value section by 5 |\n|                                      <kbd class=\"key\">Page Down</kbd> | Decreases focused section value section by 5 |\n|                                           <kbd class=\"key\">Home</kbd> | Sets focused section to the minimal value    |\n|                                            <kbd class=\"key\">End</kbd> | Sets focused section to the maximal value    |\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Flag via Global Object in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable or disable telemetry by setting a flag on the global object using the ponyfillGlobal utility from @mui/utils.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-telemetry/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ponyfillGlobal } from '@mui/utils';\n\nponyfillGlobal.__MUI_X_TELEMETRY_DISABLED__ = false; // enabled\n// or\nponyfillGlobal.__MUI_X_TELEMETRY_DISABLED__ = true; // disabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Grouping in DataGridPro\nDESCRIPTION: Example of how to enable and configure row grouping feature in DataGridPro using controlled or uncontrolled approach with the experimental rowGrouping feature flag.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// To fully control\n<DataGridPro\n  rowGroupingModel={rowGroupingModel}\n  onRowGroupingModel={newModel => setRowGroupingModel(newModel)}\n  experimentalFeatures={{ rowGrouping: true }}\n/>\n\n// To initialize without controlling\n<DataGridPro\n  initialState={{\n    rowGrouping: {\n      model: rowGroupingModel,\n    },\n  }}\n  experimentalFeatures={{ rowGrouping: true }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Axis Listeners in Chart Container\nDESCRIPTION: Shows how to disable axis listeners when using composition, which can be done if you don't need axes highlighting or axis-triggered tooltips.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ChartContainer {...} disableAxisListener>\n  {/* ... */}\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Picker Shortcuts in React MUI\nDESCRIPTION: Shows how to add a basic shortcut (Christmas Day) to a DatePicker component using the slotProps.shortcuts configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/shortcuts/shortcuts.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  slotProps={{\n    shortcuts: {\n      items: [\n        {\n          label: 'Christmas',\n          getValue: () => {\n            return dayjs(new Date(2023, 11, 25));\n          },\n        },\n      ],\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone with Moment\nDESCRIPTION: Example showing how to set a default timezone globally using Moment.js for MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport moment from 'moment-timezone';\n\nmoment.tz.setDefault('America/New_York');\n\nconst date = moment('2022-04-17T15:30');\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations for Pie Charts in React\nDESCRIPTION: Shows how to disable animations for pie charts by setting the skipAnimation prop to true, either for a single component or within a composed chart.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/pie/pie.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// For a single component chart\n<PieChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <PiePlot skipAnimation />\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Installing Date Library Dependencies\nDESCRIPTION: Commands for installing supported date libraries (date-fns, dayjs, luxon, or moment) that are required for the pickers to function.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers-pro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# date-fns\nnpm install date-fns\n\n# or dayjs\nnpm install dayjs\n\n# or luxon\nnpm install luxon\n\n# or moment\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Slots Types Transformation\nDESCRIPTION: Updates type names by replacing 'SlotsComponent' suffix with 'Slots' and 'SlotsComponentsProps' with 'SlotProps' for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n-DateCalendarSlotsComponent\n-DateCalendarSlotsComponentsProps\n+DateCalendarSlots\n+DateCalendarSlotProps\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key Representation in Documentation\nDESCRIPTION: HTML code showing keyboard key representation using kbd element\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<kbd>Enter</kbd>\n```\n\n----------------------------------------\n\nTITLE: Date/DateTime Column Value Parser\nDESCRIPTION: Example showing how to parse string values for date and dateTime column types using valueGetter.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  columns={[\n    {\n      field: 'date',\n      type: 'date',\n      valueGetter: (params) => new Date(params.value),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Usage\nDESCRIPTION: Example showing non-controlled usage of calendar components with default values\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\n<DateCalendar defaultValue={dayjs()} />\n<MonthCalendar defaultValue={dayjs()} />\n<YearCalendar defaultValue={dayjs()} />\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Augmentation for Renamed Picker Components\nDESCRIPTION: Demonstrates how to update theme customization code for the renamed picker components, changing from 'Private' prefixed names to 'Mui' prefixed component names.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n-    PrivatePickersMonth: {\n+    MuiPickersMonth: {\n       // overrides\n     },\n-    PrivatePickersSlideTransition: {\n+    MuiPickersSlideTransition: {\n       // overrides\n     },\n-    PrivatePickersToolbarText: {\n+    MuiPickersToolbarText: {\n      // overrides\n     },\n-    PrivatePickersYear: {\n+    MuiPickersYear: {\n       // overrides\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Row API Changes\nDESCRIPTION: Code change showing the API updates for managing rows in the Data Grid component, demonstrating the migration from old to new methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n-apiRef.current.updateRowData()\n+apiRef.current.updateRows()\n\n-apiRef.current.setRowModels()\n+apiRef.current.setRows()\n```\n\n----------------------------------------\n\nTITLE: Updating Toolbar Component in React Date Picker\nDESCRIPTION: Demonstrates how to replace the ToolbarComponent prop with the new slots API and move toolbar-related props to slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  ToolbarComponent={MyToolbar}\n+  slots={{ toolbar: MyToolbar }}\n-  toolbarPlaceholder=\"__\"\n-  toolbarFormat=\"DD / MM / YYYY\"\n-  showToolbar\n+  slotProps={{\n+    toolbar: {\n+      toolbarPlaceholder: '__',\n+      toolbarFormat: 'DD / MM / YYYY',\n+      hidden: false,\n+    }\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Edit Stop in DataGrid (TypeScript/React)\nDESCRIPTION: This snippet shows how to handle the cell edit stop event in the DataGrid component, specifically to prevent default behavior when the event occurs inside a Portal.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  onCellEditStop={(params, event) => {\n    if (params.reason !== GridCellEditStopReasons.enterKeyDown) {\n      return;\n    }\n    // Check if the target is inside a Portal\n    if (\n      (event.target as any).nodeType === 1 &&\n      !event.currentTarget.contains(event.target)\n    ) {\n      event.defaultMuiPrevented = true;\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating PickersLayout Components to Use ownerState\nDESCRIPTION: Shows how to update PickersLayoutRoot and PickersLayoutContentWrapper components to receive the ownerState from usePickerLayout instead of using props directly.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-const { toolbar, tabs, content, actionBar } = usePickerLayout(props);\n+const { toolbar, tabs, content, actionBar, ownerState } = usePickerLayout(props);\n\n return (\n-  <PickersLayoutRoot ownerState={props}>\n-    <PickersLayoutContentWrapper>\n+  <PickersLayoutRoot ownerState={ownerState}>\n+    <PickersLayoutContentWrapper ownerState={ownerState}>\n     </PickersLayoutContentWrapper>\n   </PickersLayoutRoot>\n );\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV Export Options via Toolbar Props\nDESCRIPTION: Example showing how to pass custom CSV export options to the DataGrid toolbar component through the componentsProps API.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomDataGrid = (props: DataGridProps) => {\n  return (\n    <DataGrid {...props} componentsProps={{ toolbar: { csvOptions: { delimiter: ';' } } }} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Initial State Pagination\nDESCRIPTION: Migration example for updating the initialState pagination configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n-initialState={{ pagination: { page: 1, pageSize: 10 } }}\n+initialState={{ pagination: { paginationModel: { page: 1, pageSize: 10 } } }}\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Action Bar Component in React\nDESCRIPTION: Shows how to provide a custom component for the DatePicker's action bar using the 'components' prop. This allows for complete customization of the action bar beyond the built-in actions.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker components={{ ActionBar: CustomActionBar }} />\n```\n\n----------------------------------------\n\nTITLE: Replacing Picker Components with Field Components\nDESCRIPTION: Shows migration from Picker components to Field components when disableOpenPicker is used\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-<DatePicker disableOpenPicker />\n+<DateField />\n\n-<TimePicker disableOpenPicker />\n+<TimeField />\n\n-<DateTimePicker disableOpenPicker />\n+<DateTimeField />\n```\n\n----------------------------------------\n\nTITLE: Updating Adapter Usage in MUI X Date Pickers\nDESCRIPTION: Diff showing how to update usage of the dateWithTimezone method to the date method in MUI X Date Pickers v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-adapter.dateWithTimezone(undefined, 'system');\n+adapter.date(undefined, 'system');\n```\n\n----------------------------------------\n\nTITLE: Updating Row Lookup Selector Usage\nDESCRIPTION: Breaking change showing the replacement of gridRowsDataRowIdToIdLookupSelector with gridRowsLookupSelector.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n-const rowId = idToIdLookup[id]\n+const rowsLookup = gridRowsLookupSelector(apiRef);\n+const rowId = apiRef.current.getRowId(rowsLookup[id])\n```\n\n----------------------------------------\n\nTITLE: Setting Item Identifier in Simple Tree View\nDESCRIPTION: This example demonstrates how to set a unique itemId for a TreeItem within a SimpleTreeView component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/items/items.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<SimpleTreeView>\n  <TreeItem itemId=\"item-unique-id\" {...otherItemProps} />\n</SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Setting MUI X License Key with Next.js Environment Variable\nDESCRIPTION: This code snippet demonstrates how to set the MUI X license key using an environment variable in a Next.js project. It uses the LicenseInfo.setLicenseKey method to apply the license key from the NEXT_PUBLIC_MUI_X_LICENSE_KEY environment variable.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey(process.env.NEXT_PUBLIC_MUI_X_LICENSE_KEY);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Component with Accessible DOM Structure\nDESCRIPTION: Example showing how to handle the new enableAccessibleFieldDOMStructure prop in custom field components and remove it before DOM rendering.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\nfunction MyCustomTextField(props) {\n  const {\n+     // Should be ignored\n+     enableAccessibleFieldDOMStructure,\n      // ... rest of the props you are using\n  } = props;\n\n  return ( /* Some UI to edit the date */ )\n}\n\nfunction MyCustomField(props) {\n  const fieldResponse = useDateField<Dayjs, false, typeof textFieldProps>({\n    ...props,\n+     // If you only support one DOM structure, we advise you to hardcode it here to avoid unwanted switches in your application\n+     enableAccessibleFieldDOMStructure: false,\n  });\n\n  return <MyCustomTextField ref={ref} {...fieldResponse} />;\n}\n\nfunction App() {\n  return <DatePicker slots={{ field: MyCustomField }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Category Axis to Funnel Chart in React\nDESCRIPTION: Explains how to add and configure a category axis in a funnel chart. The axis is not displayed by default and requires setting the 'position' and 'categories' properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/funnel/funnel.md#2025-04-21_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FunnelCategoryAxis.js\"}\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Components to Slots Codemod Command\nDESCRIPTION: Command to execute the rename-components-to-slots-data-grid codemod for Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/data-grid/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming Selection Props in Tree View\nDESCRIPTION: This codemod renames the selection-related props in the Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView\n-  onNodeSelect={handleSelectionChange}\n+  onSelectedItemsChange={handleSelectionChange}\n\n-  selected={selectedItems}\n+  selectedItems={selectedItems}\n\n-  defaultSelected={defaultSelectedItems}\n+  defaultSelectedItems={defaultSelectedItems}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Column Visibility in React\nDESCRIPTION: Updates the method of hiding a column in Data Grid from using the deprecated 'hide' property to using the new columnVisibilityModel.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_76\n\nLANGUAGE: jsx\nCODE:\n```\n <DataGrid\n   columns={[\n     field: 'id,\n-    hide: true,\n   ]}\n+  initialState={{\n+    columns: {\n+      columnVisibilityModel: { id: false },\n+    },\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Column Menu Processing in TSX\nDESCRIPTION: Component processor that adds custom menu items to the grid column menu based on feature configuration and column properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/processing.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst addColumnMenuItems = React.useCallback<GridPipeProcessor<'columnMenu'>>(\n  (initialValue, column) => {\n    if (props.disableCustomFeature) {\n      return initialValue;\n    }\n\n    if (column.hasCustomFeature === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, <Divider />, <GridCustoMFeatureMenuItems />];\n  },\n  [props.disableCustomFeature],\n);\n```\n\n----------------------------------------\n\nTITLE: Default Layout Structure for MUI X Date and Time Pickers\nDESCRIPTION: This code snippet shows the default layout structure of MUI X Date and Time Pickers, including the toolbar, shortcuts, content, tabs, and action bar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-layout/custom-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PickersLayoutRoot>\n  {toolbar}\n  {shortcuts}\n  <PickersLayoutContentWrapper>\n    {tabs}\n    {content}\n  </PickersLayoutContentWrapper>\n  {actionBar}\n</PickersLayoutRoot>\n```\n\n----------------------------------------\n\nTITLE: Using Item Expansion Toggle Event\nDESCRIPTION: Example of using the new onItemExpansionToggle prop for handling individual item expansion events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<SimpleTreeView\n  onItemExpansionToggle={(event, itemId, isExpanded) =>\n    console.log(itemId, isExpanded)\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Drag and Drop Implementation in React TreeView\nDESCRIPTION: Demonstrates how to enable basic drag and drop reordering functionality by setting the itemsReordering prop to true.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/ordering/ordering.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nDragAndDrop.js\n```\n\n----------------------------------------\n\nTITLE: Updating Date Adapter Import Path\nDESCRIPTION: Changes the import path for date adapters from @date-io to @mui/x-date-pickers to support new fields components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-import AdapterJalaali from '@date-io/jalaali';\n+import { AdapterMomentJalaali } from '@mui/x-date-pickers/AdapterMomentJalaali';\n```\n\n----------------------------------------\n\nTITLE: Replacing PaperProps with component slots in DatePicker\nDESCRIPTION: Migration for replacing the PaperProps prop with the new component slots pattern in desktop and responsive Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_56\n\nLANGUAGE: diff\nCODE:\n```\n // Same on DesktopDatePicker, DateTimePicker, DesktopDateTimePicker,\n // TimePicker, DesktopTimePicker, DateRangePicker and DesktopDateRangePicker.\n <DatePicker\n-  PaperProps={{ backgroundColor: 'red' }}\n+  componentsProps={{ desktopPaper: { backgroundColor: 'red' }}}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Row Selector in TypeScript\nDESCRIPTION: Updates the usage of a Data Grid row selector to use the new naming convention in v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n-const result = gridRowsIdToIdLookupSelector(apiRef);\n+const result = gridRowsDataRowIdToIdLookupSelector(apiRef);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n-const result = gridRowTreeDepthSelector(apiRef);\n+const result = gridRowMaximumTreeDepthSelector(apiRef);\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Pagination Model\nDESCRIPTION: Migration example showing how to update from page/pageSize props to the new paginationModel prop in DataGrid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n rows={rows}\n columns={columns}\n-  page={page}\n-  pageSize={pageSize}\n-  onPageChange={handlePageChange}\n-  onPageSizeChange={handlePageSizeChange}\n+  paginationModel={{ page, pageSize }}\n+  onPaginationModelChange={handlePaginationModelChange}\n />\n```\n\n----------------------------------------\n\nTITLE: Renaming date prop to value in picker components\nDESCRIPTION: Example showing how to update the deprecated date prop to the new value prop in MonthPicker, YearPicker, ClockPicker, and CalendarPicker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_81\n\nLANGUAGE: diff\nCODE:\n```\n-<MonthPicker date={dayjs()} onChange={handleMonthChange} />\n+<MonthPicker value={dayjs()} onChange={handleMonthChange} />\n\n-<YearPicker date={dayjs()} onChange={handleYearChange} />\n+<YearPicker value={dayjs()} onChange={handleYearChange} />\n\n-<ClockPicker date={dayjs()} onChange={handleTimeChange} />\n+<ClockPicker value={dayjs()} onChange={handleTimeChange} />\n\n-<CalendarPicker date={dayjs()} onChange={handleDateChange} />\n+<CalendarPicker value={dayjs()} onChange={handleDateChange} />\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Tree View and Dependencies with pnpm\nDESCRIPTION: Command to install MUI X Tree View component along with its Material UI peer dependencies using pnpm.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Replacing BaseSingleInputFieldProps for Custom Date Field\nDESCRIPTION: Simplified replacement for BaseSingleInputFieldProps when building a custom date field. The complex type combination is replaced with the more straightforward DatePickerFieldProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n-import {\n-  BaseSingleInputFieldProps,\n-  DateValidationError,\n-  FieldSection,\n-} from '@mui/x-date-pickers/models';\n-import { UseDateFieldProps } from '@mui/x-date-pickers/DateField';\n+import { DatePickerFieldProps } from '@mui/x-date-pickers/DatePicker';\n\n-interface CustomDateFieldProps\n-  extends UseDateFieldProps<Dayjs, true>,\n-    BaseSingleInputFieldProps<\n-      Dayjs | null,\n-      Dayjs,\n-      FieldSection,\n-      true,\n-      DateValidationError\n-    > {}\n+interface CustomDateFieldProps extends DatePickerFieldProps {}\n```\n\n----------------------------------------\n\nTITLE: Component Children Rendering Patterns\nDESCRIPTION: Demonstrates different methods of providing children to rendered components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Method 1: Children inside the rendered component\n<FilterPanelTrigger render={<CustomButton>Filters</CustomButton>} />\n\n// Method 2: Children of <FilterPanelTrigger />\n<FilterPanelTrigger render={<CustomButton />}>Filters</FilterPanelTrigger>\n```\n\n----------------------------------------\n\nTITLE: Extending Dayjs with Custom Parse Format Plugin\nDESCRIPTION: Example of how to manually extend dayjs with the customParseFormat plugin when using AdapterDayjs.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nimport dayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\n\ndayjs.extend(customParseFormatPlugin);\n```\n\n----------------------------------------\n\nTITLE: Replacing dateLibInstance with timezone prop for UTC handling\nDESCRIPTION: Shows the migration from using dateLibInstance prop with AdapterDayjs to using the new timezone approach for handling UTC dates in LocalizationProvider.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_88\n\nLANGUAGE: diff\nCODE:\n```\n // When a `value` or a `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n   <DatePicker value={dayjs.utc('2022-04-17')} />\n </LocalizationProvider>\n\n // When no `value` or `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n-  <DatePicker />\n+  <DatePicker timezone=\"UTC\" />\n </LocalizationProvider>\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Day in Custom DatePicker Component\nDESCRIPTION: Demonstrates how to access the selectedDay prop in a custom Day component for DatePicker after its removal from the Day component. It involves controlling the value and passing it through componentsProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomDay({ selectedDay, ...other }) {\n  // do something with 'selectedDay'\n  return <PickersDay {...other} />;\n}\nfunction App() {\n  const [value, setValue] = React.useState(null);\n  return (\n    <DatePicker\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n      components={{ Day: CustomDay }}\n      componentsProps={{\n        day: { selectedDay: value },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Time Clock Implementation in React\nDESCRIPTION: Basic usage example of the TimeClock component for time selection.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-clock/time-clock.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nBasicTimeClock.js\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths for Locales in JavaScript\nDESCRIPTION: This code shows the changes in import paths for locales in different versions of the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-import { enUS } from '@mui/x-data-grid';\n+import { enUS } from '@mui/x-data-grid/locales';\n\n-import { enUS } from '@mui/x-data-grid-pro';\n+import { enUS } from '@mui/x-data-grid-pro/locales';\n\n-import { enUS } from '@mui/x-data-grid-premium';\n+import { enUS } from '@mui/x-data-grid-premium/locales';\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Component Names in Theme\nDESCRIPTION: The component names in the theme have been updated to match the new component naming convention.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n-MuiCalendarPicker: {\n+MuiDateCalendar: {\n```\n\n----------------------------------------\n\nTITLE: Setting MUI X License Key in Next.js Pages Router\nDESCRIPTION: This code snippet shows how to set the MUI X license key in a Next.js application using the Pages Router, by adding the license key in the _app.tsx file.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport type { NextPage } from 'next';\nimport type { AppProps } from 'next/app';\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n\nexport type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n  getLayout?: (page: React.ReactElement) => React.ReactNode;\n};\n\ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout;\n};\n\nexport default function MyApp(props: AppPropsWithLayout) {\n  const { Component, pageProps } = props;\n  const getLayout = Component.getLayout ?? ((page) => page);\n\n  return getLayout(<Component {...pageProps} />);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Input Format of the date() Method in MUI X Date Adapters\nDESCRIPTION: Changes to the date() method to accept only string, null, or undefined values instead of any value type. The method now behaves like the v6 dateWithTimezone method, requiring explicit string formats instead of Date objects.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-adapter.date(new Date());\n+adapter.date();\n\n-adapter.date(new Date('2022-04-17');\n+adapter.date('2022-04-17');\n\n-adapter.date(new Date(2022, 3, 17, 4, 5, 34));\n+adapter.date('2022-04-17T04:05:34');\n\n-adapter.date(new Date('Invalid Date'));\n+adapter.getInvalidDate();\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Package Codemod Command\nDESCRIPTION: Command to execute the rename-package codemod that automatically updates import paths for reorganized packages.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/data-grid/rename-package <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Selector Signature in Data Grid\nDESCRIPTION: Breaking change showing the updated selector signature to support arguments parameter in the selectors.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-mySelector(state, instanceId)\n+mySelector(state, arguments, instanceId)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Tree View Keyboard Navigation\nDESCRIPTION: Detailed table showing keyboard shortcuts and their corresponding actions for navigating the Tree View component. Includes support for RTL layouts and special key combinations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/accessibility/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                                          Keys | Description                                                                                                                                                                                                          |\n| --------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|                                                                  <kbd class=\"key\">Enter</kbd> | Activates the focused item. <ul><li>If item has children, it is expanded or collapsed</li><li>If the item does not have children, it is selected</li></ul>                                                           |\n|                                                               <kbd class=\"key\">Arrow Up</kbd> | Moves focus to the previous focusable item, without expanding or collapsing it                                                                                                                                       |\n|                                                             <kbd class=\"key\">Arrow Down</kbd> | Moves focus to the next focusable item, without expanding or collapsing it                                                                                                                                           |\n| <kbd class=\"key\">Arrow Right</kbd> + RTL off </br> <kbd class=\"key\">Arrow Left</kbd> + RTL on | <ul><li>If focus is on a collapsed item, expands the item without moving focus</li><li>If focus is on an expanded item, moves focus to the first child</li><li>If focus is on an end item, nothing happens</li></ul> |\n|   <kbd class=\"key\">Arrow Left</kbd> + RTL off </br> <kbd class=\"key\">Arrow Right</kbd> RTL on | <ul><li>If focus is on an expanded item, collapses the item</li><li>If focus is on a collapsed item that has a parent, moves focus to its parent</li><li>If focus is on a root item, nothing happens</li></ul>       |\n|                                                                   <kbd class=\"key\">Home</kbd> | Focuses the first item in the tree                                                                                                                                                                                   |\n|                                                                    <kbd class=\"key\">End</kbd> | Focuses the last item in the tree                                                                                                                                                                                    |\n|                                                                     <kbd class=\"key\">*</kbd> | Expands all siblings that are at the same level as the focused item without moving focus                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Customization\nDESCRIPTION: Component import declaration for the pickers customization section.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/PickersCustomization.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Tree View Custom Icons\nDESCRIPTION: Example showing how to migrate custom expand icons to use the new slots API\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: jsx\nCODE:\n```\n<SimpleTreeView\n-  defaultExpandIcon={<MyCustomExpandIcon />}\n+  slots={{ expandIcon: MyCustomExpandIcon }}\n>\n  {items}\n</SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Using onAccept Callback in DatePicker\nDESCRIPTION: Example of implementing an onAccept callback to send the final selected value to a server.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker onAccept={(value) => sendValueToServer(value)} />\n```\n\n----------------------------------------\n\nTITLE: Importing Prompt Field Components in React\nDESCRIPTION: Code snippet showing how to import all Prompt Field components from the MUI X Data Grid Premium package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/prompt-field/prompt-field.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  PromptField,\n  PromptFieldRecord,\n  PromptFieldControl,\n  PromptFieldSend,\n} from '@mui/x-data-grid-premium';\n\n<PromptField>\n  <PromptFieldRecord />\n  <PromptFieldControl />\n  <PromptFieldSend />\n</PromptField>;\n```\n\n----------------------------------------\n\nTITLE: Running Components to Slots Migration Codemod\nDESCRIPTION: Command to run the codemod for migrating from components/componentsProps to slots/slotProps naming convention\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Updating DatePicker Toolbar Props\nDESCRIPTION: Migration example showing how to update from showToolbar prop to using slotProps configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  showToolbar\n+  slotProps={{\n+    toolbar: {\n+      hidden: false,\n+    }\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating adapter.isValid method to accept only parsed dates\nDESCRIPTION: Shows how to modify code using the isValid method across different date adapters (dayjs, luxon, moment, date-fns) to accept only properly parsed date objects instead of raw strings or dates.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_91\n\nLANGUAGE: diff\nCODE:\n```\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdatperMoment();\n\n // Supported formats\n const isValid = adapterDayjs.isValid(null); // Same for the other adapters\n const isValid = adapterLuxon.isValid(DateTime.now());\n const isValid = adapterMoment.isValid(moment());\n const isValid = adapterDateFns.isValid(new Date());\n\n // Non-supported formats (JS Date)\n-const isValid = adapterDayjs.isValid(new Date('2022-04-17'));\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid(new Date('2022-04-17'));\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid(new Date('2022-04-17'));\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isValid = adapterDayjs.isValid('2022-04-17');\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid('2022-04-17');\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid('2022-04-17');\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n-const isValid = adapterDateFns.isValid('2022-04-17');\n+const isValid = adapterDateFns.isValid(new Date('2022-04-17'));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stacked Bar Chart with MUI X in JavaScript\nDESCRIPTION: This example illustrates how to create a stacked bar chart using MUI X Charts. It likely demonstrates multiple data series stacked on top of each other within each bar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/bar-demo/bar-demo.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Renaming Default Toolbar Title Localization Keys in MUI X Pickers\nDESCRIPTION: Migration codemod to rename toolbar-related translation keys in LocalizationProvider, removing the 'Default' part from key names to better match their usage.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n <LocalizationProvider\n   localeText={{\n-    datePickerDefaultToolbarTitle: 'Date Picker',\n+    datePickerToolbarTitle: 'Date Picker',\n-    timePickerDefaultToolbarTitle: 'Time Picker',\n+    timePickerToolbarTitle: 'Time Picker',\n-    dateTimePickerDefaultToolbarTitle: 'Date Time Picker',\n+    dateTimePickerToolbarTitle: 'Date Time Picker',\n-    dateRangePickerDefaultToolbarTitle: 'Date Range Picker',\n+    dateRangePickerToolbarTitle: 'Date Range Picker',\n   }}\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-default-toolbar-title-localeText <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Tooltip Props in LineChart Component\nDESCRIPTION: Change the way tooltip props are passed to the LineChart component using slotProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <LineChart\n-   tooltip={{ trigger: 'item' }}\n+   slotProps={{ tooltip: { trigger: 'item' }}}\n />\n```\n\n----------------------------------------\n\nTITLE: Getting Row IDs by Group Path in TypeScript\nDESCRIPTION: Shows how to retrieve row IDs for a group using its grouping criteria path.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst rows = apiRef.current.getRowGroupChildren({\n  groupId: getGroupRowIdFromPath([{ field: 'company', key: 'Disney Studios' }]),\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration for Clock View\nDESCRIPTION: Theme configuration to enable TimeClock UI on desktop pickers\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiDesktopTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n    MuiDesktopDateTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Single-Select Tree View Controls\nDESCRIPTION: Table defining keyboard controls specifically for single-select Tree View interactions\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/accessibility/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                         Keys | Description                                                  |\n| ---------------------------: | :----------------------------------------------------------- |\n| <kbd class=\"key\">Space</kbd> | Toggles the selection state of the focused item.             |\n| <kbd class=\"key\">Enter</kbd> | Selects the focused item if the item does not have children. |\n```\n\n----------------------------------------\n\nTITLE: Updating CalendarPickerSkeleton Component Name in Theme\nDESCRIPTION: The CalendarPickerSkeleton component name in the theme has been updated to DayCalendarSkeleton.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n-MuiCalendarPickerSkeleton: {\n+MuiDayCalendarSkeleton: {\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Imports Transformation\nDESCRIPTION: Demonstrates how to update selector import names in Data Grid, changing selectedGridRowsSelector to gridRowSelectionIdsSelector and selectedGridRowsCountSelector to gridRowSelectionCountSelector.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-import { selectedGridRowsSelector, selectedGridRowsCountSelector } from '@mui/x-data-grid';\n+import { gridRowSelectionIdsSelector, gridRowSelectionCountSelector } from '@mui/x-data-grid';\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Adapter Date-Fns Imports Codemod Command\nDESCRIPTION: Command to execute the rename-adapter-date-fns-imports codemod that updates date adapter import paths.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/pickers/rename-adapter-date-fns-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Replacing BaseSingleInputFieldProps for Custom Date Range Field\nDESCRIPTION: Simplified replacement for BaseSingleInputFieldProps when building a custom date range field. The complex type combination is replaced with the more straightforward DateRangePickerFieldProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n-import {\n-  DateRangeValidationError,\n-  RangeFieldSection,\n-  DateRange,\n-} from '@mui/x-date-pickers-pro/models';\n-import {\n-  UseSingleInputDateRangeFieldProps\n-} from '@mui/x-date-pickers-pro/SingleInputDateRangeField';\n+import { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n-interface CustomDateRangeFieldProps\n-  extends UseSingleInputDateRangeFieldProps<Dayjs, true>,\n-    BaseSingleInputFieldProps<\n-      DateRange<Dayjs>,\n-      Dayjs,\n-      RangeFieldSection,\n-      true,\n-      DateRangeValidationError\n-    >\n+interface CustomDateRangeFieldProps extends DateRangePickerFieldProps {}\n```\n\n----------------------------------------\n\nTITLE: Updating TreeItem Hook Usage\nDESCRIPTION: Shows how to migrate from useTreeItem hook to the new useTreeItemState hook.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeItem, useTreeItem } from '@mui/x-tree-view/TreeItem';\n+import { TreeItem, useTreeItemState } from '@mui/x-tree-view/TreeItem';\n\n const CustomContent = React.forwardRef((props, ref) => {\n-  const { disabled } = useTreeItem(props.itemId);\n+  const { disabled } = useTreeItemState(props.itemId);\n\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Field Props Interface Usage\nDESCRIPTION: Example showing how to type custom field components using the provided field props interfaces from MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/custom-field/custom-field.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DatePickerFieldProps } from '@mui/x-date-pickers/DatePicker';\nimport { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\nfunction CustomDateField(props: DatePickerFieldProps) {\n  // Your custom field\n}\n\nfunction CustomDateRangeField(props: DateRangePickerFieldProps) {\n  // Your custom field\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing defaultCalendarMonth with referenceDate Prop\nDESCRIPTION: Breaking change replacing defaultCalendarMonth prop with the more flexible referenceDate prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n- <DateCalendar defaultCalendarMonth={dayjs('2022-04-01')};\n+ <DateCalendar referenceDate{dayjs('2022-04-01')} />\n```\n\n----------------------------------------\n\nTITLE: Migrating from startText/endText to localeText in DateRangePicker\nDESCRIPTION: Example of how to replace the deprecated startText and endText props with the new localeText prop in DateRangePicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_78\n\nLANGUAGE: diff\nCODE:\n```\n <DateRangePicker\n-  startText=\"From\"\n-  endText=\"To\"\n+  localeText={{\n+    start: 'From',\n+    end: 'To',\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Using keepExistingSelection in React Tree View API\nDESCRIPTION: Demonstrates how to use the keepExistingSelection property with the setItemSelection API method in a multi-select Tree View.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/simple-tree-view/selection/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ApiMethodSetItemSelectionKeepExistingSelection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling MUI X Telemetry via muiXTelemetrySettings\nDESCRIPTION: Uses the muiXTelemetrySettings object from @mui/x-license package to enable telemetry programmatically. Also shows how to enable debug mode for logging telemetry data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/guides/telemetry/telemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { muiXTelemetrySettings } from '@mui/x-license';\n\nmuiXTelemetrySettings.enableTelemetry();\n\n// Optional: Enable debug mode\nmuiXTelemetrySettings.enableDebug();\n```\n\n----------------------------------------\n\nTITLE: Migrating from useMultiInputDateTimeRangeField to useMultiInputRangeField\nDESCRIPTION: Code example showing how to migrate from the deprecated useMultiInputDateTimeRangeField hook to the new useMultiInputRangeField hook with useDateTimeRangeManager for improved developer experience.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputDateTimeRangeField as useMultiInputDateTimeRangeField } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n+import { useDateTimeRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date-time');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n\n-  const fieldResponse = useMultiInputDateTimeRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useDateTimeRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Event Variable Names in DataGrid\nDESCRIPTION: Fixes naming of pageChange and pageSizeChange events variables by prefixing with 'GRID_' and converting to UPPER_CASE.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_17\n\nLANGUAGE: Diff\nCODE:\n```\n-import { GRID_PAGESIZE_CHANGED, GRID_PAGE_CHANGED } from '@material-ui/data-grid';\n+import { GRID_PAGESIZE_CHANGE, GRID_PAGE_CHANGE } from '@material-ui/data-grid';\n```\n\n----------------------------------------\n\nTITLE: Descending Years Order Calendar\nDESCRIPTION: Implementation of year view with descending order display.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nYearsOrderDescendingCalendar.js\n```\n\n----------------------------------------\n\nTITLE: Migrating range position props to usePickerRangePositionContext hook\nDESCRIPTION: Shows how to replace rangePosition and onRangePositionChange props with the usePickerRangePositionContext hook in range pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerRangePositionContext } from '@mui/x-date-pickers-pro/hooks';\n\n-const { rangePosition } = props;\n+const { rangePosition } = usePickerRangePositionContext();\n\n-const { onRangePositionChange } = props;\n-onRangePositionChange('start');\n+const { setRangePosition } = usePickerRangePositionContext();\n+setRangePosition('start');\n```\n\n----------------------------------------\n\nTITLE: Using AdapterDateFns with date-fns v2\nDESCRIPTION: Code example showing how to use the AdapterDateFns with date-fns version 2.x for the date pickers component. This demonstrates importing the adapter and the locale from date-fns.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// with date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport de from 'date-fns/locale/de';\n```\n\n----------------------------------------\n\nTITLE: Updating License Key Import\nDESCRIPTION: Changes the import location for LicenseInfo from data-grid packages to @mui/x-license\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-data-grid-pro';\\n-import { LicenseInfo } from '@mui/x-data-grid-premium';\\n+import { LicenseInfo } from '@mui/x-license';\\n\\n LicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\n----------------------------------------\n\nTITLE: Updating Selection Model Control\nDESCRIPTION: Normalizes the controlled prop signature for selection model changes and removes onRowSelected.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onSelectionModelChange={(params: GridSelectionModelChangeParams) => setSelectionModel(params.model)}\n+  onSelectionModelChange={(model: GridSelectionModel) => setSelectionModel(model)}\n />\n```\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onRowSelected={(params: GridRowSelectedParams) =>  }\n+  onSelectionModelChange={(model: GridSelectionModel) => }\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Component Names\nDESCRIPTION: Changes the component names in the theme configuration to match the new component names.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-MuiCalendarPicker: {\n+MuiDateCalendar: {\n\n-MuiDayPicker: {\n+MuiDayCalendar: {\n\n-MuiCalendarPickerSkeleton: {\n+MuiDayCalendarSkeleton: {\n\n-MuiMonthPicker: {\n+MuiMonthCalendar: {\n\n-MuiYearPicker: {\n+MuiYearCalendar: {\n\n-MuiClockPicker: {\n+MuiTimeClock: {\n```\n\n----------------------------------------\n\nTITLE: Importing Date Picker Components\nDESCRIPTION: JavaScript imports for DatePicker component and LocalizationProvider from MUI X date pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n```\n\n----------------------------------------\n\nTITLE: Restricting Input Format of the isValid() Method in MUI X Date Adapters\nDESCRIPTION: Changes to the isValid() method to accept only parsed date objects or null values instead of attempting to parse any input type. The method now requires using the native date objects for each adapter (dayjs, DateTime, moment, or Date) rather than directly accepting strings or JS Date objects.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isValid = adapterDayjs.isValid(null); // Same for the other adapters\n const isValid = adapterLuxon.isValid(DateTime.now());\n const isValid = adapterMoment.isValid(moment());\n const isValid = adapterDateFns.isValid(new Date());\n\n // Non-supported formats (JS Date)\n-const isValid = adapterDayjs.isValid(new Date('2022-04-17'));\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid(new Date('2022-04-17'));\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid(new Date('2022-04-17'));\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isValid = adapterDayjs.isValid('2022-04-17');\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid('2022-04-17');\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid('2022-04-17');\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n-const isValid = adapterDateFns.isValid('2022-04-17');\n+const isValid = adapterDateFns.isValid(new Date('2022-04-17'));\n```\n\n----------------------------------------\n\nTITLE: Controlling Date Range Picker Value\nDESCRIPTION: Demonstration of controlled vs uncontrolled value management in DateRangePicker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"DateRangePickerValue.js\"\n```\n\n----------------------------------------\n\nTITLE: Renaming TreeView selectItem Method\nDESCRIPTION: Breaking change showing the rename of selectItem method to setItemSelection in TreeView component. The method now uses a single object parameter containing event, itemId and shouldBeSelected properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nconst { publicAPI } = useTreeItemUtils();\n\nconst handleSelectItem() {\n-  publicAPI.selectItem({ event, itemId: props.itemId, shouldBeSelected: true })\n+  publicAPI.setItemSelection({ event, itemId: props.itemId, shouldBeSelected: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Pagination Translations in JavaScript\nDESCRIPTION: Example of updating translations for the Table Pagination component when using estimatedRowCount in the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid, useGridApiContext } from '@mui/x-data-grid';\n\nconst theme = createTheme({\n  components: {\n    MuiTablePagination: {\n      defaultProps: {\n        rowsPerPageOptions: [10, 25, 50, 100],\n        getItemAriaLabel: (type) => {\n          return type === 'first' ? 'Go to first page'\n            : type === 'last' ? 'Go to last page'\n            : type === 'next' ? 'Go to next page'\n            : 'Go to previous page';\n        },\n        labelDisplayedRows: ({ from, to, count }) => {\n          const api = useGridApiContext();\n          const paginationModel = api.current.state.pagination.paginationModel;\n          const totalEstimatedRows = paginationModel.totalEstimatedRows ?? count;\n          return `${from}–${to} of ${totalEstimatedRows} (${count} loaded)`;\n        },\n      },\n    },\n  },\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DataGrid {...} />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Filter Item Props in MUI X Data Grid\nDESCRIPTION: Migration codemod to rename filter item properties from columnField to field and operatorValue to operator in filter model configurations.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n  columns={columns}\n  rows={rows}\n  initialState={{\n    filter: {\n      filterModel: {\n        items: [\n          {\n-           columnField: 'column',\n-           operatorValue: 'contains',\n+           field: 'column',\n+           operator: 'contains',\n            value: 'a',\n          },\n        ],\n      },\n    },\n  }}\n  filterModel={{\n    items: [\n      {\n-       columnField: 'column',\n-       operatorValue: 'contains',\n+       field: 'column',\n+       operator: 'contains',\n        value: 'a',\n      },\n    ],\n  }}\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-filter-item-props <path>\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Tree View Pro Package with npm\nDESCRIPTION: Command to install the MUI X Tree View Pro package using npm. This installs the Pro plan edition of the Tree View components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-tree-view-pro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-tree-view-pro\n```\n\n----------------------------------------\n\nTITLE: Updating Date Pickers Package Version in package.json\nDESCRIPTION: Update the version of @mui/x-date-pickers and @mui/x-date-pickers-pro to 'latest' in the package.json file.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-date-pickers\": \"7.x.x\",\n+\"@mui/x-date-pickers\": \"latest\",\n\n-\"@mui/x-date-pickers-pro\": \"7.x.x\",\n+\"@mui/x-date-pickers-pro\": \"latest\",\n```\n\n----------------------------------------\n\nTITLE: Replacing PopperProps with component slots in DatePicker\nDESCRIPTION: Migration for replacing the PopperProps prop with the new component slots pattern in desktop and responsive Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n // Same on DesktopDatePicker, DateTimePicker, DesktopDateTimePicker,\n // TimePicker, DesktopTimePicker, DateRangePicker and DesktopDateRangePicker.\n <DatePicker\n-  PopperProps={{ onClick: handleClick }}\n+  componentsProps={{ popper: { onClick: handleClick }}}\n />\n```\n\n----------------------------------------\n\nTITLE: Replacing NonEmptyDateRange Type in TypeScript with Various Date Adapters\nDESCRIPTION: Implementation of NonEmptyDateRange type for different date adapters including DayJS, Luxon, Moment, and DateFns. Each implementation is adapter-specific with the appropriate date type.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// When using AdapterDayjs\nimport { Dayjs } from 'dayjs';\ntype NonEmptyDateRange = [Dayjs, Dayjs];\n\n// When using AdapterLuxon\nimport { DateTime } from 'luxon';\ntype NonEmptyDateRange = [DateTime, DateTime];\n\n// When using AdapterMoment, AdapterMomentJalaali or AdapterMomentHijri\nimport { Moment } from 'moment';\ntype NonEmptyDateRange = [Moment, Moment];\n\n// When using AdapterDateFns, AdapterDateFnsV3, AdapterDateFnsJalali or AdapterDateFnsJalaliV3\ntype NonEmptyDateRange = [Date, Date];\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies for MUI X Tree View Pro\nDESCRIPTION: JSON object listing the peer dependencies required for the MUI X Tree View Pro package. Includes version requirements for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-tree-view-pro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Data Grid Premium Package\nDESCRIPTION: Command to install the MUI X Data Grid Premium package using npm package manager\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid-premium/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-data-grid-premium\n```\n\n----------------------------------------\n\nTITLE: TypeScript Row Pinning Configuration\nDESCRIPTION: Example showing how to enable row pinning feature in MUI X DataGrid Pro\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexperimentalFeatures={{ rowPinning: true }}\n```\n\n----------------------------------------\n\nTITLE: Number Signature Interface for Column Spanning\nDESCRIPTION: The TypeScript interface showing the number signature for colSpan which sets all cells in a column to span a fixed number of columns.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-spanning/column-spanning.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridColDef {\n  colSpan?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Augmentation\nDESCRIPTION: Example of TypeScript theme augmentation for customizing DatePicker components with proper type support.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {} from '@mui/x-date-pickers/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiDatePicker: {\n      defaultProps: {\n        displayWeekNumber: true,\n      },\n    },\n    MuiDateRangeCalendar: {\n      styleOverrides: {\n        root: {\n          backgroundColor: '#f0f0f0',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Data Grid Density Migration Example 1\nDESCRIPTION: Shows how to migrate the density prop to use initialState for Data Grid component\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  density=\"compact\"\n+  initialState={{ density: \"compact\" }}\n />\n```\n\n----------------------------------------\n\nTITLE: Migrating locale to adapterLocale in LocalizationProvider\nDESCRIPTION: Example showing how to update the deprecated locale prop to the new adapterLocale prop in LocalizationProvider component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_79\n\nLANGUAGE: diff\nCODE:\n```\n <LocalizationProvider\n   dateAdapter={AdapterDayjs}\n-  locale=\"fr\"\n+  adapterLocale=\"fr\"\n >\n   {children}\n </LocalizationProvider>\n```\n\n----------------------------------------\n\nTITLE: Updating dayOfWeekFormatter Prop in DateCalendar Component (JSX)\nDESCRIPTION: The dayOfWeekFormatter prop now receives a date object instead of a string, allowing for more flexibility in formatting.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_73\n\nLANGUAGE: jsx\nCODE:\n```\n<DateCalendar\n  // If you were still using the day string, you can get it back with your date library.\n-  dayOfWeekFormatter={dayStr => `${dayStr}.`}\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n\n  // If you were already using the day object, just remove the first argument.\n-  dayOfWeekFormatter={(_dayStr, day) => `${day.format('dd')}.`}\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing defaultCalendarMonth with referenceDate\nDESCRIPTION: Migration example showing how to replace the deprecated defaultCalendarMonth prop with the new referenceDate prop in DateCalendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-<DateCalendar defaultCalendarMonth={dayjs('2022-04-01')};\n+<DateCalendar referenceDate={dayjs('2022-04-01')} />\n```\n\n----------------------------------------\n\nTITLE: Replacing TrapFocusProps with component slots in DatePicker\nDESCRIPTION: Migration for replacing the TrapFocusProps prop with the new component slots pattern in desktop and responsive Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n // Same on DesktopDatePicker, DateTimePicker, DesktopDateTimePicker,\n // TimePicker, DesktopTimePicker, DateRangePicker and DesktopDateRangePicker.\n <DatePicker\n-  TrapFocusProps={{ isEnabled: () => false }}\n+  componentsProps={{ desktopTrapFocus: { isEnabled: () => false }}}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Shortcuts Slot onChange Callback in React\nDESCRIPTION: Example of how to update the onChange callback for the shortcuts slot in Date Pickers to include new required parameters.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_66\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomShortcuts = (props) => {\n  return (\n    <React.Fragment>\n      {props.items.map(item => {\n        const value = item.getValue({ isValid: props.isValid });\n        return (\n          <button\n-            onClick={() => onChange(value)}\n+            onClick={() => onChange(value, props.changeImportance ?? 'accept', item)}\n          >\n            {value}\n          </button>\n        )\n      }})\n    </React.Fragment>\n  )\n}\n\n<DatePicker slots={{ shortcuts: CustomShortcuts }} />\n```\n\n----------------------------------------\n\nTITLE: Updating Arrow Button Props in React Date Picker\nDESCRIPTION: Demonstrates how to update the LeftArrowButton and RightArrowButton component slots and their props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n-  components={{\n-    LeftArrowButton: CustomButton,\n-    RightArrowButton: CustomButton,\n-  }}\n+  slots={{\n+    previousIconButton: CustomButton,\n+    nextIconButton: CustomButton,\n+  }}\n-  componentsProps={{\n-    leftArrowButton: {},\n-    rightArrowButton: {},\n-  }}\n+  slotProps={{\n+    previousIconButton: {},\n+    nextIconButton: {},\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods\nDESCRIPTION: Commands to run the preset-safe codemod for automatically updating code to v7 compatibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Tree View specific\nnpx @mui/x-codemod@latest v7.0.0/tree-view/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Example Print Export Error Fix Code\nDESCRIPTION: Code related to fixing error after closing print export in DataGridPremium component\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[DataGridPremium] Fix error after closing print export (#11889) @cherniavskii\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Community/Pro\nDESCRIPTION: Component import declaration for the community vs pro features comparison.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/PickersCommunityOrPro.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating Range Picker Position Props to usePickerRangePositionContext\nDESCRIPTION: Shows how to access and modify range picker position using the usePickerRangePositionContext hook instead of receiving the props directly.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerRangePositionContext } from '@mui/x-date-pickers-pro/hooks';\n\n-const { rangePosition } = props;\n+const { rangePosition } = usePickerRangePositionContext();\n\n-const { onRangePositionChange } = props;\n-onRangePositionChange('start');\n+const { setRangePosition } = usePickerRangePositionContext();\n+setRangePosition('start');\n```\n\n----------------------------------------\n\nTITLE: Updating Default View Handling in Pickers\nDESCRIPTION: Ensures that the default view in pickers is always up-to-date, improving consistency and reliability of the component's initial display.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n[pickers] Always use up-to-date `defaultView` (#10889) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Updating Column Width Property Access in DataGrid\nDESCRIPTION: Changes the way column width is accessed in callbacks, using the new computedWidth property instead of width.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns: GridColDef = [{\n  field: 'name',\n  width: 100,\n  renderCell: ({ value, colDef }) => {\n-    console.log(colDef.width!);\n+    console.log(colDef.computedWidth);\n    return value;\n  },\n}];\n```\n\n----------------------------------------\n\nTITLE: Updating dayPickerClasses Import\nDESCRIPTION: Breaking change renaming dayPickerClasses to dayCalendarClasses for consistency with DayCalendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_70\n\nLANGUAGE: diff\nCODE:\n```\n- import { dayPickerClasses } from '@mui/x-date-pickers/DateCalendar';\n+ import { dayCalendarClasses } from '@mui/x-date-pickers/DateCalendar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Luxon localized week settings\nDESCRIPTION: Example of how to configure Luxon week settings to maintain Monday as the first day of the week.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  firstDay: 1,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Community Data Grid in React\nDESCRIPTION: Shows how to import the free Community version of the MUI X Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataGrid } from '@mui/x-data-grid';\n```\n\n----------------------------------------\n\nTITLE: Using DateTimePicker with Custom Views and AMPM Format in React\nDESCRIPTION: Example of using DateTimePicker component with custom views and AMPM format, illustrating the updated default format in version 6.7.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DateTimePicker views={['day', 'hours', 'minutes']} ampm />\n```\n\n----------------------------------------\n\nTITLE: Grid Pivoting with Rows Demo\nDESCRIPTION: Shows how to implement row-based pivoting in a data grid where unique values in selected fields become new rows.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/pivoting/pivoting-explained.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nGridPivotingRows.js\n```\n\n----------------------------------------\n\nTITLE: Get Item DOM Element API Method\nDESCRIPTION: Shows how to get an item's DOM element using its ID through the API reference.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Data Grid ValueSetter Signature Change\nDESCRIPTION: Breaking change in GridColDef valueSetter method signature for performance optimization\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n- valueSetter: (params) => {\n-   const [firstName, lastName] = params.value!.toString().split(' ');\n-   return { ...params.row, firstName, lastName };\n- }\n+ valueSetter: (value, row) => {\n+   const [firstName, lastName] = value!.toString().split(' ');\n+   return { ...row, firstName, lastName };\n+}\n```\n\n----------------------------------------\n\nTITLE: Renaming nodeId to itemId in Tree Item\nDESCRIPTION: This codemod renames the nodeId prop to itemId in the Tree Item component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n <TreeItem\n-  nodeId='unique-id'\n+  itemId='unique-id'\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Item Content Padding with TypeScript\nDESCRIPTION: Example of styling a custom Tree Item content component with proper padding and indentation using styled components\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/tree-item-customization/tree-item-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomTreeItemContent = styled(TreeItemContent)(({ theme }) => ({\n  // ...other styles\n  paddingLeft: `calc(${theme.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`,\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Field Components with Unicode Characters\nDESCRIPTION: Helper function to clean Unicode characters from field values for testing purposes, particularly useful for RTL support and keyboard interactions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/base-concepts/base-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Helper removing specific characters\nconst cleanText = (string) =>\n  string.replace(/\\u200e|\\u2066|\\u2067|\\u2068|\\u2069/g, '');\n\n// Example of a test using the helper\nexpect(cleanText(input.value)).to.equal('04-17-2022');\n```\n\n----------------------------------------\n\nTITLE: React Component Diff in DataGrid\nDESCRIPTION: Shows a code change in DataGrid component where 'ContinuouseScaleName' was fixed to 'ContinuousScaleName' to correct a typo.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n- ContinuouseScaleName\n+ ContinuousScaleName\n```\n\n----------------------------------------\n\nTITLE: Migrating FieldValueType type to PickerValueType\nDESCRIPTION: Shows how to update the renamed type from FieldValueType to PickerValueType.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n-import { FieldValueType } from '@mui/x-date-pickers/models';\n-import { FieldValueType } from '@mui/x-date-pickers';\n-import { FieldValueType } from '@mui/x-date-pickers-pro';\n\n+import { PickerValueType } from '@mui/x-date-pickers/models';\n+import { PickerValueType } from '@mui/x-date-pickers';\n+import { PickerValueType } from '@mui/x-date-pickers-pro';\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Data Grid v7.28.0\nDESCRIPTION: Install the latest version of MUI X Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-data-grid@7.28.0\n```\n\n----------------------------------------\n\nTITLE: Running Preset-Safe Codemods for MUI X Data Grid v6.0.0\nDESCRIPTION: Command to run all safe codemods for migrating Data Grid components to v6.0.0, including all the individual transformations listed below.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Updating Selector Usage in MUI X Data Grid\nDESCRIPTION: Demonstrates how to update various selector usages to match the new API in v5.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-const map = sortedGridRowsSelector(state);\n+const map = new Map(gridSortedRowEntriesSelector(state).map(row => [row.id, row.model]));\n```\n\nLANGUAGE: diff\nCODE:\n```\n-const filterCount = filterGridItemsCounterSelector(state);\n+const filterCount = gridFilterActiveItemsSelector(state).length;\n```\n\nLANGUAGE: diff\nCODE:\n```\n-const rowModels = unorderedGridRowModelsSelector(apiRef.current.state);\n\n // using the `apiRef`\n+const rowModels = apiRef.current.getRowModels();\n\n // using selectors\n+const allRows = gridRowIdsSelector(apiRef.current.state);\n+const idRowsLookup = gridRowsLookupSelector(apiRef.current.state);\n+const rowModels = new Map(allRows.map((id) => [id, idRowsLookup[id]]));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Augmentation\nDESCRIPTION: Example of TypeScript theme augmentation for CSS overrides and default prop customization.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/quickstart/quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Pro and Premium users: add `-pro` or `-premium` suffix to package name\nimport type {} from '@mui/x-data-grid/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    // Use `MuiDataGrid` on DataGrid, DataGridPro and DataGridPremium\n    MuiDataGrid: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Visible Rows Lookup Usage\nDESCRIPTION: The visibleRowsLookup state structure has changed. This snippet shows how to update code that checked if a row is visible.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst visibleRowsLookup = gridVisibleRowsLookupSelector(apiRef);\n-const isRowVisible = visibleRowsLookup[rowId] === true;\n+const isRowVisible = visibleRowsLookup[rowId] !== false;\n```\n\n----------------------------------------\n\nTITLE: Updating GridApi getState Method\nDESCRIPTION: Changes how filter state is accessed, removing the stateId argument from getState method.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-const filterState = apiRef.current.getState('filter');\n+const filterState = apiRef.current.state.filter;\n```\n\n----------------------------------------\n\nTITLE: Using getRowId as a Selector in DataGrid\nDESCRIPTION: Extracts the getRowId() API method as a selector for improved performance in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nconst getRowId = useGridSelector(gridSelectors.getRowIdLookup);\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.toISO Method (JavaScript)\nDESCRIPTION: The adapter.toISO method has been removed. It can be replaced with direct usage of date library methods for Day.js, Luxon, DateFns, and Moment.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// For Day.js\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n\n// For Luxon\n-const isoString = adapter.toISO(value);\n+const isoString = value.toUTC().toISO({ format: 'extended' });\n\n// For DateFns\n-const isoString = adapter.toISO(value);\n+const isoString = dateFns.formatISO(value, { format: 'extended' });\n\n// For Moment\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Restoration\nDESCRIPTION: Example showing how to restore scroll position using initialState.scroll values\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/scrolling/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ScrollRestoration.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Border-based Row Spacing in React Data Grid\nDESCRIPTION: This snippet demonstrates how to use borders instead of margins for row spacing. It sets rowSpacingType to 'border' and applies custom styles to the row borders.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-height/row-height.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  getRowSpacing={...}\n  rowSpacingType=\"border\"\n  sx={{ '& .MuiDataGrid-row': { borderTopColor: 'yellow', borderTopStyle: 'solid' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Diacritics in Data Grid Filtering\nDESCRIPTION: Allows ignoring diacritics when filtering data in the Data Grid component. This improves search functionality for languages with accented characters.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n[DataGrid] Allow to ignore [diacritics](https://en.wikipedia.org/wiki/Diacritic) when filtering (#10569) @cherniavskii\n```\n\n----------------------------------------\n\nTITLE: Updating Locale Import in MUI X Date Pickers\nDESCRIPTION: Diff showing how to update the import statement for locales in MUI X Date Pickers v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-import { frFR } from '@mui/x-date-pickers';\n+import { frFR } from '@mui/x-date-pickers/locales';\n```\n\n----------------------------------------\n\nTITLE: Migrating to SimpleTreeView Component\nDESCRIPTION: Replace deprecated TreeView component with new SimpleTreeView component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n   return (\n-    <TreeView>\n+    <SimpleTreeView>\n       <TreeItem itemId=\"1\" label=\"First item\" />\n-    </TreeView>\n+    </SimpleTreeView>\n   );\n```\n\n----------------------------------------\n\nTITLE: Adjusting Transform Origin for Popper\nDESCRIPTION: Modifies the transform-origin when the popper opens to the top in pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Fix to `transform-origin` when popper opens to `top` (#10069) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridPro with Auto-Height Detail Panel\nDESCRIPTION: Example of configuring DataGridPro component with auto-height detail panel using getDetailPanelHeight prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<DataGridPro getDetailPanelHeight={() => 'auto'} />\n```\n\n----------------------------------------\n\nTITLE: Renaming LinkOperators to LogicOperators in MUI X Data Grid\nDESCRIPTION: Migration codemod to rename linkOperators props, methods, and classes to logicOperators across filter model configuration and styling in Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n const [filterModel, setFilterModel] = React.useState<GridFilterModel>({\n    items: [],\n-   linkOperator: GridLinkOperator.Or,\n-   quickFilterLogicOperator: GridLinkOperator.Or,\n+   logicOperator: GridLogicOperator.Or,\n+   quickFilterLogicOperator: GridLogicOperator.Or,\n  });\n- apiRef.current.setFilterLinkOperator('and')\n- const localeText = apiRef.current.getLocaleText('filterPanelLinkOperator')\n+ apiRef.current.setFilterLogicOperator('and')\n+ const localeText = apiRef.current.getLocaleText('filterPanelLogicOperator')\n <DataGrid\n  initialState={{\n    filter: {\n      filterModel: {\n        items: [],\n-       linkOperator: GridLinkOperator.Or,\n-       quickFilterLogicOperator: GridLinkOperator.Or,\n+       logicOperator: GridLogicOperator.Or,\n+       quickFilterLogicOperator: GridLogicOperator.Or,\n      },\n    },\n  }}\n  filterModel={filterModel}\n  componentsProps={{\n    filter: {\n-     linkOperators: [GridLinkOperator.And],\n+     logicOperators: [GridLogicOperator.And],\n      filterFormProps: {\n-       linkOperatorInputProps: {\n+       logicOperatorInputProps: {\n          variant: 'outlined',\n          size: 'small',\n        },\n      },\n    },\n  }}\n  sx={{\n-   '& .MuiDataGrid-filterFormLinkOperatorInput': { mr: 2 },\n-   '& .MuiDataGrid-withBorder': { borderColor: '#456' },\n+   '& .MuiDataGrid-filterFormLogicOperatorInput': { mr: 2 },\n+   '& .MuiDataGrid-withBorderColor': { borderColor: '#456' },\n  }}\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-linkOperators-logicOperators <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Package Versions in package.json\nDESCRIPTION: Updates the version specifications for @mui/x-data-grid packages from v7 to latest in package.json\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\"-\\\"@mui/x-data-grid\\\": \\\"^7.x.x\\\",\\n+\\\"@mui/x-data-grid\\\": \\\"latest\\\",\\n\\n-\\\"@mui/x-data-grid-pro\\\": \\\"^7.x.x\\\",\\n+\\\"@mui/x-data-grid-pro\\\": \\\"latest\\\",\\n\\n-\\\"@mui/x-data-grid-premium\\\": \\\"^7.x.x\\\",\\n+\\\"@mui/x-data-grid-premium\\\": \\\"latest\\\",\n```\n\n----------------------------------------\n\nTITLE: Updating Time Disable Logic\nDESCRIPTION: Shows migration from shouldDisableClock to shouldDisableTime prop\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <DateTimePicker\n-  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n />\n```\n\n----------------------------------------\n\nTITLE: Augmenting Theme Types for MUI X Tree View in TypeScript\nDESCRIPTION: TypeScript code for augmenting theme types to enable CSS overrides and default prop customization for the MUI X Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {} from '@mui/x-tree-view/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiRichTreeView: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiny Area Chart with MUI X Charts in JavaScript\nDESCRIPTION: This example demonstrates how to create a compact area chart, likely for use in dashboards or small spaces where a full-sized chart isn't necessary.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/areas-demo/areas-demo.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// TinyAreaChart.js\n// Code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests from Project Root\nDESCRIPTION: Command to run performance tests from the root of the project, specifically targeting the @mui-x-internal/performance-charts package.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/performance-charts/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter \"@mui-x-internal/performance-charts\" test:performance\n```\n\n----------------------------------------\n\nTITLE: Initializing DataGrid Translation with Material UI Core\nDESCRIPTION: Example showing how to set up translations for both MUI X DataGrid and Material UI core components using ThemeProvider.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { DataGrid, bgBG } from '@material-ui/data-grid';\nimport { bgBG as coreBgBG } from '@material-ui/core/locale';\n\nconst theme = createMuiTheme(\n  {\n    // ...\n  },\n  bgBG,\n  coreBgBG,\n);\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Row Spanning Feature\nDESCRIPTION: Breaking change showing the transition of row spanning feature from unstable to stable API.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  unstable_rowSpanning\n+  rowSpanning\n />\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Slots Types Codemod Command\nDESCRIPTION: Command to execute the rename-slots-types codemod that updates slot-related type names.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/pickers/rename-slots-types <path>\n```\n\n----------------------------------------\n\nTITLE: Updated GridValueFormatterParams Interface Definition\nDESCRIPTION: Breaking change to the GridValueFormatterParams interface structure, replacing the previous type with a new interface containing explicit field, value and api properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n-export type GridValueFormatterParams = Omit<GridRenderCellParams, 'formattedValue' | 'isEditable'>;\n+export interface GridValueFormatterParams {\n+  /**\n+   * The column field of the cell that triggered the event.\n+   */\n+  field: string;\n+  /**\n+   * The cell value, but if the column has valueGetter, use getValue.\n+   */\n+  value: GridCellValue;\n+  /**\n+   * GridApi that let you manipulate the grid.\n+   */\n+  api: any;\n+}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Date Pickers Pro\nDESCRIPTION: Commands for installing the pro version of MUI X Date Pickers and the license package using different package managers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\n----------------------------------------\n\nTITLE: Removing isColumnVisibleInWindow API Method\nDESCRIPTION: Removes the public apiRef.current.isColumnVisibleInWindow() method as it serves private use cases.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-apiRef.current.isColumnVisibleInWindow();\n```\n\n----------------------------------------\n\nTITLE: Running Tree View Preset-Safe Codemod\nDESCRIPTION: This bash command runs the preset-safe codemods for Tree View v7.0.0, which includes multiple transformers.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/tree-view/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Event Subscription in TypeScript\nDESCRIPTION: Updates the method of subscribing to Data Grid events by removing the use of the GridEvents enum.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n-apiRef.current.subscribeEvent(GridEvents.rowClick', handleRowClick);\n+apiRef.current.subscribeEvent('rowClick', handleRowClick);\n```\n\n----------------------------------------\n\nTITLE: Updating Year Calendar Theme Configuration\nDESCRIPTION: Demonstrates changes in theme configuration for Year Calendar component styling\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n-    MuiPickersYear: {\n+    MuiYearCalendar: {\n       styleOverrides: {\n-        yearButton: {\n+        button: {\n           color: 'red',\n         },\n       },\n     },\n   });\n```\n\n----------------------------------------\n\nTITLE: Renaming publicAPI.selectItem() to setItemSelection in MUI-X Tree View (JavaScript)\nDESCRIPTION: This snippet demonstrates the renaming of the 'selectItem' method to 'setItemSelection' in the MUI-X Tree View component. The method signature remains the same, accepting an object with event, itemId, and shouldBeSelected properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n const { publicAPI } = useTreeItemUtils();\n\n const handleSelectItem() {\n-  publicAPI.selectItem({ event, itemId: props.itemId, shouldBeSelected: true })\n+  publicAPI.setItemSelection({ event, itemId: props.itemId, shouldBeSelected: true })\n }\n```\n\n----------------------------------------\n\nTITLE: Refactoring useGridColumnResize in XGrid\nDESCRIPTION: API changes to the column resize functionality in XGrid, replacing startResizeOnMouseDown with setColumnWidth.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n-startResizeOnMouseDown\n+setColumnWidth\n```\n\n----------------------------------------\n\nTITLE: Using useItemHighlightedGetter Hook in React for MUI X Charts\nDESCRIPTION: This code shows how to use the lower-level useItemHighlightedGetter hook to check highlight and fade status for multiple series in MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst { isFaded, isHighlighted } = useItemHighlightedGetter();\n\nconst itemIsHighlighted = isHighlighted({ seriesId, dataIndex });\n\n// First make sure the item is not highlighted.\nconst itemIsFaded = !itemIsHighlighted && isFaded({ seriesId, dataIndex });\n```\n\n----------------------------------------\n\nTITLE: Column Selector Renaming (TypeScript)\nDESCRIPTION: Demonstrates the changes in column selector naming conventions, showing the old and new names for various selectors.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n-const { all, lookup, columnVisibilityModel } = gridColumnsSelector(apiRef);\n+const all = gridColumnFieldsSelector(apiRef);\n+const lookup = gridColumnLookupSelector(apiRef);\n+const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n\n-const filterableFields = filterableGridColumnsIdsSelector(apiRef);\n+const lookup = gridFilterableColumnLookupSelector(apiRef);\n+const filterableFields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);\n\n-const visibleColumnsNumber = visibleGridColumnsLengthSelector(apiRef);\n+const visibleColumnsNumber = gridVisibleColumnDefinitionsSelector(apiRef).length;\n\n-const { totalWidth, positions } = gridColumnsMetaSelector(apiRef);\n+const totalWidth = gridColumnsTotalWidthSelector(apiRef);\n+const positions = gridColumnPositionsSelector(apiRef);\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Charts and Peer Dependencies\nDESCRIPTION: Commands for installing MUI X Charts package along with its peer dependencies including Material UI and React.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/quickstart/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Migrating from dateWithTimezone to date Method\nDESCRIPTION: Breaking change removing dateWithTimezone method in favor of using the date method directly.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_69\n\nLANGUAGE: diff\nCODE:\n```\n- adapter.dateWithTimezone(undefined, 'system');\n+ adapter.date(undefined, 'system');\n```\n\n----------------------------------------\n\nTITLE: Migrating nodeId to itemId\nDESCRIPTION: Update TreeItem component to use itemId instead of nodeId prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView>\n-  <TreeItem label=\"Item 1\" nodeId=\"one\">\n+  <TreeItem label=\"Item 1\" itemId=\"one\">\n </TreeView>\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getFormatHelperText Method (JavaScript)\nDESCRIPTION: The adapter.getFormatHelperText method has been removed. It can be replaced with adapter.expandFormat and additional transformations for each date library.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format);\n\n// For Day.js\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n\n// For Luxon\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(a)/g, '(a|p)m').toLocaleLowerCase();\n\n// For DateFns\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(aaa|aa|a)/g, '(a|p)m').toLocaleLowerCase();\n\n// For Moment\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n```\n\n----------------------------------------\n\nTITLE: Updating adapter.date Method Usage\nDESCRIPTION: Breaking change modifying adapter.date method behavior to only accept string | null | undefined as values.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_72\n\nLANGUAGE: diff\nCODE:\n```\n- adapter.date(new Date());\n+ adapter.date();\n\n- adapter.date(new Date('2022-04-17');\n+ adapter.date('2022-04-17');\n\n- adapter.date(new Date(2022, 3, 17, 4, 5, 34));\n+ adapter.date('2022-04-17T04:05:34');\n\n- adapter.date(new Date('Invalid Date'));\n+ adapter.getInvalidDate();\n```\n\n----------------------------------------\n\nTITLE: Updating endIcon Slot in TreeView\nDESCRIPTION: Shows how to migrate from defaultEndIcon prop to using the new slots API for defining end icons in TreeView component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  <SimpleTreeView\n-   defaultEndIcon={<MyCustomEndIcon />}\n+   slots={{ endIcon: MyCustomEndIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Migrating from TreeView to SimpleTreeView\nDESCRIPTION: Code changes required to migrate from TreeView to SimpleTreeView component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n   return (\n-    <TreeView>\n+    <SimpleTreeView>\n       <TreeItem itemId=\"1\" label=\"First item\" />\n-    </TreeView>\n+    </SimpleTreeView>\n   );\n```\n\n----------------------------------------\n\nTITLE: DataGrid Cell Editing Example\nDESCRIPTION: Implementation of cell editing functionality including keyboard shortcuts and IME support.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n// Example of enabling cell editing with keyboard shortcuts\n<DataGrid onCellEditStart={(params) => {\n  // Handle edit start\n}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Time Range Field in React\nDESCRIPTION: Shows how to use Time Range Field components with controlled and uncontrolled values. Controlled values are managed by the parent component, while uncontrolled values are managed internally.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-range-field/time-range-field.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TimeRangeFieldValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Clearable Field Interface Definitions\nDESCRIPTION: TypeScript interface definitions for clearable field properties, slots, and slot props used in picker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExportedUseClearableFieldProps {\n  clearable?: boolean;\n  onClear?: React.MouseEventHandler;\n}\n\ninterface UseClearableFieldSlots {\n  clearIcon?: React.ElementType;\n  clearButton?: React.ElementType;\n}\n\ninterface UseClearableFieldSlotProps {\n  clearIcon?: SlotComponentProps<typeof ClearIcon, {}, FieldOwnerState>;\n  clearButton?: SlotComponentProps<typeof IconButton, {}, FieldOwnerState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Remove Stabilized Experimental Features Codemod for MUI X Data Grid v6.0.0\nDESCRIPTION: This bash command runs the codemod to automatically remove stabilized experimental features in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/remove-stabilized-experimentalFeatures <path>\n```\n\n----------------------------------------\n\nTITLE: Updating field hooks implementation\nDESCRIPTION: Shows the changes needed for field hooks implementation including inputRef handling and API restructuring.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-const { inputRef, ...otherProps } = props\n-const fieldResponse = useDateField({ props: otherProps, inputRef });\n+const fieldResponse = useDateField(props);\n```\n\n----------------------------------------\n\nTITLE: Migrating from sortDirection to sortModel in DataGrid\nDESCRIPTION: Shows how to migrate from the deprecated sortDirection property in column definitions to using the sortModel prop for more consistent sorting in DataGrid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n-columns[1] = { ...columns[1], sortDirection: 'asc' };\n\n return (\n   <div>\n-   <DataGrid rows={rows} columns={columns} />\n+   <DataGrid rows={rows} columns={columns} sortModel={[{ field: columns[1].field, sort: 'asc' }]} />\n   </div>\n );\n```\n\n----------------------------------------\n\nTITLE: Basic List View Implementation in React MUI DataGrid\nDESCRIPTION: Demonstrates basic setup of list view in DataGridPro component using listViewColumn prop with a custom renderCell function.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/list-view/list-view.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ListViewCell(params: GridRenderCellParams) {\n  return <>{params.row.id}</>;\n}\n\nconst listViewColDef: GridListViewColDef = {\n  field: 'listColumn',\n  renderCell: ListViewCell,\n};\n\n<DataGridPro listViewColumn={listViewColDef} listView={true} />;\n```\n\n----------------------------------------\n\nTITLE: Using apiRef prop in DataGrid\nDESCRIPTION: The apiRef prop is now available in the @mui/x-data-grid package for accessing the grid API.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nconst apiRef = useGridApiRef();\n\nreturn <DataGrid apiRef={apiRef} {...other} />;\n```\n\n----------------------------------------\n\nTITLE: Updating DetailPanel Props Type Definition\nDESCRIPTION: Breaking change showing the migration from array to Set type for detail panel expanded row IDs and related handlers.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n-detailPanelExpandedRowIds?: GridRowId[];\n+detailPanelExpandedRowIds?: Set<GridRowId>;\n\n-onDetailPanelExpandedRowIdsChange?: (ids: GridRowId[], details: GridCallbackDetails) => void;\n+onDetailPanelExpandedRowIdsChange?: (ids: Set<GridRowId>, details: GridCallbackDetails) => void;\n```\n\n----------------------------------------\n\nTITLE: Pickers: Preset-Safe Codemod Command for v7.0.0\nDESCRIPTION: Command to run all safe transformations for Pickers components in v7.0.0, including renaming components to slots and updating class names.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/pickers/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Executing Changelog Generation Script in Bash\nDESCRIPTION: Command for generating release changelog with options for GitHub token, last release version, release branch, and next version specification.\nSOURCE: https://github.com/mui/mui-x/blob/master/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm release:changelog\n   --githubToken   YOUR_GITHUB_TOKEN (needs \"public_repo\" permission)\n   --lastRelease   The release to compare against (default: the last one)\n   --release       The branch to release (default: master)\n   --nextVersion   Expected version of the next release (if not provided, __VERSION__ placeholders must be updated manually)\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies for MUI X Data Grid\nDESCRIPTION: JSON object listing the peer dependencies required for the MUI X Data Grid component. Includes version requirements for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Notes Header\nDESCRIPTION: Markdown header showing version number and release date for MUI X components\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.16.1\n\n_Oct 6, 2023_\n```\n\n----------------------------------------\n\nTITLE: Removing DisableExtendRowFullWidth Prop in MUI X Data Grid\nDESCRIPTION: Migration codemod to remove the disableExtendRowFullWidth prop which is no longer supported in Data Grid v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  disableExtendRowFullWidth\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/remove-disableExtendRowFullWidth-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Updating DateRangePicker Toolbar Props in React\nDESCRIPTION: Renames the currentlySelectingRangeEnd and setCurrentlySelectingRangeEnd props to rangePosition and onRangePositionChange respectively in the Date Range Picker toolbar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\nconst CustomToolbarComponent = props => (\n  <div>\n-    <button onChange={() => props.setCurrentlySelectingRangeEnd('end')}>Edit end date</button>\n+    <button onClick={() => props.onRangePositionChange('end')}>Edit end date</button>\n-    <div>Is editing end date: {props.currentlySelectingRangeEnd === 'end'}</div>\n+    <div>Is editing end date: {props.rangePosition === 'end'}</div>\n  </div>\n)\n<DateRangePicker\n  components={{\n    Toolbar: CustomToolbarComponent\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Expansion Props in TreeView\nDESCRIPTION: Shows how to migrate from old expansion-related props to new prop names that better describe their behaviors.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView\n-  onNodeToggle={handleExpansionChange}\n+  onExpandedItemsChange={handleExpansionChange}\n\n-  expanded={expandedItems}\n+  expandedItems={expandedItems}\n\n-  defaultExpanded={defaultExpandedItems}\n+  defaultExpandedItems={defaultExpandedItems}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Group Transition in TreeItem\nDESCRIPTION: Shows how to migrate from TransitionComponent and TransitionProps to using the new slots API for defining group transitions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <SimpleTreeView>\n   <TreeItem\n     itemId=\"1\"\n     label=\"Item 1\"\n-    TransitionComponent={Fade}\n-    TransitionProps={{ timeout: 600 }}\n+    slots={{ groupTransition: Fade }}\n+    slotProps={{ groupTransition: { timeout: 600 } }}\n   />\n </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Items in React Heatmap Chart\nDESCRIPTION: Demonstrates how to create and implement custom items in a Heatmap chart to extend its functionality beyond the default visualization options.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/heatmap/heatmap.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nCustomItem.js\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Plugin States\nDESCRIPTION: Shows how to access and use state from other plugins within a custom plugin.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ store }) => {\n  const handleSomeAction = () => {\n    console.log(store.value.expansion.expandedItems);\n    const isExpanded = useSelector(selectorIsItemExpanded, 'some-item-id');\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TreeView API from Node Select to Selected Nodes\nDESCRIPTION: Migration diff showing the renamed selection props in the TreeView component. The props have been renamed to better describe their behaviors, changing from onNodeSelect to onSelectedNodesChange, selected to selectedNodes, and defaultSelected to defaultSelectedNodes.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n  <TreeView\n-   onNodeSelect={handleSelectionChange}\n+   onSelectedNodesChange={handleSelectionChange}\n\n-   selected={selectedNodes}\n+   selectedNodes={selectedNodes}\n\n-   defaultSelected={defaultSelectedNodes}\n+   defaultSelectedNodes={defaultSelectedNodes}\n  />\n```\n\n----------------------------------------\n\nTITLE: Setting MUI X Pro License Key\nDESCRIPTION: Code snippet for setting the MUI X Pro license key before rendering components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LicenseInfo } from '@mui/x-license-pro';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\n----------------------------------------\n\nTITLE: Updating ValueSetter Signature\nDESCRIPTION: Illustrates the changes in GridColDef's valueSetter signature for improved performance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-valueSetter: (params) => {\n-  const [firstName, lastName] = params.value!.toString().split(' ');\n-  return { ...params.row, firstName, lastName };\n-}\n+valueSetter: (value, row) => {\n+  const [firstName, lastName] = value!.toString().split(' ');\n+  return { ...row, firstName, lastName };\n+}\n```\n\n----------------------------------------\n\nTITLE: Rendering WhatsNewLayout Component in JavaScript\nDESCRIPTION: This code snippet renders a custom React component called WhatsNewLayout, which is likely used to display the content of the 'What's new' page for MUI X.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/whats-new/whats-new.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"component\": \"modules/components/WhatsNewLayout.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating endIcon Slot in TreeItem\nDESCRIPTION: Shows how to migrate from endIcon prop to using the new slots API for defining end icons in TreeItem component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     endIcon={<MyCustomEndIcon />}\n+     slots={{ endIcon: MyCustomEndIcon }}\n    />\n  </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Migrating usePickerContext onOpen/onClose to setOpen method\nDESCRIPTION: Example showing how to migrate from the separate onOpen and onClose methods to the new setOpen method in usePickerContext. The new approach requires manually preventing default behaviors.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n const pickerContext = usePickerContext();\n\n-<button onClick={pickerContext.onOpen}>Open</button>\n+<button onClick={() => pickerContext.setOpen(true)}>Open</button>\n\n-<button onClick={pickerContext.onClose}>Close</button>\n+<button onClick={() => pickerContext.setOpen(false)}>Open</button>\n\n-<button\n-  onClick={(event) =>\n-    pickerContext.open ? pickerContext.onClose(event) : pickerContext.onOpen(event)\n-  }\n->\n-  Toggle\n-</button>\n+<button onClick={() => pickerContext.setOpen(prev => !prev)}>Toggle</button>\n```\n\n----------------------------------------\n\nTITLE: API Changes for getRowModels in DataGrid\nDESCRIPTION: Breaking changes to row model access methods in the API, switching from array returns to Map objects for better performance and custom row ID support.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n-getRowModels: () => GridRowModel[];\n+getRowModels: () => Map<GridRowId, GridRowModel>;\n\n-getVisibleRowModels: () => GridRowModel[];\n+getVisibleRowModels: () => Map<GridRowId, GridRowModel>;\n\n-getSelectedRows: () => GridRowModel[];\n+getSelectedRows: () => Map<GridRowId, GridRowModel>;\n```\n\n----------------------------------------\n\nTITLE: Customizing FilterPanel Props in DataGrid\nDESCRIPTION: Example of how to customize the filter panel behavior by setting component props. The code demonstrates setting the column sort order to ascending in the filter panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  componentsProps={{\n    filterPanel: { columnsSort: 'asc' },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Renaming Row Selection Props in MUI X Data Grid\nDESCRIPTION: Migration codemod to update Data Grid props related to row selection and border styling to their new names in v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  selectionModel={model}\n+  rowSelectionModel={model}\n-  onSelectionModelChange={handler}\n+  onRowSelectionModelChange={handler}\n-  disableSelectionOnClick\n+  disableRowSelectionOnClick\n-  disableMultipleSelection\n+  disableMultipleRowSelection\n-  showCellRightBorder\n+  showCellVerticalBorder\n-  showColumnRightBorder\n+  showColumnVerticalBorder\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/row-selection-props-rename <path>\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - MainDemo\nDESCRIPTION: Component import declaration for the main picker demo component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/MainDemo.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getMonthArray Method (JavaScript)\nDESCRIPTION: The adapter.getMonthArray method has been removed. It can be replaced using adapter.startOfYear and adapter.addMonths methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n-const monthArray = adapter.getMonthArray(value);\n+const getMonthArray = (year) => {\n+  const firstMonth = utils.startOfYear(year);\n+  const months = [firstMonth];\n+\n+  while (months.length < 12) {\n+    const prevMonth = months[months.length - 1];\n+    months.push(utils.addMonths(prevMonth, 1));\n+  }\n+\n+  return months;\n+}\n+\n+const monthArray = getMonthArray(value);\n```\n\n----------------------------------------\n\nTITLE: Initializing Day.js with UTC Plugin\nDESCRIPTION: Sets up Day.js with the UTC plugin to enable UTC date handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGrid Selection Model\nDESCRIPTION: New selectionModel prop added for controlled selection of rows in DataGrid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nselectionModel={selectedRows}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Value Getter in Data Grid Column\nDESCRIPTION: Example showing how to update a valueGetter property in a column definition, changing from using getValue method to directly accessing row properties as recommended after deprecation.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n-valueGetter: (params) => `${params.getValue(params.id, 'firstName') || ''} ${params.getValue(params.id, 'lastName') || ''}`\n+valueGetter: (params) => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n```\n\n----------------------------------------\n\nTITLE: String Cleaning Utility Function\nDESCRIPTION: TypeScript utility function to clean strings by removing non-ASCII characters and extra spaces\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cleanString = (dirtyString: string) =>\n  dirtyString\n    .replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '') // Remove non-ASCII characters\n    .replace(/ \\/ /g, '/'); // Remove extra spaces\n```\n\n----------------------------------------\n\nTITLE: Defining Product ID in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter block defining the product ID for the date pickers documentation page.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/experimentation/experimentation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nproductId: x-date-pickers\n---\n```\n\n----------------------------------------\n\nTITLE: Required Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing the required peer dependencies including MUI Material, React, and React DOM with their supported version ranges\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid-premium/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Data Grid Specific Codemod\nDESCRIPTION: Command to run the Data Grid specific codemod for v7 migration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/data-grid/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Updating ChartsXAxis Props in React for MUI X Charts v8\nDESCRIPTION: This diff shows how to replace the deprecated labelFontSize and tickFontSize props with labelStyle and tickStyle objects in ChartsXAxis component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  <ChartsXAxis\n-   labelFontSize={18}\n+   labelStyle={{\n+     fontSize: 18\n+   }}\n-   tickFontSize={20}\n+   tickStyle={{\n+     fontSize: 20\n+   }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Updating Row Selection State Access\nDESCRIPTION: Demonstrates the changes needed for accessing row selection state using the new selection manager\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-const rowSelection = gridRowSelectionStateSelector(apiRef);\\n-const isRowSelected = rowSelection.includes(rowId);\\n+const rowSelectionManager = gridRowSelectionManagerSelector(apiRef);\\n+const isRowSelected = rowSelectionManager.has(rowId);\n```\n\n----------------------------------------\n\nTITLE: Migrating slotProps.field in Date Components\nDESCRIPTION: Examples of how to migrate slotProps.field usage with both the old and new DOM structures for date components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<DatePicker\n  slotProps={{ field: { shouldRespectLeadingZeros: true } }}\n  enableAccessibleFieldDOMStructure={false}\n />\n<DatePicker\n  slotProps={{ field: { shouldRespectLeadingZeros: true } }}\n/>\n```\n\nLANGUAGE: js\nCODE:\n```\n<DatePicker\n  slotProps={{ field: { size: 'small' } }}\n  enableAccessibleFieldDOMStructure={false}\n />\n<DatePicker\n  slotProps={{ field: { size: 'small' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Prop Forwarding Example\nDESCRIPTION: Shows how props are forwarded to HTML elements in components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Toolbar className=\"my-toolbar\" aria-label=\"Grid toolbar\" />\n\n// Rendered HTML:\n<div role=\"toolbar\" class=\"my-toolbar\" aria-label=\"Grid toolbar\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing Multi Input Date Time Field Section Selection\nDESCRIPTION: Addresses an issue with section selection in multi-input date time fields, improving the user experience when interacting with these components.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n[fields] Fix multi input date time field section selection (#10915) @noraleonte\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Type Imports Codemod Command\nDESCRIPTION: Command to execute the rename-type-imports codemod that updates picker component type names for v8.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/pickers/rename-type-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming Column Menu Components in MUI X Data Grid\nDESCRIPTION: Migration codemod to rename column menu item components and update their props to match the new API in Data Grid v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n <CustomColumnMenu>\n-  <GridFilterMenuItem column={column} onClick={hideMenu} />\n+  <GridColumnMenuFilterItem colDef={column} onClick={hideMenu} />\n-  <HideGridColMenuItem column={column} onClick={hideMenu} />\n+  <GridColumnMenuHideItem colDef={column} onClick={hideMenu} />\n-  <GridColumnsMenuItem column={column} onClick={hideMenu} />\n+  <GridColumnMenuColumnsItem colDef={column} onClick={hideMenu} />\n-  <SortGridMenuItems column={column} onClick={hideMenu} />\n+  <GridColumnMenuSortItem colDef={column} onClick={hideMenu} />\n-  <GridColumnPinningMenuItems column={column} onClick={hideMenu} />\n+  <GridColumnMenuPinningItem colDef={column} onClick={hideMenu} />\n </CustomColumnMenu>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/column-menu-components-rename <path>\n```\n\n----------------------------------------\n\nTITLE: Updating TreeView API from Node Toggle to Expanded Nodes\nDESCRIPTION: Migration diff showing the renamed expansion props in the TreeView component. The props have been renamed to better describe their behaviors, changing from onNodeToggle to onExpandedNodesChange, expanded to expandedNodes, and defaultExpanded to defaultExpandedNodes.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n  <TreeView\n-   onNodeToggle={handleExpansionChange}\n+   onExpandedNodesChange={handleExpansionChange}\n\n-   expanded={expandedNodes}\n+   expandedNodes={expandedNodes}\n\n-   defaultExpanded={defaultExpandedNodes}\n+   defaultExpandedNodes={defaultExpandedNodes}\n  />\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for PickersCalendarHeader Components (JavaScript)\nDESCRIPTION: The imports related to the calendarHeader slot have been moved from @mui/x-date-pickers/DateCalendar to @mui/x-date-pickers/PIckersCalendarHeader.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nexport {\n  pickersCalendarHeaderClasses,\n  PickersCalendarHeaderClassKey,\n  PickersCalendarHeaderClasses,\n  PickersCalendarHeader,\n  PickersCalendarHeaderProps,\n  PickersCalendarHeaderSlotsComponent,\n  PickersCalendarHeaderSlotsComponentsProps,\n  ExportedPickersCalendarHeaderProps,\n-} from '@mui/x-date-pickers/DateCalendar';\n+} from '@mui/x-date-pickers/PickersCalendarHeader';\n```\n\n----------------------------------------\n\nTITLE: Updating DatePicker Action Bar Props in React\nDESCRIPTION: Changes the structure of the actionBar prop in DatePicker from a callback to an object with actions property. This modification affects how actions are defined for desktop and mobile variants.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n<DatePicker\n  componentsProps={{\n-   actionBar: {\n-     actions: (variant) => (variant === 'desktop' ? [] : ['clear']),\n-   },\n+   actionBar: ({ wrapperVariant }) => ({\n+     actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n+   }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker with Year View in React\nDESCRIPTION: Example of using DatePicker component with only year view, demonstrating the new default format behavior in version 6.7.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DatePicker views={['year']} />\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Telemetry via Package Settings in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable or disable telemetry collection using the muiXTelemetrySettings object from either @mui/x-telemetry or @mui/x-license package.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-telemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { muiXTelemetrySettings } from '@mui/x-telemetry';\n// or\nimport { muiXTelemetrySettings } from '@mui/x-license';\n\nmuiXTelemetrySettings.enableTelemetry(); // to enable telemetry collection and sending\n// or\nmuiXTelemetrySettings.disableTelemetry(); // to disable telemetry collection and sending\n```\n\n----------------------------------------\n\nTITLE: Updating Class Name References in MUI X Data Grid\nDESCRIPTION: Shows how to replace individual string constants with the new gridClasses object for CSS class references.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-const columnHeaderClass = GRID_COLUMN_HEADER_CSS_CLASS;\n+const columnHeaderClass = gridClasses.columnHeader;\n\n-const rowClass = GRID_ROW_CSS_CLASS;\n+const rowClass = gridClasses.row;\n\n-const cellClass = GRID_CELL_CSS_CLASS;\n+const cellClass = gridClasses.cell;\n\n-const columnSeparatorClass = GRID_COLUMN_HEADER_SEPARATOR_RESIZABLE_CSS_CLASS;\n+const columnSeparatorClass = gridClasses['columnSeparator--resizable'];\n\n-const columnHeaderTitleClass = GRID_COLUMN_HEADER_TITLE_CSS_CLASS;\n+const columnHeaderTitleClass = gridClasses.columnHeaderTitle;\n\n-const columnHeaderDropZoneClass = GRID_COLUMN_HEADER_DROP_ZONE_CSS_CLASS;\n+const columnHeaderDropZoneClass = gridClasses.columnHeaderDropZone;\n\n-const columnHeaderDraggingClass = GRID_COLUMN_HEADER_DRAGGING_CSS_CLASS;\n+const columnHeaderDraggingClass = gridClasses['columnHeader--dragging'];\n```\n\n----------------------------------------\n\nTITLE: Running Data Grid Migration Codemods\nDESCRIPTION: Command-line instructions for running automated migration codemods to handle breaking changes between v5 and v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Data Grid specific\nnpx @mui/x-codemod@latest v6.0.0/data-grid/preset-safe <path>\n\n# Target Date and Time Pickers as well\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Defining Piecewise Color Map Configuration\nDESCRIPTION: TypeScript interface for configuring a piecewise color map that maps value ranges to colors based on thresholds.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  type: 'piecewise';\n  thresholds: Value[];\n  colors: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Action Bar Component\nDESCRIPTION: Example of providing a custom ActionBar component to the DatePicker.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker components={{ ActionBar: CustomActionBar }} />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Package Transformation\nDESCRIPTION: Updates imports to reflect package reorganization, such as moving LicenseInfo from @mui/x-data-grid-pro to @mui/x-license.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-data-grid-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Rows in React\nDESCRIPTION: Fixes an issue where new row data was not persisting after the 'loading' prop changed. This snippet updates the internal state to reflect the new row data.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetRows(method not persisting new rows data after `loading` prop change)\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Dates with Moment.js\nDESCRIPTION: Example of creating UTC dates using Moment.js for MUI X Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst date = moment.utc('2022-04-17T15:30');\n```\n\n----------------------------------------\n\nTITLE: Static Time Picker Landscape Layout\nDESCRIPTION: Demonstrates landscape orientation implementation for Static Time Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"StaticTimePickerLandscape.js\"\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Row Spanning Feature\nDESCRIPTION: Removal of unstable_ prefix from rowSpanning prop as the feature becomes stable.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  unstable_rowSpanning\n+  rowSpanning\n />\n```\n\n----------------------------------------\n\nTITLE: Testing with Material UI v6\nDESCRIPTION: Command to run MUI X tests against Material UI version 6 using pnpm.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm use-material-ui-v6\n```\n\n----------------------------------------\n\nTITLE: Updating Bash Comments in Documentation\nDESCRIPTION: Example of fixing bash comments in documentation.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# This is a correct bash comment\n# Another correct comment\n\n# Avoid using double slashes for comments in bash\n# // This is not a correct bash comment\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Components to Slots Transformation\nDESCRIPTION: Updates Date and Time Picker components by renaming 'components' prop to 'slots' and 'componentsProps' to 'slotProps' for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n-  components={{ Toolbar: CustomToolbar }}\n-  componentsProps={{ actionBar: { actions: ['clear'] } }}\n+  slots={{ toolbar: CustomToolbar }}\n+  slotProps={{ actionBar: { actions: ['clear'] } }}\n />;\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods\nDESCRIPTION: Commands for running automated codemods to handle breaking changes in v6\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v6.0.0/pickers/preset-safe <path>\n\n# Target Data Grid as well\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Replacing UseDateRangeFieldProps Interface in TypeScript\nDESCRIPTION: Interface definition for UseDateRangeFieldProps that extends DateRangeManagerFieldInternalProps. This interface is used for date range field components with accessibility structure configuration.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n\ninterface UseDateRangeFieldProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n> extends Omit<\n    DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n    'unstableFieldRef'\n  > {}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Different React Versions\nDESCRIPTION: Command to test MUI X with different versions of React using pnpm. Supports stable, experimental, next, or specific version numbers.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm use-react-version <version>\n```\n\n----------------------------------------\n\nTITLE: Replacing hasLeadingZeros property\nDESCRIPTION: Shows how to replace the hasLeadingZeros property with hasLeadingZerosInFormat for field sections.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n\n React.useEffect(() => {\n   const firstSection = fieldRef.current!.getSections()[0];\n-  console.log(firstSection.hasLeadingZeros);\n+  console.log(firstSection.hasLeadingZerosInFormat);\n }, []);\n\n return <DateField unstableFieldRef={fieldRef} />;\n```\n\n----------------------------------------\n\nTITLE: Form Properties Implementation\nDESCRIPTION: Example showing form property integration with DateRangePicker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-picker/date-range-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n\"demo\": \"FormPropsDateRangePickers.js\"\n```\n\n----------------------------------------\n\nTITLE: Root Props Implementation\nDESCRIPTION: Demonstrates how to pass props to the root element using getRootProps.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst useCustomPlugin = ({ params }) => {\n  return {\n    getRootProps: () => ({\n      'data-customparam': params.customParam,\n    }),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Data Grid Locale Import Updates\nDESCRIPTION: Example showing updated import paths for Data Grid locales\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n-import { enUS } from '@mui/x-data-grid';\n+import { enUS } from '@mui/x-data-grid/locales';\n\n-import { enUS } from '@mui/x-data-grid-pro';\n+import { enUS } from '@mui/x-data-grid-pro/locales';\n\n-import { enUS } from '@mui/x-data-grid-premium';\n+import { enUS } from '@mui/x-data-grid-premium/locales';\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getWeekdays Method (JavaScript)\nDESCRIPTION: The adapter.getWeekdays method has been removed. It can be replaced using adapter.startOfWeek and adapter.addDays methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n-const weekDays = adapter.getWeekdays(value);\n+const getWeekdays = (value) => {\n+  const start = adapter.startOfWeek(value);\n+  return [0, 1, 2, 3, 4, 5, 6].map((diff) => utils.addDays(start, diff));\n+};\n+\n+const weekDays = getWeekdays(value);\n```\n\n----------------------------------------\n\nTITLE: Restricting Input Format of the isEqual() Method in MUI X Date Adapters\nDESCRIPTION: Changes to the isEqual() method to accept only parsed date objects or null values instead of attempting to parse any input. The method now requires using the native date objects for each adapter (dayjs, DateTime, moment, or Date) rather than accepting strings or JS Date objects directly.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isEqual = adapterDayjs.isEqual(null, null); // Same for the other adapters\n const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n const isEqual = adapterDateFns.isEqual(new Date(), new Date('2022-04-17'));\n\n // Non-supported formats (JS Date)\n-const isEqual = adapterDayjs.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterDayjs.isEqual(dayjs(), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isEqual = adapterDayjs.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDayjs.isEqual(dayjs('2022-04-17'), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterLuxon.isEqual(DateTime.fromISO('2022-04-17'), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterMoment.isEqual(moment('2022-04-17'), moment('2022-04-17'));\n\n-const isEqual = adapterDateFns.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDateFns.isEqual(new Date('2022-04-17'), new Date('2022-04-17'));\n```\n\n----------------------------------------\n\nTITLE: Creating Timezone-Specific Dates with Luxon\nDESCRIPTION: Demonstrates creating dates in specific timezones using Luxon's zone parameter for individual date instances.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/timezone/timezone.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30', { zone: 'America/New_York' });\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'America/New_York' });\n```\n\n----------------------------------------\n\nTITLE: Renaming RowsPerPageOptions Prop in MUI X Data Grid\nDESCRIPTION: Migration codemod to rename the rowsPerPageOptions prop to pageSizeOptions in Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  rowsPerPageOptions={[5, 10, 20]}\n+  pageSizeOptions={[5, 10, 20]}\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-rowsPerPageOptions-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming date-fns Adapter Imports\nDESCRIPTION: Update the import statements for date-fns adapters to use the new naming conventions in v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n-import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n+import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV2';\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n-import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV3';\n+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n+import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Package Versions in package.json\nDESCRIPTION: Changes required in package.json to update the Data Grid packages to version 7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-data-grid\": \"^6.0.0\",\n+\"@mui/x-data-grid\": \"^7.0.0\",\n\n-\"@mui/x-data-grid-pro\": \"^6.0.0\",\n+\"@mui/x-data-grid-pro\": \"^7.0.0\",\n\n-\"@mui/x-data-grid-premium\": \"^6.0.0\",\n+\"@mui/x-data-grid-premium\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Replacing useGridSlotComponentProps Hook in MUI X Data Grid\nDESCRIPTION: Shows how to replace the removed useGridSlotComponentProps hook with individual hooks for accessing the same data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-const { apiRef, state, rootElement, options } = useGridSlotComponentProps();\n+const apiRef = useGridApiContext();\n+const [state] = useGridState(apiRef);\n+const rootElement = apiRef.current.rootElementRef;\n+const rootProps = useGridRootProps(); // equivalent of `options`\n```\n\n----------------------------------------\n\nTITLE: Replacing onCellFocusOut Prop in MUI X Data Grid v6.0.0\nDESCRIPTION: This code snippet demonstrates how to replace the onCellFocusOut prop with componentsProps.cell.onBlur in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n-  onCellFocusOut={handleBlur}\n+  componentsProps={{\n+    cell: {\n+      onBlur: handleBlur,\n+    },\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Add showToolbar Prop Transformation\nDESCRIPTION: Adds the showToolbar prop to Data Grid components that use the slots.toolbar prop to maintain the toolbar visibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPremium\n  slots={{\n    toolbar: GridToolbar,\n  }}\n+ showToolbar\n />\n```\n\n----------------------------------------\n\nTITLE: Removing aggregation from experimental features in DataGridPremium\nDESCRIPTION: The aggregation feature is no longer experimental and can be used without the experimental flag.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_70\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPremium\n-  experimentalFeatures={{ aggregation: true }}\n />\n```\n\n----------------------------------------\n\nTITLE: Time Picker Views Configuration\nDESCRIPTION: Demonstrates how to configure different views (hours, minutes, seconds) in Time Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"TimePickerViews.js\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from @mui/styles to @mui/material/styles in Data Grid\nDESCRIPTION: Shows how to update imports when migrating from @mui/styles to @mui/material/styles as Data Grid no longer depends on @mui/styles.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n-import { createTheme } from '@mui/material/styles';\n-import { makeStyles } from '@mui/styles';\n+import { styled } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Data Source Feature\nDESCRIPTION: Removal of unstable_ prefix from data source related props as the feature becomes stable.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPro\n-  unstable_dataSource={dataSource}\n-  unstable_dataSourceCache={cache}\n-  unstable_lazyLoading\n-  unstable_lazyLoadingRequestThrottleMs={100}\n-  unstable_onDataSourceError={() => {}}\n+  dataSource={dataSource}\n+  dataSourceCache={cache}\n+  lazyLoading\n+  lazyLoadingRequestThrottleMs={100}\n+  onDataSourceError={() => {}}\n />\n```\n\n----------------------------------------\n\nTITLE: Building MUI-X Project for Performance Tests\nDESCRIPTION: Command to build the MUI-X project in preparation for running performance tests.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/performance-charts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm release:build\n```\n\n----------------------------------------\n\nTITLE: Improving Timezone Typing in Date Adapter\nDESCRIPTION: Enhances the type definitions for the dateWithTimezone method in the date adapter.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Improve the typing of the adapter `dateWithTimezone` method (#10029) @flaviendelangle\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers (*) to access all paths (/) of the website. This is the most permissive configuration possible.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Updating LegendPosition Import in Charts\nDESCRIPTION: Change the import of LegendPosition to Position from the models module.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-import { LegendPosition } from '@mui/x-charts/ChartsLegend';\n+import { Position } from '@mui/x-charts/models';\n```\n\n----------------------------------------\n\nTITLE: Cell Focus Event Handler Migration\nDESCRIPTION: Example of migrating from the removed onCellFocusOut prop to using slotProps.cell.onBlur for handling cell focus events.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  slotProps={{\n    cell: {\n      onBlur: (event) => {\n        const cellElement = event.currentTarget;\n        const field = cellElement.getAttribute('data-field');\n        const rowId = cell.parentElement.getAttribute('data-id');\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating usePickersContext hook to usePickerContext\nDESCRIPTION: Shows how to update the renamed hook from usePickersContext to usePickerContext.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n-import { usePickersContext } from '@mui/x-date-pickers/hooks';\n-import { usePickersContext } from '@mui/x-date-pickers';\n-import { usePickersContext } from '@mui/x-date-pickers-pro';\n\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n+import { usePickerContext } from '@mui/x-date-pickers';\n+import { usePickerContext } from '@mui/x-date-pickers-pro';\n\n-const pickersContext = usePickersContext();\n+const pickerContext = usePickerContext();\n```\n\n----------------------------------------\n\nTITLE: Updating LocalizationProvider Props\nDESCRIPTION: Renames locale prop to adapterLocale in LocalizationProvider.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <LocalizationProvider\n   dateAdapter={AdapterDayjs}\n-  locale=\"fr\"\n+  adapterLocale=\"fr\"\n >\n   {children}\n </LocalizationProvider\n```\n\n----------------------------------------\n\nTITLE: Webpack 4 Configuration for MUI X v7\nDESCRIPTION: Example of how to configure webpack 4 to transpile new JavaScript features used in MUI X v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [\n+              // Covers @mui/x-data-grid, @mui/x-data-grid-pro, and @mui/x-data-grid-premium\n+              path.resolve(__dirname, 'node_modules/@mui/x-data-grid'),\n+              path.resolve(__dirname, 'node_modules/@mui/x-license'),\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated GridFeatureModeConstant Import in TypeScript\nDESCRIPTION: Removes the import of the deprecated GridFeatureModeConstant constant.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n-import { GridFeatureModeConstant } from '@mui/x-data-grid';\n```\n\n----------------------------------------\n\nTITLE: Data Grid ValueFormatter Signature Change\nDESCRIPTION: Breaking change in GridColDef valueFormatter method signature for performance optimization\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n- valueFormatter: ({ value }) => value,\n+ valueFormatter: (value, row, column, apiRef) => value,\n```\n\n----------------------------------------\n\nTITLE: Adding Use Client Directive to TreeView Components\nDESCRIPTION: Adds the 'use client' directive to every public component and hook in the TreeView component for Next.js compatibility.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n[TreeView] Add \"use client\" directive to every public component and hook (#14579) @flaviendelangle\n```\n\n----------------------------------------\n\nTITLE: Tree View Testing Migration Example\nDESCRIPTION: Shows how to update test code for Tree View component after focus management changes\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n it('test example on first item', () => {\n-  const { getByRole } = render(\n+  const { getAllByRole } = render(\n       <SimpleTreeView>\n         <TreeItem nodeId=\"one\" />\n         <TreeItem nodeId=\"two\" />\n      </SimpleTreeView>\n     );\n\n-  const tree = getByRole('tree');\n+  const firstTreeItem = getAllByRole('treeitem')[0];\n     act(() => {\n-    tree.focus();\n+    firstTreeItem.focus();\n     });\n-  fireEvent.keyDown(tree, { key: 'ArrowDown' });\n+  fireEvent.keyDown(firstTreeItem, { key: 'ArrowDown' });\n   })\n```\n\n----------------------------------------\n\nTITLE: Migrating from onRowOver to componentsProps in DataGrid\nDESCRIPTION: Shows how to migrate from using onRowOver and similar event handlers to the new componentsProps API pattern, where custom props can be passed to the row or cell components.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onRowOver={handleRowOver}\n+  componentsProps={{\n+    row: { onMouseOver: handleRowOver },\n+  }}\n />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for MUI X v8 with Material UI v5/v6\nDESCRIPTION: Vite configuration to pass the 'require' condition to externalConditions for compatibility with MUI X v8 and Material UI v5/v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/usage-with-material-ui-v5-v6/usage-with-material-ui-v5-v6.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  ssr: {\n    resolve: {\n      externalConditions: ['require'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating usePickersTranslations hook to usePickerTranslations\nDESCRIPTION: Shows how to update the renamed hook from usePickersTranslations to usePickerTranslations.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n-import { usePickersTranslations } from '@mui/x-date-pickers/hooks';\n-import { usePickersTranslations } from '@mui/x-date-pickers';\n-import { usePickersTranslations } from '@mui/x-date-pickers-pro';\n\n+import { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n+import { usePickerTranslations } from '@mui/x-date-pickers';\n+import { usePickerTranslations } from '@mui/x-date-pickers-pro';\n\n-const translations = usePickersTranslations();\n+const translations = usePickerTranslations();\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Component Names for MUI Pickers\nDESCRIPTION: Changes to theme component overrides, replacing Private prefix with Mui prefix in createTheme configuration\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n-    PrivatePickersMonth: {\n+    MuiPickersMonth: {\n       // overrides\n     },\n-    PrivatePickersSlideTransition: {\n+    MuiPickersSlideTransition: {\n       // overrides\n     },\n-    PrivatePickersToolbarText: {\n+    MuiPickersToolbarText: {\n       // overrides\n     },\n-    PrivatePickersYear: {\n+    MuiPickersYear: {\n       // overrides\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Upgrading Data Grid from Community to Pro in React\nDESCRIPTION: This code snippet demonstrates how to upgrade from the Community version of the Data Grid to the Pro version by updating the import statement.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { DataGrid } from '@mui/x-data-grid';\n+import { DataGridPro } from '@mui/x-data-grid-pro';\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getNextMonth and adapter.getPreviousMonth Methods (JavaScript)\nDESCRIPTION: The adapter.getNextMonth and adapter.getPreviousMonth methods have been removed. They can be replaced using the adapter.addMonths method.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n-const nextMonth = adapter.getNextMonth(value);\n+const nextMonth = adapter.addMonths(value, 1);\n\n-const previousMonth = adapter.getPreviousMonth(value);\n+const previousMonth = adapter.addMonths(value, -1);\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Type Imports Transformation\nDESCRIPTION: Updates type names in picker components for consistency, such as changing usePickersTranslations to usePickerTranslations and FieldValueType to PickerValueType.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-import { usePickersTranslations, usePickersContext } from '@mui/x-date-pickers/hooks';\n+import { usePickerTranslations, usePickerContext } from '@mui/x-date-pickers/hooks';\n-import { FieldValueType } from '@mui/x-date-pickers';\n+import { PickerValueType } from '@mui/x-date-pickers';\n-import { RangeFieldSection } from '@mui/x-date-pickers-pro/models';\n+import { FieldRangeSection } from '@mui/x-date-pickers-pro/models';\n-import { PickerShortcutChangeImportance } from '@mui/x-date-pickers/PickersShortcuts';\n+import { PickerChangeImportance } from '@mui/x-date-pickers/models';\n\n interface MyComponentProps {\n-  valueType: FieldValueType;\n+  valueType: PickerValueType;\n   foo: string;\n   bar: number;\n }\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleTreeView Component in React\nDESCRIPTION: JSX code snippet demonstrating how to import the SimpleTreeView component from the MUI X Tree View package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n```\n\n----------------------------------------\n\nTITLE: Using Tree Item Status Object\nDESCRIPTION: Demonstration of accessing Tree Item status properties through the useTreeItem hook\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/tree-item-customization/tree-item-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst {\n  status: { expanded, expandable, focused, selected, disabled, editable, editing },\n} = useTreeItem(props);\n```\n\n----------------------------------------\n\nTITLE: Updating Legend Direction in PieChart Component\nDESCRIPTION: Change the legend direction prop values from 'column'/'row' to 'vertical'/'horizontal'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n <PieChart\n   slotProps={{\n     legend: {\n-      direction: 'column'\n+      direction: 'vertical'\n     }\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Props Transformation\nDESCRIPTION: Demonstrates how to remove the 'unstable_' prefix from various DataGrid props that have been stabilized in v8.0.0, including rowSpanning, dataSource, and listView-related props.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  unstable_rowSpanning\n-  unstable_dataSource={dataSource}\n-  unstable_dataSourceCache={dataSourceCache}\n-  unstable_lazyLoading\n-  unstable_lazyLoadingRequestThrottleMs={100}\n-  unstable_onDataSourceError={() => {}}\n-  unstable_listView\n-  unstable_listColumn={{}}\n+  rowSpanning\n+  dataSource={dataSource}\n+  dataSourceCache={dataSourceCache}\n+  lazyLoading\n+  lazyLoadingRequestThrottleMs={100}\n+  onDataSourceError={() => {}}\n+  listView\n+  listViewColumn={{}}\n />\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests from Project Folder\nDESCRIPTION: Command to execute performance tests after changing directory to the project folder.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/performance-charts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:performance\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Reordering Icon in MUI X Data Grid Pro\nDESCRIPTION: This snippet demonstrates how to customize the row reordering icon by providing a custom component to the rowReorderIcon slot.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-ordering/row-ordering.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPro\n  slots={{\n    rowReorderIcon: CustomMoveIcon,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Series Hooks Import in React for MUI X Charts v8\nDESCRIPTION: This diff demonstrates how to update the import statements for series hooks that have been stabilized in MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n-   unstable_useSeries,\n+   useSeries,\n-   unstable_usePieSeries,\n+   usePieSeries,\n-   unstable_useLineSeries,\n+   useLineSeries,\n-   unstable_useBarSeries,\n+   useBarSeries,\n-   unstable_useScatterSeries,\n+   useScatterSeries,\n  } from '@mui/x-charts/hooks';\n  import {\n-   unstable_useHeatmapSeries,\n+   useHeatmapSeries,\n  } from '@mui/x-charts-pro/hooks';\n```\n\n----------------------------------------\n\nTITLE: Disabling Export Options in DataGrid Toolbar\nDESCRIPTION: Shows how to disable specific export options in the GridToolbarExport component by setting the disableToolbarButton property to true for either CSV or print export.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_30\n\nLANGUAGE: TSX\nCODE:\n```\n<GridToolbarExport csvOptions={{ disableToolbarButton: true }} />\n```\n\nLANGUAGE: TSX\nCODE:\n```\n<GridToolbarExport printOptions={{ disableToolbarButton: true }} />\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Toolbar Component Props in React Date Picker\nDESCRIPTION: Illustrates changes to prop names in custom toolbar components for both DatePicker and DateRangePicker.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nconst CustomToolbarComponent = props => (\n  <div>\n-    <button onChange={() => props.onChange('day')}>Show day view</button>\n+    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n-    <div>Current view: {props.openView}</div>\n+    <div>Current view: {props.view}</div>\n  </div>\n)\n\n<DatePicker\n-  ToolbarComponent={CustomToolbarComponent}\n+  slots={{\n+    toolbar: CustomToolbarComponent\n+  }}\n/>\n\nconst CustomRangeToolbarComponent = props => (\n  <div>\n-    <button onChange={() => props.setCurrentlySelectingRangeEnd('end')}>Edit end date</button>\n+    <button onClick={() => props.onRangePositionChange('end')}>Edit end date</button>\n-    <div>Is editing end date: {props.currentlySelectingRangeEnd === 'end'}</div>\n+    <div>Is editing end date: {props.rangePosition === 'end'}</div>\n  </div>\n)\n\n<DateRangePicker\n-  ToolbarComponent={CustomRangeToolbarComponent}\n+  slots={{\n+    toolbar: CustomRangeToolbarComponent\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Renaming View Components\nDESCRIPTION: Updates component names for better clarity and consistency across the library.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-<CalendarPicker {...props} />\n+<DateCalendar {...props} />\n\n-<DayPicker {...props} />\n+<DayCalendar {...props} />\n\n-<CalendarPickerSkeleton {...props} />\n+<DayCalendarSkeleton {...props} />\n\n-<MonthPicker {...props} />\n+<MonthCalendar {...props} />\n\n-<YearPicker {...props} />\n+<YearCalendar {...props} />\n\n-<ClockPicker {...props} />\n+<TimeClock {...props} />\n```\n\n----------------------------------------\n\nTITLE: Removing ariaV7 Experimental Flag in React\nDESCRIPTION: This snippet shows how to remove the ariaV7 experimental flag from the DataGrid component as it is now the default behavior in v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid experimentalFeatures={{ ariaV7: true }} />\n+<DataGrid />\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid columnsManagement prop in React\nDESCRIPTION: Shows how to update the columnsManagement prop for the DataGrid component, moving it from columnsPanel to a new dedicated prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n    slotProps={{\n-   columnsPanel: {\n+   columnsManagement: {\n        sort: 'asc',\n        autoFocusSearchField: false,\n      },\n    }}\n   />\n```\n\n----------------------------------------\n\nTITLE: Enabling resetPageOnSortFilter in DataGrid\nDESCRIPTION: Adds a new prop 'resetPageOnSortFilter' to the DataGrid component that resets the page after sorting and filtering operations.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid resetPageOnSortFilter={true} />\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid List View Props in TypeScript\nDESCRIPTION: Example of updating the Data Grid list view props and types after the feature became stable. The 'unstable_' prefix is removed from props and types are renamed.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst listViewColDef: GridListViewColDef = {\n  field: 'listColumn',\n  renderCell: ListViewCell,\n};\n\n<DataGridPro\n  listView\n  listViewColumn={listViewColDef}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Recast Options in MUI X Codemod\nDESCRIPTION: Example of providing Recast printer options through jscodeshift's printOptions argument.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@next <transform> <path> --jscodeshift=\"--printOptions='{\\\"quote\\\":\\\"double\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Passing jscodeshift Options in MUI X Codemod\nDESCRIPTION: Examples of passing single and multiple jscodeshift options when running MUI X codemods.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# single option\nnpx @mui/x-codemod@next --jscodeshift=--run-in-band\n\n# multiple options\nnpx @mui/x-codemod@next --jscodeshift=--cpus=1 --jscodeshift=--print --jscodeshift=--dry --jscodeshift=--verbose=2\n```\n\n----------------------------------------\n\nTITLE: Updating DateCalendar Slots Interface\nDESCRIPTION: Breaking change to rename slot interfaces to match @mui/base naming convention by replacing SlotsComponent with Slots and SlotsComponentsProps with SlotProps\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n-DateCalendarSlotsComponent\n-DateCalendarSlotsComponentsProps\n+DateCalendarSlots\n+DateCalendarSlotProps\n```\n\n----------------------------------------\n\nTITLE: Updating icon Slot in TreeItem\nDESCRIPTION: Shows how to migrate from icon prop to using the new slots API for defining icons in TreeItem component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     icon={<MyCustomIcon />}\n+     slots={{ icon: MyCustomIcon }}\n    />\n  </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Replacing ResponsiveChartContainer with ChartContainer\nDESCRIPTION: Replace the ResponsiveChartContainer with ChartContainer in chart components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-import { ResponsiveChartContainer } from '@mui/x-charts/ResponsiveChartContainer';\n-import { ResponsiveChartContainerPro } from '@mui/x-charts-pro/ResponsiveChartContainerPro';\n+import { ChartContainer } from '@mui/x-charts/ChartContainer';\n+import { ChartContainerPro } from '@mui/x-charts-pro/ChartContainerPro';\n\n-<ResponsiveChartContainer>\n+<ChartContainer>\n   <BarPlot />\n-</ResponsiveChartContainer>\n+</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Keyboard navigation table for date range calendar\nDESCRIPTION: Markdown table showing keyboard shortcuts and their functions for the date range calendar component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/accessibility/accessibility.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                                                                                          Keys | Description                                                   |\n| --------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------ |\n| <kbd class=\"key\">Arrow Up</kbd>, <kbd class=\"key\">Arrow Down</kbd>,<br> <kbd class=\"key\">Arrow Left</kbd>, <kbd class=\"key\">Arrow Right</kbd> | Moves focus among the available values                        |\n|                                                                                                                <kbd class=\"key\">Page Up</kbd> | Moves focus to the last day of the month                      |\n|                                                                                                              <kbd class=\"key\">Page Down</kbd> | Moves focus to the first day of the month                     |\n|                                                                                                                   <kbd class=\"key\">Home</kbd> | Moves focus to first day of the week within the current month |\n|                                                                                                                    <kbd class=\"key\">End</kbd> | Moves focus to last day of the week within the current month  |\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.isNull Method (JavaScript)\nDESCRIPTION: The isNull method has been removed. It can be replaced with a basic null check.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n-const isNull = adapter.isNull(value);\n+const isNull = value === null;\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Day Picker Classes Codemod Command\nDESCRIPTION: Command to execute the rename-day-picker-classes codemod that updates class name imports.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/pickers/rename-day-picker-classes <path>\n```\n\n----------------------------------------\n\nTITLE: DataGrid Scroll End Handler\nDESCRIPTION: Implementation of onRowsScrollEnd handler for infinite loading support in XGrid with scroll threshold functionality.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nonRowsScrollEnd={handleScrollEnd}\n```\n\n----------------------------------------\n\nTITLE: Disabling Quick Filter in DataGrid Toolbar\nDESCRIPTION: Demonstrates how to remove the quick filter from the DataGrid toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/filtering/quick-filter.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid slotProps={{ toolbar: { showQuickFilter: false } }} />\n```\n\n----------------------------------------\n\nTITLE: Augmenting TypeScript Theme for MUI X Charts\nDESCRIPTION: TypeScript code for theme augmentation to enable CSS overrides and default prop customization for MUI X Charts components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/quickstart/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Pro users: add `-pro` suffix to package name\nimport type {} from '@mui/x-charts/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiChartsAxis: {\n      styleOverrides: {\n        tick: {\n          stroke: '#006BD6',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Font Size Props in MUI X Charts\nDESCRIPTION: Codemod to rename labelFontSize and tickFontSize props to corresponding xxxStyle prop in MUI X Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <ChartsXAxis\n-  labelFontSize={18}\n+  labelStyle={{\n+    fontSize: 18\n+  }}\n-  tickFontSize={20}\n+  tickStyle={{\n+    fontSize: 20\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Manual Changelog Generation Script\nDESCRIPTION: JavaScript script to automatically navigate to GitHub comparison page between the last tag and master branch. Can be executed in browser console.\nSOURCE: https://github.com/mui/mui-x/blob/master/scripts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const releaseBranch = 'master';\n  const tagResponse = await fetch('https://api.github.com/repos/mui/mui-x/tags?per_page=1');\n  const tagData = await tagResponse.json();\n  const lastTag = tagData[0].name;\n  const diffPage = `https://github.com/mui/mui-x/compare/${lastTag}...${releaseBranch}`;\n  window.location.href = diffPage;\n})();\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Link Header in React\nDESCRIPTION: This code snippet includes a component link header for the Charts documentation. It's used to provide consistent navigation across MUI X documentation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/overview/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"@mui/docs/ComponentLinkHeader\", \"design\": false}\n```\n\n----------------------------------------\n\nTITLE: Custom Time Format Implementation in React\nDESCRIPTION: Demonstrates how to customize the time format in the TimeField component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-field/time-field.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"CustomTimeFormat.js\"\n```\n\n----------------------------------------\n\nTITLE: DataGrid Multiple Column Sort\nDESCRIPTION: Added support for sorting multiple columns using Shift+click functionality.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nsortingMode=\"multiple\"\n```\n\n----------------------------------------\n\nTITLE: Updating Row ID Lookup Pattern\nDESCRIPTION: Changes to the row ID lookup selector pattern, replacing gridRowsDataRowIdToIdLookupSelector with gridRowsLookupSelector and gridRowIdSelector combination.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n-const rowId = idToIdLookup[id];\n+const rowsLookup = gridRowsLookupSelector(apiRef);\n+const rowId = gridRowIdSelector(apiRef, rowsLookup[id]);\n```\n\n----------------------------------------\n\nTITLE: Updating DataSource Error Handler\nDESCRIPTION: Changes to onDataSourceError handler signature to support additional error types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onDataSourceError={(error: Error, params: GridGetRowsParams) => {\n-    if (params.filterModel) {\n-      // do something\n-    }\n-  }}\n+  onDataSourceError={(error: GridGetRowsError | GridUpdateRowError) => {\n+    if (error instanceof GridGetRowsError && error.params.filterModel) {\n+      // do something\n+    }\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Charts Color Palette Configuration\nDESCRIPTION: Configuration to maintain old color palette after default colors were changed in v8 breaking changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { blueberryTwilightPalette } from '@mui/x-charts/colorPalettes';\n\n// Use in chart component\ncolors={blueberryTwilightPalette}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Classes for Renamed Picker Components\nDESCRIPTION: Shows the required changes to CSS class names due to the renaming of 'Private' prefixed components to 'Mui' prefixed components in the pickers module.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n-.PrivatePickersMonth-root {\n+.MuiPickersMonth-root {\n\n-.PrivatePickersSlideTransition-root {\n+.MuiPickersSlideTransition-root {\n\n-.PrivatePickersToolbarText-root {\n+.MuiPickersToolbarText-root {\n\n-.PrivatePickersYear-root {\n+.MuiPickersYear-root {\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Options for Vitest\nDESCRIPTION: TypeScript configuration for enabling browser-based testing in Vitest. This snippet shows the browser options that can be uncommented in the vitest.config.ts file to run tests in a headless Chromium browser using Playwright.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/performance-charts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    browser: {\n      enabled: true,\n      headless: true,\n      name: 'chromium',\n      provider: 'playwright',\n      providerOptions: {\n        timeout: 60000,\n      },\n    },\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event Bubbling in DataGrid\nDESCRIPTION: Updated approach for handling click event bubbling in DataGrid by using React synthetic event stopPropagation.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n-<DataGrid disableClickEventBubbling />\n+<DataGrid onCellClick={(event) => event.stopPropagation()} />\n```\n\n----------------------------------------\n\nTITLE: Updating Multi Input Range Field Hook Parameters\nDESCRIPTION: Breaking change to simplify multi input range field hook parameters by passing refs as part of props object\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n-const { inputRef: startInputRef, ...otherStartTextFieldProps } = startTextFieldProps\n-const { inputRef: endInputRef, ...otherEndTextFieldProps } = endTextFieldProps\n\n const fieldResponse = useMultiInputDateRangeField({\n   sharedProps,\n-  startTextFieldProps: otherStartTextFieldProps,\n-  endTextFieldProps: otherEndTextFieldProps,\n-  startInputRef\n-  endInputRef,\n+  startTextFieldProps,\n+  endTextFieldProps\n });\n```\n\n----------------------------------------\n\nTITLE: Updating SparkLineChart Colors Prop in React for MUI X Charts v8\nDESCRIPTION: This diff shows how to update the colors prop to color in SparkLineChart component for MUI X Charts v8.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n  <SparkLineChart\n-   colors={['#000', '#fff']}\n+   color=\"#000\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Migrating Date Picker Imports\nDESCRIPTION: Example of how the codemod transforms import statements from @mui/lab to MUI X packages.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import DatePicker from '@mui/lab/DatePicker';\n+import { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n-import DateRangePicker from '@mui/lab/DateRangePicker';\n+import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n-import { DatePicker, DateRangePicker } from '@mui/lab';\n+import { DatePicker } from '@mui/x-date-pickers'; // DatePicker is also available in `@mui/x-date-pickers-pro`\n+import { DateRangePicker } from '@mui/x-date-pickers-pro';\n```\n\n----------------------------------------\n\nTITLE: Removing ariaV7 experimental flag from DataGrid in React\nDESCRIPTION: Shows how to remove the ariaV7 experimental flag from the DataGrid component, as it is now the default behavior.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid experimentalFeatures={{ ariaV7: true }} />\n+<DataGrid />\n```\n\n----------------------------------------\n\nTITLE: Removing Modern Bundle Aliases\nDESCRIPTION: Removes configuration for modern bundle aliases which are no longer supported in v8\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n {\\n   resolve: {\\n     alias: {\\n-      '@mui/x-data-grid': '@mui/x-data-grid/modern',\\n-      '@mui/x-data-grid-pro': '@mui/x-data-grid-pro/modern',\\n-      '@mui/x-data-grid-premium': '@mui/x-data-grid-premium/modern',\\n     }\\n   }\\n }\n```\n\n----------------------------------------\n\nTITLE: Updating License Package Import Path\nDESCRIPTION: Change in the import path for the LicenseInfo component in the commercial version of Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\n----------------------------------------\n\nTITLE: Renaming Components to Slots in MUI X Pickers\nDESCRIPTION: Migration codemod to rename components and componentsProps props to slots and slotProps respectively in Date and Time Picker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n-  components={{ Toolbar: CustomToolbar }}\n-  componentsProps={{ actionBar: { actions: ['clear'] } }}\n+  slots={{ toolbar: CustomToolbar }}\n+  slotProps={{ actionBar: { actions: ['clear'] } }}\n />;\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Customizing Print Grid Display with Default Toolbar\nDESCRIPTION: Demonstrates how to hide footer and toolbar components when printing the Data Grid, providing a cleaner output when using the default toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/export/export.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// Default toolbar:\n<DataGrid\n  slotProps={{\n    toolbar: {\n      printOptions: {\n        hideFooter: true,\n        hideToolbar: true,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Time Clock Form Properties Implementation\nDESCRIPTION: Shows how to implement disabled and read-only states for the TimeClock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-clock/time-clock.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nTimeClockFormProps.js\n```\n\n----------------------------------------\n\nTITLE: Migrating shortcuts slot onChange prop to usePickerActionsContext hook\nDESCRIPTION: Shows how to replace the onChange prop with the setValue function from usePickerActionsContext hook in a shortcuts slot component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n-const { onChange } = props;\n-onChange(dayjs(), 'accept', myShortcut);\n+const { setValue } = usePickerActionsContext();\n+setValue(dayjs(), { changeImportance: 'accept', shortcut: myShortcut });\n```\n\n----------------------------------------\n\nTITLE: Inline Recording Element in Markdown\nDESCRIPTION: HTML image tag used to display a GIF recording demonstrating the filtering on column headers feature.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_30\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"https://github.com/mui/mui-x/releases/download/v6.5.0/recording.gif\" width=\"840\" height=\"506\" alt=\"Filtering on column headers example\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Chart Components Grid in React\nDESCRIPTION: This code snippet renders a grid displaying all available MUI X Chart components. It demonstrates how to include a component gallery in documentation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/overview/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/ChartComponentsGrid.js\"}\n```\n\n----------------------------------------\n\nTITLE: Data Grid Density Migration Example 2\nDESCRIPTION: Shows how to migrate the density prop to use state management with onDensityChange callback\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n+ const [density, setDensity] = React.useState<GridDensity>('compact');\n <DataGrid\n-  density=\"compact\"\n+  density={density}\n+  onDensityChange={(newDensity) => setDensity(newDensity)}\n />\n```\n\n----------------------------------------\n\nTITLE: Renaming ResponsiveChartContainer in MUI X Charts\nDESCRIPTION: Codemod to rename ResponsiveChartContainer and ResponsiveChartContainerPro to ChartContainer and ChartContainerPro in MUI X Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import { ResponsiveChartContainer } from '@mui/x-charts/ResponsiveChartContainer';\n+import { ChartContainer } from '@mui/x-charts/ChartContainer';\n\n-<ResponsiveChartContainer>\n+<ChartContainer>\n   <BarPlot />\n-</ResponsiveChartContainer>\n+</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Basic FilterPanelTrigger Import and Usage in React\nDESCRIPTION: Shows the basic import and usage syntax for the FilterPanelTrigger component from MUI X Data Grid. The component is a button that controls the visibility of the filter panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/filter-panel/filter-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FilterPanelTrigger } from '@mui/x-data-grid';\n\n<FilterPanelTrigger />;\n```\n\n----------------------------------------\n\nTITLE: Updating selectedSections format\nDESCRIPTION: Migration example for the new selectedSections prop format which no longer accepts start and end indexes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <DateField\n-  selectedSections={{ startIndex: 0, endIndex: 0 }}\n+  selectedSections={0}\n\n   // If the field has 3 sections\n-  selectedSections={{ startIndex: 0, endIndex: 2 }}\n+  selectedSections=\"all\"\n />\n```\n\n----------------------------------------\n\nTITLE: Renaming CalendarPicker to DateCalendar\nDESCRIPTION: The CalendarPicker component has been renamed to DateCalendar to better reflect its purpose.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n-<CalendarPicker {...props} />\n+<DateCalendar {...props} />\n```\n\n----------------------------------------\n\nTITLE: Toolbar Quick Filter Configuration\nDESCRIPTION: Example showing how to disable the quick filter in the new Data Grid toolbar using slot props\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nslotProps={{ toolbar: { showQuickFilter: false } }}\n```\n\n----------------------------------------\n\nTITLE: Updating MonthPicker Component Name in Theme\nDESCRIPTION: The MonthPicker component name in the theme has been updated to MonthCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n-MuiMonthPicker: {\n+MuiMonthCalendar: {\n```\n\n----------------------------------------\n\nTITLE: Fixing Owner State in Desktop Paper Slot\nDESCRIPTION: Corrects the ownerState handling on the desktopPaper slot props for pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Fix `ownerState` on `desktopPaper` slot props (#10103) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Improving Russian (ru-RU) Locale for Data Grid\nDESCRIPTION: Improves the Russian translations for the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Improve Russian (ru-RU) locale (#4864) @arvkonstantin\n```\n\n----------------------------------------\n\nTITLE: Updating Multi Input Range Field Refs\nDESCRIPTION: Breaking change to rename refs in startDate and endDate objects from 'ref' to 'inputRef'\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n const fieldResponse = useDateField(props);\n\n return (\n   <div>\n-    <input ref={fieldResponse.startDate.ref} />\n+    <input ref={fieldResponse.startDate.inputRef} />\n     <span>–</span>\n-    <input ref={fieldResponse.endDate.ref} />\n+    <input ref={fieldResponse.endDate.inputRef} />\n   </div>\n )\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Keyboard\nDESCRIPTION: Component import declaration for the keyboard interaction documentation.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/PickersKeyboard.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputDateTimeRangeFieldProps Interface in TypeScript\nDESCRIPTION: Interface definition for UseMultiInputDateTimeRangeFieldProps that combines DateTimeRangeManagerFieldInternalProps with MultiInputFieldRefs. Used for multi-input date-time range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ninterface UseMultiInputDateTimeRangeFieldProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n> extends DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n    MultiInputFieldRefs {}\n```\n\n----------------------------------------\n\nTITLE: Updating Charts Component Types in TypeScript\nDESCRIPTION: Shows the breaking changes in type naming conventions for charts components, removing 'Component' from slots and slotProps type names. Example shows changes for ChartsTooltip component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_92\n\nLANGUAGE: diff\nCODE:\n```\n-ChartsTooltipSlotsComponent\n+ChartsTooltipSlots\n\n-ChartsTooltipSlotComponentProps\n+ChartsTooltipSlotProps\n```\n\n----------------------------------------\n\nTITLE: Updating Controllable Filter Props\nDESCRIPTION: Normalizes the controlled prop signature for filter model changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onFilterModelChange={(params: GridFilterModelParams) => setFilterModel(params.model)}\n+  onFilterModelChange={(model: GridFilterModel) => setFilterModel(model)}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating License Import Path\nDESCRIPTION: Shows changes needed for updating the license package import path and version\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n\n-\"@mui/x-license-pro\": ^6.0.0\",\n+\"@mui/x-license\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Renaming TreeItem2 to TreeItem in React\nDESCRIPTION: Codemod to rename the TreeItem2 component to TreeItem, updating import statements.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeItem2 } from '@mui/x-tree-view';\n+import { TreeItem } from '@mui/x-tree-view';\n\n-import { TreeItem2 } from '@mui/x-tree-view/TreeItem2';\n+import { TreeItem } from '@mui/x-tree-view/TreeItem';\n```\n\n----------------------------------------\n\nTITLE: Disabling Aggregation for Specific Columns\nDESCRIPTION: This code snippet shows how to disable aggregation for a specific column by setting the aggregable property to false in the column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/aggregation/aggregation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = [\n  { field: 'year', type: 'number', aggregable: false },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Renaming Focus Callback in Tree View\nDESCRIPTION: This codemod renames the onNodeFocus callback to onItemFocus in the Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView\n-  onNodeFocus={onNodeFocus}\n+  onItemFocus={onItemFocus}\n />\n```\n\n----------------------------------------\n\nTITLE: Replacing value Prop with usePickerContext Hook\nDESCRIPTION: Shows how to access the value using the usePickerContext hook instead of receiving it as a prop. Notes a behavior change with invalid dates compared to the previous approach.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n // This contains a small behavior change.\n // If the picker receives an invalid date,\n // the old value equals `null`.\n // the new value equals the invalid date received.\n-const { value } = props;\n+const { value } = usePickerContext();\n```\n\n----------------------------------------\n\nTITLE: Migrating from CSS Class Constants to gridClasses\nDESCRIPTION: Shows how to update code that previously used exported CSS class constants to use the new gridClasses object for accessing DataGrid CSS class names.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n-const columnHeaderClass = GRID_COLUMN_HEADER_CSS_CLASS;\n+const columnHeaderClass = gridClasses.columnHeader;\n\n-const rowClass = GRID_ROW_CSS_CLASS;\n+const rowClass = gridClasses.row;\n\n-const cellClass = GRID_CELL_CSS_CLASS;\n+const cellClass = gridClasses.cell;\n\n-const columnSeparatorClass = GRID_COLUMN_HEADER_SEPARATOR_RESIZABLE_CSS_CLASS;\n+const columnSeparatorClass = gridClasses['columnSeparator--resizable'];\n\n-const columnHeaderTitleClass = GRID_COLUMN_HEADER_TITLE_CSS_CLASS;\n+const columnHeaderTitleClass = gridClasses.columnHeaderTitle;\n\n-const columnHeaderDropZoneClass = GRID_COLUMN_HEADER_DROP_ZONE_CSS_CLASS;\n+const columnHeaderDropZoneClass = gridClasses.columnHeaderDropZone;\n\n-const columnHeaderDraggingClass = GRID_COLUMN_HEADER_DRAGGING_CSS_CLASS;\n+const columnHeaderDraggingClass = gridClasses['columnHeader--dragging'];\n```\n\n----------------------------------------\n\nTITLE: Migrating Year Calendar Classes Import\nDESCRIPTION: Shows changes in importing and using Year Calendar CSS classes after moving PickersYear component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-import { pickersYearClasses } from '@mui/x-date-pickers/YearCalendar';\n+import { yearCalendarClasses } from '@mui/x-date-pickers/YearCalendar';\n\n-const buttonClassName = pickersYearClasses.monthButton;\n+const buttonClassName = yearCalendarClasses.button;\n\n-const selectedButtonClassName = pickersYearClasses.selected;\n+const selectedButtonClassName = yearCalendarClasses.selected;\n\n-const disabledButtonClassName = pickersYearClasses.disabled;\n+const disabledButtonClassName = yearCalendarClasses.disabled;\n```\n\n----------------------------------------\n\nTITLE: Updating DateRangePicker Separator\nDESCRIPTION: Adds new fieldSeparator slot for customizing range picker separator.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n   <DateRangePicker\n-  renderInput={(startProps, endProps) => (\n-    <React.Fragment>\n-      <TextField {...startProps} />\n-      <Box sx={{ mx: 2 }}> to </Box>\n-      <TextField {...endProps} />\n-    </React.Fragment>\n-  )}\n+  slotProps={{ fieldSeparator: { children: 'to' } }}\n   />\n```\n\n----------------------------------------\n\nTITLE: Importing AiAssistantPanelTrigger in React Data Grid\nDESCRIPTION: Example of importing and using the AiAssistantPanelTrigger component from the MUI X Data Grid package. This component serves as a button that opens and closes the AI assistant panel.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/ai-assistant-panel/ai-assistant-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiAssistantPanelTrigger } from '@mui/x-data-grid';\n\n<AiAssistantPanelTrigger />;\n```\n\n----------------------------------------\n\nTITLE: Migrating useMultiInputTimeRangeField to useMultiInputRangeField with useTimeRangeManager\nDESCRIPTION: Shows how to migrate from the removed useMultiInputTimeRangeField hook to the new useMultiInputRangeField hook with useTimeRangeManager.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputTimeRangeField as useMultiInputTimeRangeField } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n+import { useTimeRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'time');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n\n-  const fieldResponse = useMultiInputTimeRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useTimeRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n----------------------------------------\n\nTITLE: Handling Date Changes in React Date Picker\nDESCRIPTION: Prevents moving to the closest enabled date when the 'date' prop contains a disabled date. This improves the behavior of the CalendarPicker component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDon't move to closest enabled date when `props.date` contains a disabled date\n```\n\n----------------------------------------\n\nTITLE: Replacing adapter.getDiff Method (JavaScript)\nDESCRIPTION: The adapter.getDiff method has been removed. It can be replaced with direct usage of date library methods for Day.js, Luxon, DateFns, and Moment.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// For Day.js\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n\n// For Luxon\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: DateTime, comparing: DateTime | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string'\n+    ? DateTime.fromJSDate(new Date(comparing))\n+    : comparing;\n+  if (unit) {\n+    return Math.floor(value.diff(comparing).as(unit));\n+  }\n+  return value.diff(comparing).as('millisecond');\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n// For DateFns\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: Date, comparing: Date | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string' ? new Date(comparing) : comparing;\n+  switch (unit) {\n+    case 'years':\n+      return dateFns.differenceInYears(value, parsedComparing);\n+    case 'quarters':\n+      return dateFns.differenceInQuarters(value, parsedComparing);\n+    case 'months':\n+      return dateFns.differenceInMonths(value, parsedComparing);\n+    case 'weeks':\n+      return dateFns.differenceInWeeks(value, parsedComparing);\n+    case 'days':\n+      return dateFns.differenceInDays(value, parsedComparing);\n+    case 'hours':\n+      return dateFns.differenceInHours(value, parsedComparing);\n+    case 'minutes':\n+      return dateFns.differenceInMinutes(value, parsedComparing);\n+    case 'seconds':\n+      return dateFns.differenceInSeconds(value, parsedComparing);\n+    default: {\n+      return dateFns.differenceInMilliseconds(value, parsedComparing);\n+    }\n+  }\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n// For Moment\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n```\n\n----------------------------------------\n\nTITLE: Replacing renderDay with Day component slot in Date Pickers\nDESCRIPTION: Migration for replacing the renderDay prop with the new component slots pattern in Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n // Same for any other date, date time or date range picker.\n <DatePicker\n-  renderDay={(_, dayProps) => <CustomDay {...dayProps} />}\n+  components={{ Day: CustomDay }}\n />\n```\n\n----------------------------------------\n\nTITLE: Incorrect useCallback Calendar Header Implementation - React Component\nDESCRIPTION: Example showing incorrect implementation using useCallback that still causes remounting due to dependency changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/common-concepts/custom-components/custom-components.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n\n  const CustomCalendarHeader = React.useCallback(\n    () => <input value={name} onChange={(event) => setName(event.target.value)} />,\n    [name],\n  );\n\n  return <DateCalendar slots={{ calendarHeader: CustomCalendarHeader }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Date Libraries\nDESCRIPTION: Component import declaration for the date libraries integration section.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/DateLibraries.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Updating adapter.isEqual Method Usage (JavaScript)\nDESCRIPTION: The adapter.isEqual method now only accepts already-parsed date objects or null. Usage with other formats needs to be updated for each date library.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapterDayjs = new AdapterDayjs();\nconst adapterLuxon = new AdapterLuxon();\nconst adapterDateFns = new AdapterDateFns();\nconst adapterMoment = new AdatperMoment();\n\n// Supported formats\nconst isEqual = adapterDayjs.isEqual(null, null); // Same for the other adapters\nconst isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\nconst isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\nconst isEqual = adapterDateFns.isEqual(new Date(), new Date('2022-04-17'));\n\n// Non-supported formats (JS Date)\n-const isEqual = adapterDayjs.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterDayjs.isEqual(dayjs(), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n```\n\n----------------------------------------\n\nTITLE: Tree View Component Import Reference\nDESCRIPTION: Component reference imports for MUI X Tree View main demonstration, features highlight, community/pro version comparison, playground, advanced features, and keyboard navigation examples.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\"component\": \"modules/components/overview/XLogo.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/mainDemo/MainDemo.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/TreeViewFeaturesHighlight.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/TreeViewCommunityOrPro.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/playground/Playground.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/advancedFeatures/AdvancedFeatures.tsx\"}\n{\"component\": \"modules/components/overview/tree-view/TreeViewKeyboard.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Selection Props in TreeView\nDESCRIPTION: Shows how to migrate from old selection-related props to new prop names that better describe their behaviors.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView\n-  onNodeSelect={handleSelectionChange}\n+  onSelectedItemsChange={handleSelectionChange}\n\n-  selected={selectedItems}\n+  selectedItems={selectedItems}\n\n-  defaultSelected={defaultSelectedItems}\n+  defaultSelectedItems={defaultSelectedItems}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: Updating the @mui/x-date-pickers package version from v5 to v6 in package.json\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-date-pickers\": \"^5.0.0\",\n+\"@mui/x-date-pickers\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Pro Charts Package via npm\nDESCRIPTION: Command to install the @mui/x-charts-pro package using npm. This installs the Pro plan edition of the chart components from MUI X.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts-pro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-charts-pro\n```\n\n----------------------------------------\n\nTITLE: Renamed Grid API Methods and Selectors\nDESCRIPTION: Lists the API methods and selectors that have been renamed with the 'unstable_' prefix. These methods remain functional but may undergo breaking changes without notice in future releases.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Old API names\napiRef.current.applyFilters\ngridContainerSizesSelector\ngridViewportSizesSelector\ngridScrollBarSizeSelector\n\n// New API names\napiRef.current.unstable_applyFilters\nunstable_gridContainerSizesSelector\nunstable_gridViewportSizesSelector\nunstable_gridScrollBarSizeSelector\n```\n\n----------------------------------------\n\nTITLE: Replacing MultiInputRangeFieldClassKey Type in TypeScript\nDESCRIPTION: Import statements for specific field class keys that replace the generic MultiInputRangeFieldClassKey. Different imports are provided based on the field type (date, time, or date-time).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// If you were using MultiInputRangeFieldClassKey for a date range field.\nimport { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n\n// If you were using MultiInputRangeFieldClassKey for a time range field.\nimport { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n\n// If you were using MultiInputRangeFieldClassKey for a date time range field.\nimport { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Date Time Range Field in React\nDESCRIPTION: This code snippet illustrates the implementation of controlled and uncontrolled values for Date Time Range Field components in React. It demonstrates how to manage the component's value either through internal state or parent-provided props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-field/date-time-range-field.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateTimeRangeFieldValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Stabilizing List View Feature\nDESCRIPTION: Updates to list view related props and types, removing unstable_ prefix and renaming types.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-const listViewColDef: GridListColDef = {\n+const listViewColDef: GridListViewColDef = {\n   field: 'listColumn',\n   renderCell: ListViewCell,\n };\n\n <DataGridPro\n-  unstable_listView\n-  unstable_listColumn={listViewColDef}\n+  listView\n+  listViewColumn={listViewColDef}\n />\n```\n\n----------------------------------------\n\nTITLE: Migrating PickerShortcutChangeImportance type to PickerChangeImportance\nDESCRIPTION: Shows how to update the renamed type from PickerShortcutChangeImportance to PickerChangeImportance.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n-import { PickerShortcutChangeImportance } from '@mui/x-date-pickers/PickersShortcuts';\n-import { PickerShortcutChangeImportance } from '@mui/x-date-pickers';\n-import { PickerShortcutChangeImportance } from '@mui/x-date-pickers-pro';\n\n+import { PickerChangeImportance } from '@mui/x-date-pickers/models';\n+import { PickerChangeImportance } from '@mui/x-date-pickers';\n+import { PickerChangeImportance } from '@mui/x-date-pickers-pro';\n```\n\n----------------------------------------\n\nTITLE: Updating gridCheckboxSelectionColDef Constant Name\nDESCRIPTION: Shows how to update code after the gridCheckboxSelectionColDef was renamed to GRID_CHECKBOX_SELECTION_COL_DEF to follow naming convention.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n-gridCheckboxSelectionColDef\n+GRID_CHECKBOX_SELECTION_COL_DEF\n```\n\n----------------------------------------\n\nTITLE: Updating Axis Position Configuration in LineChart\nDESCRIPTION: Migration example for replacing topAxis, rightAxis, bottomAxis and leftAxis props with position property in axis config\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <LineChart\n   yAxis={[\n     {\n       scaleType: 'linear',\n+      position: 'right',\n     },\n   ]}\n   series={[{ data: [1, 10, 30, 50, 70, 90, 100], label: 'linear' }]}\n   height={400}\n-  rightAxis={{}}\n />\n```\n\n----------------------------------------\n\nTITLE: Rendering Chart Features Grid in React\nDESCRIPTION: This code snippet renders a grid displaying all chart features shared across components. It provides navigation to feature-specific documentation pages.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/overview/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/ChartFeaturesGrid.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing @mui/x-tree-view package using pnpm\nDESCRIPTION: Command to install the @mui/x-tree-view package using pnpm package manager.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-lab/migration-tree-view-lab.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/x-tree-view\n```\n\n----------------------------------------\n\nTITLE: Removing ChartsOnAxisClickHandler in ChartContainer\nDESCRIPTION: Remove the ChartsOnAxisClickHandler component and pass the onAxisClick handler directly to ChartContainer.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n+ <ChartContainer onAxisClick={() => {}}>\n- <ChartContainer>\n-   <ChartsOnAxisClickHandler onAxisClick={() => {}} />\n </ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Using AdapterDateFnsV3 with date-fns v3\nDESCRIPTION: Code example showing how to use the new AdapterDateFnsV3 with date-fns version 3.x for the date pickers component. This demonstrates the updated import format for the adapter and locale.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// with date-fns v3.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\nimport { de } from 'date-fns/locale/de';\n```\n\n----------------------------------------\n\nTITLE: Enabling cell selection in DataGridPremium\nDESCRIPTION: The Data Grid Premium now supports cell selection by passing the unstable_cellSelection prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium unstable_cellSelection />\n```\n\n----------------------------------------\n\nTITLE: Replacing Legend Hidden Prop with hideLegend in BarChart\nDESCRIPTION: Replace the slotProps.legend.hidden prop with the hideLegend prop in BarChart component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <BarChart\n-  slotProps={{ legend: { hidden: true } }}\n+  hideLegend\n />\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting MUI X docs in development mode\nDESCRIPTION: Command to install dependencies using pnpm and start the MUI X documentation website in development mode. Requires pnpm to be installed beforehand.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i && pnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Data Grid Header Filter Clear Button Configuration\nDESCRIPTION: Configuration to restore the clear button in header filter cells after it was moved to the header filter menu in a breaking change.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nslotProps={{ headerFilterCell: { showClearIcon: true } }}\n```\n\n----------------------------------------\n\nTITLE: Styling Tree Item components for legacy behavior in MUI-X Tree View (TSX)\nDESCRIPTION: This code demonstrates how to style Tree Item components to maintain the previous behavior of indentation when not using drag and drop re-ordering. It involves custom styling of TreeItemContent and TreeItemGroupTransition components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTreeItemContent = styled(TreeItemContent)(({ theme }) => ({\n  // Remove the additional padding of nested elements\n  padding: theme.spacing(0.5, 1),\n}));\n\nconst CustomTreeItemGroupTransition = styled(TreeItemGroupTransition)({\n  // Add the padding back on the group transition element\n  paddingLeft: 'var(--TreeView-itemChildrenIndentation) !important',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing MUI Theme Components\nDESCRIPTION: Example of theme customization for TextField and PickersTextField components, including variant and style definitions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'outlined',\n      },\n      styleOverrides: {\n        root: {\n          '& .MuiInputLabel-outlined.Mui-focused': {\n            color: 'red',\n          },\n        },\n      },\n    },\n    MuiPickersTextField: {\n      defaultProps: {\n        variant: 'outlined',\n      },\n      styleOverrides: {\n        root: {\n          '& .MuiInputLabel-outlined.Mui-focused': {\n            color: 'red',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Stabilized Experimental Features in Data Grid\nDESCRIPTION: This codemod removes feature flags for stabilized experimentalFeatures in the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  experimentalFeatures={{\n-    lazyLoading: true,\n-    ariaV7: true,\n-    clipboardPaste: true,\n-    columnGrouping: true,\n-  }}\n />\n```\n\n----------------------------------------\n\nTITLE: React Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing React and React DOM peer dependency requirements for the package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/quickstart/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Input in React Date Picker\nDESCRIPTION: Updates the input when the 'inputFormat' prop is modified. This ensures the displayed date format stays in sync with the prop value.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate input when `inputFormat` is modified\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputTimeRangeFieldProps Interface in TypeScript\nDESCRIPTION: Interface definition for UseMultiInputTimeRangeFieldProps that combines TimeRangeManagerFieldInternalProps with MultiInputFieldRefs. Used for multi-input time range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ninterface UseMultiInputTimeRangeFieldProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n> extends TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n    MultiInputFieldRefs {}\n```\n\n----------------------------------------\n\nTITLE: Installing date library dependencies\nDESCRIPTION: Commands to install various supported date libraries (date-fns, dayjs, luxon, or moment) using npm.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# date-fns\nnpm install date-fns\n\n# or dayjs\nnpm install dayjs\n\n# or luxon\nnpm install luxon\n\n# or moment\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Replacing hasLeadingZeros with hasLeadingZerosInFormat\nDESCRIPTION: Shows how to update code that accesses the hasLeadingZeros property of field sections to use the more precise hasLeadingZerosInFormat property instead.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_89\n\nLANGUAGE: diff\nCODE:\n```\n const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n\n React.useEffect(() => {\n   const firstSection = fieldRef.current!.getSections()[0];\n-  console.log(firstSection.hasLeadingZeros);\n+  console.log(firstSection.hasLeadingZerosInFormat);\n }, []);\n\n return (\n   <DateField unstableFieldRef={fieldRef} />\n );\n```\n\n----------------------------------------\n\nTITLE: DatePicker Value Format Examples\nDESCRIPTION: Examples of correct value prop format for different date adapters in v6\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Date-fns\n<DatePicker value={new Date()} />;\n\n// Dayjs\nimport dayjs from 'dayjs';\n<DatePicker value={dayjs()} />;\n\n// Moment\nimport moment from 'moment';\n<DatePicker value={moment()} />;\n\n// Luxon\nimport { DateTime } from 'luxon';\n<DatePicker value={DateTime.now()} />;\n```\n\n----------------------------------------\n\nTITLE: Updating TreeItem Component from TransitionComponent to slots in React\nDESCRIPTION: Code example showing how to migrate from using TransitionComponent and TransitionProps to using the new slots API in TreeItem component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n <SimpleTreeView>\n    <TreeItem\n      nodeId=\"1\"\n      label=\"Node 1\"\n-     TransitionComponent={Fade}\n+     slots={{ groupTransition: Fade }}\n-     TransitionProps={{ timeout: 600 }}\n+     slotProps={{ groupTransition: { timeout: 600 } }}\n    />\n  </SimpleTreeView>\n```\n\n----------------------------------------\n\nTITLE: Updating YearPicker Component Name in Theme\nDESCRIPTION: The YearPicker component name in the theme has been updated to YearCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_69\n\nLANGUAGE: diff\nCODE:\n```\n-MuiYearPicker: {\n+MuiYearCalendar: {\n```\n\n----------------------------------------\n\nTITLE: Renaming Tree View to Simple Tree View\nDESCRIPTION: This codemod renames the Tree View component to Simple Tree View and updates its import path.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n return (\n-  <TreeView>\n+  <SimpleTreeView>\n     <TreeItem itemId=\"1\" label=\"First item\" />\n-  </TreeView>\n+  </SimpleTreeView>\n );\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies for MUI X Charts\nDESCRIPTION: JSON object listing the peer dependencies required for the MUI X Charts package, including version ranges for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Parent ID API Method\nDESCRIPTION: Demonstrates how to get the parent ID of an item through the public API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/items/items.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\npublicAPI.getParentId(itemId);\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Add showToolbar Prop Codemod Command\nDESCRIPTION: Command to execute the add-showToolbar-prop codemod that automatically adds the showToolbar prop where needed.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/data-grid/add-showToolbar-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Removing experimental newEditingApi flag in DataGrid\nDESCRIPTION: The new editing API that was previously available under the experimental flag is now the default in v6. This diff shows how to remove the flag when upgrading.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  experimentalFeatures={{ newEditingApi: true }}\n />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Data with Hidden Descendant Count\nDESCRIPTION: Example showing how to hide the count of descendant nodes in Tree Data view by passing the hideDescendantCount option to the groupingColDef property.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_31\n\nLANGUAGE: TSX\nCODE:\n```\n<DataGridPro treeData rows={rows} columns={columns} groupingColDef={{ hideDescendantCount }} />\n```\n\n----------------------------------------\n\nTITLE: Updating TimeClock ampm prop\nDESCRIPTION: Sets explicit ampm prop for maintaining 24-hour time format.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- <ClockPicker />\n+ <TimeClock ampm={false} />\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Links to Calendar Components\nDESCRIPTION: Adds reference links to calendar components in the Date and Time Pickers. This improves documentation and navigation within the component library.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n[pickers] Add reference links to calendar components (#10644) @michelengelen\n```\n\n----------------------------------------\n\nTITLE: Fixing Excel Export Web Worker in DataGridPremium\nDESCRIPTION: Addresses an issue with the Excel export Web Worker demo not working in development mode for the DataGridPremium component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n// Fixed Excel export Web Worker demo\n<DataGridPremium\n  {...props}\n  slots={{\n    excelExportWorker: () => new Worker(new URL('path/to/excelExportWorker', import.meta.url))\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration Update\nDESCRIPTION: Example of updating theme configuration with renamed picker components and supported props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiPickerPopper: {\n      defaultProps: {\n        // Those are now the props with support for theme default props\n        position: \"bottom\"\n        classes: { root: \"custom-root-class\"}\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating RangeFieldSection type to FieldRangeSection\nDESCRIPTION: Shows how to update the renamed type from RangeFieldSection to FieldRangeSection.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n-import { RangeFieldSection } from '@mui/x-date-pickers-pro/models';\n-import { RangeFieldSection } from '@mui/x-date-pickers-pro';\n\n+import { FieldRangeSection } from '@mui/x-date-pickers-pro/models';\n+import { FieldRangeSection } from '@mui/x-date-pickers-pro';\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Internationalization\nDESCRIPTION: Component import declaration for the internationalization features section.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/Internationalization.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Running Codemods for Date and Time Pickers Migration\nDESCRIPTION: Execute the codemod script to automatically adjust the code for breaking changes in v8 of Date and Time Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v8.0.0/pickers/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Rendering Text in MUI X Charts with Line Breaks (JavaScript)\nDESCRIPTION: New text rendering mechanism for MUI X Charts that adds line break support and avoids overlapping text in legends. Involves changes to DOM structure and styling approach.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<PieChart\n  {/** ... */}\n  slotProps={{\n    legend: {\n      labelStyle: {\n        fontSize: 16,\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Responsive Styles\nDESCRIPTION: Replaces deprecated mode classes with media query-based styling.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n <GlobalStyles\n   styles={{\n-    [`.${pickersYearClasses.modeDesktop}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n\n-    [`.${pickersYearClasses.modeMobile}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY.replace('@media', '@media not')]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Improving Cell Editing API\nDESCRIPTION: Updates cell editing API methods including commitCellChange, setCellMode, and removes setCellValue.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-apiRef.current.commitCellChange({ id: 1, field: 'name', props: { value: 'Ana' } });\n+apiRef.current.setEditCellProps({ id: 1, field: 'name', props: { value: 'Ana' } });\n+apiRef.current.commitCellChange({ id: 1, field: 'name' });\n```\n\nLANGUAGE: diff\nCODE:\n```\n+apiRef.current.setCellMode(1, 'name', 'edit');\n apiRef.current.commitCellChange({ id: 1, field: 'name' });\n```\n\nLANGUAGE: diff\nCODE:\n```\n-apiRef.current.setCellValue({ id: 1, field: 'name', value: 'Ana' });\n+apiRef.current.updateRows([{ id: 1, name: 'Ana' }]);\n```\n\nLANGUAGE: diff\nCODE:\n```\n-apiRef.current.getEditCellProps(1, 'name');\n+const { props } = apiRef.current.getEditCellPropsParams(1, 'name');\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker Action Bar\nDESCRIPTION: Example of using the new actionBar slot prop to configure the buttons displayed in the DatePicker's action bar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-lab/migration-pickers-lab.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  componentsProps={{\n    // The actions will be the same between desktop and mobile\n    actionBar: {\n      actions: ['clear'],\n    },\n    // The actions will be different between desktop and mobile\n    actionBar: ({ wrapperVariant }) => ({\n      actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n    }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling MUI X Telemetry via Global Flag\nDESCRIPTION: Sets a global flag __MUI_X_TELEMETRY_DISABLED__ to false using ponyfillGlobal from @mui/utils to enable telemetry in the application.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/guides/telemetry/telemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ponyfillGlobal } from '@mui/utils';\n\nponyfillGlobal.__MUI_X_TELEMETRY_DISABLED__ = false;\n```\n\n----------------------------------------\n\nTITLE: Renaming Expansion Props in Tree View\nDESCRIPTION: This codemod renames the expansion-related props in the Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n <TreeView\n-  onNodeToggle={handleExpansionChange}\n+  onExpandedItemsChange={handleExpansionChange}\n\n-  expanded={expandedItems}\n+  expandedItems={expandedItems}\n\n-  defaultExpanded={defaultExpandedItems}\n+  defaultExpandedItems={defaultExpandedItems}\n />\n```\n\n----------------------------------------\n\nTITLE: Keyboard navigation table for date calendar\nDESCRIPTION: Markdown table showing keyboard shortcuts and their functions for the date calendar component\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/accessibility/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                             Keys | Description                                                     |\n| -------------------------------: | :-------------------------------------------------------------- |\n|   <kbd class=\"key\">Page Up</kbd> | Moves calendar to next month, keeping focus on the same day     |\n| <kbd class=\"key\">Page Down</kbd> | Moves calendar to previous month, keeping focus on the same day |\n|      <kbd class=\"key\">Home</kbd> | Moves focus to the first day of the week                        |\n|       <kbd class=\"key\">End</kbd> | Moves focus to the last day of the week                         |\n```\n\n----------------------------------------\n\nTITLE: Renaming useTreeItem Hook to useTreeItemState\nDESCRIPTION: This codemod renames the useTreeItem hook to useTreeItemState in the Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeItem, useTreeItem } from '@mui/x-tree-view/TreeItem';\n+import { TreeItem, useTreeItemState } from '@mui/x-tree-view/TreeItem';\n\n const CustomContent = React.forwardRef((props, ref) => {\n-  const { disabled } = useTreeItem(props.itemId);\n+  const { disabled } = useTreeItemState(props.itemId);\n\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Cell Selection Props Codemod Command\nDESCRIPTION: Command to execute the rename-cell-selection-props codemod that updates cell selection related prop names.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/data-grid/rename-cell-selection-props <path>\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Page Size Options\nDESCRIPTION: Migration example showing prop rename from rowsPerPageOptions to pageSizeOptions.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n-<DataGrid rowsPerPageOptions={[10, 20, 50]} />\n+<DataGrid pageSizeOptions={[10, 20, 50]} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Filter Model After State Structure Change\nDESCRIPTION: Demonstrates how to access filter model after state.filter and state.visibleRows were merged into a single state.filter sub-state. Shows preferred methods using selectors.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n-const filterModel = state.filter\n-const filterModel = gridFilterStateSelector(state)\n+const filterModel = state.filter.filterModel\n+const filterModel = gridFilterModelSelector(state) // preferred method\n\n-const visibleRowsLookup = state.visibleRows.visibleRowsLookup\n-const visibleRowsLookup = visibleGridRowsStateSelector(state).visibleRowsLookup\n+const visibleRowsLookup = state.filter.visibleRowsLookup\n+const visibleRowsLookup = gridVisibleRowsLookupSelector(state).visibleRowsLookup // preferred method\n\n-const visibleRows = state.visibleRows.visibleRows\n+const visibleRows = state.filter.visibleRows\n+const visibleRows = gridVisibleRowsLookupSelector(state).visibleRows // preferred method\n```\n\n----------------------------------------\n\nTITLE: Adding Row Spacing to DataGrid (TypeScript)\nDESCRIPTION: Shows how to add vertical spacing between rows in the DataGrid component using the getRowSpacing prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid getRowSpacing={() => ({ top: 10, bottom: 10 })} />\n```\n\n----------------------------------------\n\nTITLE: Updating DayCalendar Component Name in Theme\nDESCRIPTION: The DayPicker component name in the theme has been updated to DayCalendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n-MuiDayPicker: {\n+MuiDayCalendar: {\n```\n\n----------------------------------------\n\nTITLE: MUI-X: Preset-Safe Codemod Command for v7.0.0\nDESCRIPTION: Command to run all safe transformations for migrating from v6 to v7, covering both Data Grid and Pickers components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: Removing Position Prop from Charts Axis Components\nDESCRIPTION: Migration example showing removal of position prop from ChartsXAxis and ChartsYAxis components\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n <ChartContainer\n   yAxis={[\n     {\n       id: 'my-axis',\n+      position: 'right',\n     },\n   ]}\n >\n-  <ChartsYAxis axisId=\"my-axis\" position=\"right\" />\n+  <ChartsYAxis axisId=\"my-axis\" />\n </ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Example of Manual Slots Prop Merging\nDESCRIPTION: Example showing potential conflict when running the slots migration codemod with both slots and components props\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v5/migration-pickers-v5.md#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n// Before running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  components={{ toolbar: MyToolbar }}\n/>\n\n// After running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  slots={{ toolbar: MyToolbar }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Theme Providers for v4/v5 Compatibility\nDESCRIPTION: Sets up the component tree with both v4 and v5 theme providers to support components from both versions.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { ThemeProvider as ThemeProviderV5 } from '@mui/material/styles';\nimport { ThemeProvider as ThemeProviderV4, StylesProvider } from '@material-ui/core/styles';\n\nconst generateClassName = createGenerateClassName({ ... });\nconst themeV4 = createThemeV4({ ... });\nconst themeV5 = createThemeV5({ ... });\n\nexport default function DataGridDemo() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>\n      <ThemeProviderV4 theme={themeV4}>\n        <ThemeProviderV5 theme={themeV5}>\n          {/* Your component tree. */}\n        </ThemeProviderV5>\n      </ThemeProviderV4>\n    </StylesProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Event Constants to GridEvents Enum\nDESCRIPTION: Code changes required to migrate from the deprecated event constants to the new GridEvents enum introduced in v4.0.0-alpha.37.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { GRID_CELL_EDIT_START } from '@material-ui/x-grid';\n-apiRef.current.subscribeEvent(GRID_CELL_EDIT_START, (params, event) => { ... });\n+import { GridEvents } from '@material-ui/x-grid';\n+apiRef.current.subscribeEvent(GridEvents.cellEditStart, (params, event) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel in MUI X Core\nDESCRIPTION: Updates Babel configuration files for the MUI X core library.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [core] Update babel configs (#9713) @romgrk\n```\n\n----------------------------------------\n\nTITLE: Updating TreeItem Group Class Name\nDESCRIPTION: Shows how to update the CSS class name for TreeItem group styling to match the new slot name.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n const StyledTreeItem = styled(TreeItem)({\n-  [`& .${treeItemClasses.group}`]: {\n+  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 20,\n  },\n });\n```\n\n----------------------------------------\n\nTITLE: Renaming Field Hook Input Ref\nDESCRIPTION: Breaking change to rename ref returned by field hooks from 'ref' to 'inputRef' for clarity\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n const fieldResponse = useDateField(props);\n\n-return <input ref={fieldResponse.ref} />\n+return <input ref={fieldResponse.inputRef} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Toolbar Components in DataGrid\nDESCRIPTION: Prefixes all toolbar-related components with 'GridToolbar' for consistency.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_15\n\nLANGUAGE: Diff\nCODE:\n```\n-.MuiDataGridFilterToolbarButton-list\n+.MuiDataGridToolbarFilterButton-list\n```\n\nLANGUAGE: Diff\nCODE:\n```\n-<GridColumnsToolbarButton />\n+<GridToolbarColumnsButton />\n```\n\nLANGUAGE: Diff\nCODE:\n```\n-<GridFilterToolbarButton />\n+<GridToolbarFilterButton />\n```\n\nLANGUAGE: Diff\nCODE:\n```\n-<GridDensitySelector />\n+<GridToolbarDensitySelector />\n```\n\n----------------------------------------\n\nTITLE: Updating shouldDisableTime prop in DateTimePicker\nDESCRIPTION: The shouldDisableTime prop signature has changed. This snippet shows two ways to update the prop usage: renaming to shouldDisableClock or refactoring the callback function.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\n<DateTimePicker\n  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<DateTimePicker\n  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Telemetry Handling in MUI X\nDESCRIPTION: Improves request body size, updates dependencies, and optimizes server-side rendering (SSR) handling for telemetry in MUI X.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [telemetry] Improve request body size, update dependencies, and optimize SSR handling (#17008) @hasdfa\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Day Picker Classes Transformation\nDESCRIPTION: Updates the import of 'dayPickerClasses' to 'dayCalendarClasses' for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n-import { dayPickerClasses } from '@mui/x-date-pickers/DateCalendar';\n+import { dayCalendarClasses } from '@mui/x-date-pickers/DateCalendar';\n```\n\n----------------------------------------\n\nTITLE: Replacing showToolbar prop with components API in DataGrid\nDESCRIPTION: Demonstrates the migration from the deprecated showToolbar prop to using the new components API to render the GridToolbar component in DataGrid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n-import { DataGrid } from '@material-ui/data-grid';\n+import { DataGrid, GridToolbar } from '@material-ui/data-grid';\n\n-<DataGrid showToolbar />\n+<DataGrid components={{ Toolbar: GridToolbar }} />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Reform Row Selection Model Transformation\nDESCRIPTION: Updates the rowSelectionModel structure from an array to an object with 'type' and 'ids' properties, where ids is a Set containing the selected row identifiers.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-const [rowSelectionModel, setRowSelectionModel] = React.useState([1, 2]);\n+const [rowSelectionModel, setRowSelectionModel] = React.useState({\n+  type: 'include',\n+  ids: new Set([1, 2]),\n+});\n\n <DataGrid\n  rowSelectionModel={rowSelectionModel}\n  onRowSelectionModelChange={setRowSelectionModel}\n />\n```\n\n----------------------------------------\n\nTITLE: Renaming Selectors and Events in MUI X Data Grid v6.0.0\nDESCRIPTION: This code snippet demonstrates the changes required for renaming selectors and events in the MUI X Data Grid upgrade to v6.0.0. It includes updates to event handlers, subscriptions, and various selector functions.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\nfunction App() {\n-  useGridApiEventHandler(apiRef, 'selectionChange', handleEvent);\n-  apiRef.current.subscribeEvent('selectionChange', handleEvent);\n-  const selection = useGridSelector(apiRef, gridSelectionStateSelector);\n-  const sortedRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);\n-  const sortedRowEntries = useGridSelector(apiRef, gridVisibleSortedRowEntriesSelector);\n-  const rowCount = useGridSelector(apiRef, gridVisibleRowCountSelector);\n-  const sortedTopLevelRowEntries = useGridSelector(apiRef, gridVisibleSortedTopLevelRowEntriesSelector);\n-  const topLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n-  const allGridColumnsFields = useGridSelector(apiRef, allGridColumnsFieldsSelector);\n-  const allGridColumns = useGridSelector(apiRef, allGridColumnsSelector);\n-  const visibleGridColumns = useGridSelector(apiRef, visibleGridColumnsSelector);\n-  const filterableGridColumns = useGridSelector(apiRef, filterableGridColumnsSelector);\n-  const getGridNumericColumn = useGridSelector(apiRef, getGridNumericColumnOperators);\n+  useGridApiEventHandler(apiRef, 'rowSelectionChange', handleEvent);\n+  apiRef.current.subscribeEvent('rowSelectionChange', handleEvent);\n+  const selection = useGridSelector(apiRef, gridRowSelectionStateSelector);\n+  const sortedRowIds = useGridSelector(apiRef, gridExpandedSortedRowIdsSelector);\n+  const sortedRowEntries = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n+  const rowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n+  const sortedTopLevelRowEntries = useGridSelector(apiRef, gridFilteredSortedTopLevelRowEntriesSelector);\n+  const topLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n+  const allGridColumnsFields = useGridSelector(apiRef, gridColumnFieldsSelector);\n+  const allGridColumns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n+  const visibleGridColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n+  const filterableGridColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);\n+  const getGridNumericColumn = useGridSelector(apiRef, getGridNumericOperators);\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming CalendarPickerSkeleton to DayCalendarSkeleton\nDESCRIPTION: The CalendarPickerSkeleton component has been renamed to DayCalendarSkeleton to better reflect its purpose.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n-<CalendarPickerSkeleton {...props} />\n+<DayCalendarSkeleton {...props} />\n```\n\n----------------------------------------\n\nTITLE: Replacing Column Type Constants with String Literals\nDESCRIPTION: Shows how to update code after the constants for column types were removed in favor of using string literals directly.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n-const isColumnString = column.type === GRID_STRING_COLUMN_TYPE;\n+const isColumnString = col.type === 'string';\n\n-const isColumnNumber = col.type === GRID_NUMBER_COLUMN_TYPE;\n+const isColumnNumber = col.type === 'number';\n\n-const isColumnDate = col.type === GRID_DATE_COLUMN_TYPE;\n+const isColumnDate = col.type === 'date';\n\n-const isColumnDateTime = col.type === GRID_DATETIME_COLUMN_TYPE;\n+const isColumnDateTime = col.type === 'dateTime';\n\n-const isColumnBoolean = col.type === GRID_BOOLEAN_COLUMN_TYPE;\n+const isColumnBoolean = col.type === 'boolean';\n```\n\n----------------------------------------\n\nTITLE: Plugin State Enrichment - Column Hydration in TypeScript\nDESCRIPTION: Demonstrates how to add or remove custom feature columns before updating state.columns. The processor checks if custom columns should be present and modifies the columns state accordingly.\nSOURCE: https://github.com/mui/mui-x/blob/master/docsTech/processing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst addCustomFeatureColumn = React.useCallback<GridPipeProcessor<'hydrateColumns'>>(\n  (columnsState) => {\n    const customFeatureColumn = getCustomFeatureColumn();\n    const shouldHaveCustomFeatureColumn = !props.disableCustomFeature;\n    const haveCustomFeatureColumn = columnsState.lookup[customFeatureColumn.field] != null;\n\n    if (shouldHaveCustomFeatureColumn && !haveCustomFeatureColumn) {\n      columnsState.lookup[customFeatureColumn.field] = customFeatureColumn;\n      columnsState.orderedFields = [customFeatureColumn.field, ...columnsState.orderedFields];\n    }\n    else if (!shouldHaveCustomFeatureColumn && haveCustomFeatureColumn) {\n      delete columnsState.lookup[customFeatureColumn.field];\n      columnsState.orderedFields = columnsState.orderedFields.filter(\n        (field) => field !== customFeatureColumn.field,\n      );\n    }\n\n    return columnsState;\n  },\n  [apiRef, classes, getCustomFeatureColumn],\n);\n```\n\n----------------------------------------\n\nTITLE: ClockPicker Renaming Changes\nDESCRIPTION: Breaking change showing the renaming of ClockPicker component to TimeClock\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n-<ClockPicker {...props} />\n+<TimeClock {...props} />\n\n-MuiClockPicker: {\n+MuiTimeClock: {\n```\n\n----------------------------------------\n\nTITLE: Running General MUI X Codemod\nDESCRIPTION: Command to run the general MUI X codemod for v7 migration, including other components like Date and Time pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Allowing Print Export in Data Grid\nDESCRIPTION: Modifies the Data Grid component to allow print export for more than 100 rows.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [DataGrid] Allow print export for more than 100 rows (#10045) @MBilalShafi\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for MUI X v8 with Material UI v5/v6\nDESCRIPTION: Webpack configuration to pass the 'require' condition for compatibility with MUI X v8 and Material UI v5/v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/usage-with-material-ui-v5-v6/usage-with-material-ui-v5-v6.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // other webpack config\n  resolve: {\n    // '...' is important here – it keeps the default webpack conditionNames\n    conditionNames: ['require', '...'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Ordinal Color Map Configuration\nDESCRIPTION: TypeScript interface for creating an ordinal color map that assigns specific colors to specific values. Includes fallback handling for unknown values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{\n  type: 'ordinal';\n  values: Value[];\n  colors: string[];\n  unknownColor?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Core Changes Log\nDESCRIPTION: Markdown list of core functionality changes and improvements\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### Core\n\n- [core] Bump monorepo (#10619) @alexfauquette\n- [core] Update `no-response` workflow (#10491) @MBilalShafi\n- [core] Update the issue templates to reflect the new support workflow (#10651) @MBilalShafi\n- [test] Fix `testEval` not invoking test assertions (#10587) @cherniavskii\n- [test] Fix dev mode warning (#10610) @oliviertassinari\n- [test] Set UUID chance seed in visual tests (#10609) @oliviertassinari\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Tree View and Dependencies with yarn\nDESCRIPTION: Command to install MUI X Tree View component along with its Material UI peer dependencies using yarn.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Peer dependencies for MUI X Date Pickers\nDESCRIPTION: JSON object listing the peer dependencies required for MUI X Date Pickers, including version ranges for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies Configuration\nDESCRIPTION: Required peer dependencies for MUI X Date Pickers Pro, including version requirements for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers-pro/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming DayPicker to DayCalendar\nDESCRIPTION: The DayPicker component has been renamed to DayCalendar to better reflect its purpose.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n-<DayPicker {...props} />\n+<DayCalendar {...props} />\n```\n\n----------------------------------------\n\nTITLE: Updating Date Picker Value Prop Usage in React\nDESCRIPTION: Updates the usage of the value prop in Date Picker components to use parsed date values for different date management libraries.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_75\n\nLANGUAGE: jsx\nCODE:\n```\n// Date-fns\n<DatePicker value={new Date()} />;\n\n// Dayjs\nimport dayjs from 'dayjs';\n<DatePicker value={dayjs()} />;\n\n// Moment\nimport moment from 'moment';\n<DatePicker value={moment()} />;\n\n// Luxon\nimport { DateTime } from 'luxon';\n<DatePicker value={DateTime.now()} />;\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Date Pickers package\nDESCRIPTION: Command to install the MUI X Date Pickers package using npm.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-date-pickers\n```\n\n----------------------------------------\n\nTITLE: Updating MUI X License Import Path\nDESCRIPTION: Breaking change in the commercial license import path, requiring users to update from @mui/x-license-pro to @mui/x-license\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\n----------------------------------------\n\nTITLE: Removing Unsupported Props in Data Grid\nDESCRIPTION: Codemod to remove props that are no longer supported in MUI X Data Grid components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  indeterminateCheckboxAction=\"deselect\"\n-  rowPositionsDebounceMs={100}\n-  resetPageOnSortFilter\n />\n```\n\n----------------------------------------\n\nTITLE: Executing Rename Selectors and Events Codemod for MUI X Data Grid v6.0.0\nDESCRIPTION: This bash command runs the codemod to automatically rename selectors and events in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-selectors-and-events <path>\n```\n\n----------------------------------------\n\nTITLE: Example DataGrid ColumnsPanel Control\nDESCRIPTION: Reference to allowing control of column visibility in the Columns Panel component through PR #8401.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n[DataGrid] Allow to control visibility of columns shown in the `ColumnsPanel` component (#8401)\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Cell Editing Props in React\nDESCRIPTION: Replaces deprecated cell editing props with new ones in the DataGrid component. onCellModeChange is replaced with onCellEditStart and onCellEditStop.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n-  onCellEditEnter={...}\n-  onCellEditExit={...}\n+  onCellEditStart={...}\n+  onCellEditStop={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating orientation and isLandscape Props to usePickerContext\nDESCRIPTION: Shows how to determine orientation and isLandscape state using the usePickerContext hook instead of receiving them as props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { orientation } = props;\n+const { orientation } = usePickerContext();\n\n-const { isLandscape } = props;\n+const { orientation } = usePickerContext();\n+const isLandscape = orientation === 'landscape';\n```\n\n----------------------------------------\n\nTITLE: Embedding InstallationGrid Component in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a React component called InstallationGrid within a markdown file. It uses a custom syntax to include the component, likely processed by a static site generator or custom markdown parser.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/installation/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{\"component\": \"modules/components/InstallationGrid.js\"}}\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates\nDESCRIPTION: Code showing version updates for different MUI X packages\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### `@mui/x-date-pickers@6.19.12`\n#### `@mui/x-date-pickers-pro@6.19.12`\n#### `@mui/x-data-grid@6.19.12`\n```\n\n----------------------------------------\n\nTITLE: Fixing Year Calendar Scrolling\nDESCRIPTION: Addresses scrolling issues in the YearCalendar component of pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Fix `YearCalendar` scrolling (#10135) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputDateTimeRangeFieldComponentProps Type in TypeScript\nDESCRIPTION: Type definition that combines component props with DateTimeRangeManagerFieldInternalProps and MultiInputFieldRefs. Used for creating custom multi-input date-time range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ntype UseMultiInputDateTimeRangeFieldComponentProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  | keyof DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n  | keyof MultiInputFieldRefs\n> &\n  DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n  MultiInputFieldRefs;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Calendar Header Slot Implementation - React Component\nDESCRIPTION: Example showing incorrect implementation of calendar header slot that causes remounting issues due to new function creation on each render.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/common-concepts/custom-components/custom-components.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{\n        calendarHeader: () => (\n          <input value={name} onChange={(event) => setName(event.target.value)} />\n        ),\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Legend Direction Values in MUI X Charts\nDESCRIPTION: Codemod to replace 'row' and 'column' values with 'horizontal' and 'vertical' for legend direction in MUI X Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n <BarChart\n    slotProps={{\n      legend: {\n-        direction: \"row\"\n+        direction: \"horizontal\"\n      }\n    }}\n />\n```\n\n----------------------------------------\n\nTITLE: Installing @mui/x-tree-view package using yarn\nDESCRIPTION: Command to install the @mui/x-tree-view package using yarn package manager.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-lab/migration-tree-view-lab.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/x-tree-view\n```\n\n----------------------------------------\n\nTITLE: Renaming YearPicker to YearCalendar\nDESCRIPTION: The YearPicker component has been renamed to YearCalendar to better reflect its purpose.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n-<YearPicker {...props} />\n+<YearCalendar {...props} />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Imports Codemod Command\nDESCRIPTION: Command to execute the rename-imports codemod that automatically updates Data Grid import paths for v8.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/data-grid/rename-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming arrow button component slots in DatePicker\nDESCRIPTION: Example showing how to update the deprecated LeftArrowButton and RightArrowButton component slots to the new PreviousIconButton and NextIconButton names.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_80\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n   components={{\n-    LeftArrowButton: CustomButton,\n+    PreviousIconButton: CustomButton,\n\n-    RightArrowButton: CustomButton,\n+    NextIconButton: CustomButton,\n   }}\n   componentsProps={{\n-    leftArrowButton: {},\n+    previousIconButton: {},\n\n-    rightArrowButton: {},\n+    nextIconButton: {},\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Migrating disabled and readOnly Props to usePickerContext\nDESCRIPTION: Shows how to access the disabled and readOnly states using the usePickerContext hook instead of receiving them as props.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { disabled } = props;\n+const { disabled } = usePickerContext();\n\n-const { readOnly } = props;\n+const { readOnly } = usePickerContext();\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Data Grid Pro Package\nDESCRIPTION: Command to install the MUI X Data Grid Pro package using npm package manager.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid-pro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-data-grid-pro\n```\n\n----------------------------------------\n\nTITLE: Removing Modern Bundle Aliases in Webpack Configuration\nDESCRIPTION: Remove the aliases for modern bundles in the Webpack configuration as they are no longer needed.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n {\n   resolve: {\n     alias: {\n-      '@mui/x-date-pickers': '@mui/x-date-pickers/modern',\n-      '@mui/x-date-pickers-pro': '@mui/x-date-pickers-pro/modern',\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Flag via Window Object in JavaScript\nDESCRIPTION: This snippet shows how to enable or disable telemetry by setting a flag on the window object, with a check to ensure the code runs only in browser environments.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-telemetry/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {\n  window.__MUI_X_TELEMETRY_DISABLED__ = false; // enabled\n}\n// or\nif (typeof window !== 'undefined') {\n  window.__MUI_X_TELEMETRY_DISABLED__ = true; // disabled\n}\n```\n\n----------------------------------------\n\nTITLE: CircleCI API Request for Custom Testing\nDESCRIPTION: cURL command to trigger CircleCI pipeline for testing specific PR with custom React version and Material UI v6. Demonstrates API integration for CI workflow.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/mui/mui-x/pipeline \\\n  --header 'content-type: application/json' \\\n  --header 'Circle-Token: $CIRCLE_TOKEN' \\\n  --data-raw '{\"branch\":\"pull/24289/head\",\"parameters\":{\"workflow\":\"additional\",\"with-react-version\":\"rc\",\"with-material-ui-6\":true}}'\n```\n\n----------------------------------------\n\nTITLE: Removing Experimental Row Pinning Flag in DataGridPro\nDESCRIPTION: Row pinning is no longer experimental and can be used without the experimentalFeatures flag.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGridPro\n-  experimentalFeatures={{ rowPinning: true }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating XGrid Cell Editing API Call in JavaScript\nDESCRIPTION: Replaces the deprecated setEditCellProps API call with setEditRowsModel for controlled editing in XGrid.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n-apiRef.current.setEditCellProps({ id, field, props: { ...props, error: true } });\n+apiRef.current.setEditRowsModel({\n+  ...oldModel,\n+  [id]: {\n+    ...oldModel[id],\n+    [field]: { ...oldModel[id][field], error: true },\n+  },\n+});\n```\n\n----------------------------------------\n\nTITLE: Removing TDate Generic Type from Components\nDESCRIPTION: Example showing how to update code after the removal of the TDate generic from all types, interfaces, and components in the date pickers packages.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n-<DatePicker<Dayjs> value={value} onChange={onChange} />\n+<DatePicker value={value} onChange={onChange} />\n\n-type FieldComponent = DatePickerSlots<Dayjs>['field'];\n+type FieldComponent = DatePickerSlots['field'];\n\n-function CustomDatePicker(props: DatePickerProps<Dayjs>) {}\n+function CustomDatePicker(props: DatePickerProps) {}\n```\n\n----------------------------------------\n\nTITLE: Using Instance Methods\nDESCRIPTION: Shows how to use instance methods from one plugin in another plugin.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/rich-tree-view/headless/headless.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst useOtherCustomPlugin = ({ instance }) => {\n  const handleSomeAction = () => {\n    instance.toggleCustomModel();\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating adapter.getYearRange method to accept a tuple parameter\nDESCRIPTION: Shows how to modify code using the getYearRange method to use a tuple parameter instead of two separate parameters for consistency with other range methods.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_90\n\nLANGUAGE: diff\nCODE:\n```\n-adapter.getYearRange(start, end);\n+adapter.getYearRange([start, end])\n```\n\n----------------------------------------\n\nTITLE: Inefficient Data Grid Prop Passing in React\nDESCRIPTION: Demonstrates an inefficient way of passing props to Data Grid, causing unnecessary re-renders due to recreated objects on each render.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/performance/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component(props) {\n  return (\n    <DataGrid\n      rows={props.rows}\n      slots={{\n        row: CustomRow,\n      }}\n      cellModesModel={{ [props.rows[0].id]: { name: { mode: GridCellModes.Edit } } }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing MultiInputRangeFieldClasses Type in TypeScript\nDESCRIPTION: Import statements for specific field classes that replace the generic MultiInputRangeFieldClasses. Different imports are provided based on the field type (date, time, or date-time).\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// If you were using MultiInputRangeFieldClasses for a date range field.\nimport { MultiInputDateRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n\n// If you were using MultiInputRangeFieldClasses for a time range field.\nimport { MultiInputTimeRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n\n// If you were using MultiInputRangeFieldClasses for a date time range field.\nimport { MultiInputDateTimeRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n```\n\n----------------------------------------\n\nTITLE: Running MUI X Codemod Scripts with npx\nDESCRIPTION: Basic command to run MUI X codemod scripts using npx, specifying the codemod name and target paths.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest <codemod> <paths...>\n```\n\n----------------------------------------\n\nTITLE: Updating State Selector Usage\nDESCRIPTION: Changes required in how state selectors are used with the Data Grid API.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-gridColumnFieldsSelector(apiRef.current.state);\n+gridColumnFieldsSelector(apiRef.current.state, apiRef.current.instanceId);\n```\n\nLANGUAGE: js\nCODE:\n```\ngridColumnFieldsSelector(apiRef);\n```\n\n----------------------------------------\n\nTITLE: Running codemod for Tree View migration\nDESCRIPTION: Command to run the codemod provided by MUI to automatically update import statements for Tree View components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-lab/migration-tree-view-lab.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v5.0.0/tree-view-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Components to Slots Codemod Command\nDESCRIPTION: Command to execute the rename-components-to-slots-pickers codemod for Date and Time Picker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/pickers/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Defining React Peer Dependencies for MUI X Charts\nDESCRIPTION: JSON snippet showing the peer dependencies for React and React DOM required by MUI X Charts.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/quickstart/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updated DOM Structure for Chart Text Elements (HTML)\nDESCRIPTION: Changes to the DOM structure for text elements in MUI X Charts, adding an intermediate tspan element.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- <text>The label</text>\n+ <text><tspan>The label</tspan></text>\n```\n\n----------------------------------------\n\nTITLE: Updating Default Animation Reduction Rule\nDESCRIPTION: Modifies the default rule for reducing animations in pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Update `reduceAnimations` default rule (#9864) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: Changes the Data Grid package version from v5 to v6 in package.json dependencies.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-data-grid\": \"^5.0.0\",\n+\"@mui/x-data-grid\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Updating FieldRef Generic Type Usage\nDESCRIPTION: Example showing the change from using TSection generic to TValue generic in FieldRef type, affecting how field references are typed in custom components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n-const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n+const fieldRef = React.useRef<Dayjs | null>(null);\n\n-const fieldRef = React.useRef<FieldRef<RangeFieldSection>>(null);\n+const fieldRef = React.useRef<DateRange<Dayjs>>(null);\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - Feature Highlight\nDESCRIPTION: Component import declaration for the pickers feature highlight section.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/pickers/PickersFeatureHighlight.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Brazilian Portuguese (pt-BR) Locale for Date Pickers\nDESCRIPTION: Adds Brazilian Portuguese translations for the Date Pickers component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Add Brazilian Portuguese (pt-BR) locale (#5100) @jardelnovaes\n```\n\n----------------------------------------\n\nTITLE: Migrating from @material-ui/data-grid to @mui/x-data-grid\nDESCRIPTION: Code changes required to migrate from the old @material-ui/data-grid package to the new @mui/x-data-grid package after the renaming in v4.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { DataGrid } from '@material-ui/data-grid';\n+import { DataGrid } from '@mui/x-data-grid';\n```\n\n----------------------------------------\n\nTITLE: MUI X Tree View Peer Dependencies\nDESCRIPTION: Required peer dependencies for the MUI X Tree View component, including version requirements for Material UI, React, and React DOM.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-tree-view/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Non-working Tooltip Implementation Example\nDESCRIPTION: This code example shows an incorrect implementation of conditional tooltip rendering, where the container component is not rendered when there's no data.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/tooltip/tooltip.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nif (tooltipData === null) {\n  return null;\n}\n\nreturn (\n  <ChartsTooltipContainer trigger=\"item\">\n    {/** My content **/}\n  </ChartsTooltipContainer>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Date Pickers Pro Package\nDESCRIPTION: Command to install the main MUI X Date Pickers Pro package using npm.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-date-pickers-pro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-date-pickers-pro\n```\n\n----------------------------------------\n\nTITLE: Running Local End-to-End Tests for MUI-X Docs in Markdown\nDESCRIPTION: Instructions for running end-to-end tests locally for the MUI-X documentation. It involves starting the development server and running test suites in separate terminal windows.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/e2e-website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Run `pnpm docs:dev` to start docs in development server.\n2. Run `pnpm test:e2e-website` in a separate terminal to run the test suites (`*.spec.ts`) inside `test/e2e-website` folder.\n\n> use --headed to run tests in headed browsers, check out [Playwright CLI](https://playwright.dev/docs/intro#command-line) for more options\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Configuration\nDESCRIPTION: Changes needed for theme configuration to support SimpleTreeView\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n-    MuiTreeView: {\n+    MuiSimpleTreeView: {\n       styleOverrides: {\n         root: {\n           opacity: 0.5,\n         },\n       },\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Cell Selection Props Transformation\nDESCRIPTION: Updates DataGridPremium by renaming cell selection related props, removing the 'unstable_' prefix for v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPremium\n-  unstable_cellSelection\n-  unstable_cellSelectionModel={{ 0: { id: true, currencyPair: true, price1M: false } }}\n-  unstable_onCellSelectionModelChange={() => {}}\n+  cellSelection\n+  cellSelectionModel={{ 0: { id: true, currencyPair: true, price1M: false } }}\n+  onCellSelectionModelChange={() => {}}\n />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Pages Router for MUI X v8 with Material UI v5/v6\nDESCRIPTION: Next.js configuration to pass the 'require' condition and transpile MUI X packages for compatibility with MUI X v8 and Material UI v5/v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/usage-with-material-ui-v5-v6/usage-with-material-ui-v5-v6.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default {\n  webpack: (config) => {\n    // '...' is important here – it keeps the default webpack conditionNames\n    config.resolve.conditionNames = ['require', '...'];\n    return config;\n  },\n  transpilePackages: [\n    '@mui/x-data-grid',\n    '@mui/x-data-grid-pro',\n    '@mui/x-data-grid-premium',\n    '@mui/x-date-pickers',\n    '@mui/x-date-pickers-pro',\n    '@mui/x-charts',\n    '@mui/x-charts-pro',\n    '@mui/x-tree-view',\n    '@mui/x-tree-view-pro',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Field Hook Props Structure\nDESCRIPTION: Breaking change to move inputRef inside props passed to field hooks instead of as separate parameter\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n-const { inputRef, ...otherProps } = props\n-const fieldResponse = useDateField({ props: otherProps, inputRef });\n+const fieldResponse = useDateField(props);\n```\n\n----------------------------------------\n\nTITLE: Removing onAction API Methods in XGrid\nDESCRIPTION: Breaking changes to the XGrid API that remove onAction methods which were duplicating React props and the event subscribe API.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n-onFilterModelChange\n-onPageChange\n-onPageSizeChange\n-onResize\n-onUnmount\n-onRowSelected\n-onSelectionModelChange\n-onSortModelChange\n-onStateChange\n```\n\n----------------------------------------\n\nTITLE: Rendering MUI X License Component in Next.js App Router Layout\nDESCRIPTION: This code snippet demonstrates how to render the MUI X License component in the layout file of a Next.js application using the App Router.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/licensing/licensing.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport MuiXLicense from '@/components/MuiXLicense';\n\nexport default function RootLayout(props: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {props.children}\n        <MuiXLicense />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Tree View Package with NPM\nDESCRIPTION: Command to install the MUI X Tree View package using npm package manager.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-tree-view/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/x-tree-view\n```\n\n----------------------------------------\n\nTITLE: Documentation Change Log\nDESCRIPTION: Markdown list of documentation-related changes and improvements\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Docs\n\n- [docs] Add bulk editing demo (#10333) @cherniavskii\n- [docs] Add reference links to DateRangePicker components (#10629) @michelengelen\n- [docs] Add reference links to DateTimePicker components (#10628) @michelengelen\n- [docs] Add reference links to picker field components (#10631) @michelengelen\n- [docs] Added reference links to TimePicker components (#10627) @michelengelen\n- [docs] Avoid Pickers playground error due to empty views (#10654) @LukasTy\n- [docs] Fix DataGrid[Pro/Premium] reference links (#10620) @michelengelen\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Data Grid Generator Package\nDESCRIPTION: Package identifier for the MUI X Data Grid generator utility, used for creating demo data and examples.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid-generator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/x-data-grid-generator\n```\n\n----------------------------------------\n\nTITLE: Removing Modern Bundle Aliases in Webpack Configuration\nDESCRIPTION: Remove any aliases for modern bundles in the Webpack configuration as they are no longer needed.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n {\n   resolve: {\n     alias: {\n-      '@mui/x-charts': '@mui/x-charts/modern',\n-      '@mui/x-charts-pro': '@mui/x-charts-pro/modern',\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing UseMultiInputTimeRangeFieldComponentProps Type in TypeScript\nDESCRIPTION: Type definition that combines component props with TimeRangeManagerFieldInternalProps and MultiInputFieldRefs. Used for creating custom multi-input time range field components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\nimport { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\ntype UseMultiInputTimeRangeFieldComponentProps<\n  TEnableAccessibleFieldDOMStructure extends boolean,\n  TChildProps extends {},\n> = Omit<\n  TChildProps,\n  | keyof TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n  | keyof MultiInputFieldRefs\n> &\n  TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n  MultiInputFieldRefs;\n```\n\n----------------------------------------\n\nTITLE: Replacing TransitionComponent with component slots in DatePicker\nDESCRIPTION: Migration for replacing the TransitionComponent prop with the new component slots pattern in desktop and responsive Date Pickers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n // Same on DesktopDatePicker, DateTimePicker, DesktopDateTimePicker,\n // TimePicker, DesktopTimePicker, DateRangePicker and DesktopDateRangePicker.\n <DatePicker\n-  TransitionComponent={Fade}\n+  components={{ DesktopTransition: Fade }}\n />\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Rename Props Codemod Command\nDESCRIPTION: Command to execute the rename-props codemod that automatically updates Data Grid props by removing 'unstable_' prefixes.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/data-grid/rename-props <path>\n```\n\n----------------------------------------\n\nTITLE: Executing Replace onCellFocusOut Prop Codemod for MUI X Data Grid v6.0.0\nDESCRIPTION: This bash command runs the codemod to automatically replace the onCellFocusOut prop in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/replace-onCellFocusOut-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation Update Command\nDESCRIPTION: Command to deploy documentation updates to Netlify.\nSOURCE: https://github.com/mui/mui-x/blob/master/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:deploy\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies for MUI X Pro Charts Package\nDESCRIPTION: JSON object listing the peer dependencies required for the @mui/x-charts-pro package. It includes version requirements for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts-pro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: License Info Import Update\nDESCRIPTION: Migration example for updating the LicenseInfo import from date-pickers-pro to x-license package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n-import { LicenseInfo } from '@mui/x-date-pickers-pro';\n+import { LicenseInfo } from '@mui/x-license';\n\n LicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\n----------------------------------------\n\nTITLE: Running Component to Slots Migration Codemod for MUI-X Data Grid\nDESCRIPTION: Command to execute the codemod that automatically renames components/componentsProps to slots/slotProps. The codemod transforms the deprecated API usage to the new slots pattern across specified files.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Data Grid: Reform Row Selection Model Codemod Command\nDESCRIPTION: Command to execute the reform-row-selection-model codemod that automatically converts rowSelectionModel from array to object structure.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v8.0.0/data-grid/reform-row-selection-model <path>\n```\n\n----------------------------------------\n\nTITLE: Adding Norwegian (Bokmål) (nb-NO) Locale for Data Grid\nDESCRIPTION: Adds Norwegian (Bokmål) translations for the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Add Norwegian (Bokmål) (nb-NO) locale (#5001) @spiftire\n```\n\n----------------------------------------\n\nTITLE: Required Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing the required peer dependencies for MUI X Data Grid Pro, including version requirements for @mui/material, react, and react-dom.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-data-grid-pro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@mui/material\": \"^5.15.14 || ^6.0.0 || ^7.0.0\",\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pickers: Rename Default Calendar Month Codemod Command\nDESCRIPTION: Command to execute the rename-default-calendar-month-to-reference-date codemod for DateCalendar components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/pickers/rename-default-calendar-month-to-reference-date <path>\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Environment Variable in .env File\nDESCRIPTION: This snippet shows how to enable or disable telemetry by setting the MUI_X_TELEMETRY_DISABLED environment variable in a .env file. Note that some frameworks may require prefixing the variable name.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-telemetry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nMUI_X_TELEMETRY_DISABLED=false # Enable telemetry\n# or\nMUI_X_TELEMETRY_DISABLED=true # Enable telemetry\n```\n\n----------------------------------------\n\nTITLE: Adding German (de-DE) Translations for Date Pickers\nDESCRIPTION: Adds German translations for the Date Pickers component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Add German (de-DE) translations (#4974) @felixh10r\n```\n\n----------------------------------------\n\nTITLE: Desktop Date Picker with Multiple Views\nDESCRIPTION: Configuration of DesktopDatePicker with day, month, and year views.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/lifecycle/lifecycle.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DesktopDatePicker views={['day', 'month', 'year']} />\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: Shows the required change to update the MUI X-Charts package version from v6 to v7.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v6/migration-charts-v6.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-charts\": \"^6.0.0\",\n+\"@mui/x-charts\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Updating CSS selectors for responsive PickersMonth and PickersYear components\nDESCRIPTION: The modeMobile and modeDesktop classes have been removed from PickersMonth and PickersYear components. This snippet shows how to update CSS selectors to target these components in responsive designs using media queries.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\n<GlobalStyles\n  styles={{\n    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY]: {\n      [`.${pickersYearClasses.root}`]: {\n        backgroundColor: 'red'\n      }\n    },\n    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY.replace('@media', '@media not')]: {\n      [`.${pickersYearClasses.root}`]: {\n        backgroundColor: 'red'\n      }\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Picker Toggle Functionality\nDESCRIPTION: Adds functionality to toggle the picker open/closed state with the openPickerButton.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [pickers] Make `openPickerButton` toggle picker (#10109) @noraleonte\n```\n\n----------------------------------------\n\nTITLE: BaseSelect Slot Usage\nDESCRIPTION: Update to use baseSelect slot instead of baseTextField with select property through PR #8110.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n[DataGrid] Use `baseSelect` slot instead of `baseTextField` with `select={true}` (#8110)\n```\n\n----------------------------------------\n\nTITLE: Renaming ShouldDisableTime Prop in MUI X Pickers\nDESCRIPTION: Migration codemod to replace the deprecated shouldDisableTime prop with shouldDisableClock in DateTimePicker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n  <DateTimePicker\n-   shouldDisableTime={(timeValue, view) => view === 'hours' && timeValue < 12}\n+   shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n  />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-should-disable-time <path>\n```\n\n----------------------------------------\n\nTITLE: Triggering CI Workflow for MUI-X Docs E2E Tests in JavaScript\nDESCRIPTION: JavaScript code snippet showing how the CI process is triggered after Netlify deploys the preview site. It uses a Netlify function to call the CircleCI API and run the e2e-website workflow against the deployed URL.\nSOURCE: https://github.com/mui/mui-x/blob/master/test/e2e-website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnetlify/functions/deploy-succeeded.js\n```\n\n----------------------------------------\n\nTITLE: Component Import Declaration - XLogo\nDESCRIPTION: Component import declaration for the XLogo component used in the documentation header.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/overview/XLogo.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Codemods\nDESCRIPTION: Commands to run the automated codemods for v8 migration\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Tree View specific\nnpx @mui/x-codemod@latest v8.0.0/tree-view/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming Tree View to Simple Tree View in React\nDESCRIPTION: Codemod to rename the Tree View component to Simple Tree View, updating import statements and component usage.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n return (\n-  <TreeView>\n+  <SimpleTreeView>\n     <TreeItem itemId=\"1\" label=\"First item\" />\n-  </TreeView>\n+  </SimpleTreeView>\n );\n```\n\n----------------------------------------\n\nTITLE: Updating keyboardDateTime Format in LocalizationProvider (JSX)\nDESCRIPTION: This snippet shows how to update the 'keyboardDateTime' format to use separate 12-hour and 24-hour formats in the LocalizationProvider component. It demonstrates the removal of the deprecated 'keyboardDateTime' format and its replacement with 'keyboardDateTime12h' and 'keyboardDateTime24h'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_68\n\nLANGUAGE: jsx\nCODE:\n```\n<LocalizationProvider\n  dateFormats={{\n-     keyboardDateTime: 'DD.MM.YYYY | LT',\n+     keyboardDateTime12h: 'DD.MM.YYYY | hh:mm A',\n+     keyboardDateTime24h: 'DD.MM.YYYY | hh:mm',\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Importing Data Grid Row Spanning Image\nDESCRIPTION: Imports an image showing the new row spanning feature in the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n<img width=\"600\" src=\"https://github.com/user-attachments/assets/d32ec936-d238-4c92-9e1a-af6788d74cdf\" alt=\"Data Grid row spanning\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Japanese (ja-JP) Locale for Data Grid\nDESCRIPTION: Updates the Japanese locale translations for the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Update Japanese (ja-JP) locale (#5122) @hikotq\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Pagination Props (TypeScript/React)\nDESCRIPTION: This code shows how to update the pagination props in the DataGrid component from the old API to the new paginationModel API in version 6.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n-  page={page}\n-  pageSize={pageSize}\n-  onPageChange={handlePageChange}\n-  onPageSizeChange={handlePageSizeChange}\n+  paginationModel={{ page, pageSize }}\n+  onPaginationModelChange={(paginationModel) => handlePaginationModelChange(paginationModel)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling WebKit E2E Test in MUI X\nDESCRIPTION: Disables a false positive end-to-end test on WebKit browsers.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [test] Disable false positive e2e test on webkit (#10187) @LukasTy\n```\n\n----------------------------------------\n\nTITLE: Updating Controllable Sorting Props\nDESCRIPTION: Normalizes the controlled prop signature for sort model changes.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  onSortModelChange={(params: GridSortModelParams) => setSortModel(params.model)}\n+  onSortModelChange={(model: GridSortModel) => setSortModel(model)}\n />\n```\n\n----------------------------------------\n\nTITLE: Removing cellClassRules from GridColDef\nDESCRIPTION: Removes cellClassRules from GridColDef and updates GridCellClassParams usage. Demonstrates how to achieve the same functionality using cellClassName and clsx utility.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_16\n\nLANGUAGE: Diff\nCODE:\n```\n-import { GridCellClassParams} from '@material-ui/data-grid';\n+import { GridCellParams } from '@material-ui/data-grid';\n\n-cellClassName: (params: GridCellClassParams) =>\n+cellClassName: (params: GridCellParams) =>\n```\n\nLANGUAGE: Diff\nCODE:\n```\n+import clsx from 'clsx';\n\n {\n   field: 'age',\n   width: 150,\n-  cellClassRules: {\n-    negative: params => params.value < 0,\n-    positive: params => params.value > 0,\n-  },\n+  cellClassName: params => clsx({\n+    negative: params.value < 0,\n+    positive: params.value > 0,\n+  }),\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Column Type Checks in MUI X Data Grid\nDESCRIPTION: Demonstrates how to replace column type constant checks with hardcoded string values.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-const isColumnString = column.type === GRID_STRING_COLUMN_TYPE;\n+const isColumnString = col.type === 'string';\n\n-const isColumnNumber = col.type === GRID_NUMBER_COLUMN_TYPE;\n+const isColumnNumber = col.type === 'number';\n\n-const isColumnDate = col.type === GRID_DATE_COLUMN_TYPE;\n+const isColumnDate = col.type === 'date';\n\n-const isColumnDateTime = col.type === GRID_DATETIME_COLUMN_TYPE;\n+const isColumnDateTime = col.type === 'dateTime';\n\n-const isColumnBoolean = col.type === GRID_BOOLEAN_COLUMN_TYPE;\n+const isColumnBoolean = col.type === 'boolean';\n```\n\n----------------------------------------\n\nTITLE: Documentation Fix Code\nDESCRIPTION: Code showing documentation improvements including fixing links and illustrations\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[docs] Fix 301 redirection to StackBlitz @oliviertassinari\n[docs] Fix 301 to Material UI @oliviertassinari\n[docs] Fix 404 links to translation source @oliviertassinari\n```\n\n----------------------------------------\n\nTITLE: Implementing getAggregatedValue Method for Server-side Data Grid in React\nDESCRIPTION: This snippet shows how to implement the getAggregatedValue method in the GridDataSource. It defines how to retrieve the aggregated value for a parent row, including the aggregateRow.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/server-side-data/aggregation.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataSource = {\n  getRows: async ({\n   ...\n  }) => {\n   ...\n  },\n  getAggregatedValue: (row, field) => {\n    return row[`${field}Aggregate`];\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime Validation Fix\nDESCRIPTION: Fix for TimeClock validation to properly handle date values through PR #8570.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n[DateTimePicker] Fix `TimeClock` validation ignoring date by default (#8570)\n```\n\n----------------------------------------\n\nTITLE: Customizing Cell Rendering for Grouped Rows\nDESCRIPTION: Demonstrates how to customize cell rendering for grouped rows in a column definition.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/row-grouping/row-grouping.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ratingColDef: GridColDef = {\n  // ...\n  renderCell: (params) => {\n    if (params.rowNode.type === 'group') {\n      return params.value;\n    }\n\n    return (\n      // ...\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling MUI X Telemetry via Environment Variable\nDESCRIPTION: Sets the MUI_X_TELEMETRY_DISABLED environment variable to false to enable telemetry. Some frameworks may require prefixing the variable name.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/guides/telemetry/telemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMUI_X_TELEMETRY_DISABLED=false\n```\n\n----------------------------------------\n\nTITLE: Updating Data Grid Group Value Formatter in TypeScript\nDESCRIPTION: Updates the implementation of a custom group value formatter to use the new row node structure in v6.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n <DataGridPremium\n   groupingColDef={() => ({\n     valueFormatter: (params) => {\n       if (params.id == null) {\n         return params.value;\n       }\n\n       const rowNode = apiRef.current.getRowNode(params.id!)!;\n-      if (rowNode.children?.length) {\n+      if (rowNode.type === 'group') {\n         return `by ${rowNode.groupingKey ?? ''}`;\n       }\n\n       return params.value;\n     }\n   })}\n />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: Frontmatter and description section for the Treemap chart documentation page, indicating the component's planned status.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/treemap/treemap.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: React Treemap chart\nproductId: x-charts\n---\n\n# Charts - Treemap 🚧\n\n<p class=\"description\">Treemap allows to display data with a hierarchical structure.</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Column in DataGrid (JavaScript)\nDESCRIPTION: Demonstrates the change in updating a column's properties using the apiRef. The method has been renamed and now accepts an array of column updates.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n-apiRef.current.updateColumn({ field: 'name', width: 100 });\n+apiRef.current.updateColumns([{ field: 'name', width: 100 }]);\n```\n\n----------------------------------------\n\nTITLE: Responsive Time Picker Demo Preview\nDESCRIPTION: HTML image tag showing a GIF preview of the new digital clock time picker interface.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_32\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"https://user-images.githubusercontent.com/4941090/235072007-de39a397-e4a4-4c98-8e10-5ee4ad440108.gif\" width=\"494\" alt=\"New digital clock time picker\" />\n```\n\n----------------------------------------\n\nTITLE: Importing from d3-interpolate using ESM in Node.js\nDESCRIPTION: Demonstrates how to import the interpolate function from the vendored d3-interpolate package using ESM syntax in Node.js. This import will be passed through to the real ESM library from D3.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts-vendor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { interpolate } from '@mui/x-charts-vendor/d3-interpolate';\n```\n\n----------------------------------------\n\nTITLE: Updating Legend Position in BarChart Component\nDESCRIPTION: Change the legend position values from 'left'/'middle'/'right' to 'start'/'center'/'end'.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <BarChart\n    slotProps={{\n      legend: {\n        position: {\n-          horizontal: \"left\",\n+          horizontal: \"start\",\n        }\n      }\n    }}\n />\n```\n\n----------------------------------------\n\nTITLE: Improving Ukrainian Locale in Data Grid\nDESCRIPTION: Enhances the Ukrainian (uk-UA) locale translations for the Data Grid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [l10n] Improve Ukrainian (uk-UA) locale (#10076) @mkundos\n```\n\n----------------------------------------\n\nTITLE: Updating License Package in package.json\nDESCRIPTION: Update for the license package in package.json for commercial versions of Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v6/migration-data-grid-v6.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-license-pro\": \"^6.0.0\",\n+\"@mui/x-license\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Removing Experimental Features in DataGrid (JavaScript)\nDESCRIPTION: Demonstrates the removal of experimental feature flags for the new editing API, aggregation, and row pinning in DataGrid and DataGridPremium components.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n <DataGrid\n-  experimentalFeatures={{ newEditingApi: true }}\n />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n <DataGridPremium\n-  experimentalFeatures={{\n-   aggregation: true,\n-   rowPinning: true,\n-  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Density Using initialState in React Data Grid\nDESCRIPTION: Shows how to set Data Grid density to 'compact' in an uncontrolled manner using the initialState prop. This approach sets the initial density value without requiring event handlers.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/accessibility/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  initialState={{\n    density: 'compact',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Data Grid Codemod for Experimental Features\nDESCRIPTION: This bash command runs the codemod to remove stabilized experimental features for Data Grid v7.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v7.0.0/data-grid/remove-stabilized-experimentalFeatures <path>\n```\n\n----------------------------------------\n\nTITLE: Updating MUI X Charts Dependencies in package.json\nDESCRIPTION: Update the version of MUI X Charts packages to 'latest' in the package.json file.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-charts-v7/migration-charts-v7.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-charts\": \"^7.x.x\",\n+\"@mui/x-charts\": \"latest\",\n\n-\"@mui/x-charts-pro\": \"^7.x.x\",\n+\"@mui/x-charts-pro\": \"latest\",\n```\n\n----------------------------------------\n\nTITLE: Updating Row Selection Model\nDESCRIPTION: Shows the changes required for the new row selection model using Set instead of arrays\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v7/migration-data-grid-v7.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-const [rowSelectionModel, setRowSelectionModel] = React.useState<GridRowSelectionModel>([]);\\n+const [rowSelectionModel, setRowSelectionModel] = React.useState<GridRowSelectionModel>({ type: 'include', ids: new Set() });\n```\n\n----------------------------------------\n\nTITLE: TypeScript Feature Flag Example\nDESCRIPTION: Example showing how to enable experimental features in MUI X DataGrid\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexperimentalFeatures={{ aggregation: true }}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Versions\nDESCRIPTION: Package.json modifications needed to upgrade to Tree View v8\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-tree-view\": \"7.x.x\",\n+\"@mui/x-tree-view\": \"latest\",\n\n-\"@mui/x-tree-view-pro\": \"7.x.x\",\n+\"@mui/x-tree-view-pro\": \"latest\",\n```\n\n----------------------------------------\n\nTITLE: Migrating from state prop to initialState in MUI X Data Grid\nDESCRIPTION: Shows how to replace the deprecated state prop with the new initialState prop in DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v4/migration-data-grid-v4.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n <DataGrid\n-  state={{\n+  initialState={{\n     preferencePanel: {\n       open: true,\n       openedPanelValue: GridPreferencePanelsValue.filters,\n     },\n   }}\n />\n```\n\n----------------------------------------\n\nTITLE: Webpack 4 Configuration Update\nDESCRIPTION: Modification to webpack.config.js to handle transpilation of modern JavaScript features when using webpack 4.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [path.resolve(__dirname, 'node_modules/@mui/x-tree-view')],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: React Peer Dependencies for MUI X Tree View\nDESCRIPTION: JSON snippet showing the React peer dependencies required for the MUI X Tree View component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/tree-view/quickstart/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack 4 Configuration Update\nDESCRIPTION: Configuration changes needed to support modern JavaScript features in webpack 4\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [\n+              // Covers @mui/x-date-pickers and @mui/x-date-pickers-pro\n+              path.resolve(__dirname, 'node_modules/@mui/x-date-pickers'),\n+              path.resolve(__dirname, 'node_modules/@mui/x-license'),\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: Update the @mui/x-tree-view package version from v6 to v7 in package.json.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/x-tree-view\": \"^6.0.0\",\n+\"@mui/x-tree-view\": \"^7.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Updating Shortcut Component\nDESCRIPTION: Shows changes needed for shortcut component onChange callback parameters\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v6/migration-pickers-v6.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n const CustomShortcuts = (props) => {\n   return (\n     <React.Fragment>\n       {props.items.map(item => {\n         const value = item.getValue({ isValid: props.isValid });\n         return (\n           <button\n-            onClick={() => onChange(value)}\n+            onClick={() => onChange(value, props.changeImportance ?? 'accept', item)}\n           >\n             {value}\n           </button>\n         )\n       }}\n     </React.Fragment>\n   )\n }\n\n <DatePicker slots={{ shortcuts: CustomShortcuts }} />\n```\n\n----------------------------------------\n\nTITLE: Removing Modern Bundle Aliases\nDESCRIPTION: Configuration changes to remove modern bundle aliases that are no longer needed in v8\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v7/migration-tree-view-v7.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n {\n   resolve: {\n     alias: {\n-      '@mui/x-tree-view': '@mui/x-tree-view/modern',\n-      '@mui/x-tree-view-pro': '@mui/x-tree-view-pro/modern',\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Focus Management in Tests\nDESCRIPTION: Shows how to update test code to work with the new focus management approach where focus is applied to TreeItem instead of TreeView.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-tree-view-v6/migration-tree-view-v6.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n it('test example on first item', () => {\n   const { getByRole } = render(\n     <SimpleTreeView>\n       <TreeItem itemId=\"one\" id=\"one\">One</TreeItem>\n       <TreeItem itemId=\"two\" id=\"two\">Two</TreeItem>\n    </SimpleTreeView>\n   );\n\n   // Set the focus to the item \"One\"\n-  const tree = getByRole('tree');\n+  const treeItem = getByRole('treeitem', { name: 'One' });\n   act(() => {\n-    tree.focus();\n+    treeItem.focus();\n   });\n-  fireEvent.keyDown(tree, { key: 'ArrowDown' });\n+  fireEvent.keyDown(treeItem, { key: 'ArrowDown' });\n\n  // Check if the new focused item is \"Two\"\n- expect(tree)to.have.attribute('aria-activedescendant', 'two');\n+ expect(document.activeElement).to.have.attribute('id', 'two');\n })\n```\n\n----------------------------------------\n\nTITLE: Replacing Transition Props with Slot in Tree Item\nDESCRIPTION: This codemod replaces the TransitionComponent and TransitionProps with the groupTransition slot in the Tree Item component.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n <TreeItem\n-  TransitionComponent={Fade}\n+  slots={{ groupTransition: Fade }}\n\n-  TransitionProps={{ timeout: 600 }}\n+  slotProps={{ groupTransition: { timeout: 600 } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Issue Labels\nDESCRIPTION: YAML configuration for a GitHub Actions workflow to handle issue status labels. It references reusable workflows for stale issues/PRs and issue status label handling.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- [infra] Update `issue-status-label-handler.yml` @michelengelen\n- [infra] Added reusable issue status label handler workflow (#17145) @michelengelen\n- [infra] Switch to reusable 'stale issues/PRs' workflow (#17107) @michelengelen\n```\n\n----------------------------------------\n\nTITLE: Replacing Arrows Button Slots in MUI X Pickers\nDESCRIPTION: Migration codemod to replace the deprecated LeftArrowButton and RightArrowButton slots with PreviousIconButton and NextIconButton slots for navigation in Date Picker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n   components={{\n-    LeftArrowButton: CustomButton,\n+    PreviousIconButton: CustomButton,\n-    RightArrowButton: CustomButton,\n+    NextIconButton: CustomButton,\n   }}\n\n   componentsProps={{\n-    leftArrowButton: {},\n+    previousIconButton: {},\n-    rightArrowButton: {},\n+    nextIconButton: {},\n   }}\n />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/pickers/replace-arrows-button-slot <path>\n```\n\n----------------------------------------\n\nTITLE: Renaming Components to Slots in MUI X Data Grid v6.0.0\nDESCRIPTION: This code snippet shows how to rename the components and componentsProps props to slots and slotProps, respectively, in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_69\n\nLANGUAGE: diff\nCODE:\n```\n<DataGrid\n-  components={{ Toolbar: CustomToolbar }}\n-  componentsProps={{ actionBar: { actions: ['clear'] } }}\n+  slots={{ toolbar: CustomToolbar }}\n+  slotProps={{ actionBar: { actions: ['clear'] } }}\n />;\n```\n\n----------------------------------------\n\nTITLE: Executing Rename Components to Slots Codemod for MUI X Data Grid v6.0.0\nDESCRIPTION: This bash command runs the codemod to automatically rename components to slots in the MUI X Data Grid upgrade to v6.0.0.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#2025-04-21_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-components-to-slots <path>\n```\n\n----------------------------------------\n\nTITLE: Importing from d3-interpolate using CommonJS in Node.js\nDESCRIPTION: Shows how to import the interpolate function from the vendored d3-interpolate package using CommonJS syntax in Node.js. This import will use the transpiled version of the library located in the x-charts-vendor/lib-vendor directory.\nSOURCE: https://github.com/mui/mui-x/blob/master/packages/x-charts-vendor/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { interpolate } = require('@mui/x-charts-vendor/d3-interpolate');\n```\n\n----------------------------------------\n\nTITLE: Updating DataGridPro API Callback Parameters\nDESCRIPTION: Code changes required to access the API in callback functions after the removal of the api property from callback params in v4.0.0. Now the API is accessed through the details parameter.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n <DataGridPro\n-  onColumnResize={(params, event) => console.log(params.api)}\n+  onColumnResize={(params, event, details) => console.log(details.api)}\n />\n```\n\n----------------------------------------\n\nTITLE: Changes to GridFilterModelParams Interface\nDESCRIPTION: Updates to the GridFilterModelParams interface to use Maps instead of arrays for rows and visibleRows properties.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v4.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n export interface GridFilterModelParams {\n   /**\n    * The full set of rows.\n    */\n-  rows: GridRowModel[];\n+  rows: Map<GridRowId, GridRowModel>;\n  /**\n    * The set of currently visible rows.\n    */\n-  visibleRows: GridRowModel[];\n+  visibleRows: Map<GridRowId, GridRowModel>;\n }\n```\n\n----------------------------------------\n\nTITLE: Displaying Roadmap Information in Markdown\nDESCRIPTION: This snippet contains the main content of the roadmap documentation, including headers, description, links, and a warning about the dynamic nature of development plans.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/introduction/roadmap/roadmap.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roadmap\n\n<p class=\"description\">Find out about our plans for MUI X.</p>\n\n## MUI X roadmap\n\nTo learn more about our plans for MUI X, visit the [public roadmap](https://github.com/orgs/mui/projects/35).\n\n:::warning\nWe operate in a dynamic environment,so things are subject to change.\nThe information provided is intended to outline the general direction, but is for informational purposes only.\n\nWe may decide to add or remove new items at any time, depending on our capability to deliver, while meeting our quality standards.\nThe development, releases, and timing of any features or functionality remains at the sole discretion of MUI.\nThe roadmap does not represent a commitment, obligation, or promise to deliver at any time.\n:::\n\n## Global roadmap\n\nTo learn more about our plans for MUI in general, visit the:\n\n- [Material UI roadmap](/material-ui/discover-more/roadmap/).\n```\n\n----------------------------------------\n\nTITLE: Fixing Day of Month Clamping in Date Pickers\nDESCRIPTION: Addresses an issue with day of month clamping in the date picker fields.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [fields] Do not clamp day of month (#9973) @flaviendelangle\n```\n\n----------------------------------------\n\nTITLE: Updating onCellFocusOut to componentsProps.cell.onBlur in DataGrid\nDESCRIPTION: The onCellFocusOut prop was removed. Use componentsProps.cell.onBlur instead to handle cell blur events. This snippet shows how to access the cell's field and row ID in the new onBlur handler.\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v6.md#2025-04-21_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\n  componentsProps={{\n    cell: {\n      onBlur: (event) => {\n        const cellElement = event.currentTarget;\n        const field = cellElement.getAttribute('data-field');\n        const rowId = cell.parentElement.getAttribute('data-id');\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating selectedSections Prop in DateField\nDESCRIPTION: Breaking change showing the new way to specify selectedSections in DateField component, removing support for start/end indexes in favor of single index or 'all' selection.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n <DateField\n-  selectedSections={{ startIndex: 0, endIndex: 0 }}\n+  selectedSections={0}\n\n     // If the field has 3 sections\n-  selectedSections={{ startIndex: 0, endIndex: 2 }}\n+  selectedSections=\"all\"\n />\n```\n\n----------------------------------------\n\nTITLE: Replacing monthAndYear Format with calendarHeader Slot Prop (JSX)\nDESCRIPTION: The monthAndYear format has been removed. It can be replaced with the new format prop of the calendarHeader slot in DatePicker and DateRangePicker components.\nSOURCE: https://github.com/mui/mui-x/blob/master/CHANGELOG.md#2025-04-21_snippet_75\n\nLANGUAGE: jsx\nCODE:\n```\n<LocalizationProvider\n  adapter={AdapterDayJS}\n-  formats={{ monthAndYear: 'MM/YYYY' }}\n/>\n  <DatePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n  />\n  <DateRangePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n  />\n<LocalizationProvider />\n```\n\n----------------------------------------\n\nTITLE: Migrating tabs slot props to usePickerContext hook in Date Pickers\nDESCRIPTION: Shows how to replace the view, views, and onViewChange props with the usePickerContext hook in a tabs slot component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-pickers-v7/migration-pickers-v7.md#2025-04-21_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n+import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n-const { view } = props;\n+const { view } = usePickerContext();\n\n-const { views } = props;\n+const { views } = usePickerContext();\n\n-const { onViewChange } = props;\n+const { onViewChange } = usePickerContext();\n```\n\n----------------------------------------\n\nTITLE: Positioning Axes in MUI X-Charts\nDESCRIPTION: Demo showing how to customize axis position using the position property, which can be set to top/bottom for x-axes, left/right for y-axes, or none to hide an axis.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/charts/axis/axis.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ModifyAxisPosition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinned Columns with TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the GridPinnedColumnFields object that specifies which columns to pin to the left or right sides of the Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/column-pinning/column-pinning.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GridPinnedColumnFields {\n  left?: string[]; // Optional field names to pin to the left\n  right?: string[]; // Optional field names to pin to the right\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Data Grid Feature Demo in Markdown\nDESCRIPTION: A markdown snippet that embeds the PopularFeaturesDemo.js component to showcase Data Grid features with specific display parameters like inline background and hidden toolbar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/features/features.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{\"demo\": \"PopularFeaturesDemo.js\", \"defaultCodeOpen\": false, \"bg\": \"inline\", \"hideToolbar\": true}\n```\n\n----------------------------------------\n\nTITLE: Updating DataGrid Page Size Options Prop (TypeScript/React)\nDESCRIPTION: This code shows the renaming of the rowsPerPageOptions prop to pageSizeOptions in the DataGrid component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/migration-data-grid-v5/migration-data-grid-v5.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n-<DataGrid rowsPerPageOptions={[10, 20, 50]} />\n+<DataGrid pageSizeOptions={[10, 20, 50]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Toolbar Components in React\nDESCRIPTION: This snippet demonstrates how to import and use the Toolbar and ToolbarButton components from the @mui/x-data-grid package.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/components/toolbar/toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar, ToolbarButton } from '@mui/x-data-grid';\n\n<Toolbar>\n  <ToolbarButton />\n</Toolbar>;\n```\n\n----------------------------------------\n\nTITLE: Multi-Input Date Time Range Picker - React\nDESCRIPTION: Shows implementation of Date Time Range Picker with multiple input fields for separate start and end datetime entry\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-range-picker/date-time-range-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MultiInputDateTimeRangePicker.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moment.js Locale in LocalizationProvider\nDESCRIPTION: Demonstrates setting up custom locale with Moment.js adapter in MUI X Date Pickers\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/adapters-locale/adapters-locale.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport 'moment/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterMoment} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```\n\n----------------------------------------\n\nTITLE: Toggling Groups on Row Click in Data Grid\nDESCRIPTION: Demonstrates how to implement row group toggling when clicking anywhere on the grouping row in MUI-X Data Grid.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/data-grid/recipes-row-grouping/recipes-row-grouping.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRowGroupingExpandOnRowClick.js\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with require condition for MUI X packages\nDESCRIPTION: Command to run Node.js with the 'require' condition when importing MUI X packages in a Node.js environment.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/migration/usage-with-material-ui-v5-v6/usage-with-material-ui-v5-v6.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --conditions=require index.mjs\n```\n\n----------------------------------------\n\nTITLE: Time Clock AM/PM Format Configuration\nDESCRIPTION: Demonstrates how to configure 12-hour vs 24-hour time format using the ampm prop.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-clock/time-clock.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nTimeClockAmPm.js\n```\n\n----------------------------------------\n\nTITLE: Getting Data Container Height with TypeScript\nDESCRIPTION: Shows how to access data container height after removal of gridDataContainerHeightSelector\nSOURCE: https://github.com/mui/mui-x/blob/master/changelogOld/CHANGELOG.v5.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataContainerHeight = gridContainerSizesSelector(state)?.dataContainerSizes.height ?? null;\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled Date Range Calendar in React\nDESCRIPTION: Shows how to implement controlled and uncontrolled versions of the Date Range Calendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DateRangeCalendarValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Digital Clock Values in React\nDESCRIPTION: Shows how to implement controlled and uncontrolled values for the Digital Clock component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/digital-clock/digital-clock.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"DigitalClockValue.js\"}\n```\n\n----------------------------------------\n\nTITLE: Time Picker Open To View Setting\nDESCRIPTION: Shows how to set the initial view when opening the Time Picker\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/time-picker/time-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"TimePickerOpenTo.js\"\n```\n\n----------------------------------------\n\nTITLE: Week Number Display Implementation\nDESCRIPTION: Shows how to add and customize week number display in calendar.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nAddWeekNumber.js\n```\n\n----------------------------------------\n\nTITLE: Basic Date Time Field Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of the DateTimeField component for date and time selection.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-time-field/date-time-field.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBasicDateTimeField.js\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Date Range Calendar in React\nDESCRIPTION: Demonstrates the basic implementation of the Date Range Calendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-range-calendar/date-range-calendar.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicDateRangeCalendar.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Calendar Implementation in React\nDESCRIPTION: Basic usage example of the DateCalendar component.\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-calendar/date-calendar.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nBasicDateCalendar.js\n```\n\n----------------------------------------\n\nTITLE: Landscape Orientation Static Date Picker\nDESCRIPTION: Implementation of Date Picker with forced landscape orientation\nSOURCE: https://github.com/mui/mui-x/blob/master/docs/data/date-pickers/date-picker/date-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nStaticDatePickerLandscape.js\n```"
  }
]