[
  {
    "owner": "nocodb",
    "repo": "nocodb",
    "content": "TITLE: Displaying NocoDB Meta API Endpoints Table in Markdown\nDESCRIPTION: This markdown table lists all the Meta API endpoints for NocoDB, organized by category, method, tag, function name, and path. It covers a wide range of operations for managing project metadata, including API tokens, user management, database tables, filters, sorts, webhooks, views, and more.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Category | Method | Tag | Function Name | Path                                                                  |\n|---|---|---|---|-----------------------------------------------------------------------|\n| Meta | Get | apiToken | list | /api/v1/db/meta/projects/`{projectId}`/api-tokens                     |\n| Meta | Post | apiToken | create | /api/v1/db/meta/projects/`{projectId}`/api-tokens                     |\n| Meta | Delete| apiToken | delete | /api/v1/db/meta/projects/`{projectId}`/api-tokens/`{token}`           |\n| Meta | Get | auth | projectUserList | /api/v1/db/meta/projects/`{projectId}`/users                          |\n| Meta | Post | auth | projectUserAdd | /api/v1/db/meta/projects/`{projectId}`/users                          |\n| Meta | Patch | auth | projectUserUpdate | /api/v1/db/meta/projects/`{projectId}`/users/`{userId}`               |\n| Meta | Delete| auth | projectUserRemove | /api/v1/db/meta/projects/`{projectId}`/users/`{userId}`               |\n| Meta | Post | auth | projectUserResendInvite | /api/v1/db/meta/projects/`{projectId}`/users/`{userId}`/resend-invite |\n| Meta | Post | dbTable | create | /api/v1/db/meta/projects/`{projectId}`/tables                         |\n| Meta | Get | dbTable | list | /api/v1/db/meta/projects/`{projectId}`/tables                         |\n| Meta | Post | dbTableColumn | create | /api/v1/db/meta/tables/`{tableId}`/columns                            |\n| Meta | Patch | dbTableColumn | update | /api/v1/db/meta/tables/`{tableId}`/columns/`{columnId}`               |\n| Meta | Delete| dbTableColumn | delete | /api/v1/db/meta/tables/`{tableId}`/columns/`{columnId}`               |\n| Meta | Post | dbTableColumn | primaryColumnSet | /api/v1/db/meta/tables/`{tableId}`/columns/`{columnId}`/primary       |\n| Meta | Get | dbTableFilter | get | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Patch | dbTableFilter | update | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Delete| dbTableFilter | delete | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Get | dbTableFilter | read | /api/v1/db/meta/views/`{viewId}`/filters                              |\n| Meta | Post | dbTableFilter | create | /api/v1/db/meta/views/`{viewId}`/filters                              |\n| Meta | Get | dbTableFilter | get | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Patch | dbTableFilter | update | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Delete| dbTableFilter | delete | /api/v1/db/meta/filters/`{filterId}`                                  |\n| Meta | Get | dbTableFilter | childrenRead | /api/v1/db/meta/filters/`{filterGroupId}`/children                    |\n| Meta | Get | dbTableSort | list | /api/v1/db/meta/views/`{viewId}`/sorts                                |\n| Meta | Post | dbTableSort | create | /api/v1/db/meta/views/`{viewId}`/sorts                                |\n| Meta | Get | dbTableSort | read | /api/v1/db/meta/sorts/`{sortId}`                                      |\n| Meta | Patch | dbTableSort | update | /api/v1/db/meta/sorts/`{sortId}`                                      |\n| Meta | Delete| dbTableSort | delete | /api/v1/db/meta/sorts/`{sortId}`                                      |\n| Meta | Patch | dbTableWebhook | update | /api/v1/db/meta/hooks/`{hookId}`                                      |\n| Meta | Delete| dbTableWebhook | delete | /api/v1/db/meta/hooks/`{hookId}`                                      |\n| Meta | Get | dbTableWebhook | list | /api/v1/db/meta/tables/`{tableId}`/hooks                              |\n| Meta | Post | dbTableWebhook | create | /api/v1/db/meta/tables/`{tableId}`/hooks                              |\n| Meta | Post | dbTableWebhook | test | /api/v1/db/meta/tables/`{tableId}`/hooks/test                         |\n| Meta | Get | dbTableWebhook | samplePayloadGet | /api/v1/db/meta/tables/`{tableId}`/hooks/samplePayload/`{operation}`  |\n| Meta | Get | dbTableWebhookFilter | read | /api/v1/db/meta/hooks/`{hookId}`/filters                              |\n| Meta | Post | dbTableWebhookFilter | create | /api/v1/db/meta/hooks/`{hookId}`/filters                              |\n| Meta | Get | dbView | list | /api/v1/db/meta/tables/`{tableId}`/views                              |\n| Meta | Get | dbView | read | /api/v1/db/meta/tables/`{tableId}`                                    |\n| Meta | Patch | dbView | update | /api/v1/db/meta/tables/`{tableId}`                                    |\n| Meta | Delete| dbView | delete | /api/v1/db/meta/tables/`{tableId}`                                    |\n| Meta | Post | dbView | reorder | /api/v1/db/meta/tables/`{tableId}`/reorder                            |\n| Meta | Post | dbView | formCreate | /api/v1/db/meta/tables/`{tableId}`/forms                              |\n| Meta | Patch | dbView | formUpdate | /api/v1/db/meta/forms/`{formViewId}`                                  |\n| Meta | Get | dbView | formRead | /api/v1/db/meta/forms/`{formViewId}`                                  |\n| Meta | Patch | dbView | formColumnUpdate | /api/v1/db/meta/form-columns/`{formViewColumnId}`                     |\n| Meta | Post | dbView | galleryCreate | /api/v1/db/meta/tables/`{tableId}`/galleries                          |\n| Meta | Patch | dbView | galleryUpdate | /api/v1/db/meta/galleries/`{galleryViewId}`                           |\n| Meta | Get | dbView | galleryRead | /api/v1/db/meta/galleries/`{galleryViewId}`                           |\n| Meta | Post | dbView | kanbanCreate | /api/v1/db/meta/tables/`{tableId}`/kanbans                            |\n| Meta | Patch | dbView | kanbanUpdate | /api/v1/db/meta/kanban/`{kanbanViewId}`                               |\n| Meta | Get | dbView | kanbanRead | /api/v1/db/meta/kanbans/`{kanbanViewId}`                              |\n| Meta | Post | dbView | mapCreate | /api/v1/db/meta/tables/`{tableId}`/maps                               |\n| Meta | Patch | dbView | mapUpdate | /api/v1/db/meta/maps/`{mapViewId}`                                    |\n| Meta | Get | dbView | mapRead | /api/v1/db/meta/maps/`{mapViewId}`                                    |\n| Meta | Post | dbView | gridCreate | /api/v1/db/meta/tables/`{tableId}`/grids                              |\n| Meta | Get | dbView | gridColumnsList | /api/v1/db/meta/grids/`{gridId}`/grid-columns                         |\n| Meta | Patch | dbView | gridColumnUpdate | /api/v1/db/meta/grid-columns/`{columnId}`                             |\n| Meta | Patch | dbView | update | /api/v1/db/meta/views/`{viewId}`                                      |\n| Meta | Delete| dbView | delete | /api/v1/db/meta/views/`{viewId}`                                      |\n| Meta | Post | dbView | showAllColumn | /api/v1/db/meta/views/`{viewId}`/show-all                             |\n| Meta | Post | dbView | hideAllColumn | /api/v1/db/meta/views/`{viewId}`/hide-all                             |\n| Meta | Get | dbViewColumn | list | /api/v1/db/meta/views/`{viewId}`/columns                              |\n| Meta | Post | dbViewColumn | create | /api/v1/db/meta/views/`{viewId}`/columns                              |\n| Meta | Patch | dbViewColumn | update | /api/v1/db/meta/views/`{viewId}`/columns/`{columnId}`                 |\n| Meta | Get | dbViewShare | list | /api/v1/db/meta/views/`{viewId}`/share                                |\n| Meta | Post | dbViewShare | create | /api/v1/db/meta/views/`{viewId}`/share                                |\n| Meta | Patch | dbViewShare | update | /api/v1/db/meta/views/`{viewId}`/share                                |\n| Meta | Delete| dbViewShare | delete | /api/v1/db/meta/views/`{viewId}`/share                                |\n| Meta | Get | plugin | list | /api/v1/db/meta/plugins                                               |\n| Meta | Get | plugin | status | /api/v1/db/meta/plugins/`{pluginId}`/status                           |\n| Meta | Post | plugin | test | /api/v1/db/meta/plugins/test                                          |\n| Meta | PATCH | plugin | update | /api/v1/db/meta/plugins/`{pluginId}`                                  |\n| Meta | Get | plugin | read | /api/v1/db/meta/plugins/`{pluginId}`                                  |\n| Meta | Get | project | metaGet | /api/v1/db/meta/projects/`{projectId}`/info                           |\n| Meta | Get | project | modelVisibilityList | /api/v1/db/meta/projects/`{projectId}`/visibility-rules               |\n| Meta | Post | project | modelVisibilitySet | /api/v1/db/meta/projects/`{projectId}`/visibility-rules               |\n| Meta | Get | project | list | /api/v1/db/meta/projects                                              |\n| Meta | Post | project | create | /api/v1/db/meta/projects                                              |\n| Meta | Get | project | read | /api/v1/db/meta/projects/`{projectId}`                                |\n| Meta | Delete| project | delete | /api/v1/db/meta/projects/`{projectId}`                                |\n| Meta | Get | project | auditList | /api/v1/db/meta/projects/`{projectId}`/audits                         |\n| Meta | Get | project | metaDiffGet | /api/v1/db/meta/projects/`{projectId}`/meta-diff                      |\n| Meta | Post | project | metaDiffSync | /api/v1/db/meta/projects/`{projectId}`/meta-diff                      |\n| Meta | Get | project | sharedBaseGet | /api/v1/db/meta/projects/`{projectId}`/shared                         |\n| Meta | Delete| project | sharedBaseDisable | /api/v1/db/meta/projects/`{projectId}`/shared                         |\n| Meta | Post | project | sharedBaseCreate | /api/v1/db/meta/projects/`{projectId}`/shared                         |\n| Meta | Patch | project | sharedBaseUpdate | /api/v1/db/meta/projects/`{projectId}`/shared                         |\n```\n\n----------------------------------------\n\nTITLE: Public API Endpoints\nDESCRIPTION: Public-facing API endpoints for accessing shared bases and views, including data listing, creation, export, and metadata operations. All endpoints are prefixed with /api/v1/db/public/.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_1\n\nLANGUAGE: REST\nCODE:\n```\nGET /api/v1/db/public/shared-base/{sharedBaseUuid}/meta\nPOST /api/v1/db/public/shared-view/{sharedViewUuid}/rows\nGET /api/v1/db/public/shared-view/{sharedViewUuid}/rows/{rowId}/{relationType}/{columnName}\nPOST /api/v1/db/public/shared-view/{sharedViewUuid}/rows\nGET /api/v1/db/public/shared-view/{sharedViewUuid}/rows/export/{type}\nGET /api/v1/db/public/shared-view/{sharedViewUuid}/nested/{columnName}\nGET /api/v1/db/public/shared-view/{sharedViewUuid}/meta\nGET /api/v1/db/public/shared-view/{sharedViewUuid}/group/{columnId}\n```\n\n----------------------------------------\n\nTITLE: Setting Up NocoDB Unit Test Environment\nDESCRIPTION: Instructions for setting up the environment to run NocoDB unit tests, including installing dependencies and configuring environment variables.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/nocodb\n\nnpm install\n\n# add a .env file\ncp tests/unit/.env.sample tests/unit/.env\n\n# open .env file\nopen tests/unit/.env\n```\n\n----------------------------------------\n\nTITLE: Auth API Endpoints\nDESCRIPTION: Authentication-related API endpoints for user management including signup, signin, password management, and token operations. All endpoints are prefixed with /api/v1/auth/.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_0\n\nLANGUAGE: REST\nCODE:\n```\nPOST /api/v1/auth/user/signup\nPOST /api/v1/auth/user/signin\nGET /api/v1/auth/user/me\nPOST /api/v1/auth/password/forgot\nPOST /api/v1/auth/password/change\nPOST /api/v1/auth/password/reset/{token}\nPOST /api/v1/auth/token/refresh\nPOST /api/v1/auth/token/validate/{token}\nPOST /api/v1/auth/email/validate/{email}\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Auto-Upstall Script\nDESCRIPTION: One-line command to automatically install NocoDB with all prerequisites including docker, PostgreSQL, Redis, Minio, and Traefik gateway. The script handles SSL setup and enables automatic updates.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/010.auto-upstall.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL http://install.nocodb.com/noco.sh) <(mktemp)\n```\n\n----------------------------------------\n\nTITLE: Custom Webhook Payload Example in NocoDB Enterprise Edition\nDESCRIPTION: This code snippet shows an example of a custom webhook payload in NocoDB's enterprise edition. It demonstrates how to access and use event data using handlebar syntax.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.insert\",\n  \"id\": \"0698517a-d83a-4e72-bf7a-75f46b704ad1\",\n  \"data\": {\n    \"table_id\": \"m969t01blwprpef\",\n    \"table_name\": \"Table-2\",\n    \"view_id\": \"vwib3bvfxdqgymun\",\n    \"view_name\": \"Table-2\",\n    \"rows\": [\n      {\n        \"Id\": 1,\n        \"Tags\": \"Sample Text\",\n        \"CreatedAt\": \"2024-04-11T10:40:20.998Z\",\n        \"UpdatedAt\": \"2024-04-11T10:40:20.998Z\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Postgres using Docker\nDESCRIPTION: This Docker command runs NocoDB with Postgres as the database. It includes environment variables for database connection and JWT authentication secret, mounts a volume for data persistence, and exposes the application on port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/020.docker-install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb-postgres \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\n-e NC_DB=\"pg://host.docker.internal:5432?u=root&p=password&d=d1\" \\\n-e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in NocoDB API Queries\nDESCRIPTION: This snippet demonstrates the usage of logical operators (OR, AND, NOT) in NocoDB API queries for combining multiple conditions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation | Example |\n|---|---|\n| ~or | (checkNumber,eq,JM555205)~or((amount, gt, 200)~and(amount, lt, 2000)) |\n| ~and | (checkNumber,eq,JM555205)~and((amount, gt, 200)~and(amount, lt, 2000)) |\n| ~not | ~not(checkNumber,eq,JM555205)\n```\n\n----------------------------------------\n\nTITLE: Data API Endpoints\nDESCRIPTION: Data manipulation API endpoints for performing CRUD operations on tables and views, including bulk operations, filtering, and grouping. All endpoints are prefixed with /api/v1/db/data/.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_2\n\nLANGUAGE: REST\nCODE:\n```\nDELETE /api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/\nPOST /api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/\nPATCH /api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/\nPATCH /api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/all\nDELETE /api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/all\nGET /api/v1/db/data/{orgs}/{projectName}/{tableName}\nGET /api/v1/db/data/{orgs}/{projectName}/{tableName}/find-one\nGET /api/v1/db/data/{orgs}/{projectName}/{tableName}/groupby\nGET /api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/exist\n```\n\n----------------------------------------\n\nTITLE: Date and DateTime Comparison Sub-Operators in NocoDB API\nDESCRIPTION: This snippet illustrates the usage of special sub-operators available for Date and DateTime columns in NocoDB API queries.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation       | Meaning                 | Example                           |\n|-----------------|-------------------------|-----------------------------------|\n| today           | today                   | (colName,eq,today)                |\n| tomorrow        | tomorrow                | (colName,eq,tomorrow)             |\n| yesterday       | yesterday               | (colName,eq,yesterday)            |\n| oneWeekAgo      | one week ago            | (colName,eq,oneWeekAgo)           |\n| oneWeekFromNow  | one week from now       | (colName,eq,oneWeekFromNow)       |\n| oneMonthAgo     | one month ago           | (colName,eq,oneMonthAgo)          |\n| oneMonthFromNow | one month from now      | (colName,eq,oneMonthFromNow)      |\n| daysAgo         | number of days ago      | (colName,eq,daysAgo,10)           |\n| daysFromNow     | number of days from now | (colName,eq,daysFromNow,10)       |\n| exactDate       | exact date              | (colName,eq,exactDate,2022-02-02)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from URLs to NocoDB using JavaScript and Axios\nDESCRIPTION: This code snippet shows how to upload files to NocoDB from public URLs using the API. It includes functions for inserting images by URL and creating a record with attachments. The code uses axios for making API requests and handles multiple URL uploads.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/050.upload-via-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\n\n// URL array : URLs of files to be uploaded\nconst URLs = [{ url: '<URL1>' }, { url: '<URL2>' }];\n\n// Insert Image\n// @param URLs : [] containing public URL for files to be uploaded\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImageByURL (URL_array) {\n    const data = await axios({\n        url: 'http://localhost:8080/api/v2/storage/upload-by-url',\n        data: URL_array,\n        headers: {\n            'xc-token': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadByUrlExample() {\n    let response = await insertImageByURL(URLs);\n\n    // Update two columns : Title and Attachment\n    let row = {\n        \"Title\": \"3\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v2/tables/${table_id}/records`,\n        data: row,\n        headers: {\n            'xc-token': xc_token\n        }\n    });\n}\n\n(async () => {\n    await uploadByUrlExample();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using DATEADD Function in Formula Fields\nDESCRIPTION: Adds a specified value to a date or datetime in various units (day, week, month, year). Can handle both positive and negative values for incrementing or decrementing dates.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDATEADD(date | datetime, value, [\"day\" | \"week\" | \"month\" | \"year\"])\n```\n\n----------------------------------------\n\nTITLE: Running the NocoDB Auto-installation Script\nDESCRIPTION: Command to execute the NocoDB auto-installation script. This script automatically installs all prerequisites (docker, docker-compose), sets up NocoDB with PostgreSQL, Redis, Minio, and Traefik, handles upgrades to the latest version, and configures SSL with automatic renewal.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/docker-compose/1_Auto_Upstall/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./noco.sh\n```\n\n----------------------------------------\n\nTITLE: Uploading Local Files to NocoDB using JavaScript and Axios\nDESCRIPTION: This code snippet demonstrates how to upload a local file to NocoDB using the API. It includes functions for inserting an image and creating a record with an attachment. The code uses axios for making API requests and the FormData API for handling file uploads.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/050.upload-via-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\nconst file_path = '<Local File Path>';\n\n\n// Insert Image\n// @param image_path : local file path\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImage (path) {\n    const formData = new FormData();\n    formData.append(\"file\", fs.createReadStream(path));\n    const data = await axios({\n        url: 'http://localhost:8080/api/v2/storage/upload',\n        data: formData,\n        headers:{\n            'Content-Type':`multipart/form-data;`,\n            'xc-token': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadFileExample() {\n    let response = await insertImage(file_path);\n\n    let row = {\n        \"Title\": \"2\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v2/tables/${table_id}/records`,\n        data: row,\n        headers: {\n            'xc-token': xc_token\n        }\n    });\n}\n\n(async () => {\n    await uploadFileExample();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using REGEX_MATCH Function for Pattern Validation\nDESCRIPTION: The REGEX_MATCH function tests if a string matches a regular expression pattern. It returns 1 for a match and 0 for no match, acting as a boolean validator for string patterns.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_MATCH(text, pattern)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_MATCH('123-45-6789', '\\d{3}-\\d{2}-\\d{4}') => 1\n```\n\n----------------------------------------\n\nTITLE: Uploading Local Files to NocoDB via API in JavaScript\nDESCRIPTION: This code demonstrates how to upload a local file to NocoDB using the API. It uses Axios for HTTP requests and FormData for file upload. The script includes functions for inserting an image and creating a record with an attachment.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/050.upload-via-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\nconst file_path = '<Local File Path>';\n\n\n// Insert Image\n// @param image_path : local file path\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImage (path) {\n    const formData = new FormData();\n    formData.append(\"file\", fs.createReadStream(path));\n    const data = await axios({\n        url: 'http://localhost:8080/api/v1/db/storage/upload',\n        data: formData,\n        headers:{\n            'Content-Type':`multipart/form-data;`,\n            'xc-auth': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadFileExample() {\n    let response = await insertImage(file_path);\n\n    let row = {\n        \"Title\": \"2\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v1/db/data/noco/${project_id}/${table_id}`,\n        data: row,\n        headers: {\n            'xc-auth': xc_token\n        }\n    });\n}\n\n(async () => {\n    await uploadFileExample();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using ROUNDDOWN Function in Formula Fields\nDESCRIPTION: The ROUNDDOWN function rounds a number down to a specified number of decimal places (precision). The default precision is 0. It always rounds toward zero regardless of the sign.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nROUNDDOWN(number, [precision])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nROUNDDOWN(8.765, 2) => 8.76\nROUNDDOWN(-15.123, 1) => -15.2\n```\n\n----------------------------------------\n\nTITLE: Using REGEX_EXTRACT Function for Pattern Matching\nDESCRIPTION: The REGEX_EXTRACT function searches a string for the first occurrence of a regular expression pattern and returns the matched substring. It takes a text input and a regex pattern parameter.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_EXTRACT(text, pattern)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_EXTRACT('Error: Something went wrong', 'Error: (.*)') => 'Something went wrong'\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from URLs to NocoDB via API in JavaScript\nDESCRIPTION: This code shows how to upload files from public URLs to NocoDB using the API. It uses Axios for HTTP requests and includes functions for inserting images by URL and creating a record with attachments from these URLs.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/050.upload-via-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\n\n// URL array : URLs of files to be uploaded\nconst URLs = [{ url: '<URL1>' }, { url: '<URL2>' }];\n\n// Insert Image\n// @param URLs : [] containing public URL for files to be uploaded\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImageByURL (URL_array) {\n    const data = await axios({\n        url: 'http://localhost:8080/api/v1/db/storage/upload-by-url',\n        data: URL_array,\n        headers: {\n            'xc-auth': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadByUrlExample() {\n    let response = await insertImageByURL(URLs);\n\n    // Update two columns : Title and Attachment\n    let row = {\n        \"Title\": \"3\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v1/db/data/noco/${project_id}/${table_id}`,\n        data: row,\n        headers: {\n            'xc-auth': xc_auth\n        }\n    });\n}\n\n(async () => {\n    await uploadByUrlExample();\n})();\n```\n\n----------------------------------------\n\nTITLE: Deploying Latest NocoDB Docker Container\nDESCRIPTION: Command to pull and run the latest NocoDB Docker image while maintaining existing environment variables and configurations.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 \\\n    -e NC_DB=\"<YOUR_NC_DB_URL>\" \\\n    -e NC_AUTH_JWT_SECRET=\"<YOUR_NC_AUTH_JWT_SECRET_IF_GIVEN>\" \\\n    nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing SWITCH Conditional Expression in Markdown\nDESCRIPTION: The SWITCH function evaluates an expression against multiple patterns, returning the value of the first matching pattern or a default value if none match.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/050.conditional-expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSWITCH(expr, [pattern, value, ..., default])\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSWITCH({field}, 1, 'One', 2, 'Two', '--')\n```\n\n----------------------------------------\n\nTITLE: Using ISBLANK Function to Check for Empty Values\nDESCRIPTION: The ISBLANK function checks if a value is empty or null. It returns TRUE if the input is empty or null, and FALSE if it contains any value. It's useful for validating required fields.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nISBLANK(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nISBLANK('') => true\nISBLANK('Hello') => false\n```\n\n----------------------------------------\n\nTITLE: Using DATESTR Function in Formula Fields\nDESCRIPTION: Converts a date or datetime field into a string in \"YYYY-MM-DD\" format. This function ignores the time part when converting a datetime value.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nDATESTR(date | datetime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSL for NocoDB with Nginx and ACME\nDESCRIPTION: NixOS configuration for enabling SSL with Nginx and ACME for secure access to NocoDB. This setup includes recommended security settings and proxy configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nnetworking.firewall.allowedTCPPorts = [ 80 443 ];\n\nservices.nginx = {\n    enable = true;\n\n    recommendedTlsSettings = true;\n    recommendedOptimisation = true;\n    recommendedGzipSettings = true;\n    recommendedProxySettings = true;\n    recommendedBrotliSettings = true;\n\n    virtualHosts.\"example.com\" =  {\n      enableACME = true;\n      forceSSL = true;\n      locations.\"/\" = {\n        proxyPass = \"http://127.0.0.1:8080\";\n        proxyWebsockets = true;\n      };\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Update\nDESCRIPTION: Example of the JSON response structure sent by a webhook after a record is updated. Includes both the previous record data and the updated record data, enabling comparison of changes.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.update\",\n  \"id\": \"6a6ebfe4-b0b5-434e-b5d6-5212adbf82fa\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"previous_records\": [\n      {\n        \"FilmId\": 1,\n        \"Title\": \"ACADEMY DINOSAUR\",\n        \"Description\": \"A Epic Drama of a Feminist in The Canadian Rockies\",\n        \"Actor List\": [\n          {\n            \"ActorId\": 10,\n            \"FirstName\": \"CHRISTIAN\"\n          }\n        ],\n      }\n    ],\n    \"records\": [\n      {\n        \"FilmId\": 1,\n        \"Title\": \"ACADEMY DINOSAUR (Edited)\",\n        \"Actor List\": [\n          {\n            \"ActorId\": 10,\n            \"FirstName\": \"CHRISTIAN\"\n          }\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Bulk Update Event in NocoDB\nDESCRIPTION: This code snippet demonstrates the structure of a webhook response after multiple records are updated in NocoDB. It includes both previous and updated record data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.bulkUpdate\",\n  \"id\": \"e983cea5-8e38-438e-96a0-048751f6830b\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"Sheet-1\",\n    \"previous_records\": [\n      [\n        {\n          \"FilmId\": 1005,\n          \"Title\": \"Q\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        },\n        {\n          \"FilmId\": 1004,\n          \"Title\": \"P\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        }\n      ]\n    ],\n    \"records\": [\n      [\n        {\n          \"FilmId\": 1005,\n          \"Title\": \"Q-EDITED\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        },\n        {\n          \"FilmId\": 1004,\n          \"Title\": \"P-EDITED\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Discord Webhook Payload Example\nDESCRIPTION: Example of a Discord webhook payload structure that can be used to send messages to a Discord channel. Shows how to format content and embeds for Discord's webhook API.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"Hello, this is a webhook message\",\n  \"embeds\": [\n    {\n      \"title\": \"Webhook\",\n      \"description\": \"This is a webhook message\",\n      \"color\": 16711680\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: NocoDB API Endpoint Format\nDESCRIPTION: Example URL formats for accessing NocoDB hosted instance APIs, including both table records and base metadata endpoints.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/005.overview.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.nocodb.com/api/v2/tables/TABLEID/records\nhttps://app.nocodb.com/api/v2/meta/bases/BASEID/info\n```\n\n----------------------------------------\n\nTITLE: Implementing ToolbarPage Class for NocoDB Testing\nDESCRIPTION: JavaScript class definition for ToolbarPage, representing the toolbar component in NocoDB tests, including filter functionality.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ToolbarPage extends BasePage {\n  readonly parent: GridPage | GalleryPage | FormPage | KanbanPage;\n  readonly filter: ToolbarFilterPage;\n\n  constructor(parent: GridPage | GalleryPage | FormPage | KanbanPage) {\n    super(parent.rootPage);\n    this.parent = parent;\n    this.filter = new ToolbarFilterPage(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL for NocoDB on NixOS\nDESCRIPTION: NixOS configuration for setting up PostgreSQL as the database for NocoDB instead of SQLite. This includes database creation, user setup, and authentication configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n  services.nocodb.environments = {\n    DB_URL=\"postgres:///nocodb?host=/run/postgresql\";\n  };\n\n  services.postgresql = {\n    enable = true;\n\n    ensureDatabases = [ \"nocodb\" ];\n    ensureUsers = [{\n      name = \"nocodb\";\n      ensureDBOwnership = true;\n    }];\n\n    package = with pkgs; postgresql_15;\n    authentication = lib.mkForce ''\n        #type database DBuser  origin-address auth-method\n        # unix socket\n        local all      all                    trust\n        # ipv4\n        host  all      all     127.0.0.1/32   trust\n        # ipv6\n        host  all      all     ::1/128        trust\n    '';\n\n    settings.log_timezone = config.time.timeZone;\n  };\n```\n\n----------------------------------------\n\nTITLE: Discord Webhook Payload Example in NocoDB\nDESCRIPTION: This code snippet demonstrates how to structure a Discord webhook payload in NocoDB. It includes examples of sending a basic message and customizing the payload with event data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"Hello, this is a webhook message\",\n  \"embeds\": [\n    {\n      \"title\": \"Webhook\",\n      \"description\": \"This is a webhook message\",\n      \"color\": 16711680\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Delete Event in NocoDB\nDESCRIPTION: This code snippet illustrates the structure of a webhook response after a record is deleted in NocoDB. It includes details of the deleted record.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.delete\",\n  \"id\": \"e593079f-70e5-4965-8944-5ff7aeed005c\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"records\": [\n      {\n        \"FilmId\": 1010,\n        \"Title\": \"ALL-EDITED\",\n        \"Language\": {\n          \"LanguageId\": 1,\n          \"Name\": \"English\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Attachment Fields in NocoDB\nDESCRIPTION: List of environment variables that can be configured in self-hosted NocoDB to customize Attachment field behavior, including file size limits, maximum attachments per cell, secure access options, and URL expiration settings.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/010.attachment.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `NC_ATTACHMENT_FIELD_SIZE`: Maximum size of attachment files in bytes. Default: `20971520` (20 MiB)\n- `NC_MAX_ATTACHMENTS_ALLOWED`: Maximum number of attachments per cell. Default: `10`\n- `NC_SECURE_ATTACHMENTS`: Allow accessing attachments only through pre-signed URLs. Default: `false`\n- `NC_ATTACHMENT_EXPIRE_SECONDS`: Expiry time for pre-signed URLs. Default: `7200` (2 hours)\n```\n\n----------------------------------------\n\nTITLE: Using TRIM Function to Remove Whitespace\nDESCRIPTION: The TRIM function removes leading and trailing whitespace from a string. It takes a single text parameter and returns the string with outer spaces removed.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nTRIM(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nTRIM('   Trim this   ') => 'Trim this'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 SAML Settings for NocoDB Integration\nDESCRIPTION: JSON configuration for Auth0 SAML settings specifying nameIdentifierProbes to use email address as the identifier for authentication. This configuration ensures Auth0 properly identifies users based on their email addresses during the SAML authentication flow.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/140.account-settings/030.authentication/030.SAML-SSO/020.auth0.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nameIdentifierProbes\": [\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Insert\nDESCRIPTION: Example of the JSON response structure sent by a webhook after a record is inserted. Contains the event type, ID, and data about the inserted record including table information and record details.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.insert\",\n  \"id\": \"9dac1c54-b3be-49a1-a676-af388145fa8c\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"records\": [\n      {\n        \"FilmId\": 1011,\n        \"Title\": \"FOO\",\n        \"Language\": {\n          \"LanguageId\": 1,\n          \"Name\": \"English\"\n        },\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IF Conditional Expression in Markdown\nDESCRIPTION: The IF function evaluates a condition and returns one value if true, another if false. It's used for conditional operations in programming and spreadsheet formulas.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/050.conditional-expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIF(expr, successCase, elseCase)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nIF({field} > 1, Value1, Value2)\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Update Event in NocoDB\nDESCRIPTION: This code snippet demonstrates the structure of a webhook response after a record is updated in NocoDB. It includes both the previous and updated record data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.update\",\n  \"id\": \"6a6ebfe4-b0b5-434e-b5d6-5212adbf82fa\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"previous_records\": [\n      {\n        \"FilmId\": 1,\n        \"Title\": \"ACADEMY DINOSAUR\",\n        \"Description\": \"A Epic Drama of a Feminist in The Canadian Rockies\",\n        \"Actor List\": [\n          {\n            \"ActorId\": 10,\n            \"FirstName\": \"CHRISTIAN\"\n          }\n        ]\n      }\n    ],\n    \"records\": [\n      {\n        \"FilmId\": 1,\n        \"Title\": \"ACADEMY DINOSAUR (Edited)\",\n        \"Actor List\": [\n          {\n            \"ActorId\": 10,\n            \"FirstName\": \"CHRISTIAN\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Upgrade Example\nDESCRIPTION: Comprehensive example showing the entire Docker upgrade process including container management, image removal, and new container deployment with volume mounting and environment variables.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Previous docker run\n#\nterminal % docker run -d --name myNocoDB \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\n-e NC_DB=\"pg://host.docker.internal:5432?u=postgres&p=password&d=d1\" \\\n-e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\nnocodb/nocodb:0.111.0\nUnable to find image 'nocodb/nocodb:0.111.0' locally\n0.111.0: Pulling from nocodb/nocodb\nad3fa0ea069c: Pull complete \ne43b9156e769: Pull complete \nc1bee0da1504: Pull complete \nadf78ab024d9: Pull complete \ncd8000d2c16a: Pull complete \nDigest: sha256:93b6e1ba2c0b90a26b205f9c7d44053aa6d8fa037eff9eb4155ca017f6c9bed4\nStatus: Downloaded newer image for nocodb/nocodb:0.111.0\nafdc8edd1005c93e1df8f90d02e46430ea7b5c5610a2bf9ba105238d6c4d927b\n\n\n# Find, stop and delete NocoDB docker container\n#\nterminal % docker ps\nCONTAINER ID   IMAGE                   COMMAND                  CREATED          STATUS                 PORTS                    NAMES\nafdc8edd1005   nocodb/nocodb:0.111.0   \"/usr/bin/dumb-init …\"   18 seconds ago   Up 18 seconds          0.0.0.0:8080->8080/tcp   myNocoDB\n0202041b3607   postgres:14.7           \"docker-entrypoint.s…\"   2 days ago       Up 8 hours (healthy)   0.0.0.0:5432->5432/tcp   scripts_pg147_1\n\nterminal % docker stop afdc8edd1005\nafdc8edd1005\n\nterminal % docker rm afdc8edd1005\nafdc8edd1005\n\n\n# Find and remove NocoDB docker image\n#\nterminal % docker images\nREPOSITORY      TAG       IMAGE ID       CREATED        SIZE\nnocodb/nocodb   0.111.0   34609411e87c   5 weeks ago    132MB\nmysql           8.0       6a0560a40914   7 weeks ago    599MB\npostgres        14.7      2075a95c7b3b   4 months ago   358MB\n\nterminal % docker rmi 34609411e87c\nUntagged: nocodb/nocodb:0.111.0\nUntagged: nocodb/nocodb@sha256:93b6e1ba2c0b90a26b205f9c7d44053aa6d8fa037eff9eb4155ca017f6c9bed4\nDeleted: sha256:3bfxxxx38e682742cbxxxx535b3503af45e931fb9bd15f46eca7d33cf4c54d72\nDeleted: sha256:952152b5da42ae057c6688a04xxxx72e1a2f91825956f5c7e35f91d5b285d4d8\nDeleted: sha256:3155197577xxxx673675ed1bce761714a24d7803f70a905740f7d4c248cxxxxx\n\n\n# Pull & run the latest NocoDB image with same environment variables as before\n#\nterminal % docker run -d --name myNocoDB \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\n-e NC_DB=\"pg://host.docker.internal:5432?u=postgres&p=password&d=d1\" \\\n-e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\nnocodb/nocodb:latest\nUnable to find image 'nocodb/nocodb:latest' locally\nlatest: Pulling from nocodb/nocodb\nad3fa0ea069c: Pull complete \ne43b9156e769: Pull complete \nc1bee0da1504: Pull complete \nadf78ab024d9: Pull complete \n28ce4fc94e48: Pull complete \nDigest: sha256:5c6df5ff0eb1278e1dbfe684af630a743ca73dfec8c30cab3bae9c1d0d640287\nStatus: Downloaded newer image for nocodb/nocodb:latest\nae793a04b75f2f3ee78abbaef09891396a884ec83320151a266326195649a058\n\n```\n\n----------------------------------------\n\nTITLE: Using SQRT Function in Formula Fields\nDESCRIPTION: The SQRT function calculates the square root of a given number. It returns the value that, when multiplied by itself, equals the input number.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nSQRT(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSQRT(25) => 5\nSQRT(2) => 1.4142135623730951\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Table Test Suite in TypeScript\nDESCRIPTION: Full implementation of a table test suite file that tests table-related functionality. It includes the setup of test context, creation of test data using factories, and an example test case for listing tables.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'mocha';\nimport request from 'supertest';\nimport init from '../../init';\nimport { createTable, getAllTables } from '../../factory/table';\nimport { createProject } from '../../factory/project';\nimport { defaultColumns } from '../../factory/column';\nimport Model from '../../../../src/lib/models/Model';\nimport { expect } from 'chai';\n\nfunction tableTest() {\n  let context;\n  let project;\n  let table;\n\n  beforeEach(async function () {\n    context = await init();\n\n    project = await createProject(context);\n    table = await createTable(context, project);\n  });\n\n  it('Get table list', async function () {\n    const response = await request(context.app)\n      .get(`/api/v1/db/meta/projects/${project.id}/tables`)\n      .set('xc-auth', context.token)\n      .send({})\n      .expect(200);\n\n    expect(response.body.list).to.be.an('array').not.empty;\n  });\n}\n\nexport default function () {\n  describe('Table', tableTests);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Table List API Test in TypeScript\nDESCRIPTION: Example of a unit test that verifies the table listing API. It makes a GET request to retrieve the list of tables and validates that the response contains a non-empty array.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nit('Get table list', async function () {\n  const response = await request(context.app)\n    .get(`/api/v1/db/meta/projects/${project.id}/tables`)\n    .set('xc-auth', context.token)\n    .send({})\n    .expect(200);\n\n  expect(response.body.list).to.be.an('array').not.empty;\n});\n```\n\n----------------------------------------\n\nTITLE: Using DATETIME_DIFF Function in Formula Fields\nDESCRIPTION: Calculates the difference between two dates in various time units such as milliseconds, seconds, minutes, hours, days, weeks, months, quarters, or years. Returns negative values when the second date is after the first date.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDATETIME_DIFF(date1, date2, [\"milliseconds\" | \"ms\" | \"seconds\" | \"s\" | \"minutes\" | \"m\" | \"hours\" | \"h\" | \"days\" | \"d\" | \"weeks\" | \"w\" | \"months\" | \"M\" | \"quarters\" | \"Q\" | \"years\" | \"y\"])\n```\n\n----------------------------------------\n\nTITLE: Using CEILING Function in Formula Fields\nDESCRIPTION: The CEILING function rounds a number up to the nearest integer greater than or equal to the input value. For positive numbers, it rounds up; for negative numbers, it rounds toward zero.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCEILING(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCEILING(8.75) => 9\nCEILING(-15.25) => -15\n```\n\n----------------------------------------\n\nTITLE: Using API Token in Request Headers\nDESCRIPTION: Example showing how to include the API token in request headers using the 'xc-token' field for authentication purposes.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/140.account-settings/020.api-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"xc-token\": \"Copied API token here under quotes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Webhook Payload Event Structure\nDESCRIPTION: Sample JSON structure of the event data accessible via the handlebar syntax in custom webhook payloads. Shows the structure that can be accessed using {{ json event }} in the custom payload configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.insert\",\n  \"id\": \"0698517a-d83a-4e72-bf7a-75f46b704ad1\",\n  \"data\": {\n    \"table_id\": \"m969t01blwprpef\",\n    \"table_name\": \"Table-2\",\n    \"view_id\": \"vwib3bvfxdqgymun\",\n    \"view_name\": \"Table-2\",\n    \"rows\": [\n      {\n        \"Id\": 1,\n        \"Tags\": \"Sample Text\",\n        \"CreatedAt\": \"2024-04-11T10:40:20.998Z\",\n        \"UpdatedAt\": \"2024-04-11T10:40:20.998Z\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using URL Function to Create Hyperlinks\nDESCRIPTION: The URL function validates if a string is a valid URL and converts it into a clickable hyperlink. It takes a single text parameter containing the URL to convert.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nURL(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nURL('https://www.example.com') => a clickable link for https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Deploying NocoDB on Google Cloud Run\nDESCRIPTION: This command deploys NocoDB on Google Cloud Run. It specifies the image to use, the region for deployment, allows unauthenticated access, and uses the managed platform. Replace <MY_PROJECT_ID> with your actual Google Cloud project ID.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/080.gcp-cloud-run.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy --image=gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest \\\n                  --region=us-central1 \\\n                  --allow-unauthenticated \\\n                  --platform=managed\n```\n\n----------------------------------------\n\nTITLE: Using SEARCH Function to Find Substring Position\nDESCRIPTION: The SEARCH function finds the position of a substring within a text string. It returns the index position if found, or 0 if not found. It takes a text input and a search string parameter.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nSEARCH(text, srchStr)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSEARCH('user@example.com', '@') => 5\n```\n\n----------------------------------------\n\nTITLE: Creating a Rollup Field in NocoDB with Markdown\nDESCRIPTION: This code snippet demonstrates the steps required to create a Rollup field in NocoDB, including selecting link fields, display fields, and aggregation functions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/040.links-based/030.rollup.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click on `+` icon to the right of `Fields header`\n2. On the dropdown modal, enter the field name (Optional).\n3. Select the field type as `Rollup` from the dropdown.\n4. Select the link field from the dropdown. This is the field that links the current table to the related table.\n5. Select the field for display from the dropdown. This is the field that will be displayed in the current table.\n6. Select the aggregation function from the dropdown. This is the function that will be used to aggregate the data.\n7. Click on `Save Field` button.\n```\n\n----------------------------------------\n\nTITLE: Using LEN Function to Count String Length\nDESCRIPTION: The LEN function returns the total number of characters in a string. It takes a single text parameter and outputs the character count as a number.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLEN(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nLEN('Product Description') => 19\n```\n\n----------------------------------------\n\nTITLE: Using ABS Function in Formula Fields\nDESCRIPTION: The ABS function returns the absolute value of a number, ensuring the result is non-negative. It calculates the distance of the number from zero on the number line.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nABS(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nABS(10.35) => 10.35\nABS(-15) => 15\n```\n\n----------------------------------------\n\nTITLE: Connection Configuration Documentation\nDESCRIPTION: Structured documentation explaining how to create PostgreSQL and MySQL connections in NocoDB, including host configuration, authentication details, SSL setup, and connection parameters.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/095.integrations/020.create-connection.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PostgreSQL Connection Details\n- Connection Name: Display name for the connection\n- Host Address: PostgreSQL server hostname\n- Port Number: Default 5432\n- Username: Default \"postgres\"\n- Password: Server authentication password\n- Database: [Optional] Target database name\n- Schema Name: [Optional] Target schema name\n- SSL Mode: Optional TLS/MTLS configuration\n  - Client Certificate\n  - Client Key\n  - Root CA\n\n# MySQL Connection Details\n- Connection Name: Display name for the connection\n- Host Address: MySQL server hostname\n- Port Number: Default 3306\n- Username: Default \"root\"\n- Password: Server authentication password\n- Database: [Optional] Target database name\n- SSL Mode: Optional TLS/MTLS configuration\n  - Client Certificate\n  - Client Key\n  - Root CA\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with Handlebars in NocoDB Webhooks\nDESCRIPTION: Example of using Handlebars syntax to access data fields in webhook payloads for INSERT/UPDATE triggers in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/040.webhooks.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ data.id }}\n{{ data.title }}\n{{ data.created_at }}\n{{ data.updated_at }}\n```\n\n----------------------------------------\n\nTITLE: Using REGEX_REPLACE Function for Pattern Substitution\nDESCRIPTION: The REGEX_REPLACE function replaces all occurrences of a regex pattern in a string with a replacement text. It takes a text input, a pattern to match, and a replacer string.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_REPLACE(text, pattern, replacer)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREGEX_REPLACE('Replace all bugs', 'bug', 'feature') => 'Replace all features'\n```\n\n----------------------------------------\n\nTITLE: Examples of Complex Conditional Expressions in Markdown\nDESCRIPTION: These examples demonstrate how to combine logical and numerical operators to build more complex conditional expressions in formula fields.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/050.conditional-expressions.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nIF({marksSecured} > 80, \"GradeA\", \"GradeB\")\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSWITCH({quarterNumber},  \n    1, 'Jan-Mar',\n    2, 'Apr-Jun',\n    3, 'Jul-Sep',\n    4, 'Oct-Dec',\n    'INVALID'\n)\n```\n\n----------------------------------------\n\nTITLE: Starting NocoDB with Docker Compose\nDESCRIPTION: Command to start NocoDB and PostgreSQL services in detached mode using Docker Compose.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: MONTH Example Usage\nDESCRIPTION: Examples showing how MONTH extracts the month component from date and datetime values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nMONTH('2022-03-14') => 3\nMONTH('2022-03-14 12:00:00') => 3\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Bulk Update\nDESCRIPTION: Example of the JSON response structure sent by a webhook after multiple records are updated in a bulk operation. Contains arrays of both previous and updated record data for comparison.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.bulkUpdate\",\n  \"id\": \"e983cea5-8e38-438e-96a0-048751f6830b\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"Sheet-1\",\n    \"previous_records\": [\n      [\n        {\n          \"FilmId\": 1005,\n          \"Title\": \"Q\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          },\n        },\n        {\n          \"FilmId\": 1004,\n          \"Title\": \"P\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        }\n      ]\n    ],\n    \"records\": [\n      [\n        {\n          \"FilmId\": 1005,\n          \"Title\": \"Q-EDITED\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        },\n        {\n          \"FilmId\": 1004,\n          \"Title\": \"P-EDITED\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          },\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWITCH Expression for Quarter Mapping in NocoDB\nDESCRIPTION: Example demonstrating how to use SWITCH expression to map quarter numbers to their corresponding month ranges. Returns month range string based on quarter number input, with a default value of 'INVALID'.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSWITCH({quarterNumber},  \n    1, 'Jan-Mar',\n    2, 'Apr-Jun',\n    3, 'Jul-Sep',\n    4, 'Oct-Dec',\n    'INVALID'\n)\n```\n\n----------------------------------------\n\nTITLE: Using CONCAT Function for String Concatenation\nDESCRIPTION: The CONCAT function joins multiple strings into a single string. It takes two or more text arguments and combines them in the order provided.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCONCAT(text, [text,...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCONCAT('John', ' ', 'Doe') => 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Using REPLACE Function for Substring Substitution\nDESCRIPTION: The REPLACE function substitutes all instances of a substring with another substring. It takes a text input, a search string to find, and a replacement string to insert.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE(text, srchStr, rplcStr)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE('Replace old text', 'old', 'new') => 'Replace new text'\n```\n\n----------------------------------------\n\nTITLE: Using IF Conditional Expression in NocoDB\nDESCRIPTION: Example showing how to use the IF conditional expression to assign grades based on marks secured. Returns 'GradeA' if marks are above 80, otherwise returns 'GradeB'.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nIF({marksSecured} > 80, \"GradeA\", \"GradeB\")\n```\n\n----------------------------------------\n\nTITLE: NocoDB Keyboard Navigation Shortcuts Table\nDESCRIPTION: Markdown table defining keyboard shortcuts for cell navigation and record management in NocoDB's grid view. Includes commands for navigation, editing, copying, and record manipulation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/080.records/070.actions-on-record.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|             Key | Behaviour                                                                            |\n|----------------:|:-------------------------------------------------------------------------------------|\n|         `⌘` `↑` | Jump to first record in this field (in same page)                                    |\n|         `⌘` `↓` | Jump to last record in this field (in same page)                                     |\n|         `⌘` `C` | Copy cell contents to clipboard                                                      |\n|         `⌘` `V` | Paste clipboard contents to cell                                                     |\n|         `Enter` | Switch cell in focus to EDIT mode; opens modal/picker if cell is associated with one |\n|           `Esc` | Exit cell EDIT mode                                                                  |\n|        `Delete` | Clear cell                                                                          |\n|         `Space` | Expand current record                                                                |\n| `←` `→` `↑` `↓` | General cell navigation : left, right, top, bottom                                   |\n|           `Tab` | Move to next cell horizontally; if on last cell, move to beginning of next record    |\n```\n\n----------------------------------------\n\nTITLE: Using SUBSTR Function for Substring Extraction\nDESCRIPTION: The SUBSTR function extracts a portion of a string starting at a specified position. It takes a text input, a starting position, and an optional count parameter for the length of the substring.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nSUBSTR(text, position, [count])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSUBSTR('Extract this text', 9, 4) => 'this'\n```\n\n----------------------------------------\n\nTITLE: YEAR Example Usage\nDESCRIPTION: Examples showing how YEAR extracts the year component from date and datetime values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nYEAR('2022-03-14') => 2022\nYEAR('2022-03-14 12:00:00') => 2022\n```\n\n----------------------------------------\n\nTITLE: Creating a Playwright Test Suite for Filtering\nDESCRIPTION: JavaScript code demonstrating the structure of a test suite for filter functionality, including setup and context initialization.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport setup, { NcContext } from '../setup';\n\ntest.describe('Filter', () => {\n  let context: NcContext;\n\n  test.beforeEach(async ({ page }) => {\n    context = await setup({ page });\n  })\n\n  test('should filter', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using MID Function to Extract Substring\nDESCRIPTION: The MID function extracts a substring from a text string. It takes a text input, a starting position, and an optional count parameter to specify how many characters to extract from the starting position.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nMID(text, position, [count])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nMID('This is a sentence', 5, 3) => 'is '\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Axios in JavaScript\nDESCRIPTION: Example of making an authenticated GET request using Axios in JavaScript. Demonstrates proper request configuration with headers and parameters.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/065.table-details/table-details-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer',\n  params: {offset: '0', limit: '25', where: ''},\n  headers: {\n    'xc-auth': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema for Database Connection in NocoDB\nDESCRIPTION: This JSON snippet shows how to specify a target schema for a PostgreSQL database connection in NocoDB. It uses the 'searchPath' property to define the schema to be used.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/010.dashboard.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": \"pg\",\n  \"connection\": {\n    ...\n  },\n  \"searchPath\": [ \"<YOUR_TARGET_SCHEMA>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Operator Example\nDESCRIPTION: Example showing nested logical operators combining AND and OR conditions for check number and amount filtering\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/005.overview.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n(checkNumber,eq,JM555205)~or((amount,gt,200)~and(amount,lt,2000))\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with SQLite using Docker\nDESCRIPTION: This Docker command runs NocoDB with SQLite as the database. It mounts a volume to persist data and exposes the application on port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/020.docker-install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: DATETIME_DIFF Example Usage\nDESCRIPTION: Sample usage of DATETIME_DIFF function showing the difference between two dates in seconds. In this example, it returns -86400, which is the number of seconds in a day.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDATETIME_DIFF(\"2022/10/14\", \"2022/10/15\", \"seconds\") => -86400\n```\n\n----------------------------------------\n\nTITLE: Configuring NocoDB Unit Test Environment\nDESCRIPTION: Example of setting up the test environment, including initializing a Noco instance, restoring databases, and creating a root user.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet context;\n\nbeforeEach(async function () {\n  context = await init();\n\n  project = await createProject(context);\n  table = await createTable(context, project);\n});\n```\n\n----------------------------------------\n\nTITLE: Date Functions in NocoDB Formulas\nDESCRIPTION: Table of date functions available in NocoDB formulas, including their syntax, usage examples, and remarks.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Syntax | Sample | Output | Remark |\n|---|---|---|---|---|\n| **NOW** | `NOW()` | `NOW()` | 2022-05-19 17:20:43 | Returns the current time and day |\n|  | `IF(NOW() < {DATE_COL}, \"true\", \"false\")` | `IF(NOW() < date, \"true\", \"false\")` | If current date is less than `{DATE_COL}`, it returns true. Otherwise, it returns false. | DateTime columns and negative values are supported. |\n| **DATEADD** | `DATEADD(date \\| datetime, value, [\"day\" \\| \"week\" \\| \"month\" \\| \"year\"])` | `DATEADD(date, 1, 'day')` | Supposing `{DATE_COL}` is 2022-03-14. The result is 2022-03-15. | DateTime columns and negative values are supported. Example: `DATEADD(DATE_TIME_COL, -1, 'day')` |\n|  |  | `DATEADD(date, 1, 'week')` | Supposing `{DATE_COL}` is 2022-03-14 03:14. The result is 2022-03-21 03:14. | DateTime columns and negative values are supported. Example: `DATEADD(DATE_TIME_COL, -1, 'week')` |\n|  |  | `DATEADD(date, 1, 'month')` | Supposing `{DATE_COL}` is 2022-03-14 03:14. The result is 2022-04-14 03:14. | DateTime columns and negative values are supported. Example: `DATEADD(DATE_TIME_COL, -1, 'month')` |\n|  |  | `DATEADD(date, 1, 'year')` | Supposing `{DATE_COL}` is 2022-03-14 03:14. The result is 2023-03-14 03:14. | DateTime columns and negative values are supported. Example: `DATEADD(DATE_TIME_COL, -1, 'year')` |\n|  |  | `IF(NOW() < DATEADD(date,10,'day'), \"true\", \"false\")` | If the current date is less than `{DATE_COL}` plus 10 days, it returns true. Otherwise, it returns false. | DateTime columns and negative values are supported. |\n|  |  | `IF(NOW() < DATEADD(date,10,'day'), \"true\", \"false\")` | If the current date is less than `{DATE_COL}` plus 10 days, it returns true. Otherwise, it returns false. | DateTime columns and negative values are supported. |\n| **DATETIME_DIFF** | `DATETIME_DIFF(date, date, [\"milliseconds\" \\| \"ms\" \\| \"seconds\" \\| \"s\" \\| \"minutes\" \\| \"m\" \\| \"hours\" \\| \"h\" \\| \"days\" \\| \"d\" \\| \"weeks\" \\| \"w\" \\| \"months\" \\| \"M\" \\| \"quarters\" \\| \"Q\" \\| \"years\" \\| \"y\"])` | `DATETIME_DIFF(\"2022/10/14\", \"2022/10/15\", \"second\")` | Supposing `{DATE_COL_1}` is 2017-08-25 and `{DATE_COL_2}` is 2011-08-25. The result is 86400. | Compares two dates and returns the difference in the unit specified. Positive integers indicate the second date being in the past compared to the first and vice versa for negative ones. |\n|  |  | `WEEKDAY(NOW(), \"sunday\")` | If today is Monday, it returns 1 | Get the week day of NOW() with the first day set as sunday |\n| **WEEKDAY** | `WEEKDAY(date, [startDayOfWeek])` | `WEEKDAY(NOW())` | If today is Monday, it returns 0 | Returns the day of the week as an integer between 0 and 6 inclusive starting from Monday by default. You can optionally change the start day of the week by specifying in the second argument |\n|  |  | `WEEKDAY(NOW(), \"sunday\")` | If today is Monday, it returns 1 | Get the week day of NOW() with the first day set as sunday |\n```\n\n----------------------------------------\n\nTITLE: Using NOW Function in Formula Fields\nDESCRIPTION: Returns the current date and time. Useful for creating timestamp fields or for date comparisons in formulas.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNOW()\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Settings for Database Connection in NocoDB\nDESCRIPTION: This JSON snippet demonstrates how to configure SSL settings for a PostgreSQL database connection in NocoDB. It includes options for requiring SSL, rejecting unauthorized connections, and setting the SSL mode.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/010.dashboard.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": \"pg\",\n  \"connection\": {\n    \"host\": \"<YOUR_HOST>\",\n    \"port\": \"5432\",\n    \"user\": \"<YOUR_DB_USER>\",\n    \"password\": \"<YOUR_DB_PASSWORD>\",\n    \"database\": \"<YOUR_DB_NAME>\",\n    \"ssl\": {\n      \"require\": true,\n      \"rejectUnauthorized\": false,\n      \"sslMode\": \"no-verify\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LEFT Function to Extract First N Characters\nDESCRIPTION: The LEFT function extracts a specified number of characters from the beginning of a string. It takes a text input and a count parameter indicating how many characters to retrieve.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nLEFT(text, count)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nLEFT('123-456-7890', 3) => '123'\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB Docker Container with PostgreSQL\nDESCRIPTION: Docker command to run NocoDB with PostgreSQL database, setting environment variables for database connection and JWT secret.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb-postgres \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\n-e NC_DB=\"pg://host.docker.internal:5432?u=root&p=password&d=d1\" \\\n-e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: DAY Example Usage\nDESCRIPTION: Examples showing how DAY extracts the day component from date and datetime values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nDAY('2022-03-14') => 14\nDAY('2022-03-14 12:00:00') => 14\n```\n\n----------------------------------------\n\nTITLE: Using URLENCODE Function for URL Component Encoding\nDESCRIPTION: The URLENCODE function percent-encodes special characters in a string for use in URL parameters. It follows RFC 3986 section 2.2 standards, encoding spaces and special characters but preserving letters from non-Latin alphabets.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nURLENCODE(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n'https://example.com/q?param=' & URLENCODE('Hello, world')\n=> 'https://example.com/q?param=Hello%2C%20world'\n```\n\n----------------------------------------\n\nTITLE: Implementing AND Logical Operator in Markdown\nDESCRIPTION: The AND function is a logical operator that returns TRUE only if all its conditions are true. It can use comparison operators like ==, !=, >, <, >=, <=.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/050.conditional-expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAND(expr1, [expr2,...])\n```\n\nLANGUAGE: markdown\nCODE:\n```\nAND({field} > 2, {field} < 10)\n```\n\n----------------------------------------\n\nTITLE: Discord Webhook with Complete Event Data\nDESCRIPTION: Example of how to send the complete event data to Discord using handlebar syntax in the custom payload configuration. Uses double JSON parsing to properly format the event data as a string.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\" : {{ json ( json event ) }}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Types for Attachment Field Validation in NocoDB\nDESCRIPTION: Examples of MIME type configurations for limiting file types in attachment fields. Shows how to restrict uploads to specific file formats like PNG images, PDFs, or all image types.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/090.views/040.view-types/030.form.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  - `image/png` Allows only PNGs\n  - `application/pdf` Allows PDF documents only \n  - `image/*` Allows all images\n```\n\n----------------------------------------\n\nTITLE: Using ROUND Function in Formula Fields\nDESCRIPTION: The ROUND function rounds a number to a specified number of decimal places (precision). The default precision is 0 (rounds to integer). It rounds up or down to the nearest value at the specified precision.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nROUND(number, [precision])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nROUND(8.765, 2) => 8.77\nROUND(-15.123, 1) => -15.1\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Insert Event in NocoDB\nDESCRIPTION: This code snippet shows the structure of a webhook response after a record is inserted in NocoDB. It includes details such as the event type, table information, and the inserted record data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.insert\",\n  \"id\": \"9dac1c54-b3be-49a1-a676-af388145fa8c\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"records\": [\n      {\n        \"FilmId\": 1011,\n        \"Title\": \"FOO\",\n        \"Language\": {\n          \"LanguageId\": 1,\n          \"Name\": \"English\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DAY Function in Formula Fields\nDESCRIPTION: Returns the day of the month as an integer between 1 and 31. The value is based on the server timezone (GMT by default), which may differ from the browser timezone.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nDAY(date | datetime)\n```\n\n----------------------------------------\n\nTITLE: Using ISNOTBLANK Function to Validate Data Presence\nDESCRIPTION: The ISNOTBLANK function checks if a value contains data. It returns TRUE if the input has any value, and FALSE if it's empty or null. It's the inverse of the ISBLANK function.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nISNOTBLANK(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nISNOTBLANK('') => false\nISNOTBLANK('Hello') => true\n```\n\n----------------------------------------\n\nTITLE: Using FLOOR Function in Formula Fields\nDESCRIPTION: The FLOOR function rounds a number down to the nearest integer less than or equal to the input. For positive numbers, it rounds down; for negative numbers, it rounds away from zero.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nFLOOR(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nFLOOR(8.75) => 8\nFLOOR(-15.25) => -16\n```\n\n----------------------------------------\n\nTITLE: Retrieving NocoDB Application URL in Kubernetes\nDESCRIPTION: This snippet contains Helm chart templates and bash commands to determine and output the application URL for a NocoDB deployment in Kubernetes. It handles different scenarios based on ingress configuration and service types, including Ingress, NodePort, LoadBalancer, and ClusterIP.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/charts/nocodb/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"nocodb.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"nocodb.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"nocodb.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"nocodb.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Query Parameter Usage in NocoDB API\nDESCRIPTION: This snippet showcases examples of using various query parameters in NocoDB API calls, including comparison operators, logical operators, and special date-based operators.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation | Meaning | Example |\n|---|---|---|\n| eq | equal | (colName,eq,colValue) |\n| neq | not equal | (colName,neq,colValue) |\n| not | not equal (alias of neq) | (colName,not,colValue) |\n| gt | greater than | (colName,gt,colValue) |\n| ge | greater or equal | (colName,ge,colValue) |\n| lt | less than | (colName,lt,colValue) |\n| le | less or equal | (colName,le,colValue) |\n| is | is | (colName,is,true/false/null) |\n| isnot | is not | (colName,isnot,true/false/null) |\n| in | in | (colName,in,val1,val2,val3,val4) |\n| btw | between | (colName,btw,val1,val2) |\n| nbtw | not between | (colName,nbtw,val1,val2) |\n| like | like | (colName,like,%name) |\n| isWithin | is Within (Available in `Date` and `DateTime` only) | (colName,isWithin,sub_op) |\n| allof | includes all of | (colName,allof,val1,val2,...) |\n| anyof | includes any of | (colName,anyof,val1,val2,...) |\n| nallof | does not include all of (includes none or some, but not all of) | (colName,nallof,val1,val2,...) |\n| nanyof | does not include any of (includes none of) | (colName,nanyof,val1,val2,...)\n```\n\n----------------------------------------\n\nTITLE: Using MAX Function in Formula Fields\nDESCRIPTION: The MAX function identifies and returns the highest value from a set of numbers. It compares all input values and outputs the largest one.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nMAX(number1, [number2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nMAX(5, 10, 3) => 10\nMAX(-10, -5, -20) => -5\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Delete\nDESCRIPTION: Example of the JSON response structure sent by a webhook after a record is deleted. Contains information about the deleted record and the associated table and view details.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.delete\",\n  \"id\": \"e593079f-70e5-4965-8944-5ff7aeed005c\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_736wrpoas7tr0c\",\n    \"view_name\": \"Film\",\n    \"records\": [\n      {\n        \"FilmId\": 1010,\n        \"Title\": \"ALL-EDITED\",\n        \"Language\": {\n          \"LanguageId\": 1,\n          \"Name\": \"English\"\n        },\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Users in NocoDB\nDESCRIPTION: This snippet demonstrates how to add multiple users to a NocoDB project by separating email addresses with commas.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/230.team-and-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\n\nYou can add multiple comma (,) separated emails\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Using COUNTA Function in Formula Fields\nDESCRIPTION: The COUNTA function counts the number of non-empty arguments provided. It includes all values that are not empty, regardless of their type.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNTA(value1, [value2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNTA(1, \"\", \"text\") => 2\nCOUNTA(\"one\", \"two\", \"three\") => 3\n```\n\n----------------------------------------\n\nTITLE: HOUR Example Usage\nDESCRIPTION: Example showing how HOUR extracts the hour component from a datetime value.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nHOUR('2022-03-14 12:00:00') => 12\n```\n\n----------------------------------------\n\nTITLE: Defining NocoDB Component Naming Convention with Examples\nDESCRIPTION: Demonstrates the naming convention for NocoDB components where components start with the prefix '<N' to easily identify them and establish a single source of truth for documentation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/components/n/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<NSelect/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NocoDB API with API Token\nDESCRIPTION: Example of configuring the NocoDB API using an API Token for authentication.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/030.sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new Api({\n  baseURL: 'https://<HOST>:<PORT>',\n  headers: {\n    'xc-token': '<API_TOKEN>'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using INT Function in Formula Fields\nDESCRIPTION: The INT function truncates the decimal part of a number, returning only the integer portion. Unlike FLOOR, it simply removes decimal places without rounding.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nINT(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nINT(8.75) => 8\nINT(-15.25) => -15\n```\n\n----------------------------------------\n\nTITLE: Using YEAR Function in Formula Fields\nDESCRIPTION: Returns the year component as an integer from a date or datetime. The value is based on the server timezone (GMT by default), which may differ from the browser timezone.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nYEAR(date | datetime)\n```\n\n----------------------------------------\n\nTITLE: Deploying NocoDB Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication to GitHub Pages or similar hosting service.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Using COUNT Function in Formula Fields\nDESCRIPTION: The COUNT function calculates the number of numeric arguments provided, ignoring non-numeric values. It only counts values that can be interpreted as numbers.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNT(number1, [number2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNT(1, 2, \"abc\", 3) => 3\nCOUNT(-5, 0, \"$abc\", 5) => 3\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Field Format Examples\nDESCRIPTION: Examples of supported duration formats in NocoDB including hours, minutes, seconds, and milliseconds representations.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/070.date-time-based/040.duration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Format       | Example      |\n|--------------|------------|\n| HH:mm        | 14:20        |\n| HH:mm:ss     | 12:45:30     |\n| HH:mm:ss.s   | 12:45:30.5   |\n| HH:mm.ss.ss  | 12:45.30.50  |\n| HH:mm.ss.sss | 12:45.30.500 |\n```\n\n----------------------------------------\n\nTITLE: Using ADD Function in Formula Fields\nDESCRIPTION: The ADD function computes the sum of multiple numbers provided as arguments. It can accept two or more numeric values and return their total.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nADD(number1, [number2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nADD(5, 7) => 12\nADD(-10, 15, 20) => 25\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in TypeScript\nDESCRIPTION: Setup code for unit test initialization that prepares the test environment before each test execution. It initializes context, creates a project, and creates a table for testing.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet context;\n\nbeforeEach(async function () {\n  context = await init();\n\n  project = await createProject(context);\n  table = await createTable(context, project);\n});\n```\n\n----------------------------------------\n\nTITLE: Using LOWER Function for Lowercase Conversion\nDESCRIPTION: The LOWER function converts all characters in a string to lowercase. It takes a single text parameter and returns the transformed string with all characters in lowercase.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nLOWER(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nLOWER('User INPUT') => 'user input'\n```\n\n----------------------------------------\n\nTITLE: Using UPPER Function for Uppercase Conversion\nDESCRIPTION: The UPPER function converts all characters in a string to uppercase. It takes a single text parameter and returns the transformed string with all characters in uppercase.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nUPPER(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nUPPER('title') => 'TITLE'\n```\n\n----------------------------------------\n\nTITLE: Using VALUE Function in Formula Fields\nDESCRIPTION: The VALUE function extracts the numeric value from a string, handling special characters like '%' or '-' accordingly. It converts text representations of numbers into actual numeric values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nVALUE(text)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nVALUE(\"123$\") => 123\nVALUE(\"USD -45.67\") => -45.67\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Browser\nDESCRIPTION: Command to run all Playwright tests with the browser visible for debugging.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:debug\n```\n\n----------------------------------------\n\nTITLE: Aggregation Functions Table for NocoDB Rollup Fields\nDESCRIPTION: This markdown table lists all available aggregation functions for Rollup fields in NocoDB, including Count, Minimum, Maximum, Average, Sum, and their distinct variants.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/040.links-based/030.rollup.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Aggregation Function | Description                                             |\n|----------------------|---------------------------------------------------------|\n| Count                | Counts the number of records in a dataset.              |\n| Minimum              | Retrieves the minimum value from a dataset.             |\n| Maximum              | Retrieves the maximum value from a dataset.             |\n| Average              | Calculates the average value in a dataset.              |\n| Sum                  | Adds up all the values in a dataset.                    |\n| Count Distinct       | Counts the number of distinct values in a dataset.      |\n| Sum Distinct         | Adds up all the distinct values in a dataset.           |\n| Average Distinct     | Calculates the average of distinct values in a dataset. |\n```\n\n----------------------------------------\n\nTITLE: isWithin Sub-Operators for Date and DateTime in NocoDB API\nDESCRIPTION: This snippet shows the specific sub-operators used with the isWithin comparison operator for Date and DateTime columns in NocoDB API queries.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/020.rest-apis.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation        | Meaning                 | Example                                 |\n|------------------|-------------------------|-----------------------------------------|\n| pastWeek         | the past week           | (colName,isWithin,pastWeek)             |\n| pastMonth        | the past month          | (colName,isWithin,pastMonth)            |\n| pastYear         | the past year           | (colName,isWithin,pastYear)             |\n| nextWeek         | the next week           | (colName,isWithin,nextWeek)             |\n| nextMonth        | the next month          | (colName,isWithin,nextMonth)            |\n| nextYear         | the next year           | (colName,isWithin,nextYear)             |\n| nextNumberOfDays | the next number of days | (colName,isWithin,nextNumberOfDays,10)  |\n| pastNumberOfDays | the past number of days | (colName,isWithin,pastNumberOfDays,10)\n```\n\n----------------------------------------\n\nTITLE: Implementing ToolbarFilterPage Class for NocoDB Testing\nDESCRIPTION: JavaScript class definition for ToolbarFilterPage, representing the filter functionality within the toolbar for NocoDB tests.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ToolbarFilterPage extends BasePage {\n  readonly toolbar: ToolbarPage;\n\n  constructor(toolbar: ToolbarPage) {\n    super(toolbar.rootPage);\n    this.toolbar = toolbar;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Page with Embedded NocoDB Base\nDESCRIPTION: Complete HTML document structure showing how to embed a NocoDB base using an iframe within an application's HTML body. Includes viewport sizing and border removal.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/040.bases/060.share-base.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample iFrame Example</title>\n</head>\n<body style=\"height:100vh; margin:0\">\n<iframe src=\"http://localhost:3000/#/base/035c5207-501a-48b8-8dbe-67742b78323e\" width=\"100%\" height=\"100%\" style=\"border: none;\"></iframe>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using RECORD_ID Function in NocoDB Formula Fields\nDESCRIPTION: The RECORD_ID function returns the unique identifier of a record in NocoDB. This function takes no parameters and simply returns the ID value of the current record.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/060.generic-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRECORD_ID()\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRECORD_ID() => 1\n```\n\n----------------------------------------\n\nTITLE: Using MOD Function in Formula Fields\nDESCRIPTION: The MOD function calculates the remainder when dividing one number by another using integer division. It returns the residual value after dividing number1 by number2.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nMOD(number1, number2)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nMOD(10, 3) => 1\nMOD(-15, 4) => -3\n```\n\n----------------------------------------\n\nTITLE: Using POWER Function in Formula Fields\nDESCRIPTION: The POWER function raises a given base to a specified exponent. It calculates the value of base^exponent, with support for both positive and negative exponents.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nPOWER(base, exponent)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPOWER(2, 3) => 8\nPOWER(10, -2) => 0.01\n```\n\n----------------------------------------\n\nTITLE: Using RIGHT Function to Extract Last N Characters\nDESCRIPTION: The RIGHT function extracts a specified number of characters from the end of a string. It takes a text input and a count parameter indicating how many characters to retrieve from the right.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nRIGHT(text, n)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRIGHT('file_name.txt', 3) => 'txt'\n```\n\n----------------------------------------\n\nTITLE: Using AVG Function in Formula Fields\nDESCRIPTION: The AVG function calculates the arithmetic mean of a set of numerical values. It sums all the values and divides by the count of numbers.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAVG(number1, [number2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nAVG(10, 20, 30) => 20\nAVG(-5, 5) => 0\n```\n\n----------------------------------------\n\nTITLE: Using LOG Function in Formula Fields\nDESCRIPTION: The LOG function computes the logarithm of a number to a specified base, with the default base being 'e' (natural logarithm). It returns the exponent to which the base must be raised to produce the number.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nLOG([base], number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nLOG(10, 100) => 2\nLOG(2, 8) => 3\n```\n\n----------------------------------------\n\nTITLE: Using EVEN Function in Formula Fields\nDESCRIPTION: The EVEN function rounds positive values up to the nearest even number and negative values down to the nearest even number. It ensures the result is always an even integer.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nEVEN(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEVEN(7) => 8\nEVEN(-5) => -6\n```\n\n----------------------------------------\n\nTITLE: Using MIN Function in Formula Fields\nDESCRIPTION: The MIN function identifies and returns the lowest value from a set of numbers. It compares all input values and outputs the smallest one.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nMIN(number1, [number2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nMIN(5, 10, 3) => 3\nMIN(-10, -5, -20) => -20\n```\n\n----------------------------------------\n\nTITLE: Using ROUNDUP Function in Formula Fields\nDESCRIPTION: The ROUNDUP function rounds a number up to a specified number of decimal places (precision). The default precision is 0. It always rounds away from zero regardless of the sign.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nROUNDUP(number, [precision])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nROUNDUP(8.765, 2) => 8.77\nROUNDUP(-15.123, 1) => -15.1\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command Example for Timely Build\nDESCRIPTION: Example Docker command shown in PR comments for running timely builds of NocoDB. The tag format follows <NOCODB_CURRENT_VERSION>-pr-<PR_NUMBER>-<YYYYMMDD>-<HHMM>.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/060.builds-and-releases.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 nocodb/nocodb-timely:<version-tag>\n```\n\n----------------------------------------\n\nTITLE: Accessing Lookup Field Information in NocoDB\nDESCRIPTION: Lookup fields are read-only fields that display additional field information from related tables in NocoDB. They are primarily available for Belongs-to relational links in the hosted cloud version, while the OSS version supports lookup fields for all relational links.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/040.links-based/020.lookup.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Lookup` fields help bring additional field information from related table into the current table. This is useful when you want to display additional information about a record in a table. For example, if you have a table of `Orders` and a table of `Customers`, you can use a `Lookup` field to display the customer's name and address in the `Orders` table.\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Bulk Insert\nDESCRIPTION: Example of the JSON response structure sent by a webhook after multiple records are inserted in a bulk operation. Provides a count of records inserted rather than individual record details.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.bulkInsert\",\n  \"id\": \"f8397b06-a399-4a3a-b6b0-6d1c0c2f7578\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"GridView\",\n    \"records_inserted\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DATEADD Example Usage\nDESCRIPTION: Examples showing how to add different time periods to a date using DATEADD function. Demonstrates adding days, weeks, months, and years.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATEADD('2022-03-14', 1, 'day')     => 2022-03-15\nDATEADD('2022-03-14', 1, 'week')    => 2022-03-21\nDATEADD('2022-03-14', 1, 'month')   => 2022-04-14\nDATEADD('2022-03-14', 1, 'year')    => 2023-03-14\n```\n\n----------------------------------------\n\nTITLE: Numeric Functions in NocoDB Formulas\nDESCRIPTION: Table of numeric functions available in NocoDB formulas, including their syntax and usage examples.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Syntax                     | Sample                           | Output                                                           |\n|-------------|----------------------------|----------------------------------|------------------------------------------------------------------|\n| **ABS**     | `ABS(value)`               | `ABS({Column})`                    | Absolute value of the input parameter                            |\n| **ADD**     | `ADD(value1,[value2,...])` | `ADD({Column1}, {Column2})`          | Sum of input parameters                                          |\n| **AVG**     | `AVG(value1,[value2,...])` | `AVG({Column1}, {Column2})`          | Average of input parameters                                      |\n| **CEILING** | `CEILING(value)`           | `CEILING({Column})`                | Rounded next largest integer value of input parameter            |\n| **EXP**     | `EXP(value)`               | `EXP({Column})`                    | Exponential value of input parameter (`e^x`)                     |\n| **FLOOR**   | `FLOOR(value)`             | `FLOOR({Column})`                  | Rounded largest integer less than or equal to input parameter    |\n| **INT**     | `INT(value)`               | `INT({Column})`                    | Integer value of input parameter                                 |\n| **LOG**     | `LOG([base], value)`       | `LOG(10, {Column})`                | Logarithm of input parameter to the base (default = e) specified |\n| **MAX**     | `MAX(value1,[value2,...])` | `MAX({Column1}, {Column2}, {Column3})` | Maximum value amongst input parameters                           |\n| **MIN**     | `MIN(value1,[value2,...])` | `MIN({Column1}, {Column2}, {Column3})` | Minimum value amongst input parameters                           |\n| **MOD**     | `MOD(value1, value2)`      | `MOD({Column}, 2)`                 | Remainder after integer division of input parameters             |\n| **POWER**   | `POWER(base, exponent)`    | `POWER({Column}, 3)`               | `base` to the `exponent` power, as in `base ^ exponent`            |\n| **ROUND**   | `ROUND(value, precision)`  | `ROUND({Column}, 3)`                  | Round input `value` to decimal place specified by `precision` (Nearest integer if `precision` not provided) |\n| **SQRT**    | `SQRT(value)`              | `SQRT({Column})`                   | Square root of the input parameter                               |\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service for NocoDB\nDESCRIPTION: AWS CLI command to create an ECS service for running NocoDB, specifying cluster, task definition, networking, and load balancer configurations.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-service \\\n--cluster <YOUR_ECS_CLUSTER> \\\n--service-name  <YOUR_SERVICE_NAME> \\\n--task-definition <YOUR_TASK_DEF>:<YOUR_TASK_DEF_VERSION> \\\n--desired-count <DESIRED_COUNT> \\\n--launch-type \"FARGATE\" \\\n--platform-version <VERSION> \\\n--health-check-grace-period-seconds <GRACE_PERIOD_IN_SECOND> \\\n--network-configuration \"awsvpcConfiguration={subnets=[\\\"<YOUR_SUBSETS>\\\"], securityGroups=[\\\"<YOUR_SECURITY_GROUPS>\\\"], assignPublicIp=ENABLED}\" \\\n--load-balancer targetGroupArn=<TARGET_GROUP_ARN>,containerName=<CONTAINER_NAME>,containerPort=<YOUR_CONTAINER_PORT>\n```\n\n----------------------------------------\n\nTITLE: Creating Headings in Rich Text Field with Markdown\nDESCRIPTION: Shows how to create different levels of headings in a Rich Text field using Markdown syntax with the hash (#) symbol. The number of hash symbols determines the heading level and size.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Heading 1\n## Heading 2\n### Heading 3\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB Unit Tests\nDESCRIPTION: Command to execute the unit tests for NocoDB project.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Lookup Field Limitations in NocoDB\nDESCRIPTION: Important limitations to understand when working with Lookup fields in NocoDB. These include their read-only nature and the availability differences between cloud and OSS versions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/040.links-based/020.lookup.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n- Lookup fields are read-only. You cannot edit the values in a lookup field.\n- Lookup fields are available only for `Belongs-to` relational links in hosted cloud version. The additional processing complexity for `Has-many` and `Many-to-many` relational links outweighs the benefits of having lookup fields for these links. OSS will continue to support lookup fields for all relational links.\n:::\n```\n\n----------------------------------------\n\nTITLE: Creating Playwright Test Suite\nDESCRIPTION: Example of creating a test suite for filter functionality using Playwright\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport setup, { NcContext } from '../setup';\n\ntest.describe('Filter', () => {\n  let context: NcContext;\n\n  test.beforeEach(async ({ page }) => {\n    context = await setup({ page });\n  })\n\n  test('should filter', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using HOUR Function in Formula Fields\nDESCRIPTION: Returns the hour of the day as an integer between 0 and 23 based on 24-hour clock. The value is based on the server timezone (GMT by default), which may differ from the browser timezone.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nHOUR(datetime)\n```\n\n----------------------------------------\n\nTITLE: Markdown Database Type Support Table - JSON\nDESCRIPTION: Table showing JSON type support across different database systems, including native JSON support and text alternatives.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/040.column-types.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Database| Types|\n|-----|----------|\n|**MySQL**|json|\n|**PostgreSQL**|json|\n|**SQL Server**|text, ntext|\n|**SQLite**|text|\n```\n\n----------------------------------------\n\nTITLE: Supported Barcode Types\nDESCRIPTION: List of barcode formats supported by NocoDB for barcode field type.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/050.barcode.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- CODE128 \n- EAN-13\n- EAN-8\n- EAN-5\n- EAN-2\n- UPC (A)\n- CODE39\n- ITF-14\n- MSI\n- Pharma code\n- Coda bar\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Log Group\nDESCRIPTION: Command to create a CloudWatch log group for container logs\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws logs create-log-group --log-group-name /ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for JSON Field Type\nDESCRIPTION: Documentation explaining how to create a JSON field type in NocoDB and its display behavior. It provides step-by-step instructions for field creation and describes how JSON data is displayed in cells.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/080.json.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'JSON'\ntags: ['Fields', 'Field types', 'Custom types', 'JSON']\n---\n\n\n`JSON` is a custom field type that allows you to store JSON data in a field. Useful for storing data that can be represented as a JSON object, like API Response, or a set of key-value pairs.\n\n## Create a JSON field\n1. Click on `+` icon to the right of `Fields header`\n2. On the dropdown modal, enter the field name (Optional).\n3. Select the field type as `JSON` from the dropdown.\n4. Configure default value for the field (Optional)\n5. Click on `Save Field` button.\n\n![image](/img/v2/fields/types/JSON.png)\n\n### Cell display\nCell displays the JSON data stored in the field. Click on expand record icon to open the JSON data in an editor modal.\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Filter Action\nDESCRIPTION: Example of implementing a reset filter action method in a Playwright page object\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync resetFilter() {\n  await this.waitForResponse({\n    uiAction: async () => await this.get().locator('.nc-filter-item-remove-btn').click(),\n    httpMethodsToMatch: ['DELETE'],\n    requestUrlPathToMatch: '/api/v1/db/meta/filters/',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using WEEKDAY Function in Formula Fields\nDESCRIPTION: Returns the day of the week as an integer between 0 and 6, with Monday as the default start (0). The start day of the week can be optionally changed.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nWEEKDAY(date, [startDayOfWeek])\n```\n\n----------------------------------------\n\nTITLE: Displaying Base Information in NocoDB\nDESCRIPTION: This snippet shows the output of the 'Copy Base Info' function in NocoDB, which provides details about the Node version, architecture, platform, Docker status, root database, and package version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/990.FAQs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNode: **v20.15.1**\nArch: **x64**\nPlatform: **linux**\nDocker: **true**\nRootDB: **pg**\nPackageVersion: **0.258.2**\n```\n\n----------------------------------------\n\nTITLE: Supported QR Code Source Fields\nDESCRIPTION: List of field types that can be used as source for generating QR codes\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/040.QR-code.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Formula\n* Single Line Text\n* Long Text\n* Phone Number\n* URL\n* Email\n```\n\n----------------------------------------\n\nTITLE: Creating Task Lists in Rich Text Field\nDESCRIPTION: Demonstrates how to create task lists with checkboxes in a Rich Text field using square brackets. Empty brackets [ ] create unchecked items, while [x] creates checked items.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[ ] Item 1\n[x] Item 2\n```\n\n----------------------------------------\n\nTITLE: NOW Conditional Example\nDESCRIPTION: Example showing how NOW can be used in conditional expressions to compare with another date field. This checks if the current date is before a specified date.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nIF(NOW() < date, \"true\", \"false\") => If the current date is less than the specified date, it returns true. Otherwise, it returns false.\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on MacOS (arm64)\nDESCRIPTION: Curl command to download and install NocoDB binary for MacOS arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/macos-arm64 -o nocodb -L && chmod +x nocodb && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Embedding NocoDB Base Using HTML iframe\nDESCRIPTION: Example of an HTML iframe element for embedding a NocoDB base interface into another application. The iframe includes standard attributes for dimensions, border styling, and source URL.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/040.bases/060.share-base.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    class=\"nc-embed\"\n    src=\"https://nocodb-nocodb-rsyir.ondigitalocean.app/dashboard/#/nc/base/e3bba9df-4fc1-4d11-b7ce-41c4a3ad6810?embed\"\n    frameBorder=\"0\"\n    width=\"100%\"\n    height=\"700\"\n    style=\"background: transparent; border: 1px solid #ddd\"\n>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Basic NocoDB Iframe Embedding Example\nDESCRIPTION: Example HTML iframe code for embedding a NocoDB base interface into another application. Demonstrates the basic structure with default styling and dimensions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/120.collaboration/030.share-base.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n        class=\"nc-embed\"\n        src=\"https://nocodb-nocodb-rsyir.ondigitalocean.app/dashboard/#/nc/base/e3bba9df-4fc1-4d11-b7ce-41c4a3ad6810?embed\"\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"700\"\n        style=\"background: transparent; border: 1px solid #ddd\"\n>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Using COUNTALL Function in Formula Fields\nDESCRIPTION: The COUNTALL function calculates the total number of arguments, including both numeric and non-numeric values. It counts all arguments regardless of their content or type.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNTALL(value1, [value2, ...])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCOUNTALL(1, \"\", \"text\") => 3\nCOUNTALL(\"one\", \"two\", \"three\") => 3\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddable HTML Iframe for NocoDB Base\nDESCRIPTION: This HTML snippet demonstrates how to create an iframe for embedding a NocoDB base into another web application. It includes attributes for styling and sizing the embedded interface.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/130.share-base.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    class=\"nc-embed\"\n    src=\"https://nocodb-nocodb-rsyir.ondigitalocean.app/dashboard/#/nc/base/e3bba9df-4fc1-4d11-b7ce-41c4a3ad6810?embed\"\n    frameBorder=\"0\"\n    width=\"100%\"\n    height=\"700\"\n    style=\"background: transparent; border: 1px solid #ddd\"\n>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Image for Google Container Registry\nDESCRIPTION: This command tags the NocoDB Docker image for use with Google Container Registry (GCR). Replace <MY_PROJECT_ID> with your actual Google Cloud project ID.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/080.gcp-cloud-run.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag nocodb/nocodb:latest gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on Linux (arm64)\nDESCRIPTION: Curl command to download and install NocoDB binary for Linux arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/linux-arm64 -o nocodb -L && chmod +x nocodb && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Page with NocoDB Iframe Integration\nDESCRIPTION: Full HTML document example showing how to integrate a NocoDB base iframe into an application's HTML body structure.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/120.collaboration/030.share-base.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<body>\n<iframe\n        class=\"nc-embed\"\n        src=\"http://localhost:3000/#/nc/base/7d4b551c-b5e0-41c9-a87b-f3984c21d2c7?embed\"\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"700\"\n        style=\"background: transparent; \"\n></iframe>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Embedding NocoDB Iframe in HTML Document\nDESCRIPTION: This HTML document shows how to incorporate the NocoDB iframe into a basic HTML structure. It demonstrates the placement of the iframe within the body of an HTML page.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/130.share-base.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <body>\n        <iframe\n            class=\"nc-embed\"\n            src=\"http://localhost:3000/#/nc/base/7d4b551c-b5e0-41c9-a87b-f3984c21d2c7?embed\"\n            frameBorder=\"0\"\n            width=\"100%\"\n            height=\"700\"\n            style=\"background: transparent; \"\n        ></iframe>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using EXP Function in Formula Fields\nDESCRIPTION: The EXP function returns the mathematical constant 'e' (approximately 2.71828) raised to the power of a given number. It calculates exponential values with base e.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nEXP(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEXP(2) => 7.38905609893065\nEXP(-1) => 0.36787944117144233\n```\n\n----------------------------------------\n\nTITLE: Mapping JSON Path for i18n in TypeScript\nDESCRIPTION: Map the JSON path for the new language in the a.i18n.ts file located in the nc-gui/plugins directory.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/070.translation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/nc-gui/plugins/a.i18n.ts\n```\n\n----------------------------------------\n\nTITLE: Pulling NocoDB Docker Image\nDESCRIPTION: This command pulls the latest NocoDB Docker image from Docker Hub.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/080.gcp-cloud-run.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Containers for NocoDB Upgrade\nDESCRIPTION: Commands to find, stop and delete existing NocoDB Docker container. These steps are necessary before upgrading to a new version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# find NocoDB container ID\ndocker ps\n# stop NocoDB container\ndocker stop <YOUR_CONTAINER_ID>\n# delete NocoDB container\ndocker rm <YOUR_CONTAINER_ID>\n```\n\n----------------------------------------\n\nTITLE: Updating Language Array in Playwright Test\nDESCRIPTION: Add the new language to the array in the language.spec.ts file for Playwright tests.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/070.translation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// tests/playwright/tests/language.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Using MONTH Function in Formula Fields\nDESCRIPTION: Returns the month of the year as an integer between 1 and 12. The value is based on the server timezone (GMT by default), which may differ from the browser timezone.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nMONTH(date | datetime)\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Example - Where Condition\nDESCRIPTION: Example of a complex where condition using comparison and logical operators in NocoDB API\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/005.overview.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(colName,eq,colValue)~or(colName2,gt,colValue2)\n```\n\n----------------------------------------\n\nTITLE: NOW Example Usage\nDESCRIPTION: Sample usage of the NOW function showing that it returns the current date and time when executed.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nNOW() => 2022-05-19 17:20:43 (current date & time)\n```\n\n----------------------------------------\n\nTITLE: Updating Language Enumeration in TypeScript\nDESCRIPTION: Update the language enumeration in the enums.ts file located in the nc-gui/lib directory.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/070.translation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/nc-gui/lib/enums.ts\n```\n\n----------------------------------------\n\nTITLE: Adding NocoDB Tap to Homebrew\nDESCRIPTION: Command to add the NocoDB tap to Homebrew, which is required before installing the package.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/040.home-brew.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap nocodb/nocodb\n```\n\n----------------------------------------\n\nTITLE: Upgrading NocoDB via Homebrew\nDESCRIPTION: Commands to upgrade NocoDB using Homebrew package manager by updating local formulas and upgrading the package.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Update the local homebrew formulas\nbrew update\n# Upgrade nocodb package\nbrew upgrade nocodb\n```\n\n----------------------------------------\n\nTITLE: HTML Iframe Embed - YouTube Video\nDESCRIPTION: HTML iframe code for embedding a YouTube video demonstrating the comments feature in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/080.records/030.expand-record.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<center>\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U5ZYVlpOGN8?start=12\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></iframe>\n</center>\n```\n\n----------------------------------------\n\nTITLE: DATEADD Conditional Example\nDESCRIPTION: Example showing how DATEADD can be used in conditional expressions to compare dates. This checks if the current date is within 10 days of a specified date.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nIF(NOW() < DATEADD(date, 10, 'day'), \"true\", \"false\") => If the current date is less than the specified date plus 10 days, it returns true. Otherwise, it returns false.\n```\n\n----------------------------------------\n\nTITLE: Making an API Call to Create a Table in NocoDB\nDESCRIPTION: Example of calling the NocoDB API to create a new table in a project.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/030.sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait api.dbTable.create(params)\n```\n\n----------------------------------------\n\nTITLE: WEEKDAY Example Usage\nDESCRIPTION: Examples showing how to use WEEKDAY function with different start days of the week. By default, Monday is 0, but this can be changed by specifying a start day.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nWEEKDAY(NOW()) => If today is Monday, it returns 0.\nWEEKDAY(NOW(), \"sunday\") => If today is Monday, it returns 1.\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Docker and SQLite\nDESCRIPTION: Docker command to run NocoDB with SQLite as the database. It mounts a local volume for data persistence and exposes port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name noco \\\n  -v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n  -p 8080:8080 \\\n  nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager on Linux/MacOS\nDESCRIPTION: Command to install the Nix package manager using the Determinate Systems installer, which is needed to run NocoDB on non-NixOS systems.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install\n```\n\n----------------------------------------\n\nTITLE: Stopping NocoDB Services\nDESCRIPTION: Command to stop all NocoDB and related services started with Docker Compose.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Defining Expanded Form Keyboard Shortcuts in Markdown\nDESCRIPTION: This snippet defines the keyboard shortcut for saving the current expanded form item in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/150.keyboard-maneuver.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|         Key | Behaviour                      |\n|------------:|:-------------------------------|\n| `⌘` `Enter` | Save current expanded form item |\n```\n\n----------------------------------------\n\nTITLE: DATESTR Example Usage\nDESCRIPTION: Examples showing how DATESTR formats both date and datetime values into a standard date string format, ignoring any time components.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/040.date-functions.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nDATESTR('2022-03-14') => 2022-03-14\nDATESTR('2022-03-14 12:00:00') => 2022-03-14\n```\n\n----------------------------------------\n\nTITLE: Discord Webhook with Custom Field Data\nDESCRIPTION: Example of how to send only specific field data to Discord using handlebar syntax. This example extracts and sends only the Title field from the first row in the event data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"content\": \"{{ event.data.rows.[0].Title }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service\nDESCRIPTION: Command to create an ECS service with Fargate launch type, including load balancer and networking configuration\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-service \\\n    --cluster <YOUR_ECS_CLUSTER> \\\n    --service-name  <YOUR_SERVICE_NAME> \\\n    --task-definition <YOUR_TASK_DEF>:<YOUR_TASK_DEF_VERSION> \\\n    --desired-count <DESIRED_COUNT> \\\n    --launch-type \"FARGATE\" \\\n    --platform-version <VERSION> \\\n    --health-check-grace-period-seconds <GRACE_PERIOD_IN_SECOND> \\\n    --network-configuration \"awsvpcConfiguration={subnets=[\\\"<YOUR_SUBSETS>\\\"], securityGroups=[\\\"<YOUR_SECURITY_GROUPS>\\\"], assignPublicIp=ENABLED}\" \\\n    --load-balancer targetGroupArn=<TARGET_GROUP_ARN>,containerName=<CONTAINER_NAME>,containerPort=<YOUR_CONTAINER_PORT>\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB with Nix on Linux/MacOS\nDESCRIPTION: Command to run NocoDB directly using Nix after installation, applicable on any system with Nix installed.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:nocodb/nocodb\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Bulk Insert Event in NocoDB\nDESCRIPTION: This code snippet shows the structure of a webhook response after multiple records are inserted in NocoDB. It includes the number of records inserted.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.bulkInsert\",\n  \"id\": \"f8397b06-a399-4a3a-b6b0-6d1c0c2f7578\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"GridView\",\n    \"records_inserted\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Title and Description Block\nDESCRIPTION: Frontmatter section defining the title and description of the documentation page.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/160.views.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Views'\ndescription: 'Understanding Views in NocoDB!'\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing OR Logical Operator in Markdown\nDESCRIPTION: The OR function is a logical operator that returns TRUE if at least one of its conditions is true. It can use comparison operators like ==, !=, >, <, >=, <=.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/050.conditional-expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nOR(expr1, [expr2,...])\n```\n\nLANGUAGE: markdown\nCODE:\n```\nOR({field} > 2, {field} < 10)\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Lists in Rich Text Field\nDESCRIPTION: Demonstrates different ways to create unordered (bullet) lists in a Rich Text field using hyphens (-), plus signs (+), or asterisks (*) as list item markers.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Item 1\n- Item 2\n\n+ Item 1\n+ Item 2\n\n* Item 1\n* Item 2\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Cluster with AWS CLI\nDESCRIPTION: Command to create a new ECS cluster using AWS CLI\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-cluster --cluster-name <YOUR_ECS_CLUSTER>\n```\n\n----------------------------------------\n\nTITLE: Upgrading NocoDB Node Package\nDESCRIPTION: Commands to update NocoDB Node.js package by uninstalling the existing version and installing the latest one.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall nocodb\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save nocodb\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Logs\nDESCRIPTION: Command to check logs for troubleshooting purposes in Docker Compose.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose logs\n```\n\n----------------------------------------\n\nTITLE: Configuring NocoDB API with Auth Token\nDESCRIPTION: Example of configuring the NocoDB API using an Auth Token for authentication.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/030.sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new Api({\n  baseURL: 'https://<HOST>:<PORT>',\n  headers: {\n    'xc-auth': '<AUTH_TOKEN>'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: ECS Task Definition Configuration\nDESCRIPTION: JSON configuration for ECS task definition including container specifications, networking, logging, and resource allocations\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"family\": \"nocodb-sample-task-def\",\n    \"networkMode\": \"awsvpc\",\n    \"containerDefinitions\": [\n    {\n        \"name\": \"<YOUR_CONTAINER_NAME>\",\n        \"image\": \"nocodb/nocodb:latest\",\n        \"essential\": true,\n        \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n            \"awslogs-group\": \"/ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>\",\n            \"awslogs-region\": \"<YOUR_AWS_REGION>\",\n            \"awslogs-stream-prefix\": \"ecs\"\n        }\n    },\n     \"secrets\": [\n    {\n        \"name\": \"<YOUR_SECRETS_NAME>\",\n        \"valueFrom\": \"<YOUR_SECRET_ARN>\"\n    }\n    ],\n    \"environment\": [\n        {\n            \"name\": \"<YOUR_ENV_VARIABLE_NAME>\",\n            \"value\": \"<YOUR_ENV_VARIABLE_VALUE>\"\n        }\n    ],\n    \"portMappings\": [\n        {\n            \"containerPort\": 8080,\n            \"hostPort\": 8080,\n            \"protocol\": \"tcp\"\n        }\n    ]\n}\n],\n\"requiresCompatibilities\": [\n    \"FARGATE\"\n],\n\"cpu\": \"256\",\n\"memory\": \"512\",\n\"executionRoleArn\": \"<YOUR_ECS_EXECUTION_ROLE_ARN>\",\n\"taskRoleArn\": \"<YOUR_ECS_TASK_ROLE_ARN>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Rich Text Field\nDESCRIPTION: Shows how to format text as a code block in a Rich Text field by enclosing the text with three backticks (```) before and after the code.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nThis is a code block\n```\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB Docker Container with SQLite\nDESCRIPTION: Docker command to run NocoDB with SQLite database, mounting a local volume for data persistence.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Cloning NocoDB Repository\nDESCRIPTION: Command to clone the NocoDB repository from GitHub, which is the first step in the installation process.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to check if the NocoDB Docker container is running. This is useful for troubleshooting when you can't access NocoDB after installation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/020.docker-install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Address and Location Data CSV Format\nDESCRIPTION: CSV data structure containing address fields, geographic coordinates, and demographic counts. Includes postal codes, phone numbers, and JSON-formatted location coordinates.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/playwright/fixtures/expectedData.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nAddress,District,PostalCode,Phone,Location,Customers,Staffs,City\n1661 Abha Drive,Tamil Nadu,14400,270456873752,{\"x\":78.8214191,\"y\":10.3812871},1,0,Pudukkottai\n1993 Tabuk Lane,Tamil Nadu,64221,648482415405,{\"x\":80.1270701,\"y\":12.9246028},1,0,Tambaram\n381 Kabul Way,Taipei,87272,55477302294,{\"x\":0,\"y\":0},1,0,Hsichuh\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB SDK via npm\nDESCRIPTION: Command to install the NocoDB SDK using npm package manager.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/030.sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nocodb-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Docker and PostgreSQL\nDESCRIPTION: Docker command to run NocoDB with PostgreSQL as the database. It includes environment variables for database connection and JWT secret.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name noco \\\n  -v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n  -p 8080:8080 \\\n  -e NC_DB=\"pg://host.docker.internal:5432?u=root&p=password&d=d1\" \\\n  -e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\n  nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: String Functions in NocoDB Formulas\nDESCRIPTION: Table of string functions available in NocoDB formulas, including their syntax and usage examples.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Syntax                           | Sample                          | Output                                                                    |\n|-------------|----------------------------------|---------------------------------|---------------------------------------------------------------------------|\n| **CONCAT**  | `CONCAT(str1, [str2,...])`       | `CONCAT({Column1}, ' ', {Column2})`     | Concatenated string of input parameters                                   |\n| **LEFT**    | `LEFT(str1, n)`         | `LEFT({Column}, 3)`               | `n` characters from the beginning of input parameter                      |\n| **LEN**     | `LEN(str)`                       | `LEN({Column})`                    | Input parameter character length                                          |\n| **LOWER**   | `LOWER(str)`                     | `LOWER({Column})`                  | Lower case converted string of input parameter                            |\n| **MID**     | `MID(str, position, [count])`  | `MID({Column}, 3, 2)`             | Alias for `SUBSTR`                                                        |\n| **REPEAT**  | `REPEAT(str, count)`             | `REPEAT({Column}, 2)`             | Specified copies of the input parameter string concatenated together      |\n| **REPLACE** | `REPLACE(str, srchStr, rplcStr)` | `REPLACE({Column}, 'int', 'num')` | String, after replacing all occurrences of `srchStr` with `rplcStr`       |\n| **RIGHT**   | `RIGHT(str, n)`              | `RIGHT({Column}, 3)`              | `n` characters from the end of input parameter                            |\n| **SEARCH**  | `SEARCH(str, srchStr)`           | `SEARCH({Column}, 'str')`         | Index of `srchStr` specified if found, 0 otherwise                        |\n| **SUBSTR**  | `SUBTR(str, position, [count])`  | `SUBSTR({Column}, 3, 2)`          | Substring of length 'count' of input string, from the postition specified |\n| **TRIM**    | `TRIM(str)`                      | `TRIM({Column})`                   | Remove trailing and leading whitespaces from input parameter              |\n| **UPPER**   | `UPPER(str)`                     | `UPPER({Column})`                  | Upper case converted string of input parameter                            |\n| **URL**     | `URL(str)`                       | `URL({Column})`                   | Convert to a hyperlink if it is a valid URL                               |\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB with Docker Compose and PostgreSQL\nDESCRIPTION: Commands to clone the NocoDB repository and start NocoDB using Docker Compose with PostgreSQL database.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb\n# for PostgreSQL\ncd nocodb/docker-compose/2_pg\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on Linux (x64)\nDESCRIPTION: Curl command to download and install NocoDB binary for Linux x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/linux-x64 -o nocodb -L && chmod +x nocodb && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Writing a NocoDB Unit Test Case\nDESCRIPTION: Example of writing a unit test case for getting a table list, using supertest for HTTP requests and chai for assertions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nit('Get table list', async function () {\n  const response = await request(context.app)\n    .get(`/api/v1/db/meta/projects/${project.id}/tables`)\n    .set('xc-auth', context.token)\n    .send({})\n    .expect(200);\n\n  expect(response.body.list).to.be.an('array').not.empty;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Formula Column in NocoDB\nDESCRIPTION: Steps to add a new formula column in NocoDB, including naming the column, selecting the 'Formula' type, and inserting the required formula.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/090.formulas.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### 1. Click on '+' (Add column)\n\n### 2. Populate column Name\n\n### 3. Select column Type as 'Formula'\n\n### 4. Insert required formula\n\n- You can use explicit numerical values/ strings as needed, e.g. `123` (numeric) or `\"123\"` (string).\n- You can reference column names in equation with `{}`, e.g. `{column_name}`, if the column name conflicts with literals\n- Table below lists supported formula & associated syntax\n- Nested formula (formula equation referring to another formula column) is supported\n\n### 5. Click on 'Save'\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Docker for Postgres\nDESCRIPTION: Docker command to run NocoDB with Postgres database. Sets environment variables for database connection and JWT secret.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb-postgres \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\n-e NC_DB=\"pg://host.docker.internal:5432?u=root&p=password&d=d1\" \\\n-e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Google Container Registry\nDESCRIPTION: This command pushes the tagged NocoDB Docker image to Google Container Registry (GCR). Replace <MY_PROJECT_ID> with your actual Google Cloud project ID.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/080.gcp-cloud-run.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker push gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Docker for SQLite\nDESCRIPTION: Docker command to run NocoDB with SQLite database. Mounts a volume for data persistence and exposes port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nocodb \\\n-v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n-p 8080:8080 \\\nnocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on Linux (x64)\nDESCRIPTION: Commands to download and run the NocoDB executable for Linux x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/linux-x64 -o nocodb -L \\\n  && chmod +x nocodb \\\n  && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Seeding Sample Database for NocoDB Unit Tests\nDESCRIPTION: Example of seeding a sample database (Sakila) for use in unit tests, including creating a project and retrieving a specific table.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tableTest() {\n  let context;\n  let sakilaProject: Project;\n  let customerTable: Model;\n\n  beforeEach(async function () {\n    context = await init();\n    \n    /******* Start : Seeding sample database **********/\n    sakilaProject = await createSakilaProject(context);\n    /******* End : Seeding sample database **********/\n    \n    customerTable = await getTable({project: sakilaProject, name: 'customer'})\n  });\n\n  it('Get table data list', async function () {\n    const response = await request(context.app)\n      .get(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}`)\n      .set('xc-auth', context.token)\n      .send({})\n      .expect(200);\n\n    expect(response.body.list[0]['FirstName']).to.equal('MARY');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data Dump in NocoDB Webhooks using Handlebars\nDESCRIPTION: Handlebars syntax to dump complete data and user information in JSON format for NocoDB webhooks.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/040.webhooks.md#2025-04-22_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ json data }}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Latest NocoDB Image\nDESCRIPTION: Command to pull and run the latest NocoDB Docker image with environment variables for database configuration and JWT authentication.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/030.upgrading.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 \\\n    -e NC_DB=\"<YOUR_NC_DB_URL>\" \\\n    -e NC_AUTH_JWT_SECRET=\"<YOUR_NC_AUTH_JWT_SECRET_IF_GIVEN>\" \\\n    nocodb/nocodb:latest\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Homebrew\nDESCRIPTION: Command to install NocoDB using Homebrew after adding the tap.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/040.home-brew.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install nocodb\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Docker Compose for Postgres\nDESCRIPTION: Commands to clone the NocoDB repository and start the Postgres-based Docker Compose setup.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb\ncd nocodb/docker-compose/pg\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Homebrew\nDESCRIPTION: Commands to install and run NocoDB using Homebrew package manager.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap nocodb/nocodb\nbrew install nocodb\nnocodb\n```\n\n----------------------------------------\n\nTITLE: Configuring NocoDB Export-Import Settings in JSON\nDESCRIPTION: Configuration file that specifies source and destination projects, base URL, and authentication token for NocoDB export-import operations.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/tests/export-import/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"srcProject\": \"sample\",\n    \"dstProject\": \"sample-copy\",\n    \"baseURL\": \"http://localhost:8080\",\n    \"xc-auth\": \"Copy Auth Token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Shell/cURL\nDESCRIPTION: Example of making an authenticated GET request to NocoDB's customer view endpoint using cURL. Includes authentication token and query parameters for pagination.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/065.table-details/table-details-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url 'http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=' \\\n  --header 'xc-auth: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB Auto-Upstall Installation Command\nDESCRIPTION: Command to initiate the NocoDB auto-upstall process. This command downloads and executes the installation script, leading to an interactive setup process where users can configure domain, SSL, and other advanced options.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/010.auto-upstall.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL http://install.nocodb.com/noco.sh) <(mktemp)\n```\n\n----------------------------------------\n\nTITLE: Updating NocoDB to Latest Version\nDESCRIPTION: Command to upgrade an existing NocoDB installation to the latest version using Homebrew.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/040.home-brew.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew upgrade nocodb\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on MacOS (arm64)\nDESCRIPTION: Commands to download and run the NocoDB executable for MacOS arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/macos-arm64 -o nocodb -L \\\n  && chmod +x nocodb \\\n  && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Creating Log Group for NocoDB on AWS ECS\nDESCRIPTION: AWS CLI command to create a log group for NocoDB container logs.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naws logs create-log-group \\\n--log-group-name /ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Executing NocoDB Schema Export Command\nDESCRIPTION: Terminal commands to navigate to the export-import directory and execute the schema export script.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/tests/export-import/ReadMe.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/nocodb/tests/export-import\nnode exportSchema.js\n```\n\n----------------------------------------\n\nTITLE: UI Navigation Element\nDESCRIPTION: Interface element for switching between Data and Details views in the top navigation bar.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/065.table-details/table-details-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nData-Details\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets in NocoDB Using Named Parameters in Bash\nDESCRIPTION: Command to update a secret in NocoDB using named parameters. Requires the database connection string and both the previous and new secret values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/100.data-sources/050.updating-secret.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNC_DB=\"pg://host:port?u=user&p=password&d=database\" nc-secret-mgr update --prev <previous-secret> --new <new-secret>\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Images for NocoDB Upgrade\nDESCRIPTION: Commands to locate and remove existing NocoDB Docker image to prepare for upgrading to the latest version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/030.upgrading.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# find NocoDB image\ndocker images\n# delete NocoDB image\ndocker rmi <YOUR_IMAGE_ID>\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB as a Node.js Application\nDESCRIPTION: Commands to clone the NocoDB seed repository, install dependencies, and start the application.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb-seed\ncd nocodb-seed\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Task Definition for NocoDB\nDESCRIPTION: AWS CLI command to register an ECS task definition for NocoDB deployment.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naws ecs register-task-definition \\\n--cli-input-json \"file://./<YOUR_TASK_DEF_NAME>.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Task Definition\nDESCRIPTION: Command to register a new ECS task definition\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws ecs register-task-definition --cli-input-json file://task-definition.json\n```\n\n----------------------------------------\n\nTITLE: Table Path Reference in NocoDB\nDESCRIPTION: Reference path for accessing table details functionality within NocoDB interface.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/065.table-details/table-details-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nTable Details\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets in NocoDB Using Executable in Bash\nDESCRIPTION: Command to update a secret in NocoDB using the nc-secret-mgr executable file instead of the npm package. This approach requires downloading the executable first.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/100.data-sources/050.updating-secret.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNC_DB=\"pg://host:port?u=user&p=password&d=database\" ./nc-secret-mgr-macos-arm64 update --prev <previous-secret> --new <new-secret>\n```\n\n----------------------------------------\n\nTITLE: Sample ECS Task Definition for NocoDB\nDESCRIPTION: JSON configuration for an ECS task definition to deploy NocoDB, including container specifications, logging, secrets, and environment variables.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"family\": \"nocodb-sample-task-def\",\n  \"networkMode\": \"awsvpc\",\n  \"containerDefinitions\": [{\n    \"name\": \"<YOUR_CONTAINER_NAME>\",\n    \"image\": \"nocodb/nocodb:latest\",\n    \"essential\": true,\n    \"logConfiguration\": {\n      \"logDriver\": \"awslogs\",\n      \"options\": {\n        \"awslogs-group\": \"/ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>\",\n        \"awslogs-region\": \"<YOUR_AWS_REGION>\",\n        \"awslogs-stream-prefix\": \"ecs\"\n      }\n    },\n    \"secrets\": [{\n      \"name\": \"<YOUR_SECRETS_NAME>\",\n      \"valueFrom\": \"<YOUR_SECRET_ARN>\"\n    }],\n    \"environment\": [{\n      \"name\": \"<YOUR_ENV_VARIABLE_NAME>\",\n      \"value\": \"<YOUR_ENV_VARIABLE_VALUE>\"\n    }],\n    \"portMappings\": [{\n      \"containerPort\": 8080,\n      \"hostPort\": 8080,\n      \"protocol\": \"tcp\"\n    }]\n  }],\n  \"requiresCompatibilities\": [\n    \"FARGATE\"\n  ],\n  \"cpu\": \"256\",\n  \"memory\": \"512\",\n  \"executionRoleArn\": \"<YOUR_ECS_EXECUTION_ROLE_ARN>\",\n  \"taskRoleArn\": \"<YOUR_ECS_TASK_ROLE_ARN>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs\nDESCRIPTION: Command to check the logs of the NocoDB container for troubleshooting purposes. This helps identify any errors that might be preventing the container from running properly.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/020.docker-install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs nocodb\n```\n\n----------------------------------------\n\nTITLE: Running Docker Image for Timely Build in Bash\nDESCRIPTION: Command to run a Docker image for a timely build of NocoDB. This allows testing of changes from a specific pull request without setting up a local development environment.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/060.builds-and-releases.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 nocodb/nocodb-timely:<NOCODB_CURRENT_VERSION>-pr-<PR_NUMBER>-<YYYYMMDD>-<HHMM>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Verification in NocoDB Tests\nDESCRIPTION: JavaScript method to verify the state of a filter in NocoDB tests using Playwright's expect assertions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect } from '@playwright/test';\n\nasync verifyFilter({ title }: { title: string }) {\n  await expect(\n    this.get().locator(`[data-testid=\"nc-fields-menu-${title}\"]`).locator('input[type=\"checkbox\"]')\n  ).toBeChecked();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for NocoDB CI\nDESCRIPTION: Builds a Docker image with the tag 'mustafapc19/ci' using the Dockerfile in the current directory.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build --tag mustafapc19/ci .\n```\n\n----------------------------------------\n\nTITLE: Setting Up NocoDB Unit Test Environment with Bash\nDESCRIPTION: Commands to install dependencies, create and configure the environment file for NocoDB unit testing. This setup prepares the testing environment with database connection parameters.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=-nocodb install\n\n# add a .env file\ncp tests/unit/.env.sample tests/unit/.env\n\n# open .env file\nopen tests/unit/.env\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Cluster for NocoDB on AWS\nDESCRIPTION: AWS CLI command to create an ECS cluster for deploying NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-cluster \\\n--cluster-name <YOUR_ECS_CLUSTER>\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status in Docker Compose\nDESCRIPTION: Command to check the status of all services defined in the Docker Compose file, useful for verifying if the database service is running.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose ps\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Command to start the Nuxt 3 development server. This will launch the application in development mode, typically accessible at http://localhost:3000.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Toolbar Page Object\nDESCRIPTION: Example of creating a Toolbar page object with filter functionality for Playwright tests\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ToolbarPage extends BasePage {\n  readonly parent: GridPage | GalleryPage | FormPage | KanbanPage;\n  readonly filter: ToolbarFilterPage;\n\n  constructor(parent: GridPage | GalleryPage | FormPage | KanbanPage) {\n    super(parent.rootPage);\n    this.parent = parent;\n    this.filter = new ToolbarFilterPage(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Sakila Database for Testing\nDESCRIPTION: Docker command to set up a PostgreSQL container with Sakila database for testing purposes.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ./tests/playwright/scripts/docker-compose-playwright-pg.yml\n```\n\n----------------------------------------\n\nTITLE: Starting NocoDB Backend in Development Mode\nDESCRIPTION: Command to start the NocoDB backend development server which runs on port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/030.development-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# run from the project root\npnpm start:backend\n# runs on port 8080\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on Windows (x64)\nDESCRIPTION: Commands to download and run the NocoDB executable for Windows x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\niwr http://get.nocodb.com/win-x64.exe\n.\\Noco-win-x64.exe\n```\n\n----------------------------------------\n\nTITLE: Starting NocoDB Service\nDESCRIPTION: Command to start the NocoDB service after installation, which will make it accessible via browser.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/040.home-brew.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnocodb\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for NocoDB Website\nDESCRIPTION: Command to start a local development server that opens a browser window, enabling live preview of changes to the documentation website.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Marking Individual Playwright Test\nDESCRIPTION: Example of how to mark an individual test to run exclusively in Playwright\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('should login', async ({ page }) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Building NocoDB Frontend\nDESCRIPTION: Commands to build and run the frontend development server on port 3000.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/030.development-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# build frontend - runs on port 3000\ncd ../nc-gui\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building NocoDB Backend\nDESCRIPTION: Steps to build and run the backend server which operates on port 8080.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/030.development-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# build backend - runs on port 8080\ncd ../nocodb\nnpm install\nnpm run watch:run\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets in NocoDB Using Positional Parameters in Bash\nDESCRIPTION: Alternative command syntax to update a secret in NocoDB using positional parameters. Requires the database connection string along with the previous and new secret values.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/100.data-sources/050.updating-secret.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNC_DB=\"pg://host:port?u=user&p=password&d=database\" nc-secret-mgr <previous-secret> <new-secret>\n```\n\n----------------------------------------\n\nTITLE: Language Testing Configuration Update\nDESCRIPTION: Update required in tests/playwright/tests/language.spec.ts to include new language in test configurations.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/070.translation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// tests/playwright/tests/language.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Dependencies with pnpm\nDESCRIPTION: Command to install all project dependencies including the SDK build using pnpm bootstrap.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/030.development-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run from the project root\n# this command will install the dependencies including sdk build\npnpm bootstrap\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL for Playwright Tests\nDESCRIPTION: Docker command to set up MySQL with Sakila database for Playwright tests\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ./tests/playwright/scripts/docker-compose-mysql-playwright.yml  up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Test Server\nDESCRIPTION: Command to start the backend test server for Playwright tests in the NocoDB project\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run watch:run:playwright\n```\n\n----------------------------------------\n\nTITLE: Starting NocoDB Frontend in Development Mode\nDESCRIPTION: Command to start the NocoDB frontend development server which runs on port 3000.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/030.development-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run from the project root\npnpm start:frontend\n# runs on port 3000\n```\n\n----------------------------------------\n\nTITLE: Docker Image Management for NocoDB Upgrade\nDESCRIPTION: Commands to locate and remove the existing NocoDB Docker image as part of the upgrade process.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/030.upgrading.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# find NocoDB image\ndocker images\n# delete NocoDB image\ndocker rmi <YOUR_IMAGE_ID>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Verification\nDESCRIPTION: Example of implementing a filter verification method in a Playwright page object\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect } from '@playwright/test';\n\nasync verifyFilter({ title }: { title: string }) {\n  await expect(\n    this.get().locator(`[data-testid=\"nc-fields-menu-${title}\"]`).locator('input[type=\"checkbox\"]')\n  ).toBeChecked();\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Test Server for NocoDB\nDESCRIPTION: Command to start the backend test server for NocoDB in the packages/nocodb folder.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch:run:playwright\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headless Mode\nDESCRIPTION: Command to run all Playwright tests in headless mode for the NocoDB project\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Browser\nDESCRIPTION: Command to run all Playwright tests with a visible browser for the NocoDB project\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:debug\n```\n\n----------------------------------------\n\nTITLE: QR Code Field Creation Steps\nDESCRIPTION: Step-by-step instructions for creating a QR code field\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/040.QR-code.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click on `+` icon to the right of `Fields header`\n2. On the dropdown modal, enter the field name (Optional).\n3. Select the field type as `QR Code` from the dropdown.\n4. Select the field to be used as the source for the QR code.\n5. Click on `Save Field` button.\n```\n\n----------------------------------------\n\nTITLE: Node.js NocoDB Package Update Commands\nDESCRIPTION: NPM commands to uninstall the existing NocoDB package and install the latest version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/030.upgrading.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall nocodb\nnpm install --save nocodb\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - After Bulk Delete\nDESCRIPTION: Example of the JSON response structure sent by a webhook after multiple records are deleted in a bulk operation. Provides details about the deleted records in a nested array structure.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.after.bulkDelete\",\n  \"id\": \"e7f1f4e5-7052-4ca2-9355-241ceb836f43\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"Sheet-1\",\n    \"records\": [\n      [\n        {\n          \"FilmId\": 1022,\n          \"Title\": \"x\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          },\n        },\n        {\n          \"FilmId\": 1023,\n          \"Title\": \"x\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          },\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nc-secret-mgr Package for NocoDB in Bash\nDESCRIPTION: Command to install the nc-secret-mgr package globally using npm. This is a prerequisite step before being able to update secrets in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/100.data-sources/050.updating-secret.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g nc-secret-mgr\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Test Server\nDESCRIPTION: Command to start the frontend test server for Playwright tests in the NocoDB project\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_PAGE_TRANSITION_DISABLE=true pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Test Server for NocoDB\nDESCRIPTION: Command to start the frontend test server for NocoDB in the packages/nc-gui folder, with page transitions disabled.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_PAGE_TRANSITION_DISABLE=true npm run dev\n```\n\n----------------------------------------\n\nTITLE: NocoDB Feature Matrix Table in Markdown\nDESCRIPTION: Markdown table comparing various features and capabilities across NocoDB versions, including implementation status and release timelines for upcoming features.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/145.cloud-enterprise-edition/010.community-vs-paid-editions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                     | Last modified by                           | ✅                     | ✅                |                                    |\n| **Features**        | Filter                                     | ✅                     | ✅                |                                    |\n|                     | Filter Groups                              | ✅                     | ✅                |                                    |\n|                     | Sort                                       | ✅                     | ✅                |                                    |\n|                     | Group-By                                   | ✅                     | ✅                |                                    |\n```\n\n----------------------------------------\n\nTITLE: Homebrew NocoDB Update Commands\nDESCRIPTION: Commands to update Homebrew formulas and upgrade the NocoDB package to the latest version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/030.upgrading.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Update the local homebrew formulas\nbrew update\n# Upgrade nocodb package\nbrew upgrade nocodb\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample - Manual Trigger\nDESCRIPTION: Example of the JSON response structure sent by a webhook when manually triggered. Contains information about the table and the row that triggered the webhook, including a button field with type, label, and URL.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/130.automation/020.webhook/020.create-webhook.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"type\": \"records.manual.trigger\",\n  \"id\": \"551a2010-d658-4185-a050-cf3fca56a5a9\",\n  \"data\": {\n    \"table_id\": \"mzo4r3zrbcph43i\",\n    \"table_name\": \"Features\",\n    \"rows\": [\n      {\n        \"Id\": 1,\n        \"Title\": \"dstala\",\n        \"CreatedAt\": \"2024-08-12 11:56:15+00:00\",\n        \"UpdatedAt\": \"2024-08-12 11:56:48+00:00\",\n        \"Button\": {\n          \"type\": \"url\",\n          \"label\": \"Button\",\n          \"url\": \"https://github.com/dstala\"\n        },\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: Command to build the Nuxt 3 application for production deployment. This process optimizes and prepares the application for a production environment.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating ToolbarFilterPage Object\nDESCRIPTION: Example of creating a ToolbarFilterPage object for filter-related methods in Playwright tests\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ToolbarFilterPage extends BasePage {\n  readonly toolbar: ToolbarPage;\n\n  constructor(toolbar: ToolbarPage) {\n    super(toolbar.rootPage);\n    this.toolbar = toolbar;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on MacOS (x64)\nDESCRIPTION: Curl command to download and install NocoDB binary for MacOS x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/macos-x64 -o nocodb -L && chmod +x nocodb && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Setting File Metadata in YAML\nDESCRIPTION: YAML frontmatter configuration for documentation files specifying title, description, tags, and keywords for search optimization.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/080.writing-docs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Writing docs\"\ndescription: \"Overview to writing docs\"\ntags: ['Engineering']\nkeywords: ['Engineering', Writing docs', 'Docs conventions']\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning the NocoDB Repository in Bash\nDESCRIPTION: Commands to clone the NocoDB repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/030.development-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb\n# change directory to the project root\ncd nocodb\n```\n\n----------------------------------------\n\nTITLE: Displaying Date Field Type Example\nDESCRIPTION: Demonstrates the markdown code block showing the field type specification for date fields in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/070.date-time-based/020.date.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDate\n```\n\n----------------------------------------\n\nTITLE: Navigating to Docker Compose Directory\nDESCRIPTION: Command to navigate to the PostgreSQL Docker Compose configuration directory within the NocoDB repository.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/030.docker-compose.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd nocodb/docker-compose/2_pg\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on Windows (x64)\nDESCRIPTION: PowerShell commands to download and run NocoDB binary for Windows x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niwr http://get.nocodb.com/win-x64.exe\n.\\Noco-win-x64.exe\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on MacOS (x64)\nDESCRIPTION: Commands to download and run the NocoDB executable for MacOS x64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/macos-x64 -o nocodb -L \\\n  && chmod +x nocodb \\\n  && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment File for NocoDB Secrets\nDESCRIPTION: Example of setting an environment file for securely storing NocoDB secrets outside the NixOS configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.nocodb.environmentFile = \"/var/lib/secrets/nocodb.env\"\n```\n\n----------------------------------------\n\nTITLE: Cloning NocoDB Repository\nDESCRIPTION: Instructions to clone the NocoDB repository and navigate to the packages directory.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/030.development-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nocodb/nocodb\ncd nocodb/packages\n```\n\n----------------------------------------\n\nTITLE: Creating Quote Blocks in Rich Text Field\nDESCRIPTION: Demonstrates how to create quote blocks in a Rich Text field using the greater than (>) symbol as a prefix to the quoted text.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nnormal text\n> quoted text\n```\n\n----------------------------------------\n\nTITLE: Markdown Database Type Support Table - SpecificDBType\nDESCRIPTION: Table showing that all database types are available for SpecificDBType across all supported database systems.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/040.column-types.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Database| Types|\n|-----|----------|\n|**MySQL**|_All types are available_|\n|**PostgreSQL**|_All types are available_|\n|**SQL Server**|_All types are available_|\n|**SQLite**|_All types are available_|\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on Windows (arm64)\nDESCRIPTION: Commands to download and run the NocoDB executable for Windows arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\niwr http://get.nocodb.com/win-arm64.exe\n.\\Noco-win-arm64.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring NocoDB as a NixOS Module\nDESCRIPTION: Example flake.nix configuration for using NocoDB as a NixOS module. It includes the necessary inputs and module configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/README.md#2025-04-22_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"Bane's NixOS configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    nocodb.url = \"github:nocodb/nocodb\";\n  };\n\n  outputs = inputs@{ nixpkgs, nocodb, ... }: {\n    nixosConfigurations = {\n      hostname = nixpkgs.lib.nixosSystem {\n        system = \"x86_64-linux\";\n        modules = [\n          ./configuration.nix\n          nocodb.nixosModules.nocodb\n\n          {\n            services.nocodb.enable = true;\n          }\n        ];\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building NocoDB SDK\nDESCRIPTION: Commands to build the NocoDB SDK package by installing dependencies and running the build script.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/030.development-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# build nocodb-sdk\ncd nocodb-sdk\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Inline Email Field Reference\nDESCRIPTION: Demonstrates the inline reference to the Email field type within markdown documentation, showing how it's formatted in the documentation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/030.email.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Email`\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Executable on Linux (arm64)\nDESCRIPTION: Commands to download and run the NocoDB executable for Linux arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://get.nocodb.com/linux-arm64 -o nocodb -L \\\n  && chmod +x nocodb \\\n  && ./nocodb\n```\n\n----------------------------------------\n\nTITLE: Markdown Database Type Support Table - GeoData\nDESCRIPTION: Table showing GeoData type support across different database systems, primarily focusing on string and numeric types for storing coordinate data.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/040.column-types.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Database| Types|\n|-----|----------|\n|**MySQL**|char, varchar, nchar, text, tinytext, mediumtext, longtext|\n|**PostgreSQL**|char, character, character varying, text|\n|**SQL Server**|decimal, float|\n|**SQLite**|character, text, varchar|\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management for NocoDB Upgrade\nDESCRIPTION: Commands to find, stop and delete the existing NocoDB Docker container before upgrading. Important step in the Docker upgrade process.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/030.upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# find NocoDB container ID\ndocker ps\n# stop NocoDB container\ndocker stop <YOUR_CONTAINER_ID>\n# delete NocoDB container\ndocker rm <YOUR_CONTAINER_ID>\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB Binary on Windows (arm64)\nDESCRIPTION: PowerShell commands to download and run NocoDB binary for Windows arm64 architecture.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\niwr http://get.nocodb.com/win-arm64.exe\n.\\Noco-win-arm64.exe\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies\nDESCRIPTION: Commands to install necessary dependencies for running Playwright tests, including Chromium browser.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpx playwright install chromium --with-deps\n```\n\n----------------------------------------\n\nTITLE: Long Text Field Type Reference - Markdown\nDESCRIPTION: Code snippets showing the inline code references for Long Text field type and similar text-based fields in NocoDB documentation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/020.long-text.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Single line text](010.single-line-text.md)\n- [URL](050.url.md)\n- [Email](030.email.md)\n- [Phone](040.phonenumber.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Mapping - TypeScript Plugin Update\nDESCRIPTION: Update required in packages/nc-gui/plugins/a.i18n.ts to map JSON path for new language support in NocoDB's i18n system.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/070.translation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/nc-gui/plugins/a.i18n.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Lists in Rich Text Field\nDESCRIPTION: Shows how to create ordered (numbered) lists in a Rich Text field by preceding text with numbers followed by periods.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/010.text-based/025.rich-text.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Item 1\n2. Item 2\n```\n\n----------------------------------------\n\nTITLE: Displaying NocoDB Project Info in JSON Format\nDESCRIPTION: This snippet shows the structure and content of the project information that can be copied from NocoDB. It includes details about the Node version, architecture, platform, database, and package version.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/060.FAQs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Node\": \"**v16.14.0**\",\n  \"Arch\": \"**arm64**\",\n  \"Platform\": \"**darwin**\",\n  \"Docker\": \"**false**\",\n  \"Database\": \"**pg**\",\n  \"ProjectOnRootDB\": \"**true**\",\n  \"RootDB\": \"**pg**\",\n  \"PackageVersion\": \"**0.97.0**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands to install project dependencies using different package managers (yarn, npm, pnpm). These commands should be run in the project root directory to set up the necessary packages for the Nuxt 3 application.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn install\n\n# npm\nnpm install\n\n# pnpm\npnpm install --shamefully-hoist\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headless Mode\nDESCRIPTION: Command to run all Playwright tests without opening a browser (headless mode).\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Supported Field References for Barcode\nDESCRIPTION: List of field types that can be used as reference fields for generating barcodes.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/050.custom-types/050.barcode.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Formula\n* Single Line Text\n* Long Text\n* Phone Number\n* URL\n* Email\n```\n\n----------------------------------------\n\nTITLE: Adding Language Support - TypeScript Enum Update\nDESCRIPTION: Update required in packages/nc-gui/lib/enums.ts to add enumeration for new language support in NocoDB's i18n system.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/070.translation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/nc-gui/lib/enums.ts\n```\n\n----------------------------------------\n\nTITLE: Multi Select Field Note\nDESCRIPTION: Important note regarding the use of commas in option values for Multi Select fields.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/030.select-based/020.multi-select.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUse of `,` is not allowed for option values.\n```\n\n----------------------------------------\n\nTITLE: Executing NocoDB Schema Import Command\nDESCRIPTION: Terminal commands to navigate to the export-import directory and execute the schema import script.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nocodb/tests/export-import/ReadMe.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/nocodb/tests/export-import\nnode importSchema.js\n```\n\n----------------------------------------\n\nTITLE: Importing NocoDB API in JavaScript\nDESCRIPTION: Import statement to include the NocoDB API in a JavaScript application.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/040.developer-resources/030.sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Api } from 'nocodb-sdk'\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block with Sign Up Command\nDESCRIPTION: Simple markdown code block showing the Sign Up command as part of the account creation process.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/020.quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSign Up\n```\n\n----------------------------------------\n\nTITLE: Multi Select Option Deletion Info\nDESCRIPTION: Important information about the consequences of deleting options in Multi Select fields.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/030.select-based/020.multi-select.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- On removing an option, the option value will be removed from all the cells.\\n- If the option value is set as default value for the field, then the default value will be removed.\n```\n\n----------------------------------------\n\nTITLE: Deploying NocoDB on GCP Cloud Run\nDESCRIPTION: Commands to pull, tag, and push NocoDB Docker image to Google Container Registry, and deploy it on Cloud Run.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/010.installation.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# pull latest NocoDB image\ndocker pull nocodb/nocodb:latest\n\n# tag the image\ndocker tag nocodb/nocodb:latest gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest\n\n# push the image to GCR\ndocker push gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest\n\n# deploy on Cloud Run\ngcloud run deploy --image=gcr.io/<MY_PROJECT_ID>/nocodb/nocodb:latest \\\n                  --region=us-central1 \\\n                  --allow-unauthenticated \\\n                  --platform=managed\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Command to locally preview the production build of the Nuxt 3 application. This allows testing the production version before actual deployment.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB CI Container\nDESCRIPTION: Runs a detached Docker container named 'runner' from the 'mustafapc19/ci' image, setting the REG_TOKEN environment variable.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run   --detach   --env REG_TOKEN=\"AIRGTGSSUWA7JFNI57OADLTEW2EGO\"   --name runner   mustafapc19/ci\n```\n\n----------------------------------------\n\nTITLE: Embedding NocoDB Demos using iframe in HTML\nDESCRIPTION: This code snippet embeds an iframe that loads NocoDB demos from the official website. The iframe is set to full width and has a height of 100vh (100% of the viewport height).\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/020.getting-started/040.demos.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://nocodb.com/demos\" width=\"100%\" style={{height: \"100vh\"}} />\n```\n\n----------------------------------------\n\nTITLE: Multi Select Option Configuration Info\nDESCRIPTION: Information about option ordering in Multi Select fields.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/030.select-based/020.multi-select.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe order defined for the options will be used in cells dropdown as well.\n```\n\n----------------------------------------\n\nTITLE: Version Tagging Convention Example\nDESCRIPTION: Demonstrates the version tagging convention used in NocoDB releases, showing the progression from beta releases to final releases.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/060.builds-and-releases.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n0.100.0-beta.0\n0.100.0-beta.1\n0.100.0-beta.2\n0.100.0\n0.100.1\n0.100.2\n```\n\n----------------------------------------\n\nTITLE: HTML SVG Icon Implementation\nDESCRIPTION: SVG markup for a clickable external link icon with path definitions for the arrow graphic. The SVG is styled with specific stroke colors and dimensions.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/extensions/json-exporter/description.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"!no-underline !hover:underline inline-flex items-center gap-2 \">\n    Learn more \n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n        <path d=\"M12 8.66667V12.6667C12 13.0203 11.8595 13.3594 11.6095 13.6095C11.3594 13.8595 11.0203 14 10.6667 14H3.33333C2.97971 14 2.64057 13.8595 2.39052 13.6095C2.14048 13.3594 2 13.0203 2 12.6667V5.33333C2 4.97971 2.14048 4.64057 2.39052 4.39052C2.64057 4.14048 2.97971 4 3.33333 4H7.33333\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M10 2H14V6\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M6.66669 9.33333L14 2\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL for Playwright Tests\nDESCRIPTION: Docker command to set up PostgreSQL with Sakila database for Playwright tests\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ./tests/playwright/scripts/docker-compose-playwright-pg.yml\n```\n\n----------------------------------------\n\nTITLE: Building NocoDB Frontend GUI\nDESCRIPTION: Command to build the frontend and copy the built files to the distribution directory within the nc-gui package\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-lib-gui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:copy\n```\n\n----------------------------------------\n\nTITLE: Using ODD Function in Formula Fields\nDESCRIPTION: The ODD function rounds positive values up to the nearest odd number and negative values down to the nearest odd number. It ensures the result is always an odd integer.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nODD(number)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nODD(6) => 7\nODD(-5.5) => -7\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Metadata in JSON\nDESCRIPTION: JSON configuration for folder metadata defining the category label and collapsible behavior in documentation.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/080.writing-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Engineering\",\n  \"collapsible\": true,\n  \"collapsed\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying NocoDB Website Without SSH\nDESCRIPTION: Command to deploy the website without SSH authentication, requiring your GitHub username for authentication to push to the gh-pages branch.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Sakila Database for Testing\nDESCRIPTION: Docker command to set up a MySQL container with Sakila database for testing purposes.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ./tests/playwright/scripts/docker-compose-mysql-playwright.yml  up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies\nDESCRIPTION: Commands to install Playwright and its dependencies for the NocoDB project\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/050.playwright.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=playwright install\npnpm exec playwright install --with-deps chromium\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for NocoDB Website\nDESCRIPTION: Command to generate static website content in the build directory, which can then be deployed using any static content hosting service.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Markdown Database Type Support Table - Geometry\nDESCRIPTION: Table showing Geometry type support across different database systems with their respective geometric data types.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/040.column-types.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Database| Types|\n|-----|----------|\n|**MySQL**|geometry, point, linestring, polygon, multipoint, multilinestring, multipolygon|\n|**PostgreSQL**|polygon, point, circle, box, line, lseg, path, circle|\n|**SQL Server**|geometry|\n|**SQLite**|text|\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Tracking in NocoDB\nDESCRIPTION: Environment variable setting to opt out of NocoDB's usage information collection feature.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/210.usage-information.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNC_DISABLE_TELE=true\n```\n\n----------------------------------------\n\nTITLE: Basic NocoDB Setup with NixOS Flakes\nDESCRIPTION: Configuration for installing NocoDB on NixOS using Flakes. This creates a basic setup with a systemd service for NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/100.nix.md#2025-04-22_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"Bane's NixOS configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    nocodb.url = \"github:nocodb/nocodb\";\n  };\n\n  outputs = inputs@{ nixpkgs, nocodb, ... }: {\n    nixosConfigurations = {\n      hostname = nixpkgs.lib.nixosSystem {\n        system = \"x86_64-linux\";\n        modules = [\n          ./configuration.nix\n          nocodb.nixosModules.nocodb\n\n          {\n            # Enable NocoDB\n            services.nocodb.enable = true;\n          }\n        ];\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Country-City Distribution CSV Data\nDESCRIPTION: CSV data structure showing countries and their respective number of cities. Contains two columns: 'Country' and 'Cities', with each row representing a country and its city count. Some country names contain special characters and are properly quoted.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/playwright/fixtures/expectedBaseDownloadData.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nCountry,Cities\nAfghanistan,1\nAlgeria,3\nAmerican Samoa,1\nAngola,2\nAnguilla,1\nArgentina,13\nArmenia,1\nAustralia,1\nAustria,3\nAzerbaijan,2\nBahrain,1\nBangladesh,3\nBelarus,2\nBolivia,2\nBrazil,28\nBrunei,1\nBulgaria,2\nCambodia,2\nCameroon,2\nCanada,7\nChad,1\nChile,3\nChina,53\nColombia,6\n\"Congo, The Democratic Republic of the\",2\nCzech Republic,1\nDominican Republic,3\nEcuador,3\nEgypt,6\nEstonia,1\nEthiopia,1\nFaroe Islands,1\nFinland,1\nFrance,4\nFrench Guiana,1\nFrench Polynesia,2\nGambia,1\nGermany,7\nGreece,2\nGreenland,1\nHoly See (Vatican City State),1\nHong Kong,1\nHungary,1\nIndia,60\nIndonesia,14\nIran,8\nIraq,1\nIsrael,4\nItaly,7\nJapan,31\nKazakstan,2\nKenya,2\nKuwait,1\nLatvia,2\nLiechtenstein,1\nLithuania,1\nMadagascar,1\nMalawi,1\nMalaysia,3\nMexico,30\nMoldova,1\nMorocco,3\nMozambique,3\nMyanmar,2\nNauru,1\nNepal,1\nNetherlands,5\nNew Zealand,1\nNigeria,13\nNorth Korea,1\nOman,2\nPakistan,5\nParaguay,3\nPeru,4\nPhilippines,20\nPoland,8\nPuerto Rico,2\nRomania,2\nRunion,1\nRussian Federation,28\nSaint Vincent and the Grenadines,1\nSaudi Arabia,5\nSenegal,1\nSlovakia,1\nSouth Africa,11\nSouth Korea,5\nSpain,5\nSri Lanka,1\nSudan,2\nSweden,1\nSwitzerland,3\nTaiwan,10\nTanzania,3\nThailand,3\nTonga,1\nTunisia,1\nTurkey,15\nTurkmenistan,1\nTuvalu,1\nUkraine,6\nUnited Arab Emirates,3\nUnited Kingdom,8\nUnited States,35\nVenezuela,7\nVietnam,6\n\"Virgin Islands, U.S.\",1\nYemen,4\nYugoslavia,2\nZambia,1\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Test Execution in Playwright\nDESCRIPTION: JavaScript code snippet showing how to mark a specific test for individual execution using the .only modifier.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('should login', async ({ page }) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Auto-upstall Installation of NocoDB\nDESCRIPTION: Bash command to automatically install and set up NocoDB on a server for production use. It uses a script to generate and run a docker-compose configuration.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL http://install.nocodb.com/noco.sh) <(mktemp)\n```\n\n----------------------------------------\n\nTITLE: CSV Address Database Records\nDESCRIPTION: Structured data containing address records with fields for location details and associated counts. Includes columns for Address, District, PostalCode, Phone, Customers, Staffs, and City.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/playwright/fixtures/expectedDataSqlite.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nAddress,District,PostalCode,Phone,Customers,Staffs,City\n1013 Tabuk Boulevard,\" \",96203,\" \",1,0,Kanchrapara\n1168 Najafabad Parkway,\" \",40301,\" \",1,0,Kabul\n1294 Firozabad Drive,\" \",70618,\" \",1,0,Pingxiang\n1342 Abha Boulevard,\" \",10714,\" \",1,0,Bucuresti\n1368 Maracabo Boulevard,\" \",32716,\" \",1,0,South Hill\n1427 Tabuk Place,\" \",31342,\" \",1,0,Cape Coral\n1519 Santiago de los Caballeros Loop,\" \",22025,\" \",1,0,Mwene-Ditu\n1661 Abha Drive,\" \",14400,\" \",1,0,Pudukkottai\n17 Kabul Boulevard,\" \",38594,\" \",1,0,Nagareyama\n1838 Tabriz Lane,\" \",1195,\" \",1,0,Dhaka\n1888 Kabul Drive,\" \",20936,\" \",1,0,Ife\n1892 Nabereznyje Telny Lane,\" \",28396,\" \",1,0,Tafuna\n1993 Tabuk Lane,\" \",64221,\" \",1,0,Tambaram\n217 Botshabelo Place,\" \",49521,\" \",1,0,Davao\n381 Kabul Way,\" \",87272,\" \",1,0,Hsichuh\n44 Najafabad Way,\" \",61391,\" \",1,0,Donostia-San Sebastin\n48 Maracabo Place,\" \",1570,\" \",1,0,Talavera\n669 Firozabad Loop,\" \",92265,\" \",1,0,al-Ayn\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Reset Action in NocoDB Tests\nDESCRIPTION: JavaScript method to reset/clear all filters in NocoDB tests, waiting for the delete filter API response.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync resetFilter() {\n  await this.waitForResponse({\n    uiAction: () => this.get().locator('.nc-filter-item-remove-btn').click(),\n    httpMethodsToMatch: ['DELETE'],\n    requestUrlPathToMatch: '/api/v1/db/meta/filters/',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Block - YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining metadata for the documentation page including title, tags, description and keywords.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/080.records/030.expand-record.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Expanded record'\ntags: ['Records', 'Expanded record', 'Audit', 'Comments']\ndescription: 'Learn how to expand a record & work with it in NocoDB.'\nkeywords : ['NocoDB expanded form', 'expanded form', 'expanded record', 'expanded record view']\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Column-Specific Keyboard Shortcuts in Markdown\nDESCRIPTION: This snippet provides keyboard shortcuts for specific column types in NocoDB, including text/numerical cells, single/multi-select fields, date/time fields, links, checkboxes, and ratings.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/150.keyboard-maneuver.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|        Datatype        |         Key | Behaviour                          |\n|:----------------------:|------------:|:-----------------------------------|\n| Text / Numerical cells |     `←` `→` | Move cursor to the left / right    |\n|                        |     `↑` `↓` | Move cursor to the beginning / end |\n|     Single Select      |     `↑` `↓` | Move between options               |\n|                        |     `Enter` | Select option                      |\n|      Multi Select      |     `↑` `↓` | Move between options               |\n|                        |     `Enter` | Select / deselect option           |\n|        DateTime        |  `Ctrl` `;` | Select current date time           |\n|          Link          |     `↑` `↓` | Move between options               |\n|                        |     `Enter` | Link current selection             |\n|        Checkbox        |     `Enter` | Toggle                             |\n|         Rating         | `<0 ~ Max>` | Enter number to toggle rating      |\n```\n\n----------------------------------------\n\nTITLE: Seeding Sakila Sample Database for Tests in TypeScript\nDESCRIPTION: Example showing how to seed the Sakila sample database for testing. It initializes the test context, creates a Sakila project, and sets up a customer table for use in tests.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tableTest() {\n  let context;\n  let sakilaProject: Project;\n  let customerTable: Model;\n\n  beforeEach(async function () {\n    context = await init();\n    \n    /******* Start : Seeding sample database **********/\n    sakilaProject = await createSakilaProject(context);\n    /******* End : Seeding sample database **********/\n    \n    customerTable = await getTable({project: sakilaProject, name: 'customer'})\n  });\n\n  it('Get table data list', async function () {\n    const response = await request(context.app)\n      .get(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}`)\n      .set('xc-auth', context.token)\n      .send({})\n      .expect(200);\n\n    expect(response.body.list[0]['FirstName']).to.equal('MARY');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Categories and Apps Table in Markdown\nDESCRIPTION: Markdown table showing available integration categories (Chat, Email, Storage) and their corresponding applications in NocoDB.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/170.account-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Category | App Name |\n|---|---|\n| Chat | Microsoft Teams <br/> Discord <br/> Twilio <br/> Whatsapp Twilio<br/> Mattermost<br/> Slack |\n| Email | SMTP<br/> MailerSend<br/> AWS SES |\n| Storage | AWS S3 <br/> Minio <br/> Google Cloud Storage <br/> Spaces <br/> Backblaze B2 <br/> Vultr Object Storage <br/> OvhCloud Object Storage <br/> Linode Object Storage <br/> UpCloud Object Storage <br/> Scaleway Object Storage |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NocoDB Website with Yarn\nDESCRIPTION: Command to install all required dependencies for the NocoDB documentation website using Yarn package manager.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Markdown Database Type Support Table - DateTime\nDESCRIPTION: Table showing DateTime type support across different database systems including MySQL, PostgreSQL, SQL Server, and SQLite.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/040.column-types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Database| Types| Default Type|\n|-----|----------|----------|\n|**MySQL**|datetime, timestamp, varchar|datetime|\n|**PostgreSQL**|timestamp, timestamp without time zone, timestamptz, timestamp with time zone|datetime|\n|**SQL Server**|datetime, datetime2, datetimeoffset|datetime|\n|**SQLite**|datetime, timestamp|datetime|\n```\n\n----------------------------------------\n\nTITLE: Using REPEAT Function for String Duplication\nDESCRIPTION: The REPEAT function duplicates a string a specified number of times. It takes a text parameter and a count parameter indicating how many times to repeat the string.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/030.string-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nREPEAT(text, count)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREPEAT('😃', 3) => '😃😃😃'\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Sample for After Bulk Delete Event in NocoDB\nDESCRIPTION: This code snippet illustrates the structure of a webhook response after multiple records are deleted in NocoDB. It includes details of the deleted records.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/160.developer-resources/020.webhook/020.create-webhook.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"records.after.bulkDelete\",\n  \"id\": \"e7f1f4e5-7052-4ca2-9355-241ceb836f43\",\n  \"data\": {\n    \"table_id\": \"md_xzru7dcqrecc60\",\n    \"table_name\": \"Film\",\n    \"view_id\": \"vw_3fq2e9q8drkblw\",\n    \"view_name\": \"Sheet-1\",\n    \"records\": [\n      [\n        {\n          \"FilmId\": 1022,\n          \"Title\": \"x\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        },\n        {\n          \"FilmId\": 1023,\n          \"Title\": \"x\",\n          \"Language\": {\n            \"LanguageId\": 1,\n            \"Name\": \"English\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NocoDB Relationship Types Documentation\nDESCRIPTION: Documentation describing the supported relationship types in NocoDB including one-to-many (has many) and many-to-many relationships, along with their characteristics and examples.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/220.links.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Supported relationship types:\n\n- One to many\n  - A Table record in first table is related to more than one record of second table. But second table record maps to only one entry of first table\n  - NocoDB refers to this category of relationship as **has many**\n  - For every **has many** relation defined, NocoDB augments **belongs to** relationship column in the adjacent table automatically\n  - Example: Country **has many** Cities. (other way mapping > City **belongs to** Country )\n- Many to many\n  - A Table record in first table is related to more than one record of second table; second table record can also map to more than on record of first table.\n  - NocoDB refers to this category of relationship as **many to many**\n  - For every **many to many** relation defined between tables, NocoDB augments **many to many** relationship column in the other table automatically\n  - Example: Film **has many** Actors. Actor **has many** Films (works on many films)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete NocoDB Unit Test Suite\nDESCRIPTION: Full example of creating a test suite for table-related operations, including setup, test cases, and integration with the main test suite.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/040.unit-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'mocha';\nimport request from 'supertest';\nimport init from '../../init';\nimport { createTable, getAllTables } from '../../factory/table';\nimport { createProject } from '../../factory/project';\nimport { defaultColumns } from '../../factory/column';\nimport Model from '../../../../src/lib/models/Model';\nimport { expect } from 'chai';\n\nfunction tableTest() {\n  let context;\n  let project;\n  let table;\n\n  beforeEach(async function () {\n    context = await init();\n\n    project = await createProject(context);\n    table = await createTable(context, project);\n  });\n\n  it('Get table list', async function () {\n    const response = await request(context.app)\n      .get(`/api/v1/db/meta/projects/${project.id}/tables`)\n      .set('xc-auth', context.token)\n      .send({})\n      .expect(200);\n\n    expect(response.body.list).to.be.an('array').not.empty;\n  });\n}\n\nexport default function () {\n  describe('Table', tableTests);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grid View Keyboard Shortcuts in Markdown\nDESCRIPTION: This snippet outlines keyboard shortcuts specific to grid view navigation and operations in NocoDB, including cell navigation, editing, copying, and row expansion.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/150.keyboard-maneuver.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|             Key | Behaviour                                                                            |\n|----------------:|:-------------------------------------------------------------------------------------|\n|         `⌘` `↑` | Jump to first record in this column (in same page)                                   |\n|         `⌘` `↓` | Jump to last record in this column (in same page)                                    |\n|         `⌘` `C` | Copy cell contents                                                                   |\n|         `Enter` | Switch cell in focus to EDIT mode; opens modal/picker if cell is associated with one |\n|           `Esc` | Exit cell EDIT mode                                                                  |\n|        `Delete` | Clear cell                                                                           |\n|         `Space` | Expand current row                                                                   |\n| `←` `→` `↑` `↓` | General cell navigation                                                              |\n|           `Tab` | Move to next cell horizontally; if on last cell, move to next row beginning          |\n```\n\n----------------------------------------\n\nTITLE: HTML Link Element for Documentation\nDESCRIPTION: HTML markup for a styled documentation link with an external link icon SVG. The link points to the NocoDB Data Exporter documentation page.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/nc-gui/extensions/data-exporter/description.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://docs.nocodb.com/extensions/data-exporter\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"!no-underline !hover:underline inline-flex items-center gap-2\">\n    Learn more\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n        <path d=\"M12 8.66667V12.6667C12 13.0203 11.8595 13.3594 11.6095 13.6095C11.3594 13.8595 11.0203 14 10.6667 14H3.33333C2.97971 14 2.64057 13.8595 2.39052 13.6095C2.14048 13.3594 2 13.0203 2 12.6667V5.33333C2 4.97971 2.14048 4.64057 2.39052 4.39052C2.64057 4.14048 2.97971 4 3.33333 4H7.33333\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M10 2H14V6\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M6.66669 9.33333L14 2\" stroke=\"#374151\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining General Keyboard Shortcuts in Markdown\nDESCRIPTION: This snippet defines general keyboard shortcuts for NocoDB operations such as inserting tables, rows, columns, toggling fullscreen mode, and accessing settings.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/versioned_docs/version-0.109.7/030.setup-and-usages/150.keyboard-maneuver.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|       Key | Behaviour               |\n|----------:|:------------------------|\n| `ALT` `t` | Insert new table        |\n| `ALT` `r` | Insert new row          |\n| `ALT` `c` | Insert new column       |\n| `ALT` `f` | Toggle fullscreen mode  |\n| `ALT` `i` | Invite a member to team |\n| `ALT` `,` | Open `Team & Settings` menu      |\n```\n\n----------------------------------------\n\nTITLE: Country-City Count CSV Data\nDESCRIPTION: A CSV file containing two columns: Country names and the number of cities in each country. The data includes entries for multiple countries worldwide with their respective city counts.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/tests/playwright/fixtures/expectedBaseDownloadDataPg.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nCountry,Cities\nAfghanistan,1\nAlgeria,3\nAmerican Samoa,1\nAngola,2\nAnguilla,1\nArgentina,13\nArmenia,1\nAustralia,1\nAustria,3\nAzerbaijan,2\nBahrain,1\nBangladesh,3\nBelarus,2\nBolivia,2\nBrazil,28\nBrunei,1\nBulgaria,2\nCambodia,2\nCameroon,2\nCanada,7\nChad,1\nChile,3\nChina,53\nColombia,6\n\"Congo, The Democratic Republic of the\",2\nCzech Republic,1\nDominican Republic,3\nEcuador,3\nEgypt,6\nEstonia,1\nEthiopia,1\nFaroe Islands,1\nFinland,1\nFrance,4\nFrench Guiana,1\nFrench Polynesia,2\nGambia,1\nGermany,7\nGreece,2\nGreenland,1\nHoly See (Vatican City State),1\nHong Kong,1\nHungary,1\nIndia,60\nIndonesia,14\nIran,8\nIraq,1\nIsrael,4\nItaly,7\nJapan,31\nKazakstan,2\nKenya,2\nKuwait,1\nLatvia,2\nLiechtenstein,1\nLithuania,1\nMadagascar,1\nMalawi,1\nMalaysia,3\nMexico,30\nMoldova,1\nMorocco,3\nMozambique,3\nMyanmar,2\nNauru,1\nNepal,1\nNetherlands,5\nNew Zealand,1\nNigeria,13\nNorth Korea,1\nOman,2\nPakistan,5\nParaguay,3\nPeru,4\nPhilippines,20\nPoland,8\nPuerto Rico,2\nRomania,2\nRunion,1\nRussian Federation,28\nSaint Vincent and the Grenadines,1\nSaudi Arabia,5\nSenegal,1\nSlovakia,1\nSouth Africa,11\nSouth Korea,5\nSpain,5\nSri Lanka,1\nSudan,2\nSweden,1\nSwitzerland,3\nTaiwan,10\nTanzania,3\nThailand,3\nTonga,1\nTunisia,1\nTurkey,15\nTurkmenistan,1\nTuvalu,1\nUkraine,6\nUnited Arab Emirates,3\nUnited Kingdom,8\nUnited States,35\nVenezuela,7\nVietnam,6\n\"Virgin Islands, U.S.\",1\nYemen,4\nYugoslavia,2\nZambia,1\n```\n\n----------------------------------------\n\nTITLE: Running NocoDB Unit Tests with Bash\nDESCRIPTION: Command to execute the unit tests for NocoDB project using pnpm package manager.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/packages/noco-docs/docs/150.engineering/040.unit-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Installing NocoDB with Nix\nDESCRIPTION: Command to run NocoDB using the Nix package manager.\nSOURCE: https://github.com/nocodb/nocodb/blob/develop/README.md#2025-04-22_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nnix run github:nocodb/nocodb\n```"
  }
]