[
  {
    "owner": "e2niee",
    "repo": "simbench",
    "content": "TITLE: Converting Between SimBench CSV and PandaPower Network Formats\nDESCRIPTION: Shows complete conversion process between CSV files and PandaPower network format. Demonstrates reading from test network CSV files into a PandaPower network and then exporting back to CSV format in a specified output directory.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/simbench_converter_usage.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# determine relevant paths\ntest_network_path = os.path.join(sb.sb_dir, \"test\", \"converter\", \"test_network\")\ntest_output_folder_path = os.path.join(sb.sb_dir, \"test\", \"converter\", \"test_network_output_folder\")\n\n# get the pandapower net from test network csv files\nnet = sb.csv2pp(test_network_path)\n\n# convert pp net to csv files\nsb.pp2csv(net, test_output_folder_path, export_pp_std_types=False)\n```\n\n----------------------------------------\n\nTITLE: Executing AC Power Flow with Voltage Control\nDESCRIPTION: Configures and runs AC power flow analysis with tap controllers for EHV-HV transformers and distributed slack for branch loss balancing.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/EHVHV_powerflow_expl.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nehv_hv_trafos = sb.voltlvl_idx(net, \"trafo\", [3], \"lv_bus\")\npp.control.ContinuousTapControl(net, ehv_hv_trafos, 1.0)\npp.runpp(net, run_control=True, distributed_slack=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Power Flow Results\nDESCRIPTION: Creates visualization plots for voltage profiles and branch loadings from the AC power flow results using matplotlib.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/EHVHV_powerflow_expl.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npp.lf_info(net)\n\n# --- plot voltages and loadings of the AC power flow results\nfig, axs = plt.subplots(ncols=2)\nnet.res_bus.vm_pu.rename(\"bus\").plot(kind=\"box\", ax=axs[0])\nbranch_loadings = pd.concat([\n    net.res_line.loading_percent, net.res_trafo.loading_percent],\n    axis=1, keys=[\"line\", \"trafo\"])\nbranch_loadings.plot(kind=\"box\", ax=axs[1])\naxs[0].set_ylabel(\"vm in pu\")\naxs[1].set_ylabel(\"loading in %\")\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Retrieving SimBench Profiles with Grid Data in Python\nDESCRIPTION: Demonstrates how to obtain SimBench profiles that are included in the pandapower nets. This code retrieves a network using a SimBench code identifier and accesses the associated profiles through the net.profiles attribute.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/profiles.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnet = simbench.get_simbench_net(sb_code_info)\nnet.profiles\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Settings and Load Scaling\nDESCRIPTION: Converts external grid elements to generators, sets power setpoints, and applies scaling factors to loads and generators to balance power consumption and feed-in.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/EHVHV_powerflow_expl.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# --- convert ext_grids to gen elements and set some assumed active power setpoints\nnuclear_gens = pp.toolbox.replace_ext_grid_by_gen(net, add_cols_to_keep=[\"slack_weight\"])\nnet.gen.at[net.gen.index[-1], \"slack\"] = True\ngens_with_p_2bset = pd.Index(nuclear_gens).difference([342])\nnet.gen.loc[gens_with_p_2bset, \"p_mw\"] = net.gen.loc[gens_with_p_2bset, \"max_p_mw\"]\n\n# --- set scalings\nscaling = {\n    \"load\": 0.35,\n    \"sgen\": 0.35,\n}\ngen_xg_scaling = ((net.load.p_mw *scaling[\"load\"]).sum() - (net.sgen.p_mw *scaling[\"sgen\"]).sum()) / (\n    net.gen.p_mw.sum() + net.ext_grid.max_p_mw.sum())\nscaling[\"gen\"] = gen_xg_scaling\n\n# --- apply the assumed and calculated scaling values\nfor et, scale in scaling.items():\n    net[et][\"scaling\"] = scale\n```\n\n----------------------------------------\n\nTITLE: Running DC Power Flow Analysis\nDESCRIPTION: Performs DC power flow calculation with distributed slack and logs the results.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/EHVHV_powerflow_expl.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# --- perform DC power flow\npp.rundcpp(net, distributed_slack=True)\n\n# --- log some results\npp.toolbox.lf_info(net)\n```\n\n----------------------------------------\n\nTITLE: Inspecting SimBench CSV Format Structure Using PandaPower Network\nDESCRIPTION: Demonstrates how to convert a simple medium voltage network from PandaPower to SimBench CSV format and inspect its structure. Uses the simple_mv_open_ring_net example and converts it to CSV data format to view available element tables.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/simbench_converter_usage.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandapower.networks as nw\nimport simbench as sb\nimport os\n\n# let's have a look at the SimBench csv format appearance\nnet = nw.simple_mv_open_ring_net()\ncsv_data = sb.pp2csv_data(net)\nlist(csv_data.keys())\n```\n\n----------------------------------------\n\nTITLE: Initializing SimBench Grid Data with Python\nDESCRIPTION: Imports required libraries and loads the SimBench grid data for combined EHV and HV analysis using the '1-EHVHV-mixed-all-0-no_sw' dataset.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/tutorials/EHVHV_powerflow_expl.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pandapower as pp\nimport simbench as sb\n\nnet = sb.get_simbench_net(\"1-EHVHV-mixed-all-0-no_sw\")\n```\n\n----------------------------------------\n\nTITLE: Basic SimbBench import test\nDESCRIPTION: Python code to import SimbBench, which serves as a basic test to ensure all dependencies are available and the package is installed correctly.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport simbench\n```\n\n----------------------------------------\n\nTITLE: Running the SimbBench test suite\nDESCRIPTION: Python commands to import and run the complete SimbBench test suite, which verifies that all functionalities work correctly after installation.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport simbench.test\nsimbench.test.run_all_tests()\n```\n\n----------------------------------------\n\nTITLE: Installing SimbBench via pip\nDESCRIPTION: Command for installing SimbBench using pip package manager. This is the recommended and easiest installation method for users with internet access.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install simbench\n```\n\n----------------------------------------\n\nTITLE: Installing SimbBench from local files\nDESCRIPTION: Command for installing SimbBench from local files in development mode. The -e flag ensures changes to files are immediately reflected in the installation.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Cloning SimbBench repository from GitHub\nDESCRIPTION: Git command to clone the SimbBench repository from GitHub. This is used when installing the development version directly from the source repository.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/e2nIEE/simbench.git\n```\n\n----------------------------------------\n\nTITLE: Installing pytest for testing SimbBench\nDESCRIPTION: Command to install pytest, which is required to run the SimbBench test suite and verify the installation is working correctly.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest\n```\n\n----------------------------------------\n\nTITLE: Navigating to SimbBench local folder for offline installation\nDESCRIPTION: Command to navigate to the folder containing the SimbBench setup files after downloading the distribution package locally. This is used for offline installation.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd %path_to_simbench%\\simbench-x.x.x\\ \n```\n\n----------------------------------------\n\nTITLE: Tutorial Links in RST Format\nDESCRIPTION: ReStructuredText markup defining a tutorials section with links to two interactive Jupyter notebooks for SimBench usage.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/tutorials.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _tutorials:\n\n==================\nTutorials\n==================\n\nTo get familiar with the SimBench dataset and the provided code for pandapower usage, we highly recommend you to have a look to the provided interactive tutorials:\n\n- `Interactive Tutorial to use the SimBench dataset <https://github.com/e2nIEE/simbench/blob/master/tutorials/simbench_grids_basics_and_usage.ipynb>`_\n- `Interactive Tutorial to use the SimBench converter <https://github.com/e2nIEE/simbench/blob/master/tutorials/simbench_converter_usage.ipynb>`_\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure with Table of Contents\nDESCRIPTION: ReStructuredText document structure defining a table of contents tree for the project documentation, including installation, tutorials, authors, license and changelog sections.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    about/installation\n    about/tutorials\n    about/authors\n    about/license\n    about/changelog\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG.rst using reStructuredText directives\nDESCRIPTION: This snippet demonstrates how to reference a changelog section and include an external RST file using reStructuredText directives. It creates a reference label 'changelog' and includes the CHANGELOG.rst file from the project's root directory.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _changelog:\n\n.. include:: ../../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Including AUTHORS file in reStructuredText documentation\nDESCRIPTION: This reStructuredText snippet creates a documentation page that includes the content from the AUTHORS file located in the parent directory. The snippet defines a section with the title 'Authors' and uses the include directive to insert the content of the AUTHORS file.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/authors.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _authors:\n\n=========\nAuthors\n=========\n\n.. include:: ../../AUTHORS\n```\n\n----------------------------------------\n\nTITLE: Including License Information in RST Documentation\nDESCRIPTION: ReStructuredText directive to include the LICENSE file from two directories up in the file hierarchy.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about/license.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _license:\n\n=========\nLicense\n=========\n\n.. include:: ../../LICENSE\n```\n\n----------------------------------------\n\nTITLE: RST Line Break Definition\nDESCRIPTION: ReStructuredText directive defining a custom line break substitution using HTML br tag.\nSOURCE: https://github.com/e2niee/simbench/blob/develop/doc/about.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. |br| raw:: html\n\n    <br />\n```"
  }
]