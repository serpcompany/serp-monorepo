[
  {
    "owner": "lavalink-devs",
    "repo": "lavalink",
    "content": "TITLE: Lavalink application.yml Configuration YAML\nDESCRIPTION: This is an example of the application.yml file used to configure Lavalink. It contains various settings for the server, sources, filters, buffers, rate limits, and other features. This file is read by the Lavalink server on startup to configure its settings.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n--8<-- \"LavalinkServer/application.yml.example\"\n```\n\n----------------------------------------\n\nTITLE: Example WebSocket Headers for Lavalink\nDESCRIPTION: Illustrates the required headers for establishing a WebSocket connection with a Lavalink node. Includes the Authorization key using the Lavalink password, the User-Id, and the Client-Name in the specified format.  These headers are crucial for authenticating and identifying the client connecting to the Lavalink server.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nAuthorization: youshallnotpass\nUser-Id: 170939974227541168\nClient-Name: lavalink-client/2.0.0\n```\n\n----------------------------------------\n\nTITLE: Getting Single Player Payload YAML\nDESCRIPTION: This YAML payload shows an example of the response when retrieving a single player by guild ID in a Lavalink session. It includes the same player information as the list players endpoint, such as guild ID, track details, volume, pause status, state, voice server connection info (token, endpoint, session ID), and applied filters. This response provides the full current state of a specific player.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nguildId: \"...\"\ntrack:\n  encoded: \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\"\n  info:\n    identifier: dQw4w9WgXcQ\n    isSeekable: true\n    author: RickAstleyVEVO\n    length: 212000\n    isStream: false\n    position: 60000\n    title: Rick Astley - Never Gonna Give You Up\n    uri: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n    artworkUrl: https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\n    isrc: null\n    sourceName: youtube\nvolume: 100\npaused: false\nstate:\n  time: 1500467109\n  position: 60000\n  connected: true\n  ping: 50\nvoice:\n  token: \"...\"\n  endpoint: \"...\"\n  sessionId: \"...\"\nfilters: { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Filters Payload JSON\nDESCRIPTION: This JSON payload demonstrates the configuration of various audio filters available in Lavalink, including equalizer, karaoke, timescale, tremolo, vibrato, rotation, distortion, channel mix, low pass, and plugin filters. It showcases the structure for setting filter parameters and plugin-specific configurations. It includes fields for volume, equalizer bands, and specific settings for each filter.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"volume\": 1.0,\n  \"equalizer\": [\n    {\n      \"band\": 0,\n      \"gain\": 0.2\n    }\n  ],\n  \"karaoke\": {\n    \"level\": 1.0,\n    \"monoLevel\": 1.0,\n    \"filterBand\": 220.0,\n    \"filterWidth\": 100.0\n  },\n  \"timescale\": {\n    \"speed\": 1.0,\n    \"pitch\": 1.0,\n    \"rate\": 1.0\n  },\n  \"tremolo\": {\n    \"frequency\": 2.0,\n    \"depth\": 0.5\n  },\n  \"vibrato\": {\n    \"frequency\": 2.0,\n    \"depth\": 0.5\n  },\n  \"rotation\": {\n    \"rotationHz\": 0\n  },\n  \"distortion\": {\n    \"sinOffset\": 0.0,\n    \"sinScale\": 1.0,\n    \"cosOffset\": 0.0,\n    \"cosScale\": 1.0,\n    \"tanOffset\": 0.0,\n    \"tanScale\": 1.0,\n    \"offset\": 0.0,\n    \"scale\": 1.0\n  },\n  \"channelMix\": {\n    \"leftToLeft\": 1.0,\n    \"leftToRight\": 0.0,\n    \"rightToLeft\": 0.0,\n    \"rightToRight\": 1.0\n  },\n  \"lowPass\": {\n    \"smoothing\": 20.0\n  },\n  \"pluginFilters\": {\n    \"myPlugin\": {\n      \"myPluginKey\": \"myPluginValue\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TrackStartEvent Payload Example (JSON)\nDESCRIPTION: This JSON payload represents an example of the TrackStartEvent, which is dispatched when a track starts playing. It contains information about the track, including its encoded data and various metadata such as identifier, author, length, and title. This event is triggered by the Lavalink server when a new track begins playback.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"TrackStartEvent\",\n  \"guildId\": \"...\",\n  \"track\": {\n    \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n    \"info\": {\n      \"identifier\": \"dQw4w9WgXcQ\",\n      \"isSeekable\": true,\n      \"author\": \"RickAstleyVEVO\",\n      \"length\": 212000,\n      \"isStream\": false,\n      \"position\": 0,\n      \"title\": \"Rick Astley - Never Gonna Give You Up\",\n      \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n      \"isrc\": null,\n      \"sourceName\": \"youtube\"\n    },\n    \"pluginInfo\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lavalink with docker-compose.yml\nDESCRIPTION: This snippet shows how to define the Lavalink service within a `docker-compose.yml` file. It includes setting the image version, container name, restart policy, Java options, server port, password, volumes for configuration and plugins, network configuration, and port mappings for external access. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/docker.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  lavalink:\n    # pin the image version to Lavalink v4\n    image: ghcr.io/lavalink-devs/lavalink:4\n    container_name: lavalink\n    restart: unless-stopped\n    environment:\n      # set Java options here\n      - _JAVA_OPTIONS=-Xmx6G\n      # set lavalink server port\n      - SERVER_PORT=2333\n      # set password for lavalink\n      - LAVALINK_SERVER_PASSWORD=youshallnotpass\n    volumes:\n      # mount application.yml from the same directory or use environment variables\n      - ./application.yml:/opt/Lavalink/application.yml\n      # persist plugins between restarts, make sure to set the correct permissions (user: 322, group: 322)\n      - ./plugins/:/opt/Lavalink/plugins/\n    networks:\n      - lavalink\n    expose:\n      # lavalink exposes port 2333 to connect to for other containers (this is for documentation purposes only)\n      - 2333\n    ports:\n      # you only need this if you want to make your lavalink accessible from outside of containers\n      - \"2333:2333\"\nnetworks:\n  # create a lavalink network you can add other containers to, to give them access to Lavalink\n  lavalink:\n    name: lavalink\n```\n\n----------------------------------------\n\nTITLE: Implementing RestInterceptor - Java\nDESCRIPTION: This snippet shows how to implement the RestInterceptor interface to intercept and modify existing REST endpoints in Lavalink. It uses the @Service annotation to register the class as a bean. This allows customization of the request/response flow for Lavalink's REST API.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Service;\nimport dev.arbjerg.lavalink.api.RestInterceptor;\n\n@Service\nclass TestRequestInterceptor implements RestInterceptor {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Ready OP Payload in JSON for Lavalink\nDESCRIPTION: Illustrates an example of the 'ready' OP payload sent by Lavalink upon successful connection. It indicates whether the session was resumed and includes the Lavalink session ID. The `sessionId` is vital for resuming connections.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"ready\",\n  \"resumed\": false,\n  \"sessionId\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Example\nDESCRIPTION: Shows an example of the `Authorization` header required for most Lavalink REST API routes. The value is the configured password for the Lavalink server.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nAuthorization: youshallnotpass\n```\n\n----------------------------------------\n\nTITLE: Example Player Update OP Payload in JSON for Lavalink\nDESCRIPTION: Demonstrates an example of the 'playerUpdate' OP payload, dispatched periodically with the current state of the player.  It includes the guild ID and a 'state' object containing information such as timestamp, position, connection status, and ping. This payload provides real-time player status updates.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"playerUpdate\",\n  \"guildId\": \"...\",\n  \"state\": {\n    \"time\": 1500467109,\n    \"position\": 60000,\n    \"connected\": true,\n    \"ping\": 50\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Lavalink Stats Payload (JSON)\nDESCRIPTION: This JSON payload provides an example of the Lavalink stats endpoint's response.  It contains information about the number of players, playing players, uptime, memory usage (free, used, allocated, reservable), and CPU load (cores, systemLoad, lavalinkLoad). Note: frameStats is always missing.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"players\": 1,\n  \"playingPlayers\": 1,\n  \"uptime\": 123456789,\n  \"memory\": {\n    \"free\": 123456789,\n    \"used\": 123456789,\n    \"allocated\": 123456789,\n    \"reservable\": 123456789\n  },\n  \"cpu\": {\n    \"cores\": 4,\n    \"systemLoad\": 0.5,\n    \"lavalinkLoad\": 0.5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lavalink Systemd Service File\nDESCRIPTION: This snippet defines the `lavalink.service` file for managing Lavalink as a Systemd service.  It configures the service's description, user, group, working directory, execution command, restart policy, and installation settings.  The user and working directory must be configured correctly.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/systemd.md#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\n# Describe the service\nDescription=Lavalink Service\n\n# Configure service order\nAfter=syslog.target network.target\n\n[Service]\n# The user which will run Lavalink\nUser=<usr>\n\n# The group which will run Lavalink\nGroup=<usr>\n\n# Where the program should start\nWorkingDirectory=</home/usr/lavalink>\n\n# The command to start Lavalink\nExecStart=java -Xmx4G -jar </home/usr/lavalink>/Lavalink.jar\n\n# Restart the service if it crashes\nRestart=on-failure\n\n# Delay each restart by 5s\nRestartSec=5s\n\n[Install]\n# Start this service as part of normal system start-up\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: GET Track Loading Endpoint\nDESCRIPTION: Example of a GET request to the `/v4/loadtracks` endpoint for resolving audio tracks. The `identifier` parameter specifies the track to load.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nGET /v4/loadtracks?identifier=dQw4w9WgXcQ\n```\n\n----------------------------------------\n\nTITLE: Resuming Session Header Example\nDESCRIPTION: This snippet shows an example of the HTTP header used to resume a Lavalink session. The `Session-Id` header contains the ID of the session to resume, and the `Session-Resumed` header in the response indicates whether the session was successfully resumed.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/index.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nSession-Id: The id of the session you want to resume.\n\nSession-Resumed: true\n```\n\n----------------------------------------\n\nTITLE: Decoding Multiple Tracks - POST\nDESCRIPTION: This endpoint decodes multiple audio tracks. It requires a POST request to the `/v4/decodetracks` endpoint with the request body containing an array of base64 encoded track data strings. The response is an array of [Track](#track) objects, each containing metadata for the decoded tracks.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v4/decodetracks\n```\n\n----------------------------------------\n\nTITLE: Getting All Players Payload YAML\nDESCRIPTION: This YAML payload represents an example response when retrieving all players in a Lavalink session. It includes information about each player, such as guild ID, track details (encoded track data and metadata), volume, paused state, connection status, voice server information (token, endpoint, session ID), and active filters. The track info includes identifier, seekable status, author, length, stream flag, position, title, URI, artwork URL, ISRC, and source name.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- guildId: \"...\"\n  track:\n    encoded: \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\"\n    info:\n      identifier: dQw4w9WgXcQ\n      isSeekable: true\n      author: RickAstleyVEVO\n      length: 212000\n      isStream: false\n      position: 60000\n      title: Rick Astley - Never Gonna Give You Up\n      uri: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n      artworkUrl: https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\n      isrc: null\n      sourceName: youtube\n    pluginInfo: { ... }\n    userData: { ... }\n  volume: 100\n  paused: false\n  state:\n    time: 1500467109\n    position: 60000\n    connected: true\n    ping: 50\n  voice:\n    token: \"...\"\n    endpoint: \"...\"\n    sessionId: \"...\"\n  filters: { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Adding AudioSourceManager Bean - Java\nDESCRIPTION: This snippet demonstrates how to add a custom Lavaplayer AudioSourceManager to Lavalink by providing it as a Spring bean. It uses the @Service annotation to register the class as a bean in the Spring context. This bean will be automatically detected and used by Lavalink.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Service;\n\n@Service\nclass MyAudioSourceManager implements AudioSourceManager {\n    // ...\n} \n```\n\n----------------------------------------\n\nTITLE: Implementing AudioPluginInfoModifier - Java\nDESCRIPTION: This snippet shows how to implement the AudioPluginInfoModifier interface to add custom info to track and playlist JSON responses in Lavalink. It uses the @Service annotation to register the class as a bean. This allows enriching the JSON data returned by Lavalink with plugin-specific information.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Service;\nimport dev.arbjerg.lavalink.api.AudioPluginInfoModifier;\n\n@Service\nclass TestAudioPluginInfoModifier implements AudioPluginInfoModifier {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding a Single Track - GET\nDESCRIPTION: This endpoint decodes a single audio track using a base64 encoded string. It requires a GET request to the `/v4/decodetrack` endpoint with the `encodedTrack` parameter set to the base64 encoded data of the track. The response will be a [Track](#track) object containing the track's metadata.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v4/decodetrack?encodedTrack=BASE64\n```\n\n----------------------------------------\n\nTITLE: Get Lavalink Info REST Endpoint (GET)\nDESCRIPTION: This endpoint retrieves information about the Lavalink server, including versions, build time, git information, JVM version, Lavaplayer version, source managers, filters, and plugins.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_22\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v4/info\n```\n\n----------------------------------------\n\nTITLE: Lavalink Configuration Environment Variables\nDESCRIPTION: These are example environment variables that can be used to configure Lavalink. Environment variables override the settings defined in the application.yml file. These variables cover various settings like server configuration, plugin dependencies, audio sources, filters, and logging configurations.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/index.md#_snippet_1\n\nLANGUAGE: ENV\nCODE:\n```\nSERVER_PORT\nSERVER_ADDRESS\nSERVER_HTTP2_ENABLED\n\nLAVALINK_PLUGINS_0_DEPENDENCY\nLAVALINK_PLUGINS_0_REPOSITORY\nLAVALINK_PLUGINS_0_SNAPSHOT\n\nLAVALINK_PLUGINS_1_DEPENDENCY\nLAVALINK_PLUGINS_1_REPOSITORY\nLAVALINK_PLUGINS_1_SNAPSHOT\n\nLAVALINK_PLUGINS_DIR\nLAVALINK_DEFAULT_PLUGIN_REPOSITORY\nLAVALINK_DEFAULT_PLUGIN_SNAPSHOT_REPOSITORY\n\nLAVALINK_SERVER_PASSWORD\nLAVALINK_SERVER_SOURCES_YOUTUBE\nLAVALINK_SERVER_SOURCES_BANDCAMP\nLAVALINK_SERVER_SOURCES_SOUNDCLOUD\nLAVALINK_SERVER_SOURCES_TWITCH\nLAVALINK_SERVER_SOURCES_VIMEO\nLAVALINK_SERVER_SOURCES_NICO\nLAVALINK_SERVER_SOURCES_HTTP\nLAVALINK_SERVER_SOURCES_LOCAL\n\nLAVALINK_SERVER_FILTERS_VOLUME\nLAVALINK_SERVER_FILTERS_EQUALIZER\nLAVALINK_SERVER_FILTERS_KARAOKE\nLAVALINK_SERVER_FILTERS_TIMESCALE\nLAVALINK_SERVER_FILTERS_TREMOLO\nLAVALINK_SERVER_FILTERS_VIBRATO\nLAVALINK_SERVER_FILTERS_DISTORTION\nLAVALINK_SERVER_FILTERS_ROTATION\nLAVALINK_SERVER_FILTERS_CHANNEL_MIX\nLAVALINK_SERVER_FILTERS_LOW_PASS\n\nLAVALINK_SERVER_NON_ALLOCATING_FRAME_BUFFER\nLAVALINK_SERVER_BUFFER_DURATION_MS\nLAVALINK_SERVER_FRAME_BUFFER_DURATION_MS\nLAVALINK_SERVER_OPUS_ENCODING_QUALITY\nLAVALINK_SERVER_RESAMPLING_QUALITY\nLAVALINK_SERVER_TRACK_STUCK_THRESHOLD_MS\nLAVALINK_SERVER_USE_SEEK_GHOSTING\n\nLAVALINK_SERVER_PLAYER_UPDATE_INTERVAL\nLAVALINK_SERVER_YOUTUBE_PLAYLIST_LOAD_LIMIT\nLAVALINK_SERVER_YOUTUBE_SEARCH_ENABLED\nLAVALINK_SERVER_SOUNDCLOUD_SEARCH_ENABLED\n\nLAVALINK_SERVER_GC_WARNINGS\n\nLAVALINK_SERVER_RATELIMIT_IP_BLOCKS\nLAVALINK_SERVER_RATELIMIT_EXCLUDE_IPS\nLAVALINK_SERVER_RATELIMIT_STRATEGY\nLAVALINK_SERVER_RATELIMIT_SEARCH_TRIGGERS_FAIK\nLAVALINK_SERVER_RATELIMIT_RETRY_LIMIT\n\nLAVALINK_SERVER_YOUTUBE_CONFIG_EMAIL\nLAVALINK_SERVER_YOUTUBE_CONFIG_PASSWORD\n\nLAVALINK_SERVER_HTTP_CONFIG_PROXY_HOST\nLAVALINK_SERVER_HTTP_CONFIG_PROXY_PORT\nLAVALINK_SERVER_HTTP_CONFIG_PROXY_USER\nLAVALINK_SERVER_HTTP_CONFIG_PROXY_PASSWORD\n\nMETRICS_PROMETHEUS_ENABLED\nMETRICS_PROMETHEUS_ENDPOINT\n\nSENTRY_DSN\nSENTRY_ENVIRONMENT\nSENTRY_TAGS_SOME_KEY\nSENTRY_TAGS_ANOTHER_KEY\n\nLOGGING_FILE_PATH\nLOGGING_LEVEL_ROOT\nLOGGING_LEVEL_LAVALINK\n\nLOGGING_REQUEST_ENABLED\nLOGGING_REQUEST_INCLUDE_CLIENT_INFO\nLOGGING_REQUEST_INCLUDE_HEADERS\nLOGGING_REQUEST_INCLUDE_QUERY_STRING\nLOGGING_REQUEST_INCLUDE_PAYLOAD\nLOGGING_REQUEST_MAX_PAYLOAD_LENGTH\n\nLOGGING_LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE\nLOGGING_LOGBACK_ROLLINGPOLICY_MAX_HISTORY\n```\n\n----------------------------------------\n\nTITLE: Example Event OP Payload in YAML for Lavalink\nDESCRIPTION: Demonstrates a sample 'event' OP payload in YAML format, dispatched when player or voice events occur on the Lavalink server.  It includes the event type, guild ID, and additional fields specific to the event type. This payload enables clients to react to various events occurring within the Lavalink system.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"...\",\n  \"guildId\": \"...\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Plugin Repository Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to override the default plugin repositories in Lavalink's `application.yml` file. It allows specifying custom release and snapshot repository URLs. This is useful for using private or custom Maven repositories for plugins.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlavalink:\n  defaultPluginRepository: \"https://maven.example.com/releases\" # optional, defaults to https://maven.lavalink.dev/releases\n  defaultPluginSnapshotRepository: \"https://maven.example.com/snapshots\" # optional, defaults to https://maven.lavalink.dev/snapshots\n```\n\n----------------------------------------\n\nTITLE: Netplan Configuration for Tunnelbroker IPv6 with /48\nDESCRIPTION: This YAML snippet shows a netplan configuration for using Tunnelbroker IPv6 with a /48 block. It configures the tunnel interface, specifies the remote and local IPv4 addresses, assigns the IPv6 /48 address, and defines a default IPv6 route through the tunnel. Remember to substitute placeholder IPv4/IPv6 values with your specific IPs.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nnetwork:\n  version: 2\n  tunnels:\n    he-ipv6:\n      mode: sit\n      remote: 216.218.142.50\n      local: 195.xxx.xx.xxx\n      addresses:\n        - \"2001:470:xxxx::2/48\"\n      routes:\n        - to: default\n          via: \"2001:470:xxxx::1\"\n```\n\n----------------------------------------\n\nTITLE: Get Lavalink Stats REST Endpoint (GET)\nDESCRIPTION: This endpoint retrieves statistics about the Lavalink server, including player counts, uptime, memory usage, and CPU load.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_26\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v4/stats\n```\n\n----------------------------------------\n\nTITLE: RoutePlanner Status Payload Example\nDESCRIPTION: Example payload for the RoutePlanner status, showing the class of the RoutePlanner (e.g., RotatingNanoIpRoutePlanner) and its details, including information about IP block, failing addresses, and indices.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"class\": \"RotatingNanoIpRoutePlanner\",\n  \"details\": {\n    \"ipBlock\": {\n      \"type\": \"Inet6Address\",\n      \"size\": \"1208925819614629174706176\"\n    },\n    \"failingAddresses\": [\n      {\n        \"failingAddress\": \"/1.0.0.0\",\n        \"failingTimestamp\": 1573520707545,\n        \"failingTime\": \"Mon Nov 11 20:05:07 EST 2019\"\n      }\n    ],\n    \"blockIndex\": \"0\",\n    \"currentAddressIndex\": \"36792023813\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Non-Local Binding (IPv6)\nDESCRIPTION: This shell snippet enables non-local binding for IPv6, allowing applications to bind to IPv6 addresses that are not directly assigned to the server. This is needed by Lavalink for IPv6 usage.  It also configures the setting persistently by writing it to /etc/sysctl.conf.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsysctl -w net.ipv6.ip_nonlocal_bind=1\necho 'net.ipv6.ip_nonlocal_bind = 1' >> /etc/sysctl.conf\n```\n\n----------------------------------------\n\nTITLE: Example Error Response Payload\nDESCRIPTION: An example JSON payload returned when Lavalink encounters an error. It includes the timestamp, HTTP status code, error message, stack trace (if requested), and the request path.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1667857581613,\n  \"status\": 404,\n  \"error\": \"Not Found\",\n  \"trace\": \"...\",\n  \"message\": \"Session not found\",\n  \"path\": \"/v4/sessions/xtaug914v9k5032f/players/817327181659111454\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable nonlocal bind for IPv6\nDESCRIPTION: This command enables nonlocal bind for IPv6, allowing applications to bind to IPv6 addresses that are not directly assigned to the interface. The second command persists this setting across reboots.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/ubuntudebian.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv6.ip_nonlocal_bind=1\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 'net.ipv6.ip_nonlocal_bind=1' >> /etc/sysctl.conf\n```\n\n----------------------------------------\n\nTITLE: Enabling Nonlocal Bind\nDESCRIPTION: This command enables nonlocal bind for IPv6, allowing applications to bind to IPv6 addresses that are not directly assigned to the interface. It's crucial for Lavalink to listen on the IPv6 address.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv6.ip_nonlocal_bind=1\n```\n\n----------------------------------------\n\nTITLE: Enabling nonlocal bind (sysctl)\nDESCRIPTION: This command enables nonlocal bind for IPv6. This allows applications to bind to specific IPv6 addresses on the interface. It's a prerequisite for using the provided IPv6 address.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/hetzner.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsysctl -w net.ipv6.ip_nonlocal_bind=1\n```\n\n----------------------------------------\n\nTITLE: Unmark a Failed Address\nDESCRIPTION: Unmarks a specific IP address as failed within the RoutePlanner. Requires the address to be in the same IP block. A 204 response indicates success.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_30\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v4/routeplanner/free/address\n```\n\n----------------------------------------\n\nTITLE: Updating Player Payload YAML\nDESCRIPTION: This YAML payload represents an example of a request to update a Lavalink player. It includes options to set a new track (either by encoded data or identifier), end time, volume, pause state, filters, and voice server information (token, endpoint, session ID). The `track` field includes the base64 encoded track and an identifier, which are mutually exclusive. User data can be attached as additional track information.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntrack:\n  encoded: \"...\"\n  identifier: \"...\"       \n  userData: { ... }\nendTime: 0\nvolume: 100\nposition: 32400\npaused: false\nfilters: { ... }\nvoice:\n  token: \"...\"\n  endpoint: \"...\"\n  sessionId: \"...\"\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Local IPv6 Route\nDESCRIPTION: This command replaces the local IPv6 route to properly route traffic to the assigned IPv6 address.  It's a crucial step in configuring IPv6 networking.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nip -6 route replace local the-ipv6-you-copied::/64 dev lo\n```\n\n----------------------------------------\n\nTITLE: Example Session Response Payload (JSON)\nDESCRIPTION: This JSON payload provides an example of the response after a session update.  It shows the 'resuming' and 'timeout' values that are returned.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resuming\": true,\n  \"timeout\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Test IPv6 Connectivity\nDESCRIPTION: Tests the IPv6 connection by pinging Google's IPv6 address.  This verifies that the IPv6 configuration is working correctly. Alternatively, a different IPv6 address can be used.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/digitalocean.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nping6 google.com\n```\n\nLANGUAGE: Shell\nCODE:\n```\nping6 2001:4860:4860::8888\n```\n\n----------------------------------------\n\nTITLE: Reboot Server\nDESCRIPTION: Reboots the server, which is required after enabling IPv6 to apply the configuration changes.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/digitalocean.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nreboot\n```\n\n----------------------------------------\n\nTITLE: Example Track Result Payload\nDESCRIPTION: An example JSON payload for a track loading result with `loadType` set to `track`. It contains the encoded track data, track info, plugin info, and user data.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"loadType\": \"track\",\n  \"data\": {\n    \"encoded\": \"...\",\n    \"info\": { ... },\n    \"pluginInfo\": { ... },\n    \"userData\": { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test IPv6 Connectivity\nDESCRIPTION: This command tests IPv6 connectivity by sending ICMP Echo Request packets to google.com using the specified IPv6 address as the source.  Replace the placeholder IPv6 address with the configured IPv6 address to test.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/ubuntudebian.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Replace 1234:1234:1234:: with your IPv6 address.\nping6 -I 1234:1234:1234:: -c 2 google.com\nping6 -I 1234:1234:1234::1 -c 2 google.com\nping6 -I 1234:1234:1234::2 -c 2 google.com\nping6 -I 1234:1234:1234:dead:beef:1234:1234 -c 2 google.com\n```\n\n----------------------------------------\n\nTITLE: Adding MediaContainerProbe Bean - Java\nDESCRIPTION: This snippet demonstrates how to add a custom MediaContainerProbe to Lavalink by providing it as a Spring bean. It uses the @Service annotation to register the class as a bean in the Spring context. This probe will be used with HTTP and local sources to determine media container information.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Service;\n\n@Service\nclass MyMediaContainerProbe implements MediaContainerProbe {\n    // ...\n} \n```\n\n----------------------------------------\n\nTITLE: TrackExceptionEvent Payload Example (JSON)\nDESCRIPTION: This JSON payload exemplifies the TrackExceptionEvent, dispatched when a track throws an exception.  It features the track details alongside an 'exception' object that encapsulates the error's message, severity, and cause. This allows for detailed error handling and reporting on the client side.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"TrackExceptionEvent\",\n  \"guildId\": \"...\",\n  \"track\": {\n    \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n    \"info\": {\n      \"identifier\": \"dQw4w9WgXcQ\",\n      \"isSeekable\": true,\n      \"author\": \"RickAstleyVEVO\",\n      \"length\": 212000,\n      \"isStream\": false,\n      \"position\": 0,\n      \"title\": \"Rick Astley - Never Gonna Give You Up\",\n      \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n      \"isrc\": null,\n      \"sourceName\": \"youtube\"\n    },\n    \"pluginInfo\": {}\n  },\n  \"exception\": {\n    \"message\": \"...\",\n    \"severity\": \"common\",\n    \"cause\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Netplan Configuration for Tunnelbroker IPv6\nDESCRIPTION: This YAML snippet demonstrates a basic netplan configuration for establishing an IPv6 tunnel using Tunnelbroker. It defines the tunnel interface, specifies remote and local IPv4 addresses, assigns an IPv6 address, and configures a default route via the tunnel. Ensure to replace placeholder IPv4/IPv6 values with actual IPs.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nnetwork:\n  version: 2\n  tunnels:\n    he-ipv6:\n      mode: sit\n      remote: 216.218.142.50\n      local: 195.xxx.xx.xxx\n      addresses:\n        - \"2001:470:xxxx:xxx::2/64\"\n      routes:\n        - to: default\n          via: \"2001:470:xxxx:xxx::1\"\n```\n\n----------------------------------------\n\nTITLE: Get Lavalink Version REST Endpoint (GET)\nDESCRIPTION: This endpoint retrieves the version of the Lavalink server. It returns a simple string representing the version number.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_24\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /version\n```\n\n----------------------------------------\n\nTITLE: TrackStuckEvent Payload Example (JSON)\nDESCRIPTION: This JSON payload demonstrates the TrackStuckEvent, which is triggered when a track gets stuck during playback.  It contains the track information, similar to previous events, and also includes a 'thresholdMs' field representing the time in milliseconds that the track was stuck. This allows clients to identify and handle cases where playback is interrupted or stalled.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"TrackStuckEvent\",\n  \"guildId\": \"...\",\n  \"track\": {\n    \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n    \"info\": {\n      \"identifier\": \"dQw4w9WgXcQ\",\n      \"isSeekable\": true,\n      \"author\": \"RickAstleyVEVO\",\n      \"length\": 212000,\n      \"isStream\": false,\n      \"position\": 0,\n      \"title\": \"Rick Astley - Never Gonna Give You Up\",\n      \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n      \"isrc\": null,\n      \"sourceName\": \"youtube\"\n    },\n    \"pluginInfo\": {}\n  },\n  \"thresholdMs\": 123456789\n}\n```\n\n----------------------------------------\n\nTITLE: Get RoutePlanner Status\nDESCRIPTION: Retrieves the status of the Lavalink RoutePlanner. A 204 response indicates the RoutePlanner is disabled. A 200 response provides details about the RoutePlanner, including its class and status details.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_28\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v4/routeplanner/status\n```\n\n----------------------------------------\n\nTITLE: Example WebSocket Payload in YAML for Lavalink\nDESCRIPTION: Demonstrates a sample WebSocket payload formatted in YAML for communication with Lavalink.  The payload includes an 'op' field representing the operation type and other additional fields based on the specific operation.  This example shows the basic structure of messages sent over the WebSocket connection.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"op\": \"...\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Player Payload YAML\nDESCRIPTION: This YAML payload is an example of the response after successfully updating a Lavalink player. It provides updated details of the player including the guild ID, the current track (with encoded data, track information and user data), volume, pause state, state information (time, position, connection and ping), voice connection details and filters applied. The track info contains identifier, seekable status, author, length, stream status, position, title, URI, artwork URL, ISRC, and source name.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nguildId: \"...\"\ntrack:\n  encoded: \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\"\n  info:\n    identifier: dQw4w9WgXcQ\n    isSeekable: true\n    author: RickAstleyVEVO\n    length: 212000\n    isStream: false\n    position: 60000\n    title: Rick Astley - Never Gonna Give You Up\n    uri: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n    artworkUrl: https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\n    isrc: null\n    sourceName: youtube\nvolume: 100\npaused: false\nstate:\n  time: 1500467109\n  position: 60000\n  connected: true\n  ping: 50         \nvoice:\n  token: \"...\"\n  endpoint: \"...\"\n  sessionId: \"...\"\nfilters: { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Displaying IP Addresses\nDESCRIPTION: This command displays all IP addresses assigned to the server's network interfaces, including the IPv6 address. It helps to identify the correct IPv6 address to use for configuration.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nip a\n```\n\n----------------------------------------\n\nTITLE: Check for IPv6 address\nDESCRIPTION: This command is used to display the network interfaces and their associated IP addresses, including IPv6 addresses. It helps determine if IPv6 is already configured by the provider.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/ubuntudebian.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nip a\n```\n\n----------------------------------------\n\nTITLE: Unmark All Failed Addresses\nDESCRIPTION: Unmarks all IP addresses that are currently marked as failed in the RoutePlanner.  A 204 response indicates success.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_32\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v4/routeplanner/free/all\n```\n\n----------------------------------------\n\nTITLE: Example Lavalink Version Response (String)\nDESCRIPTION: This represents the response of the /version endpoint as a plain string.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_25\n\nLANGUAGE: TEXT\nCODE:\n```\n4.0.0\n```\n\n----------------------------------------\n\nTITLE: Example Tracks Payload - YAML\nDESCRIPTION: This YAML payload illustrates a sample array of encoded track strings used when decoding multiple tracks, providing a structure for sending multiple tracks in a single request for decoding.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n[\n  \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: WebSocketClosedEvent Payload Example (JSON)\nDESCRIPTION: This JSON payload provides an example of the WebSocketClosedEvent, which is dispatched when the audio WebSocket connection to Discord is closed.  It includes a 'code' representing the Discord close event code, a 'reason' for the closure, and a boolean 'byRemote' indicating whether Discord closed the connection.  This is crucial for diagnosing and handling connection issues with the Discord voice server.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"WebSocketClosedEvent\",\n  \"guildId\": \"...\",\n  \"code\": 4006,\n  \"reason\": \"Your session is no longer valid.\",\n  \"byRemote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Decoded Tracks Payload - YAML\nDESCRIPTION: This YAML payload provides an example of the response containing an array of decoded track objects, each with its encoded string and metadata, returned when decoding multiple tracks.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n[\n  {\n    \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n    \"info\": {\n      \"identifier\": \"dQw4w9WgXcQ\",\n      \"isSeekable\": true,\n      \"author\": \"RickAstleyVEVO\",\n      \"length\": 212000,\n      \"isStream\": false,\n      \"position\": 0,\n      \"title\": \"Rick Astley - Never Gonna Give You Up\",\n      \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n      \"isrc\": null,\n      \"sourceName\": \"youtube\"\n    },\n    \"pluginInfo\": { ... },\n    \"userData\": { ... }\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Example Error Result Payload\nDESCRIPTION: An example JSON payload for a track loading result with `loadType` set to `error`. It contains an Exception object with error details.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"loadType\": \"error\",\n  \"data\": { \n    \"message\": \"Something went wrong\",\n    \"severity\": \"fault\",\n    \"cause\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TrackEndEvent Payload Example (JSON)\nDESCRIPTION: This JSON payload represents an example of the TrackEndEvent, which is dispatched when a track ends.  It includes the track information, similar to the TrackStartEvent, and also contains a 'reason' field indicating why the track ended. This allows clients to understand the cause of the track ending, such as finishing, being stopped, or encountering an error.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"event\",\n  \"type\": \"TrackEndEvent\",\n  \"guildId\": \"...\",\n  \"track\": {\n    \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n    \"info\": {\n      \"identifier\": \"dQw4w9WgXcQ\",\n      \"isSeekable\": true,\n      \"author\": \"RickAstleyVEVO\",\n      \"length\": 212000,\n      \"isStream\": false,\n      \"position\": 0,\n      \"title\": \"Rick Astley - Never Gonna Give You Up\",\n      \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n      \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n      \"isrc\": null,\n      \"sourceName\": \"youtube\"\n    },\n    \"pluginInfo\": {}\n  },\n  \"reason\": \"finished\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Empty Result Payload\nDESCRIPTION: An example JSON payload for a track loading result with `loadType` set to `empty`. It contains an empty object as the data.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"loadType\": \"empty\",\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Disconnect Event to Discord\nDESCRIPTION: This JSON payload represents a Discord event that must be sent when the Lavalink server dies unexpectedly. This event disconnects the bot from the voice channel, preventing audio issues.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/index.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"op\": 4,\n  \"d\": {\n    \"self_deaf\": false,\n    \"guild_id\": \"GUILD_ID_HERE\",\n    \"channel_id\": null,\n    \"self_mute\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Playlist Result Payload\nDESCRIPTION: An example JSON payload for a track loading result with `loadType` set to `playlist`. It contains playlist info, plugin info, and an array of track objects.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"loadType\": \"playlist\",\n  \"data\": {\n    \"info\": { ... },\n    \"pluginInfo\": { ... },\n    \"tracks\": [ ... ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ping Test with specific IPv6 Source and /48\nDESCRIPTION: This `cmd` snippet tests IPv6 connectivity using a specific IPv6 source address when using a /48 block. It sends ping requests to `google.com` using the IPv6 address obtained from Tunnelbroker to verify proper routing and connectivity. The example command is for `/48`. Replace `2001:470:xxxx:dead::beef` with your actual assigned IPv6.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nping6 -I 2001:470:xxxx:dead::beef google.com\n```\n\n----------------------------------------\n\nTITLE: Ping Test with specific IPv6 Source\nDESCRIPTION: This `cmd` snippet tests IPv6 connectivity using a specific IPv6 source address. It sends ping requests to `google.com` using the IPv6 address obtained from Tunnelbroker to verify proper routing and connectivity.  The example command is for `/64`. Replace `2001:470:xxxx:xxx:dead::beef` with your actual assigned IPv6.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nping6 -I 2001:470:xxxx:xxx:dead::beef google.com\n```\n\n----------------------------------------\n\nTITLE: Example Search Result Payload\nDESCRIPTION: An example JSON payload for a track loading result with `loadType` set to `search`. It contains an array of track objects from the search result.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"loadType\": \"search\",\n  \"data\": [\n    {\n      \"encoded\": \"...\",\n      \"info\": { ... },\n      \"pluginInfo\": { ... },\n      \"userData\": { ... }\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Test Specific IPv6 Address\nDESCRIPTION: Tests the IPv6 connection using a specific IPv6 address as the source interface.  The `-I` flag specifies the interface to use for pinging. The `-c 2` flag sends two ping packets.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/digitalocean.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Don't forgot to replace IPv6 in the example with your IPv6 address.\nping6 -I 2400:6180:0:d0::fa6:2000 -c 2 google.com\nping6 -I 2400:6180:0:d0::fa6:2001 -c 2 google.com\nping6 -I 2400:6180:0:d0::fa6:2002 -c 2 google.com\nping6 -I 2400:6180:0:d0::fa6:2003 -c 2 google.com\nping6 -I 2400:6180:0:d0::fa6:2004 -c 2 google.com\n...\nping6 -I 2400:6180:0:d0::fa6:200f -c 2 google.com\n```\n\n----------------------------------------\n\nTITLE: Cloud-init Netplan Configuration (Original)\nDESCRIPTION: This YAML snippet represents an original cloud-init netplan configuration with both IPv4 and IPv6 addresses. The example shows an ethernet interface 'ens3' configured with static IPv4 and IPv6 addresses, gateways, and nameservers. This is the configuration that needs to be modified to integrate Tunnelbroker IPv6.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nnetwork:\n    ethernets:\n        ens3:\n            addresses:\n            - 195.xxx.xx.xxx/23\n            - 2402:xxxx:xxxx::xx/128\n            - 2402:xxxx:xxxx:xxxx::a/56\n            gateway4: 195.xxx.xx.x\n            gateway6: 2402:xxxx:xxxx::1\n            match:\n                macaddress: 00:34:a0:e1:de:5d\n            nameservers:\n                addresses:\n                - 8.8.8.8\n                - 8.8.4.4\n                - 2001:4860:4860::8888\n                - 2001:4860:4860::8844\n            routes:\n            -   scope: link\n                to: 195.xxx.xx.x\n                via: 0.0.0.0\n            -   scope: link\n                to: 2402:xxxx:xxxx::1\n                via: ::0\n    version: 2\n```\n\n----------------------------------------\n\nTITLE: Example Track Payload - YAML\nDESCRIPTION: This YAML payload provides an example structure of a decoded track, demonstrating the encoded track string and associated metadata such as identifier, author, length, title, URI, artwork URL, and source name.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n{\n  \"encoded\": \"QAAAjQIAJVJpY2sgQXN0bGV5IC0gTmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXAADlJpY2tBc3RsZXlWRVZPAAAAAAADPCAAC2RRdzR3OVdnWGNRAAEAK2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZFF3NHc5V2dYY1EAB3lvdXR1YmUAAAAAAAAAAA==\",\n  \"info\": {\n    \"identifier\": \"dQw4w9WgXcQ\",\n    \"isSeekable\": true,\n    \"author\": \"RickAstleyVEVO\",\n    \"length\": 212000,\n    \"isStream\": false,\n    \"position\": 0,\n    \"title\": \"Rick Astley - Never Gonna Give You Up\",\n    \"uri\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    \"artworkUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\",\n    \"isrc\": null,\n    \"sourceName\": \"youtube\"\n  },\n  \"pluginInfo\": { ... },\n  \"userData\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroy Player REST Endpoint (DELETE)\nDESCRIPTION: This endpoint destroys the player associated with a specific guild ID within a given session. It requires the session ID and guild ID as path parameters.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_18\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v4/sessions/{sessionId}/players/{guildId}\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Configuration - YAML\nDESCRIPTION: This YAML snippet shows how to configure the directory where Lavalink saves and loads downloaded plugins in `application.yml`. This allows customizing the location of plugin files for organization or security purposes.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlavalink:\n  pluginsDir: \"./lavalink-plugins\" # optional, defaults to \"./plugins\"\n```\n\n----------------------------------------\n\nTITLE: Running Lavalink with Java\nDESCRIPTION: This command executes the Lavalink server. It assumes that the `Lavalink.jar` file is in the current directory and that Java 17 or higher is installed and configured in the system's PATH.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/getting-started/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar Lavalink.jar\n```\n\n----------------------------------------\n\nTITLE: Example Stats OP Payload in JSON for Lavalink\nDESCRIPTION: Illustrates an example of the 'stats' OP payload, dispatched every minute, containing statistics about the Lavalink node.  It includes information such as player counts, uptime, memory usage, CPU load, and frame statistics.  This payload provides insight into the server's performance and resource usage.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/websocket.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"op\": \"stats\",\n  \"players\": 1,\n  \"playingPlayers\": 1,\n  \"uptime\": 123456789,\n  \"memory\": {\n    \"free\": 123456789,\n    \"used\": 123456789,\n    \"allocated\": 123456789,\n    \"reservable\": 123456789\n  },\n  \"cpu\": {\n    \"cores\": 4,\n    \"systemLoad\": 0.5,\n    \"lavalinkLoad\": 0.5\n  },\n  \"frameStats\": {\n    \"sent\": 6000,\n    \"nulled\": 10,\n    \"deficit\": -3010\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependency Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a plugin dependency in Lavalink's `application.yml` file. It specifies the plugin's Maven dependency, an optional custom repository URL, and whether to use the snapshot repository. These settings allow Lavalink to locate and load the plugin.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/plugins.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlavalink:\n  plugins:\n    - dependency: \"com.github.example:example-plugin:x.y.z\" # required, the dependency to your plugin\n      repository: \"https://maven.example.com/releases\" # optional, defaults to https://maven.lavalink.dev/releases for releases\n      snapshot: false # optional, defaults to false, used to tell Lavalink to use the snapshot repository instead of the release repository\n```\n\n----------------------------------------\n\nTITLE: Managing Lavalink Systemd Service\nDESCRIPTION: These commands manage the Lavalink Systemd service.  `systemctl daemon-reload` reloads the systemd manager configuration. `systemctl enable lavalink` enables the service to start on boot.  `systemctl start lavalink` starts the service.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/systemd.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo systemctl daemon-reload\n$ sudo systemctl enable lavalink\n$ sudo systemctl start lavalink\n```\n\n----------------------------------------\n\nTITLE: Running Lavalink JAR\nDESCRIPTION: This command executes the Lavalink JAR file. It requires Java to be installed and accessible in the system's PATH. The command assumes that the Lavalink.jar file and the application.yml configuration file are located in the same directory.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/binary.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar Lavalink.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed Logging in application.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure detailed logging levels for various components within Lavalink using the `application.yml` configuration file. It allows enabling more verbose output for debugging purposes, including WebSocket messages, track exceptions, and REST API requests. The logging levels can be set to TRACE, DEBUG, INFO, WARN, ERROR, or OFF.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/getting-started/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  level:\n    root: INFO\n    # Set this to DEBUG to enable more detailed logging from Lavalink\n    lavalink: DEBUG\n    # Set this to TRACE to see all WebSocket messages sent\n    lavalink.server.io.SocketContext: TRACE\n    # Log all track exceptions (COMMON, SUSPICIOUS & FAULT)\n    com.sedmelluq.discord.lavaplayer.tools.ExceptionTools: DEBUG\n    # Log YouTube Plugin stuff (only needed if you have issues with YouTube)\n    dev.lavalink.youtube: DEBUG\n\n  # This will log all requests to the REST API\n  request:\n    enabled: true\n    includeClientInfo: true\n    includeHeaders: false\n    includeQueryString: true\n    includePayload: true\n```\n\n----------------------------------------\n\nTITLE: Persisting nonlocal bind configuration\nDESCRIPTION: This command ensures that the nonlocal bind setting persists across reboots. It appends the setting to the /etc/sysctl.conf file, which is read during system startup.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/hetzner.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho 'net.ipv6.ip_nonlocal_bind=1' >> /etc/sysctl.conf\n```\n\n----------------------------------------\n\nTITLE: Example Session Update Payload (JSON)\nDESCRIPTION: This JSON payload provides an example of how to update a session's resuming and timeout settings.  It demonstrates setting 'resuming' to false and 'timeout' to 0.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resuming\": false,\n  \"timeout\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling IPv6 on Contabo VPS\nDESCRIPTION: This command enables IPv6 on a Contabo VPS using a built-in utility. It's a prerequisite for configuring IPv6 addresses and requires a subsequent server reboot.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable_ipv6\n```\n\n----------------------------------------\n\nTITLE: Unmark Address Payload Example\nDESCRIPTION: Example payload for unmarking a specific address as failed. The 'address' field specifies the IP address to be unflagged.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": \"1.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud-init Netplan Configuration (Modified)\nDESCRIPTION: This YAML snippet shows a modified cloud-init netplan configuration after removing the original IPv6 configuration to allow Tunnelbroker to manage IPv6 connectivity. The modified file removes the IPv6 addresses, gateway, and route configurations. You will use this modified config when you have a preexisting IPv6 setup from your host and want to switch to Tunnelbroker.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nnetwork:\n    ethernets:\n        ens3:\n            addresses:\n            - 195.xxx.xx.xxx/23\n            gateway4: 195.xxx.xx.x\n            match:\n                macaddress: 00:34:a0:e1:de:5d\n            nameservers:\n                addresses:\n                - 8.8.8.8\n                - 8.8.4.4\n                - 2001:4860:4860::8888\n                - 2001:4860:4860::8844\n            routes:\n            -   scope: link\n                to: 195.xxx.xx.x\n                via: 0.0.0.0\n    version: 2\n```\n\n----------------------------------------\n\nTITLE: Viewing Lavalink Systemd Service Logs\nDESCRIPTION: This command displays the logs for the Lavalink Systemd service using `journalctl`. It requires root privileges to access system logs.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/systemd.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo journalctl -u lavalink\n```\n\n----------------------------------------\n\nTITLE: Persisting Nonlocal Bind\nDESCRIPTION: This command adds a configuration to /etc/sysctl.conf to ensure nonlocal bind is enabled after each server reboot. This ensures the IPv6 configuration persists across reboots.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho 'net.ipv6.ip_nonlocal_bind=1' >> /etc/sysctl.conf\n```\n\n----------------------------------------\n\nTITLE: Rebooting Contabo VPS\nDESCRIPTION: This command reboots the Contabo VPS. It's necessary after enabling IPv6 to apply the changes.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreboot\n```\n\n----------------------------------------\n\nTITLE: Testing IPv6 Connectivity\nDESCRIPTION: These commands test IPv6 connectivity using ping6 with different source IPv6 addresses. Replace '1234:1234:1234::' with the actual IPv6 address. It verifies that the IPv6 network is correctly configured and reachable.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/contabo.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Replace 1234:1234:1234:: with your IPv6 address.\nping6 -I 1234:1234:1234:: -c 2 google.com\nping6 -I 1234:1234:1234::1 -c 2 google.com\nping6 -I 1234:1234:1234::2 -c 2 google.com\nping6 -I 1234:1234:1234:dead:beef:1234:1234 -c 2 google.com\n```\n\n----------------------------------------\n\nTITLE: Replacing IPv6 route\nDESCRIPTION: This command replaces the local IPv6 route with the specific /64 address provided by Hetzner. It ensures that traffic destined for the given IPv6 address is routed correctly through the loopback interface.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/hetzner.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nip -6 route replace local 2a01:4f9:xxxx:xxxx::/64 dev lo\n```\n\n----------------------------------------\n\nTITLE: Replace IPv6 route\nDESCRIPTION: This command replaces the local IPv6 route. It configures the system to route traffic for the specified IPv6 network through the loopback interface. Replace the placeholder IPv6 address with the correct address obtained from the `ip a` command, removing the trailing '1'.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/ubuntudebian.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nip -6 route replace local 2a01:4f9:xxxx:xxxx::/64 dev lo\n```\n\n----------------------------------------\n\nTITLE: Example Lavalink Info Payload (JSON)\nDESCRIPTION: This JSON payload provides an example of the Lavalink info endpoint's response. It includes details such as version information, build time, git commit details, JVM and Lavaplayer versions, enabled source managers and filters, and loaded plugins with their respective versions.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": {\n    \"semver\": \"3.7.0-rc.1+test\",\n    \"major\": 3,\n    \"minor\": 7,\n    \"patch\": 0,\n    \"preRelease\": \"rc.1\",\n    \"build\": \"test\"\n  },\n  \"buildTime\": 1664223916812,\n  \"git\": {\n    \"branch\": \"master\",\n    \"commit\": \"85c5ab5\",\n    \"commitTime\": 1664223916812\n  },\n  \"jvm\": \"18.0.2.1\",\n  \"lavaplayer\": \"1.3.98.4-original\",\n  \"sourceManagers\": [\n    \"youtube\",\n    \"soundcloud\"\n  ],\n  \"filters\": [\n    \"equalizer\",\n    \"karaoke\",\n    \"timescale\",\n    \"channelMix\"\n  ],\n  \"plugins\": [\n    {\n      \"name\": \"some-plugin\",\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"name\": \"foo-plugin\",\n      \"version\": \"1.2.3\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Local IPv6 Route\nDESCRIPTION: This shell snippet replaces the local IPv6 route with the Tunnelbroker assigned IPv6 address. This directs traffic destined for the server's IPv6 address to the loopback interface, ensuring proper routing. Replace `2001:470:xxxx:xxx::/64` with the actual address.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nip -6 route replace local 2001:470:xxxx:xxx::/64 dev lo\n```\n\n----------------------------------------\n\nTITLE: Replace Local IPv6 Route with /48\nDESCRIPTION: This shell snippet replaces the local IPv6 route with the Tunnelbroker assigned IPv6 address when using a /48 block. This directs traffic destined for the server's IPv6 address to the loopback interface, ensuring proper routing.  Replace `2001:470:xxxx::/48` with the actual address.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/tunnelbroker.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nip -6 route replace local 2001:470:xxxx::/48 dev lo\n```\n\n----------------------------------------\n\nTITLE: Testing IPv6 connectivity\nDESCRIPTION: These commands test the IPv6 connectivity using `ping6`. Replace `1234:1234:1234::` with your IPv6 address. Multiple addresses from the given /64 block are pinged to confirm the IPv6 setup.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/configuration/ipv6/hetzner.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Replace 1234:1234:1234:: with your IPv6 address.\nping6 -I 1234:1234:1234:: -c 2 google.com\nping6 -I 1234:1234:1234::1 -c 2 google.com\nping6 -I 1234:1234:1234::2 -c 2 google.com\nping6 -I 1234:1234:1234:dead:beef:1234:1234 -c 2 google.com\n```\n\n----------------------------------------\n\nTITLE: Update Session REST Endpoint (PATCH)\nDESCRIPTION: This endpoint updates an existing session with new configurations for resuming and timeout. The session ID is passed as a path parameter. The request body can include 'resuming' (boolean) and 'timeout' (integer) fields.\nSOURCE: https://github.com/lavalink-devs/lavalink/blob/master/docs/api/rest.md#_snippet_19\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH /v4/sessions/{sessionId}\n```"
  }
]