[
  {
    "owner": "duffelhq",
    "repo": "duffel-components",
    "content": "TITLE: Render DuffelAncillaries React Component\nDESCRIPTION: Renders the `DuffelAncillaries` component with specific props such as `offer_id`, `services`, `passengers`, and `onPayloadReady`. This snippet shows how to integrate the component into a React application.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DuffelAncillaries\n  offer_id=\"fixture_off_1\"\n  services={[\"bags\", \"seats\"]}\n  passengers={[...]}\n  onPayloadReady={console.log}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listen for Payload Ready Event\nDESCRIPTION: Sets up a listener for the `onDuffelAncillariesPayloadReady` event. This event provides the data and metadata needed to send to Duffel's API to create an order, allowing for interaction with the component.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nonDuffelAncillariesPayloadReady((data, metadata) => {\n  console.table(data);\n  console.table(metadata);\n});\n```\n\n----------------------------------------\n\nTITLE: Render DuffelAncillaries Custom Element\nDESCRIPTION: Calls the `renderDuffelAncillariesCustomElement` function to render the custom element with the given properties, such as `offer_id`, `services`, and `passengers`. This sets up the component with the data needed from Duffel's API.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrenderDuffelAncillariesCustomElement({\n  offer_id: \"fixture_off_1\",\n  services: [\"bags\", \"seats\"],\n  passengers: [...],\n});\n```\n\n----------------------------------------\n\nTITLE: Listen for Payload Ready Event (CDN)\nDESCRIPTION: Attaches an event listener to the 'onPayloadReady' event on the custom element. This event contains the data needed to create an order with Duffel's API. The `event.detail` object contains the data.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst duffelAncillariesElement =\n  document.querySelector(\"duffel-ancillaries\");\n\nduffelAncillariesElement.addEventListener(\"onPayloadReady\", (event) =>\n  console.log(\"onPayloadReady\\n\", event.detail),\n);\n```\n\n----------------------------------------\n\nTITLE: Include Custom Element in HTML\nDESCRIPTION: Includes the `duffel-ancillaries` custom element in the HTML. This is the tag that will be rendered by the `renderDuffelAncillariesCustomElement` function.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<duffel-ancillaries></duffel-ancillaries>\n```\n\n----------------------------------------\n\nTITLE: Include Custom Element (CDN)\nDESCRIPTION: Includes the `duffel-ancillaries` custom element tag in the HTML when using the CDN approach.  This tag will be dynamically populated with the component by the script loaded from the CDN.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<duffel-ancillaries></duffel-ancillaries>\n```\n\n----------------------------------------\n\nTITLE: Render Component (CDN)\nDESCRIPTION: Renders the component using the `render` method on the custom element.  This allows you to update the component with new data, such as when passenger information changes.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst duffelAncillariesElement = document.querySelector(\"duffel-ancillaries\");\n\nduffelAncillariesElement.render({\n  offer_id: \"fixture_off_1\",\n  services: [\"bags\", \"seats\"],\n  passengers: [...],\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration (Shell)\nDESCRIPTION: This snippet demonstrates the required environment variables for the 3DS example to function correctly. It includes settings for the Duffel API token, API URL, and Token Proxy URL. These variables need to be added to the `.env.local` file.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/card-with-3ds/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# These are the default values for working with platform and token proxy locally\n# Your values may differ depending on the env/db you are working with\nDUFFEL_API_TOKEN=test_duffel_dev_rw\nDUFFEL_API_URL=https://localhost:4000\nTOKEN_PROXY_URL=https://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: This snippet configures the environment variables required for the Duffel Components full-stack example. It defines the Duffel API URL, API token, and Component CDN URL, allowing the example to interact with the Duffel API in either production or development environments. The file needs to be named `.env.local`.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/using-cdn/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# .env.local\n\n# The Duffel API environment we want to make requests to.\n# Remember to update the key below if this value changes.\n# DUFFEL_API_URL=https://api.duffel.com # production\nDUFFEL_API_URL=https://localhost:4000 # development (for Duffel engineers only)\n\n# Used to authenticate our\n# example server to talk to Duffel\n# DUFFEL_API_TOKEN=duffel_test_**** # production (find it on https://app.duffel.com/YOUR_ORG/test/developers/tokens)\nDUFFEL_API_TOKEN=test_duffel_dev_rw # development (for Duffel engineers only)\n\n\n# The url for the component CDN.\n# This is used to load both the styles an\n# COMPONENT_CDN=https://assets.duffel.com/components # production\nCOMPONENT_CDN=http://localhost:8000 # development\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Shell Script\nDESCRIPTION: This code snippet shows the environment variables needed to configure the duffel-components client-side example. It defines the API URL, API token, and component CDN URL for both production and development environments. These variables are essential for the example to function correctly by authenticating and loading the necessary assets.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/client-side/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# .env.local\n\n# The Duffel API environment we want to make requests to.\n# Remember to update the key below if this value changes.\n# DUFFEL_API_URL=https://api.duffel.com # production\nDUFFEL_API_URL=https://localhost:4000 # development (for Duffel engineers only)\n\n# Used to authenticate our\n# example server to talk to Duffel\n# DUFFEL_API_TOKEN=duffel_test_**** # production\nDUFFEL_API_TOKEN=test_duffel_dev_rw # development (for Duffel engineers only)\n\n\n# The url for the component CDN.\n# This is used to load both the styles an\n# COMPONENT_CDN=https://assets.duffel.com/components/ancillaries/VERSION # production\nCOMPONENT_CDN=http://localhost:8000 # development\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server (Bash)\nDESCRIPTION: This command starts the Next.js development server, typically on port 3000. It allows for hot-reloading and provides a local environment for developing and testing the application. Multiple package managers can be used to execute the command.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/next/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Import React Component\nDESCRIPTION: Imports the `DuffelAncillaries` component from the `@duffel/components` package. This allows you to use the component within your React application.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DuffelAncillaries } from \"@duffel/components\";\n```\n\n----------------------------------------\n\nTITLE: Set Component CDN URL - Shell\nDESCRIPTION: This snippet shows how to configure the component CDN URL in the .env.local file. It includes options for both production and development environments.  The `COMPONENT_CDN` variable specifies the location from which the Duffel component bundle will be loaded.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/payments-custom-element/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# .env.local\n\n# The url for the component CDN.\n# This is used to load both the styles an\n# COMPONENT_CDN=https://assets.duffel.com/components/ancillaries/VERSION # production\nCOMPONENT_CDN=http://localhost:8000 # development\n```\n\n----------------------------------------\n\nTITLE: Import Custom Element Functions\nDESCRIPTION: Imports the necessary functions for rendering and handling events for the `duffel-ancillaries` custom element when using Node.js. These functions are essential for integrating the component.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  renderDuffelAncillariesCustomElement,\n  onDuffelAncillariesPayloadReady,\n} from \"@duffel/components/custom-elements\";\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Build\nDESCRIPTION: This snippet shows the content of the `.env.build` file used for configuring the build environment. It includes settings for the Duffel API URL, the component CDN URL, and the Sentry authentication token. These variables allow for building versions that point to local environments or bypass the cache, and for sending data to Sentry during the build process.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# .env.build\n\n# Include the base url for the Duffel API.\n# This variable is here to give us the ability to build a dist version that points to a local environment.\n# If no value is provided, the default `https://api.duffel.com` will be used.\nDUFFEL_API_URL=https://api.duffel.com\n\n# This is needed so the component knows the url base to use for its stylesheet\n# This variable is here so we can release component versions that may point to local environments or bypass the cache.\n# If no value is provided, the default `https://assets.duffel.com/ancillaries-component` will be used.\nCOMPONENT_CDN=https://assets.duffel.com/components\n\n# The auth token is so we send data\n# to sentry during the build.\n# This is helpful when CI is\n# building releases, locally not as much.\n# You can get it here: https://duffel.sentry.io/settings/account/api/auth-tokens\nSENTRY_AUTH_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Include CDN Script Tag\nDESCRIPTION: Includes a script tag to load the desired component from the Duffel CDN. This approach is used when npm is not available. It's crucial to replace `VERSION` and `COMPONENT` with the correct values.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  Replace VERSION with the desired version.\n  You can find them all on https://www.npmjs.com/package/@duffel/components?activeTab=versions\n\n  Replace COMPONENT with the desired component you'd like to use.\n  You can find the components available in the `./cdn-dist` directory after running `yarn build-and-publish --dry-run`\n\n  For example, for the duffel ancillaries component on version 3.3.1, use:\n  https://assets.duffel.com/components/3.3.1/duffel-ancillaries.js\n-->\n\n<script src=\"https://assets.duffel.com/components/VERSION/COMPONENT.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Build and Run payments-just-typescript Example\nDESCRIPTION: These shell commands navigate to the example directory, install dependencies using yarn, build the TypeScript code, and open the index.html file in Safari to run the example.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/payments-just-typescript/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# change directory to example folder\ncd src/examples/payments-just-typescript\n\n# install new version\nyarn\n\n# build and watch example\nyarn build\n\n# open example\nopen src/index.html -a \"Safari\"\n```\n\n----------------------------------------\n\nTITLE: Build and Run React Example - Shell\nDESCRIPTION: These shell commands navigate to the React example directory, install dependencies using yarn, build the example, and open it in Safari. The `cd` command changes the directory, `yarn` installs the dependencies, `yarn build` compiles the TypeScript code, and `open` opens the index.html file in Safari.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/react-app/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# change directory to example folder\ncd src/examples/react-app\n\n# install new version\nyarn\n\n# build and watch example\nyarn build\n\n# open example\nopen src/index.html -a \"Safari\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running Duffel Components Typescript Example\nDESCRIPTION: This snippet outlines the commands required to navigate to the Typescript example directory, install dependencies using Yarn, build the example, and open the `index.html` file in Safari to view the running example. This process assumes that you are starting from the root of the `duffel-components` repository. The `yarn build` command compiles the Typescript code, creating a `dist` folder with the compiled output, referenced by the HTML file.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/examples/just-typescript/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# change directory to example folder\ncd src/examples/just-typescript\n\n# install new version\nyarn\n\n# build and watch example\nyarn build\n\n# open example\nopen src/index.html -a \"Safari\"\n```\n\n----------------------------------------\n\nTITLE: Install @duffel/components with yarn\nDESCRIPTION: Installs the @duffel/components package using yarn. This is a prerequisite for using the components in a Node.js environment.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @duffel/components\n# -- or --\nnpm i @duffel/components\n```\n\n----------------------------------------\n\nTITLE: CDN Upload Script Execution\nDESCRIPTION: This command executes the script responsible for building and uploading the component to the CDN. The script typically builds the component, uploads the build to a versioned folder on Google Cloud Storage, and uploads sourcemaps to Sentry. It requires a correctly configured `.env.build` file and `gcloud` setup.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn upload-to-cdn\n```\n\n----------------------------------------\n\nTITLE: Build Script for CDN\nDESCRIPTION: This script builds the component specifically for CDN deployment. The output of this build process will be placed in the `./cdn-dist` directory. This build is different from the npm publishing build, potentially optimized for CDN delivery.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn cdn-build # Build will output to ./cdn-dist\n```\n\n----------------------------------------\n\nTITLE: Build Script for npm Publishing\nDESCRIPTION: This script builds the component specifically for npm publishing.  The output will be placed in the `./react-dist` directory. This build may include different configurations or optimizations compared to the CDN build.\nSOURCE: https://github.com/duffelhq/duffel-components/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn react-build # Build will output to ./react-dist\n```"
  }
]