[
  {
    "owner": "unplugin",
    "repo": "unplugin-vue-components",
    "content": "TITLE: Configuring unplugin-vue-components with Vite\nDESCRIPTION: Configure unplugin-vue-components within a Vite project by importing the Components plugin and adding it to the plugins array in vite.config.ts.  This enables automatic component importing within Vue templates.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport Components from 'unplugin-vue-components/vite'\n\nexport default defineConfig({\n  plugins: [\n    Components({ /* options */ }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript support\nDESCRIPTION: Enable TypeScript support by setting the `dts` option to `true`. This generates a `components.d.ts` file that provides type definitions for auto-imported components. Make sure to include this file in your `tsconfig.json`.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  dts: true, // enabled by default if `typescript` is installed\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Template Example with auto-imported component\nDESCRIPTION: This HTML template demonstrates the usage of a component (`HelloWorld`) without explicit import statements. The `unplugin-vue-components` plugin automatically imports and registers the component, simplifying the template code.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <HelloWorld msg=\"Hello Vue 3.0 + Vite\" />\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'App',\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Resolvers for UI Libraries\nDESCRIPTION: Configure unplugin-vue-components to use resolvers for popular UI libraries like Ant Design Vue, Element Plus, and Vant. This simplifies importing components from these libraries by automatically resolving their paths.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AntDesignVueResolver,\n  ElementPlusResolver,\n  VantResolver,\n} from 'unplugin-vue-components/resolvers'\n// vite.config.js\nimport Components from 'unplugin-vue-components/vite'\n\n// your plugin installation\nComponents({\n  resolvers: [\n    AntDesignVueResolver(),\n    ElementPlusResolver(),\n    VantResolver(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Components Configuration\nDESCRIPTION: This TypeScript code block demonstrates the default configuration options for `unplugin-vue-components`. It covers directory settings, file extensions, glob patterns, resolvers, declaration generation, and other advanced options.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  // relative paths to the directory to search for components.\n  dirs: ['src/components'],\n\n  // valid file extensions for components.\n  extensions: ['vue'],\n\n  // Glob patterns to match file names to be detected as components.\n  // When specified, the `dirs`, `extensions`, and `directoryAsNamespace` options will be ignored.\n  // If you want to exclude components being registered, use negative globs with leading `!`.\n  globs: ['src/components/*.{vue}'],\n\n  // search for subdirectories\n  deep: true,\n\n  // resolvers for custom components\n  resolvers: [],\n\n  // generate `components.d.ts` global declarations,\n  // also accepts a path for custom filename\n  // default: `true` if package typescript is installed\n  dts: false,\n\n  // Allow subdirectories as namespace prefix for components.\n  directoryAsNamespace: false,\n\n  // Collapse same prefixes (camel-sensitive) of folders and components\n  // to prevent duplication inside namespaced component name.\n  // works when `directoryAsNamespace: true`\n  collapseSamePrefixes: false,\n\n  // Subdirectory paths for ignoring namespace prefixes.\n  // works when `directoryAsNamespace: true`\n  globalNamespaces: [],\n\n  // auto import for directives\n  // default: `true` for Vue 3, `false` for Vue 2\n  // Babel is needed to do the transformation for Vue 2, it's disabled by default for performance concerns.\n  // To install Babel, run: `npm install -D @babel/parser`\n  directives: true,\n\n  // Transform path before resolving\n  importPathTransform: v => v,\n\n  // Allow for components to override other components with the same name\n  allowOverrides: false,\n\n  // Filters for transforming targets (components to insert the auto import)\n  // Note these are NOT about including/excluding components registered - use `globs` or `excludeNames` for that\n  include: [/\\.vue$/, /\\.vue\\?vue/, /\\.vue\\.[tj]sx?\\?vue/],\n  exclude: [/\\\\[\\\\/\\]node_modules[\\\\/\\]/, /[\\\\/]\\\\.git[\\\\/\\]/, /[\\\\/]\\\\.nuxt[\\\\/]/],\n\n  // Filters for component names that will not be imported\n  // Use for globally imported async components or other conflicts that the plugin cannot detect\n  excludeNames: [/^Async.+/],\n\n  // Vue version of project. It will detect automatically if not specified.\n  // Acceptable value: 2 | 2.7 | 3\n  version: 2.7,\n\n  // Only provide types of components in library (registered globally)\n  types: []\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Resolver with unplugin-vue-components (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use a custom resolver within the `unplugin-vue-components` configuration. It imports a resolver from a third-party library or custom module and includes it in the `resolvers` array.  This allows the plugin to automatically import components from the specified library. The `defineConfig` function is used to define the Vite configuration object.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/src/core/resolvers/_READ_BEFORE_CONTRIBUTE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyLibResolver from 'my-lib/auto-import-resolver' // <--\n\nimport Components from 'unplugin-vue-components'\n\nexport default defineConfig({\n  plugins: [\n    Components({\n      resolvers: [\n        MyLibResolver\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Resolver\nDESCRIPTION: Create a custom resolver to import components based on your own naming conventions or library structure. The componentName parameter provides the name of the component being resolved.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    // example of importing Vant\n    (componentName) => {\n      // where `componentName` is always CapitalCase\n      if (componentName.startsWith('Van'))\n        return { name: componentName.slice(3), from: 'vant' }\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Types for Global Components\nDESCRIPTION: Register types for globally available components (e.g., Vue Router's RouterLink and RouterView) to provide TypeScript support. This allows you to use these components without explicit imports and still have type checking.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  dts: true,\n  types: [{\n    from: 'vue-router',\n    names: ['RouterLink', 'RouterView'],\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with Webpack\nDESCRIPTION: Configure unplugin-vue-components within a Webpack project by requiring the plugin from 'unplugin-vue-components/webpack' and adding it to the plugins array in webpack.config.js.  The `default` export must be accessed. This enables automatic component importing.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-components/webpack').default({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with Rollup\nDESCRIPTION: Configure unplugin-vue-components within a Rollup project by importing the Components plugin from 'unplugin-vue-components/rollup' and adding it to the plugins array in rollup.config.js. This allows automatic component importing.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.js\nimport Components from 'unplugin-vue-components/rollup'\n\nexport default {\n  plugins: [\n    Components({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with Vue CLI (Webpack)\nDESCRIPTION: Configuring unplugin-vue-components in Vue CLI (using Webpack) involves requiring the plugin and adding it to the plugins array in vue.config.js. This enables automatic import of components.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-components/webpack').default({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with Rspack\nDESCRIPTION: Configure unplugin-vue-components within a Rspack project by requiring the plugin from 'unplugin-vue-components/rspack' and adding it to the plugins array in rspack.config.js. Access the `default` export. This setup provides automatic component importing.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// rspack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-components/rspack').default({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with esbuild\nDESCRIPTION: Configure unplugin-vue-components within an esbuild project by importing the Components plugin and adding it to the plugins array in esbuild.config.js within the `build` function.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// esbuild.config.js\nimport { build } from 'esbuild'\nimport Components from 'unplugin-vue-components/esbuild'\n\nbuild({\n  /* ... */\n  plugins: [\n    Components({\n      /* options */\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-components\nDESCRIPTION: Install the unplugin-vue-components package as a development dependency using npm. This command adds the package to your project's devDependencies in package.json.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-components with Vue CLI (Webpack, MJS)\nDESCRIPTION: Configure unplugin-vue-components within a Vue CLI project by renaming `vue.config.js` to `vue.config.mjs` and using static import syntax.  Requires `@vue/cli-service ^5.0.8` or later.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.mjs\nimport Components from 'unplugin-vue-components/webpack'\n\nexport default {\n  configureWebpack: {\n    plugins: [\n      Components({ /* options */ }),\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Update\nDESCRIPTION: This diff shows the changes needed in `package.json` to switch from `vite-plugin-components` to `unplugin-vue-components`. The `vite-plugin-components` dependency is removed and `unplugin-vue-components` is added.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"vite-plugin-components\": \"*\",\n+   \"unplugin-vue-components\": \"^0.14.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Config Update\nDESCRIPTION: This diff shows the changes to `vite.config.js` required for migrating from `vite-plugin-components` to `unplugin-vue-components`. This includes updating the import statements and renaming configuration options.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- import Components, { ElementPlusResolver } from 'vite-plugin-components'\n+ import Components from 'unplugin-vue-components/vite'\n+ import { ElementPlusResolver } from 'unplugin-vue-components/resolvers'\n\nexport default {\n  plugins: [\n    /* ... */\n    Components({\n      /* ... */\n\n      // `customComponentsResolvers` has renamed to `resolver`\n-     customComponentsResolvers: [\n+     resolvers: [\n        ElementPlusResolver(),\n      ],\n\n      // `globalComponentsDeclaration` has renamed to `dts`\n-     globalComponentsDeclaration: true,\n+     dts: true,\n\n      // `customLoaderMatcher` is depreacted, use `include` instead\n-     customLoaderMatcher: id => id.endsWith('.md'),\n+     include: [/\\.vue$/, /\\.vue\\?vue/, /\\.vue\\.[tj]sx?\\?vue/, /\\.md$/],\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template Example with explicit component import\nDESCRIPTION: This HTML template shows the expanded code generated by `unplugin-vue-components`, including the explicit import and registration of the `HelloWorld` component. This example is equivalent to the code in previous HTML snippet.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <HelloWorld msg=\"Hello Vue 3.0 + Vite\" />\n  </div>\n</template>\n\n<script>\n  import HelloWorld from './src/components/HelloWorld.vue'\n\n  export default {\n    name: 'App',\n    components: {\n      HelloWorld,\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Only Registration\nDESCRIPTION: Disable automatic type registration for supported libraries by passing an empty array to the `types` option. This can be useful if you want to manually manage type definitions.\nSOURCE: https://github.com/unplugin/unplugin-vue-components/blob/main/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  // Disable type only registration\n  types: [],\n})\n```"
  }
]