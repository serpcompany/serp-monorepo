[
  {
    "owner": "nolly-studio",
    "repo": "cult-ui",
    "content": "TITLE: Installing Required Dependencies for Cult Components\nDESCRIPTION: Command to install the necessary dependencies for Cult Components including tailwindcss, clsx, tailwind-merge, and framer-motion.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss@latest clsx tailwind-merge framer-motion\n```\n\n----------------------------------------\n\nTITLE: Dynamic Island Implementation\nDESCRIPTION: Complete implementation of the Dynamic Island component with multiple state renderings including compact, large, and tall states. Features state management, animation scheduling, and conditional rendering based on current state.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/dynamic-island.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst blobStates = [\"compact\", \"large\", \"tall\", \"long\", \"medium\", \"ultra\"]\n\nconst DynamicAction = () => {\n  const { state: blobState, scheduleAnimation, setSize } = useDynamicBlobSize()\n\n  // Function to cycle through the states\n  const cycleBlobStates = () => {\n    const currentIndex = blobStates.indexOf(blobState.size)\n    const nextIndex = (currentIndex + 1) % blobStates.length\n    // @ts-ignore\n    setSize(blobStates[nextIndex])\n  }\n\n  // Provide dynamic detail in such a beautiful small place :)\n  const renderCompactState = () => (\n    <DynamicContainer className=\"flex items-center justify-center h-full w-full\">\n      <div className=\"relative w-full flex items-center\">\n        <DynamicDescription className=\"absolute left-4  my-auto text-lg font-medium tracking-tighter text-white \">\n          <div className=\"bg-cyan-400 h-5 w-5 rounded-full\" />\n        </DynamicDescription>\n\n        <DynamicDescription className=\"absolute text-white right-4  my-auto text-lg font-bold tracking-tighter \">\n          compact\n        </DynamicDescription>\n      </div>\n    </DynamicContainer>\n  )\n\n  // Great for call to action, popping up in users face :)\n  const renderLargeState = () => (\n    <DynamicContainer className=\"flex items-center justify-center h-full w-full\">\n      <div className=\"relative  flex w-full items-center justify-between gap-6 px-4\">\n        <Loader className=\"animate-spin h-12 w-12  text-yellow-300\" />\n        <div className=\"animate-spin h-12 w-12  text-yellow-300 rounded-md\" />\n\n        <DynamicTitle className=\"my-auto text-2xl font-black tracking-tighter text-white \">\n          large\n        </DynamicTitle>\n      </div>\n    </DynamicContainer>\n  )\n\n  // Great for user onboarding, forms, etc\n  const renderTallState = () => (\n    <DynamicContainer className=\"  flex flex-col mt-6 w-full items-start  gap-1 px-8 font-semibold\">\n      <DynamicDescription className=\"bg-cyan-300 rounded-2xl tracking-tight leading-5  p-2\">\n        The Cult of Pythagoras\n      </DynamicDescription>\n      <DynamicDescription className=\"bg-cyan-300 rounded-2xl tracking-tight leading-5  p-2 text-left\">\n        Music of the Spheres, an idea that celestial bodies produce a form of\n        music through their movements\n      </DynamicDescription>\n\n      <DynamicTitle className=\" text-4xl font-black tracking-tighter text-cyan-100 \">\n        any cool cults?\n      </DynamicTitle>\n    </DynamicContainer>\n  )\n\n  // Render function for other states\n  const renderOtherStates = () => (\n    <div className=\"flex items-center justify-center h-full w-full\">\n      <p className=\"text-white\">cycle states</p>\n    </div>\n  )\n\n  // Main render logic based on size\n  function renderState() {\n    switch (blobState.size) {\n      case \"compact\":\n        return renderCompactState()\n      case \"large\":\n        return renderLargeState()\n      case \"tall\":\n        return renderTallState()\n      // Optionally add cases for other states as necessary\n      default:\n        return renderOtherStates()\n    }\n  }\n\n  return (\n    <div className=\" h-full\">\n      <div className=\"flex flex-col gap-4  h-full\">\n        <div className=\"absolute bottom-1 left-2\">\n          <Button\n            onClick={cycleBlobStates}\n            variant=\"secondary\"\n            className=\"mt-4 p-2 border rounded-lg max-w-[200px] \"\n          >\n            Click\n            <MousePointerClickIcon className=\"ml-2 h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"absolute top-1 right-2\">\n          <div>\n            <Badge variant=\"outline\">prev - {blobState.previousSize}</Badge>\n            <Badge variant=\"outline\">cur -{blobState.size}</Badge>\n          </div>\n        </div>\n\n        <DynamicBlob id=\"dynamic-blob\">{renderState()}</DynamicBlob>\n      </div>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing MinimalCard Component in React\nDESCRIPTION: Demonstrates a complete example of implementing the MinimalCard component with sample data. The code maps through an array of cards to render multiple instances of the component with titles, descriptions, and images.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/minimal-card.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst cards = [\n  {\n    title: \"Sick title\",\n    description:\n      \"How to design with gestures and motion that feel intuitive and natural.\",\n  },\n  {\n    title: \"Sick title\",\n    description:\n      \"How to design with gestures and motion that feel intuitive and natural.\",\n  },\n  {\n    title: \"Sick title\",\n    description:\n      \"How to design with gestures and motion that feel intuitive and natural.\",\n  },\n  {\n    title: \"Sick title\",\n    description:\n      \"How to design with gestures and motion that feel intuitive and natural.\",\n  },\n  {\n    title: \"Sick title\",\n    description:\n      \"How to design with gestures and motion that feel intuitive and natural.\",\n  },\n]\n\nexport default function MinimalCardDemo() {\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"p-2\">\n        <h3 className=\"text-xl font-semibold\">MinimalCard</h3>\n      </div>\n      <div className=\"min-h-[500px] p-4  flex flex-col justify-center border border-dashed rounded-lg space-y-4\">\n        <div className=\"relative grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {cards.map((card) => (\n            <MinimalCard>\n              <MinimalCardImage src=\"/basic-img.png\" />\n              <MinimalCardTitle>{card.title}</MinimalCardTitle>\n              <MinimalCardDescription>\n                {card.description}\n              </MinimalCardDescription>\n            </MinimalCard>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BgAnimateButton Demo Component in React\nDESCRIPTION: A complete demo component showcasing various configurations of the BgAnimateButton including different roundings, gradients, and animations. The demo renders multiple button grids to display various styling options.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/bg-animate-button.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst roundings = [\"full\", \"xl\", \"2xl\", \"3xl\", \"sm\"]\nconst gradients = [\n  \"sunrise\",\n  \"ocean\",\n  \"candy\",\n  \"default\",\n  \"forest\",\n  \"sunset\",\n  \"nebula\",\n]\nconst animations = [\"spin\", \"pulse\", \"spin-slow\", \"spin-fast\"]\n\nexport const BgAnimateDemo = () => {\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"min-h-[500px] px-12 md:px-24 flex flex-col justify-center border border-dashed rounded-lg space-y-4\">\n        {/* Roundings Grid */}\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          {roundings.slice(0, 2).map((rounding, i) => (\n            <BgAnimateButton\n              gradient={gradients[i + 1]}\n              key={rounding}\n              rounded={rounding}\n            >\n              {rounding}\n            </BgAnimateButton>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-3 gap-4\">\n          {roundings.slice(2, 5).map((rounding, i) => (\n            <BgAnimateButton\n              gradient={gradients[i + 1]}\n              key={rounding}\n              rounded={rounding}\n            >\n              {rounding}\n            </BgAnimateButton>\n          ))}\n        </div>\n\n        {/* animations Grid */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          {animations.map((animations, i) => (\n            <BgAnimateButton\n              key={animations}\n              gradient={gradients[i + 2]}\n              variant=\"ghost\"\n              animation={animations}\n            >\n              {animations}\n            </BgAnimateButton>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BgAnimateDemo\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPanel Demo in TypeScript React\nDESCRIPTION: This snippet demonstrates a complete implementation of the FloatingPanel component in a React functional component. It shows how to structure the panel, handle form submission, and use all the subcomponents together.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescriptreact\nCODE:\n```\nexport default function FloatingPanelDemo() {\n  const handleSubmit = (note: string) => {\n    console.log('Submitted note:', note)\n  }\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Headless Composable FloatingPanel Demo</h1>\n      <FloatingPanelRoot>\n        <FloatingPanelTrigger>Add Note</FloatingPanelTrigger>\n        <FloatingPanelContent>\n          <FloatingPanelForm onSubmit={handleSubmit}>\n            <FloatingPanelLabel htmlFor=\"note-input\">Add Note</FloatingPanelLabel>\n            <FloatingPanelTextarea id=\"note-input\" />\n            <FloatingPanelFooter>\n              <FloatingPanelCloseButton />\n              <FloatingPanelSubmitButton />\n            </FloatingPanelFooter>\n          </FloatingPanelForm>\n        </FloatingPanelContent>\n      </FloatingPanelRoot>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SortableList Component in React\nDESCRIPTION: Complete example showing how to implement the SortableList component with state management and handlers for adding, removing, completing, and reordering list items.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/sortable-list.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Example() {\n  const [items, setItems] = useState<Item[]>([\n    { text: \"Item 1\", checked: false, id: 1, description: \"Description 1\" },\n    { text: \"Item 2\", checked: false, id: 2, description: \"Description 2\" },\n    { text: \"Item 3\", checked: false, id: 3, description: \"Description 3\" },\n  ])\n\n  const handleAddItem = () => {\n    const newItem: Item = {\n      text: `Item ${items.length + 1}`,\n      checked: false,\n      id: items.length + 1,\n      description: `Description ${items.length + 1}`,\n    }\n    setItems([...items, newItem])\n  }\n\n  const handleResetItems = () => {\n    setItems([])\n  }\n\n  const handleCompleteItem = (id: number) => {\n    setItems((prevItems) =>\n      prevItems.map((item) =>\n        item.id === id ? { ...item, checked: !item.checked } : item\n      )\n    )\n  }\n\n  const handleRemoveItem = (id: number) => {\n    setItems((prevItems) => prevItems.filter((item) => item.id !== id))\n  }\n\n  const renderItem = (\n    item: Item,\n    onCompleteItem: (id: number) => void,\n    onRemoveItem: (id: number) => void\n  ) => (\n    <SortableListItem\n      key={item.id}\n      item={item}\n      onCompleteItem={onCompleteItem}\n      onRemoveItem={onRemoveItem}\n      handleDrag={() => {}}\n    />\n  )\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Sortable List Example</h1>\n      <SortableList\n        items={items}\n        setItems={setItems}\n        onAddItem={handleAddItem}\n        onResetItems={handleResetItems}\n        onCompleteItem={handleCompleteItem}\n        renderItem={renderItem}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Popover Component in React\nDESCRIPTION: Demonstrates how to create a complete Popover component with a form, including a textarea, submit button, and close button. This example shows the composition of all Popover subcomponents and handles form submission.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescriptreact\nCODE:\n```\nexport default function PopoverDemo() {\n  const handleSubmit = (note: string) => {\n    console.log('Submitted note:', note)\n  }\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Headless Composable Popover Demo</h1>\n      <PopoverRoot>\n        <PopoverTrigger>Add Note</PopoverTrigger>\n        <PopoverContent>\n          <PopoverForm onSubmit={handleSubmit}>\n            <PopoverLabel>Add Note</PopoverLabel>\n            <PopoverTextarea />\n            <PopoverFooter>\n              <PopoverCloseButton />\n              <PopoverSubmitButton />\n            </PopoverFooter>\n          </PopoverForm>\n        </PopoverContent>\n      </PopoverRoot>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: ShiftCard Demo Implementation in React/TypeScript\nDESCRIPTION: Complete implementation of a ShiftCard demo component showcasing animated image transitions, social sharing buttons, and hover effects. The component uses motion animations and includes top, middle, and bottom content sections with SVG icons and interactive elements.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/shift-card.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ShiftCardDemo() {\n  // Content for the top part of the card\n  const topContent = (\n    <div className=\"bg-accent/90 rounded-md text-primary shadow-[0px_1px_1px_0px_rgba(0,0,0,0.05),0px_1px_1px_0px_rgba(255,252,240,0.5)_inset,0px_0px_0px_1px_hsla(0,0%,100%,0.1)_inset,0px_0px_1px_0px_rgba(28,27,26,0.5)] dark:shadow-[0_1px_0_0_rgba(255,255,255,0.03)_inset,0_0_0_1px_rgba(255,255,255,0.03)_inset,0_0_0_1px_rgba(0,0,0,0.1),0_2px_2px_0_rgba(0,0,0,0.1),0_4px_4px_0_rgba(0,0,0,0.1),0_8px_8px_0_rgba(0,0,0,0.1)]\">\n      <h3 className=\" text-lg  p-4\">\n        <svg\n          width=\"1em\"\n          height=\"1em\"\n          viewBox=\"0 0 54 80\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g clipPath=\"url(#clip0_912_3)\">\n            <path\n              d=\"M13.3333 80.0002C20.6933 80.0002 26.6667 74.0268 26.6667 66.6668V53.3335H13.3333C5.97333 53.3335 0 59.3068 0 66.6668C0 74.0268 5.97333 80.0002 13.3333 80.0002Z\"\n              fill=\"#0ACF83\"\n            />\n            <path\n              d=\"M0 39.9998C0 32.6398 5.97333 26.6665 13.3333 26.6665H26.6667V53.3332H13.3333C5.97333 53.3332 0 47.3598 0 39.9998Z\"\n              fill=\"#A259FF\"\n            />\n            <path\n              d=\"M0 13.3333C0 5.97333 5.97333 0 13.3333 0H26.6667V26.6667H13.3333C5.97333 26.6667 0 20.6933 0 13.3333Z\"\n              fill=\"#F24E1E\"\n            />\n            <path\n              d=\"M26.6667 0H40.0001C47.3601 0 53.3334 5.97333 53.3334 13.3333C53.3334 20.6933 47.3601 26.6667 40.0001 26.6667H26.6667V0Z\"\n              fill=\"#FF7262\"\n            />\n            <path\n              d=\"M53.3334 39.9998C53.3334 47.3598 47.3601 53.3332 40.0001 53.3332C32.6401 53.3332 26.6667 47.3598 26.6667 39.9998C26.6667 32.6398 32.6401 26.6665 40.0001 26.6665C47.3601 26.6665 53.3334 32.6398 53.3334 39.9998Z\"\n              fill=\"#1ABCFE\"\n            />\n          </g>\n          <defs>\n            <clipPath id=\"clip0_912_3\">\n              <rect width={53.3333} height={80} fill=\"white\" />\n            </clipPath>\n          </defs>\n        </svg>\n        Screen Capture\n      </h3>\n    </div>\n  )\n\n  // Content that animates into top from the middle\n  const topAnimateContent = (\n    <>\n      <motion.img\n        transition={{ duration: 0.3, ease: \"circIn\" }}\n        src=\"/basic-img.png\"\n        layoutId=\"img\"\n        width={78}\n        height={100}\n        alt=\"basic image\"\n        className=\"rounded-sm  absolute top-1.5 right-2 shadow-lg\"\n      />\n\n      <motion.div\n        className=\"h-[70px] w-[82px] absolute top-[4px] right-[6px] bg-transparent border-[2px] rounded-br-sm rounded-sm  border-neutral-800/80 dark:border-neutral-200/80 border-dashed  ml-auto  mb-[6px] dark:mb-[3px]\"\n        initial={{ opacity: 0, scale: 1.6, y: 0, filter: \"blur(4px)\" }}\n        animate={{\n          opacity: 1,\n          y: 0,\n          scale: 1,\n          filter: \"blur(0px)\",\n          transition: { delay: 0.35, duration: 0.15 },\n        }}\n        exit={{\n          opacity: 0,\n          y: 100,\n          filter: \"blur(4px)\",\n          transition: { delay: 0.0, duration: 0 },\n        }}\n      />\n    </>\n  )\n\n  // Content that animates from the top to the middle\n  const middleContent = (\n    <motion.img\n      src=\"/basic-img.png\"\n      layoutId=\"img\"\n      width={150}\n      height={200}\n      alt=\"basic image\"\n      className=\"rounded-sm  border-2 border-white dark:border-black\"\n    />\n  )\n\n  // Content for the bottom part of the card that shows more details on hover\n  const bottomContent = (\n    <div className=\"pb-4\">\n      <div className=\"flex w-full flex-col gap-1 bg-primary/90 border-t border-t-black/10 rounded-t-lg px-4 pb-4  \">\n        <div className=\"font-sans text-[14px] font-medium text-white dark:text-[#171717] flex gap-1 pt-2.5 items-center\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"-50 -50 430 390\"\n            fill=\"#1185fd\"\n            aria-hidden=\"true\"\n            width=\"1em\"\n            height=\"1em\"\n          >\n            <path d=\"M180 141.964C163.699 110.262 119.308 51.1817 78.0347 22.044C38.4971 -5.86834 23.414 -1.03207 13.526 3.43594C2.08093 8.60755 0 26.1785 0 36.5164C0 46.8542 5.66748 121.272 9.36416 133.694C21.5786 174.738 65.0603 188.607 105.104 184.156C107.151 183.852 109.227 183.572 111.329 183.312C109.267 183.642 107.19 183.924 105.104 184.156C46.4204 192.847 -5.69621 214.233 62.6582 290.33C137.848 368.18 165.705 273.637 180 225.702C194.295 273.637 210.76 364.771 295.995 290.33C360 225.702 313.58 192.85 254.896 184.158C252.81 183.926 250.733 183.645 248.671 183.315C250.773 183.574 252.849 183.855 254.896 184.158C294.94 188.61 338.421 174.74 350.636 133.697C354.333 121.275 360 46.8568 360 36.519C360 26.1811 357.919 8.61012 346.474 3.43851C336.586 -1.02949 321.503 -5.86576 281.965 22.0466C240.692 51.1843 196.301 110.262 180 141.964Z\" />\n          </svg>{\" \"}\n          <p>Share your work</p>\n        </div>\n        <div className=\"w-full text-pretty font-sans text-[13px] leading-4 text-neutral-200 dark:text-[#171717] pb-2  \">\n          Share your image to build that audience. Inspired by{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://x.com/mrncst\"\n          >\n            @mrncst\n          </a>\n        </div>\n\n        <div className=\"bg-accent/80 dark:bg-accent px-1 py-1 rounded-xl flex flex-col gap-1\">\n          <TextureButton variant=\"primary\">\n            <svg\n              viewBox=\"0 0 256 209\"\n              width=\"1em\"\n              height=\"1em\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              preserveAspectRatio=\"xMidYMid\"\n            >\n              <path\n                d=\"M256 25.45c-9.42 4.177-19.542 7-30.166 8.27 10.845-6.5 19.172-16.793 23.093-29.057a105.183 105.183 0 0 1-33.351 12.745C205.995 7.201 192.346.822 177.239.822c-29.006 0-52.523 23.516-52.523 52.52 0 4.117.465 8.125 1.36 11.97-43.65-2.191-82.35-23.1-108.255-54.876-4.52 7.757-7.11 16.78-7.11 26.404 0 18.222 9.273 34.297 23.365 43.716a52.312 52.312 0 0 1-23.79-6.57c-.003.22-.003.44-.003.661 0 25.447 18.104 46.675 42.13 51.5a52.592 52.592 0 0 1-23.718.9c6.683 20.866 26.08 36.05 49.062 36.475-17.975 14.086-40.622 22.483-65.228 22.483-4.24 0-8.42-.249-12.529-.734 23.243 14.902 50.85 23.597 80.51 23.597 96.607 0 149.434-80.031 149.434-149.435 0-2.278-.05-4.543-.152-6.795A106.748 106.748 0 0 0 256 25.45\"\n                fill=\"#55acee\"\n              />\n            </svg>\n            Post on Twitter\n          </TextureButton>\n\n          <TextureButton variant=\"primary\">\n            <svg\n              viewBox=\"0 0 256 256\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"1em\"\n              height=\"1em\"\n              preserveAspectRatio=\"xMidYMid\"\n            >\n              <path\n                fill=\"#625DF5\"\n                d=\"M256 113.765h-74.858l64.83-37.43-14.237-24.667-64.83 37.43 37.421-64.825-24.667-14.246-37.421 64.826V0h-28.476v74.86L76.326 10.027 51.667 24.266 89.096 89.09 24.265 51.668l-14.238 24.66 64.83 37.43H0v28.477h74.85l-64.823 37.43 14.238 24.667 64.824-37.423-37.43 64.825 24.667 14.239 37.429-64.832V256h28.476v-74.853l37.422 64.826 24.665-14.239-37.428-64.832 64.83 37.43 14.24-24.667-64.825-37.423h74.85v-28.477H256ZM128 166.73c-21.472 0-38.876-17.403-38.876-38.876 0-21.472 17.404-38.876 38.876-38.876 21.472 0 38.875 17.404 38.875 38.876 0 21.473-17.403 38.876-38.875 38.876Z\"\n              />\n            </svg>{\" \"}\n            Open in Loom{\" \"}\n          </TextureButton>\n        </div>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"flex justify-center items-center \">\n      <ShiftCard\n        className=\"bg-card dark:bg-[#1A1A1A] \"\n        topContent={topContent}\n        topAnimateContent={topAnimateContent}\n        middleContent={middleContent}\n        bottomContent={bottomContent}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Feedback Form using PopoverForm in React\nDESCRIPTION: A complete example showing how to implement a feedback form using PopoverForm with loading and success states. The example includes form submission logic, keyboard shortcuts (Escape to close, Ctrl+Enter to submit), and animated transitions between states.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover-form.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescriptreact\nCODE:\n```\nexport default function PopoverFormFeedbackExample() {\n  const [formState, setFormState] = useState<FormState>(\"idle\")\n  const [open, setOpen] = useState(false)\n  const [feedback, setFeedback] = useState(\"\")\n\n  function submit() {\n    setFormState(\"loading\")\n    setTimeout(() => {\n      setFormState(\"success\")\n    }, 1500)\n\n    setTimeout(() => {\n      setOpen(false)\n      setFormState(\"idle\")\n      setFeedback(\"\")\n    }, 3300)\n  }\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        setOpen(false)\n      }\n\n      if (\n        (event.ctrlKey || event.metaKey) &&\n        event.key === \"Enter\" &&\n        open &&\n        formState === \"idle\"\n      ) {\n        submit()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [open, formState])\n\n  return (\n    <div className=\"flex w-full items-center justify-center\">\n      <PopoverForm\n        title=\"Feedback\"\n        open={open}\n        setOpen={setOpen}\n        width=\"364px\"\n        height=\"192px\"\n        showCloseButton={formState !== \"success\"}\n        showSuccess={formState === \"success\"}\n        openChild={\n          <form\n            onSubmit={(e) => {\n              e.preventDefault()\n              if (!feedback) return\n              submit()\n            }}\n          >\n            <div className=\"relative\">\n              <textarea\n                autoFocus\n                placeholder=\"Feedback\"\n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                className=\"h-32 w-full resize-none rounded-t-lg p-3 text-sm outline-none\"\n                required\n              />\n            </div>\n            <div className=\"relative flex h-12 items-center px-[10px]\">\n              <PopoverFormSeparator />\n              <div className=\"absolute left-0 top-0 -translate-x-[1.5px] -translate-y-1/2\">\n                <PopoverFormCutOutLeftIcon />\n              </div>\n              <div className=\"absolute right-0 top-0 translate-x-[1.5px] -translate-y-1/2 rotate-180\">\n                <PopoverFormCutOutRightIcon />\n              </div>\n              <PopoverFormButton loading={formState === \"loading\"} />\n            </div>\n          </form>\n        }\n        successChild={\n          <PopoverFormSuccess\n            title=\"Feedback Received\"\n            description=\"Thank you for supporting our project!\"\n          />\n        }\n      />\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Core Dock Component Implementation with Framer Motion\nDESCRIPTION: The main Dock component implementation using Framer Motion for animations. This component manages hover states, zooming animations, and provides context to child components via DockContext.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/dock.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Main Dock component: orchestrating the dock's animation behavior\nconst Dock = ({ children }: DockProps) => {\n  // State to track if the dock is hovered. When the mouse hovers over the dock, this state changes to true.\n  const [hovered, setHovered] = useState(false)\n\n  // State to track the width of the dock. This dynamically updates based on the dock's current width.\n  const [width, setWidth] = useState(0)\n\n  // Reference to the dock element in the DOM. This allows direct manipulation and measurement of the dock.\n  const dockRef = useRef<HTMLDivElement>(null)\n\n  // Reference to track if the zooming animation is active. This prevents conflicting animations.\n  const isZooming = useRef(false)\n\n  // State to track which dock items are currently animating. This array holds the indices of animating items.\n  const [animatingIndexes, setAnimatingIndexes] = useState<number[]>([])\n\n  // Callback to toggle the zooming state. This ensures that we don't trigger hover animations while zooming.\n  const setIsZooming = useCallback((value: boolean) => {\n    isZooming.current = value // Update the zooming reference\n    setHovered(!value) // Update the hover state based on zooming\n  }, [])\n\n  // Motion value for the zoom level of the dock. This provides a smooth zooming animation.\n  const zoomLevel = useMotionValue(1)\n\n  // Hook to handle window resize events and update the dock's width accordingly.\n  useWindowResize(() => {\n    setWidth(dockRef.current?.clientWidth || 0) // Set width to the dock's current width or 0 if undefined\n  })\n\n  // Motion value to track the mouse's X position relative to the viewport. Initialized to Infinity to denote no tracking initially.\n  const mouseX = useMotionValue(Infinity)\n\n  return (\n    // Provide the dock's state and control methods to the rest of the application through context.\n    <DockContext.Provider\n      value={{\n        hovered, // Current hover state of the dock\n        setIsZooming, // Method to set the zooming state\n        width, // Current width of the dock\n        zoomLevel, // Current zoom level motion value\n        mouseX, // Current mouse X position motion value\n        animatingIndexes, // Current animating indexes\n        setAnimatingIndexes, // Method to set animating indexes\n      }}\n    >\n      <motion.div\n        ref={dockRef} // Reference to the dock element\n        className=\"fixed bottom-3 left-1/2 transform -translate-x-1/2 flex items-end h-14 p-2 gap-3 bg-black bg-opacity-90 rounded-xl\"\n        // Event handler for mouse movement within the dock\n        onMouseMove={(e) => {\n          mouseX.set(e.pageX) // Update the mouseX motion value to the current mouse position\n          if (!isZooming.current) {\n            // Only set hovered if not zooming\n            setHovered(true) // Set hovered state to true\n          }\n        }}\n        // Event handler for when the mouse leaves the dock\n        onMouseLeave={() => {\n          mouseX.set(Infinity) // Reset mouseX motion value\n          setHovered(false) // Set hovered state to false\n        }}\n        style={{\n          x: \"-50%\", // Center the dock horizontally\n          scale: zoomLevel, // Bind the zoom level to the scale style property\n        }}\n      >\n        {children} {/* Render the dock's children within the motion div */}\n      </motion.div>\n    </DockContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Video Player with Custom Overlays\nDESCRIPTION: Advanced implementation showing custom overlays for different player states including paused, loading, and hover states.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlayIcon } from \"lucide-react\"\n\nimport { Spinner } from \"@/components/ui/spinner\"\n\n;<HoverVideoPlayer\n  videoSrc=\"/demo-video.mp4\"\n  thumbnailSrc=\"/demo-thumbnail.jpg\"\n  pausedOverlay={<PlayIcon className=\"h-12 w-12\" />}\n  loadingOverlay={<Spinner />}\n  hoverOverlay={<div className=\"text-white\">Now Playing</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPanelForm in TypeScript React\nDESCRIPTION: This snippet demonstrates the usage of the FloatingPanelForm component, which is used to create a form within the floating panel. It handles form submission and provides an onSubmit prop for custom submission logic.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelForm onSubmit={handleSubmit}>\n  {/* Form fields */}\n</FloatingPanelForm>\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Carousel Demo Component\nDESCRIPTION: Demonstrates how to create a demo component that implements the ThreeDPhotoCarousel within a container with specific styling and dimensions.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/three-d-carousel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ThreeDPhotoCarouselDemo() {\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"min-h-[500px]  flex flex-col justify-center border border-dashed rounded-lg space-y-4\">\n        <div className=\"p-2\">\n          <ThreeDPhotoCarousel />\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectionAwareTabs Demo Component\nDESCRIPTION: Complete implementation of a demo component showcasing DirectionAwareTabs with multiple gradient themes (ocean, forest, default, sunset) and different animation speeds. Each tab contains a set of animated buttons with specific gradient and animation properties.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/direction-aware-tabs.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst DirectionAwareTabsDemo = ({}) => {\n  const tabs = [\n    {\n      id: 0,\n      label: \"ocean\",\n      content: (\n        <div className=\"border border-black/10 w-full flex flex-col items-center p-4 rounded-lg gap-3\">\n          <BgAnimateButton animation=\"spin-fast\" gradient=\"ocean\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin\" gradient=\"ocean\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin-slow\" gradient=\"ocean\">\n            Button\n          </BgAnimateButton>\n        </div>\n      ),\n    },\n    {\n      id: 1,\n      label: \"forest\",\n      content: (\n        <div className=\"border border-black/10 w-full flex flex-col items-center p-4 rounded-lg gap-3\">\n          <BgAnimateButton animation=\"spin-fast\" gradient=\"forest\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin\" gradient=\"forest\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin-slow\" gradient=\"forest\">\n            Button\n          </BgAnimateButton>\n        </div>\n      ),\n    },\n    {\n      id: 2,\n      label: \"default\",\n      content: (\n        <div className=\"border border-black/10 w-full flex flex-col items-center gap-3 p-4\">\n          <BgAnimateButton animation=\"spin-fast\" gradient=\"default\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin\" gradient=\"default\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin-slow\" gradient=\"default\">\n            Button\n          </BgAnimateButton>\n        </div>\n      ),\n    },\n    {\n      id: 3,\n      label: \"sunset\",\n      content: (\n        <div className=\"border border-black/10 w-full flex flex-col items-center p-4 rounded-lg gap-3\">\n          <BgAnimateButton animation=\"spin-fast\" gradient=\"sunset\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin\" gradient=\"sunset\">\n            Button\n          </BgAnimateButton>\n          <BgAnimateButton animation=\"spin-slow\" gradient=\"sunset\">\n            Button\n          </BgAnimateButton>\n        </div>\n      ),\n    },\n  ]\n\n  return (\n    <div className=\"\">\n      <DirectionAwareTabs tabs={tabs} />\n    </div>\n  )\n}\n\nexport default DirectionAwareTabsDemo\n```\n\n----------------------------------------\n\nTITLE: Implementing TextureCard Component with Example Content\nDESCRIPTION: Demonstrates a complete implementation of the TextureCard component with header, content section, separator, and a custom footer. Includes styling classes and an icon example.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/texture-card.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextureCard>\n  <TextureCardHeader className=\"flex flex-col gap-4 justify-center items-center  \">\n    <div className=\"p-3 bg-neutral-950 rounded-full\">\n      <Mail className=\"h-4 w-4 stroke-neutral-200\" />\n    </div>\n  </TextureCardHeader>\n\n  <TextureCardContent className=\" w-48 \">\n    <p>\n      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolorum eos quia\n      incidunt perspiciatis, ut, deleniti fugit a aliquam sequi, voluptatum\n      pariatur quaerat. Temporibus sed facere at, voluptas dolorem officiis\n      incidunt!\n    </p>\n  </TextureCardContent>\n  <TextureSeparator />\n\n  <div>\n    <div className=\"dark:bg-neutral-800 bg-stone-100 pt-px rounded-b-[20px] overflow-hidden \">\n      <div className=\"flex flex-col items-center justify-center\">\n        <div className=\"py-2 px-2\">\n          <p className=\"font-light dark:text-white text-black\">\n            Texture <span className=\"font-medium tracking-wide\">card</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</TextureCard>\n```\n\n----------------------------------------\n\nTITLE: Implementing LightBoard Component in React\nDESCRIPTION: This example demonstrates how to use the LightBoard component in a React functional component. It showcases various props such as size, lightSize, gap, text, font, and updateInterval.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/lightboard.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Example usage of the Dock component with animated cards and dividers\n\nconst LightBoardDemo = () => {\n  return (\n    <LightBoard\n      size={LightBoardSize.Large}\n      lightSize={4}\n      gap={1}\n      text=\"Hello World\"\n      font=\"default\"\n      updateInterval={100}\n    />\n  )\n}\n\nexport default LightBoardDemo\n```\n\n----------------------------------------\n\nTITLE: Implementing Typewriter Effect in React Component\nDESCRIPTION: This code demonstrates how to use the Typewriter component within a React functional component. It sets up an array of texts to be displayed in a typewriter effect, and renders the component within an iOS-style card layout.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/typewriter.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst texts = [\n  \"Testing 124\",\n  \"Look at newcult.co\",\n  \"and check gnow.io\",\n  \"Sick af\",\n]\n\nexport default function TypewriterDemo() {\n  return (\n    <IosOgShellCard>\n      <div className=\"ml-auto px-4 py-2 mb-3 text-white bg-blue-500 rounded-2xl\">\n        <p className=\"text-sm md:text-base font-semibold text-base-900 truncate\">\n          <Typewriter texts={texts} delay={1} baseText=\"Yo \" />\n        </p>\n      </div>\n    </IosOgShellCard>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Square Aspect Ratio Loading Carousel with Background Features\nDESCRIPTION: Example showing how to configure a Loading Carousel with square aspect ratio, background tips, and a background gradient overlay.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<LoadingCarousel\n  aspectRatio=\"square\"\n  backgroundTips={true}\n  backgroundGradient={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Dock Demo in React\nDESCRIPTION: A comprehensive example showing how to implement the Dock component with animated cards and dividers. The example includes custom icons and gradient backgrounds for dock items.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/dock.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Example usage of the Dock component with animated cards and dividers\n\nconst DockDemo = () => {\n  const gradients = [\n    \"https://products.ls.graphics/mesh-gradients/images/03.-Snowy-Mint_1-p-130x130q80.jpeg\",\n    \"https://products.ls.graphics/mesh-gradients/images/04.-Hopbush_1-p-130x130q80.jpeg\",\n    \"https://products.ls.graphics/mesh-gradients/images/06.-Wisteria-p-130x130q80.jpeg\",\n    \"https://products.ls.graphics/mesh-gradients/images/09.-Light-Sky-Blue-p-130x130q80.jpeg\",\n    \"https://products.ls.graphics/mesh-gradients/images/12.-Tumbleweed-p-130x130q80.jpeg\",\n    \"https://products.ls.graphics/mesh-gradients/images/15.-Perfume_1-p-130x130q80.jpeg\",\n    null,\n    \"https://products.ls.graphics/mesh-gradients/images/36.-Pale-Chestnut-p-130x130q80.jpeg\",\n  ]\n\n  const openIcons = [\n    <CircleIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <TriangleIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <SquareIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <PentagonIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <HexagonIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <OctagonIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n    <OctagonIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />, // skip\n    <BlocksIcon className=\"h-8 w-8 fill-black stroke-black rounded-full\" />,\n  ]\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <Dock>\n        {gradients.map((src, index) =>\n          src ? (\n            <DockCard key={src} id={`${index}`}>\n              <Card src={src} id={`${index}`}>\n                {openIcons[index]}\n              </Card>\n            </DockCard>\n          ) : (\n            <DockDivider key={index} />\n          )\n        )}\n      </Dock>\n    </div>\n  )\n}\n\nexport default DockDemo\n```\n\n----------------------------------------\n\nTITLE: Basic Feature Carousel Usage Example in TSX\nDESCRIPTION: Complete example of implementing the FeatureCarousel component with image paths as strings for each step in the carousel sequence.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/feature-carousel.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeatureCarousel } from \"@/components/animate/feature-card\"\n\nexport default function BasicExample() {\n  return (\n    <FeatureCarousel\n      title=\"Feature Showcase\"\n      description=\"Explore our amazing features\"\n      image={{\n        step1light1: \"/images/feature1.png\",\n        step1light2: \"/images/feature2.png\",\n        step2light1: \"/images/feature3.png\",\n        step2light2: \"/images/feature4.png\",\n        step3light: \"/images/feature5.png\",\n        step4light: \"/images/feature6.png\",\n        alt: \"Feature showcase\",\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Shuffled Tips Loading Carousel\nDESCRIPTION: Example of configuring a Loading Carousel with shuffled tip order, custom autoplay interval, and progress indicator disabled.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<LoadingCarousel\n  shuffleTips={true}\n  autoplayInterval={3000}\n  showProgress={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: BackgroundMedia Component Usage Example in React\nDESCRIPTION: Example implementation of the BackgroundMedia component as a video background with light variant. The component is wrapped in a container div with responsive width classes.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/bg-media.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function BgMediaDemo() {\n  return (\n    <div className=\"w-full \">\n      <div className=\"min-w-[20rem] md:min-w-[40rem] lg:md:min-w-[50rem]\">\n        <BackgroundMedia\n          type=\"video\"\n          variant=\"light\"\n          src=\"https://openaicomproductionae4b.blob.core.windows.net/production-twill-01/c74791d0-75d2-48e6-acae-96d13bc97c56/paper-planes.mp4\"\n        />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wide Aspect Ratio Loading Carousel with Top Text\nDESCRIPTION: Example of a Loading Carousel with wide aspect ratio, text positioned at the top, and indicator dots disabled.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<LoadingCarousel aspectRatio=\"wide\" textPosition=\"top\" showIndicators={false} />\n```\n\n----------------------------------------\n\nTITLE: Implementing CanvasFractalGrid Component with Configuration\nDESCRIPTION: Example implementation of the CanvasFractalGrid component with customizable properties including dot size, spacing, opacity, animation settings, and wave effects\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/canvas-fractal-grid.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CanvasFractalGridExample() {\n  return (\n    <div className=\"grid h-screen w-full pl-[56px] relative\">\n      <CanvasFractalGrid\n        dotSize={3}\n        dotSpacing={20}\n        dotOpacity={0.4}\n        animationDuration={6}\n        mouseTrackingStiffness={500}\n        mouseTrackingDamping={120}\n        waveIntensity={60}\n        waveRadius={250}\n        // rippleSpeed={0.0001}\n      />\n    </div>\n  )\n}\n\nexport default CanvasFractalGridExample\n```\n\n----------------------------------------\n\nTITLE: Implementing TweetGrid Component with Tweet IDs\nDESCRIPTION: Example of creating a TweetGrid component implementation by passing an array of tweet IDs. This demonstrates how to set up the component with a collection of tweets to display in the masonry grid.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/tweet-grid.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Grab tweet ids\nconst exampleTweets = [\n  \"1742983975340327184\",\n  \"1743049700583116812\",\n  \"1754067409366073443\",\n  \"1753968111059861648\",\n  \"1754174981897118136\",\n  \"1743632296802988387\",\n  \"1754110885168021921\",\n  \"1760248682828419497\",\n  \"1760230134601122153\",\n  \"1760184980356088267\",\n]\nexport default function TweetGridDemo() {\n  return <TweetGrid tweets={exampleTweets} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic IntroDisclosure Implementation in React\nDESCRIPTION: Example showing how to implement the IntroDisclosure component with image steps and basic callbacks\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/intro-disclosure.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IntroDisclosure } from \"@/components/ui/intro-disclosure\"\n\nconst steps = [\n  {\n    title: \"Welcome\",\n    short_description: \"Quick overview\",\n    full_description: \"Welcome to our platform!\",\n    media: {\n      type: \"image\",\n      src: \"/feature-1.png\",\n      alt: \"Welcome screen\",\n    },\n  },\n  {\n    title: \"Features\",\n    short_description: \"Key capabilities\",\n    full_description: \"Discover our main features\",\n    media: {\n      type: \"image\",\n      src: \"/feature-2.png\",\n      alt: \"Features overview\",\n    },\n    action: {\n      label: \"Try Now\",\n      onClick: () => console.log(\"Action clicked\"),\n    },\n  },\n]\n\nexport function MyComponent() {\n  return (\n    <IntroDisclosure\n      steps={steps}\n      featureId=\"my-feature\"\n      onComplete={() => console.log(\"Completed\")}\n      onSkip={() => console.log(\"Skipped\")}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hover Video Player Implementation\nDESCRIPTION: Basic example of implementing the HoverVideoPlayer component with required videoSrc and thumbnailSrc props.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Example() {\n  return (\n    <HoverVideoPlayer\n      videoSrc=\"/demo-video.mp4\"\n      thumbnailSrc=\"/demo-thumbnail.jpg\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Video Player with Controls\nDESCRIPTION: Implementation of HoverVideoPlayer with playback controls enabled.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<HoverVideoPlayer\n  videoSrc=\"/demo-video.mp4\"\n  thumbnailSrc=\"/demo-thumbnail.jpg\"\n  enableControls\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Feature Carousel in TSX\nDESCRIPTION: Advanced implementation of FeatureCarousel with custom styling including positioning, effects, and background gradient using Tailwind CSS classes.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/feature-carousel.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cn } from \"@/lib/utils\"\nimport { FeatureCarousel } from \"@/components/animate/feature-card\"\n\nexport default function StyledExample() {\n  return (\n    <FeatureCarousel\n      title=\"Custom Styled Features\"\n      description=\"With custom positioning and effects\"\n      step1img1Class={cn(\n        \"pointer-events-none w-[50%] border border-stone-100/10\",\n        \"rounded-2xl left-[25%] top-[50%]\",\n        \"hover:scale-105 transition-transform\"\n      )}\n      image={{\n        step1light1: \"/images/feature1.png\",\n        step1light2: \"/images/feature2.png\",\n        step2light1: \"/images/feature3.png\",\n        step2light2: \"/images/feature4.png\",\n        step3light: \"/images/feature5.png\",\n        step4light: \"/images/feature6.png\",\n        alt: \"Feature showcase\",\n      }}\n      bgClass=\"bg-gradient-to-tr from-blue-900/90 to-purple-800/90\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Function for Class Name Merging\nDESCRIPTION: A TypeScript utility function that combines clsx and tailwind-merge to handle class name concatenation and conflicts in a React application using Cult Components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/utils.ts\nimport clsx, { ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Player Example\nDESCRIPTION: Simple implementation of the HoverVideoPlayer with video and thumbnail sources.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<HoverVideoPlayer\n  videoSrc=\"/demo-video.mp4\"\n  thumbnailSrc=\"/demo-thumbnail.jpg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Common Use Cases for NeumorphEyebrow in React\nDESCRIPTION: This snippet demonstrates typical use cases for the NeumorphEyebrow component, such as labeling new features, beta content, and updates. It shows how to combine the eyebrow with headings for content categorization.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-eyebrow.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"space-y-4\">\n  <div>\n    <NeumorphEyebrow>NEW</NeumorphEyebrow>\n    <h2>Feature Announcement</h2>\n  </div>\n\n  <div>\n    <NeumorphEyebrow intent=\"primary\">BETA</NeumorphEyebrow>\n    <h2>Upcoming Feature</h2>\n  </div>\n\n  <div>\n    <NeumorphEyebrow intent=\"secondary\">UPDATED</NeumorphEyebrow>\n    <h2>Recent Changes</h2>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Video Player with Cropping\nDESCRIPTION: Example showing how to implement video cropping using cropTop and cropBottom properties.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<HoverVideoPlayer\n  videoSrc=\"/demo-video.mp4\"\n  thumbnailSrc=\"/demo-thumbnail.jpg\"\n  cropTop={10}\n  cropBottom={10}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the FamilyButton Component with Nested Elements in React (TSX)\nDESCRIPTION: This example demonstrates how to use the FamilyButton component with its associated subcomponents to create an expandable UI element. The component includes a header with an icon, content area, texture separator, and a footer section.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/family-button.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<FamilyButton>\n  <FamilyButtonHeader className=\"flex flex-col gap-4 justify-center items-center  \">\n    <div className=\"p-3 bg-neutral-950 rounded-full\">\n      <Mail className=\"h-4 w-4 stroke-neutral-200\" />\n    </div>\n  </FamilyButtonHeader>\n\n  <FamilyButtonContent className=\" w-48 \">\n    <p>\n      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolorum eos quia\n      incidunt perspiciatis, ut, deleniti fugit a aliquam sequi, voluptatum\n      pariatur quaerat. Temporibus sed facere at, voluptas dolorem officiis\n      incidunt!\n    </p>\n  </FamilyButtonContent>\n  <TextureSeparator />\n\n  <div>\n    <div className=\"dark:bg-neutral-800 bg-stone-100 pt-px rounded-b-[20px] overflow-hidden \">\n      <div className=\"flex flex-col items-center justify-center\">\n        <div className=\"py-2 px-2\">\n          <p className=\"font-light dark:text-white text-black\">\n            Texture <span className=\"font-medium tracking-wide\">card</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</FamilyButton>\n```\n\n----------------------------------------\n\nTITLE: Creating Installation Instructions with Tabs in JSX\nDESCRIPTION: This code snippet demonstrates how to create an installation instructions section using Tabs components. It includes a manual installation option with steps and a component source reference.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/shader-lens-blur.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs defaultValue=\"manual\">\n  <TabsList>\n    <TabsTrigger value=\"manual\">Manual</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"manual\">\n    <Steps>\n      <Step>Copy and paste the following code into your project.</Step>\n      <ComponentSource name=\"shader-lens-blur\" />\n      <Step>Update the import paths to match your project setup.</Step>\n    </Steps>\n  </TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using TextureButton with GitHub Icon in React/TSX\nDESCRIPTION: Example of implementing the TextureButton with the 'icon' variant that includes a GitHub SVG icon and label. This demonstrates how to create a button with both an icon and text.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/texture-button.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextureButton variant=\"icon\">\n  {/* GithubIcon   */}\n  <svg\n    viewBox=\"0 0 256 250\"\n    width=\"256\"\n    height=\"250\"\n    fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    preserveAspectRatio=\"xMidYMid\"\n    className=\"h-5 w-5\"\n  >\n    <path\n      d=\"M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z\"\n      fill=\"#545454\"\n    />\n  </svg>\n  <span className=\"pl-2\">Github</span>\n</TextureButton>\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Component with FAQ Items in JSX\nDESCRIPTION: This code snippet demonstrates the use of an Accordion component to display a FAQ section. It includes multiple AccordionItem components, each containing a question as the trigger and an answer as the content.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Accordion type=\"multiple\">\n\n<AccordionItem value=\"faq-1\">\n\t<AccordionTrigger>\n\t\tWhy copy/paste and not packaged as a dependency?\n\t</AccordionTrigger>\n\t<AccordionContent>\nThe idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.\n\nStart with some sensible defaults, then customize the components to your needs.\n\nOne of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._\n\n</AccordionContent>\n</AccordionItem>\n\n<AccordionItem value=\"faq-2\">\n  <AccordionTrigger>\n    Do you plan to publish it as an npm package?\n  </AccordionTrigger>\n  <AccordionContent>\n    No. I have no plans to publish it as an npm package.\n  </AccordionContent>\n</AccordionItem>\n\n<AccordionItem value=\"faq-3\">\n<AccordionTrigger>\nWhich frameworks are supported?\n</AccordionTrigger>\n<AccordionContent>\n\nYou can use any framework that supports React. [Next.js](https://ui.Jordan-Gilliam.com/docs/installation/next), [Astro](https://ui.Jordan-Gilliam.com/docs/installation/astro), [Remix](https://ui.Jordan-Gilliam.com/docs/installation/remix), [Gatsby](https://ui.Jordan-Gilliam.com/docs/installation/gatsby) etc.\n\n</AccordionContent>\n</AccordionItem>\n\n<AccordionItem value=\"faq-4\">\n\t<AccordionTrigger>\n\tCan I use this in my project?\n\t</AccordionTrigger>\n\t<AccordionContent>\nYes. Free to use for personal and commercial projects. No attribution required.\n\nBut hey, let me know if you do. I'd love to see what you build.\n\n    </AccordionContent>\n\n</AccordionItem>\n\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Using GradientHeading Component in React/TypeScript\nDESCRIPTION: This example demonstrates how to use the GradientHeading component in a React functional component. It shows the component with default variant, large size, and bold weight properties.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/gradient-heading.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function GradientHeadingExample() {\n  return (\n    <GradientHeading variant=\"default\" size=\"lg\" weight=\"bold\">\n      Like and subscribe\n    </GradientHeading>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FractalDotGrid Component in React\nDESCRIPTION: This code snippet demonstrates how to import and use the FractalDotGrid component within a React application. It shows the component configured with various properties including dot size, spacing, colors, wave effects, noise settings, and mouse glow interaction.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/bg-animated-fractal-grid.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FractalDotGrid } from \"@/components/ui/fractal-dot-grid\"\n\nfunction FractalDotGridExample() {\n  return (\n    <div className=\"h-screen w-screen relative\">\n      <FractalDotGrid\n        dotSize={4}\n        dotSpacing={20}\n        dotOpacity={0.3}\n        waveIntensity={30}\n        waveRadius={200}\n        dotColor=\"rgba(100, 100, 255, 1)\"\n        glowColor=\"rgba(100, 100, 255, 1)\"\n        enableNoise={true}\n        noiseOpacity={0.03}\n        enableMouseGlow={true}\n        initialPerformance=\"medium\"\n      />\n    </div>\n  )\n}\n\nexport default FractalDotGridExample\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPanelTrigger in TypeScript React\nDESCRIPTION: This snippet demonstrates the usage of the FloatingPanelTrigger component, which is used to trigger the opening of the floating panel. It can wrap any clickable element.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelTrigger>Add Note</FloatingPanelTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using TextAnimate Component with Roll In Animation\nDESCRIPTION: Example of implementing the TextAnimate component with the 'rollIn' animation type. This demonstrates how to display animated text with the specified animation effect.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/text-animate.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextAnimate text=\"Roll In\" type=\"rollIn\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing NeumorphEyebrow Styling in React\nDESCRIPTION: This example shows how to apply custom styling to the NeumorphEyebrow component using the 'className' prop. In this case, it adds a bold font weight to the eyebrow text.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-eyebrow.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NeumorphEyebrow className=\"font-bold\">Custom Styled Eyebrow</NeumorphEyebrow>\n```\n\n----------------------------------------\n\nTITLE: Using PopoverTrigger Component in React\nDESCRIPTION: Demonstrates the PopoverTrigger component which is used to open the popover when clicked. It can wrap any clickable element or text.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverTrigger>Add Note</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing SidePanel Component in React\nDESCRIPTION: This example demonstrates how to use the SidePanel component in a React functional component. It includes state management for the panel's open/close status, a custom button renderer, and the SidePanel usage with children content.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/side-panel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function SidePanelExample() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleIsOpen = () => {\n    setIsOpen(!isOpen)\n  }\n\n  const renderOpenButton = (handleToggle: () => void) => (\n    <div\n      className={cn(\n        \"flex items-center w-full justify-start pr-4 md:pl-4 py-1 md:py-1\",\n        isOpen ? \"pr-3\" : \"\"\n      )}\n    >\n      <p className=\"text-xl font-black tracking-tight text-gray-900 sm:text-3xl\">\n        <span className=\"bg-gradient-to-t from-neutral-200 to-stone-300 bg-clip-text font-brand text-xl font-bold text-transparent sm:text-6xl\">\n          Open\n        </span>\n      </p>\n      <Button\n        className=\"rounded-r-[33px] py-8 ml-2 \"\n        onClick={handleIsOpen}\n        variant=\"secondary\"\n      >\n        {isOpen ? \"close\" : \"open\"}\n      </Button>\n    </div>\n  )\n\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"min-h-[500px]  flex flex-col justify-center border border-dashed rounded-lg space-y-4\">\n        <SidePanel\n          panelOpen={isOpen}\n          handlePanelOpen={handleIsOpen}\n          renderButton={renderVideoButton}\n        >\n          <div className=\"h-16 w-full\">\n            <div>Content Here</div>\n          </div>\n        </SidePanel>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using FloatingPanelLabel in TypeScript React\nDESCRIPTION: This snippet shows how to use the FloatingPanelLabel component, which is used to add a label to the floating panel content. It animates with the panel opening and closing.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelLabel htmlFor=\"input-id\">Add Note</FloatingPanelLabel>\n```\n\n----------------------------------------\n\nTITLE: Using PopoverRoot Component in React\nDESCRIPTION: Shows how to use the PopoverRoot component, which serves as the main wrapper providing context and configuration for all child Popover components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverRoot>\n  {/* Other Popover components */}\n</PopoverRoot>\n```\n\n----------------------------------------\n\nTITLE: Using PopoverContent Component in React\nDESCRIPTION: Shows how to use the PopoverContent component which contains the main content of the popover and handles animation and positioning logic.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverContent>\n  {/* Popover content */}\n</PopoverContent>\n```\n\n----------------------------------------\n\nTITLE: Basic Logo Carousel Implementation\nDESCRIPTION: Simple example of implementing the LogoCarousel component in a React component\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function LogoCarouselDemo() {\n  return <LogoCarousel />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AnimatedNumber Implementation with React State\nDESCRIPTION: Demonstrates a basic implementation of the AnimatedNumber component with React state management. The example includes a button to increment the displayed value by 1000.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/animated-number.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction BasicExample() {\n  const [value, setValue] = useState(1000)\n\n  return (\n    <div>\n      <AnimatedNumber value={value} />\n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        className=\"border border-primary/10 rounded-full \"\n        onClick={() => setValue(value + 1000)}\n      >\n        <Plus className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPanelTextarea in TypeScript React\nDESCRIPTION: This snippet demonstrates the usage of the FloatingPanelTextarea component, which provides a textarea input for the floating panel form.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelTextarea id=\"input-id\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Loading Carousel Implementation\nDESCRIPTION: A simple example of implementing the Loading Carousel component with default props in a React function component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function LoadingCarouselDemo() {\n  return <LoadingCarousel />\n}\n```\n\n----------------------------------------\n\nTITLE: Using PopoverTextarea Component in React\nDESCRIPTION: Demonstrates the PopoverTextarea component which provides a textarea input for the popover form.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverTextarea />\n```\n\n----------------------------------------\n\nTITLE: Using a Cult UI component in React\nDESCRIPTION: Shows how to import and use a Cult UI component (Button) in a React component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Utility Classes for Theming in React TSX\nDESCRIPTION: Demonstrates how to use Tailwind CSS utility classes for theming, including dark mode support.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-zinc-950 dark:bg-white\" />\n```\n\n----------------------------------------\n\nTITLE: Using PopoverFooter Component in React\nDESCRIPTION: Shows how to use the PopoverFooter component which creates a footer section in the popover for action buttons.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_8\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverFooter>\n  {/* Footer content */}\n</PopoverFooter>\n```\n\n----------------------------------------\n\nTITLE: Basic Loading Carousel Usage\nDESCRIPTION: Example of using the Loading Carousel component with default settings.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<LoadingCarousel />\n```\n\n----------------------------------------\n\nTITLE: Using PopoverCloseButton Component in React\nDESCRIPTION: Demonstrates the PopoverCloseButton component which provides a button to close the popover.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_9\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverCloseButton />\n```\n\n----------------------------------------\n\nTITLE: Custom Column Count Implementation\nDESCRIPTION: Example showing how to customize the number of columns in the LogoCarousel\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<LogoCarousel columnCount={3} />\n```\n\n----------------------------------------\n\nTITLE: Basic Feature Carousel Implementation in TSX\nDESCRIPTION: Example of basic implementation of the Feature Carousel component with required props including title, description, and image references for various carousel steps.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/feature-carousel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Example() {\n  return (\n    <FeatureCarousel\n      title=\"Your Feature Title\"\n      description=\"Your feature description\"\n      image={{\n        step1light1: Image1,\n        step1light2: Image2,\n        step2light1: Image3,\n        step2light2: Image4,\n        step3light: Image5,\n        step4light: Image6,\n        alt: \"Feature showcase\",\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPanelCloseButton in TypeScript React\nDESCRIPTION: This snippet demonstrates the usage of the FloatingPanelCloseButton component, which provides a button to close the floating panel.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_9\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelCloseButton />\n```\n\n----------------------------------------\n\nTITLE: External Links Configuration in IntroDisclosure\nDESCRIPTION: Example demonstrating how to configure external links in IntroDisclosure steps\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/intro-disclosure.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst linkSteps = [\n  {\n    title: \"Learn More\",\n    short_description: \"Documentation\",\n    full_description: \"Visit our documentation for detailed guides\",\n    action: {\n      label: \"View Docs\",\n      href: \"https://docs.example.com\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using FloatingPanelSubmitButton in TypeScript React\nDESCRIPTION: This snippet shows how to use the FloatingPanelSubmitButton component, which provides a submit button for the floating panel form.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_10\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelSubmitButton />\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in React TSX Component\nDESCRIPTION: Demonstrates how to apply CSS variables for background and foreground colors in a React component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-primary text-primary-foreground\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple NeumorphEyebrow Variants in React\nDESCRIPTION: This snippet showcases all three variants of the NeumorphEyebrow component: default, primary, and secondary. It demonstrates how to use the 'intent' prop to change the variant.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-eyebrow.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"space-y-4\">\n  <NeumorphEyebrow>Default Eyebrow</NeumorphEyebrow>\n  <NeumorphEyebrow intent=\"primary\">Primary Eyebrow</NeumorphEyebrow>\n  <NeumorphEyebrow intent=\"secondary\">Secondary Eyebrow</NeumorphEyebrow>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NeumorphEyebrow Component in React\nDESCRIPTION: This example demonstrates the simplest way to use the NeumorphEyebrow component within a React functional component. It renders the eyebrow with the text 'Featured Content'.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-eyebrow.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Example() {\n  return <NeumorphEyebrow>Featured Content</NeumorphEyebrow>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables for Theming in React TSX\nDESCRIPTION: Illustrates how to use CSS variables for theming in a React component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-background text-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Default Two-Column Layout Usage\nDESCRIPTION: Example showing the default usage of LogoCarousel with two columns\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<LogoCarousel />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic NeumorphButton Example\nDESCRIPTION: This example demonstrates the basic implementation of the NeumorphButton component in a React functional component, showing how to render a simple button with text.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-button.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Example() {\n  return <NeumorphButton>Click me</NeumorphButton>\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logo Array Configuration\nDESCRIPTION: Example of how to add custom logos to the carousel by modifying the allLogos array\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst allLogos: Logo[] = [\n  { name: \"CustomLogo\", id: 1, img: CustomLogoComponent },\n  // Add more logos...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for Cult UI\nDESCRIPTION: Example of the interactive CLI prompts for configuring the components.json file, which determines styling preferences for Cult UI components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nDo you want to use CSS variables for colors? › no / yes\n```\n\n----------------------------------------\n\nTITLE: Video Content Configuration in IntroDisclosure\nDESCRIPTION: Example configuration for including video content in IntroDisclosure steps\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/intro-disclosure.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst videoSteps = [\n  {\n    title: \"Video Tutorial\",\n    short_description: \"Watch how it works\",\n    full_description: \"A detailed video walkthrough of our features\",\n    media: {\n      type: \"video\",\n      src: \"/tutorial.mp4\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering ShaderLensBlur Component Preview in JSX\nDESCRIPTION: This code snippet demonstrates how to render a preview of the ShaderLensBlur component using the ComponentPreview element. It includes a custom className for styling and a description.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/shader-lens-blur.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"shader-lens-blur-demo\"\n  className=\"[&_.preview>[data-orientation=vertical]]:sm:max-w-[70%]\"\n  description=\"All variations\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using FloatingPanelContent in TypeScript React\nDESCRIPTION: This snippet shows how to use the FloatingPanelContent component, which contains the main content of the floating panel. It handles the animation and positioning of the panel.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelContent>\n  {/* FloatingPanel content */}\n</FloatingPanelContent>\n```\n\n----------------------------------------\n\nTITLE: Custom Actions Configuration in IntroDisclosure\nDESCRIPTION: Example showing how to add custom action buttons to IntroDisclosure steps\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/intro-disclosure.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst actionSteps = [\n  {\n    title: \"Get Started\",\n    short_description: \"Begin your journey\",\n    full_description: \"Ready to start? Click the button below!\",\n    action: {\n      label: \"Start Now\",\n      onClick: () => startOnboarding(),\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using FloatingPanelFooter in TypeScript React\nDESCRIPTION: This snippet shows how to use the FloatingPanelFooter component, which is used to create a footer section in the floating panel, typically containing action buttons.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_8\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelFooter>\n  {/* Footer content */}\n</FloatingPanelFooter>\n```\n\n----------------------------------------\n\nTITLE: Custom Interval and Navigation Loading Carousel\nDESCRIPTION: Example of configuring the Loading Carousel with a custom autoplay interval of 2000ms and enabled navigation buttons.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<LoadingCarousel autoplayInterval={2000} showNavigation={true} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Cult UI in a Next.js Project\nDESCRIPTION: Command to run the Cult UI initialization process which sets up the UI components in your Next.js project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cult-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Using FloatingPanelRoot Component in TypeScript React\nDESCRIPTION: This snippet shows how to use the FloatingPanelRoot component, which serves as the main wrapper for the FloatingPanel. It provides context and configuration for all child components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<FloatingPanelRoot>\n  {/* Other FloatingPanel components */}\n</FloatingPanelRoot>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color Utilities in React TSX\nDESCRIPTION: Shows how to use custom color utility classes in a React component after adding them to the configuration.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-warning text-warning-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Cult UI\nDESCRIPTION: Runs the Cult UI initialization command to set up the project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cult-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for path resolution\nDESCRIPTION: Updates the tsconfig.json file to resolve paths using the '@' alias.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with TypeScript, Tailwind, and ESLint\nDESCRIPTION: Command to create a new Next.js project with TypeScript, Tailwind CSS, and ESLint configurations using create-next-app.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest my-app --typescript --tailwind --eslint\n```\n\n----------------------------------------\n\nTITLE: Next.js App Directory Structure Reference\nDESCRIPTION: Recommended Next.js application structure showing the organization of components, UI elements, utility functions, and configuration files.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app\n│   ├── layout.tsx\n│   └── page.tsx\n├── components\n│   ├── ui\n│   │   ├── alert-dialog.tsx\n│   │   ├── button.tsx\n│   │   ├── dropdown-menu.tsx\n│   │   └── ...\n│   ├── main-nav.tsx\n│   ├── page-header.tsx\n│   └── ...\n├── lib\n│   └── utils.ts\n├── styles\n│   └── globals.css\n├── next.config.js\n├── package.json\n├── postcss.config.js\n├── tailwind.config.js\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Adding Cult UI Components to a Next.js Project\nDESCRIPTION: Command to add specific UI components from the Cult UI library to your Next.js project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cult-ui@latest add button\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for path resolution\nDESCRIPTION: Updates the vite.config.ts file to resolve paths using the '@' alias.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from \"path\"\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Cult-UI Package in Development Mode\nDESCRIPTION: PNPM command to start the development server for the cult-ui package, which contains the UI components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=cult-ui dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Custom Font Family\nDESCRIPTION: Code to extend the Tailwind CSS configuration with a custom font family that uses CSS variables defined for the Inter font.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { fontFamily } = require(\"tailwindcss/defaultTheme\")\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\"app/**/*.{ts,tsx}\", \"components/**/*.{ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: [\"var(--font-sans)\", ...fontFamily.sans],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BgAnimateButton Component in React\nDESCRIPTION: Basic import statement for the BgAnimateButton component in a React application.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/bg-animate-button.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BgAnimateButton } from \"./BgAnimateButton\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Loading Carousel\nDESCRIPTION: Command to install the necessary npm packages for the Loading Carousel component, including embla-carousel-autoplay for automatic slide transitions, framer-motion for animations, and lucide-react for icons.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install embla-carousel-autoplay framer-motion lucide-react\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Island Components\nDESCRIPTION: Import statement for all necessary Dynamic Island component pieces and hooks required for implementation.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/dynamic-island.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DynamicBlob,\n  DynamicBlobProvider,\n  DynamicContainer,\n  DynamicDescription,\n  DynamicDiv,\n  DynamicTitle,\n  useDynamicBlobSize,\n} from \"@/components/cult/special/DynamicBlob/DynamicBlob\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hover Video Player\nDESCRIPTION: Command to install the required motion library dependency for the video player component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motion\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter Font in Next.js Root Layout\nDESCRIPTION: Code snippet showing how to import and configure the Inter font in the root layout file of a Next.js application. The font is loaded using next/font/google and applied via className.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport \"@/styles/globals.css\"\nimport { Inter as FontSans } from \"next/font/google\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst fontSans = FontSans({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n})\n\nexport default function RootLayout({ children }: RootLayoutProps) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head />\n      <body\n        className={cn(\n          \"min-h-screen bg-background font-sans antialiased\",\n          fontSans.variable\n        )}\n      >\n        ...\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the NeumorphButton Component in TypeScript\nDESCRIPTION: This code snippet shows how to import the NeumorphButton component from a local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-button.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NeumorphButton } from \"@/components/ui/neumorph-button\"\n```\n\n----------------------------------------\n\nTITLE: Importing MinimalCard Components in React\nDESCRIPTION: Shows how to import the MinimalCard component and its subcomponents for use in a React application.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/minimal-card.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  MinimalCard,\n  MinimalCardDescription,\n  MinimalCardImage,\n  MinimalCardTitle,\n} from \"@/components/ui/minimal-card\"\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundMedia Component in TSX\nDESCRIPTION: Import statement for the BackgroundMedia component from the UI components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/bg-media.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BackgroundMedia } from \"@/components/ui/bg-media\"\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components in React\nDESCRIPTION: Shows how to import all the necessary Popover subcomponents from the components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverFooter,\n  PopoverForm,\n  PopoverLabel,\n  PopoverRoot,\n  PopoverSubmitButton,\n  PopoverTextarea,\n  PopoverTrigger,\n} from \"@/components/Popover\"\n```\n\n----------------------------------------\n\nTITLE: Using PopoverForm Component in React\nDESCRIPTION: Demonstrates the PopoverForm component which creates a form within the popover and handles form submission with a custom onSubmit handler.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverForm onSubmit={handleSubmit}>\n  {/* Form fields */}\n</PopoverForm>\n```\n\n----------------------------------------\n\nTITLE: Importing ShiftCard Component in React/TypeScript\nDESCRIPTION: Basic import statement for the ShiftCard component from the local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/shift-card.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShiftCard } from \"@/components/ui/shift-card\"\n```\n\n----------------------------------------\n\nTITLE: Importing Logo Carousel Component\nDESCRIPTION: Example of importing the LogoCarousel component in a React application\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogoCarousel } from \"@/components/ui/logo-carousel\"\n```\n\n----------------------------------------\n\nTITLE: Importing PopoverForm Components in React/TypeScript\nDESCRIPTION: Shows how to import the PopoverForm component and its related subcomponents from the registry. These components are used to create animated popup forms with various UI elements.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover-form.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  PopoverForm,\n  PopoverFormButton,\n  PopoverFormCutOutLeftIcon,\n  PopoverFormCutOutRightIcon,\n  PopoverFormSeparator,\n  PopoverFormSuccess,\n} from \"@/registry/default/ui/popover-form\"\n```\n\n----------------------------------------\n\nTITLE: Importing TextureCard Component in React/TypeScript\nDESCRIPTION: Shows how to import all the necessary TextureCard subcomponents from the local component library.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/texture-card.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TextureCard,\n  TextureCardContent,\n  TextureCardFooter,\n  TextureCardHeader,\n  TextureCardTitle,\n  TextureSeparator,\n} from \"@/components/ui/texture-card\"\n```\n\n----------------------------------------\n\nTITLE: Using PopoverLabel Component in React\nDESCRIPTION: Shows the PopoverLabel component which adds an animated label to the popover content.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverLabel>Add Note</PopoverLabel>\n```\n\n----------------------------------------\n\nTITLE: Importing TextureButton Component in React/TSX\nDESCRIPTION: Basic import statement for the TextureButton component from the local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/texture-button.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextureButton } from \"@/components/ui/texture-button\"\n```\n\n----------------------------------------\n\nTITLE: Importing SidePanel Component in React\nDESCRIPTION: This snippet shows how to import the SidePanel component from a local file path.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/side-panel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SidePanel } from \"@/components/ui/side-panel\"\n```\n\n----------------------------------------\n\nTITLE: Importing the Loading Carousel Component\nDESCRIPTION: Example of how to import the Loading Carousel component in a React component file. Assumes the component is located in the @/components/ui directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoadingCarousel } from \"@/components/ui/loading-carousel\"\n```\n\n----------------------------------------\n\nTITLE: Importing TextAnimate Component in React/TypeScript\nDESCRIPTION: How to import the TextAnimate component from your components directory in a React/TypeScript project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/text-animate.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextAnimate } from \"@/components/ui/text-animate\"\n```\n\n----------------------------------------\n\nTITLE: Using PopoverSubmitButton Component in React\nDESCRIPTION: Shows the PopoverSubmitButton component which provides a submit button for the popover form.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-20_snippet_10\n\nLANGUAGE: typescriptreact\nCODE:\n```\n<PopoverSubmitButton />\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Video Player Component\nDESCRIPTION: Example of importing the HoverVideoPlayer component in a React application.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/hover-video-player.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HoverVideoPlayer } from \"@/components/ui/hover-video-player\"\n```\n\n----------------------------------------\n\nTITLE: Importing GradientHeading Component in React/TypeScript\nDESCRIPTION: This snippet shows how to import the GradientHeading component from a local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/gradient-heading.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GradientHeading } from \"@/components/ui/gradient-heading\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: Git command to create and switch to a new branch for development purposes.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-branch\n```\n\n----------------------------------------\n\nTITLE: Importing LightBoard Component in React\nDESCRIPTION: This snippet shows how to import the LightBoard component from a local file path in a React application.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/lightboard.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LightBoard } from \"@/components/lightboard\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Cult UI component\nDESCRIPTION: Demonstrates how to add a Cult UI component (Button) to the project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cult-ui@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing NeumorphEyebrow Component in React\nDESCRIPTION: This snippet shows how to import the NeumorphEyebrow component from a local file structure. It assumes the component is located in a 'components/ui' directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/neumorph-eyebrow.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NeumorphEyebrow } from \"@/components/ui/neumorph-eyebrow\"\n```\n\n----------------------------------------\n\nTITLE: Installing @types/node for Vite configuration\nDESCRIPTION: Installs the @types/node package to resolve the 'path' import in the Vite configuration.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @types/node\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Cult UI Button Component in Next.js\nDESCRIPTION: Example of importing and using a Cult UI Button component in a Next.js page component after adding it to the project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vite React project\nDESCRIPTION: Initializes a new React project using Vite.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Motion Dependency\nDESCRIPTION: Command to install the required Framer Motion library dependency using npm\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motion\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config with Custom Colors\nDESCRIPTION: Demonstrates how to extend the Tailwind configuration to include custom color variables.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        warning: \"hsl(var(--warning))\",\n        \"warning-foreground\": \"hsl(var(--warning-foreground))\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Carousel Component with Shadcn\nDESCRIPTION: Command to install the base carousel component from the shadcn UI library, which serves as the foundation for the Loading Carousel component.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/loading-carousel.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add carousel\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Variables for New Colors\nDESCRIPTION: Shows how to add new custom colors using CSS variables in the global CSS file.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Primary Colors\nDESCRIPTION: Shows how to define CSS variables for primary colors without color space function.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: Logo Interface Definition\nDESCRIPTION: TypeScript interface definition for the Logo type used in the carousel\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/logo-carousel.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Logo {\n  name: string\n  id: number\n  img: React.ComponentType<React.SVGProps<SVGSVGElement>>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for CSS Variables\nDESCRIPTION: Demonstrates how to configure the components.json file to use CSS variables for theming by setting cssVariables to true.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for Utility Classes\nDESCRIPTION: Shows how to configure the components.json file to use utility classes for theming by setting cssVariables to false.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": false\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FloatingPanel Components in TypeScript React\nDESCRIPTION: This snippet shows how to import the various FloatingPanel subcomponents for use in a React application. It includes all the necessary components for creating a fully functional floating panel.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/floating-panel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  FloatingPanelCloseButton,\n  FloatingPanelContent,\n  FloatingPanelFooter,\n  FloatingPanelForm,\n  FloatingPanelLabel,\n  FloatingPanelRoot,\n  FloatingPanelSubmitButton,\n  FloatingPanelTextarea,\n  FloatingPanelTrigger,\n} from \"@/components/FloatingPanel\"\n```\n\n----------------------------------------\n\nTITLE: Importing SortableList Component in React\nDESCRIPTION: Demonstrates how to import the SortableList component and its related types from the components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/sortable-list.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\"\n\nimport {\n  Item,\n  SortableList,\n  SortableListItem,\n} from \"@/components/ui/sortable-list\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required UI Components with ShadCN\nDESCRIPTION: Command to install necessary UI components using shadcn-ui package manager\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/intro-disclosure.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add dialog drawer progress scroll-area\n```\n\n----------------------------------------\n\nTITLE: Importing Dock Components in React\nDESCRIPTION: This snippet shows how to import the necessary components from the Dock module for use in a React application.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/dock.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Card,\n  Dock,\n  DockCard,\n  DockDivider,\n  useDock,\n} from \"@/components/Dock/Dock\"\n```\n\n----------------------------------------\n\nTITLE: Importing CanvasFractalGrid Component in React\nDESCRIPTION: Basic import statement for the CanvasFractalGrid component\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/canvas-fractal-grid.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CanvasFractalGrid } from \"../ui/canvas-fractal-grid\"\n```\n\n----------------------------------------\n\nTITLE: Importing DirectionAwareTabs Component\nDESCRIPTION: Basic import statement for the DirectionAwareTabs component from the UI components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/direction-aware-tabs.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DirectionAwareTabs } from \"@/components/ui/direction-aware-tabs\"\n```\n\n----------------------------------------\n\nTITLE: Importing the TweetGrid Component in React/TypeScript\nDESCRIPTION: Simple import statement for the TweetGrid component from a local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/tweet-grid.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TweetGrid } from \"@/components/ui/tweet-grid\"\n```\n\n----------------------------------------\n\nTITLE: Importing the FamilyButton Component in React (TSX)\nDESCRIPTION: This snippet shows how to import the FamilyButton component from a local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/family-button.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FamilyButton } from \"@/components/ui/family-button\"\n```\n\n----------------------------------------\n\nTITLE: Importing 3D Carousel Component in TypeScript/React\nDESCRIPTION: Shows how to import the ThreeDPhotoCarousel component from the components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/three-d-carousel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreeDPhotoCarousel } from \"@/components/ui/three-d-carousel\"\n```\n\n----------------------------------------\n\nTITLE: Importing Feature Carousel Component in TSX\nDESCRIPTION: Basic import statement for the Feature Carousel component from the animate/feature-card directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/feature-carousel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeatureCarousel } from \"@/components/animate/feature-card\"\n```\n\n----------------------------------------\n\nTITLE: Importing Typewriter Component in React\nDESCRIPTION: This snippet shows how to import the TypewriterDemo component from a local file. It's the first step in using the Typewriter component in a React project.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/typewriter.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TypewriterDemo } from \"@/components/ui/typewriter\"\n```\n\n----------------------------------------\n\nTITLE: Importing AnimatedNumber Component in TSX\nDESCRIPTION: Shows how to import the AnimatedNumber component from a local components directory.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/animated-number.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedNumber } from \"@/components/ui/animated-number\"\n```\n\n----------------------------------------\n\nTITLE: Rendering References Section with Citations in JSX\nDESCRIPTION: This code snippet shows how to create a references section using custom Citation components. It includes a title and a link to the inspiration source.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/components/shader-lens-blur.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Citations>\n  <p className=\"font-medium text-primary\">Inspiration</p>\n  <CitationList>\n    <CitationItem>\n      <CitationLink\n        href=\"https://github.com/guilanier/codrops-sdf-lensblur\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        codrops-sdf-lensblur\n      </CitationLink>\n    </CitationItem>\n  </CitationList>\n</Citations>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and generating configuration files\nDESCRIPTION: Installs Tailwind CSS and its dependencies, then generates the necessary configuration files.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Structure in Bash\nDESCRIPTION: Shows the directory structure of the monorepo, focusing on the apps directory with emphasis on the www application and registry components.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napps\n└── www\n    ├── app\n    ├── components\n    ├── content\n    └── registry\n        ├── default\n        │   ├── example\n        │   └── ui\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Command in Bash\nDESCRIPTION: Git command for cloning the forked repository to a local machine.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/ui.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Bash\nDESCRIPTION: Simple bash command to change into the project directory after cloning the repository.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ui\n```\n\n----------------------------------------\n\nTITLE: Running the Website Workspace in Development Mode\nDESCRIPTION: PNPM command to start the development server for the www workspace, which contains the project website.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=www dev\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Locally\nDESCRIPTION: Command to run the documentation website locally using PNPM workspace filtering.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=www dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Components Registry Structure\nDESCRIPTION: Shows the directory structure of the components registry, highlighting the organization by styles.\nSOURCE: https://github.com/nolly-studio/cult-ui/blob/main/CONTRIBUTING.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napps\n└── www\n    └── registry\n        ├── default\n        │   ├── example\n        │   └── ui\n```"
  }
]