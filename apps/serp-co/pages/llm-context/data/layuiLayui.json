[
  {
    "owner": "layui",
    "repo": "layui",
    "content": "TITLE: Initializing and Managing layui Tabs with Context Menu and Dynamic Operations\nDESCRIPTION: This code sets up a layui tabs component with multiple tabs and provides buttons to switch and close tabs programmatically. It also integrates a context menu for tab operations such as adding, closing current, closing others, and closing right-side tabs, using layui's dropdown and tabs APIs. The script dynamically adds tabs with custom attributes and context menus, enabling rich tab management features.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/demo.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function() {\n  var $ = layui.$;\n  var tabs = layui.tabs;\n  var util = layui.util;\n  var dropdown = layui.dropdown;\n\n  // 为标签头添加上下文菜单\n  var dropdownInst = dropdown.render({\n    elem: '#demoTabs1 .layui-tabs-header>li',\n    trigger: 'contextmenu',\n    data: [{\n      title: '在右侧新增标签页',\n      action: 'add',\n      mode: 'after'\n    }, {\n      type: '-'\n    }, {\n      title: '关闭',\n      action: 'close',\n      mode: 'this'\n    }, {\n      title: '关闭其他标签页',\n      action: 'close',\n      mode: 'other'\n    }, {\n      title: '关闭右侧标签页',\n      action: 'close',\n      mode: 'right'\n    }, {\n      title: '关闭所有标签页',\n      action: 'close',\n      mode: 'all'\n    }],\n    click: function(data, othis, event) {\n      var index = this.elem.index(); // 获取活动标签索引\n\n      // 新增标签操作\n      if (data.action === 'add') {\n        // 在当前活动标签右侧新增标签页\n        addTabs({\n          mode: data.mode,\n          index: index\n        });\n      } else if(data.action === 'close') { // 关闭标签操作\n        if (data.mode === 'this') {\n          tabs.close('demoTabs1', index); // 关闭当前标签\n        } else {\n          tabs.closeMult('demoTabs1', data.mode, index); // 批量关闭标签\n        }\n      }\n    }\n  });\n\n  // 新增随机标签\n  var addTabs = function(opts) {\n    var n = Math.random()*1000 | 0; // 演示标记\n    opts = $.extend({\n      title: 'New Tab '+ n, // 此处加 n 仅为演示区分，实际应用不需要\n      content: 'New Tab Content '+ n,\n      id: 'new-'+ n,\n      aaa: 'attr-'+ n, // 自定义属性，其中 aaa 可任意命名\n      done: function(params) {\n        console.log(params); // 查看返回的参数\n\n        // 给新标签头添加上下文菜单\n        dropdown.render($.extend({}, dropdownInst.config, {\n          elem: params.thisHeaderItem // 当前标签头元素\n        }));\n      }\n    }, opts);\n    // 添加标签到最后\n    tabs.add('demoTabs1', opts);\n  }\n\n\n  // 自定义事件\n  util.on({\n    add: function(){\n      addTabs();\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui UI Library with HTML and JavaScript\nDESCRIPTION: This HTML snippet demonstrates setting up a basic webpage that loads the Layui CSS and JavaScript files. It includes a script block that uses Layui's modular loading system to access the 'layer' module and display a message on page load using layer.msg. Dependencies include the 'layui.js' and 'layui.css' files located in the specified folders. The snippet expects no inputs and outputs a modal message \"Hello World\" with an icon. It assumes a browser environment with access to static Layui resources.\nSOURCE: https://github.com/layui/layui/blob/main/README.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Quick Start - Layui</title>\n    <link href=\"./layui/css/layui.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <!-- HTML Content -->\n    <script src=\"./layui/layui.js\"></script>\n    <script>\n      // Usage\n      layui.use(function () {\n        var layer = layui.layer;\n        // Welcome\n        layer.msg(\"Hello World\", { icon: 6 });\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Select Boxes in Layui\nDESCRIPTION: This snippet demonstrates how to implement searchable select boxes using the `lay-search` attribute in Layui. It includes examples with and without case sensitivity. Also shows how to use lay-creatable to allow creation of new options.  It relies on Layui's form module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/select.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form layui-row layui-col-space16\">\n  <div class=\"layui-col-md6\">\n    <select lay-search=\"\">\n      <option value=\"\">请选择或搜索（默认不区分大小写）</option>\n      <option value=\"1\">AAA</option>\n      <option value=\"2\">aaa</option>\n      <option value=\"3\">BBB</option>\n      <option value=\"4\">bbb</option>\n      <option value=\"5\">ABC</option>\n      <option value=\"6\">abc</option>\n      <option value=\"7\">AbC</option>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select lay-search=\"{caseSensitive:true}\">\n      <option value=\"\">请选择或搜索（设置区分大小写）</option>\n      <option value=\"1\">AAA</option>\n      <option value=\"2\">aaa</option>\n      <option value=\"3\">BBB</option>\n      <option value=\"4\">bbb</option>\n      <option value=\"5\">ABC</option>\n      <option value=\"6\">abc</option>\n      <option value=\"7\">AbC</option>\n      <option value=\"8\">ACb</option>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select lay-search=\"\">\n      <option value=\"\">请搜索</option>\n      <optgroup label=\"分组a\">\n        <option value=\"a1\">a1</option>\n        <option value=\"a2\">a2</option>\n      </optgroup>\n      <optgroup label=\"分组aa\">\n        <option value=\"aa1\">aA1</option>\n        <option value=\"aa2\">aA2</option>\n      </optgroup>\n      <optgroup label=\"分组b\">\n        <option value=\"b1\">b1</option>\n        <option value=\"b2\">b2</option>\n      </optgroup>\n      <optgroup label=\"分组bb\">\n        <option value=\"bb1\">bb1</option>\n        <option value=\"bb2\">bb2</option>\n      </optgroup>\n      <optgroup label=\"分组bbb\">\n        <option value=\"bbb1\">bBb1</option>\n        <option value=\"bbb2\">bBB2</option>\n      </optgroup>\n      <optgroup label=\"分组c\">\n        <option value=\"c1\">c1</option>\n        <option value=\"c2\">c2</option>\n      </optgroup>\n      <optgroup label=\"分组cc\">\n        <option value=\"cc1\">cc1</option>\n        <option value=\"cc2\">cc2</option>\n      </optgroup>\n      <optgroup label=\"分组ccc\">\n        <option value=\"ccc1\">ccc1</option>\n        <option value=\"ccc2\">ccc2</option>\n      </optgroup>\n      <optgroup label=\"分组cccc\">\n        <option value=\"cccc1\">cccc1</option>\n        <option value=\"cccc2\">cccc2</option>\n      </optgroup>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select lay-search=\"\" lay-creatable=\"\">\n      <option value=\"\">可创建新的 option</option>\n      <option value=\"1\">AAA</option>\n      <option value=\"2\">aaa</option>\n      <option value=\"3\">BBB</option>\n      <option value=\"4\">bbb</option>\n      <option value=\"5\">ABC</option>\n      <option value=\"6\">abc</option>\n      <option value=\"7\">AbC</option>\n    </select>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Form HTML\nDESCRIPTION: This HTML code defines a Layui form with different form elements, including various input types (text, date, password, select, switch, radio, textarea) and styling.  It uses Layui's CSS classes to define form appearance. It also sets up the form's structure and input field attributes like `name`, `autocomplete`, `placeholder`, and `lay-verify` for validation.  The form uses the `layui-form-pane` class to style the form elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.pane.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 给容器追加 class=\"layui-form-pane\"，即可显示为方框风格 -->\n<form class=\"layui-form layui-form-pane\" action=\"\">\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">长输入框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"text\" name=\"title\" autocomplete=\"off\" placeholder=\"请输入\" lay-verify=\"required\" class=\"layui-input\">\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期选择</label>\n      <div class=\"layui-input-block\">\n        <input type=\"text\" name=\"date\" id=\"date1\" autocomplete=\"off\" class=\"layui-input\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">行内表单</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" name=\"number\" autocomplete=\"off\" class=\"layui-input\">\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">密码框</label>\n    <div class=\"layui-input-inline\">\n      <input type=\"password\" name=\"password\" placeholder=\"请输入\" lay-verify=\"required\" autocomplete=\"off\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-form-mid layui-text-em\">请务必填写用户名</div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">范围</label>\n      <div class=\"layui-input-inline\" style=\"width: 100px;\">\n        <input type=\"text\" name=\"price_min\" placeholder=\"￥\" autocomplete=\"off\" class=\"layui-input\">\n      </div>\n      <div class=\"layui-form-mid\">-</div>\n      <div class=\"layui-input-inline\" style=\"width: 100px;\">\n        <input type=\"text\" name=\"price_max\" placeholder=\"￥\" autocomplete=\"off\" class=\"layui-input\">\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">选择框</label>\n    <div class=\"layui-input-inline\">\n      <select name=\"interest\" lay-filter=\"aihao\">\n        <option value=\"\"></option>\n        <option value=\"0\">写作</option>\n        <option value=\"1\" selected>阅读</option>\n        <option value=\"2\">游戏</option>\n        <option value=\"3\">音乐</option>\n        <option value=\"4\">旅行</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"layui-form-item\" pane>\n    <label class=\"layui-form-label\">开关-默认开</label>\n    <div class=\"layui-input-block\">\n      <input type=\"checkbox\" checked name=\"open\" lay-skin=\"switch\" lay-filter=\"switchTest\" title=\"开关\">\n    </div>\n  </div>\n  <div class=\"layui-form-item\" pane>\n    <label class=\"layui-form-label\">单选框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"radio\" name=\"sex\" value=\"男\" title=\"男\" checked>\n      <input type=\"radio\" name=\"sex\" value=\"女\" title=\"女\">\n      <input type=\"radio\" name=\"sex\" value=\"禁\" title=\"禁用\" disabled>\n    </div>\n  </div>\n  <div class=\"layui-form-item layui-form-text\">\n    <label class=\"layui-form-label\">文本域</label>\n    <div class=\"layui-input-block\">\n      &lt;textarea placeholder=\"请输入内容\" class=\"layui-textarea\"&gt;&lt;/textarea&gt;\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <button class=\"layui-btn\" lay-submit lay-filter=\"demo2\">确认</button>\n    <button type=\"reset\" class=\"layui-btn layui-btn-primary\">重置</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Basic Layui Modules in JavaScript\nDESCRIPTION: Demonstrates the fundamental structure for defining a Layui module using `layui.define` with optional dependencies ([mods]) and exporting an API via the `exports` function. It also shows how to subsequently use that module ('mod1') with `layui.use`, accessing the exported API via `layui.mod1`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 定义模块（通常单独作为一个 JS 文件）\nlayui.define([mods], function(exports){\n  // …\n\n  exports('mod1', api); // 输出模块\n});\n\n// 使用模块\nlayui.use(['mod1'], function(args){\n  var mod1 = layui.mod1;\n\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Row Click/Double-Click Events in Layui Table (JavaScript)\nDESCRIPTION: Explains how to capture single-click (`row`) and double-click (`rowDouble`) events on table rows using `table.on('event(filter)', callback)`. The callback provides access to row data, the DOM element, and helper methods for deletion or updating the row.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 渲染\ntable.render({\n  elem: '#test',\n  // … // 其他属性\n});\n \n// 行单击事件\ntable.on('row(test)', function(obj) {\n  var data = obj.data; // 得到当前行数据\n  var dataCache = obj.dataCache; // 得到当前行缓存数据，包含特定字段 --- 2.8.8+\n  var index = obj.index; // 得到当前行索引\n  var tr = obj.tr; // 得到当前行 <tr> 元素的 jQuery 对象\n  var options = obj.config; // 获取当前表格基础属性选项\n  var e = obj.e; // 当前的 jQuery 事件对象 --- 2.9.14+\n\n  console.log('onrow', obj); // 查看返回对象的所有成员\n  \n  // obj.del() // 删除当前行\n  // obj.update(fields, related);  // 修改行数据\n  // obj.setRowChecked(opts); // 设置行选中状态\n});\n\n// 行双击事件\ntable.on('rowDouble(test)', function(obj) {\n  console.log('onrowDouble', obj); // 查看返回对象的所有成员 - 同 row 事件\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash State Matching with Layui Tabs\nDESCRIPTION: This snippet shows how to maintain tab state using URL hash values in a Layui tab interface. When a user switches tabs, the hash value in the URL updates accordingly, and when the page refreshes, the active tab is restored based on the hash value.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tab\" lay-filter=\"test-hash\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\" lay-id=\"11\">标签1</li>\n    <li lay-id=\"22\">标签2</li>\n    <li lay-id=\"33\">标签3</li>\n    <li lay-id=\"44\">标签4</li>\n    <li lay-id=\"55\">标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">内容-1</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var element = layui.element;\n  \n  // hash 地址定位\n  var hashName = 'tabid'; // hash 名称\n  var layid = location.hash.replace(new RegExp('^#'+ hashName + '='), ''); // 获取 lay-id 值\n    \n  // 初始切换\n  element.tabChange('test-hash', layid);\n  // 切换事件\n  element.on('tab(test-hash)', function(obj){\n    location.hash = hashName +'='+ this.getAttribute('lay-id');\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Independent Select in Layer using Layui\nDESCRIPTION: This snippet shows how to implement independent select boxes, rendering the select outside the form structure by using `lay-append-to=\"body\"`.  This allows the select box to be used inside components like tables and layers. It shows an example of using a select box within a Layui layer popup.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/select.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"layui-btn\" lay-on=\"layer-select\">弹出 layer+select</button>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var form = layui.form;\n  var table = layui.table;\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on({\n    // 在 layer 中使用 select\n    \"layer-select\": function() {\n      layer.open({\n        type: 1, // page 层类型\n        area: ['500px', '300px'],\n        title: 'layer+select',\n        shadeClose: true, // 点击遮罩区域，关闭弹层\n        maxmin: true, // 允许全屏最小化\n        // 注: 这里特别对 select 设置了 lay-append-position 属性，以便与 layer 的定位方式保持一致\n        content: '<form class=\"layui-form layui-padding-3\" lay-filter=\"test\"><select lay-append-to=\"body\" lay-append-position=\"fixed\"><option value=\"\">请选择</option><option value=\"AAA1\">选项 A1</option><option value=\"AAA2\">选项 A2</option><option value=\"AAA3\">选项 A3</option><option value=\"AAA4\">选项 A4</option><option value=\"AAA5\">选项 A5</option><option value=\"AAA6\">选项 A6</option><option value=\"AAA7\">选项 A7</option><option value=\"AAA8\">选项 A8</option><option value=\"AAA9\">选项 A9</option><option value=\"AAA10\">选项 A10</option><option value=\"AAA11\">选项 A11</option><option value=\"AAA12\">选项 A12</option><option value=\"BBB\">选项 B</option><option value=\"CCC\">选项 C</option></select></form>',\n        success: function (layero) {\n          // 定向渲染 select\n          form.render(layero.find('.layui-form select'));\n\n          // 鼠标滑动 layer 内部滚动条时移除下拉框，以规避错位\n          // 若 layer 内部不存在滚动条，以下代码可删除\n          var selectElem = layero.find('.layui-form-select');\n          layero.find('.layui-layer-content').on('scroll', function() {\n            selectElem.removeClass('layui-form-selected');\n            layui.$('.layui-select-panel-wrap').detach();\n          });\n        },\n      });\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Layui Business Logic Module in JavaScript\nDESCRIPTION: Provides an example of a typical business logic module (`index.js`). It uses `layui.define` to declare its dependencies (e.g., 'layer', 'form'), accesses these dependencies within the callback, performs page-specific actions (like displaying a message with `layer.msg`), and finally exports itself using `exports('index', {})`. The exported module name must match the name used in `layui.use` and potentially `layui.extend`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * index.js 首页业务模块\n */\nlayui.define(['layer', 'form'], function(exports){\n  var layer = layui.layer;\n  var form = layui.form;\n\n  layer.msg('Hello Index');\n\n  exports('index', {}); // 输出模块名需和 use 和 extend 时的模块名一致\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Table Sort Events for Server-Side Sorting (JavaScript)\nDESCRIPTION: Demonstrates handling sort events with `table.on('sort(filter)', callback)`, primarily for implementing server-side sorting. Set `autoSort: false` in the table options. The callback gets the sort field and type, which are typically used to reload the table with appropriate server request parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 禁用前端自动排序，以便由服务端直接返回排序好的数据\ntable.render({\n  elem: '#test',\n  autoSort: false, // 禁用前端自动排序。\n  // … // 其他属性\n});\n \n// 触发排序事件 \ntable.on('sort(test)', function(obj){\n  console.log(obj.field); // 当前排序的字段名\n  console.log(obj.type); // 当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）\n  console.log(this); // 当前排序的 th 对象\n \n  // 尽管我们的 table 自带排序功能，但并没有请求服务端。\n  // 有些时候，你可能需要根据当前排序的字段，重新向后端发送请求，从而实现服务端排序，如：\n  table.reload('test', {\n    initSort: obj, // 记录初始排序，如果不设的话，将无法标记表头的排序状态。\n    where: { // 请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）\n      field: obj.field, // 排序字段\n      order: obj.type // 排序方式\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: 创建 Layui 组件实例（JavaScript）\nDESCRIPTION: 该代码使用 Layui 的 component 模块创建名为 tabs 的组件，演示了组件创建、配置和渲染逻辑，同时将最终组件对象通过 exports 输出。依赖 layui.define 机制和 layui.component。options 参数定义组件的名称、配置及渲染方法。输入为组件配置对象，输出为继承基础接口的组件对象。无明显限制，只需确保依赖已加载。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * tabs\n * 标签页组件\n */\nlayui.define('component', function(exports) {\n  // 创建组件\n  var component = layui.component({\n    name: 'tabs', // 组件名称\n    config: { // 组件默认配置项\n      // …\n    },\n    render: function() { // 组件渲染逻辑\n      // …\n    },\n    // 其他选项\n  });\n\n  // 将创建组件时返回的 `component` 对象作为组件的接口输出\n  // 组件将继承通用的基础接口，如 render, reload, set 等方法\n  exports(component.CONST.MOD_NAME, component);\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Initialization for Layui Upload Modules\nDESCRIPTION: Initializes the Layui upload modules for both single and multiple image uploads. Sets configurations such as upload URLs, preview logic for images before upload, progress updates, success or failure handling, and retry mechanisms. Employs event handlers to manage upload lifecycle events and user interactions, utilizing Layui's layer and element modules for UI feedback.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/image.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n  var layer = layui.layer;\n  var element = layui.element;\n  var $ = layui.$;\n\n  // 单图片上传\n  var uploadInst = upload.render({\n    elem: '#ID-upload-demo-btn',\n    url: '', // 实际使用时改成您自己的上传接口即可。\n    before: function(obj){\n      // 预读本地文件示例，不支持ie8\n      obj.preview(function(index, file, result){\n        $('#ID-upload-demo-img').attr('src', result); // 图片链接（base64）\n      });\n      \n      element.progress('filter-demo', '0%'); // 进度条复位\n      layer.msg('上传中', {icon: 16, time: 0});\n    },\n    done: function(res){\n      // 若上传失败\n      if(res.code > 0){\n        return layer.msg('上传失败');\n      }\n      // 上传成功的一些操作\n      // …\n      $('#ID-upload-demo-text').html(''); // 置空上传失败的状态\n    },\n    error: function(){\n      // 演示失败状态，并实现重传\n      var demoText = $('#ID-upload-demo-text');\n      demoText.html('<span style=\"color: #FF5722;\">上传失败</span> <a class=\"layui-btn layui-btn-xs demo-reload\">重试</a>');\n      demoText.find('.demo-reload').on('click', function(){\n        uploadInst.upload();\n      });\n    },\n    // 进度条\n    progress: function(n, elem, e){\n      element.progress('filter-demo', n + '%'); // 可配合 layui 进度条元素使用\n      if(n == 100){\n        layer.msg('上传完毕', {icon: 1});\n      }\n    }\n  });\n\n  // 多图片上传\n  upload.render({\n    elem: '#ID-upload-demo-btn-2',\n    url: '', // 实际使用时改成您自己的上传接口即可。\n    multiple: true,\n    before: function(obj){\n      // 预读本地文件示例，不支持ie8\n      obj.preview(function(index, file, result){\n        $('#upload-demo-preview').append('<img src=\"'+ result +'\" alt=\"'+ file.name +'\" style=\"width: 90px; height: 90px;\")')\n      });\n    },\n    done: function(res){\n      // 上传完毕\n      // …\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Template in Layui Table Using Function\nDESCRIPTION: Demonstrates implementing a custom cell template using a function. The function receives the current row data and returns HTML content to be displayed in the cell.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.cols.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.render({\n  cols: [[\n    {field: 'title', templet: function(d){\n      console.log(d); // 得到当前行数据\n      console.log(this); // 得到表头当前列配置项\n      console.log(d.LAY_NUM); // 得到序号。或其他特定字段\n      \n      // 返回模板内容\n      return '<a href=\"/detail/'+ d.id +'\" class=\"layui-table-link\">'+ d.title +'</a>'\n    }}\n    // …\n  ]],\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Custom Layui Extension Module in JavaScript\nDESCRIPTION: Demonstrates how to configure Layui to recognize and load a custom extension module ('testModule'). It shows setting a base path for extensions using `layui.config({ base: ... })` and then declaring the module name and its file path relative to the base path using `layui.extend()`. It also shows an alternative `layui.extend()` syntax using `{/}` to specify an absolute path independent of the `base` configuration. Finally, it shows how to use the declared extension module via `layui.use`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// 假设 testModule 模块文件所在路径在：/js/layui_exts/testModule.js\nlayui.config({\n  base: '/js/layui_exts/' // 设置用于扩展模块的基础路径\n}).extend({\n  testModule: 'testModule', // 定义模块名和模块路径，会前置追加 base 基础路径\n  // test1: 'test1' // 还可同时声明其他更多模块\n});\n\n// 也可以不前置追加 base 基础路径，即设置单独路径\nlayui.extend({\n  testModule: '{/}/js/layui_exts/testModule' // 开头特定符 {/} 即代表采用单独路径\n});\n\n// 然后我们就可以像使用内置模块一样使用扩展模块\nlayui.use(['testModule', 'test1'], function(){\n  var testModule = layui.testModule;\n  // var test1 = layui.test1;\n\n  testModule.hello('World');\n});\n```\n\n----------------------------------------\n\nTITLE: Layui Pagination Component Usage Example\nDESCRIPTION: This code demonstrates how to use the `jump` callback function within the Layui pagination component.  It initializes the pagination, sets the data count, and defines a `jump` function to handle page changes.  This function receives the current page number (`obj.curr`) and the page size (`obj.limit`), and it also provides a way to determine if it is the first render.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaypage.render({\n  elem: 'id',\n  count: 70, // 数据总数，从后端得到\n  jump: function(obj, first){\n    console.log(obj.curr); // 得到当前页，以便向服务端请求对应页的数据。\n    console.log(obj.limit); // 得到每页显示的条数\n    \n    // 首次不执行\n    if(!first){\n      // do something\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Radio Events in Layui Table\nDESCRIPTION: Shows how to listen for radio button selection events in a Layui table. The event handler provides information about the selection state and the data of the selected row.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 单选框事件\ntable.on('radio(test)', function(obj){\n  console.log(obj); // 当前行的一些常用操作集合\n  console.log(obj.checked); // 当前是否选中状态\n  console.log(obj.data); // 选中行的相关数据\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Nested Dropdown Menu Using Layui dropdown Module in JavaScript\nDESCRIPTION: Initializes and renders a sophisticated multi-level dropdown menu using Layui's dropdown component attached to the specified button element. It defines the menu data structure with nested groups, child menus, custom HTML templates for icons and images, link attributes like `href` and `target`, and division lines. The configuration enables infinite submenu depth, supports user interaction events, and custom rendering of menu items. Upon clicking a menu item, the event handler utilizes Layui's `layer.msg` and `util.escape` to display an escaped JSON string representation of the clicked item. Dependencies include Layui's dropdown, util, and layer modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/complex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  var util = layui.util;\n\n  // 高级演示 - 复杂结构\n  dropdown.render({\n    elem: '#ID-dropdown-demo-complex',\n    data: [{\n      title: 'menu item 1',\n      templet: '{{!<i class=\"layui-icon layui-icon-picture\"></i> {{= d.title }} <span class=\"layui-badge-dot\"></span>!}}',\n      id: 100,\n      href: '#'\n    },{\n      title: 'menu item 2',\n      templet: '{{!<img src=\"https://unpkg.com/outeres@0.0.11/demo/avatar/0.png\" style=\"width: 16px;\"> {{= d.title }} !}}',\n      id: 101,\n      href: '/',\n      target: '_blank'\n    },\n    {type: '-'}, // 分割线\n    {\n      title: 'menu item 3',\n      id: 102,\n      type: 'group',\n      child: [{\n        title: 'menu item 3-1',\n        id: 103\n      },{\n        title: 'menu item 3-2',\n        id: 104,\n        child: [{\n          title: 'menu item 3-2-1',\n          id: 105\n        },{\n          title: 'menu item 3-2-2',\n          id: 11,\n          type: 'group',\n          child: [{\n            title: 'menu item 3-2-2-1',\n            id: 111\n          },{\n            title: 'menu item 3-2-2-2',\n            id: 1111\n          }]\n        },{\n          title: 'menu item 3-2-3',\n          id: 11111\n        }]\n      },{\n        title: 'menu item 3-3',\n        id: 111111,\n        type: 'group',\n        child: [{\n          title: 'menu item 3-3-1',\n          id: 22\n        },{\n          title: 'menu item 3-3-2',\n          id: 222,\n          child: [{\n            title: 'menu item 3-3-2-1',\n            id: 2222\n          },{\n            title: 'menu item 3-3-2-2',\n            id: 22222\n          },{\n            title: 'menu item 3-3-2-3',\n            id: 2222222\n          }]\n        },{\n          title: 'menu item 3-3-3',\n          id: 333\n        }]\n      }]\n    },\n    {type: '-'},\n    {\n      title: 'menu item 4',\n      id: 4\n    },{\n      title: 'menu item 5',\n      id: 5,\n      child: [{\n        title: 'menu item 5-1',\n        id: 55,\n        child: [{\n          title: 'menu item 5-1-1',\n          id: 5555\n        },{\n          title: 'menu item 5-1-2',\n          id: 55555\n        },{\n          title: 'menu item 5-1-3',\n          id: 555555\n        }]\n      },{\n        title: 'menu item 5-2',\n        id: 52\n      },{\n        title: 'menu item 5-3',\n        id: 53\n      }]\n    },{type:'-'},{\n      title: 'menu item 6',\n      id: 66,\n      type: 'group',\n      isSpreadItem: false,\n      child: [{\n        title: 'menu item 6-1',\n        id: 777\n      },{\n        title: 'menu item 6-2',\n        id: 7777\n      },{\n        title: 'menu item 6-3',\n        id: 77777\n      }]\n    }],\n    click: function(item){\n      layer.msg(util.escape(JSON.stringify(item)));\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Events in Layui Table\nDESCRIPTION: Shows how to define row operation buttons in a template and handle their events. The tool event handler receives an object containing row data and provides methods to update or delete rows.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/html\" id=\"toolEventDemo\">\n  <a class=\"layui-btn layui-btn-xs\" lay-event=\"edit\">编辑</a>\n  <a class=\"layui-btn layui-btn-danger layui-btn-xs\" lay-event=\"del\">删除</a>\n  \n  <!-- 支持任意的 laytpl 组件语法，如： -->\n  {{# if(d.auth > 2){ }}\n    <a class=\"layui-btn layui-btn-xs\" lay-event=\"check\">审核</a>\n  {{# } }}\n</script>\n \n<table id=\"test\" lay-filter=\"test\"></table> \n \n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var table = layui.table;\n\n  // 渲染\n  table.render({\n    elem: '#test',\n    cols: [[\n      {title: '操作', width: 200, templet: '#toolEventDemo'}\n    ]]\n    // … // 其他属性\n  });\n\n  // 单元格工具事件\n  table.on('tool(test)', function(obj){\n    var data = obj.data; // 得到当前行数据\n    var dataCache = obj.dataCache; // 得到当前行缓存数据，包含特定字段 --- 2.8.8+\n    var index = obj.index; // 得到当前行索引\n    var layEvent = obj.event; // 获得元素对应的 lay-event 属性值\n    var tr = obj.tr; // 得到当前行 <tr> 元素的 jQuery 对象\n    var options = obj.config; // 获取当前表格基础属性选项\n    var col = obj.getCol(); // 得到当前列的表头配置属性 -- v2.8.3 新增\n    console.log(obj); // 查看对象所有成员\n    \n    // 根据 lay-event 的值执行不同操作\n    if(layEvent === 'detail'){ //查看\n      // do somehing\n    } else if(layEvent === 'del'){ //删除\n      layer.confirm('确定删除吗？', function(index){\n        obj.del(); // 删除对应行（tr）的 DOM 结构，并更新缓存\n        layer.close(index);\n        \n        // 向后端发送删除请求，执行完毕后，可通过 reloadData 方法完成数据重载\n        /*\n        table.reloadData(id, {\n          scrollPos: 'fixed'  // 保持滚动条位置不变 - v2.7.3 新增\n        });\n        */\n      });\n    } else if(layEvent === 'edit'){ //编辑\n      // do something\n      \n      // 同步更新缓存对应的值\n      // 该方法仅为前端层面的临时更新，在实际业务中需提交后端请求完成真实的数据更新。\n      obj.update({\n        username: '123',\n        title: 'abc'\n      }); \n      // 若需更新其他包含自定义模板并可能存在关联的列视图，可在第二个参数传入 true\n      obj.update({\n        username: '123'\n      }, true); // 注：参数二传入 true 功能为 v2.7.4 新增\n\n   \n      // 当发送后端请求成功后，可再通过 reloadData 方法完成数据重载\n      /*\n      table.reloadData(id, {\n        scrollPos: 'fixed'  // 保持滚动条位置不变 - v2.7.3 新增\n      });\n      */\n    }\n  });\n\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layui Laydate with Lunar Calendar Render JS\nDESCRIPTION: This JavaScript snippet initializes Layui, loads the datepicker, jQuery, and util modules, and configures the `laydate.render` instance. It sets up a static datepicker with a custom 'lunar' theme and defines the `cellRender` function to fetch lunar calendar data, holidays, and jieqi using `lunar-javascript` and display them in the date cells and a preview area. It also adds a context menu to show full lunar details.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/cell.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function () {\n    var laydate = layui.laydate;\n    var $ = layui.$;\n    var util = layui.util;\n    // 渲染\n    laydate.render({\n      elem: '#ID-laydate-cell-render',\n      position: 'static',\n      // value: '2024-03-30',\n      isPreview: false,\n      btns: ['now'],\n      theme: 'lunar',\n      autoConfirm: false,\n      ready: function (date) {\n        if (!this._previewEl) {\n          var key = this.elem.attr('lay-key');\n          var panelEl = $('#layui-laydate' + key);\n          this._previewEl = panelEl.find('.layui-laydate-preview');\n          this.cellRender(date);\n        }\n      },\n      change: function(value, date) {\n        this.cellRender(date);\n      },\n      onNow: function(value, date) {\n        this.cellRender(date);\n      },\n      cellRender: function (ymd, render, info) {\n        var that = this;\n        var y = ymd.year;\n        var m = ymd.month;\n        var d = ymd.date;\n        var lunarDate = Solar.fromYmd(y, m, d).getLunar();\n        var lunar = lunarDate.getDayInChinese();\n        var jieQi = lunarDate.getJieQi();\n        var holiday = HolidayUtil.getHoliday(y, m, d);\n        var displayHoliday = holiday && holiday.getTarget() === holiday.getDay() ? holiday.getName() : undefined;\n        var displayHolidayBadge = holiday && holiday.getTarget() ? (holiday.isWork() ? '班' : '休') : undefined;\n        var isHoliday = holiday && holiday.getTarget() && !holiday.isWork();\n        // 在预览区显示自定义农历相关信息\n        if (that._previewEl && (!info || (info && info.type === \"date\"))) {\n          var holidayBadgeStyle = [\n            'color:#fff',\n            'background-color:' + (isHoliday ? '#eb3333' : '#333'),\n            'display:' + (displayHolidayBadge ? 'inline-block' : 'none')\n          ].join(';');\n          var festivalBadgeStyle = [\n            'color:#fff',\n            'background-color:#1e9fff',\n            'display:' + (displayHoliday || jieQi ? 'inline-block' : 'none')\n          ].join(';');\n          var tipsText = [\n            '<div class=\"preview-inner\">',\n              '<div style=\"color:#333;\">农历' + lunarDate.getMonthInChinese() + '月' + lunarDate.getDayInChinese() + '</div>',\n              '<div style=\"font-size:10px\">' + lunarDate.getYearInGanZhi() + lunarDate.getYearShengXiao() + '年</div>',\n              '<div style=\"font-size:10px\">' + lunarDate.getMonthInGanZhi() + '月 ' + lunarDate.getDayInGanZhi() + '日</div>',\n              '<div class=\"badge\" style=\"' + holidayBadgeStyle  +'\">' + displayHolidayBadge + '</div>',\n              '<div class=\"badge\" style=\"'+ festivalBadgeStyle +'\">' + (displayHoliday || jieQi) + '</div>',\n            '</div>'\n          ].join('');\n          that._previewEl.html(tipsText);\n        };\n        if (!render) return;\n        // 面板类型\n        if (info.type === 'date') {\n          var clazz = [\n            'date-cell-inner',\n            isHoliday ? 'holiday' : '',\n            displayHoliday || jieQi ? 'hightlight' : '',\n          ].join(' ');\n          var content = [\n            '<div class=\"' + clazz + '\">',\n              '<b>' + d + '</b>',\n              '<i>' + (displayHoliday || jieQi || lunar) + '</i>',\n              displayHolidayBadge ? '<u class=\"badge\">' + displayHolidayBadge + '</u>' : '',\n            '</div>',\n          ].join('');\n          // render(content)\n          // render($(content)[0])\n          var contentEl = $(content);\n          contentEl.on('contextmenu', function (e) {\n            e.preventDefault();\n            layer.tips(lunarDate.toString(), this, {\n              tips: [1, '#16baaa'],\n              zIndex: 999999999,\n            });\n          });\n          render(contentEl);\n        } else if (info.type === 'year') {\n          var lunarDate = Lunar.fromDate(new Date(y + 1, 0));\n          var lunar = lunarDate.getYearInGanZhi() + lunarDate.getYearShengXiao();\n          render([\n            y + '年',\n            '<div style=\"font-size:12px\">' + lunar + '年</div>',\n          ].join(''));\n        } else if (info.type === 'month') {\n          var lunar = lunarDate.getMonthInChinese();\n          render([m + '月(' + lunar + '月)'].join(''));\n        }\n      },\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page Data with Layui Table (JavaScript)\nDESCRIPTION: Demonstrates how to retrieve the original data of the current table page using `table.getData(id)`. Requires a rendered Layui table with a specified `id`. The method returns the raw data corresponding to the API response, excluding internal table component fields.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 获取当前页接口数据\nvar data = table.getData('test');\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Using Specific Layui Modules in JavaScript\nDESCRIPTION: Demonstrates the primary method for using specific Layui modules ('layer', 'table') by providing an array of module names to `layui.use`. Within the callback function, the loaded modules are typically accessed as properties of the global `layui` object.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 使用指定模块\nlayui.use(['layer', 'table'], function(){\n  var layer = layui.layer;\n  var table = layui.table;\n\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Validation and Submission with Layui\nDESCRIPTION: This JavaScript snippet uses Layui's 'form' and 'layer' modules to handle form validation and submission. It adds a click event listener to the \"get verification code\" button, triggering form validation. On successful validation, a message is displayed. It also handles the form's submit event, displaying the form data in an alert and preventing the default form submission behavior. Requires Layui library.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.validate.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var $ = layui.$;\n  var form = layui.form;\n  var layer = layui.layer;\n  \n  // 点击获取验证码\n  $('#validate-get-vercode').on('click', function(){\n    var isValid = form.validate('#validate-phone');  // 主动触发验证，v2.7.0 新增 \n    // 验证通过\n    if(isValid){\n      layer.msg('手机号规则验证通过');\n      // 此处可继续书写「发送验证码」等后续逻辑\n      // …\n    }\n  });\n\n  // 提交事件\n  form.on('submit(demo-validate)', function(data){\n    var field = data.field; // 获取表单字段值\n\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n\n    // 此处可执行 Ajax 等操作\n    // …\n\n    return false; // 阻止默认 form 跳转\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeTable Rendering with Tree Attributes (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize and render a TreeTable component with specific tree attributes, including custom name mappings, data, view, async, and callback options. It highlights the structure expected for setting up the tree properties within the render function, facilitating tailored tree behaviors in a web application.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: { // treeTable 特定属性集\n    customName: {},\n    data: {},\n    view: {},\n    async: {},\n    callback: {}\n  },\n  // 其他 table 属性\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values in Layui Transfer Component\nDESCRIPTION: Demonstrates how to pre-populate the right side of the transfer component with initial values. Uses the value parameter to define which items should appear on the right side initially.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo-value\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"瓦罐汤\"},\n    {\"value\": \"2\", \"title\": \"油酥饼\"},\n    {\"value\": \"3\", \"title\": \"炸酱面\"},\n    {\"value\": \"4\", \"title\": \"串串香\", \"disabled\": true},\n    {\"value\": \"5\", \"title\": \"豆腐脑\"},\n    {\"value\": \"6\", \"title\": \"驴打滚\"},\n    {\"value\": \"7\", \"title\": \"北京烤鸭\"},\n    {\"value\": \"8\", \"title\": \"烤冷面\"},\n    {\"value\": \"9\", \"title\": \"毛血旺\", \"disabled\": true},\n    {\"value\": \"10\", \"title\": \"肉夹馍\"},\n    {\"value\": \"11\", \"title\": \"臊子面\"},\n    {\"value\": \"12\", \"title\": \"凉皮\"},\n    {\"value\": \"13\", \"title\": \"羊肉泡馍\"},\n    {\"value\": \"14\", \"title\": \"冰糖葫芦\", \"disabled\": true},\n    {\"value\": \"15\", \"title\": \"狼牙土豆\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-value',\n    data: data,\n    value: [\"1\", \"3\", \"5\", \"7\", \"9\", \"11\"]\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Layui Table Cache (JavaScript)\nDESCRIPTION: Shows how to access the temporary cache (`table.cache`) for a specific table instance using its ID. This cache contains both original API data and internal component fields and can be read from or written to.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 获取对应 table 的临时数据\nvar thisCache = table.cache['test'] || {};\n \n// 变更对应 table 的临时数据中的某个字段值\nthisCache.fieldName = 123;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tools to Layui Table Toolbar\nDESCRIPTION: Shows how to extend the default toolbar with custom tool icons, including setting a title, name, event identifier, and click handler.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefaultToolbar: [\n  'filter', 'exports', 'print', // 内置工具\n  {\n    // 扩展工具\n    title: '提示', // 标题\n    name: 'tips', // name\n    layEvent: 'LAYTABLE_TIPS', // 事件标识\n    icon: 'layui-icon-tips', // 图标 className\n    onClick: function(obj) { // 点击事件 - 2.9.12+\n      console.log(obj); // 查看返回的对象成员\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using All Built-in Layui Modules in JavaScript (v2.6+)\nDESCRIPTION: Shows the shorthand introduced in Layui v2.6+ for using all built-in modules. By calling `layui.use` with only a callback function (omitting the module array), all registered built-in modules become available for use, accessed via the `layui` object within the callback.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// 使用所有内置模块（layui v2.6 开始支持）\nlayui.use(function(){\n  var layer = layui.layer;\n  var table = layui.table;\n  var laydate = layui.laydate;\n  // …\n\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Table with Data and Configuration (JavaScript)\nDESCRIPTION: Initializes the Layui table with data from a JSON file and configures its appearance and behavior. The `table.render` method is used to render the table with specified columns, pagination, and sorting options. It also defines event handlers for row clicks and toolbar actions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/setRowChecked.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('table', function(){\n  var table = layui.table;\n  \n  // 渲染\n  table.render({\n    elem: '#ID-table-demo-setRowChecked',\n    url: '/static/json/2/table/user.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    page: true,\n    cols: [[\n      // {type: 'radio', fixed: 'left'},\n      {field:'id', title:'ID', width:80, fixed: 'left', unresize: true},\n      {field:'username', title:'用户', width:120},\n      {field:'sex', title:'性别', width:80},\n      {field:'city', title:'城市', width:100},\n      {field:'sign', title:'签名'},\n      {field:'experience', title:'积分', width:80, sort: true}\n    ]],\n    toolbar: '#demo-toolbar-setRowChecked',\n    initSort: { // 设置初始排序\n      field: 'experience', // 字段名\n      type: 'desc' // 倒序\n    },\n    height: 366\n  });\n  \n  // 行单击事件( 双击事件为: rowDouble )\n  table.on('row(ID-table-demo-setRowChecked)', function(obj){\n    var data = obj.data; // 获取当前行数据\n    \n    // 显示 - 仅用于演示\n    layer.msg('当前行数据：<br>'+ JSON.stringify(data), {\n      offset: '65px'\n    });\n\n    // 标注当前点击行的选中状态\n    obj.setRowChecked({\n      type: 'radio' // radio 单选模式；checkbox 复选模式\n    });\n  });\n\n  // 头工具栏事件\n  table.on('toolbar(ID-table-demo-setRowChecked)', function(obj){\n    var checkStatus = table.checkStatus(obj.config.id); //获取选中行状态\n    switch(obj.event){\n      case 'getCheckData':\n        var data = checkStatus.data;  // 获取选中行数据\n        layer.alert(JSON.stringify(data));  // 显示 - 仅用于演示\n      break;\n    };\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Table Tool Events with Dropdown Delete Confirmation (Layui)\nDESCRIPTION: Listens for 'tool' events on a Layui table (filter 'test'). When the 'del' event is triggered from a dropdown item associated with a row, it shows a confirmation dialog using `layer.confirm`. If confirmed, it removes the row's DOM structure using `obj.del()` and closes the confirmation dialog. It depends on the Layui `layer`, `table`, and `dropdown` modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.confirm('真的删除行 [id: '+ data.id +'] 么', function(index){\n  obj.del(); // 删除对应行（tr）的DOM结构\n  layer.close(index);\n  // 向服务端发送删除指令\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndropdown.render({\n    elem: this, // 触发事件的 DOM 对象\n    show: true, // 外部事件触发即显示\n    data: [\n      {\n        title: '删除',\n        id: 'del'\n      }\n    ],\n    click: function(data, othis){\n      //Menurut idของข้อมูลคลิก事件处理\n      if(data.id === 'del'){\n        layer.confirm('真的删除行 [id: '+ obj.data.id +'] 么', function(index){\n          obj.del(); // 删除对应行（tr）的DOM结构\n          layer.close(index);\n          // 向服务端发送删除指令\n        });\n      } \n    },\n    id: 'dropdown-table-tool',\n    align: 'right', // 右对齐弹出\n    style: 'box-shadow: 1px 1px 10px rgb(0 0 0 / 12%);' // 设置额外样式\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Transfer Component in Layui\nDESCRIPTION: Demonstrates the basic implementation of a transfer component with default settings. Creates a dual-list interface populated with sample data representing Chinese writers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"李白\"},\n    {\"value\": \"2\", \"title\": \"杜甫\"},\n    {\"value\": \"3\", \"title\": \"苏轼\"},\n    {\"value\": \"4\", \"title\": \"李清照\"},\n    {\"value\": \"5\", \"title\": \"鲁迅\", \"disabled\": true},\n    {\"value\": \"6\", \"title\": \"巴金\"},\n    {\"value\": \"7\", \"title\": \"冰心\"},\n    {\"value\": \"8\", \"title\": \"矛盾\"},\n    {\"value\": \"9\", \"title\": \"贤心\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo',\n    data: data\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagebar Events in Layui Table\nDESCRIPTION: Demonstrates how to use custom pagination bar templates and handle events from elements within them. Available in Layui 2.7+, this feature works similarly to toolbar events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 渲染\ntable.render({\n  elem: '#demo',\n  pagebar: '#pagebarDemo' // 分页栏模板所在的选择器\n  // … // 其他参数\n});\n \n// 分页栏事件\ntable.on('pagebar(test)', function(obj){\n  console.log(obj); // 查看对象所有成员\n  console.log(obj.config); // 当前实例的配置信息\n  console.log(obj.event); // 属性 lay-event 对应的值\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Tab Before Change Events\nDESCRIPTION: This JavaScript code snippet shows how to use `element.on('tabBeforeChange(filter)', callback)` to listen for events triggered before a tab is changed. It provides data regarding the tab container, the index and ID of both the tab being switched from and to.  Returning false within the callback prevents the tab switch, useful for implementing validations or checks before allowing the switch.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar element = layui.element;\n\n// tab 切换前的事件\nelement.on('tabBeforeChange(filter)', function(data){\n  console.log(data.elem); // 得到当前的 tab 容器\n  console.log(data.from.index); // 得到切换前的 tab 项所在下标\n  console.log(data.from.id); // 得到切换前的 tab 项所在ID\n  console.log(data.to.index); // 得到切换后的 tab 项所在下标\n  console.log(data.to.id); // 得到切换后的 tab 项所在ID\n\n  if(data.to.id === 'home') return false; // 返回 false 时阻止切换到对应的选项卡\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Upload Component in JavaScript\nDESCRIPTION: This JavaScript snippet initializes and configures the Layui upload component. It requires the Layui library to be loaded. It uses the `layui.use()` function to load the `upload` and `layer` modules. The `upload.render()` function is used to bind the upload functionality to HTML elements with the class `demo-class-accept`. The `url` parameter specifies the server-side endpoint for file uploads. The `accept` parameter specifies the allowed file types. The `done` function handles the response from the server, displaying a success message using the `layer` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/accept.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var upload = layui.upload;\n  var layer = layui.layer;\n\n  // 渲染\n  upload.render({\n    elem: '.demo-class-accept', // 绑定多个元素\n    url: '', // 此处配置你自己的上传接口即可\n    accept: 'file', // 普通文件\n    done: function(res){\n      layer.msg('上传成功');\n      console.log(res);\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Radio Button Events in Layui using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates binding event listeners to radio buttons with a specific `lay-filter` using `form.on('radio(filter)', callback)`. It handles click events, retrieves element status, and displays messages or processes form data upon selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/radio.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // radio 事件\n  form.on('radio(demo-radio-filter)', function(data){\n    var elem = data.elem; // 原始 DOM 元素\n    var checked = elem.checked; // 选中状态\n    var value = elem.value; // 元素值\n    var othis = data.othis; // 绑定后元素的 jQuery 对象\n    layer.msg(['value: '+ value, 'checked: '+ checked].join('<br>'));\n  });\n\n  // 表单提交事件示例\n  form.on('submit(demo-radio-submit)', function(data){\n    var field = data.field; // 表单字段值\n    layer.alert(JSON.stringify(field), { title: '当前填写的字段值' });\n    return false; // 阻止默认提交\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Rate Component with JavaScript\nDESCRIPTION: Demonstrates how to initialize the Layui rate component using `layui.rate.render()`. The code shows rendering a single instance using an ID (`#ID-test-rate`) and multiple instances using a class name (`.class-test-rate`). It also illustrates using the `lay-options` attribute directly in HTML for configuration. This requires the Layui library to be imported and the `rate` module to be loaded.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-test-rate\"></div>\n<div class=\"class-test-rate\" lay-options=\"{value: 3}\"></div>\n<div class=\"class-test-rate\" lay-options=\"{value: 5}\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var rate = layui.rate;\n  // 单个渲染\n  rate.render({\n    elem: '#ID-test-rate'\n  });\n  // 批量渲染\n  rate.render({\n    elem: '.class-test-rate'\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML File Input Element for Upload\nDESCRIPTION: This HTML snippet creates a file input element with an associated ID and name, serving as the UI trigger for the upload operation. It is referenced by the Layui upload module to initiate the file upload process.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/form.file.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"file\" name=\"file\" id=\"ID-upload-demo-form-files\">\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to Layui Transfer Component\nDESCRIPTION: Shows how to enable search boxes in the transfer component. Implements search functionality to filter items in both lists by setting the showSearch parameter to true.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo-showSearch\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"李白\"},\n    {\"value\": \"2\", \"title\": \"杜甫\"},\n    {\"value\": \"3\", \"title\": \"苏轼\"},\n    {\"value\": \"4\", \"title\": \"李清照\"},\n    {\"value\": \"5\", \"title\": \"鲁迅\", \"disabled\": true},\n    {\"value\": \"6\", \"title\": \"巴金\"},\n    {\"value\": \"7\", \"title\": \"冰心\"},\n    {\"value\": \"8\", \"title\": \"矛盾\"},\n    {\"value\": \"9\", \"title\": \"贤心\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-showSearch',\n    data: data,\n    title: ['文人墨客', '获奖文人'],\n    showSearch: true\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Layui Form Functionality with JavaScript\nDESCRIPTION: JavaScript code that initializes Layui modules and implements form submission handling, dropdown menu rendering, and date picker functionality. It prevents default form submission, displays form data in an alert, and configures component behaviors.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.grid.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var form = layui.form;\n  var layer = layui.layer;\n  var laydate = layui.laydate;\n  var dropdown = layui.dropdown;\n\n  // 提交\n  form.on('submit(demo-search)', function(data){\n    layer.alert(JSON.stringify(data.field), {\n      title: '当前填写的字段值'\n    });\n    // 此处可执行 Ajax 等操作\n    // …\n    return false; // 阻止默认 form 跳转\n  });\n\n  // 下拉菜单\n  dropdown.render({\n    elem: '#demo-search-more',\n    data: [{\n      title: 'List A'\n    },{\n      title: 'List B'\n    },{\n      title: 'List C'\n    }],\n    click: function(obj, othis){\n      this.elem.val(obj.title);\n    },\n    style: 'width: 245px;'\n  })\n\n  // 日期\n  laydate.render({\n    elem: '.demo-search-date'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui laydate with Custom Marked Dates and Click Callback in JavaScript\nDESCRIPTION: This snippet renders a Layui laydate date picker for the input with ID 'ID-laydate-mark', marking specific dates with custom labels such as birthdays and salary days. It provides a 'mark' object that can specify recurring yearly or monthly events (using '0' as a wildcard for year or month). The 'done' callback triggers when a date is selected, and in this example displays a message for October 14. Dependencies include the Layui framework with the laydate module. Input is the selected date; output includes visual badges on the calendar and reactive user feedback on clicks.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/mark.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-mark',\n  mark: {\n    '0-10-14': '生日',\n    '0-12-31': '跨年', // yearly recurring\n    '0-0-10': '工资',    // monthly recurring\n    '0-0-15': '月中',\n    '2017-8-15': '',    // specific date with default badge\n    '2099-10-14': '呵呵'\n  },\n  done: function(value, date){\n    if(date.month === 10 && date.date === 14){ \n      layer.msg('这一天是：Layui 的生日');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Expand or Collapse All Nodes in TreeTable - JavaScript\nDESCRIPTION: This snippet shows how to expand or collapse all nodes in a Layui TreeTable. The `expandAll` function allows you to set the expansion state for all nodes at once.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 展开或关闭全部节点\ntreeTable.expandAll('test', false); // 关闭全部节点\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Linked Date Range - JavaScript\nDESCRIPTION: This code initializes a date range picker using Layui's laydate module in a linked selection mode.  It uses the `rangeLinked: true` parameter to link the start and end date inputs, allowing the user to select the date range more efficiently. This functionality is available from version 2.8 and later. The output is a date range selection interface with linked date selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-rangeLinked',\n  range: ['#ID-laydate-start-date-1', '#ID-laydate-end-date-1'],\n  rangeLinked: true // 开启日期范围选择时的区间联动标注模式 ---  2.8+ 新增\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Card Tab Style with HTML\nDESCRIPTION: This snippet defines the HTML structure for a card-styled tab component. It utilizes the `layui-tab layui-tab-card` classes to enable the card style.  It also uses the structure of the standard tab title and content sections. The example depends on the Layui CSS and JavaScript files to render the component correctly.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n  <textarea>\n<div class=\"layui-tab layui-tab-card\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\">标签1</li>\n    <li>标签2</li>\n    <li>标签3</li>\n    <li>标签4</li>\n    <li>标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">内容-1</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n<!-- import layui -->\n  </textarea>\n```\n\n----------------------------------------\n\nTITLE: Listening for Tab Before Delete Events\nDESCRIPTION: This JavaScript code demonstrates event handling using `element.on('tabBeforeDelete(filter)', callback)` when a tab is about to be deleted.  The callback function provides the index of the tab to be deleted, the tab container and the ID(2.9.11+). This enables you to perform pre-deletion actions such as confirmation dialogs or cleanup tasks.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Layui Vertical Sidebar Navigation\nDESCRIPTION: Defines the HTML markup for a vertical sidebar navigation menu with nested items, including expandable and collapsible sections. Uses Layui CSS classes to style the menu and organize items hierarchically.\nSOURCE: https://github.com/layui/layui/blob/main/docs/nav/examples/side.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>侧边垂直导航 - Layui</title>\n  <meta name=\"renderer\" content=\"webkit\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n</head>\n<body>\n<ul class=\"layui-nav layui-nav-tree layui-nav-side\">\n  <li class=\"layui-nav-item layui-nav-itemed\">\n    <a href=\"javascript:;\">默认展开</a>\n    <dl class=\"layui-nav-child\">\n      <dd><a href=\"javascript:;\">选项1</a></dd>\n      <dd><a href=\"javascript:;\">选项2</a></dd>\n      <dd><a href=\"javascript:;\">选项3</a></dd>\n    </dl>\n  </li>\n  <li class=\"layui-nav-item\">\n    <a href=\"javascript:;\">默认收缩</a>\n    <dl class=\"layui-nav-child\">\n      <dd><a href=\"javascript:;\">选项1</a></dd>\n      <dd><a href=\"javascript:;\">选项2</a></dd>\n      <dd><a href=\"javascript:;\">选项3</a></dd>\n    </dl>\n  </li>\n  <li class=\"layui-nav-item\"><a href=\"javascript:;\">菜单1</a></li>\n  <li class=\"layui-nav-item\"><a href=\"javascript:;\">菜单2</a></li>\n  <li class=\"layui-nav-item\"><a href=\"javascript:;\">菜单3</a></li>\n</ul>\n<script src=\"{{= d.layui[2].cdn.js }}\"></script>\n<script>\nlayui.use(function(){\n  var element = layui.element;\n  element.render('nav');\n});\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Layui Quick Start Example\nDESCRIPTION: This HTML document demonstrates a basic Layui setup. It includes the necessary CSS and JavaScript files from a CDN. It initializes Layui and displays a welcome message using the `layer` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Quick Start - Layui</title>\n  <link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n</head>\n<body>\n  <!-- HTML Content -->\n  <script src=\"{{= d.layui[2].cdn.js }}\"></script>\n  <script>\n  // Usage\n  layui.use(function(){\n    var layer = layui.layer;\n    // Welcome\n    layer.msg('Hello World', {icon: 6});\n  });\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Expand or Collapse Node in TreeTable - JavaScript\nDESCRIPTION: This snippet demonstrates how to expand or collapse a node in a Layui TreeTable. The `expandNode` function is used to control the expansion state of a node, with options to specify the index, expansion flag, and inheritance of the state to child nodes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 展开或关闭对应节点\ntreeTable.expandNode('test', {\n  index: 0, // 第一行\n  expandFlag: true // 展开\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Table in JavaScript\nDESCRIPTION: This JavaScript code initializes a Layui table and sets up an event listener.  It depends on the Layui library. The `table.init()` function is used to initialize the table. The event listener listens for the `parseTable` event.  The code then calls table.init() to initialize the table. The `parse-table-demo` is the id of the HTML table.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/init.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var table = layui.table;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    parseTable: function(){\n      // 转化静态表格\n      table.init('parse-table-demo', {\n        // height: ''\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Layui Table with Event Handling (JavaScript)\nDESCRIPTION: This JavaScript code initializes the Layui table component (`layui.table`) and the dropdown component (`layui.dropdown`). It configures the table (`table.render`) bound to the '#test' element, specifying the data URL, toolbar template, column definitions (including types, widths, sorting, editing, total rows, and custom templates), pagination, height, and custom CSS. The `done` callback initializes dropdown menus for toolbar buttons ('#dropdownButton', '#reloadTest', '#rowMode') and defines their click actions (e.g., opening modals, reloading the table with different parameters). Event listeners (`table.on`) are set up to handle toolbar events (`toolbar(test)`), header column tool events (`colTool(test)`), and row action events (`tool(test)`), triggering actions like displaying data, alerts, or opening modals.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(['table', 'dropdown'], function(){\n  var table = layui.table;\n  var dropdown = layui.dropdown;\n  \n  // 创建渲染实例\n  table.render({\n    elem: '#test',\n    url: '/static/json/2/table/demo1.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    toolbar: '#toolbarDemo',\n    defaultToolbar: ['filter', 'exports', 'print', { // 右上角工具图标\n      title: '提示',\n      layEvent: 'LAYTABLE_TIPS',\n      icon: 'layui-icon-tips',\n      onClick: function(obj) { // 2.9.12+\n        layer.alert('自定义工具栏图标按钮');\n      }\n    }],\n    height: 'full-35', // 最大高度减去其他容器已占有的高度差\n    css: [ // 重设当前表格样式\n      '.layui-table-tool-temp{padding-right: 145px;}'\n    ].join(''),\n    cellMinWidth: 80,\n    totalRow: true, // 开启合计行\n    page: true,\n    cols: [[\n      {type: 'checkbox', fixed: 'left'},\n      {field:'id', fixed: 'left', width:80, title: 'ID', sort: true, totalRow: '合计：'},\n      {field:'username', width:80, title: '用户'},\n      {field:'email', title:'邮箱 <i class=\"layui-icon layui-icon-tips layui-font-14\" lay-event=\"email-tips\" title=\"该字段开启了编辑功能\" style=\"margin-left: 5px;\"></i>', fieldTitle: '邮箱', hide: 0, width:150, expandedMode: 'tips', edit: 'text'},\n      {field:'sex', width:80, title: '性别', sort: true},\n      {field:'sign', title: '签名', edit: 'textarea', minWidth: 260, expandedWidth: 260, totalRow: '{{!人物：<span class=\"layui-badge-rim\">唐代：{{= d.TOTAL_ROW.era.tang }} </span> <span class=\"layui-badge-rim\">宋代：{{= d.TOTAL_ROW.era.song }}</span> <span class=\"layui-badge-rim\">现代：{{= d.TOTAL_ROW.era.xian }}</span>!}}'},\n      {field:'experience', width: 100, title: '积分', sort: true, totalRow: '{{!{{= d.TOTAL_NUMS }} 😊!}}'}, \n      {field:'checkin', title:'打卡', width: 100, sort: true, totalRow: '{{!{{= parseInt(d.TOTAL_NUMS) }} 次!}}'},\n      {field:'ip', title:'IP', width: 120},\n      {field:'joinTime', title:'加入时间', width: 120},\n      {fixed: 'right', title:'操作', width: 134, minWidth: 125, templet: '#toolDemo'}\n    ]],\n    done: function(){\n      var id = this.id;\n\n      // 下拉按钮测试\n      dropdown.render({\n        elem: '#dropdownButton', // 可绑定在任意元素中，此处以上述按钮为例\n        data: [{\n          id: 'add',\n          title: '添加'\n        },{\n          id: 'update',\n          title: '编辑'\n        },{\n          id: 'delete',\n          title: '删除'\n        }],\n        // 菜单被点击的事件\n        click: function(obj){\n          var checkStatus = table.checkStatus(id)\n          var data = checkStatus.data; // 获取选中的数据\n\n          switch(obj.id){\n            case 'add':\n              layer.open({\n                title: '添加',\n                type: 1,\n                area: ['80%','80%'],\n                content: '<div style=\"padding: 16px;\">自定义表单元素</div>'\n              });\n            break;\n            case 'update':\n              if(data.length !== 1) return layer.msg('请选择一行');\n              layer.open({\n                title: '编辑',\n                type: 1,\n                area: ['80%','80%'],\n                content: '<div style=\"padding: 16px;\">自定义表单元素</div>'\n              });\n            break;\n            case 'delete':\n              if(data.length === 0){\n                return layer.msg('请选择一行');\n              }\n              layer.msg('delete event');\n            break;\n          }\n        }\n      });\n \n      // 重载测试\n      dropdown.render({\n        elem: '#reloadTest', // 可绑定在任意元素中，此处以上述按钮为例\n        data: [{\n          id: 'reload',\n          title: '重载'\n        },{\n          id: 'reload-deep',\n          title: '重载 - 参数叠加'\n        },{\n          id: 'reloadData',\n          title: '仅重载数据'\n        },{\n          id: 'reloadData-deep',\n          title: '仅重载数据 - 参数叠加'\n        }],\n        // 菜单被点击的事件\n        click: function(obj){\n          switch(obj.id){\n            case 'reload':\n              // 重载 - 默认（参数重置）\n              table.reload('test', {\n                where: {\n                  abc: '123456',\n                  //test: '新的 test2',\n                  //token: '新的 token2'\n                },\n                /*{{!\n                cols: [[ // 重置表头\n                  {type: 'checkbox', fixed: 'left'},\n                  {field:'id', title:'ID', width:80, fixed: 'left', unresize: true, sort: true, totalRow: '合计：'},\n                  {field:'sex', title:'性别', width:80, edit: 'text', sort: true},\n                  {field:'experience', title:'积分', width:80, sort: true, totalRow: true, templet: '<div>{{= d.experience }} 分</div>'},\n                  {field:'logins', title:'登入次数', width:100, sort: true, totalRow: true},\n                  {field:'joinTime', title:'加入时间', width:120}\n                ]]\n                !}}*/\n              });\n            break;\n            case 'reload-deep':\n              // 重载 - 深度（参数叠加）\n              table.reload('test', {\n                where: {\n                  abc: 123,\n                  test: '新的 test1'\n                },\n                //defaultToolbar: ['print'], // 重载头部工具栏右侧图标\n                //cols: ins1.config.cols\n              }, true);\n            break;\n            case 'reloadData':\n              // 数据重载 - 参数重置\n              table.reloadData('test', {\n                where: {\n                  abc: '123456',\n                  //test: '新的 test2',\n                  //token: '新的 token2'\n                },\n                scrollPos: 'fixed',  // 保持滚动条位置不变 - v2.7.3 新增\n                height: 2000, // 测试无效参数（即与数据无关的参数设置无效，此处以 height 设置无效为例）\n                //url: '404',\n                //page: {curr: 1, limit: 30} // 重新指向分页\n              });\n            break;\n            case 'reloadData-deep':\n              // 数据重载 - 参数叠加\n              table.reloadData('test', {\n                where: {\n                  abc: 123,\n                  test: '新的 test1'\n                }\n              }, true);\n            break;\n          }\n          layer.msg('可观察 Network 请求参数的变化');\n        }\n      });\n \n      // 行模式\n      dropdown.render({\n        elem: '#rowMode',\n        data: [{\n          id: 'default-row',\n          title: '单行模式（默认）'\n        },{\n          id: 'multi-row',\n          title: '多行模式'\n        }],\n        // 菜单被点击的事件\n        click: function(obj){\n          var checkStatus = table.checkStatus(id)\n          var data = checkStatus.data; // 获取选中的数据\n\n          switch(obj.id){\n            case 'default-row':\n              table.reload('test', {\n                lineStyle: null // 恢复单行\n              });\n\n              layer.msg('已设为单行');\n            break;\n            case 'multi-row':\n              table.reload('test', {\n                // 设置行样式，此处以设置多行高度为例。若为单行，则没必要设置改参数 - 注：v2.7.0 新增\n                lineStyle: 'height: 95px;' \n              });\n              layer.msg('即通过设置 lineStyle 参数可开启多行');\n            break;\n          }\n\n        }\n      });\n    },\n    error: function(res, msg){\n      console.log(res, msg)\n    }\n  });\n  \n  // 工具栏事件\n  table.on('toolbar(test)', function(obj){\n    var id = obj.config.id;\n    var checkStatus = table.checkStatus(id);\n    var othis = lay(this);\n\n    switch(obj.event){\n      case 'getCheckData':\n        var data = checkStatus.data;\n        layer.alert(layui.util.escape(JSON.stringify(data)));\n        break;\n      case 'getData':\n        var getData = table.getData(id);\n        console.log(getData);\n        layer.alert(layui.util.escape(JSON.stringify(getData)));\n        break;\n    };\n  });\n\n  // 表头自定义元素工具事件 --- 2.8.8+\n  table.on('colTool(test)', function(obj){\n    var event = obj.event;\n    console.log(obj);\n    if(event === 'email-tips'){\n      layer.alert(layui.util.escape(JSON.stringify(obj.col)), {\n        title: '当前列属性选项'\n      });\n    }\n  });\n  \n  // 触发单元格工具事件\n  table.on('tool(test)', function(obj){ // 双击 toolDouble\n    var data = obj.data; // 获得当前行数据\n    // console.log(obj)\n    if(obj.event === 'edit'){\n      layer.open({\n        title: '编辑 - id:'+ data.id,\n        type: 1,\n        area: ['80%','80%'],\n        content: '<div style=\"padding: 16px;\">自定义表单元素</div>'\n      });\n    } else if(obj.event === 'more'){\n      // 更多 - 下拉菜单\n      dropdown.render({\n        elem: this, // 触发事件的 DOM 对象\n        show: true, // 外部事件触发即显示\n        data: [{\n          title: '查看',\n          id: 'detail'\n        },{\n          title: '删除',\n          id: 'del'\n        }],\n        click: function(menudata){\n          if(menudata.id === 'detail'){\n            layer.msg('查看操作，当前行 ID:'+ data.id);\n          } else if(menudata.id === 'del'){\n            // Handle delete action\n          }\n        },\n        align: 'right', // 右对齐弹出\n        style: 'box-shadow: 1px 1px 10px rgb(0 0 0 / 12%);' // 设置额外样式\n      });\n    }\n  });\n\n  // 单元格编辑事件\n  table.on('edit(test)', function(obj){\n    var value = obj.value // 得到修改后的值\n    ,data = obj.data // 得到所在行所有键值\n    ,field = obj.field; // 得到字段\n    layer.msg('[ID: '+ data.id +'] ' + field + ' 字段更改为：'+ layui.util.escape(value));\n    // update database here\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Interacting with Layui Tree (JavaScript/HTML)\nDESCRIPTION: Demonstrates comprehensive usage of the Layui tree component. It initializes a tree with checkboxes (`showCheckbox: true`), icon-only expand/collapse control (`onlyIconControl: true`), unique ID (`id: 'demo-id-1'`), and jump-on-click functionality (`isJump: true`). It also includes button event handlers (`util.event`) to get checked node data (`tree.getChecked`), programmatically check specific nodes (`tree.setChecked`), and reload the tree instance (`tree.reload`). Requires Layui `tree`, `layer`, and `util` modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tree/detail/demo.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\" lay-on=\"getChecked\">获取选中节点数据</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\" lay-on=\"setChecked\">勾选指定节点</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\" lay-on=\"reload\">重载实例</button>\n</div>\n \n<div id=\"ID-tree-demo\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var tree = layui.tree;\n  var layer = layui.layer;\n  var util = layui.util;\n \n  // 模拟数据\n  var data = [{title:'A-1',id:1,field:'name1',checked:true,spread:true,children:[{title:'B-1-1 可允许跳转',id:3,field:'name11',href:'',children:[{title:'C-1-1-3',id:23,field:'',children:[{title:'D-1-1-3-1',id:24,field:'',children:[{title:'E-1-1-3-1-1',id:30,field:''},{title:'E-1-1-3-1-2',id:31,field:''}]}]},{title:'C-1-1-1',id:7,field:'',children:[{title:'D-1-1-1-1 可允许跳转',id:15,field:'',href:''}]},{title:'C-1-1-2',id:8,field:'',children:[{title:'D-1-1-2-1',id:32,field:''}]}]},{title:'B-1-2',id:4,spread:true,children:[{title:'C-1-2-1',id:9,field:'',disabled:true},{title:'C-1-2-2',id:10,field:''}]},{title:'B-1-3',id:20,field:'',children:[{title:'C-1-3-1',id:21,field:''},{title:'C-1-3-2',id:22,field:''}]}]},{title:'A-2',id:2,field:'',spread:true,children:[{title:'B-2-1',id:5,field:'',spread:true,children:[{title:'C-2-1-1',id:11,field:''},{title:'C-2-1-2',id:12,field:''}]},{title:'B-2-2',id:6,field:'',children:[{title:'C-2-2-1',id:13,field:''},{title:'C-2-2-2',id:14,field:'',disabled:true}]}]},{title:'A-3',id:16,field:'',children:[{title:'B-3-1',id:17,field:'',fixed:true,children:[{title:'C-3-1-1',id:18,field:''},{title:'C-3-1-2',id:19,field:''}]},{title:'B-3-2',id:27,field:'',children:[{title:'C-3-2-1',id:28,field:''},{title:'C-3-2-2',id:29,field:''}]}]}];\n\n  // 渲染\n  tree.render({\n    elem: '#ID-tree-demo',\n    data: data,\n    showCheckbox: true,  // 是否显示复选框\n    onlyIconControl: true,  // 是否仅允许节点左侧图标控制展开收缩\n    id: 'demo-id-1',\n    isJump: true, // 是否允许点击节点时弹出新窗口跳转\n    click: function(obj){\n      var data = obj.data;  //获取当前点击的节点数据\n      layer.msg('状态：'+ obj.state + '<br>节点数据：' + JSON.stringify(data));\n    }\n  });\n\n  // 按钮事件\n  util.event('lay-on', {\n    getChecked: function(othis){\n      var checkedData = tree.getChecked('demo-id-1'); // 获取选中节点的数据\n      \n      layer.alert(JSON.stringify(checkedData), {shade:0});\n      console.log(checkedData);\n    },\n    setChecked: function(){\n      tree.setChecked('demo-id-1', [12, 16]); // 勾选对应 id 值的节点\n    },\n    reload: function(){\n      tree.reload('demo-id-1', {}); // 重载实例\n    }\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Dropdown with Reload Data (JavaScript)\nDESCRIPTION: This JavaScript code initializes a Layui dropdown menu and sets up an input event listener to reload the dropdown data based on user input.  It uses the `layui.dropdown` module to render the dropdown with a predefined dataset and custom styling, then reloads data with matched results using `dropdown.reloadData` method.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/reloadData.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  var $ = layui.$;\n\n  // 渲染\n  var inst = dropdown.render({\n    elem: '#ID-dropdown-demo-reloadData',\n    data: [\n      { id: 1, title: \"Python\" },\n      { id: 2, title: \"JavaScript\" },\n      { id: 3, title: \"Java\" },\n      { id: 4, title: \"C++\" },\n      { id: 5, title: \"PHP\" },\n      { id: 6, title: \"Ruby\" },\n      { id: 7, title: \"Swift\" },\n      { id: 8, title: \"TypeScript\" },\n      { id: 9, title: \"Kotlin\" },\n      { id: 10, title: \"Go\" }\n    ],\n    style: 'min-width: 190px; box-shadow: 1px 1px 11px rgb(0 0 0 / 11%);',\n    click: function(data){\n      this.elem.val(data.title);\n    }\n  });\n\n  // 输入框输入事件\n  $(inst.config.elem).on('input propertychange', function(){\n    var elem = $(this);\n    var value = elem.val().trim();\n\n    // 匹配到对应内容时，重载数据\n    var dataNew = inst.config.data.filter(function(item){\n      var exp = new RegExp(value.split('').join('|'), 'i');\n      return exp.test(item.title);\n    });\n    dropdown.reloadData(inst.config.id, {\n      data: dataNew, // 匹配到的新数据\n      templet: function(d){\n        var exp = new RegExp(value.split('').join('|'), 'gi');\n        return d.title.replace(exp, function (str) {\n          return '<span style=\"color: red;\">' + str + '</span>'\n        });\n      }\n    });\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Upload Success Callback (done) in Layui - JavaScript\nDESCRIPTION: Provides sample implementation for the 'done' callback, triggered after an individual file upload is completed. Allows processing response data, saving file URLs, and interacting with the UI or hidden fields. Parameters: 'res' (server response), 'index' (file index), and 'upload' (trigger to re-upload). Relies on Layui upload module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndone: function(res, index, upload){\n  // 假设 `code: 0` 代表上传成功\n  if(res.code == 0){\n    // do something // 比如将 res 返回的图片链接保存到隐藏域\n  }\n  \n  // 获取当前触发上传的元素，一般用于 elem 绑定 class 的情况\n  var item = this.item;\n  \n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Multi-device Responsive Grids with Layui - HTML\nDESCRIPTION: This code highlights complex responsive layouts by combining up to three device-specific Layui column classes (xs, sm, md) within a row. Columns automatically adjust their width and stacking sequence according to device screen size (phone, tablet, desktop). Layui CSS is required; no JavaScript involved. The snippet is ideal for adaptive dashboards or content sections.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-xs6 layui-col-sm6 layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">xs:6/12 | sm:6/12 | md:4/12</div>\n  </div>\n  <div class=\"layui-col-xs6 layui-col-sm6 layui-col-md4\">\n    <div class=\"grid-demo layui-bg-red\">xs:6/12 | sm:6/12 | md:4/12</div>\n  </div>\n  <div class=\"layui-col-xs4 layui-col-sm12 layui-col-md4\">\n    <div class=\"grid-demo layui-bg-blue\">xs:4/12 | sm:12/12 | md:4/12</div>\n  </div>\n  <div class=\"layui-col-xs4 layui-col-sm7 layui-col-md8\">\n    <div class=\"grid-demo layui-bg-green\">xs:4/12 | sm:7/12 | md:8/12</div>\n  </div>\n  <div class=\"layui-col-xs4 layui-col-sm5 layui-col-md4\">\n    <div class=\"grid-demo layui-bg-black\">xs:4/12 | sm:5/12 | md:4/12</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Getting Layui Table Configuration Options (JavaScript)\nDESCRIPTION: Shows how to retrieve the initial configuration options of a rendered Layui table instance using `table.getOptions(id)`. This returns the options object passed during the `table.render` call.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 获取配置项\nvar thisOptions = table.getOptions('test');\nconsole.log(thisOptions);\n```\n\n----------------------------------------\n\nTITLE: Handling Select Box Events with Layui Form\nDESCRIPTION: This snippet demonstrates how to capture and handle select box events using `form.on('select(filter)', callback)`. It shows how to retrieve the selected value and the original DOM element. Relies on Layui's form and layer modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/select.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <select lay-filter=\"demo-select-filter\">\n    <option value=\"\">请选择</option>\n    <option value=\"AAA\">选项 A</option>\n    <option value=\"BBB\">选项 B</option>\n    <option value=\"CCC\">选项 C</option>\n  </select>\n</div>\n\n<!-- import layui --> \n<script>\nlayui.use(function(){\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // select 事件\n  form.on('select(demo-select-filter)', function(data){\n    var elem = data.elem; // 获得 select 原始 DOM 对象\n    var value = data.value; // 获得被选中的值\n    var othis = data.othis; // 获得 select 元素被替换后的 jQuery 对象\n    \n    layer.msg(this.innerHTML + ' 的 value: '+ value); // this 为当前选中 <option> 元素对象\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Remove Row Record in TreeTable - JavaScript\nDESCRIPTION: This snippet illustrates how to remove a row from a Layui TreeTable. The `removeNode` function removes a row based on its index. \nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 删除行记录\ntreeTable.removeNode('test', 0); // 删除第一行\n```\n\n----------------------------------------\n\nTITLE: Rendering and Searching Layui Data Table with JavaScript\nDESCRIPTION: This JavaScript snippet uses Layui's modules to render a data table and manage search interactions. It initializes the table with a static JSON data source including columns with radio selection, sortable fields, and fixed widths. The date picker is activated on a designated input. On form submission, the table reloads with filtered data based on the form inputs, simulating a search. The search triggers a message notification and prevents default form submission to support single-page app behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/search.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var table = layui.table;\n  var form = layui.form;\n  var laydate = layui.laydate;\n\n  // 创建表格实例\n  table.render({\n    elem: '#ID-table-demo-search',\n    url: '/static/json/2/table/user.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    cols: [[\n      {type: 'radio', title: '\\uD83D\\uDE0A', fixed: true}, // 单选框\n      {field:'id', title: 'ID', width:80, sort: true, fixed: true},\n      {field:'username', title: '\\u7528\\u6237\\u540D', width:80},\n      {field:'sex', title: '\\u6027\\u522B', width:80, sort: true},\n      {field:'city', title: '\\u57CE\\u5E02', width:80},\n      {field:'sign', title: '\\u7B7E\\u540D'},\n      {field:'experience', title: '\\u79EF\\u5206', sort: true, width:80}\n    ]],\n    page: true,\n    height: 310\n  });\n\n  // 日期\n  laydate.render({\n    elem: '.demo-table-search-date'\n  });\n\n  // 搜索提交\n  form.on('submit(demo-table-search)', function(data){\n    var field = data.field; // 获得表单字段\n\n    // 执行搜索重载\n    table.reload('ID-table-demo-search', {\n      page: {\n        curr: 1 // 重新从第 1 页开始\n      },\n      where: field // 搜索的字段\n    });\n\n    layer.msg('搜索成功<br>此处为静态模拟数据，实际使用时需换成真实接口即可');\n\n    return false; // 阻止默认 form 跳转\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Template in Layui Table Using Inline Content\nDESCRIPTION: Shows how to define a custom template for table cells using inline content. This approach requires wrapping the content in a div element to be properly parsed by the template engine.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.cols.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.render({\n  cols: [[\n    {field: 'title', templet: '<div><a href=\"/detail/{{= d.id }}\" class=\"layui-table-link\">{{= d.title }}</a></div>'}\n    // …\n  ]],\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Month Picker with Laydate in JavaScript\nDESCRIPTION: This snippet demonstrates initializing a static month picker using Layui's laydate module. The 'type' option is set to 'month' to restrict selection to month granularity. It targets the element with id 'ID-laydate-static-3' and uses static embedding so the picker is always visible inline on the page.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/static.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  laydate.render({\n    elem: '#ID-laydate-static-3',\n    type: 'month',\n    position: 'static'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Check All Nodes in TreeTable - JavaScript\nDESCRIPTION: This snippet shows how to check or uncheck all nodes in a Layui TreeTable. The `checkAllNodes` function provides a simple way to select or deselect all rows at once.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 勾选或取消勾选单个节点\ntreeTable.checkAllNodes('test', true);  // 全选 \n```\n\n----------------------------------------\n\nTITLE: Handling Layer Popup Drag Completion with moveEnd Callback in JavaScript\nDESCRIPTION: Defines the moveEnd callback in LayUI's layer popup to respond once drag (move) operations finish. The callback receives the popup DOM object and logs a message indicating drag completion. No special dependencies other than LayUI are required. This allows executing custom logic after repositioning the popup by dragging.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 1,\n  content: '内容',\n  moveEnd: function(layero){\n    console.log('拖拽完毕');\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Layui Form Validation and Submission Handling with JavaScript\nDESCRIPTION: Initializes Layui modules and defines custom validation rules for the registration form, such as password confirmation. Handles form submission by validating agreement acceptance, displaying form data, and preventing default submission. Also manages verification code request with validation. This script facilitates interaction, validation, and user feedback during registration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.reg.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var form = layui.form;\n  var layer = layui.layer;\n  var util = layui.util;\n  \n  // 自定义验证规则\n  form.verify({\n    // 确认密码\n    confirmPassword: function(value, item){\n      var passwordValue = $('#reg-password').val();\n      if(value !== passwordValue){\n        return '两次密码输入不一致';\n      }\n    }\n  });\n  \n  // 提交事件\n  form.on('submit(demo-reg)', function(data){\n    var field = data.field; // 获取表单字段值\n    \n    // 是否勾选同意\n    if(!field.agreement){\n      layer.msg('您必须勾选同意用户协议才能注册');\n      return false;\n    }\n    \n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n    \n    // 此处可执行 Ajax 等操作\n    // …\n    \n    return false; // 阻止默认 form 跳转\n  });\n  \n  // 普通事件\n  util.on('lay-on', {\n    // 获取验证码\n    'reg-get-vercode': function(othis){\n      var isvalid = form.validate('#reg-cellphone'); // 主动触发验证，v2.7.0 新增 \n      // 验证通过\n      if(isvalid){\n        layer.msg('手机号规则验证通过');\n        // 此处可继续书写「发送验证码」等后续逻辑\n        // …\n      }\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading arbitrary URL in iframe with maximize/minimize features\nDESCRIPTION: This snippet opens an iframe layer with a provided URL, including options for maximization and minimization. It provides a title and allows the layer to be closed by clicking outside. Dependencies: layui.js layer module. Main parameters specify size, URL content, and maximize/minimize capabilities.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/iframe.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 2,\n  title: 'iframe 任意 URL',\n  shadeClose: true,\n  maxmin: true,\n  area: ['900px', '600px'],\n  content: 'https://dashi.aliyun.com/activity/aigc?userCode=ap0255is'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Edit Events in Layui Table (JavaScript)\nDESCRIPTION: Shows how to handle the `edit` event fired after a table cell is modified using `table.on('edit(filter)', callback)`. The callback receives details like the field, new/old values, and row data, allowing for validation and data persistence logic. The `obj.update()` method updates the cache, and `obj.reedit()` allows restarting the edit.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\nvar layer = layui.layer;\n \n// 单元格编辑事件\ntable.on('edit(test)', function(obj){\n  var field = obj.field; // 得到修改的字段\n  var value = obj.value // 得到修改后的值\n  var oldValue = obj.oldValue // 得到修改前的值 -- v2.8.0 新增\n  var data = obj.data // 得到所在行所有键值\n  var col = obj.getCol(); // 得到当前列的表头配置属性 -- v2.8.0 新增\n  console.log(obj); // 查看对象所有成员\n  \n  // 值的校验\n  if(value.replace(/\\s/g, '') === ''){\n    layer.tips('值不能为空', this, {tips: 1});\n    return obj.reedit(); // 重新编辑 -- v2.8.0 新增\n  }\n\n  // 编辑后续操作，如提交更新请求，以完成真实的数据更新\n  // …\n  \n  // 更新当前缓存数据\n  var update = {};\n  update[field] = value;\n  obj.update(update, true); // 参数 true 为 v2.7 新增功能，即同步更新其他包含自定义模板并可能存在关联的列视图\n});\n```\n\n----------------------------------------\n\nTITLE: Basic laydate Rendering in JavaScript and HTML\nDESCRIPTION: Demonstrates how to render a basic date picker by importing the laydate module, and shows both single and batch rendering examples. It also demonstrates how to set options directly on HTML elements using the lay-options attribute.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" id=\"ID-test-laydate\">\n<input type=\"text\" class=\"class-test-laydate\" lay-options=\"{value: '2016-10-14'}\">\n<input type=\"text\" class=\"class-test-laydate\" lay-options=\"{value: '2017-08-21'}\">\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n  // 单个渲染\n  laydate.render({\n    elem: '#ID-test-laydate'\n  });\n  // 批量渲染\n  laydate.render({\n    elem: '.class-test-laydate'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Layui Table Columns Programmatically (JavaScript)\nDESCRIPTION: Demonstrates using `table.hideCol(id, cols)` to control the visibility of table columns. It can hide/show single columns by field name, multiple columns via an array of objects, or all columns using a boolean value.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 设置对应列的显示或隐藏\ntable.hideCol('test', {\n  field: 'title', // 对应表头的 field 属性值\n  hide: true // `true` or `false`\n});\n\n// 同时设置多列的显示或隐藏\ntable.hideCol('test', [{\n  field: 'title1',\n  hide: true\n}, {\n  field: 'title2',\n  hide: false\n}, {\n  field: 'title3',\n  hide: false\n}]);\n\n// 显示或隐藏全部列\ntable.hideCol('test', false); // `true` or `false`\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Property Names for Tree Nodes in layui TreeTable (JavaScript)\nDESCRIPTION: This snippet configures custom property names for tree node attributes such as 'children', 'isParent', 'name', 'id', 'pid', and 'icon'. These mappings enable the TreeTable to interpret data structures that use non-standard attribute names, allowing flexible integration with various data sources.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: {\n    customName: {\n      children: 'children',\n      isParent: 'isParent',\n      name: 'name',\n      id: 'id',\n      pid: 'parentId',\n      icon: 'icon'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Selection Callback (choose) in Layui Upload - JavaScript\nDESCRIPTION: Implements the 'choose' callback, triggered after file selection. Allows access to selected files, previewing as base64, renaming, or initiating manual upload. 'obj.pushFile()', 'obj.preview()', and additional file management methods are provided. Usage requires Layui upload module; preview not supported in IE8/9.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nchoose: function(obj){\n  // 将每次选择的文件追加到文件队列\n  var files = obj.pushFile();\n  \n  // 预读本地文件，如果是多文件，则会遍历。(不支持ie8/9)\n  obj.preview(function(index, file, result){\n    console.log(index); // 得到文件索引\n    console.log(file); // 得到文件对象\n    console.log(result); // 得到文件base64编码，比如图片\n    \n    // obj.resetFile(index, file, '123.jpg'); // 重命名文件名\n    \n    // 这里还可以做一些 append 文件列表 DOM 的操作\n    \n    // obj.upload(index, file); // 对上传失败的单个文件重新上传，一般在某个事件中使用\n    // delete files[index]; //删除列表中对应的文件，一般在某个事件中使用\n  });\n}\n\n// 获取本次选取的文件，大文件建议用此方法获取文件信息(2.9.9+)\nobj.getChooseFiles();\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Layui Form Structure with Grid Layout\nDESCRIPTION: HTML structure for a Layui form using the grid system with various input types including text fields, dropdowns, and specialized input wrappers with icons. The form features a responsive layout with column classes and includes submit and reset buttons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.grid.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form layui-row layui-col-space16\">\n  <div class=\"layui-col-sm3\">\n    <input type=\"text\" name=\"A\" placeholder=\"Field A\" class=\"layui-input\">\n  </div>\n  <div class=\"layui-col-sm3\">\n    <div class=\"layui-input-wrap\">\n      <input type=\"text\" name=\"B\" placeholder=\"Field B\" lay-affix=\"clear\" class=\"layui-input\">\n    </div>\n  </div>\n  <div class=\"layui-col-sm3\">\n    <input type=\"text\" name=\"C\" placeholder=\"Field C\" class=\"layui-input\">\n  </div>\n  <div class=\"layui-col-sm3\">\n    <input type=\"text\" name=\"D\" placeholder=\"Field D\" class=\"layui-input\">\n  </div>\n  <div class=\"layui-col-md6\">\n    <div class=\"layui-form-item\" style=\"margin-bottom: 0;\">\n      <label class=\"layui-form-label\">Field E :</label>\n      <div class=\"layui-input-block\">\n        <input type=\"text\" name=\"E\" placeholder=\"请输入\" class=\"layui-input\">\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-col-md6\">\n    <div class=\"layui-form-item\" style=\"margin-bottom: 0;\">\n      <label class=\"layui-form-label\">Field F :</label>\n      <div class=\"layui-input-block\">\n        <select name=\"quiz1\">\n          <option value=\"\">省份</option>\n          <option value=\"浙江\">浙江省</option>\n          <option value=\"江西\">江西省</option>\n          <option value=\"福建\">福建省</option>\n        </select>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <div class=\"layui-input-prefix\">\n        <i class=\"layui-icon layui-icon-username\"></i>\n      </div>\n      <input type=\"text\" name=\"G\" value=\"\" required placeholder=\"Field G\" class=\"layui-input\" lay-affix=\"clear\">\n    </div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <input type=\"text\" name=\"H\" required placeholder=\"Field H\" id=\"demo-search-more\" class=\"layui-input\">\n      <div class=\"layui-input-suffix\">\n        <i class=\"layui-icon layui-icon-more-vertical\"></i>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <div class=\"layui-input-prefix\">\n        <i class=\"layui-icon layui-icon-date\"></i>\n      </div>\n      <input type=\"text\" name=\"I\" required placeholder=\"Field I\" class=\"layui-input demo-search-date\">\n      <div class=\"layui-input-suffix\">\n        <i class=\"layui-icon layui-icon-down\"></i>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-btn-container layui-col-xs12\">\n    <button class=\"layui-btn\" lay-submit lay-filter=\"demo-search\">Search</button>\n    <button type=\"reset\" class=\"layui-btn layui-btn-primary\">Reset</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Example HTML Structure for Flow Image Lazy Loading (HTML)\nDESCRIPTION: This HTML snippet provides the structure for images set up for lazy loading using the Layui flow module. Images use a 'lay-src' attribute instead of 'src' to hold the actual image URL, which delays loading until the image enters the viewport. The container has a fixed height with overflow set to allow scrolling, enabling smooth lazy loading behavior as users scroll through the list. This snippet works in tandem with the JavaScript initialization snippet.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"flow-demo-lazyimg\" id=\"ID-flow-demo-lazyimg\">\n  <!-- <img src=\"占位图地址\" lay-src=\"图片实际地址\"> -->\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n  <img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Rules for Layui Forms Using JavaScript\nDESCRIPTION: Demonstrates how to use the 'form.verify' method to define custom form validation rules in the Layui framework. The validation rules are functions that receive the current input value and DOM element, returning error messages if validation fails or halting further checks if conditions are met. Examples include enforcing minimum input length, conditional validation only when input is provided, and customized alert-based validation messages.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.verify({\n  rule1: function(value, elem) {\n    if (value.length < 6) {\n      return '不能小于 6 个字符';\n    }\n  },\n  rule2: function(value, elem) {\n    if (!value) return; // Skip if empty\n\n    if (/^[A-Z]/.test(value)) {\n      return '必须用大写字符开头';\n    }\n  },\n  rule3: function(value, elem) {\n    if(value === 'xxx'){\n      alert('用户名不能为敏感词');\n      return true; // Prevent default tip\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering Layui Tabs with Options in JavaScript\nDESCRIPTION: Demonstrates creating a Layui tabs component programmatically using `tabs.render()` with an options object. It specifies the target container element (`elem`), defines the tab headers (`header`) and content (`body`), and sets the initially selected tab index (`index`). Requires the Layui framework and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"test\"></div>\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var tabs = layui.tabs;\n  tabs.render({\n    elem: '#test',\n    header: [\n      { title: 'Tab1' },\n      { title: 'Tab2' }\n    ],\n    body: [\n      { content: 'Tab content 1' },\n      { content: 'Tab content 2' }\n    ],\n    index: 0, // 初始选中标签索引\n  })\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Layui Grids for Advanced Layouts - HTML\nDESCRIPTION: This sample shows how to nest grid rows within columns to create multi-level, complex layouts using Layui. Inner rows and columns use the same class conventions and can be infinitely nested for granular UI control. \"layui-row\" and \"layui-col-md*\" classes are combined inside parent columns. Only Layui CSS is required. Inputs are arbitrary HTML content for any level; outputs are nested, responsive grids.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-md5\">\n    <div class=\"layui-row grid-demo\">\n      <div class=\"layui-col-md3\">\n        <div class=\"grid-demo grid-demo-bg1\">内部列</div>\n      </div>\n      <div class=\"layui-col-md9\">\n        <div class=\"grid-demo grid-demo-bg2\">内部列</div>\n      </div>\n      <div class=\"layui-col-md12\">\n        <div class=\"grid-demo grid-demo-bg3\">内部列</div>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-col-md7\">\n    <div class=\"layui-row grid-demo grid-demo-bg1\">\n      <div class=\"layui-col-md12\">\n        <div class=\"grid-demo\">内部列</div>\n      </div>\n      <div class=\"layui-col-md9\">\n        <div class=\"grid-demo grid-demo-bg2\">内部列</div>\n      </div>\n      <div class=\"layui-col-md3\">\n        <div class=\"grid-demo grid-demo-bg3\">内部列</div>\n      </div>\n    </div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Date and Time Pickers with Layui JavaScript\nDESCRIPTION: This JavaScript snippet imports the Layui framework and configures six date/time input fields using the 'laydate' module. Each call to laydate.render associates an input (by ID) with a distinct format, input type ('date', 'month', 'time', 'datetime'), or custom range delimiter. Dependencies include the Layui library and its laydate module. The inputs and outputs are HTML input elements referenced by their IDs, with the picker UI and value formatting controlled via the configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/format.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  // 自定义格式\n  laydate.render({\n    elem: '#ID-laydate-format-1',\n    format: 'yyyy年MM月dd日'\n  });\n  laydate.render({\n    elem: '#ID-laydate-format-2',\n    format: 'dd/MM/yyyy'\n  });\n  laydate.render({\n    elem: '#ID-laydate-format-3',\n    format: 'yyyyMMdd'\n  });\n  laydate.render({\n    elem: '#ID-laydate-format-4',\n    type: 'time',\n    format: 'H点m分'\n  });\n  laydate.render({\n    elem: '#ID-laydate-format-5',\n    type: 'month',\n    range: '~',\n    format: 'yyyy-MM'\n  });\n  laydate.render({\n    elem: '#ID-laydate-format-6',\n    type: 'datetime',\n    range: '到',\n    format: 'yyyy年M月d日H时m分s秒'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Carousel Component\nDESCRIPTION: This snippet demonstrates how to render the Layui carousel component using the `carousel.render()` method. It initializes the carousel with the provided options and returns an instance object that provides methods for manipulating the carousel.  The options parameter allows customizing the appearance and behavior of the carousel.\nSOURCE: https://github.com/layui/layui/blob/main/docs/carousel/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar inst = carousel.render(options);\nconsole.log(inst); // 得到当前实例对象\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Dark Message JavaScript\nDESCRIPTION: Implements the event handler for the 'test-msg-dark' `lay-on` value. It displays a simple Layui message box (`layer.msg`) using the default styling, which is typically a dark background. This shows the basic usage of the message function.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-msg-dark\": function(){\n  layer.msg('深色提示框的示例');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Two-Level Table Headers in layui\nDESCRIPTION: This snippet defines a layui table with a two-level header structure, including fixed columns, centered alignments, and a toolbar with action buttons, configured via 'lay-data'. It includes dependencies on layui library and JSON data source.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/theads.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-table\" lay-data=\"{url:'/static/json/2/table/demo2.json?v=2', page: true, limit: 6, limits:[6]}\" id=\"ID-table-demo-theads-1\">\n  <thead>\n    <tr>\n      <th lay-data=\"{checkbox:true}\" rowspan=\"2\"></th>\n      <th lay-data=\"{field:'username', width:80}\" rowspan=\"2\">联系人</th>\n      <th lay-data=\"{align:'center'}\" colspan=\"3\">地址</th>\n      <th lay-data=\"{field:'amount'}\" rowspan=\"2\">数量</th>\n      <th lay-data=\"{fixed: 'right', width: 160, align: 'center', toolbar: '#templet-demo-theads-tool'}\" rowspan=\"2\">操作</th>\n    </tr>\n    <tr>\n      <th lay-data=\"{field:'province', width:100}\">省</th>\n      <th lay-data=\"{field:'city', width:100}\">市</th>\n      <th lay-data=\"{field:'zone', width:100}\">区</th>\n    </tr>\n  </thead>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Events in Layui Table\nDESCRIPTION: Demonstrates how to listen for checkbox selection events in a Layui table. The event handler provides information about selection state, row data, and whether it's a single or all-checkbox selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 复选框事件\ntable.on('checkbox(test)', function(obj){\n  console.log(obj); // 查看对象所有成员\n  console.log(obj.checked); // 当前是否选中状态\n  console.log(obj.data); // 选中行的相关数据\n  console.log(obj.type); // 若触发的是全选，则为：all；若触发的是单选，则为：one\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Internal and Global Events in Layui Components - JavaScript\nDESCRIPTION: Specifies internal event handlers for the component, including the possibility to bind to global events such as those on the window or document. This method can be defined within the component configuration or on the component prototype `Class.prototype.events`. It orchestrates event-driven behavior for the component's interaction model.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nevents: function() {\n  // 亦可包含针对组件的 window, document 等全局事件\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Layui Module with Dependencies in JavaScript\nDESCRIPTION: Example of defining a Layui module ('demo') that depends on other built-in modules ('layer', 'laydate'). Inside the callback, it retrieves the dependent modules (`layui.layer`, `layui.laydate`) and then attempts to export its own API. It highlights that exporting with a unique name ('demo') succeeds, while attempting to use an existing module name ('layer') fails.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.define(['layer', 'laydate'], function(exports){\n  var layer = layui.layer // 获得 layer 模块\n  var laydate = layui.laydate; // 获得 laydate 模块\n\n  // 输出模块\n  exports('demo', {}); // 模块名 demo 未被占用，此时模块定义成功\n  // exports('layer', {}); // 模块名 layer 已经存在，此时模块定义失败\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Layer Component and Event Handlers\nDESCRIPTION: Initializes the Layui library and defines event handlers for different layer examples. It uses `layui.use` to load required modules like `layer`, `util`, and `form`.  The `util.on` method binds button clicks to functions that open Layui layer modal windows with varying configurations.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/page.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var $ = layui.$;\n  var layer = layui.layer;\n  var util = layui.util;\n  var form = layui.form;\n\n  // 事件\n  util.on('lay-on', {\n    'test-page': function(){\n      layer.open({\n        type: 1,\n        // area: ['420px', '240px'], // 宽高\n        content: '<div style=\"padding: 16px;\">任意 HTML 内容</div>'\n      });\n    },\n    'test-page-wrap': function(){\n      layer.open({\n        type: 1,\n        shade: false, // 不显示遮罩\n        content: $('#ID-test-layer-wrapper'), // 捕获的元素\n        end: function(){\n          // layer.msg('关闭后的回调', {icon:6});\n        }\n      });\n    },\n    'test-page-title': function(){\n      layer.open({\n        type: 1,\n        area: ['420px', '240px'], // 宽高\n        title: false, // 不显示标题栏\n        closeBtn: 0,\n        shadeClose: true, // 点击遮罩关闭层\n        content: '<div style=\"padding: 16px;\">任意 HTML 内容。可点击遮罩区域关闭。</div>'\n      });\n    },\n    'test-page-move': function(){\n      layer.open({\n        type: 1,\n        area: ['420px', '240px'], // 宽高\n        title: false,\n        content: ['<div style=\"padding: 11px;\">',\n          '任意 HTML 内容',\n          '<div style=\"padding: 16px 0;\">',\n            '<button class=\"layui-btn\" id=\"ID-test-layer-move\">拖拽此处移动弹层</button>',\n          '</div>',\n        '</div>'].join(''),\n        move: '#ID-test-layer-move'\n      });\n    },\n    'test-page-custom': function(){\n      layer.open({\n        type: 1,\n        area: '350px',\n        resize: false,\n        shadeClose: true,\n        title: 'demo : layer + form',\n        content: `\n          <div class=\"layui-form\" lay-filter=\"filter-test-layer\" style=\"margin: 16px;\">\n            <div class=\"demo-login-container\">\n              <div class=\"layui-form-item\">\n                <div class=\"layui-input-wrap\">\n                  <div class=\"layui-input-prefix\">\n                    <i class=\"layui-icon layui-icon-username\"></i>\n                  </div>\n                  <input type=\"text\" name=\"username\" value=\"\" lay-verify=\"required\" placeholder=\"用户名\" lay-reqtext=\"请填写用户名\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"clear\">\n                </div>\n              </div>\n              <div class=\"layui-form-item\">\n                <div class=\"layui-input-wrap\">\n                  <div class=\"layui-input-prefix\">\n                    <i class=\"layui-icon layui-icon-password\"></i>\n                  </div>\n                  <input type=\"password\" name=\"password\" value=\"\" lay-verify=\"required\" placeholder=\"密   码\" lay-reqtext=\"请填写密码\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"eye\">\n                </div>\n              </div>\n              <div class=\"layui-form-item\">\n                <div class=\"layui-row\">\n                  <div class=\"layui-col-xs7\">\n                    <div class=\"layui-input-wrap\">\n                      <div class=\"layui-input-prefix\">\n                        <i class=\"layui-icon layui-icon-vercode\"></i>\n                      </div>\n                      <input type=\"text\" name=\"captcha\" value=\"\" lay-verify=\"required\" placeholder=\"验证码\" lay-reqtext=\"请填写验证码\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"clear\">\n                    </div>\n                  </div>\n                  <div class=\"layui-col-xs5\">\n                    <div style=\"margin-left: 10px;\">\n                      <img src=\"https://www.oschina.net/action/user/captcha\" onclick=\"this.src='https://www.oschina.net/action/user/captcha?t='+ new Date().getTime();\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"layui-form-item\">\n                <input type=\"checkbox\" name=\"remember\" lay-skin=\"primary\" title=\"记住密码\">\n                <a href=\"#forget\" style=\"float: right; margin-top: 7px;\">忘记密码？</a>\n              </div>\n              <div class=\"layui-form-item\">\n                <button class=\"layui-btn layui-btn-fluid\" lay-submit lay-filter=\"demo-login\">登录</button>\n              </div>\n              <div class=\"layui-form-item demo-login-other\">\n                <label>社交账号登录</label>\n                <span style=\"padding: 0 21px 0 6px;\">\n                  <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-qq\" style=\"color: #3492ed;\"></i></a>\n                  <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-wechat\" style=\"color: #4daf29;\"></i></a>\n                  <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-weibo\" style=\"color: #cf1900;\"></i></a>\n                </span>\n                或 <a href=\"#reg\">注册帐号</a></span>\n              </div>\n            </div>\n          </div>\n        `,\n        success: function(){\n          // 对弹层中的表单进行初始化渲染\n          form.render();\n\n          // 表单提交事件\n          form.on('submit(demo-login)', function(data){\n            var field = data.field; // 获取表单字段值\n            // 显示填写结果，仅作演示用\n            layer.alert(JSON.stringify(field), {\n              title: '当前填写的字段值'\n            });\n            // 此处可执行 Ajax 等操作\n            // …\n            return false; // 阻止默认 form 跳转\n          });\n        }\n      });\n    }\n  })\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Instance and Properties in Layui\nDESCRIPTION: Demonstrates how to obtain the slider instance object after rendering, which provides access to methods for manipulating the slider and its configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar inst = slider.render(options);\nconsole.log(inst); // 得到当前实例对象\n```\n\n----------------------------------------\n\nTITLE: Handling Table Row Click Event (Layui)\nDESCRIPTION: Listens for the 'row' event (single click) on a Layui table (filter 'test'). When a row is clicked, this function is executed. The example code is currently commented out but demonstrates where to place logic for handling single row clicks. The `obj` parameter contains details about the clicked row. Depends on the Layui `table` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.on('row(test)', function(obj){\n  //console.log(obj);\n  //layer.closeAll('tips');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring a Layui Table with Custom Pagination and Footer Events (JavaScript)\nDESCRIPTION: This JavaScript code utilizes the Layui framework's `table` module. It initializes a table by calling `table.render()`, targeting the HTML element `#ID-table-demo-page`. It fetches data from a specified URL, configures pagination options (layout, groups, hiding first/last pages), and associates the custom footer template (`#ID-table-demo-page-pagebar`) using the `pagebar` option. It also defines column properties. Finally, it sets up an event listener (`table.on('pagebar(...)')`) to capture and handle click events (identified by `lay-event`) from the custom buttons defined in the pagebar template.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/page.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use('table', function(){\n  var table = layui.table;\n  \n  // 创建渲染实例\n  table.render({\n    elem: '#ID-table-demo-page',\n    url:'/static/json/2/table/user.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    page: { // 支持传入 laypage 组件的所有参数（某些参数除外，如：jump/elem） - 详见文档\n      layout: ['limit', 'count', 'prev', 'page', 'next', 'skip'], //自定义分页布局\n      //curr: 5, //设定初始在第 5 页\n      groups: 1, //只显示 1 个连续页码\n      first: false, //不显示首页\n      last: false //不显示尾页\n    },\n    pagebar: '#ID-table-demo-page-pagebar', // 分页栏模板\n    cols: [[\n      {field:'id', width:80, title: 'ID', sort: true},\n      {field:'username', width:80, title: '用户名'},\n      {field:'sex', width:80, title: '性别', sort: true},\n      {field:'city', width:80, title: '城市'},\n      {field:'sign', title: '签名', minWidth: 150},\n      {field:'experience', width:80, title: '积分', sort: true}\n    ]]\n  });\n\n  // 底部分页栏事件\n  table.on('pagebar(ID-table-demo-page)', function(obj){\n    var eventValue = obj.event; // 获得按钮 lay-event 值\n    layer.msg(eventValue);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Layui Input Groups with Various Prefixes and Suffixes in HTML\nDESCRIPTION: HTML structure using Layui CSS classes (`layui-form`, `layui-form-item`, `layui-input-group`, `layui-input-prefix`, `layui-input-suffix`, `layui-input-split`) to create input fields with various addons. Examples include text prefixes/suffixes (e.g., '身高', 'cm'), button suffixes, and icon suffixes (`layui-icon-search`). It demonstrates configurations both with the `layui-input-split` class for visual separation and without it for a borderless integration. Requires the Layui CSS framework to be imported and linked.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/input.group.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">    \n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-split layui-input-prefix\">\n        身高\n      </div>\n      <input type=\"text\" placeholder=\"带任意前置和后置内容\" class=\"layui-input\">\n      <div class=\"layui-input-split layui-input-suffix\">\n        cm\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-split layui-input-prefix\">\n        手机号\n      </div>\n      <input type=\"text\" placeholder=\"带任意前置和后置内容\" class=\"layui-input\">\n      <div class=\"layui-input-suffix\">\n        <button class=\"layui-btn layui-btn-primary\">一个按钮</button>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-split layui-input-prefix\">\n        用户名\n      </div>\n      <input type=\"text\" placeholder=\"带任意前置内容\" class=\"layui-input\">\n    </div>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <input type=\"text\" placeholder=\"带任意后置内容\" class=\"layui-input\">\n      <div class=\"layui-input-split layui-input-suffix\" style=\"cursor: pointer;\">\n        <i class=\"layui-icon layui-icon-search\"></i>\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-prefix\">\n        搜索\n      </div>\n      <input type=\"text\" placeholder=\"带任意前置和后置内容\" class=\"layui-input\">\n      <div class=\"layui-input-split layui-input-suffix\" style=\"cursor: pointer;\">\n        <i class=\"layui-icon layui-icon-search\"></i>\n      </div>\n    </div>\n  </div>\n  \n  <hr style=\"margin: 32px 0;\">\n\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-prefix\">\n        身高\n      </div>\n      <input type=\"text\" placeholder=\"前置和后置无分割框\" class=\"layui-input\">\n      <div class=\"layui-input-suffix\">\n        cm\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <div class=\"layui-input-prefix\">\n        昵称\n      </div>\n      <input type=\"text\" placeholder=\"带前置且无分割框\" class=\"layui-input\">\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-group\">\n      <input type=\"text\" placeholder=\"带后置且无分割框\" class=\"layui-input\">\n      <div class=\"layui-input-suffix\">\n        <i class=\"layui-icon layui-icon-tips\"></i> 任意后置内容\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Login Form Submission with JavaScript\nDESCRIPTION: This snippet leverages Layui's modular API in JavaScript to bind a form submission event listener, retrieving user input data and presenting it in an alert modal for feedback. It requires the Layui JavaScript library, specifically the 'form' and 'layer' modules, and expects a form element conforming to Layui markup. Input fields include username, password, and captcha, with the output being a JSON-formatted alert of submitted fields; AJAX integration is indicated for further use.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.login.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // 提交事件\n  form.on('submit(demo-login)', function(data){\n    var field = data.field; // 获取表单字段值\n\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n\n    // 此处可执行 Ajax 等操作\n    // …\n\n    return false; // 阻止默认 form 跳转\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Properties for Transfer in Layui\nDESCRIPTION: This snippet illustrates how to set global default properties for all `transfer` components using `transfer.set()`. This allows for applying default configurations to all instances.  The `options` parameter is an object containing the properties to override. These settings will be applied to any transfer component rendered after this call. This operation is used to define a standard behavior across the whole application and relies on the Layui library.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 设置 transfer 全局默认属性\ntransfer.set({\n  height: 'auto', // 所有穿梭框默认高度为自动\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Table Row Double Click Event (Layui)\nDESCRIPTION: Listens for the 'rowDouble' event (double click) on a Layui table (filter 'test'). When a row is double-clicked, this function is triggered, and it logs the event object (`obj`) to the console. The `obj` contains information about the double-clicked row and its data. Depends on the Layui `table` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.on('rowDouble(test)', function(obj){\n  console.log(obj);\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Browser Windows with Layui util.openWin - JavaScript\nDESCRIPTION: Provides examples for opening new browser tabs or windows using util.openWin. Requires Layui util module. The options object may specify a URL, inline content, target window name/type, window specs, and window context; uses a wrapper over window.open for enhanced cross-browser flexibility. Outputs a new window/tab with the requested content.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开一个 url\nutil.openWin({\n  url: 'https://cn.bing.com'\n});\n// 打开一个自定义内容窗口\nutil.openWin({\n  content: 'Hello World.'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring layui Tabs Triggered by mousedown Event in HTML\nDESCRIPTION: This snippet demonstrates a layui tabs component configured to switch tabs when a mousedown event occurs on the tab headers. The 'lay-options' attribute is set to use the 'mousedown' trigger, enabling tab switching on mouse button press. It contains six tab headers and their associated content panels. Similar to the first snippet, layui's core library must be imported for proper functionality. Inputs are the tab labels and mouse interaction; output is the visible tab content corresponding to the pressed tab.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/trigger.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-tabs-card layui-panel\" lay-options=\"{trigger: 'mousedown'}\">\n  <ul class=\"layui-tabs-header layui-bg-tint\">\n    <li class=\"layui-this\">标题1</li>\n    <li>标题2</li>\n    <li>标题3</li>\n    <li>标题4</li>\n    <li>标题5</li>\n    <li>标题6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item layui-show\">内容-1</div>\n    <div class=\"layui-tabs-item\">内容-2</div>\n    <div class=\"layui-tabs-item\">内容-3</div>\n    <div class=\"layui-tabs-item\">内容-4</div>\n    <div class=\"layui-tabs-item\">内容-5</div>\n    <div class=\"layui-tabs-item\">内容-6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Closing Specific Tabs in Layui Tabs in JavaScript\nDESCRIPTION: Provides examples of closing specific tabs within a Layui tabs instance ('test') using the `tabs.close()` method. It demonstrates closing by index, forcing closure (ignoring `beforeClose` event) using the `force` parameter, and closing by the `lay-id` attribute value. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.close('test', 3); // 关闭索引为 3 的标签\ntabs.close('test', 3, true); // 强制关闭索引为 3 的标签\ntabs.close('test', 'abc'); // 关闭 lay-id=\"abc\" 的标签\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Date/Time Range - JavaScript\nDESCRIPTION: This code initializes a date and time range picker using Layui's laydate module. It requires the Layui library to be loaded. It sets the `elem` to the container element, sets the `type` parameter to 'datetime' for date and time selection, and the `range` to true for selecting a date and time range. The output is a range selection interface for selecting a date and time range.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-range-datetime',\n  type: 'datetime',\n  range: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Selection with Layui Slider\nDESCRIPTION: Shows how to create a range slider with Layui that allows selecting minimum and maximum values. Examples include setting initial values for both handles and handling the selection change event.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-range-1\"></div>\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-range-2\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n  var layer = layui.layer;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-range-1',\n    value: 40, // 初始值\n    range: true, // 范围选择\n    done: function(vals){\n      layer.msg('开始值：'+ vals[0] + '、结尾值：'+ vals[1]);\n    }\n  });\n  slider.render({\n    elem: '#ID-slider-demo-range-2',\n    value: [30, 60], // 初始值\n    range: true // 范围选择\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Context Menu with Layui Dropdown in JavaScript\nDESCRIPTION: This snippet initializes a custom right-click context menu on the element identified by '#ID-dropdown-demo-contextmenu' using Layui's dropdown.render method. The menu is configured with static menu items, submenus, disabled group expansion, and a fixed width. It also handles click events on menu items to trigger actions like showing a message, printing the page, or reloading the page. The dropdown depends on Layui's 'dropdown' and 'util' modules and expects an element with the specified ID as the menu container.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/contextmenu.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  var util = layui.util;\n\n  // 右键菜单\n  dropdown.render({\n    elem: '#ID-dropdown-demo-contextmenu', // 也可绑定到 document，从而重置整个右键\n    trigger: 'contextmenu', // contextmenu\n    isAllowSpread: false, // 禁止菜单组展开收缩\n    style: 'width: 200px', // 定义宽度，默认自适应\n    data: [{\n      title: 'menu item 1',\n      id: 'test'\n    }, {\n      title: 'Printing',\n      id: 'print'\n    },{\n      title: 'Reload',\n      id: 'reload'\n    },{type:'-'},{\n      title: 'menu item 3',\n      id: '#3',\n      child: [{\n        title: 'menu item 3-1',\n        id: '#1'\n      },{\n        title: 'menu item 3-2',\n        id: '#2'\n      },{\n        title: 'menu item 3-3',\n        id: '#3'\n      }]\n    },\n    {type: '-'},\n    {\n      title: 'menu item 4',\n      id: ''\n    },{\n      title: 'menu item 5',\n      id: '#1'\n    },{\n      title: 'menu item 6',\n      id: '#1'\n    }],\n    click: function(obj, othis){\n      if(obj.id === 'test'){\n        layer.msg('click');\n      } else if(obj.id === 'print'){\n        window.print();\n      } else if(obj.id === 'reload'){\n        location.reload();\n      }\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Accept MIME Types (Layui) - JavaScript\nDESCRIPTION: Shows how to restrict file selection in the upload dialog using the 'acceptMime' property. Accepts a comma-separated string of MIME types, e.g., 'image/*' for all images, or specific formats such as 'image/jpeg, image/png'. This setting controls the browser file picker but not server-side validation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nacceptMime: 'image/*'\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nacceptMime: 'image/jpeg, image/png'\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events in Layui Table Headers (JavaScript)\nDESCRIPTION: Shows how to trigger and handle custom events from elements placed within table header cells using `table.on('colTool(filter)', callback)`. Add elements with `lay-event` attributes to the column title definition and use the event listener to react to clicks.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 渲染\ntable.render({\n  elem: '#test',\n  cols: [[\n    {field:'username', title:'用户名 <i class=\"layui-icon layui-icon-username\" lay-event=\"username\"></i>'}\n  ]]\n  // … // 其他属性\n});\n \n// 表头自定义元素工具事件\ntable.on('colTool(test)', function(obj){\n  var col = obj.col; // 获取当前列属性选项\n  var options = obj.config; // 获取当前表格基础属性选项\n  var layEvent = obj.event; // 获得自定义元素对应的 lay-event 属性值\n  console.log(obj); // 查看对象所有成员\n});\n```\n\n----------------------------------------\n\nTITLE: Styling a Layui Login Form with CSS\nDESCRIPTION: This snippet styles the login container and icon elements using CSS, adjusting width, margin, icon size, and display properties for proper alignment and visual appeal. It requires the class and structure provided by Layui and associated HTML, and is applied globally or within a specific stylesheet. Inputs are inherited from HTML attributes, while the output is a visually styled and user-friendly form.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.login.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-login-container{width: 320px; margin: 21px auto 0;}\n.demo-login-other .layui-icon{position: relative; display: inline-block; margin: 0 2px; top: 2px; font-size: 26px;}\n```\n\n----------------------------------------\n\nTITLE: Handling All Files Uploaded Callback (allDone) in Layui - JavaScript\nDESCRIPTION: Defines the 'allDone' callback executed after all files in a multi-file upload batch complete, available when 'multiple' is true. The function receives an object with total, successful, and failed file counts, supporting post-processing or summary UI updates. Requires Layui's upload module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nallDone: function(obj){\n  console.log(obj.total); // 上传的文件总数\n  console.log(obj.successful); // 上传成功的文件数\n  console.log(obj.failed); // 上传失败的文件数\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layui Form with Validation\nDESCRIPTION: This HTML snippet defines a Layui form with fields for phone number and verification code. The phone number field uses Layui's built-in 'phone' validation rule. A button is included to trigger the retrieval of a verification code, and another button submits the form.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.validate.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">手机</label>\n    <div class=\"layui-input-block\">\n      <input type=\"tel\" name=\"phone\" lay-verify=\"required|phone\" class=\"layui-input\" id=\"validate-phone\">\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">验证码</label>\n    <div class=\"layui-input-inline\">\n      <input type=\"text\" name=\"vercode\" lay-verify=\"required\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-inline\"> \n      <button type=\"button\" class=\"layui-btn layui-btn-primary\" id=\"validate-get-vercode\">获取验证码</button>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-block\">\n      <button class=\"layui-btn\" lay-submit lay-filter=\"demo-validate\">提交</button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manually Submitting Upload with layui Upload Instance in JavaScript\nDESCRIPTION: This code demonstrates how to trigger the upload submission manually by calling inst.upload(), typically in error handling where an upload failed. Dependencies include an initialized layui upload instance. The snippet also suggests integrating this within an event handler, such as a click event on a 'Retry' button, allowing users to retry file uploads when previous attempts have failed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 渲染\nvar inst = upload.render({\n  elem: '#id',\n  error: function(){ // 上传失败的回调\n    // 当上传失败时，可在此处生成「重新上传」按钮，并执行该方法重新触发上传提交\n    /*\n    $('#btn').on('click', function(){\n      inst.upload();\n    })\n    */\n  }\n  // …\n}); \n```\n\n----------------------------------------\n\nTITLE: Reloading layui Upload Instance Configuration in JavaScript\nDESCRIPTION: This snippet shows how to programmatically update the entire configuration of an existing layui upload instance using inst.reload. It requires an existing upload instance. The options parameter allows redefining fields and any other configurable properties for the upload process. This is useful when dynamic reconfiguration of upload behavior is needed during runtime.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 渲染\nvar inst = upload.render({\n  elem: '#id',\n  // …\n});\n \n// 重载\ninst.reload({\n  field: 'AAA',\n  // …\n})\n```\n\n----------------------------------------\n\nTITLE: Layui Layer Initialization and Event Handling\nDESCRIPTION: This JavaScript code initializes Layui and utilizes the 'layui.use' function to load necessary modules such as '$' (jQuery) and 'util'. It defines event handlers for different button clicks, triggering various Layui layer functionalities like alert, confirm, msg, and open.  The 'btnAsync' parameter is used for asynchronous button handling, allowing for deferred actions before closing the dialog.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/btnasync.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nlayui.use(function () {\n  var $ = layui.$;\n  var util = layui.util;\n  var sleep = function (time) {\n    return $.Deferred(function (defer) {\n      setTimeout(function () {\n        defer.resolve();\n      }, time)\n    })\n  }\n  var enableBtnAsync = true;\n\n  util.on({\n    bs_alert: function () {\n      layer.alert('对话框内容', {\n        btnAsync: enableBtnAsync,\n      }, function (index, layero, that) {\n        var defer = $.Deferred();\n        that.loading(true);\n        sleep(1000).then(defer.resolve);\n        return defer.promise();\n      });\n    },\n    bs_confirm: function () {\n      layer.confirm('一个询问框的示例？', {\n        btnAsync: enableBtnAsync,\n        btn: ['确定', '关闭'] //按钮\n      }, function (index, layero, that) {\n        var defer = $.Deferred();\n        that.loading(true);\n        sleep(1000).then(defer.resolve);\n        return defer.promise();\n      });\n    },\n    bs_msg: function () {\n      layer.msg('第二个回调', {\n        btnAsync: enableBtnAsync,\n        time: 20000, // 20s 后自动关闭\n        btn: ['明白了', '知道了'],\n        btn1: function (index, layero, that) {\n          var defer = $.Deferred();\n          that.loading(true);\n          sleep(1000).then(defer.resolve);\n          return defer.promise();\n        }\n      });\n    },\n    bs_open: function () {\n      layer.open({\n        btnAsync: enableBtnAsync,\n        type: 1,\n        area: ['500px', '300px'],\n        btn: ['确定', '关闭'],\n        btn1: function (index, layero, that) {\n          var defer = $.Deferred();\n          that.loading(true);\n          sleep(1000).then(defer.resolve);\n          return defer.promise();\n        },\n        btn2: function (index, layero, that) {\n          var defer = $.Deferred();\n          that.loading(true);\n          sleep(1000).then(defer.resolve);\n          return defer.promise();\n        }\n      })\n    },\n    // 不支持 btnAsync\n    bs_prompt: function () {\n      layer.prompt({\n        formType: 2,\n        value: '初始值',\n        title: '请输入值',\n        area: ['500px', '300px'] // 自定义文本域宽高\n      }, function (value, index, elem) {\n        alert(value);\n        layer.close(index);\n      });\n    }\n  })\n}); \n</script>\n```\n\n----------------------------------------\n\nTITLE: Logging Layer Popup Closure Event with End Callback in JavaScript\nDESCRIPTION: Sets up the end callback function in a LayUI layer popup to execute logic after the popup is fully closed and destroyed. The provided example logs a message to the console indicating the popup removal. No additional dependencies besides LayUI's layer are required. The end callback takes no parameters and runs post-destruction.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  content: '内容',\n  end: function(){\n    console.log('弹层已被移除');\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Layui Data Table with Filter and Local Storage\nDESCRIPTION: This snippet initializes a Layui table component that loads data from a static JSON endpoint. It configures columns with fixed and dynamic visibility states based on local storage data. The implementation includes event handling to update local storage when filter checkboxes are modified, maintaining user preferences across sessions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/filter.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var $ = layui.$;\n  var table = layui.table;\n\n  // 渲染\n  table.render({\n    elem: '#ID-table-demo-filter',\n    url:'/static/json/2/table/user.json', // 数据接口\n    toolbar: 'default',\n    height: 315,\n    cols: [function(){\n      var arr = [\n        {field:'id', title:'ID', width:80, fixed: 'left'},\n        {field:'username', title:'用户', width:120},\n        {field:'sex', title:'性别'},\n        {field:'city', title:'城市'},\n        {field:'sign', title:'签名'},\n        {field:'classify', title:'职业'}\n      ];\n      \n      // 初始化筛选状态\n      var local = layui.data('table-filter-test'); // 获取本地存储\n      layui.each(arr, function(index, item){\n        if(item.field in local){\n          item.hide = local[item.field];\n        }\n      });\n      return arr;\n    }() ],  \n    done: function(){\n      // 记录筛选状态\n      var that = this;\n      that.elem.next().on('mousedown', 'input[lay-filter=\"LAY_TABLE_TOOL_COLS\"]+', function(){\n        var input = $(this).prev()[0];\n        // 保存筛选状态到本地存储\n        layui.data('table-filter-test', {\n          key: input.name,\n          value: input.checked\n        });\n      });\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Table Toolbar Events (HTML/JavaScript)\nDESCRIPTION: Illustrates how to define a toolbar template and listen for events triggered by elements within it using `table.on('toolbar(filter)', callback)`. The callback receives an object containing event details, including the `lay-event` value, allowing different actions based on the clicked button.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- 原始容器 -->\n<table id=\"test\" lay-filter=\"test\"></table>\n \n<!-- 工具栏模板 -->\n<script type=\"text/html\" id=\"toolbarDemo\">\n  <div class=\"layui-btn-container\">\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"add\">添加</button>\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"delete\">删除</button>\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"update\">编辑</button>\n  </div>\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// import layui\nlayui.use(function(){\n  var table = layui.table;\n\n  // 渲染\n  table.render({\n    elem: '#test',\n    toolbar: '#toolbarDemo',\n    // … // 其他属性\n  });\n   \n  // 头部工具栏事件\n  table.on('toolbar(test)', function(obj){\n    var options = obj.config; // 获取当前表格属性选项\n    var checkStatus = table.checkStatus(options.id); // 获取选中行相关数据\n    console.log(obj); // 查看对象所有成员\n    \n    // 根据不同的事件名进行相应的操作\n    switch(obj.event){ // 对应模板元素中的 lay-event 属性值\n      case 'add':\n        layer.msg('添加');\n      break;\n      case 'delete':\n        layer.msg('删除');\n      break;\n      case 'update':\n        layer.msg('编辑');\n      break;\n    };\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Callback After Layer Popup Maximization with full Callback in JavaScript\nDESCRIPTION: Configures the full callback of LayUI's layer.open function to trigger after the popup is maximized. Parameters passed to this callback are consistent with the success callback, including the popup DOM, index, and instance. The example logs a maximization confirmation to the console. This callback enables response to popup state changes, requiring only LayUI.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 1,\n  content: '内容',\n  full: function(layero, index, that){\n    console.log('弹层已最大化');\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Table with Editable Cells - JavaScript\nDESCRIPTION: Initializes the Layui framework, loads the 'table' and 'util' modules. It defines a function `editable` to determine if a cell should be editable based on the data. It then renders a Layui table targeting the HTML element with ID 'ID-table-demo-editable', configuring it with a data URL, pagination, custom CSS for editable cells, column definitions (including conditional editing), and sets the table height.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editable.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var table = layui.table;\n  var util = layui.util;\n\n  // 根据返回数据中某个字段来判断开启该行的编辑\n  var editable = function(d){\n    if(d.editable) return 'text'; // 这里假设以 editable 字段为判断依据\n  };\n\n  // 创建表格实例\n  table.render({\n    elem: '#ID-table-demo-editable',\n    url: '/static/json/2/table/edit.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    page: true,\n    //,editTrigger: 'dblclick' // 触发编辑的事件类型（默认 click ） 。 v2.7.0 新增，之前版本固定为单击触发\n    css: [\n      // 对开启了编辑的单元格追加样式\n      '.layui-table-view td[data-edit]{color: #16B777;}'\n    ].join(''),\n    cols: [[\n      {checkbox: true, fixed: true},\n      {field:'id', title: 'ID', width:80, sort: true, fixed: true},\n      {field:'username', title: '用户名', width:80, edit: editable},\n      {field:'sex', title: '性别', width:80, sort: true, edit: editable},\n      {field:'city', title: '城市', width:80, edit: editable},\n      {field:'sign', title: '签名', edit: editable},\n      {field:'experience', title: '积分', sort: true, width:80, edit: editable}\n    ]],\n    height: 310\n  });\n\n  // 单元格编辑后的事件\n  table.on('edit(ID-table-demo-editable)', function(obj){\n    var field = obj.field; // 得到修改的字段\n    var value = obj.value // 得到修改后的值\n    var oldValue = obj.oldValue // 得到修改前的值 -- v2.8.0 新增\n    var data = obj.data // 得到所在行所有键值\n    var col = obj.getCol(); // 得到当前列的表头配置属性 -- v2.8.0 新增\n    \n    // 值的校验\n    if(value.replace(/\\s/g, '') === ''){\n      layer.tips('值不能为空', this, {tips: 1});\n      return obj.reedit(); // 重新编辑 -- v2.8.0 新增\n    }\n\n    // 编辑后续操作，如提交更新请求，以完成真实的数据更新\n    // …\n    \n    // 显示 - 仅用于演示\n    layer.msg('[ID: '+ data.id +'] ' + field + ' 字段更改值为：'+ util.escape(value));\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: TreeTable Row Tools Template\nDESCRIPTION: This HTML snippet defines the template for the row tools in the Layui treeTable. It includes buttons for viewing details, adding child nodes, and displaying a dropdown menu for more options. The `lay-event` attribute is used to bind the buttons to JavaScript event handlers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/examples/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"TPL-treeTable-demo-tools\">\n  <div class=\"layui-btn-container\">\n    <a class=\"layui-btn layui-btn-primary layui-btn-xs\" lay-event=\"detail\">查看</a>\n    <a class=\"layui-btn layui-btn-warm layui-btn-xs\" lay-event=\"addChild\">新增</a>\n    <a class=\"layui-btn layui-btn-xs\" lay-event=\"more\">更多 <i class=\"layui-icon layui-icon-down\"></i></a>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Button Groups - HTML\nDESCRIPTION: This snippet demonstrates how to create Layui button groups using the layui-btn-group class.  It showcases different button styles and icon combinations. It demonstrates standard and small sizes, with and without icons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-group\">\n  <button type=\"button\" class=\"layui-btn\">增加</button>\n  <button type=\"button\" class=\"layui-btn \">编辑</button>\n  <button type=\"button\" class=\"layui-btn\">删除</button>\n</div>\n \n<div class=\"layui-btn-group\">\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-add-1\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-edit\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-delete\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-right\"></i>\n  </button>\n</div>\n \n<div class=\"layui-btn-group\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-sm\">文字</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-add-1\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-edit\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-sm\">\n    <i class=\"layui-icon layui-icon-delete\"></i>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Table and Edit Modes JavaScript\nDESCRIPTION: Loads necessary Layui modules and renders the table using `table.render`. It configures the table to use the defined HTML templates for columns requiring special interactive editing components (select, dropdown, laydate, colorpicker) and sets up a standard textarea edit mode. The `done` callback is used to initialize the Layui components within the rendered table cells and attach event listeners to capture value changes, demonstrating how to access and update the local table data cache.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var table = layui.table;\n  var form = layui.form;\n  var dropdown = layui.dropdown;\n  var laydate = layui.laydate;\n  var colorpicker = layui.colorpicker;\n  var util = layui.util;\n  \n  // 渲染\n  table.render({\n    elem: '#ID-table-demo-editmodes',\n    url: '/static/json/2/table/user.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    page: true,\n    css: [ // 设置单元格样式\n      // 取消默认的溢出隐藏，并设置适当高度\n      '.layui-table-cell{height: 50px; line-height: 40px;}',\n      '.layui-table-cell .layui-colorpicker{width: 38px; height: 38px;}',\n      '.layui-table-cell select{height: 36px; padding: 0 5px;}'\n    ].join(''),\n    cols: [[ // 表头\n      {field: 'id', title: 'ID', width:80, align: 'center', fixed: 'left'},\n      {field: 'city', title: 'select', minWidth: 150, templet: '#TPL-select-demo'},\n      {field: 'sex', title: 'dropdown', width: 130, unresize: true, align: 'center', templet: '#TPL-dropdown-demo'},\n      {field: 'date', title: 'laydate', minWidth: 150, templet: '#TPL-laydate-demo'},\n      {field: 'color', title: 'color', width: 80, unresize: true, align: 'center', templet: '#TPL-colorpicker-demo'},\n      {field: 'sign', title: '文本', edit: 'textarea'}\n    ]],\n    done: function(res, curr, count){\n      var options = this;\n      \n      // 获取当前行数据 - 自定义方法\n      table.getRowData = function(tableId, elem){\n        var index = $(elem).closest('tr').data('index');\n        return table.cache[tableId][index] || {};\n      };\n\n      // 展示数据 - 仅用于演示\n      var showData = function(data) {\n        return layer.msg('当前行最新数据：<br>'+ util.escape(JSON.stringify(data)), {\n          offset: '16px',\n          anim: 'slideDown'\n        });\n      };\n      \n      // layui form select 事件\n      form.on('select(select-demo)', function(obj){\n        var value = obj.value; // 获取选中项 value\n        // 获取当前行数据(如 id 等字段，以作为数据修改的索引)\n        var data = table.getRowData(options.id, obj.elem);\n\n        // 更新数据中对应的字段\n        data.city = value;\n\n        // 显示当前行最新数据 - 仅用于示例展示\n        showData(data);\n      });\n      \n      // dropdown 方式的下拉选择\n      dropdown.render({\n        elem: '.dropdown-demo',\n        // trigger: 'hover',\n        // 此处的 data 值，可根据 done 返回的 res 遍历来赋值\n        data: [{\n          title: '男',\n          id: 100\n        },{\n          title: '女',\n          id: 101\n        },{\n          title: '保密',\n          id: 102\n        }],\n        click: function(obj){\n          var data = table.getRowData(options.id, this.elem); // 获取当前行数据(如 id 等字段，以作为数据修改的索引)\n          \n          this.elem.find('span').html(obj.title);\n\n          // 更新数据中对应的字段\n          data.sex = obj.title;\n\n          // 显示当前行最新数据 - 仅用于示例展示\n          showData(data);\n        }\n      });\n      \n      // laydate\n      laydate.render({\n        elem: '.laydate-demo',\n        done: function(value, date, endDate){\n          var data = table.getRowData(options.id, this.elem); // 获取当前行数据(如 id 等字段，以作为数据修改的索引)\n\n          // 更新数据中对应的字段\n          data.date = value;\n          \n          // 显示当前行最新数据 - 仅用于示例展示\n          showData(data);\n        }\n      });\n      \n      // colorpicker\n      colorpicker.render({\n        elem: '.colorpicker-demo',\n        done: function(value){\n          var data = table.getRowData(options.id, this.elem); // 获取当前行数据(如 id 等字段，以作为数据修改的索引)\n\n          // 更新数据中对应的字段\n          data.color = value;\n          \n          // 显示当前行最新数据 - 仅用于示例展示\n          showData(data);\n        }\n      });\n      \n      // 单元格普通编辑事件\n      table.on('edit(ID-table-demo-editmodes)', function(obj){\n        var value = obj.value // 得到修改后的值\n        var data = obj.data // 得到所在行所有键值\n        var field = obj.field; // 得到字段\n        \n        // 更新数据中对应的字段\n        var update = {};\n        update[field] = value;\n        obj.update(update);\n        \n        // 编辑后续操作，如提交更新请求，以完成真实的数据更新\n        // …\n        \n        // 显示当前行最新数据 - 仅用于示例展示\n        showData(data);\n      });\n      \n      // 更多编辑方式……\n    }\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Layui Table Toolbar Template\nDESCRIPTION: Defines an HTML template using a `<script>` tag with `type=\"text/html\"` and a specific ID (`ID-dropdown-demo-table-tool`). This template contains action buttons ('编辑' - Edit, '更多' - More) with `lay-event` attributes, which are used by the Layui table module to identify and handle row-specific actions. The '更多' button includes an icon suggesting further options.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/table.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/html\" id=\"ID-dropdown-demo-table-tool\">\n  <a class=\"layui-btn layui-btn-xs layui-btn-primary\" lay-event=\"edit\">编辑</a>\n  <a class=\"layui-btn layui-btn-xs\" lay-event=\"more\">更多 <i class=\"layui-icon layui-icon-down\"></i></a>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling the afterClose Event in Layui Tabs (JavaScript)\nDESCRIPTION: Demonstrates attaching a callback to the `afterClose` event for a Layui tabs instance (`testID`) using `tabs.on()`. The callback function runs after a tab has been successfully closed and receives data related to the closed tab. Requires the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// tabs 关闭后的事件\ntabs.on('afterClose(testID)', function(data) {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Layui Radio Buttons with Custom Skins (CSS-based Styling)\nDESCRIPTION: This example illustrates how to disable default styles using `lay-skin=\"none\"` attribute for radio elements, enabling custom CSS styling. External CSS should be applied by developers to customize appearance accordingly.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/radio.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"radio\" lay-skin=\"none\" name=\"xxx\" value=\"1\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Dropdown with Custom HTML Content (JavaScript)\nDESCRIPTION: This JavaScript code uses the Layui framework to initialize a dropdown component. It targets the button with ID `ID-dropdown-demo-content` using the `elem` property. Instead of a standard menu, it defines complex HTML structure (a Layui tab component) using the `content` property. It also applies a custom CSS class (`className`), inline styles (`style`), and utilizes the `ready` callback to initialize the Layui element module for the tabs once the dropdown is rendered.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n\n  // 自定义内容\n  dropdown.render({\n    elem: '#ID-dropdown-demo-content',\n    content: ['<div class=\"layui-tab layui-tab-brief\">',\n      '<ul class=\"layui-tab-title\">',\n        '<li class=\"layui-this\">Tab header 1</li>',\n        '<li>Tab header 2</li>',\n        '<li>Tab header 3</li>',\n      '</ul>',\n      '<div class=\"layui-tab-content\">',\n        '<div class=\"layui-tab-item layui-text layui-show\"><p style=\"padding-bottom: 10px;\">在 content 属性中传入任意的 html 内容，可替代默认的下拉菜单结构，从而实现更多有趣的弹出内容。</p><p> 是否发现，dropdown 组件不仅仅只是一个下拉菜单或者右键菜单，它能被赋予许多的想象可能。</p></div>',\n        '<div class=\"layui-tab-item\">Tab body 2</div>',\n        '<div class=\"layui-tab-item\">Tab body 3</div>',\n      '</div>',\n    '</div>'].join(''),\n    className: 'demo-dropdown-tabs',\n    style: 'width: 370px; height: 200px; box-shadow: 1px 1px 30px rgb(0 0 0 / 12%);',\n    // shade: 0.3, // 弹出时开启遮罩 --- 2.8+\n    ready: function(){\n      layui.use('element', function(element){\n        element.render('tab');\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Render Method in Layui Components - JavaScript\nDESCRIPTION: Defines the core rendering logic of a Layui component. The render function is responsible for constructing and inserting the component container into the DOM. It can be defined directly within the component configuration or on the component's prototype as `Class.prototype.render`. This method acts as the main entry point for component UI creation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender: function() {\n  // 组件的容器构建、插入等\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Callback in Layui Table\nDESCRIPTION: Example of using the complete callback function that executes after data requests finish, regardless of success or failure, providing XHR and status information.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomplete: function(xhr, ts) {\n  console.log(xhr, ts)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Before Callback in Layui Table\nDESCRIPTION: Shows how to use the before callback function that runs prior to data rendering, allowing modification of request parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.render({\n  before: function(options){\n    console.log(options); // 当前实例属性选项\n    options.where.abc = 123; // 修改或额外追加 where 属性\n  },\n  // …  // 其它属性\n});\n```\n\n----------------------------------------\n\nTITLE: Handling the beforeChange Event in Layui Tabs (JavaScript)\nDESCRIPTION: Demonstrates attaching a callback to the `beforeChange` event for a Layui tabs instance (`testID`) using `tabs.on()`. The callback function is triggered before a tab switch occurs, receiving data about the previous (`from`) and next (`to`) tabs. Returning `false` from the callback prevents the default tab switching behavior. Requires the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// tabs 切换前的事件\ntabs.on(`beforeChange(testID)`, function(data) {\n  console.log(data); // 标签相关数据\n  console.log(data.from.index); // 切换前的选中标签索引\n  console.log(data.from.headerItem); // 切换前的选中标签头部项\n  console.log(data.to.index); // 切换后的选中标签索引\n  console.log(data.to.headerItem); // 切换后的选中标签头部项\n\n  // 阻止标签默认关闭\n  return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Previous/Next Buttons in Layui Laypage with JavaScript\nDESCRIPTION: Demonstrates how to remove the previous and next navigation buttons from the laypage component by setting the `prev` and `next` options to `false`. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-pn-hide\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 不显示上一页、下一页\n  laypage.render({\n    elem: 'demo-laypage-pn-hide',\n    count: 100,\n    prev: false,\n    next: false\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Layui Layer with Custom Shade JavaScript\nDESCRIPTION: This event handler for 'test-more-shade' opens a standard Layui layer with custom HTML content. The `shade` option is used to define a custom color (`#000`) and opacity (`0.9`) for the overlay background. Setting `shadeClose: true` allows the user to dismiss the layer by clicking this custom overlay.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'test-more-shade': function(){\n  layer.open({\n    type: 1,\n    content: '<div style=\"padding: 16px;\">任意 HTML 内容</div>',\n    area: ['320px', '195px'], // 初始宽高\n    shade: [0.9, '#000'],\n    shadeClose: true // 点击遮罩区域，关闭弹层\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting Layui Tabs Before Change - JavaScript\nDESCRIPTION: Initializes Layui modules, specifically `tabs`. It sets up an event listener for the `beforeChange` event on a specific tabs instance (`demoTabsBeforeChange`). When triggered, it logs the event data, displays a confirmation dialog using `layer.confirm`, and prevents the default tab change by returning `false`. If the user confirms, it programmatically forces the tab change using `tabs.change` with the `true` flag and closes the dialog.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/beforeChange.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function() {\n  var tabs = layui.tabs;\n\n  // 标签实例 ID\n  var DEMO_TABS_ID = 'demoTabsBeforeChange';\n\n  // tabs 切换前的事件\n  tabs.on(`beforeChange(${DEMO_TABS_ID})`, function(data) {\n    console.log('beforeChange', data);\n\n    // 切换确认提示\n    layer.confirm(`确定从「当前标签」切换到标签「${this.innerText}」吗？`, function(i) {\n      tabs.change(DEMO_TABS_ID, data.to.index, true); // 强制切换\n      layer.close(i); // 关闭确认框\n    });\n\n    // 阻止标签默认关闭\n    return false;\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Parsing Custom Data for Layui Transfer with parseData\nDESCRIPTION: Demonstrates how to use the `parseData` callback function within the `transfer.render` method. This callback allows developers to transform an arbitrary input data structure (`res`) into the specific format required by the Layui transfer component, which expects objects with `value`, `title`, `disabled`, and `checked` properties.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransfer.render({\n  elem: '',\n  data: [ // 任意数据\n    {\"id\": \"1\", \"name\": \"李白\"},\n    {\"id\": \"2\", \"name\": \"杜甫\"},\n    {\"id\": \"3\", \"name\": \"贤心\"}\n  ],\n  parseData: function(res){ // 解析成规定的 data 格式\n    return {\n      \"value\": res.id, // 数据值\n      \"title\": res.name, // 数据标题\n      \"disabled\": res.disabled,  // 是否禁用\n      \"checked\": res.checked // 是否选中\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning and Retrieving Layui Form Values Using JavaScript\nDESCRIPTION: Describes using 'form.val' with parameters to assign values to or retrieve values from form fields contained within an element filtered by 'lay-filter'. When the second parameter is provided as an object, it sets form values accordingly; if omitted, it fetches current values as an object.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{- d.include(\"/form/examples/form.val.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Chainable Template Compilation and Rendering (JavaScript)\nDESCRIPTION: Illustrates a concise method for compiling a template string and immediately rendering it with data using a chained `laytpl(...).render(...)` call. This approach combines template instantiation and rendering in a single statement.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlaytpl('{{= d.name }}是一名{{= d.role }}').render({\n  name: '张三',\n  role: '全栈开发者'\n}, function(html) {\n  console.log(html); // 张三是一名全栈开发者\n});\n```\n\n----------------------------------------\n\nTITLE: Get Nodes by Filter in TreeTable - JavaScript\nDESCRIPTION: This snippet illustrates how to retrieve a collection of nodes from a Layui TreeTable that match specific filtering criteria.  The `getNodesByFilter` function accepts a filter function that defines the conditions for node selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 获取节点信息集\nvar obj = treeTable.getNodesByFilter('test', function(item){\n  // 自定义过滤条件\n  return item.id > 1000;\n});\nconsole.log(obj);\n```\n\n----------------------------------------\n\nTITLE: Extending and Using External Non-Layui Modules in JavaScript (v2.11+)\nDESCRIPTION: Illustrates using `layui.extend` (since v2.11.0) to integrate external JavaScript libraries (like 'marked' and 'Prism') that do not follow Layui's module format. Each external module is defined as an object with `src` (the URL or path to the script) and `api` (the name of the global variable the library exposes). Once extended, these libraries can be loaded using `layui.use` and accessed via the `layui` object (e.g., `layui.marked`).\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// 扩展任意外部模块\nlayui.extend({\n  marked: {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/marked/15.0.7/marked.min.js', // 模块路径\n    api: 'marked' // 接口名称\n  },\n  Prism: {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js',\n    api: 'Prism'\n  }\n});\n\n// 加载扩展模块\nlayui.use(['marked', 'Prism'], function() {\n  console.log('任意外部模块 loaded: ')\n  console.log('  > marked: ', layui.marked);\n  console.log('  > Prism: ', layui.Prism);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Table with Custom Row Context Menu (JavaScript)\nDESCRIPTION: Initializes a Layui table using the 'table', 'dropdown', and 'util' modules. It disables the default right-click menu on rows ('defaultContextmenu: false') and sets up an event listener ('rowContextmenu') to trigger a custom Layui dropdown menu upon right-clicking a table row. The dropdown's click handler demonstrates accessing both menu item data and the corresponding table row data.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/onrowContextmenu.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(['table', 'dropdown', 'util'], function(){\n  var table = layui.table;\n  var dropdown = layui.dropdown;\n  var util = layui.util;\n   \n  // 渲染\n  table.render({\n    elem: '#ID-table-onrowContextmenu',\n    defaultContextmenu: false, // 是否在 table 行中允许默认的右键菜单\n    url: '/static/json/2/table/user.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    page: true,\n    cols: [[\n      {field:'id', title:'ID', width:80, fixed: 'left', unresize: true},\n      {field:'username', title:'用户', width:120},\n      {field:'sex', title:'性别', width:80},\n      {field:'city', title:'城市', width:100},\n      {field:'sign', title:'签名'},\n      {field:'experience', title:'积分', width:80, sort: true}\n    ]],\n  });\n   \n  // 右键单击行事件\n  table.on('rowContextmenu(ID-table-onrowContextmenu)', function(obj){\n    var data = obj.data; // 得到当前行数据\n    var dataCache = obj.dataCache; // 得到当前行缓存数据，包含特定字段 --- 2.8.8+\n    var index = obj.index; // 得到当前行索引\n    var tr = obj.tr; // 得到当前行 <tr> 元素的 jQuery 对象\n    var options = obj.config; // 获取当前表格基础属性选项\n    var e = obj.e; // 当前的 jQuery 事件对象 --- 2.9.14+\n    console.log('rowContextmenu', obj); // 查看返回对象的所有成员\n    \n    // 右键操作\n    dropdown.render({\n      trigger: 'contextmenu',\n      show: true,\n      data: [\n        {title: 'Menu item 1', id: 'AAA'},\n        {title: 'Menu item 2', id: 'BBB'}\n      ],\n      click: function(menuData, othis) {\n        // 显示选中的相关数据 - 仅用于演示\n        layer.alert(util.escape(JSON.stringify({\n          dropdown: menuData,\n          table: obj.data\n        })));\n      }\n    });\n    \n    // obj.del() // 删除当前行\n    // obj.update(fields, related);  // 修改行数据\n    obj.setRowChecked({ type: 'radio' });  // 选中当前行\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a laytpl Template Instance (JavaScript)\nDESCRIPTION: Demonstrates obtaining the `laytpl` module from `layui`, creating a template instance with a template string, and then rendering it multiple times with different data objects using `templateInst.render()`. Shows both asynchronous rendering with a callback and synchronous rendering returning the HTML string.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar laytpl = layui.laytpl;\n\n// 创建模板实例\nvar templateInst = laytpl('{{= d.name }}是一名{{= d.role }}');\n\n// 数据渲染 1\ntemplateInst.render({\n  name: '张三',\n  role: '全栈开发者'\n}, function(html) {\n  console.log(html); // 张三是一名全栈开发者\n});\n\n// 数据渲染 2\nvar html = templateInst.render({\n  name: '王五',\n  role: '架构师'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Layui with NPM\nDESCRIPTION: This command installs Layui as a project dependency using the Node Package Manager (NPM). It allows for managing Layui versions and integrating it into build processes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i layui\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Table Row Action Template (HTML)\nDESCRIPTION: This HTML snippet defines a template (`#toolDemo`) for the action buttons within each row of the Layui table. It includes an 'Edit' button and a 'More' button, both using the `lay-event` attribute to specify the event name triggered when clicked. These events are handled later by the `table.on('tool')` listener in JavaScript.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"toolDemo\">\n  <div class=\"layui-clear-space\">\n    <a class=\"layui-btn layui-btn-xs\" lay-event=\"edit\">编辑</a>\n    <a class=\"layui-btn layui-btn-xs\" lay-event=\"more\">\n      更多 \n      <i class=\"layui-icon layui-icon-down\"></i>\n    </a>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initialize Layui Table and Form Modules\nDESCRIPTION: This JavaScript snippet loads the `table` and `form` modules using `layui.use`. It then initializes a Layui table instance using `table.render`, configuring its target element (`elem`), data source (`url`), pagination (`page`), height (`height`), row style (`lineStyle`), custom CSS (`css`), CSS class (`className`), and column definitions (`cols`). It utilizes the previously defined HTML templates (`#ID-table-demo-css-user`, `#ID-table-demo-css-tool`) for specific columns and applies inline cell styles (`style`). Finally, it sets up a form submission listener using `form.on` for the 'demo-css-submit' filter defined in the tool template, preventing default form submission and displaying the submitted data using `layer.alert`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/css.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(['table'], function(){\n    var table = layui.table;\n    var form = layui.form;\n    \n    // 创建渲染实例\n    table.render({\n      elem: '#ID-table-demo-css',\n      url:'/static/json/2/table/demo1.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n      page: true,\n      height: 'full-35',\n      lineStyle: 'height: 151px;', // 定义表格的多行样式\n      css: [ // 直接给当前表格主容器重置 css 样式\n        '.layui-table-page{text-align: center;}' // 让分页栏居中\n      ].join(''),\n      className: 'layui-table-testcss', // 用于给表格主容器追加 css 类名\n      cols: [[\n        {field:'username', width:160, title: '用户', templet: '#ID-table-demo-css-user'},\n        // 设置单元格样式\n        {field:'sign', minWidth:100, title: '签名', style:'color: #000;'},\n        {width:160, title: '操作', templet: '#ID-table-demo-css-tool'}\n      ]]\n    });\n\n    // 表单提交\n    form.on('submit(demo-css-submit)', function(data){\n      var field = data.field; // 获取表单字段值\n      // 显示填写结果，仅作演示用\n      layer.alert(JSON.stringify(field), {\n        title: '当前填写的字段值'\n      });\n      // 此处可执行 Ajax 等操作\n      // …\n      return false; // 阻止默认 form 跳转\n    });\n    \n  });\n```\n\n----------------------------------------\n\nTITLE: Rendering Grouped Select Boxes with Layui\nDESCRIPTION: This snippet shows how to create grouped select boxes using the `<optgroup>` tag within a Layui form.  It demonstrates nesting `<option>` elements inside `<optgroup>` elements to create distinct categories within the select dropdown. It requires the Layui form library to be included.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/select.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <select>\n    <option value=\"\">请选择</option>\n    <optgroup label=\"分组 A\">\n      <option value=\"A-1\">选项 A-1</option>\n      <option value=\"A-2\">选项 A-2</option>\n      <option value=\"A-3\">选项 A-3</option>\n    </optgroup>\n    <optgroup label=\"分组 B\">\n      <option value=\"B-1\">选项 B-1</option>\n      <option value=\"B-2\">选项 B-2</option>\n    </optgroup>\n  </select>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Delay and Accordion Effects - JavaScript\nDESCRIPTION: Controls timing and animation effects of the dropdown. The 'delay' property introduces a delay in milliseconds before showing or hiding the menu when 'trigger' is set to 'hover'. It supports a single number or an array [showDelay, hideDelay]. The 'accordion' boolean toggles accordion style behavior in menu groups, allowing only one submenu to expand at a time. These options improve user experience by fine-tuning responsiveness and visual hierarchy.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example config snippet\n{\n  delay: [200, 300], // show and hide delay times in ms\n  accordion: false   // disable accordion effect by default\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Initialization Hook in Layui Components - JavaScript\nDESCRIPTION: A callback function executed prior to component initialization to access and modify initialization options. This hook receives the configuration options object as a parameter and allows pre-processing or validation before the component is set up. Useful for customizing component behavior dynamically based on the input options.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeInit: function(options) {\n  console.log(options); // 获得组件初始化前的配置项\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Layui Modules via Callback Parameters in JavaScript\nDESCRIPTION: Illustrates an alternative way to access used modules ('layer', 'table') directly through the parameters passed to the `layui.use` callback function. The order of parameters corresponds to the order of module names specified in the array.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(['layer', 'table'], function(layer, table){\n  // 使用 layer\n  layer.msg('test');\n\n  // 使用 table\n  table.render({});\n});\n```\n\n----------------------------------------\n\nTITLE: Including external markdown documentation for fixbar options\nDESCRIPTION: This snippet indicates inclusion of detailed fixbar property definitions from an external markdown file, providing configuration options such as positioning, style, and behavior customizations.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/fixbar/detail/options.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Converting Dates to Strings with Layui util.toDateString - JavaScript\nDESCRIPTION: Illustrates conversion of timestamps or Date objects to custom formatted strings using util.toDateString. Requires Layui util module. Supports specifying date/time format patterns and, since v2.8.13, custom meridiem rendering via the customMeridiem function. Handles localization and literal text in format string brackets; outputs formatted dates as strings.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = util.toDateString(1672531200000, 'yyyy-MM-dd'); // 2023-01-01\n\n// 中括号中的字符会原样保留 2.8.13+\nvar result2 = util.toDateString(new Date('2023-01-01 11:35:25'), 'ss[s]'); // 25s\n\n// 自定义 meridiem\nvar result3 = util.toDateString(\n  '2023-01-01 11:35:25',\n  'hh:mm:ss A',\n  {\n    customMeridiem: function(hours, minutes){\n      return (hours < 12 ? 'AM' : 'PM')\n        //.split('').join('.') // 有句点，A.M.\n        //.toLowerCase() // 小写，a.m.\n    }\n  }\n); // 11:35:25 AM\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Tabbed Card with Layui - HTML\nDESCRIPTION: This snippet creates a standard tabbed card interface using Layui. It defines a container with `layui-tabs` class and utilizes `layui-tabs-card` to enable the card style. The code includes a header with multiple tab titles, links, and disabled options. The content section contains tab items where contents are displayed. The `lay-options=\"{index: 1}\"` sets the initial selected index.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/card.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-tabs-card\" lay-options=\"{index: 1}\">\n  <ul class=\"layui-tabs-header\">\n    <li>标题1</li>\n    <li>标题2</li>\n    <li><a href=\"\" target=\"_blank\" class=\"layui-font-blue\">跳转项</a></li>\n    <li class=\"layui-disabled\" lay-unselect>禁选项</li>\n    <li>标题5</li>\n    <li>标题6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item\">内容-1</div>\n    <div class=\"layui-tabs-item\">内容-2</div>\n    <div class=\"layui-tabs-item\">内容-3</div>\n    <div class=\"layui-tabs-item\">内容-4</div>\n    <div class=\"layui-tabs-item\">内容-5</div>\n    <div class=\"layui-tabs-item\">内容-6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding to Form Events in Layui\nDESCRIPTION: This snippet demonstrates how to use form.on() to bind callbacks to various form events like select, checkbox, switch, radio, and submit. It shows both global event binding and filter-specific binding.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 指向所有 select 组件的选择事件\nform.on('select', function(data){\n  console.log(data);\n});\n\n// 指向元素为 `<select lay-filter=\"test\"></select>` 的选择事件\nform.on('select(test)', function(data){\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Tooltips on Button Click (JavaScript)\nDESCRIPTION: This JavaScript code utilizes Layui's `use` function to load the `layer` and `util` modules. It then employs `util.on` to attach click event listeners to HTML elements possessing the `lay-on` attribute (corresponding to the buttons). Each listener invokes `layer.tips` with distinct configurations to exhibit tooltips in various positions (top, right, bottom, left), apply a custom background color, or permit the display of multiple tooltips concurrently, triggered by the respective button clicks.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/tips.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    'test-tips-top': function(){\n      layer.tips('向上', this, {\n        tips: 1\n      });\n    },\n    'test-tips-right': function(){\n      layer.tips('默认向右', this);\n    },\n    'test-tips-bottom': function(){\n      layer.tips('向下', this, {\n        tips: 3\n      });\n    },\n    'test-tips-left': function(){\n      layer.tips('向左', this, {\n        tips: 4\n      });\n    },\n    'test-tips-color': function(){\n      layer.tips('可自定义任意主题色', this, {\n        tips: [1, '#16b777']\n      });\n    },\n    'test-tips-more': function(){\n      layer.tips('不会关闭之前的 tips', this, {\n        tipsMore: true\n      });\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Establishing a Layui Module Entry Point in HTML/JavaScript\nDESCRIPTION: Shows the common pattern for initializing Layui and loading page-specific business logic. After including the main `layui.js` file, `layui.config` is used to set the base directory for custom modules, and `layui.use` is called to load the primary business module (e.g., 'index') for the current HTML page.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/layui/layui.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nlayui.config({\n  base: '/js/modules/' // 业务模块所在目录\n}).use('index'); // 加载当前页面需要的业务模块\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Layer Index from within iframe in Layui\nDESCRIPTION: Shows how to get the layer index from within an iframe to reference or close the layer. Uses layer.getFrameIndex() with window.name parameter.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar index = parent.layer.getFrameIndex(window.name); // 获取当前 iframe 层的索引\nparent.layer.close(index); // 关闭当前 iframe 弹层\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering Templates from HTML Script Tags (JavaScript/HTML)\nDESCRIPTION: Explains how to define an HTML template within a `<script type=\"text/html\">` tag, retrieve its content using JavaScript DOM manipulation, create a `laytpl` instance with it, provide data, and render the output into a target DOM element. Requires the `layui` module and initialization.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"ID-demo-tpl\" type=\"text/html\">\n  <h3>{{= d.name }}</h3>\n  <p>角色：{{= d.role }}</p>\n</script>\n\n<div id=\"ID-demo-view\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// import layui\nlayui.use(function(){\n  var laytpl = layui.laytpl;\n\n  var template = document.getElementById('ID-demo-tpl').innerHTML; // 获取模板字符\n  var target = document.getElementById('ID-demo-view'); // 输出结果的目标元素\n  var data = { // 数据\n    \"name\": \"张三\",\n    \"role\": \"全栈开发者\"\n  };\n  // 渲染并输出结果\n  laytpl(template).render(data, function(html) {\n    target.innerHTML = html;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Layui Form Validation Programmatically with JavaScript\nDESCRIPTION: Explains the use of 'form.validate' method to actively trigger form validation on specified elements. It accepts a selector or jQuery object corresponding to the target form controls. The method returns a boolean indicating whether validation passed or failed, enabling conditional workflow control after validation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{- d.include(\"/form/examples/form.validate.md\") }}\n```\n\n----------------------------------------\n\nTITLE: 渲染 Layui 组件实例（JavaScript）\nDESCRIPTION: 调用 tabs.render 方法渲染组件实例，传入目标元素选择器及其他自定义配置项。依赖已通过 Layui 的 define/use 创建并加载的组件模块。主要参数 elem 表示渲染目标，其他为可选配置。输出为渲染后的组件，需确保目标元素存在。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例\n// 渲染\ntabs.render({\n  elem: '#id',\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Executing User-Input Layui Code (JavaScript)\nDESCRIPTION: Initializes Layui modules (jQuery, layer) and attaches a click event handler to the 'Run' button (#ID-demo-run). When clicked, it retrieves the JavaScript code from the textarea (#ID-demo-editor), attempts to execute it using `new Function()`, and displays any potential runtime errors using `layer.alert`. Depends on the Layui framework and jQuery.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/run.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var layer = layui.layer;\n\n  $('#ID-demo-run').on('click', function(){\n    var code = $('#ID-demo-editor').val();\n    try {\n      new Function(code)();\n    } catch(e) {\n      layer.alert('语句异常：'+ e.message, {icon: 2})\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Example in HTML\nDESCRIPTION: Demonstrates creating a simple progress bar with a set percentage using layui classes. It illustrates how to include a progress bar inside a parent container and specifies the progress percentage via the lay-percent attribute.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar\" lay-percent=\"30%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div style=\"width:300px\">\n  <div class=\"layui-progress\">\n    <div class=\"layui-progress-bar\" lay-percent=\"50%\"></div>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Layui Utility Module Initialization\nDESCRIPTION: Sets up the Layui environment by loading required modules (util, laydate, layer, and jQuery) using Layui's modular loading system. This is the entry point for all utility functionality demonstrated on the page.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var util = layui.util;\n  var laydate = layui.laydate;\n  var layer = layui.layer;\n  var $ = layui.$;\n  \n  // ... utility functions implementation\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Tab Deletion and Custom Styles with HTML\nDESCRIPTION: This code shows how to enable close icons on the tab headers using the `lay-allowclose=\"true\"` attribute. It also demonstrates how to exclude the delete icon for a specific tab using the `lay-allowclose=\"false\"` attribute on an individual `li` element. The HTML structure and Layui framework CSS are required for the tabs to be displayed correctly.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n  <textarea>\n<div class=\"layui-tab\" lay-allowclose=\"true\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\" lay-allowclose=\"false\">标签1</li>\n    <li>标签2</li>\n    <li>标签3</li>\n    <li>标签4</li>\n    <li>标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">单独设置「标签1」不允许删除 <sup>2.9.11+</sup></div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n\n<!-- import layui -->\n  </textarea>\n```\n\n----------------------------------------\n\nTITLE: 全局设置 Layui 组件默认配置（JavaScript）\nDESCRIPTION: 通过 tabs.set 方法设置所有后续渲染的全局默认参数，可用于统一初始行为。依赖组件已经定义。参数 options 包含全局选项。后续每次渲染会继承此配置，若指定参数则覆盖。需在组件首次渲染前调用此方法以生效。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例\n// 全局设置。后续所有渲染均会生效，除非对选项进行覆盖\ntabs.set({\n  trigger: 'mouseenter' // 默认的触发事件\n  // …\n});\n// 渲染实例 1\ntabs.render({ id: 'id1'}); // 继承全局设置\n// 渲染实例 2\ntabs.render({\n  id: 'id2',\n  trigger: 'click' // 覆盖全局的触发事件\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing layui Form Module\nDESCRIPTION: This JavaScript snippet initializes the layui form module. It utilizes the `layui.use()` method to load the `form` module and provides a callback function where the module instance (`form`) and the layui's jQuery object (`$`) are available.  This allows the code to interact with and manipulate the form elements using layui's API.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkbox.skin.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n  layui.use(function () {\n    var form = layui.form;\n    var $ = layui.$;\n    // …\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Toolbar in Layui Table\nDESCRIPTION: Demonstrates how to configure the default toolbar buttons for a Layui table, showing the standard set of filter, export, and print tools.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefaultToolbar: [\n  'filter', // 列筛选\n  'exports', // 导出\n  'print' // 打印\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Month Picker in JavaScript\nDESCRIPTION: Configures a Layui month picker widget for the input element with id 'ID-laydate-type-month'. Uses the 'month' type in laydate.render() to restrict selection to year and month (yyyy-MM). Requires the Layui date module loaded and ready.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-type-month',\n  type: 'month'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Form Components Dynamically in JavaScript\nDESCRIPTION: Provides methods to dynamically render Layui form elements after the DOM content is loaded or after dynamic insertion of form elements. Supports rendering all form types or selective types such as 'select' or 'checkbox', optionally scoped by a 'lay-filter' attribute. Also supports jQuery object based targeted rendering for performance optimization, enabling rendering of specific form containers or individual elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var form = layui.form;\n\n  // Render all form elements\n  form.render();\n\n  // Only render select elements\n  form.render('select');\n\n  // Render all elements under lay-filter \"test\"\n  form.render(null, 'test');\n\n  // Render only checkbox elements under lay-filter \"test\"\n  form.render('checkbox', 'test');\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('form', function(){\n  var $ = layui.$;\n  var form = layui.form;\n\n  // Targeted rendering by jQuery object for entire form domain\n  form.render($('#form-id'));\n\n  // Targeted rendering of only one select element\n  form.render($('#select-id'));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropdown Menus with Layui\nDESCRIPTION: This JavaScript code snippet initializes and renders dropdown menus using the Layui framework. It binds the dropdown functionality to HTML elements specified by their CSS selectors ('.demo-dropdown-base', '#ID-dropdown-demo-base-input', and '#ID-dropdown-demo-base-text'). It defines the data that will be displayed in the dropdown menu, including the title and id of each menu item. The `click` function provides custom behaviour when an item is selected.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/base.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n\n  // 渲染\n  dropdown.render({\n    elem: '.demo-dropdown-base', // 绑定元素选择器，此处指向 class 可同时绑定多个元素\n    data: [{\n      title: 'menu item 1',\n      id: 100\n    },{\n      title: 'menu item 2',\n      id: 101\n    },{\n      title: 'menu item 3',\n      id: 102\n    }],\n    click: function(obj){\n      this.elem.find('span').text(obj.title);\n    }\n  });\n\n  // 绑定输入框\n  dropdown.render({\n    elem: '#ID-dropdown-demo-base-input',\n    closeOnClick: false, // 不开启“打开与关闭的自动切换”，即点击输入框时始终为打开状态\n    data: [{\n      title: 'menu item 1',\n      id: 101\n    },{\n      title: 'menu item 2',\n      id: 102\n    },{\n      title: 'menu item 3',\n      id: 103\n    },{\n      title: 'menu item 4',\n      id: 104\n    },{\n      title: 'menu item 5',\n      id: 105\n    },{\n      title: 'menu item 6',\n      id: 106\n    }],\n    click: function(obj){\n      this.elem.val(obj.title);\n    },\n    style: 'min-width: 235px;'\n  });\n\n  // 绑定文字\n  dropdown.render({\n    elem: '#ID-dropdown-demo-base-text',\n    data: [{\n      title: 'menu item 1',\n      id: 100\n    },{\n      title: 'menu item 2',\n      id: 101,\n      child: [{  // 横向子菜单\n        title: 'menu item 2-1',\n        id: 1011\n      },{\n        title: 'menu item 2-2',\n        id: 1012\n      }]\n    },{\n      title: 'menu item 3',\n      id: 102\n    },{\n      type: '-' // 分割线\n    },{\n      title: 'menu group',\n      id: 103,\n      type: 'group', // 纵向菜单组\n      child: [{\n        title: 'menu item 4-1',\n        id: 1031\n      },{\n        title: 'menu item 4-2',\n        id: 1032\n      }]\n    },{\n      type: '-' // 分割线\n    },{\n      title: 'menu item 5',\n      id: 104\n    },{\n      title: 'menu item 5',\n      id: 104\n    }],\n    click: function(obj){\n      this.elem.val(obj.title);\n    }\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Color Selection Cancellation Callback in Layui Color Picker (JavaScript)\nDESCRIPTION: Provides the 'cancel' callback function, available since Layui version 2.8+, which triggers when the user cancels color selection, typically by clicking outside the color picker panel. The callback receives the current color value, enabling custom handling of cancellation events. Requires use of Layui 2.8 or later.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncancel: function(value){\n  console.log(value); // 当前颜色值\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Light Message with Callback JavaScript\nDESCRIPTION: Implements the event handler for the 'test-msg-light' `lay-on` value. It displays a Layui message box (`layer.msg`) using the light theme (specified by icon: 0). The example includes a placeholder for a callback function that would execute after the message box closes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-msg-light\": function(){\n  layer.msg('浅色提示框的示例', {icon: 0}, function(){\n    // layer.msg('提示框关闭后的回调');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Transfer Item Changes with onchange\nDESCRIPTION: Provides an example implementation of the `onchange` callback function for the Layui transfer component. This function is triggered whenever items are moved between the two lists, providing access to the transferred data (`data`) and the source list index (`index`: 0 for left, 1 for right).\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nonchange: function(data, index){\n  console.log(data); // 得到当前被穿梭的数据\n  console.log(index); // 如果数据来自左边，index 为 0，否则为 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Scroll-Based Infinite Loading with Layui Flow Module in JavaScript\nDESCRIPTION: This snippet implements an infinite scroll loading feature using Layui's flow.load method. It targets the container with id 'ID-flow-demo', automatically loading new sets of list items as the user scrolls. The done callback simulates asynchronous pagination by generating 8 list items per page, using a timeout to mimic data fetching latency. The next function appends loaded content and controls pagination by checking if the current page is less than 10. Dependencies include the Layui framework and the flow module. The snippet expects an HTML container element to inject loaded items; page and next parameters manage pagination and rendering respectively.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/detail/demo.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var flow = layui.flow;\n\n  // 流加载实例\n  flow.load({\n    elem: '#ID-flow-demo', // 流加载容器\n    scrollElem: '#ID-flow-demo', // 滚动条所在元素，一般不用填，此处只是演示需要。\n    done: function(page, next){ // 执行下一页的回调\n      // 模拟数据插入\n      setTimeout(function(){\n        var lis = [];\n        for(var i = 0; i < 8; i++){\n          lis.push('<li>'+ ( (page-1)*8 + i + 1 ) +'</li>')\n        }\n        \n        // 执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页\n        // pages 为 Ajax返回的总页数，只有当前页小于总页数的情况下，才会继续出现加载更多\n        next(lis.join(''), page < 10); // 此处假设总页数为 10\n      }, 520);\n    }\n  });\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"flow-demo\" id=\"ID-flow-demo\"></div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Building Desktop-first and Stackable Grid Layouts with Layui - HTML\nDESCRIPTION: This snippet demonstrates grid patterns where on small screens, columns stack vertically, and on desktop, they align horizontally with various combinations. Classes like \"layui-col-md*\" define proportional width for desktop screens, while the stacking occurs automatically on mobile. Layui CSS inclusion is prerequisite. Multiple sequences (1/12, 75/25, 33.33/33.33/33.33, 50/50) are shown for practical UI sections.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo grid-demo-bg1\">1/12</div>\n  </div>\n  <div class=\"layui-col-md1\">\n    <div class=\"grid-demo\">1/12</div>\n  </div>\n</div>\n \n<div class=\"layui-row\">\n  <div class=\"layui-col-md9\">\n    <div class=\"grid-demo grid-demo-bg1\">75%</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo\">25%</div>\n  </div>\n</div>\n \n<div class=\"layui-row\">\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">33.33%</div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo\">33.33%</div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">33.33%</div>\n  </div>\n</div>\n   \n<div class=\"layui-row\">\n  <div class=\"layui-col-md6\">\n    <div class=\"grid-demo grid-demo-bg1\">50%</div>\n  </div>\n  <div class=\"layui-col-md6\">\n    <div class=\"grid-demo\">50%</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Layer Event Handlers in JavaScript\nDESCRIPTION: This script imports the Layui JavaScript modules 'layer' and 'util', and registers a unified event handler for buttons with different 'lay-on' attributes. Each handler triggers a specific Layui layer dialog, such as alerts, confirmation dialogs, messages, modal pages, iframes, loading spinners, tooltips, prompts, and photo viewers. Dependencies include the Layui JavaScript library, and expected button markup as per the HTML block. No external data is required, and the logic expects to be run in a browser with Layui loaded.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/type.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 批量事件\n  util.on('lay-on', {\n    alert: function(){\n      layer.alert('对话框内容');\n    },\n    confirm: function(){\n      layer.confirm('一个诽问框的示例？', {\n        btn: ['确定', '关闭'] //按钮\n      }, function(){\n        layer.msg('第一个回调', {icon: 1});\n      }, function(){\n        layer.msg('第二个回调', {\n          time: 20000, // 20s 后自动关闭\n          btn: ['明白了', '知道了']\n        });\n      });\n    },\n    msg: function(){\n      layer.msg('一段提示信息');\n    },\n    page: function(){\n      // 页面层\n      layer.open({\n        type: 1,\n        area: ['420px', '240px'], // 宽高\n        content: '<div style=\"padding: 11px;\">任意 HTML 内容</div>'\n      });\n    },\n    iframe: function(){\n      // iframe 层\n      layer.open({\n        type: 2,\n        title: 'iframe test',\n        shadeClose: true,\n        shade: 0.8,\n        area: ['380px', '80%'],\n        content: '/layer/test/1.html' // iframe 的 url\n      });\n    },\n    load: function(){\n      var index = layer.load(0, {shade: false});\n      setTimeout(function(){\n        layer.close(index); // 关闭 loading\n      }, 5000);\n    },\n    tips: function(){\n      layer.tips('一个 tips 层', this, {\n        tips: 1\n      });\n    },\n    prompt: function(){\n      layer.prompt({title: '密令输入框', formType: 1}, function(pass, index){\n        layer.close(index);\n        layer.prompt({title: '文本输入框', formType: 2}, function(text, index){\n          layer.close(index);\n          alert('您输入的密令：'+ pass +'；文本：'+ text);\n        });\n      });\n    },\n    photots: function(){\n      layer.photos({\n        photos: {\n          \"title\": \"Photos Demo\",\n          \"start\": 0,\n          \"data\": [\n            {\n              \"alt\": \"layer\",\n              \"pid\": 1,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/layer.png\"\n            },\n            {\n              \"alt\": \"壁纸\",\n              \"pid\": 3,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/000.jpg\"\n            },\n            {\n              \"alt\": \"浩润宇宙\",\n              \"pid\": 5,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/outer-space.jpg\"\n            }\n          ]\n        }\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Input Field for Layui Slider\nDESCRIPTION: Demonstrates how to enable an input field for direct value entry alongside a Layui slider. This allows users to either drag the slider or type a specific value.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-input\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-input',\n    input: true //输入框\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Layui Tree without Connection Lines (JavaScript/HTML)\nDESCRIPTION: Shows how to render a Layui tree without the default connecting lines between parent and child nodes. This is achieved by setting the `showLine` option to `false` during the `tree.render` call. Requires the Layui `tree` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tree/detail/demo.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"ID-tree-demo-showLine\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var tree = layui.tree;\n\n  // 模拟数据\n  var data = [{title:'江西',id:1,children:[{title:'南昌',id:1000,children:[{title:'青山湖区',id:10001},{title:'高新区',id:10002}]},{title:'九江',id:1001},{title:'赣州',id:1002}]},{title:'广西',id:2,children:[{title:'南宁',id:2000},{title:'桂林',id:2001}]},{title:'陕西',id:3,children:[{title:'西安',id:3000},{title:'延安',id:3001}]},{title:'山西',id:3,children:[{title:'太原',id:4000},{title:'长治',id:4001}]}];\n\n  // 渲染\n  tree.render({\n    elem: '#ID-tree-demo-showLine',\n    data: data,\n    showLine: false  // 是否开启连接线\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Trigger Button for Layui Dropdown (HTML)\nDESCRIPTION: This HTML snippet creates a button element styled with Layui classes (`layui-btn`) and assigned a unique ID (`ID-dropdown-demo-content`). This ID is used by the JavaScript code to target the button and attach the dropdown functionality. An icon is included within the button for visual enhancement.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/content.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"layui-btn\" id=\"ID-dropdown-demo-content\">\n  自定义内容\n  <i class=\"layui-icon layui-icon-list layui-font-14\"></i>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Title in Layui\nDESCRIPTION: Demonstrates how to update the title of an existing layer using the layer.title() method. It takes two parameters: the new title text and the layer index.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开弹层\nvar index = layer.open({\n  type: 1,\n  content: '内容'\n});\n\n// 重新设置标题\nlayer.title('新标题', index)\n```\n\n----------------------------------------\n\nTITLE: Intercepting Tab Close Events with Confirmation using Layui in JavaScript\nDESCRIPTION: This JavaScript snippet initializes Layui's tabs module and sets up a listener for the beforeClose event on a specific tab instance. When a tab close is attempted, it uses the Layui layer module to prompt the user for confirmation, and only closes the tab if the user confirms. Dependencies include the Layui framework and specifically the tabs and layer modules. The main parameters are the tab instance ID and the event data, and overriding the event's default behavior is achieved by returning false in the event handler. Limitations: requires Layui assets to be loaded, and DOM elements referenced by ID must exist.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/beforeClose.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function() {\n  var tabs = layui.tabs;\n\n  // 标签实例 ID\n  var DEMO_TABS_ID = 'demoTabsBeforeClose';\n\n  // tabs 切换前的事件\n  tabs.on(`beforeClose(${DEMO_TABS_ID})`, function(data) {\n    console.log('beforeClose', data);\n\n    // 关闭确认提示\n    layer.confirm(`确定关闭标签「${this.innerText}」吗？`, function(i) {\n      tabs.close(DEMO_TABS_ID, data.index, true); // 强制关闭对应的标签项\n      layer.close(i); // 关闭确认框\n    });\n\n    // 阻止标签默认关闭\n    return false;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring layui Tabs Triggered by mouseenter Event in HTML\nDESCRIPTION: This snippet defines a layui tabs component configured to switch tabs when the user's mouse enters a tab header. It sets the 'lay-options' attribute with a trigger value of 'mouseenter', enabling the tab change on mouse hover. The snippet includes six tab headers and matching content panels. No additional JavaScript is required beyond importing layui. Inputs include the tab labels and content; output is the active tab panel visible upon mouse interaction.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/trigger.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-tabs-card layui-panel\" lay-options=\"{trigger: 'mouseenter'}\">\n  <ul class=\"layui-tabs-header layui-bg-tint\">\n    <li class=\"layui-this\">标题1</li>\n    <li>标题2</li>\n    <li>标题3</li>\n    <li>标题4</li>\n    <li>标题5</li>\n    <li>标题6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item layui-show\">内容-1</div>\n    <div class=\"layui-tabs-item\">内容-2</div>\n    <div class=\"layui-tabs-item\">内容-3</div>\n    <div class=\"layui-tabs-item\">内容-4</div>\n    <div class=\"layui-tabs-item\">内容-5</div>\n    <div class=\"layui-tabs-item\">内容-6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: 获取 Layui 组件实例并调用原型方法（JavaScript）\nDESCRIPTION: 通过 tabs.getInst 根据实例 ID 获取组件对象实例，然后可调用其原型上的方法（如 roll）。确保目标组件已实例化。id 是组件唯一标识。返回的实例允许进一步操作，实现灵活扩展。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例\nvar tabInstance = tabs.getInst('id');\n// 调用内部的标签滚动方法\ntabInstance.roll();\n```\n\n----------------------------------------\n\nTITLE: Form Structure with Various Input Elements in HTML\nDESCRIPTION: Defines a Layui-formatted HTML form containing text input, password, select dropdown, checkboxes, switch, radio buttons, textarea, and submit/reset buttons. This structure provides the UI for user data entry and interaction, with specific classes and attributes aligned with Layui conventions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.val.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form\" action=\"\" lay-filter=\"demo-val-filter\">\n  <div class=\"layui-btn-container\" style=\"margin-bottom: 6px; text-align: center;\">\n    <button type=\"button\" class=\"layui-btn layui-btn-normal\" id=\"LAY-component-form-setval\">赋值</button>\n    <button type=\"button\" class=\"layui-btn layui-btn-normal\" id=\"LAY-component-form-getval\">取值</button>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">输入框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"text\" name=\"username\" lay-verify=\"title\" autocomplete=\"off\" placeholder=\"请输入\" class=\"layui-input\">\n    </div>\n  </div>\n\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">密码框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"password\" name=\"password\" placeholder=\"请输入\" autocomplete=\"off\" class=\"layui-input\">\n    </div>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">选择框</label>\n    <div class=\"layui-input-block\">\n      <select name=\"interest\" lay-filter=\"aihao\">\n        <option value=\"\"></option>\n        <option value=\"0\">写作</option>\n        <option value=\"1\">阅读</option>\n        <option value=\"2\">游戏</option>\n        <option value=\"3\">音乐</option>\n        <option value=\"4\">旅行</option>\n      </select>\n    </div>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">复选框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"checkbox\" name=\"like[write]\" title=\"写作\">\n      <input type=\"checkbox\" name=\"like[read]\" title=\"阅读\">\n      <input type=\"checkbox\" name=\"like[daze]\" title=\"发呆\">\n    </div>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">开关</label>\n    <div class=\"layui-input-block\">\n      <input type=\"checkbox\" name=\"close\" lay-skin=\"switch\" lay-text=\"ON|OFF\">\n    </div>\n  </div>\n  \n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">单选框</label>\n    <div class=\"layui-input-block\">\n      <input type=\"radio\" name=\"sex\" value=\"男\" title=\"男\" checked>\n      <input type=\"radio\" name=\"sex\" value=\"女\" title=\"女\">\n    </div>\n  </div>\n\n  <div class=\"layui-form-item layui-form-text\">\n    <label class=\"layui-form-label\">文本域</label>\n    <div class=\"layui-input-block\">\n      &lt;textarea placeholder=\"请输入\" class=\"layui-textarea\" name=\"desc\"&gt;&lt;/textarea&gt;\n    </div>\n  </div>\n \n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-block\">\n      <button type=\"submit\" class=\"layui-btn\" lay-submit lay-filter=\"demo-val\">立即提交</button>\n      <button type=\"reset\" class=\"layui-btn layui-btn-primary\">重置</button>\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling Row Tool Events in Layui Table Cells (HTML/JavaScript)\nDESCRIPTION: Illustrates setting up and handling events on specific elements within table cells, often used for row-specific actions like view, edit, or delete. Define elements with `lay-event` attributes in a column template and use `table.on('tool(filter)', callback)` or `table.on('toolDouble(filter)', callback)` to listen for clicks. (Note: JavaScript listener code is implied, not fully shown in the snippet).\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- 表头某列 templet 属性指向的模板 -->\n<script type=\"text/html\" id=\"toolEventDemo\">\n  <a class=\"layui-btn layui-btn-xs\" lay-event=\"detail\">查看</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing File Upload with Layui Upload Module (JavaScript)\nDESCRIPTION: This JavaScript snippet uses the `layui.use` function to load the `upload` module. It then calls `upload.render` to configure the file upload functionality. The `elem` option targets the file selection button (`#ID-upload-demo-choose`), `url` specifies the server-side upload endpoint (requires user configuration), `auto` is set to `false` to disable automatic upload upon selection, and `bindAction` links the upload initiation to the specified button (`#ID-upload-demo-action`). A `done` callback handles the success response, displaying a message via `layer.msg` and logging the result.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/auto.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n\n  // 渲染\n  upload.render({\n    elem: '#ID-upload-demo-choose',\n    url: '', // 此处配置你自己的上传接口即可\n    auto: false,\n    // multiple: true,\n    bindAction: '#ID-upload-demo-action',\n    done: function(res){\n      layer.msg('上传成功');\n      console.log(res)\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Add New Row Data in TreeTable - JavaScript\nDESCRIPTION: This snippet demonstrates how to add new rows to a Layui TreeTable. The `addNodes` function is used to insert new data, with options for specifying the parent node, insertion index, and whether to focus on the new node.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 新增行数据\ntreeTable.addNodes('test', {\n  parentIndex: 0, // 一般在 tool 事件中，可通过对应数据项中的 `LAY_DATA_INDEX` 特定属性获得\n  index: 1,\n  data: {\n    title: '新节点-1'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Layui JS via CDN\nDESCRIPTION: This HTML snippet includes the Layui JavaScript library from a CDN. The JavaScript file is essential for the interactive components and functionalities of Layui. The unpkg CDN is used here.\nSOURCE: https://github.com/layui/layui/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 引入 layui.js -->\n<script src=\"//unpkg.com/layui@{{= d.layui[2].v }}/dist/layui.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Layui Button Definitions\nDESCRIPTION: These HTML buttons are defined with specific lay-on attributes, which are then used in the JavaScript code to trigger corresponding Layui layer functions when the buttons are clicked. Each button is styled with Layui's predefined classes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/btnasync.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"bs_alert\">alert</button>\n<button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"bs_confirm\">confirm</button>\n<button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"bs_msg\">msg</button>\n<button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"bs_open\">open</button>\n<button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"bs_prompt\">prompt(不支持)</button>\n```\n\n----------------------------------------\n\nTITLE: Handling Table Cell Edit Event with Validation (Layui)\nDESCRIPTION: Listens for the 'edit' event on a Layui table (filter 'test'), triggered after a cell's value is modified. It retrieves the field name, new value, and row data from the `obj` parameter. It includes an example of validating the 'email' field using a regex. If validation fails, it shows a tip using `layer.tips` and reverts the edit using `obj.reedit()`. On successful edit (or no validation), it shows a success message via `layer.msg` and updates the table's internal data using `obj.update()`. Depends on the Layui `table` and `layer` modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.on('edit(test)', function(obj){\n  var field = obj.field; // 得到字段\n  var value = obj.value; // 得到修改后的值\n  var data = obj.data; // 得到所在行所有键值\n\n  // 值的校验\n  if(field === 'email'){\n    if(!/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/.test(obj.value)){\n      layer.tips('输入的邮箱格式不正确，请重新编辑', this, {tips: 1});\n      return obj.reedit(); // 重新编辑 -- v2.8.0 新增\n    }\n  }\n\n  // 编辑后续操作，如提交更新请求，以完成真实的数据更新\n  // …\n  layer.msg('编辑成功', {icon: 1});\n  \n  // 其他更新操作\n  var update = {};\n  update[field] = value;\n  obj.update(update);\n});\n```\n\n----------------------------------------\n\nTITLE: Date Selection Completion: Done Callback (Layui)\nDESCRIPTION: This code snippet demonstrates the 'done' callback function within the Layui date component. It shows how to access the selected date string, the date object (year, month, day, hours, minutes, seconds), and the end date object when using range selection. This callback is triggered when a date is selected, the 'clear' button is clicked, or the 'now' button is clicked.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndone: function(value, date, endDate){\n  console.log(value); // 日期字符，如： 2017-08-18\n  console.log(date); // 包含年月日时分秒各项值的对象\n  console.log(endDate); // 结束日期时间对象，当设置 range 时才会返回。对象成员同上.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Modules JavaScript\nDESCRIPTION: This JavaScript code initializes the Layui framework and loads the required modules: `layer` for pop-up windows, `util` for utility functions including event delegation, `form` for rendering and handling form elements within layers, and `$` as an alias for Layui's built-in or configured jQuery/Zepto object.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n  var form = layui.form;\n  var $ = layui.$;\n\n  // Event handlers defined below within util.on\n\n  // Global ESC handler defined below\n\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Time Picker with Laydate in JavaScript\nDESCRIPTION: This JavaScript snippet configures a static time picker using Layui's laydate module by setting the 'type' parameter to 'time'. It targets the element with id 'ID-laydate-static-4' and embeds the time picker inline using 'position: static'. The picker allows time selection without the date component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/static.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  laydate.render({\n    elem: '#ID-laydate-static-4',\n    type: 'time',\n    position: 'static'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Preprocessing Callback (before) in Layui - JavaScript\nDESCRIPTION: Provides examples of the 'before' callback, which runs before upload and can return false, a Promise or jQuery Deferred to control upload behavior. Used for showing loading states or performing async validation/preprocessing. Requires Layui, and optionally jQuery for Deferred patterns. Constraints: Asynchronous return values only supported from Layui 2.9.11+.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nbefore: function(obj){ // obj 参数同 choose\n  layer.load(); // 上传 loading\n  \n  // 若返回 false，则表明阻止上传\n  /*\n  if(true){\n    return false;\n  }\n  */\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 返回 jQuery Deferred 对象或 JS 原生 Promise 对象，false 或 Promise.reject 表示阻止上传(2.9.11+)\n// Promise\n/** @type {(obj: object) => boolean | JQueryDeferred<boolean> | Promise<boolean>} */\nbefore: function(obj){\n  return new Promise(function(resolve, reject){\n    setTimeout(function(){\n      console.log('before_async_task', obj);\n      resolve(true);\n    }, 1000)\n  })\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deferred\nbefore: function(obj){\n  return $.Deferred(function(defer){\n    setTimeout(function(){\n      console.log('before_async_task', obj);\n      defer.resolve(true);\n    }, 1000)\n  }).promise();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deferred2\nbefore: function(obj){\n  var defer = $.Deferred();\n  setTimeout(function(){\n    console.log('before_async_task', obj);\n    defer.resolve(true);\n  }, 1000)\n  return defer.promise();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Limit with Specific Range (JavaScript)\nDESCRIPTION: Sets up a time picker constrained between 09:30 and 17:30 with clear and confirm buttons. Requires layui's laydate; no additional parameters required. Outputs a time-only picker limited to specified hours, minutes, and seconds.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/limit.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-limit-3',\n  type: 'time',\n  min: '09:30:00',\n  max: '17:30:00',\n  btns: ['clear', 'confirm']\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Date Range (Independent) - JavaScript\nDESCRIPTION: This code initializes a date range picker using Layui's laydate module in an independent selection mode. It requires the Layui library to be loaded. It sets the `elem` to the container element and specifies the start and end input elements for the range. The output is a date range selection interface where the user can select the start and end dates separately.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-range',\n  range: ['#ID-laydate-start-date', '#ID-laydate-end-date']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Editing in Layui Table\nDESCRIPTION: Demonstrates how to configure column editing in Layui table, including both basic text editing and conditional editing based on row data.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.cols.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nedit: function(d){\n  // d 即为当前行数据，此时可根据行相关字段来开启该行是否编辑的权限\n  if(d.editable){ // editable 为任意字段名\n    return 'text'; // 编辑模式\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing the View of a Layui Tabs Instance in JavaScript\nDESCRIPTION: Explains how to manually refresh the visual state (e.g., scroll structure of headers) of a Layui tabs instance ('test') using the `tabs.refresh()` method. This is useful when modifications are made to the tabs outside of the standard API methods. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.refresh('test'); // 刷新标签视图\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Component Examples in Markdown\nDESCRIPTION: 该代码片段通过内嵌markdown格式包含layui Layer组件的具体演示示例文件路径，动态引入多个弹层示例内容（如基本类型、弹层样式、异步按钮等）。依赖layui框架及其code代码展示插件，示例以markdown文件形式存储，输入为markdown文档路径，输出为对应弹层示例前端代码及效果，展示模式支持预览、复制等交互功能。限制为直接呈现包含代码，示例不在本地定义。\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/demo.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/type.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/alert.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/page.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/iframe.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/load.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/tips.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/other.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/offset.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/direction.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/more.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/btnasync.md\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{- d.include(\"/layer/examples/skin.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Initializing layui colorpicker module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the layui colorpicker module, then render the colorpicker component on specified elements. It includes both single and batch rendering methods. Dependencies include layui and its colorpicker extension.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n  // 单个渲染\n  colorpicker.render({\n    elem: '#ID-test-colorpicker'\n  });\n  // 批量渲染\n  colorpicker.render({\n    elem: '.class-test-colorpicker'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Upload Error Callback (error) in Layui - JavaScript\nDESCRIPTION: Implements the 'error' callback for capturing upload exceptions such as network failures or server errors. Callback arguments include file index, a retry callback, the raw response (string), and XHR object for advanced diagnostics. Available in Layui's upload module; 'xhr' parameter present from version 2.9.15+.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror: function(index, upload, res, xhr){\n  console.log(index); // 当前文件的索引\n  // upload(); 重新上传的方法\n  console.log(res);  // 返回值（纯文本）\n  console.log(JSON.parse(res));  // 返回值（json）\n  console.log(xhr);\n}\n```\n\n----------------------------------------\n\nTITLE: Layui Button Group with Data Attributes HTML\nDESCRIPTION: This HTML snippet defines a group of buttons styled with Layui classes. Each button includes a `lay-on` data attribute used by Layui's `util.on` method to delegate click events to specific JavaScript functions defined later in the script.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-more-max\">\n    最大化弹出\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-more-scrollbar\">\n    弹出时屏蔽浏览器滚动条\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-more-lockscreen\">\n    页面锁屏 <span class=\"layui-badge-dot\"></span>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-more-shade\">\n    自定义遮罩颜色和透明度\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-more-stack\">\n    <span class=\"layui-badge-dot\"></span> 多窗口模式 + 层叠置顶 + Esc 关闭\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Bringing Layer to Top in Multiple Layer Mode\nDESCRIPTION: Demonstrates how to bring a layer to the top of the stacking order when multiple layers are open. Uses layer.setTop() with the layer element object.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 多弹层模式的层叠顺序置顶\nlayer.open({\n  type: 1, // 页面层\n  shade: false,\n  area: ['520px', '320px'],\n  maxmin: true,\n  content: '<div style=\"padding: 16px;\">多弹层模式的层叠顺序置顶</div>',\n  zIndex: layer.zIndex, // 重点 1 --- 初始设置当前最高层叠顺序，\n  success: function(layero){\n    layer.setTop(layero); // 重点 2 --- 保持选中窗口置顶\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Alert with Custom Buttons JavaScript\nDESCRIPTION: Implements the event handler for the 'test-alert-btn' `lay-on` value. It displays a Layui alert dialog (`layer.alert`) with custom text labels for the buttons using the 'btn' option. The 'btnAlign' option is used to center the buttons, and individual callbacks (`btn1`, `btn2`, `btn3`) are provided for each custom button.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-alert-btn\": function(){\n  layer.alert('自定义按钮', {\n    btn: ['按钮一', '按钮二', '按钮三'],\n    btnAlign: 'c', // 按钮居中显示\n    btn1: function(){\n      layer.msg('按钮一的回调');\n    },\n    btn2: function(){\n      layer.msg('按钮二的回调');\n    },\n    btn3: function(){\n      layer.msg('按钮三的回调');\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Colorpicker with Callbacks\nDESCRIPTION: This snippet demonstrates how to initialize the Layui Colorpicker with `change` and `done` callbacks. The `change` callback is triggered whenever the color changes, and the `done` callback is triggered when the user finishes selecting a color. It showcases basic usage by binding the colorpicker to two different HTML elements and displaying the selected color using Layui's `layer.tips` method.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-colorpicker-demo-1\"></div>\n<div id=\"ID-colorpicker-demo-2\" style=\"margin-left: 16px;\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n  var layer = layui.layer;\n\n  // 渲染\n  colorpicker.render({ // eg1\n    elem: '#ID-colorpicker-demo-1', // 绑定元素\n    change: function(color){ // 颜色改变的回调\n      layer.tips('选择了：'+ color, this.elem, {\n        tips: 1\n      });\n    }\n  });\n  colorpicker.render({ // eg2\n    elem: '#ID-colorpicker-demo-2',\n    color: '#2ec770', // 设置默认色\n    done: function(color){ // 选择完毕的回调\n      layer.tips('选择了：'+ color, this.elem);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Automatically Rendering Layui Tabs in JavaScript\nDESCRIPTION: Initializes the Layui tabs component automatically by targeting elements with the class `layui-tabs`. This method should be called after the DOM elements are loaded. It assumes the `tabs` module from Layui has been loaded.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 对 class=\"layui-tabs\" 所在标签进行初始化渲染\ntabs.render();\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Layui Laypage Instances in JavaScript\nDESCRIPTION: Demonstrates the fundamental usage of the Layui laypage module by rendering two pagination components. It requires the Layui library and its laypage module. The `elem` parameter specifies the target HTML element's ID, and `count` defines the total number of data items for pagination.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-normal-1\"></div>\n<div id=\"demo-laypage-normal-2\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 普通用法\n  laypage.render({\n    elem: 'demo-laypage-normal-1',\n    count: 50 // 数据总数\n  });\n  laypage.render({\n    elem: 'demo-laypage-normal-2',\n    count: 100 // 数据总数\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering iframe with form interaction using layui layer.open\nDESCRIPTION: This snippet defines a function that opens an iframe containing a form, allowing the user to input data. It includes a callback to retrieve and display the input value from the iframe when a button is clicked. Dependencies: layui.js with layer and util modules. Key parameters include iframe URL, size, button actions, and interactions for obtaining iframe data.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/iframe.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    'test-iframe-handle': function(){\n      layer.open({\n        type: 2,\n        area: ['680px', '520px'],\n        content: '/layer/test/iframe.html',\n        fixed: false,\n        maxmin: true,\n        shadeClose: true,\n        btn: ['获取表单值', '取消'],\n        btnAlign: 'c',\n        yes: function(index, layero){\n          var iframeWin =  window[layero.find('iframe')[0]['name']];\n          var elemMark = iframeWin.$('#mark');\n          var value = elemMark.val();\n\n          if($.trim(value) === '') return elemMark.focus();\n\n          layer.msg('获得 iframe 中的输入框标记值：'+ value);\n        }\n      });\n    },\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Time Range - JavaScript\nDESCRIPTION: This code initializes a time range picker using Layui's laydate module. It requires the Layui library to be loaded. It sets the `elem` to the container element, sets the `type` parameter to 'time' for time selection, and the `range` to true for selecting a time range. The output is a range selection interface for selecting a time range.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-range-time',\n  type: 'time',\n  range: true\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handlers for Form Operations Using Layui\nDESCRIPTION: Includes JavaScript code that initializes Layui modules, sets up event listeners for buttons to programmatically assign values to the form, retrieve current form data, and handle form submission by displaying the data in an alert. The code relies on Layui's form and layer modules for form manipulation and dialog display.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.val.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var form = layui.form;\n\n  // 表单赋值\n  $('#LAY-component-form-setval').on('click', function(){\n    form.val('demo-val-filter', {\n      \"username\": \"贤心\", // \"name\": \"value\"\n      \"password\": \"AAAAAA\",\n      \"interest\": 1,\n      \"like[write]\": true, // 复选框选中状态\n      \"close\": true, // 开关状态\n      \"sex\": \"女\",\n      \"desc\": \"Layui 用于更简单快速地构建网页界面\"\n    });\n  });\n  // 表单取值\n  layui.$('#LAY-component-form-getval').on('click', function(){\n    var data = form.val('demo-val-filter');\n    alert(JSON.stringify(data));\n  });\n\n  // 提交事件\n  form.on('submit(demo-val)', function(data){\n    var field = data.field; // 获取表单字段值\n\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n\n    // 此处可执行 Ajax 等操作\n    // …\n\n    return false; // 阻止默认 form 跳转\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Opening and Maximizing Layui Layer JavaScript\nDESCRIPTION: This event handler, triggered by the 'test-more-max' action, opens a Layui layer with type 1 (HTML content) and initial dimensions. The `maxmin: true` option enables maximize/restore buttons, and the `success` callback immediately calls `layer.full(index)` to programmatically maximize the layer upon its successful rendering.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'test-more-max': function(){\n  layer.open({\n    type: 1,\n    content: '<div style=\"padding: 16px;\">任意 HTML 内容</div>',\n    area: ['320px', '195px'], // 初始宽高\n    maxmin: true,\n    success: function(layero, index){\n      layer.full(index); // 最大化\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing layui Modules for Button Event Listeners\nDESCRIPTION: Sets up event delegation using layui's util.on to handle button clicks based on the 'lay-on' attribute, enabling interactive features like tabs, prompts, and photo galleries. Dependencies include the layui layer and util modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/other.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    'test-tips-tab': function(){\n      layer.tab({\n        area: ['600px', '300px'],\n        tab: [{\n          title: 'Title 1', \n          content: '<div style=\"padding: 16px;\">tabs content 111</div>'\n        }, {\n          title: 'Title 2', \n          content: '<div style=\"padding: 16px;\">tabs content 222</div>'\n        }, {\n          title: 'Title 3', \n          content: '<div style=\"padding: 16px;\">tabs content 333</div>'\n        }],\n        shadeClose: true\n      });\n    },\n    'test-tips-prompt-0': function(){\n      layer.prompt({title: '请输入文本'}, function(value, index, elem){\n        if(value === '') return elem.focus();\n        layer.msg('获得：'+ util.escape(value)); // 显示 value\n        layer.close(index);\n      });\n    },\n    'test-tips-prompt-1': function(){\n      layer.prompt({title: '请输入密令', formType: 1}, function(value, index, elem){\n        if(value === '') return elem.focus();\n        layer.msg('获得：'+ util.escape(value)); // 显示 value\n        layer.close(index);\n      });\n    },\n    'test-tips-prompt-2': function(){\n      layer.prompt({title: '请输入文本', formType: 2}, function(value, index, elem){\n        if(value === '') return elem.focus();\n        layer.msg('获得：'+ util.escape(value)); // 显示 value\n        layer.close(index);\n      });\n    },\n    'test-tips-photos-one': function(){\n      layer.photos({\n        photos: {\n          \"title\": \"Photos Demo\",\n          \"start\": 0,\n          \"data\": [\n            {\n              \"alt\": \"浩瀚宇宙\",\n              \"pid\": 5,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/outer-space.jpg\"\n            }\n          ]\n        },\n        footer: false\n      });\n    },\n    'test-tips-photos': function(){\n      layer.photos({\n        photos: {\n          \"title\": \"Photos Demo\",\n          \"start\": 0,\n          \"data\": [\n            {\n              \"alt\": \"layer\",\n              \"pid\": 1,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/layer.png\"\n            },\n            {\n              \"alt\": \"壁纸\",\n              \"pid\": 3,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/000.jpg\"\n            },\n            {\n              \"alt\": \"浩瀚宇宙\",\n              \"pid\": 5,\n              \"src\": \"https://unpkg.com/outeres@0.1.1/demo/outer-space.jpg\"\n            }\n          ]\n        }\n      });\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Code Preview Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Layui code preview component by calling layui.code with an options object specifying the target elements. It shows how to create an instance and access its configuration and reload methods to dynamically update the component. Dependencies include the Layui framework loaded on the page. The 'options' parameter controls component behavior, such as specifying the DOM elements to enhance. Outputs include the instance object with accessible members for further manipulation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar codeInst = layui.code(options);\nconsole.log(codeInst); // 查看所有成员\ncodeInst.config; // 当前实例配置项\ncodeInst.reload(options); // 重载\ncodeInst.reloadCode(options); // 仅重载 code\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Date Pickers with Different Themes (JavaScript)\nDESCRIPTION: This JavaScript code utilizes the Layui `laydate` module to initialize date pickers on specific HTML input elements identified by their IDs. It demonstrates applying various themes ('molv', 'grid', custom color '#FF5722', and a mixed theme ['molv', 'grid']) using the `theme` option within the `laydate.render` configuration. The code ensures the `laydate` module is loaded via `layui.use` before execution.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/theme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  // 墨绿主题\n  laydate.render({\n    elem: '#ID-laydate-theme-molv',\n    theme: 'molv'\n  });\n  \n  // 自定义颜色\n  laydate.render({\n    elem: '#ID-laydate-theme-color',\n    theme: '#FF5722'\n  });\n  \n  // 格子主题\n  laydate.render({\n    elem: '#ID-laydate-theme-grid',\n    theme: 'grid'\n  });\n\n  // 圆圈高亮主题\n  /*\n  laydate.render({\n    elem: '#ID-laydate-theme-circle',\n    theme: 'circle' // 2.8+新增主题\n  });\n  */\n\n  // 混合主题\n  laydate.render({\n    elem: '#ID-laydate-theme-multi',\n    theme: ['molv', 'grid'] // 2.8+ 新增功能\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tag Style Layui Checkbox\nDESCRIPTION: This snippet showcases the use of the 'tag' style for Layui checkboxes.  It sets the `lay-skin` attribute to \"tag\" for applying the tag-like appearance. This includes examples of default, checked, and disabled states within the tag style.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/checkbox.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"checkbox\" name=\"AAA\" title=\"默认\" lay-skin=\"tag\">\n  <input type=\"checkbox\" name=\"BBB\" title=\"选中\" lay-skin=\"tag\" checked> \n  <input type=\"checkbox\" name=\"CCC\" title=\"禁用\" lay-skin=\"tag\" disabled>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Date Pickers with Shortcut Options in JavaScript\nDESCRIPTION: JavaScript code that initializes various Layui date picker components with custom shortcut options. The code demonstrates how to create date, year, month, time, and datetime pickers with predefined shortcuts for quick date selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/shortcut.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n  var util = layui.util;\n\n  /*\n   * 快捷选项\n   */\n\n  // 日期\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-date\",\n    shortcuts: [\n      {\n        text: \"昨天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() - 1);\n          return now;\n        }\n      },\n      { \n        text: \"今天\", \n        value: function(){\n          return Date.now();\n        } \n      },\n      {\n        text: \"明天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() + 1);\n          return now;\n        }\n      },\n      {\n        text: \"上个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() - 1;\n\n          now.setMonth(month);\n\n          // 若上个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() + 1;\n\n          now.setMonth(month);\n\n          // 若下个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"某一天\",\n        value: \"2016-10-14\"\n      }\n    ]\n  });\n\n  // 年份\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-year\",\n    type: \"year\",\n    shortcuts: [\n      {\n        text: \"去年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() - 1);\n          return now;\n        }\n      },\n      {\n        text: \"明年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() + 1);\n          return now;\n        }\n      }\n    ]\n  });\n\n  // 年月\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-month\",\n    type: \"month\",\n    shortcuts: [\n      {\n        text: \"上个月\",\n        value: function(){\n          var now = new Date();\n          now.setMonth(now.getMonth() - 1, 1);\n          return now;\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var now = new Date();\n          now.setMonth(now.getMonth() + 1, 1);\n          return now;\n        }\n      },\n      {\n        text: \"去年本月\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() - 1);\n          return now;\n        }\n      }\n    ]\n  });\n\n  // 时间\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-time\",\n    type: \"time\",\n    shortcuts: function(){ // 生成 30 分钟间隔的时间列表\n      var value = [];\n      var now = new Date();\n      now.setHours(0, 0, 0, 0);\n      for (var i = 0; i < 48; i++) {\n        var nowTemp = now.setMinutes(now.getMinutes() + (i ? 30 : 0));\n        var nowTimeStr = util.toDateString(nowTemp, \"HH:mm:ss\");\n        value.push({\n          text: nowTimeStr,\n          value: nowTimeStr\n        });\n      }\n      return value;\n    }()\n  });\n\n  // 日期时间\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-datetime\",\n    type: \"datetime\",\n    shortcuts: [\n      {\n        text: \"昨天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() - 1);\n          return now;\n        }\n      },\n      { \n        text: \"今天\", \n        value: function(){\n          return Date.now();\n        }\n      },\n      {\n        text: \"明天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() + 1);\n          return now;\n        }\n      },\n      {\n        text: \"上个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() - 1;\n\n          now.setMonth(month);\n\n          // 若上个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() + 1;\n\n          now.setMonth(month);\n\n          // 若上个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"某一天\",\n        value: \"2016-10-14 10:00:00\"\n      }\n    ]\n  }); \n\n\n  // 日期时间全面板\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-datetime-fullPanel\",\n    type: \"datetime\",\n    fullPanel: true,\n    shortcuts: [\n      {\n        text: \"昨天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() - 1);\n          return now;\n        }\n      },\n      { text: \"今天\", value: Date.now() },\n      {\n        text: \"明天\",\n        value: function(){\n          var now = new Date();\n          now.setDate(now.getDate() + 1);\n          return now;\n        }\n      },\n      {\n        text: \"上个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() - 1;\n\n          now.setMonth(month);\n\n          // 若上个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var now = new Date();\n          var month = now.getMonth() + 1;\n\n          now.setMonth(month);\n\n          // 若上个月数不匹配，则表示天数溢出\n          if (now.getMonth() !== month) {\n            now.setDate(0); // 重置天数\n          }\n\n          return [now];\n        }\n      },\n      {\n        text: \"某一天\",\n        value: \"2016-10-14 09:30:00\"\n      }\n    ]\n  });\n\n\n  // 日期范围\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-range-date\",\n    range: true,\n    shortcuts: [\n      {\n        text: \"上个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month - 1, 1),\n            new Date(year, month, 0)\n          ];\n        }\n      },\n      {\n        text: \"这个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month, 1),\n            new Date(year, month + 1, 0)\n          ];\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month + 1, 1),\n            new Date(year, month + 2, 0)\n          ];\n        }\n      }\n    ]\n  });\n\n\n  // 年份范围\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-range-year\",\n    type: \"year\",\n    range: true,\n    shortcuts: [\n      {\n        text: \"过去一年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() - 1);\n          return [now, new Date()];\n        }\n      },\n      {\n        text: \"未来一年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() + 1);\n          return [new Date(), now];\n        }\n      },\n      {\n        text: \"近三年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() - 3);\n          return [now, new Date()];\n        }\n      }\n    ]\n  });\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping and Unescaping with Layui Util\nDESCRIPTION: Implements HTML escaping and unescaping functionality using Layui's util.escape and util.unescape methods. Two buttons allow users to encode HTML special characters to their entity equivalents and then convert them back.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// HTML 转义\nutil.event('lay-on', {\n  escape: function(){ // 转义\n    var textarea = $('#test7');\n    var value = textarea.val();\n    var str = util.escape(value); // 执行转义方法\n    textarea.val(str);\n  },\n  unescape: function(){\n    var textarea = $('#test7');\n    var value = textarea.val();\n    var str = util.unescape(value); // 执行转义方法\n    textarea.val(str);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Table with Custom Data Parsing in JavaScript\nDESCRIPTION: This JavaScript snippet initializes and renders a Layui table component. It configures the table to fetch data from the specified URL, defines how to parse the response data using the `parseData` callback, and specifies the columns to display. The `parseData` function transforms the raw JSON response into a format that Layui's table component understands, mapping status, message, total, and data fields appropriately. The expected input is the JSON response from the URL, and the output is a rendered table.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/parse.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('table', function(){\n  var table = layui.table;\n  \n  // 渲染\n  table.render({\n    elem: '#ID-table-demo-parse',\n    url:'/static/json/2/table/demo3.json',\n    page: true,\n    response: {\n      statusCode: 200 // 重新规定成功的状态码为 200，table 组件默认为 0\n    },\n    // 将原始数据解析成 table 组件所规定的数据格式\n    parseData: function(res){\n      return {\n        \"code\": res.status, //解析接口状态\n        \"msg\": res.message, //解析提示文本\n        \"count\": res.total, //解析数据长度\n        \"data\": res.rows.item //解析数据列表\n      };\n    },\n    cols: [[\n      {field:'id', title:'ID', width:80, fixed: 'left', unresize: true, sort: true},\n      {field:'username', title:'用户名', width:120},\n      {field:'email', title:'邮箱', width:150},\n      {field:'experience', title:'积分', width:100, sort: true},\n      {field:'sex', title:'性别', width:80, sort: true},\n      {field:'sign', title:'签名'},\n      {field:'joinTime', title:'加入时间', width:120}\n    ]],\n    height: 315\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Layui Layer Lock Screen JavaScript\nDESCRIPTION: This comprehensive event handler for 'test-more-lockscreen' creates a full-screen layer simulating a lock screen. It disables default title, close button, scrollbar, and animations, applying custom CSS via the `skin` option. The `success` callback contains logic to render the embedded form, handle password input validation on click and Enter keypress, and close the lock screen upon correct password entry.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'test-more-lockscreen': function(){\n  layer.open({\n    type: 1,\n    title: false, // 禁用标题栏\n    closeBtn: false, // 禁用默认关闭按钮\n    area: ['100%', '100%'],\n    scrollbar: false, // 暂时屏蔽浏览器滚动条\n    anim: -1, // 禁用弹出动画\n    isOutAnim: false, // 禁用关闭动画\n    resize: false,  // 禁用右下角拉伸尺寸\n    id: 'ID-layer-demo-inst',\n    skin: 'class-demo-layer-lockscreen', // className\n    content: ['<div class=\"layui-form\">',\n      '<div class=\"layui-input-wrap\">',\n        '<input type=\"password\" class=\"class-demo-layer-pin\" lay-affix=\"eye\">',\n        '<div class=\"layui-input-suffix\">',\n          '<i class=\"layui-icon layui-icon-right\" id=\"ID-layer-demo-unlock\"></i>',\n        '</div>',\n      '</div>',\n      '<div>输入 111111 后回车，即可退出锁屏示例</div>',\n    '].join(''),\n    success: function(layero, index){\n      var input = layero.find('input');\n      var PASS = '111111';\n      \n      form.render(); // 表单组件渲染\n      input.focus();\n\n      // 点击解锁按钮\n      var elemUnlock = layero.find('#ID-layer-demo-unlock');\n      elemUnlock.on('click', function(){\n        if($.trim(input[0].value) === PASS){\n          layer.close(index);\n          layer.closeLast('dialog'); // 关闭最新打开的信息框\n        } else {\n          layer.msg('锁屏密码输入有误', {offset: '16px', anim: 'slideDown'})\n          input.focus();\n        }\n      });\n\n      // 回车\n      input.on('keyup', function(e){\n        var elem = this;\n        var keyCode = e.keyCode;\n        if(keyCode === 13){\n          elemUnlock.trigger('click');\n        }\n      });\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Month Range Shortcuts in Layui - JavaScript\nDESCRIPTION: This JavaScript snippet configures a laydate instance to display a month range selector with custom shortcuts. It uses the `laydate.render()` function to initialize the datepicker, specifying the element to bind to (`#ID-laydate-shortcut-range-month`), the type (`month`), and enables range selection (`range: true`). The `shortcuts` array defines the text displayed for each shortcut and the corresponding function that returns the start and end dates for the selected range.  The shortcuts include '去年', '明年', and '近三年'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/shortcut.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // 年月范围\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-range-month\",\n    type: \"month\",\n    range: true,\n    shortcuts: [\n      {\n        text: \"去年\",\n        value: function(){\n          var now = new Date();\n          var year = now.getFullYear() - 1;\n\n          return [\n            new Date(year, 0),\n            new Date(year, 11)\n          ];\n        }\n      },\n      {\n        text: \"明年\",\n        value: function(){\n          var now = new Date();\n          var year = now.getFullYear() + 1;\n\n          return [\n            new Date(year, 0),\n            new Date(year, 11)\n          ];\n        }\n      },\n      {\n        text: \"近三年\",\n        value: function(){\n          var now = new Date();\n          now.setFullYear(now.getFullYear() - 3);\n          return [now, new Date()];\n        }\n      }\n    ]\n  });\n```\n\n----------------------------------------\n\nTITLE: TreeTable HTML Placeholder\nDESCRIPTION: This HTML snippet defines the placeholder for the Layui treeTable. The `layui-hide` class hides the table initially, and the `id` attribute is used to reference it in the JavaScript code.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/examples/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-treeTable-demo\"></table>\n```\n\n----------------------------------------\n\nTITLE: Handling Table Checkbox Selection Event (Layui)\nDESCRIPTION: Listens for the 'checkbox' event on a Layui table (filter 'test'). When a checkbox's state changes (checked or unchecked), this function is triggered, and it logs the event object (`obj`) to the console. The `obj` contains details about the event, including the checkbox state and row data. Depends on the Layui `table` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.on('checkbox(test)', function(obj){\n  console.log(obj)\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Colorpicker Value to Form Input\nDESCRIPTION: This snippet shows how to integrate the Layui Colorpicker with a form.  It initializes the colorpicker, and upon color selection, updates the value of a corresponding text input field with the selected color. This enables users to select a color via the colorpicker and then submit it as part of a form.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form\" action=\"\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-input-inline\" style=\"width: 120px;\">\n      <input type=\"text\" name=\"color\" value=\"\" placeholder=\"请选择颜色\" class=\"layui-input\" id=\"ID-colorpicker-demo-form-color\">\n    </div>\n    <div class=\"layui-inline\" style=\"left: -11px;\">\n      <div id=\"ID-colorpicker-demo-form\"></div>\n    </div>\n  </div>\n</form>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n  var $ = layui.$;\n\n  // 渲染\n  colorpicker.render({\n    elem: '#ID-colorpicker-demo-form',\n    color: '#1c97f5',\n    done: function(color){\n      $('#ID-colorpicker-demo-form-color').val(color);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Event Handling with Layui util.on - JavaScript\nDESCRIPTION: Demonstrates registering multiple custom event handlers on DOM elements via util.on from the Layui util module. Accepts event maps keyed by attribute (e.g. lay-on, lay-active), and can specify trigger types (e.g. click, mouseenter), delegated parent elements, and event callback functions. Requires Layui, util module, and commonly layer for UI feedback. Handlers receive the triggering element and, optionally, the event object for advanced control (e.g., stopping propagation).\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button class=\"layui-btn\" lay-on=\"e1\">事件 1</button>\n  <button class=\"layui-btn\" lay-on=\"e2\">事件 2</button>\n  <button class=\"layui-btn\" lay-active=\"e3\">事件 3</button>\n</div>\n\n<!-- import layui -->\n<script>\nlayui.use('util', function(){\n  var util = layui.util;\n\n  //  2.9+ 版本可省略 attr 参数，默认读取 lay-on\n  util.on({\n    e1: function(){\n      console.log(this); // 当前触发事件的 DOM 元素\n      layer.msg('触发了事件 1');\n    },\n    e2: function(){\n      layer.msg('触发了事件 2');\n    }\n  });\n\n   // 自定义：触发事件的元素属性名、触发事件的方式\n  util.on('lay-active', {\n    e3: function(othis, e) {\n      console.log(othis); // 当前触发事件的元素的 jQuery 对象\n\n      // e 为当前事件对象，此处演示阻止事件冒泡（比如委托父元素和子元素共用了同一事件名）\n      layui.stope(e);\n\n      // 演示提示\n      layer.tips(othis.html(), this);\n    }\n  }, {\n    trigger: 'mouseenter' // 鼠标移入时触发事件\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Binding Loading Events with Layui Utility Module in JavaScript\nDESCRIPTION: This JavaScript snippet uses the Layui 'layer' and 'util' modules to bind click events to four buttons, triggering different loading overlays or messages. Each event handler shows a loading indicator (with varying types or a message with an icon), holds it for 3 seconds using setTimeout, and then closes it automatically. Dependencies include the Layui library and its 'layer' and 'util' modules; only the buttons with matching 'lay-on' attributes will respond to the events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/load.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    'test-load-1': function(){\n      var loadIndex = layer.load(0);\n      // 模拟关闭\n      setTimeout(function(){\n        layer.close(loadIndex)\n      }, 3000);\n    },\n    'test-load-2': function(){\n      var loadIndex = layer.load(1);\n      // 模拟关闭\n      setTimeout(function(){\n        layer.close(loadIndex)\n      }, 3000);\n    },\n    'test-load-3': function(){\n      var loadIndex = layer.load(2);\n      // 模拟关闭\n      setTimeout(function(){\n        layer.close(loadIndex)\n      }, 3000);\n    },\n    'test-load-4': function(){\n      var loadIndex = layer.msg('加载中', {\n        icon: 16,\n        shade: 0.01\n      });;\n      // 模拟关闭\n      setTimeout(function(){\n        layer.close(loadIndex)\n      }, 3000);\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Layui Laydate Lunar Theme CSS\nDESCRIPTION: This CSS snippet defines the styles for the custom 'lunar' theme applied to the Layui datepicker. It modifies various elements like date cells, month/year lists, and adds styles for indicators ('badge', 'holiday', 'hightlight') to visually integrate lunar data and events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/cell.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.laydate-theme-lunar .layui-laydate-main {\n      width: auto;\n    }\n    .laydate-theme-lunar .date-cell-inner {\n      padding: 6px;\n      width: 44px;\n      height: 40px;\n      border-radius: 4px !important;\n    }\n    .laydate-theme-lunar .layui-this {\n      border-radius: 4px !important;\n    }\n    .laydate-theme-lunar .date-cell-inner b {\n      display: block;\n      font-weight: 400;\n      height: 16px;\n      font-size: 14px;\n    }\n    .laydate-theme-lunar .date-cell-inner i {\n      display: block;\n      font-style: normal;\n      font-size: 10px;\n    }\n    .laydate-theme-lunar .badge {\n      position: absolute;\n      right: 0px;\n      top: 0px;\n      background-color: #4e5877;\n      color: #fff;\n      font-size: 12px;\n      line-height: 14px;\n      padding: 1px 2px;\n      border-radius: 4px;\n      text-decoration: none;\n      transform: scale(0.7);\n    }\n    .laydate-theme-lunar .holiday .badge {\n      background-color: #eb3333 !important;\n    }\n    .laydate-theme-lunar .hightlight i {\n      color: #1e9fff;\n    }\n    .laydate-theme-lunar .layui-this .hightlight i {\n      color: #fff;\n    }\n    .laydate-theme-lunar .laydate-month-list > li {\n      height: 50px !important;\n      line-height: 50px !important;\n      width: 24.2% !important;\n      margin: 18px 1px !important;\n    }\n    .laydate-theme-lunar .laydate-year-list > li {\n      height: 40px !important;\n      line-height: normal !important;\n      width: 31.3% !important;\n      margin: 8px 2px !important;\n    }\n    .laydate-theme-lunar .preview-inner>*{\n      display: inline-block;\n      margin-right: 5px;\n      position:relative;\n      font-size: 12px;\n    }\n    .laydate-theme-lunar .preview-inner>.badge{\n      margin-right: 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Layui Layer Themes with JavaScript\nDESCRIPTION: JavaScript code that initializes Layui layer and util modules to handle button events and display differently themed layers. Demonstrates built-in themes, Windows 10 style, and custom themes with various configurations.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/skin.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    'test-skin-alert': function(){\n      layer.alert('墨绿风格，点击继续确认看深蓝', {\n        skin: 'layui-layer-molv' // 样式类名\n      }, function(){\n        layer.alert('深蓝', {\n          skin: 'layui-layer-lan'\n        });\n      });\n    },\n    'test-skin-win10': function(){\n      layer.alert('Windows 10 风格主题', {\n        skin: 'layui-layer-win10', // 2.8+\n        shade: 0.01,\n        btn: ['确定', '取消']\n      })\n    },\n    'test-skin-win10-page': function(){\n      // 此处以一个简单的 Win10 风格记事本为例\n      layer.open({\n        type: 1, // 页面层类型\n        skin: 'layui-layer-win10', // 2.8+\n        shade: 0.01,\n        area: ['50%', '60%'],\n        maxmin: true,\n        title: '*无标题 - 记事本',\n        content: [\n          '<div style=\"padding: 0 8px; height: 20px; line-height: 20px; border-bottom: 1px solid #F0F0F0; box-sizing: border-box; font-size: 12px;\">',\n            // 自定义菜单，此处仅作样式演示，具体功能可自主实现\n            [\n              '<a href=\"javascript:;\">文件(F)</a>',\n              '<a href=\"javascript:;\" >编辑(E)</a> ',\n              '<a href=\"javascript:;\" >格式(O)</a> ',\n              '<a href=\"javascript:;\" >查看(V)</a> ',\n              '<a href=\"javascript:;\" >帮助(H)</a> ',\n            ].join('&nbsp;&nbsp;&nbsp;'),\n          '</div>',\n          '&lt;textarea style=\"position: absolute; top: 20px; width: 100%; height: calc(100% - 20px); padding: 6px; border: none; resize: none; overflow-y: scroll; box-sizing: border-box;\">&lt;/textarea>'\n        ].join('')\n      });\n    },\n    'test-skin-custom': function(){\n      layer.alert('自定义其他任意主题', {\n        skin: 'class-layer-demo-custom'\n      })\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Global ESC Key Listener for Layui Layers JavaScript\nDESCRIPTION: This JavaScript snippet adds a global keyup event listener to the entire document. When the Escape key (keyCode 27) is pressed, it checks the `layer.escIndex` array (populated by the 'test-more-stack' logic) and closes the layer corresponding to the index at the beginning of the array, effectively closing the most recently active stacked layer.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).on('keyup', function(e){\n  if(e.keyCode === 27){\n    layer.close(layer.escIndex ? layer.escIndex[0] : 0);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs with Layui JavaScript Framework\nDESCRIPTION: This JavaScript snippet utilizes the Layui framework's tabs module to render tabbed content inside a designated HTML container. It programmatically defines tab headers and their corresponding content bodies. The 'render' method takes configuration including the container selector ('elem'), an array of tab headers ('header'), and contents ('body'). Optional features like initial selected tab index, CSS styling classes, and tab closability are commented for future use. It requires the Layui library to be loaded and initialized properly in the environment. The expected input is the HTML element ID where the tabs will appear, and the output is a rendered interactive tab interface.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/method.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var tabs = layui.tabs;\n\n  // 方法渲染\n  tabs.render({\n    elem: '#demoTabs2',\n    header: [\n      { title: 'Tab1' },\n      { title: 'Tab2' },\n      { title: 'Tab3' }\n    ],\n    body: [\n      { content: 'Tab content 1' },\n      { content: 'Tab content 2' },\n      { content: 'Tab content 3' }\n    ],\n    // index: 1, // 初始选中项\n    // className: 'layui-tabs-card',\n    // closable: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Initialization for Multi-File Upload with Layui\nDESCRIPTION: This script initializes the Layui upload module to enable multi-file uploads, including file selection, preview, upload progress, retry, delete operations, and completion callbacks. It binds event handlers to manage file queue, update UI, and handle upload responses, relying on Layui's upload, element, and jQuery modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/files.table.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n  var element = layui.element;\n  var $ = layui.$;\n\n  // 制作多文件上传表格\n  var uploadListIns = upload.render({\n    elem: '#ID-upload-demo-files',\n    elemList: $('#ID-upload-demo-files-list'), // 列表元素对象\n    url: '', // 上传接口地址，实际应用中需要设置\n    accept: 'file',\n    multiple: true,\n    number: 3,\n    auto: false,\n    bindAction: '#ID-upload-demo-files-action',\n    choose: function(obj){   \n      var that = this;\n      var files = this.files = obj.pushFile(); // 追加文件到队列\n\n      // 读取本地文件\n      obj.preview(function(index, file, result){\n        var tr = $(['<tr id=\"upload-'+ index +'\">',\n          '<td>'+ file.name +'</td>',\n          '<td>'+ (file.size/1024).toFixed(1) +'kb</td>',\n          '<td><div class=\"layui-progress\" lay-filter=\"progress-demo-'+ index +'\"><div class=\"layui-progress-bar\" lay-percent=\"\"></div></div></td>',\n          '<td>',\n            '<button class=\"layui-btn layui-btn-xs demo-reload layui-hide\">重传</button>',\n            '<button class=\"layui-btn layui-btn-xs layui-btn-danger demo-delete\">删除</button>',\n          '</td>',\n        '</tr>'].join(''));\n        \n        // 单个重传\n        tr.find('.demo-reload').on('click', function(){\n          obj.upload(index, file);\n        });\n        \n        // 删除\n        tr.find('.demo-delete').on('click', function(){\n          delete files[index]; // 删除对应文件\n          tr.remove(); // 删除表格行\n          // 清空 input file 值\n          uploadListIns.config.elem.next()[0].value = ''; \n        });\n        \n        that.elemList.append(tr);\n        element.render('progress');\n      });\n    },\n    done: function(res, index, upload){ // 上传成功回调\n      var that = this;\n      var tr = that.elemList.find('tr#upload-'+ index);\n      var tds = tr.children();\n      tds.eq(3).html(''); // 清空操作\n      delete this.files[index]; // 删除已上传文件\n      return;\n    },\n    allDone: function(obj){ // 全部上传完毕\n      console.log(obj);\n    },\n    error: function(index, upload){ // 上传错误\n      var that = this;\n      var tr = that.elemList.find('tr#upload-'+ index);\n      var tds = tr.children();\n      tds.eq(3).find('.demo-reload').removeClass('layui-hide');\n    },\n    progress: function(n, elem, e, index){ // 进度条更新\n      element.progress('progress-demo-'+ index, n + '%');\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering layui Upload Component in JavaScript\nDESCRIPTION: This snippet demonstrates initializing single and multiple layui upload buttons by calling upload.render within a layui.use block. Dependencies include the layui JavaScript framework and the upload module. The 'elem' option specifies CSS selectors for the upload buttons, and additional options can be defined as needed. The rendered upload component will not function unless an upload endpoint is provided, and element selectors must match buttons in the DOM.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\" class=\"layui-btn\" id=\"ID-test-uoload\">上传</button>\n<button type=\"button\" class=\"layui-btn test-class-upload\" lay-options=\"{}\">上传</button>\n<button type=\"button\" class=\"layui-btn test-class-upload\" lay-options=\"{}\">上传</button>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n  // 单个渲染\n  upload.render({\n    elem: '#ID-test-uoload',\n    // …\n  });\n  // 批量渲染\n  upload.render({\n    elem: '.test-class-upload',\n    // …\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Rounded Corners - HTML\nDESCRIPTION: This snippet demonstrates how to apply rounded corners to Layui buttons using the layui-btn-radius class.  It showcases different button styles with rounded corners, including primary, default, normal, warm, danger and disabled.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-radius\">原始按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-radius\">默认按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-normal layui-btn-radius\">百搭按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-warm layui-btn-radius\">暖色按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-danger layui-btn-radius\">警告按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-disabled layui-btn-radius\">禁用按钮</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating Layui Carousel to Index\nDESCRIPTION: This snippet demonstrates how to navigate the Layui carousel to a specific index using the `inst.goto()` method, from version 2.8+.  The `index` parameter specifies the item to navigate to (starting from 0).  This enables programmatic control of the carousel's display, letting you change to specific slides in response to events or user interactions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/carousel/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar inst = carousel.render(options); // 轮播初始渲染\ninst.goto(0); // 轮播切换到第一项\ninst.goto(1); // 轮播切换到第二项\n```\n\n----------------------------------------\n\nTITLE: Listening for Tab Change Events\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for tab change events using `element.on('tab(filter)', callback)`.  It specifies the `filter` parameter, which corresponds to the `lay-filter` attribute on the tab container. The callback function provides access to the DOM element of the current tab, the index of the tab, the tab container and the tab ID(2.9.11+).\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar element = layui.element;\n\n// tab 切换事件\nelement.on('tab(filter)', function(data){\n  console.log(this); // 当前 tab 标题所在的原始 DOM 元素\n  console.log(data.index); // 得到当前 tab 项的所在下标\n  console.log(data.elem); // 得到当前的 tab 容器\n  console.log(data.id); // 得到当前的 tab ID(2.9.11+)\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layer Event Trigger Buttons with Layui in HTML\nDESCRIPTION: This HTML snippet sets up a button container with multiple buttons, each assigned a unique 'lay-on' attribute to indicate the dialog or popup they trigger (e.g., Alert, Confirm, Msg). These buttons serve as UI controls for the demonstration, enabling the JavaScript logic to capture events and invoke Layui's layer features. Buttons are styled and grouped using Layui's CSS classes, and no dependencies other than the Layui stylesheet are required.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/type.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"alert\">Alert</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"confirm\">Confirm</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"msg\">Msg</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"page\">Page</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"iframe\">Iframe</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"load\">Load</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"tips\">Tips</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"prompt\">Prompt</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"photots\">Photots</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Form Submission in JavaScript\nDESCRIPTION: This JavaScript code utilizes the Layui framework to handle the form submission. It initializes the form module and defines a submit event listener for the form with the `demo2` filter.  Inside the event listener, it retrieves form field values using `data.field`, displays these values using `layer.alert`, and optionally performs AJAX operations. The `return false;` prevents the default form submission behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.pane.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<!-- import layui --> \n<script>\nlayui.use(['form'], function(){\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // 提交事件\n  form.on('submit(demo2)', function(data){\n    var field = data.field; // 获取表单字段值\n\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n\n    // 此处可执行 Ajax 等操作\n    // …\n\n    return false; // 阻止默认 form 跳转\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Buttons with Layui in HTML\nDESCRIPTION: This snippet defines a set of four buttons using Layui classes within a button container in HTML. Each button is assigned a unique 'lay-on' attribute to bind custom loading events. Dependencies include the Layui CSS framework, and each button is expected to be styled and identified correctly for event handling. No data is exchanged; the HTML serves as the structure for the interactive demo.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/load.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-load-1\">风格1</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-load-2\">风格2</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-load-3\">风格3</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-load-4\">风格4</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Table Column Visibility Toggle Events (JavaScript)\nDESCRIPTION: Demonstrates listening for events when a column's visibility is changed through the header filter dropdown using `table.on('colToggled(filter)', callback)`. The callback receives details about the affected column.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 渲染\ntable.render({\n  elem: '#test',\n  // … // 其他属性\n});\n \n// 列筛选（显示或隐藏）后的事件\ntable.on('colToggled(test)', function(obj){\n  var col = obj.col; // 获取当前列属性选项\n  var options = obj.config; // 获取当前表格基础属性选项\n  console.log(obj); // 查看对象所有成员\n});\n```\n\n----------------------------------------\n\nTITLE: Legend for icon implementation and styling method\nDESCRIPTION: Provides a detailed explanation of how to assign icon fonts by adding the class 'layui-icon' to inline elements like <i>. Additional classes correspond to specific icons, and inline styles can modify appearance attributes such as size and color, making the icons flexible and customizable.\nSOURCE: https://github.com/layui/layui/blob/main/docs/icon/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n通过对一个内联元素（如 <i>标签）添加基础类 'class=\"layui-icon\"' 来定义一个图标，然后对元素加上图标对应的 font-class，即可显示出你想要的图标\n```\n\n----------------------------------------\n\nTITLE: Obtaining a layui Upload Instance Object in JavaScript\nDESCRIPTION: This snippet illustrates how to retrieve the instance object returned by upload.render, which allows direct access to instance methods like upload and reload. The snippet requires the layui framework and the upload module. The output is the instance object, which can be used for advanced programmatic control of the upload component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar inst = upload.render(options);\nconsole.log(inst); // 得到当前实例对象\n```\n\n----------------------------------------\n\nTITLE: Handling Table Radio Button Selection Event (Layui)\nDESCRIPTION: Listens for the 'radio' event on a Layui table (filter 'test'). When a radio button is selected, this function is triggered, and it logs the event object (`obj`) to the console. The `obj` provides information about the selected radio button and the corresponding row data. Depends on the Layui `table` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.on('radio(test)', function(obj){\n  console.log(obj)\n});\n```\n\n----------------------------------------\n\nTITLE: 实现密码框显隐动态点缀 - HTML\nDESCRIPTION: 此代码演示如何通过给<input type=\"password\">元素添加lay-affix=\"eye\"属性，实现密码输入框内容的显隐切换功能。Layui框架根据该属性为输入框添加视觉切换图标，允许用户控制密码显示或隐藏，提升用户体验。示例中的布局基于layui-input-wrap容器以保证点缀范围。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"password\" lay-affix=\"eye\" placeholder=\"请输入\" class=\"layui-input\">\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Range Limit with laydate.render (JavaScript)\nDESCRIPTION: Initializes a date picker with a specified minimum and maximum date, providing hints upon readiness. Depends on layui's laydate module; inputs are minimal and maximal date strings. Outputs a date picker constrained within 2016-10-14 to 2080-10-14.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/limit.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ins22 = laydate.render({\n  elem: '#ID-laydate-limit-1',\n  min: '2016-10-14',\n  max: '2080-10-14',\n  ready: function(){\n    ins22.hint('日期可选值设定在 <br> 2016-10-14 到 2080-10-14');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Date Change: Change Callback (Layui)\nDESCRIPTION: This code snippet demonstrates the 'change' callback function within the Layui date component. It shows how to access the selected date string, the date object (year, month, day, hours, minutes, seconds), and the end date object when using range selection.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nchange: function(value, date, endDate){\n  console.log(value); // 日期字符，如： 2017-08-18\n  console.log(date); // 包含年月日时分秒各项值的对象\n  console.log(endDate); // 结束日期时间对象，当设置 range 时才会返回。对象成员同上.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Table Header Toolbar Template (HTML)\nDESCRIPTION: This HTML snippet defines a template (`#toolbarDemo`) for the Layui table's header toolbar. It uses Layui CSS classes and `lay-event` attributes to create buttons for actions like getting selected data, getting current page data, and triggering dropdown menus for reloading and row mode switching. The template syntax `{{! ... !}}` indicates server-side templating, and `{{= d.lineStyle ? '多行' : '单行' }}` demonstrates conditional rendering based on data.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"toolbarDemo\">{{!\n  <div class=\"layui-btn-container\">\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"getCheckData\">获取选中行数据</button>\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"getData\">获取当前页数据</button>\n    <button class=\"layui-btn layui-btn-sm\" id=\"dropdownButton\">\n      下拉按钮 \n      <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n    </button>\n    <button class=\"layui-btn layui-btn-sm layui-bg-blue\" id=\"reloadTest\">\n      重载测试 \n      <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n    </button>\n    <button class=\"layui-btn layui-btn-sm layui-btn-primary\" id=\"rowMode\">\n      <span>{{= d.lineStyle ? '多行' : '单行' }}模式</span>\n      <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n    </button>\n  </div>\n!}}</script>\n```\n\n----------------------------------------\n\nTITLE: Escaping and Unescaping HTML with Layui util.escape and util.unescape - JavaScript\nDESCRIPTION: Shows how to safely escape and restore HTML strings using util.escape and util.unescape from Layui's util module. Useful for preventing XSS and rendering plain HTML in text contexts. Accepts any string as input and returns the transformed string with HTML characters encoded or decoded.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar str1 = util.escape('<div>123</div>'); // 返回： &lt;div&gt;123&lt;/div&gt;\nvar str2 = util.unescape('&lt;div&gt;123&lt;/div&gt;'); // 返回： <div>123</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Binding Layui Tabs with JavaScript\nDESCRIPTION: This JavaScript snippet loads the Layui framework and uses its tab component to bind tab switching functionality to specified HTML elements, enabling interactive tab content display. It requires Layui library to be included and depends on its 'tabs' module for rendering behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/custom.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var tabs = layui.tabs;\n\n  // 给任意元素绑定 Tab 功能\n  tabs.render({\n    elem: '#demoTabs3',\n    header: ['#demoTabsHeader', '>button'],\n    body: ['#demoTabsBody', '>.test-item']\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Layer Popup Resizing with resizing Callback in JavaScript\nDESCRIPTION: Implements the resizing callback in LayUI's layer popup to track and respond during popup resizing events. The callback receives the popup DOM element and logs a message indicating ongoing resize action. It provides real-time feedback within the resizing interaction and requires LayUI only.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 1,\n  content: '内容',\n  resizing: function(layero){\n    console.log('拉伸中');\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Status Text Prompts (Layui) - JavaScript\nDESCRIPTION: Configures custom text prompts for various upload status events via the 'text' object. Each property provides messages or functions for specific events, such as format errors or quota limits. Functions for 'limit-number' and 'limit-size' allow for dynamic messaging. Available from Layui 2.8.9+.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntext: { // 自定义提示文本\n  \"data-format-error\": \"\", // 数据格式错误的提示\n  \"check-error\": \"\", // 文件格式校验失败的提示\n  \"error\": \"\", // 上传失败的提示\n  \"limit-number\": null, // 限制 number 属性的提示。若设置，需为函数写法\n  \"limit-size\": null, // 限制 size 属性的提示。若设置，需为函数写法\n  \"cross-domain\": \"\", // IE 下跨域的提示\n}\n```\n\n----------------------------------------\n\nTITLE: layui Form with Custom Checkbox Skins (Card Style)\nDESCRIPTION: This HTML snippet defines a layui form containing a set of checkboxes with custom \"card\" skins.  It uses the `lay-skin=\"none\"` attribute to remove the default layui checkbox styling, allowing for custom styling using CSS classes like `lay-skin-checkcard`. Each checkbox is associated with a div that visually represents the card, including an icon, header, and description.  The checkboxes have different states like checked and disabled to show variations.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkbox.skin.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\" lay-filter=\"form-demo-skin\">\n  {{- d.include(\"/form/examples/checkboxAndRadio.style.md\") }}\n  <h3 class=\"ws-bold\">自定义“卡片风格”的多选组件</h3>\n  <div class=\"layui-row layui-col-space8\">\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"checkbox\" name=\"browser[0]\" value=\"chrome\" lay-skin=\"none\">\n      <div lay-checkbox class=\"lay-skin-checkcard lay-check-dot\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-chrome\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Chrome</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Google 公司开发的网页浏览器，被大多数人所使用。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"checkbox\" name=\"browser[1]\" value=\"edge\" lay-skin=\"none\" checked>\n      <div lay-checkbox class=\"lay-skin-checkcard lay-check-dot\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-edge\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Edge</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Microsoft 开发的网页浏览器，基于 Chromeium 内核。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"checkbox\" name=\"browser[2]\" value=\"firefox\" lay-skin=\"none\" disabled>\n      <div lay-checkbox class=\"lay-skin-checkcard lay-check-dot\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-firefox\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Firefox</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Mozilla 开发的开放源代码的网页浏览器。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"checkbox\" name=\"browser[3]\" value=\"ie\" lay-skin=\"none\" disabled checked>\n      <div lay-checkbox class=\"lay-skin-checkcard lay-check-dot\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-ie\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Internet Explorer</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Microsoft 出品的网页浏览器，俗称 IE，已被微软放弃。\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Border Tabbed Card with Layui - HTML\nDESCRIPTION: This code defines a border tabbed card interface. It builds upon the basic tab structure from the standard card example but incorporates `layui-panel` and `layui-inline` classes. The tab headers uses `layui-bg-tint` class. Also, initial tab with the active class `layui-this` is included. The content includes a form with a select element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/card.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-tabs-card layui-panel layui-inline\">\n  <ul class=\"layui-tabs-header layui-bg-tint\">\n    <li class=\"layui-this\">标题1</li>\n    <li>标题2</li>\n    <li>标题3</li>\n    <li>标题4</li>\n    <li>标题5</li>\n    <li>标题6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item layui-show\">\n      <div class=\"layui-form\">\n        <select>\n          <option>1</option>\n          <option>2</option>\n          <option>3</option>\n          <option>4</option>\n          <option>5</option>\n          <option>6</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"layui-tabs-item\">2</div>\n    <div class=\"layui-tabs-item\">3</div>\n    <div class=\"layui-tabs-item\">4</div>\n    <div class=\"layui-tabs-item\">5</div>\n    <div class=\"layui-tabs-item\">6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Padding Numbers with Zeros with Layui util.digit - JavaScript\nDESCRIPTION: Demonstrates generation of zero-padded numeric strings using util.digit. Requires Layui util module. Takes a number and a desired string length, returning the number as a zero-padded string if necessary. Useful for consistent formatting (e.g., time components, IDs).\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar rs1 = util.digit(6, 2); // \"06\"\nvar rs2 = util.digit(7, 3); // \"007\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Manual Loading with Lazy Image Load Using Layui Flow Module in JavaScript\nDESCRIPTION: This snippet implements manual flow loading with lazy image loading in Layui. It targets the container with id 'ID-flow-demo-manual' and disables automatic loading by setting isAuto to false. The done callback simulates loading 6 images per page, embedding image elements with dynamic URLs that vary by pagination index and leveraging Layui's lazy image loading with the lay-src attribute. Pagination is limited to 6 pages by passing a boolean condition to next. Dependencies include Layui and the flow module with lazy image support. The snippet is designed for scenarios requiring manual trigger flow loading and efficient image resource management.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/detail/demo.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var flow = layui.flow;\n  // 流加载实例\n  flow.load({\n    elem: '#ID-flow-demo-manual', // 流加载容器\n    scrollElem: '#ID-flow-demo-manual', // 滚动条所在元素，一般不用填，此处只是演示需要。\n    isAuto: false,\n    isLazyimg: true,\n    done: function(page, next){ // 加载下一页\n      // 模拟插入\n      setTimeout(function(){\n        var lis = [];\n        for(var i = 0; i < 6; i++){\n          lis.push('<li><img lay-src=\"https://unpkg.com/outeres@0.0.11/demo/wallpaper.jpg?v='+ ( (page-1)*6 + i + 1 ) +'\"></li>')\n        }\n        next(lis.join(''), page < 6); // 假设总页数为 6\n      }, 520);\n    }\n  });\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"flow-demo\" id=\"ID-flow-demo-manual\"></div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Using form.submit() Method in Layui\nDESCRIPTION: This example shows how to use the form.submit() method introduced in Layui 2.7+. It demonstrates triggering form submission from any location outside the form using the lay-filter attribute.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<fieldset class=\"layui-elem-field\">\n  <legend>表单内部</legend>\n  <div class=\"layui-field-box\">\n    <form class=\"layui-form\" lay-filter=\"form-demo-submit\">\n      <input type=\"text\" name=\"nickname\" lay-verify=\"required\" class=\"layui-input\">\n    </form>\n  </div>\n</fieldset>\n\n<button class=\"layui-btn\" id=\"test-btn-submit\">任意位置按钮</button>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var $ = layui.$;\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // 任意位置按钮触发提交\n  $('#test-btn-submit').on('click', function(){\n    form.submit('form-demo-submit', function(data){\n      var field = data.field; // 获取表单全部字段值\n      console.log(data); // 回调函数返回的 data 参数和提交事件中返回的一致\n\n      // 执行提交\n      layer.confirm('确定提交吗？', function(index){\n        layer.close(index); // 关闭确认提示框\n\n        // 显示填写结果，仅作演示用\n        layer.alert(JSON.stringify(field), {\n          title: '当前填写的字段值'\n        });\n        // 此处可执行 Ajax 等操作\n        // …\n      });\n    });\n    return false;\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Copy Event Handler for Layui Code Component\nDESCRIPTION: JavaScript callback function that triggers when the copy button is clicked in the Layui Code component. Provides access to the copied code content and allows for custom handling or preventing the default copy notification.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nonCopy: function(code, copied){\n  console.log(code); // 得到当前 code 内容\n  console.log(copied); // 是否复制成功(2.9.21+)\n\n  return false; // 返回 false 阻止内置提示(2.9.21+)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Size Options in Layui Laypage (JavaScript)\nDESCRIPTION: Demonstrates customizing the dropdown options for selecting the number of items per page using the `limits` array. The `limit` option sets the initial default page size. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-limits\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 自定义每页条数的选择项\n  laypage.render({\n    elem: 'demo-laypage-limits',\n    count: 1000,\n    limit: 100,\n    limits: [100, 300, 500],\n    layout: ['prev', 'page', 'next', 'limit']\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Collapse Panel Events with Layui in JavaScript\nDESCRIPTION: Shows usage of Layui's event listener API for collapse panel interactions. The 'element.on' method listens for the 'collapse(filter)' event, where 'filter' corresponds to the 'lay-filter' attribute of the collapse container. The callback receives an object parameter containing 'show' (boolean indicating expanded state), 'title' (DOM element of the clicked panel's title), and 'content' (DOM element of the panel's content). This enables developers to execute custom logic on collapse toggle events, such as displaying messages or handling UI changes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_6\n\nLANGUAGE: HTML/JavaScript\nCODE:\n```\n<div class=\"layui-collapse\" lay-filter=\"filter-collapse\">\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 1</div>\n    <div class=\"layui-colla-content\">\n      <p>Content 1</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 2</div>\n    <div class=\"layui-colla-content\">\n      <p>Content 2</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 3</div>\n    <div class=\"layui-colla-content\">\n      <ul>\n        <li>Content list</li>\n        <li>Content list</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">折叠面板的标题</div>\n    <div class=\"layui-colla-content\">\n      <p>折叠面板的内容</p>\n    </div>\n  </div>\n</div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var element = layui.element;\n  var layer = layui.layer;\n\n  // 折叠面板点击事件\n  element.on('collapse(filter-collapse)', function(data){\n    console.log(data.show); // 得到当前面板的展开状态，true or false\n    console.log(data.title); // 得到当前点击面板的标题区域对象\n    console.log(data.content); // 得到当前点击面板的内容区域对象\n\n    // 显示状态，仅用于演示\n    layer.msg('展开状态：'+ data.show);\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Date Range (JavaScript)\nDESCRIPTION: Creates a date picker allowing selection within a range of days relative to the current date, using negative and positive offsets. No dependencies beyond layui; inputs are min and max relative day counts. Outputs a date picker that restricts selection to 7 days before and after the current date.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/limit.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-limit-2',\n  min: -7,\n  max: 7\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Form Module in JavaScript\nDESCRIPTION: This JavaScript snippet initializes the Layui framework's form component by loading the required modules using layui.use(). It assigns the form module and the jQuery-like helper $ to variables for further usage. This snippet assumes that the Layui JavaScript library is loaded and available on the page and prepares the environment to handle form interactions and rendering, such as skinning and validation. No parameters are passed, and no output is expected other than initializing Layui's internal mechanisms.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/radio.skin.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function () {\n  var form = layui.form;\n  var $ = layui.$;\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Future Dates (JavaScript)\nDESCRIPTION: Creates a date picker where dates after the current date are disabled. Relies on the disabledDate callback function in layui's laydate; no external dependencies. Inputs are the element selector and the callback function. Outputs a date picker with all future dates disabled.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/limit.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-limit-4',\n  disabledDate: function(date, type){\n    return date.getTime() > Date.now();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Layui Login Form in HTML\nDESCRIPTION: This snippet defines a responsive login form using Layui classes and markup, including fields for username, password, and captcha, with form validation and styled social login options. Dependencies include the Layui UI framework and icon library; relevant classes such as 'layui-form', 'layui-input', and 'layui-icon' style the form and handle user interaction. Expected input values are strings for username, password, and captcha, while outputs are tied to validation and form submission events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.login.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form\">\n  <div class=\"demo-login-container\">\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-username\"></i>\n        </div>\n        <input type=\"text\" name=\"username\" value=\"\" lay-verify=\"required\" placeholder=\"用户名\" lay-reqtext=\"请填写用户名\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"clear\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-password\"></i>\n        </div>\n        <input type=\"password\" name=\"password\" value=\"\" lay-verify=\"required\" placeholder=\"密   码\" lay-reqtext=\"请填写密码\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"eye\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-row\">\n        <div class=\"layui-col-xs7\">\n          <div class=\"layui-input-wrap\">\n            <div class=\"layui-input-prefix\">\n              <i class=\"layui-icon layui-icon-vercode\"></i>\n            </div>\n            <input type=\"text\" name=\"captcha\" value=\"\" lay-verify=\"required\" placeholder=\"验证码\" lay-reqtext=\"请填写验证码\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"clear\">\n          </div>\n        </div>\n        <div class=\"layui-col-xs5\">\n          <div style=\"margin-left: 10px;\">\n            <img src=\"https://www.oschina.net/action/user/captcha\" onclick=\"this.src='https://www.oschina.net/action/user/captcha?t='+ new Date().getTime();\">\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <input type=\"checkbox\" name=\"remember\" lay-skin=\"primary\" title=\"记住密码\">\n      <a href=\"#forget\" style=\"float: right; margin-top: 7px;\">忘记密码？</a>\n    </div>\n    <div class=\"layui-form-item\">\n      <button class=\"layui-btn layui-btn-fluid\" lay-submit lay-filter=\"demo-login\">登录</button>\n    </div>\n    <div class=\"layui-form-item demo-login-other\">\n      <label>社交账号登录</label>\n      <span style=\"padding: 0 21px 0 6px;\">\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-qq\" style=\"color: #3492ed;\"></i></a>\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-wechat\" style=\"color: #4daf29;\"></i></a>\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-weibo\" style=\"color: #cf1900;\"></i></a>\n      </span>\n      或 <a href=\"#reg\">注册帐号</a>\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Raw Output with Layui Template Tag {{- }} (Version 2.8+) in JavaScript\nDESCRIPTION: Uses the {{- }} tag introduced in Layui version 2.8 and above to output data fields without escaping HTML characters, allowing raw HTML content to be rendered directly. This requires careful handling to prevent XSS vulnerabilities. Input is a data field containing HTML strings, and output is raw HTML injection in the rendered template. Suitable when trusted HTML content must be output as-is.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{- variable }}\n```\n\n----------------------------------------\n\nTITLE: Opening iframe with disabled scrollbar using layui layer.open\nDESCRIPTION: This code opens an iframe with a specific URL and applies custom styling including a rim skin. It disables scrollbars within the iframe by setting the second array parameter to 'no'. Dependencies: layui.layer. Main options include size, skin, content URL, and scrollbar control.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/iframe.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 2,\n  area: ['360px', '500px'],\n  skin: 'layui-layer-rim',\n  content: ['/layer/test/1.html', 'no']\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Button Group in Layui with HTML\nDESCRIPTION: This snippet demonstrates how to create a standard group of radio buttons styled with Layui, including attributes for default selection, disabling, and custom values. Dependencies include importing the Layui library and initializing with JavaScript for enhanced styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/radio.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"radio\" name=\"AAA\" value=\"1\" title=\"默认\">\n  <input type=\"radio\" name=\"AAA\" value=\"2\" title=\"选中\" checked> \n  <input type=\"radio\" name=\"AAA\" value=\"3\" title=\"禁用\" disabled> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Text in Layui Laypage using JavaScript\nDESCRIPTION: Illustrates customizing the text labels for the first, last, previous, and next page buttons using the `first`, `last`, `prev`, and `next` options. HTML tags can be used within the text values. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-text\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 自定义文本\n  laypage.render({\n    elem: 'demo-laypage-text',\n    count: 100,\n    first: '首页',\n    last: '尾页',\n    prev: '<em>←</em>',\n    next: '<em>→</em>'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Table Column Resize Events (JavaScript)\nDESCRIPTION: Illustrates how to capture the event fired after a user resizes a table column using `table.on('colResized(filter)', callback)`. The callback provides details about the resized column and the table configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = layui.table;\n \n// 渲染\ntable.render({\n  elem: '#test',\n  // … // 其他属性\n});\n \n// 列拖拽宽度后的事件\ntable.on('colResized(test)', function(obj){\n  var col = obj.col; // 获取当前列属性选项\n  var options = obj.config; // 获取当前表格基础属性选项\n  console.log(obj); // 查看对象所有成员\n});\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component Callback Functions - JavaScript\nDESCRIPTION: Defines user interaction and lifecycle event handlers. 'ready' fires when the component panel is successfully displayed, receiving the panel and bound element DOM objects. 'click' handles menu item selection with parameters including data of the item, clicked element, bound element, and event object; returning false prevents panel closure. 'close' triggers after the dropdown panel hides, receiving the bound element. 'onClickOutside' detects clicks outside the dropdown and returning false prevents closure. These callbacks empower developers to implement custom behaviors and manage component states.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nready: function(elemPanel, elem) {\n  console.log(elemPanel); // Dropdown panel element\n  console.log(elem);     // Bound trigger element\n},\n\nclick: function(data, othis, event) {\n  console.log(data);  // Data of clicked menu item\n  console.log(othis); // Clicked menu item element\n  console.log(this.elem); // Bound element for this instance\n  console.log(event);  // Event object\n  // return false; // Return false to prevent panel close\n},\n\nclose: function(elem) {\n  console.log(elem); // Bound element when panel closes\n},\n\nonClickOutside: function(event) {\n  // event is the click event object outside dropdown\n  // return false; // Return false to prevent panel from closing\n}\n```\n\n----------------------------------------\n\nTITLE: Arranging Equal-width Columns with Layui Grid - HTML\nDESCRIPTION: This snippet demonstrates how to create horizontally aligned, equal-width columns using the Layui grid system. It utilizes \"layui-row\" as the container and multiple \"layui-col-xs*\" classes to specify column proportions on extra-small devices. Columns are visually distinguished with demo CSS backgrounds for clarity. No external dependencies are required apart from including Layui CSS. Inputs and content are customizable, while outputs are responsive, evenly distributed columns.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-xs6\">\n    <div class=\"grid-demo grid-demo-bg1\">6/12</div>\n  </div>\n  <div class=\"layui-col-xs6\">\n    <div class=\"grid-demo\">6/12</div>\n  </div>\n</div>\n<div class=\"layui-row\">\n  <div class=\"layui-col-xs3\">\n    <div class=\"grid-demo grid-demo-bg1\">3/12</div>\n  </div>\n  <div class=\"layui-col-xs3\">\n    <div class=\"grid-demo\">3/12</div>\n  </div>\n  <div class=\"layui-col-xs3\">\n    <div class=\"grid-demo grid-demo-bg1\">3/12</div>\n  </div>\n  <div class=\"layui-col-xs3\">\n    <div class=\"grid-demo\">3/12</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Copy Functionality in Layui\nDESCRIPTION: JavaScript code that enables copying of icon class names or unicode values to clipboard when users click on an icon in the documentation. It uses Layui's modules including jQuery, layer for notifications, lay for clipboard functionality, and util.\nSOURCE: https://github.com/layui/layui/blob/main/docs/icon/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.jquery;\n  var layer = layui.layer;\n  var lay = layui.lay;\n  var util = layui.util;\n  // click\n  $('.ws-docs-icon > div').on('click', function(e){\n    var elem = $(this);\n    var unicodeElem = elem.children('.docs-icon-code')\n    var classnameElem = elem.children('.docs-icon-fontclass')\n    var text = classnameElem.text();\n    var html = text;\n\n    if ($(e.target).is(unicodeElem)) {\n      text = unicodeElem.text();\n      html = unicodeElem.html();\n    }\n\n    lay.clipboard.writeText({\n      text: text,\n      done: function() {\n        layer.msg('已复制 '+ html, {\n          icon: 1,\n          offset: '5%',\n          anim: 'slideDown',\n          isOutAnim: false\n        });\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui laydate with Holiday and Workday Annotations in JavaScript\nDESCRIPTION: This snippet initializes a Layui laydate calendar for the input with ID 'ID-laydate-holidays', pre-setting its value and annotating official holidays and compensatory working days using the 'holidays' option. The holidays parameter takes arrays of date strings to distinguish between holidays and makeup days. This feature requires Layui v2.7.3 or later and the laydate module. It enhances the date picker by visually marking these special dates, improving user awareness of holiday schedules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/mark.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-holidays',\n  value: '2023-05-08',\n  holidays: [\n    ['2022-12-31', '2023-1-1', '2023-1-2', '2023-1-21', '2023-1-22', '2023-1-23', '2023-1-24', '2023-1-25', '2023-1-26', '2023-1-27', '2023-4-5', '2023-4-29', '2023-4-30', '2023-5-1', '2023-5-2', '2023-5-3', '2023-6-22', '2023-6-23', '2023-6-24', '2023-9-29', '2023-9-30', '2023-10-1', '2023-10-2', '2023-10-3', '2023-10-4', '2023-10-5', '2023-10-6'],\n    ['2023-1-28', '2023-1-29', '2023-4-23', '2023-5-6', '2023-6-25', '2023-10-7', '2023-10-8']\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Table Dropdown on Scroll (Layui)\nDESCRIPTION: Retrieves the table instance options and attaches a scroll event listener to the table's main scrollable container (`.layui-table-main`). When the table scrolls, it closes any dropdown menu identified by 'dropdown-table-tool' using `dropdown.close()`. This prevents the dropdown from becoming detached from its row during scrolling. Depends on the Layui `table` and `dropdown` modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/demo.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar tableInst = table.getOptions('test');\ntableInst.elem.next().find('.layui-table-main').on('scroll', function() {\n  dropdown.close('dropdown-table-tool');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the HTML Table Structure for Layui\nDESCRIPTION: Creates an empty HTML `<table>` element with the class `layui-hide` (initially hidden) and a specific ID (`ID-dropdown-demo-table`). This table serves as the container that will be dynamically populated and managed by the Layui table module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/table.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-dropdown-demo-table\"></table>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Table Row Tool Events with Dropdown\nDESCRIPTION: Sets up an event listener using `table.on('tool')` for the specific table instance (`ID-dropdown-demo-table`) to handle clicks on elements with `lay-event` attributes within the toolbar. If the event is 'edit', it uses `layer.prompt` to allow inline editing of the email field. If the event is 'more', it renders a dropdown menu using `dropdown.render`, attaching it to the clicked 'more' button (`elem: that`). The dropdown data, click handler (for actions like delete confirmation using `layer.confirm`), alignment, and style are configured dynamically.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/table.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 行工具事件\ntable.on('tool(ID-dropdown-demo-table)', function(obj){\n  var that = this; // The clicked element (<a> tag)\n  var data = obj.data; // Row data\n    \n  if(obj.event === 'edit'){\n    layer.prompt({\n      formType: 2,\n      value: data.email\n    }, function(value, index){\n      obj.update({\n        email: value\n      });\n      layer.close(index);\n    });\n  } else if(obj.event === 'more'){\n    // 更多下拉菜单\n    dropdown.render({\n      elem: that,\n      show: true, // 外部事件触发即显示\n      data: [{\n        title: 'item 1',\n        id: 'aaa'\n      }, {\n        title: 'item 2',\n        id: 'bbb'\n      }, {\n        title: '删除',\n        id: 'del'\n      }],\n      click: function(data, othis){\n        //根据 id 做出不同操作\n        if(data.id === 'del'){\n          layer.confirm('真的删除行么', function(index){\n            obj.del(); // Delete the table row\n            layer.close(index);\n          });\n        } else {\n          layer.msg('得到表格下拉菜单 id：'+ data.id);\n        }\n      },\n      align: 'right', // 右对齐弹出\n      style: 'box-shadow: 1px 1px 10px rgb(0 0 0 / 12%);' //设置额外样式\n    }) \n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Layui Extension Module in JavaScript\nDESCRIPTION: Example of defining a custom Layui module named 'testModule' within its own file (`testModule.js`). The module follows the standard Layui pattern using `layui.define` (optionally specifying dependencies) and `exports` to expose its public interface, in this case, an object with a `hello` method.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * 定义 testModule 模块\n **/\nlayui.define(function(exports){ // 也可以依赖其他模块\n  var obj = {\n    hello: function(str){\n      alert('Hello '+ (str || 'TestModule'));\n    }\n  };\n\n  // 输出 testModule 接口\n  exports('testModule', obj);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Upload Driver for Drag-and-Drop File Upload\nDESCRIPTION: This JavaScript snippet initializes the Layui upload component on a specified element, configures it with an upload URL (placeholder in this case), and sets a callback function to handle successful uploads by displaying a message and updating the image preview. Dependencies include the Layui library and its modules, and it assumes an existing DOM element with specified IDs.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/drag.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n  var $ = layui.$;\n\n  // Render upload component\n  upload.render({\n    elem: '#ID-upload-demo-drag',\n    url: '', // Replace with your upload API endpoint\n    done: function(res){\n      layer.msg('上传成功');\n      $('#ID-upload-demo-preview').removeClass('layui-hide')\n      .find('img').attr('src', res.files.file);\n      console.log(res)\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Navigation in Layui Laypage (JavaScript)\nDESCRIPTION: Configures laypage to show only the previous/next buttons and the current page number using the `layout` option (`['prev', 'page','next']`). It hides first/last buttons (`first: false`, `last: false`), limits displayed page numbers (`groups: 1`), and uses the `jump` callback with `layui.layer` for feedback on page change, skipping the initial render. Requires Layui, laypage, and layer modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-pn-show\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n  var layer = layui.layer;\n\n  // 只显示上一页、下一页、当前页\n  laypage.render({\n    elem: 'demo-laypage-pn-show',\n    count: 50,\n    groups: 1,\n    first: false,\n    last: false,\n    layout: ['prev', 'page','next'],\n    jump: function(obj, first){\n      // 首次不执行\n      if(!first){\n        layer.msg('第 '+ obj.curr +' 页');\n      }\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Buttons - HTML\nDESCRIPTION: This snippet demonstrates how to add icons to Layui buttons using the layui-icon class. It showcases different icon styles and sizes. The snippet also includes different colored icon buttons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn\">\n    按钮 <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn\">\n    <i class=\"layui-icon layui-icon-left\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn\">\n    <i class=\"layui-icon layui-icon-right\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn\">\n    <i class=\"layui-icon layui-icon-edit\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn\">\n    <i class=\"layui-icon layui-icon-share\"></i>\n  </button>\n</div>\n\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-primary\">\n    <i class=\"layui-icon layui-icon-left\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-primary\">\n    <i class=\"layui-icon layui-icon-right\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-primary\">\n    <i class=\"layui-icon layui-icon-edit\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-primary\">\n    <i class=\"layui-icon layui-icon-delete\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-primary\">\n    <i class=\"layui-icon layui-icon-share\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-disabled\">\n    <i class=\"layui-icon layui-icon-delete\"></i>\n  </button>\n  \n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-normal\">\n    <i class=\"layui-icon layui-icon-left\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-warm\">\n    <i class=\"layui-icon layui-icon-right\"></i>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-danger\">\n    <i class=\"layui-icon layui-icon-edit\"></i>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Get Checked Status in TreeTable - JavaScript\nDESCRIPTION: This snippet shows how to retrieve the checked status of rows in a Layui TreeTable. The `checkStatus` function returns information about selected rows, with an option to include half-checked rows.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\ntreeTable.checkStatus('test', true);  // 包含半选 \n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Rate with Custom Theme Color in JavaScript\nDESCRIPTION: Shows how to apply a custom color theme to the Layui rate component using the `theme` option. This example uses `lay-options` attributes on the HTML elements for configuration and renders multiple instances simultaneously using a class selector. Requires the Layui library and div elements with `lay-options` attributes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"class-rate-demo-theme\" lay-options=\"{value: 3, theme: '#FF8000'}\"></div>\n<hr>\n<div class=\"class-rate-demo-theme\" lay-options=\"{value: 3, theme: '#FE0000'}\"></div>\n<hr>\n<div class=\"class-rate-demo-theme\" lay-options=\"{value: 2.5, theme: '#1E9FFF', half: true}\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 批量渲染\n  rate.render({\n    elem: '.class-rate-demo-theme'\n    // theme: '#FF8000' // 自定义主题色\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Labels in Layui Code Component\nDESCRIPTION: JavaScript configuration for customizing the default text labels used in the code and preview sections of the Layui Code component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntext: {\n  code: '代码栏标题', // 默认:  </>\n  preview: '预览栏标题' // 默认: Preview\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Data with Layui Table (JavaScript)\nDESCRIPTION: Explains how to use `table.exportFile(id, data, opts)` to export data. It can export the data of an existing table instance by providing its ID or export custom data defined by header and row arrays. Options like file type (`csv`, `xls`) and title can be specified.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 外部导出对应 table 的数据\ntable.exportFile('test');\n \n// 导出自定义数据\ntable.exportFile(['名字','性别','年龄'], [\n  ['张三','男','20'],\n  ['李四','女','18'],\n  ['王五','女','19']\n], {\n  type: 'csv', // 导出的文件格式，支持: csv,xls\n  title: '导出的文件标题'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Layui Slider\nDESCRIPTION: Demonstrates how to create a disabled slider with Layui. The slider is rendered in a non-interactive state with a preset value.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-disabled\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-disabled',\n    value: 35,\n    disabled: true // 禁用滑块\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Datetime Picker in JavaScript\nDESCRIPTION: Creates a datetime picker input using Layui's laydate.render() with the 'datetime' type for the element with id 'ID-laydate-type-datetime'. This allows users to select both date and time in the format 'yyyy-MM-dd HH:mm:ss'. It requires the layui.laydate module to be loaded.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-type-datetime',\n  type: 'datetime'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Layouts for Layui Laypage Components (JavaScript)\nDESCRIPTION: Shows how to control the arrangement and visibility of pagination elements (limit selector, prev/next buttons, page numbers, count display) using the `layout` array option. Three examples demonstrate different combinations. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-layout-1\"></div>\n<div id=\"demo-laypage-layout-2\"></div>\n<div id=\"demo-laypage-layout-3\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 自定义排版\n  laypage.render({\n    elem: 'demo-laypage-layout-1',\n    count: 1000,\n    layout: ['limit', 'prev', 'page', 'next']\n  });\n  laypage.render({\n    elem: 'demo-laypage-layout-2',\n    count: 1000,\n    layout: ['prev', 'next', 'page']\n  });\n  laypage.render({\n    elem: 'demo-laypage-layout-3',\n    count: 1000,\n    layout: ['page', 'count']\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Template Internal Variables with extendVars (JavaScript)\nDESCRIPTION: Explains how to use `laytpl.extendVars()` (available since v2.11+) to add custom functions or variables that become available within all `laytpl` templates. This example adds a `toDataString` function for date formatting and notes the possibility of overriding built-in functions like `include`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// 扩展模板内部变量\nlaytpl.extendVars({\n  // 重构 include 方法，实现引入模板文件\n  include: function(filename, data) {\n    // …\n  },\n  // 添加 toDataString 方法\n  toDataString: function(date) {\n    date = date || new Date();\n    return new Date(date).toLocaleDateString();\n  }\n});\n\n// 在模板中使用扩展的变量\nvar templateInst = laytpl('日期：{{= toDataString(d.time) }}');\ntemplateInst.render({ time: 1742745600000 }, function(html) {\n  console.log(html);\n});\n```\n\n----------------------------------------\n\nTITLE: Flow Module Done Callback Function\nDESCRIPTION: This code snippet demonstrates the `done` callback function within the layui flow module.  The `done` function is executed when the scroll reaches the defined threshold. It receives the current page number and a callback function (`next`).  `next` renders the next page, and takes two parameters: the HTML content to append, and a boolean that controls the visibility of the \"load more\" button. If there are no more pages to load, the \"load more\" button will disappear.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndone: function(page, next){\n  console.log(page) // 获得当前页\n  \n  // 执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页\n  // 只有当前页小于总页数的情况下，才会继续出现加载更多\n  next('列表 HTML 片段', page < res.pages); \n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Progress Values with element.progress() in JavaScript\nDESCRIPTION: Enables changing the progress bar's percentage dynamically by calling element.progress(filter, percent). Demonstrates an example with buttons that set static or animated loading progress updates.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nlayui.use(function(){\n  var element = layui.element;\n  var util = layui.util;\n\n  // Set progress to 50%\n  util.on('lay-on', {\n    // Set progress to 50%\n    setPercent: function(){\n      element.progress('demo-filter-progress', '50%');\n    },\n    // Simulate loading progress\n    loading: function(othis){\n      var DISABLED = 'layui-btn-disabled';\n      if(othis.hasClass(DISABLED)) return;\n\n      var n = 0;\n      var timer = setInterval(function(){\n        n = n + Math.random()*10|0;  \n        if(n>100){\n          n = 100;\n          clearInterval(timer);\n          othis.removeClass(DISABLED);\n        }\n        element.progress('demo-filter-progress', n+'%');\n      }, 300+Math.random()*1000);\n      othis.addClass(DISABLED);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Layui Countdown Timer in JavaScript\nDESCRIPTION: Implements a countdown timer using Layui's util.countdown method. It displays the remaining time until a target date in days, hours, minutes, and seconds format, with options to reset the target date through a date picker.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 倒计时\nvar countdown = util.countdown({\n  date: '2099-12-31 00:00:00', // 目标时间值\n  now: new Date(), // 当前时间，一般为服务器时间，此处以本地时间为例\n  ready: function(){ // 初始操作\n    clearTimeout(util.countdown.timer); // 清除旧定时器，防止多次渲染时重复执行。实际使用时不常用\n  },\n  clock: function(obj, inst){  // 计时中\n    var str = [obj.d,'天',obj.h,'时',obj.m,'分',obj.s,'秒'].join(' ');\n    lay('#test2').html(str);\n    util.countdown.timer = inst.timer; // 记录当前定时器，以便在重复渲染时清除。实际使用时不常用\n  },\n  done: function(obj, inst){ // 计时完成\n    layer.msg('Time is up');\n  }\n});\n// 重置倒计时\nlaydate.render({\n  elem: '#test1',\n  type: 'datetime',\n  done: function(value){\n    countdown.reload({\n      date: value\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Layui Layer Offset JavaScript\nDESCRIPTION: This JavaScript code snippet initializes Layui and uses the `layui.use` function to load the necessary Layui modules (layer, util, and $). It then uses `util.on` to bind a click event to the buttons with the `lay-on=\"test-offset\"` attribute. When a button is clicked, it retrieves the `data-offset` value and opens a Layui layer with the specified offset. If no offset is provided, default values ['200px', '280px'] are used.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/offset.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n  var $ = layui.$;\n\n  // 事件\n  util.on('lay-on', {\n    'test-offset': function(){\n      var othis = $(this);\n      var offset = othis.data('offset');\n      // 弹出位置\n      layer.open({\n        type: 1,\n        offset: offset || ['200px', '280px'], // 详细可参考 offset 属性\n        id: 'ID-demo-layer-offset-'+ offset, // 防止重复弹出\n        content: '<div style=\"padding: 16px;\">'+ othis.text() +'</div>',\n        area: '240px',\n        btn: '关闭全部',\n        btnAlign: 'c', // 按钮居中\n        shade: 0, // 不显示遮罩\n        yes: function(){\n          layer.closeAll();\n        }\n      });\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Colors\nDESCRIPTION: This snippet demonstrates how to use predefined colors in the Layui Colorpicker.  The `predefine: true` option enables the predefined color palette.  The example shows how to use the default predefined colors and how to specify custom predefined colors using the `colors` option.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-colorpicker-demo-predefine-1\"></div>\n<div id=\"ID-colorpicker-demo-predefine-2\" style=\"margin-left: 16px;\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n\n  // 渲染\n  colorpicker.render({ // eg1\n    elem: '#ID-colorpicker-demo-predefine-1',\n    color: '#c71585',\n    predefine: true // 开启预定义颜色\n  });\n  colorpicker.render({ // eg2\n    elem: '#ID-colorpicker-demo-predefine-2',\n    color: '#9d8a0e',\n    predefine: true, // 开启预定义颜色\n    colors: ['#ff8c00','#00ced1','#9d8a0e'] //自定义预定义颜色项\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Template in Layui Table Using Selector\nDESCRIPTION: Demonstrates how to define a custom template for table cells using a selector reference. The template follows laytpl syntax and allows accessing row data via the 'd' parameter.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.cols.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"TPL-demo-title\">\n  <a href=\"/detail/{{= d.id }}\" class=\"layui-table-link\">\n    {{= d.title }} \n  </a>\n</script>\n \n<!-- \n模板中的 `d` 不仅包含当前行数据，还包含特定字段，如：\n{{= d.LAY_INDEX }} {{= d.LAY_COL }} 等 \n-->\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.render({\n  cols: [[\n    {field: 'title', templet: '#TPL-demo-title'}\n    // …\n  ]],\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Layui Carousel Component\nDESCRIPTION: This snippet shows how to reload an existing Layui carousel instance using the `inst.reload()` method.  This allows modification of carousel settings after initial rendering without needing to destroy and re-create the component.  It's essential for dynamically updating the carousel's appearance and behavior, using the `options` parameter to configure it.\nSOURCE: https://github.com/layui/layui/blob/main/docs/carousel/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar inst = carousel.render(options); // 轮播初始渲染\ninst.reload(options); // 轮播重载\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tabs Structure with Layui in HTML\nDESCRIPTION: This code creates a hierarchical tabs interface using Layui's tab component system. It features a parent tab container with three main tabs, where the first two tabs contain their own child tab structures. The implementation uses lay-options with headerMode set to 'normal' for styling consistency.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/nest.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-tabs-card\" lay-options=\"{headerMode:'normal'}\">\n  <ul class=\"layui-tabs-header\">\n    <li class=\"layui-this\">标题1</li>\n    <li>标题2</li>\n    <li>标题3</li>\n  </ul>\n  <div class=\"layui-tabs-body\" style=\"padding: 16px;\">\n    <div class=\"layui-tabs-item layui-show\">\n      <div class=\"layui-tabs\" lay-options=\"{headerMode:'normal'}\">\n        <ul class=\"layui-tabs-header\">\n          <li class=\"layui-this\">标题 1-1</li>\n          <li>标题 1-2</li>\n        </ul>\n        <div class=\"layui-tabs-body\">\n          <div class=\"layui-tabs-item layui-show\">1-1</div>\n          <div class=\"layui-tabs-item\">1-2</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-tabs-item\">\n      <div class=\"layui-tabs\" lay-options=\"{headerMode:'normal'}\">\n        <ul class=\"layui-tabs-header\">\n          <li class=\"layui-this\">标题 2-1</li>\n          <li>标题 2-2</li>\n          <li>标题 2-3</li>\n        </ul>\n        <div class=\"layui-tabs-body\">\n          <div class=\"layui-tabs-item layui-show\">2-1</div>\n          <div class=\"layui-tabs-item\">2-2</div>\n          <div class=\"layui-tabs-item\">2-3</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-tabs-item\">3</div>\n    <div class=\"layui-tabs-item\">4</div>\n    <div class=\"layui-tabs-item\">5</div>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Handling Error Callbacks in Layui Table\nDESCRIPTION: Shows how to implement the error callback function that executes when data requests fail, providing access to the error object and message.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror: function(e, msg) {\n  console.log(e, msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom-Trigger Dropdown Menus with Layui JavaScript\nDESCRIPTION: This JavaScript snippet initializes dropdown menus for all elements with the 'demo-dropdown-on' class using Layui's dropdown module. It reads the trigger type from each element's 'lay-options' attribute and sets up menu data with three items. Dependencies include the Layui framework and the dropdown module. The snippet expects valid Layui HTML elements and will render dropdown menus in response to configured user events, with outputs consisting of menu actions corresponding to item IDs.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/on.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  \n  // 自定义事件\n  dropdown.render({\n    elem: '.demo-dropdown-on',\n    // trigger: 'click' // trigger 已配置在元素 `lay-options` 属性上\n    data: [{\n      title: 'menu item 1',\n      id: 100\n    },{\n      title: 'menu item 2',\n      id: 101\n    },{\n      title: 'menu item 3',\n      id: 102\n    }]\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: API Overview for layui Progress Module\nDESCRIPTION: Summarizes the JavaScript API functions provided by layui for rendering and controlling progress bars, including module initialization, rendering, and dynamic progress updates.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Creating Fieldset Elements in Layui\nDESCRIPTION: Shows how to implement fieldset elements in Layui with two variations: a complete fieldset with content box and a title-only fieldset that displays just a horizontal line with a title. Uses 'layui-elem-field' and 'layui-field-title' classes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/auxiliar/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<fieldset class=\"layui-elem-field\">\n  <legend>标题</legend>\n  <div class=\"layui-field-box\">\n    任意内容\n  </div>\n</fieldset>\n \n<hr class=\"ws-space-16\">\n \n<fieldset class=\"layui-elem-field layui-field-title\">\n  <legend>仅显示标题水平线</legend>\n</fieldset>\n内容写在外面\n```\n\n----------------------------------------\n\nTITLE: Initializing Countdown Timer with Layui util.countdown - JavaScript\nDESCRIPTION: Demonstrates how to initialize a countdown timer using the util.countdown method from Layui. Requires the Layui framework and the util module. The options parameter should include the target date, the current time (usually from the server), and callback functions for both ticking and completion events. The countdown instance allows clearing or restarting the timer, with each tick providing detailed breakdowns of remaining time.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('util', function(){\n  var util = layui.util;\n  // 示例\n  util.countdown({\n    date: '2099-1-1', // 目标时间值\n    now: new Date(), // 当前时间，一般为服务器时间，此处以本地时间为例\n    clock: function(obj, countdown){ // 计时中\n      console.log(obj); // 得到当前计时器的「天、时、分、秒」值\n      console.log(countdown); // 得到当前实例对象\n    },\n    done: function(obj, countdown){ // 计时完成\n      console.log('time is up');\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui laydate Calendar with Gregorian Festivals in JavaScript\nDESCRIPTION: This snippet initializes a Layui laydate date picker on the HTML input element with ID 'ID-laydate-calendar', enabling the display of Gregorian calendar festivals. It depends on the Layui framework and requires the laydate module. The key parameter 'calendar: true' activates festival marking on corresponding dates in the date picker, enhancing the standard date selection UI. The snippet outputs an interactive date input with festival annotations but does not support custom event handlers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/mark.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-calendar',\n  calendar: true\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Tag-Style Checkbox and Radio Components with Layui - CSS\nDESCRIPTION: This CSS code defines styles for tag-like checkboxes and radio buttons, providing a pill-shaped appearance and distinct coloring for checked states within Layui forms. It makes use of border-radius and background-color adjustments to enhance the tag effect. No external dependencies are needed except for proper Layui HTML structure.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkboxAndRadio.style.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.layui-form-radio>.lay-skin-tag,\n.layui-form-checkbox>.lay-skin-tag {\n  font-size: 13px;\n  border-radius: 100px;\n}\n\n.layui-form-checked>.lay-skin-tag,\n.layui-form-radioed>.lay-skin-tag {\n  color: #fff !important;\n  background-color: #16b777 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Month Range - JavaScript\nDESCRIPTION: This code initializes a month range picker using Layui's laydate module. It requires the Layui library to be loaded. It sets the `elem` to the container element, sets the `type` parameter to 'month' for month selection, and the `range` to true for selecting a range of months. The output is a range selection interface for selecting a range of months.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-range-month',\n  type: 'month',\n  range: true\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Transfer Component in Layui\nDESCRIPTION: This code showcases how to reload a previously rendered `transfer` instance using `transfer.reload()`. It uses the instance's ID (`id`) to target the specific component and applies new configuration `options`.  This allows for dynamic updates to the transfer component after its initial rendering, such as changing titles.  This snippet relies on the Layui library and a pre-existing transfer component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar transfer = layui.transfer;\n\n// 渲染\ntransfer.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 重载\ntransfer.reload('test', { // options\n  title: ['title 1', 'title 2']\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Time Ago with Layui util.timeAgo - JavaScript\nDESCRIPTION: Shows how to retrieve a human-readable time difference for a provided date or timestamp using util.timeAgo. This function requires Layui's util module and returns strings such as 'just now', 'X minutes ago', or formatted dates, depending on the elapsed time. Accepts time (as number or Date object) and an optional onlyDate flag to control output type.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = util.timeAgo(1672531200000); // 2023-01-01 00:00:00\n```\n\n----------------------------------------\n\nTITLE: Initializing FullPanel Layui Datetime Picker in JavaScript\nDESCRIPTION: Implements a combined date and time picker with enhanced UI using Layui's laydate.render() 'datetime' type and the 'fullPanel' option set to true. Applied to the input element with id 'ID-laydate-type-datetime-1', this feature requires Layui version 2.8 or higher and renders both date and time selection controls simultaneously.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-type-datetime-1',\n  type: 'datetime',\n  fullPanel: true // 2.8+\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Layui Tabs (HTML)\nDESCRIPTION: This HTML snippet defines the structure for a set of Layui tabs. It includes a tab header with multiple list items, each representing a tab and its corresponding title. The `lay-id` attribute is used to uniquely identify each tab, and the `href` attribute within the `<a>` tag links to a specific hash fragment. This fragment will determine the initially active tab via JavaScript.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/hash.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-hide-v\" id=\"demoTabs-hash\">\n  <ul class=\"layui-tabs-header\">\n    <li lay-id=\"A1\" class=\"layui-this\"><a href=\"#A1\">标题题题题题题1</a></li>\n    <li lay-id=\"A2\"><a href=\"#A2\">标题题题2</a></li>\n    <li lay-id=\"A3\"><a href=\"#A3\">标题3</a></li>\n    <li lay-id=\"A4\"><a href=\"#A4\">标题题题题题题题4</a></li>\n    <li lay-id=\"A5\"><a href=\"#A5\">标题5</a></li>\n    <li lay-id=\"A6\"><a href=\"#A6\">标题6</a></li>\n    <li lay-id=\"A7\"><a href=\"#A7\">标题7</a></li>\n    <li lay-id=\"A8\"><a href=\"#A8\">标题题题题题题题8</a></li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Carousel with Change Callback - Layui\nDESCRIPTION: This code snippet demonstrates how to initialize a Layui carousel with a `change` callback function. The callback function is triggered after each slide transition and provides information about the current and previous slides.\nSOURCE: https://github.com/layui/layui/blob/main/docs/carousel/detail/options.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.render({\n  elem: '#id',\n  change: function(obj){\n    console.log(obj.index); // 当前条目的索引\n    console.log(obj.prevIndex); // 上一个条目的索引\n    console.log(obj.item); // 当前条目的元素对象\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Search Form with Layui UI Components in HTML\nDESCRIPTION: This HTML snippet defines a search form with three input fields, each decorated with Layui classes for consistent styling. The fields include two text inputs (one with an icon prefix) and one read-only date input integrated with the Layui date picker. Buttons are provided for submitting the form and resetting input fields, using Layui's styling and attributes to trigger JavaScript events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/search.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form layui-row layui-col-space16\">\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <div class=\"layui-input-prefix\">\n        <i class=\"layui-icon layui-icon-username\"></i>\n      </div>\n      <input type=\"text\" name=\"A\" value=\"\" placeholder=\"Field A\" class=\"layui-input\" lay-affix=\"clear\">\n    </div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <input type=\"text\" name=\"B\" placeholder=\"Field B\" lay-affix=\"clear\" class=\"layui-input\">\n    </div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"layui-input-wrap\">\n      <div class=\"layui-input-prefix\">\n        <i class=\"layui-icon layui-icon-date\"></i>\n      </div>\n      <input type=\"text\" name=\"C\" readonly placeholder=\"Field C\" class=\"layui-input demo-table-search-date\">\n    </div>\n  </div>  \n  <div class=\"layui-btn-container layui-col-xs12\">\n    <button class=\"layui-btn\" lay-submit lay-filter=\"demo-table-search\">Search</button>\n    <button type=\"reset\" class=\"layui-btn layui-btn-primary\">Clear</button>\n  </div>\n</form>\n\n<table class=\"layui-hide\" id=\"ID-table-demo-search\"></table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Form Settings in Layui\nDESCRIPTION: This example shows how to use form.set() to configure global form settings. The example demonstrates setting the autocomplete attribute to 'off' for all input elements within forms.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.set({\n  autocomplete: 'off' // 阻止 input 框默认的自动输入完成功能\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Menu Trigger and Alignment - JavaScript\nDESCRIPTION: Defines how the dropdown menu is triggered and positioned relative to the bound element. The 'trigger' option accepts any standard event such as 'click' (default), 'hover', 'mousedown', or 'contextmenu' to activate the menu. The 'align' property controls horizontal alignment of the dropdown panel relative to the target element, supporting 'left' (default), 'center', and 'right'. These options help customize user interaction and visual presentation of the dropdown component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example config snippet\n{\n  trigger: 'click', // event to open dropdown (click by default)\n  align: 'left'    // dropdown aligns left relative to bound element\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source and Data Handling in layui TreeTable (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define data-related properties such as using simple flat data, setting the root parent ID value, and configuring cascade selection behavior for checkboxes within the TreeTable. These options enable flexible integration with different data formats and hierarchical selection logic.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: {\n    data: {\n      isSimpleData: false,\n      rootPid: null,\n      cascade: 'all'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Transfer Component in Layui\nDESCRIPTION: This snippet demonstrates how to render the `transfer` component using `transfer.render()`.  It defines the element to bind to and a custom ID for identification.  The `options` parameter is used for further customization.  It's a fundamental operation for initializing the transfer component within a Layui environment.  This example requires the Layui library.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar transfer = layui.transfer;\n\n// 渲染\ntransfer.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Accordion Effect on Layui Collapse Panel in HTML\nDESCRIPTION: Shows how to enable the accordion feature on a collapsible panel by adding the \"lay-accordion\" attribute to the collapse container. This makes only one item open at a time, closing others upon expanding a new panel. The snippet contains multiple collapsible items with titles and content in different languages, demonstrating the interactive accordion behavior. Requires Layui JS to render the accordion effect properly.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-collapse\" lay-accordion>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">layui 主要面向哪些用户群体？</div>\n    <div class=\"layui-colla-content layui-show\">\n      Layui 作为一个前端界面组件库，但面向的却主要是后端开发者。\n      <br>即无需涉足各类构建工具，只需面向浏览器本身，便可将页面所需呈现的元素与交互信手拈来。\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">为什么我的眼里常含泪水？</div>\n    <div class=\"layui-colla-content\">\n      <p>因为我对这片土地爱的深沉。</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Why are my eyes always brimming with tears?</div>\n    <div class=\"layui-colla-content\">\n      <p>Because I love this land so deeply…</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">一个折叠面板的标题？</div>\n    <div class=\"layui-colla-content\">\n      <p>一个折叠面板的内容。</p>\n    </div>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Time Picker in JavaScript\nDESCRIPTION: Sets up a time picker interface utilizing Layui's laydate.render() with the 'time' type for the input field identified by 'ID-laydate-type-time'. This configuration allows time selection in 'HH:mm:ss' format and depends on Layui's date module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-type-time',\n  type: 'time'\n});\n```\n\n----------------------------------------\n\nTITLE: Including Custom Event Handling Example for Dropdown\nDESCRIPTION: Shows how to include a script or setup for handling custom events triggered by dropdown interactions. Uses `/dropdown/examples/on.md` template and assumes event handling logic exists within the included file.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/on.md\") }}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Layui Template Demo\nDESCRIPTION: The HTML structure for the template demo with split panels for template code, data input, and result preview with tabs for viewing rendered output and source code.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-xs6 laytpl-demo\">\n    <div>\n      <div style=\"cursor: pointer;\" id=\"ID-tpl-src-title\">\n        <strong>模板（旧版本）</strong>\n        <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n      </div>\n    </div>\n    &lt;textarea id=\"ID-tpl-src\"&gt;&lt;/textarea>\n  </div>\n  <div class=\"layui-col-xs6 laytpl-demo\">\n    <div><strong>数据</strong></div>\n    &lt;textarea id=\"ID-tpl-data\"&gt;\n{\n  \"title\": \"Layui 常用组件\",\n  \"desc\": \"<a style=\\\"color:blue;\\\">一段带 HTML 的内容</a>\",\n  \"list\": [\n    {\n      \"title\": \"弹层\",\n      \"name\": \"layer\"\n    },\n    {\n      \"title\": \"表单\",\n      \"name\": \"form\"\n    },\n    {\n      \"title\": \"表格\",\n      \"name\": \"table\"\n    },\n    {\n      \"title\": \"日期选择器\",\n      \"name\": \"laydate\"\n    },\n    {\n      \"title\": \"标签页\",\n      \"name\": \"tabs\"\n    }\n  ]\n}\n    &lt;/textarea&gt;\n  </div>\n  <div class=\"layui-col-xs12 laytpl-demo\" style=\"border-top: none;\">\n    <div class=\"layui-row\">\n      <div class=\"layui-col-xs6 layui-tabs\" id=\"ID-tpl-view-header\">\n        <ul class=\"layui-tabs-header\">\n          <li><strong>渲染结果</strong></li>\n          <li><strong>源码</strong></li>\n        </ul>\n      </div>\n      <div class=\"layui-col-xs6\" style=\"text-align: right\">\n        <span class=\"layui-badge\" id=\"ID-tpl-view-time\"></span>\n      </div>\n    </div>\n    <div id=\"ID-tpl-view-body\">\n      <div class=\"layui-show layui-padding-3 layui-text\" id=\"ID-tpl-view\"></div>\n      <div><pre id=\"ID-tpl-view-code\"></pre></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding Colorpicker to Multiple Elements\nDESCRIPTION: This snippet demonstrates how to bind a single Layui Colorpicker to multiple elements using a CSS class.  The `elem` option is set to a CSS class selector, and the colorpicker is initialized for all elements with that class.  Each element can have its own initial color defined using the `lay-options` attribute.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"demo-class-colorpicker\" lay-options=\"{color: '#FF0000'}\"></div>\n<div class=\"demo-class-colorpicker\" lay-options=\"{color: '#008000'}\"></div>\n<div class=\"demo-class-colorpicker\" lay-options=\"{color: '#0000FF'}\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n\n  // 渲染\n  colorpicker.render({\n    elem: '.demo-class-colorpicker',\n    done: function(color){\n      console.log(this.elem, color);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Tab Header Element in Layui Tabs (JavaScript)\nDESCRIPTION: Shows how to retrieve the DOM element for a specific tab's header within a Layui tabs instance ('test') using the `tabs.getHeaderItem()` method. Requires the instance ID and the target tab's index or `lay-id`. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar headerItem = tabs.getHeaderItem('test', 3); // 获取索引为 3 的标签头部项元素\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Upload Component with Size Limit\nDESCRIPTION: This JavaScript code initializes the Layui upload component, configuring it to upload files via a button with the ID 'ID-upload-demo-size'. It sets a file size limit of 60KB and displays a success message upon completion of the upload. It requires the Layui framework to be included in the page.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/size.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var upload = layui.upload;\n  var layer = layui.layer;\n  \n  // 渲染\n  upload.render({\n    elem: '#ID-upload-demo-size',\n    url: '', // 此处配置你自己的上传接口即可\n    size: 60, // 限制文件大小，单位 KB\n    done: function(res){\n      layer.msg('上传成功');\n      console.log(res);\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Re-executing a Layui Module Definition Callback in JavaScript\nDESCRIPTION: Demonstrates how to re-run the callback function originally provided to `layui.define` for a specific module ('demo'). This is achieved by passing the result of `layui.factory('demo')` (which returns the definition callback) as the callback function to `layui.use('demo', ...)`. This technique is often useful in single-page applications where module initialization needs to run again when a view is re-rendered.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// 在单页面视图碎片渲染时，再次调用「定义模块」时的 `callback`\nlayui.use('demo', layui.factory('demo'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Menu Templates and Content - JavaScript\nDESCRIPTION: Allows overriding the menu's default HTML structure through the 'templet' and 'content' options. The 'templet' option supports either a string with HTML markup using laytpl template syntax or a function returning custom HTML for each menu item. The 'content' option lets developers provide completely custom HTML content to replace the menu structure. This enables flexible theming and content customization beyond default styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntemplet: function(d) {\n  return '<i class=\"layui-icon layui-icon-tips\"></i> ' + d.title;\n}\n```\n\n----------------------------------------\n\nTITLE: 实现输入框前缀和后缀固定修饰结构 - HTML\nDESCRIPTION: 该结构展示使用 class=\"layui-input-wrap\" 容器的输入框点缀方式，前缀和后缀元素宽度固定且元素不可交互，仅作用为纯装饰。输入框本体可获得全部交互焦点，适用于需要图标或元素固定显示但不影响输入交互的场景。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-input-wrap\">\n  <div class=\"layui-input-prefix\">前缀图标</div>\n  <input type=\"text\" class=\"layui-input\">\n  <div class=\"layui-input-suffix\">后缀图标</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Transfer Component Instance Methods in Layui\nDESCRIPTION: Demonstrates how to use instance methods to interact with the transfer component programmatically. Shows how to get right-side data and reload the component with new settings.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn\" lay-on=\"getData\">获取右侧数据</button>\n  <button type=\"button\" class=\"layui-btn\" lay-on=\"reload\">重载实例</button>\n</div>\n<div id=\"ID-transfer-demo-inst\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n  var util = layui.util;\n  var layer = layui.layer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"李白\"},\n    {\"value\": \"2\", \"title\": \"杜甫\"},\n    {\"value\": \"3\", \"title\": \"苏轼\"},\n    {\"value\": \"4\", \"title\": \"李清照\"},\n    {\"value\": \"5\", \"title\": \"鲁迅\", \"disabled\": true},\n    {\"value\": \"6\", \"title\": \"巴金\"},\n    {\"value\": \"7\", \"title\": \"冰心\"},\n    {\"value\": \"8\", \"title\": \"矛盾\"},\n    {\"value\": \"9\", \"title\": \"贤心\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-inst',\n    data: data,\n    id: 'demo-inst' // 定义唯一索引\n  });\n\n  // 批量事件\n  util.on('lay-on', {\n    getData: function(othis){\n      var getData = transfer.getData('demo-inst'); // 获取右侧数据\n      layer.alert(JSON.stringify(getData)); \n    },\n    reload:function(){\n      //实例重载\n      transfer.reload('demo-inst', {\n        title: ['文人', '喜欢的文人'],\n        value: ['2', '5', '9'],\n        showSearch: true\n      })\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Output Escaping with Layui Template Tag {{= }} in JavaScript\nDESCRIPTION: Uses the {{= }} tag to perform escaped output of data fields within Layui templates, ensuring that any HTML content within the field is properly escaped to prevent XSS vulnerabilities. No additional dependencies are required beyond the Layui templating engine. Input is typically a data object with fields, and the output is the sanitized string suitable for HTML rendering. This tag ensures HTML inside data is not rendered literally.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{= variable }}\n```\n\n----------------------------------------\n\nTITLE: Setting Colorpicker Size\nDESCRIPTION: This snippet shows how to set the size of the Layui Colorpicker.  The `size` option can be set to `'lg'`, `'sm'` (default), or `'xs'` to specify the size of the color picker. Different sizes can be chosen to suit various layout requirements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-colorpicker-demo-size-lg\"></div>\n<div id=\"ID-colorpicker-demo-size-sm\" style=\"margin-left: 16px;\"></div>\n<div id=\"ID-colorpicker-demo-size-xs\" style=\"margin-left: 16px;\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n\n  // 渲染\n  colorpicker.render({\n    elem: '#ID-colorpicker-demo-size-lg',\n    size: 'lg' // 大号下拉框\n  });\n  colorpicker.render({\n    elem: '#ID-colorpicker-demo-size-sm'\n    //,size: 'sm' // 默认 sm\n  });\n  colorpicker.render({\n    elem: '#ID-colorpicker-demo-size-xs',\n    size: 'xs' // mini 下拉框\n  });  \n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Dynamic Data to File Upload (Layui) - JavaScript\nDESCRIPTION: Illustrates providing dynamic parameter values via functions in the 'data' object for file uploads in Layui. Each function receives context (e.g., file index, file object) and can compute or retrieve data at upload time; compatible with Layui 2.9.3+. Limitations: parameterization is ineffective in unified:true mode and in IE8/9.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata: {\n  id: function(){\n    return $('#id').val();\n  },\n  id2: function(index, file){ // 参数支持。2.9.3+ \n    // 注：当 unified:true 和 ie8/9 下，参数无效\n    console.log(index); // 得到文件索引\n    console.log(file); // 得到文件对象\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Card Panels with Layui Grid System in HTML\nDESCRIPTION: Illustrates usage of card-style panels inside a gray background container with padding. It uses Layui's grid classes (layui-row, layui-col-md6) to layout two cards side-by-side responsively. Each card contains a header and body section that describes panel usage. This markup supports responsive layouts and uses predefined CSS classes from Layui without any JavaScript dependencies.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-bg-gray\" style=\"padding: 16px;\">\n  <div class=\"layui-row layui-col-space15\">\n    <div class=\"layui-col-md6\">\n      <div class=\"layui-card\">\n        <div class=\"layui-card-header\">卡片面板</div>\n        <div class=\"layui-card-body\">\n          卡片式面板面板通常用于非白色背景色的主体内<br>\n          从而映衬出边框投影\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-md6\">\n      <div class=\"layui-card\">\n        <div class=\"layui-card-header\">卡片面板</div>\n        <div class=\"layui-card-body\">\n          结合 layui 的栅格系统<br>\n          轻松实现响应式布局\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Fluid (Full-width) Layui Grids - HTML\nDESCRIPTION: This snippet presents the use of Layui's grid system to create fluid, full-width containers that automatically adapt column widths based on the device or parent container size. Only \"layui-row\" and \"layui-col-sm*\" classes are involved, with equal width division among columns. Layui CSS is mandatory; outputs are rows with device-responsive full-width columns.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-sm3\">\n    <div class=\"grid-demo grid-demo-bg1\">25%</div>\n  </div>\n  <div class=\"layui-col-sm3\">\n    <div class=\"grid-demo\">25%</div>\n  </div>\n  <div class=\"layui-col-sm3\">\n    <div class=\"grid-demo grid-demo-bg1\">25%</div>\n  </div>\n  <div class=\"layui-col-sm3\">\n    <div class=\"grid-demo\">25%</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Binding Layui Tabs Functionality to Custom Elements in JavaScript\nDESCRIPTION: Illustrates applying Layui tabs functionality to arbitrary HTML elements using `tabs.render()`. This method requires specifying CSS selectors for the main container (`elem`), the header container and its list items (`header`), and the body container and its list items (`body`). Requires the Layui framework and `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 给任意元素绑定 Tab 功能\ntabs.render({\n  elem: '#demoTabs3', // 目标主容器选择器\n  header: ['#demoTabsHeader', '>button'], // 标签头部主元素选择器、标签头部列表选择器\n  body: ['#demoTabsBody', '>.test-item'] // 标签内容主元素选择器、标签内容列表选择器\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Constants in Layui - JavaScript\nDESCRIPTION: Defines a set of immutable constants associated with the component, such as CSS class names. The constants are stored in an object within the component definition and can be accessed via `component.CONST`. This pattern centralizes fixed string values for ease of maintenance and reuse.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nCONST: {\n  ELEM: 'layui-tabs'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload Buttons with Layui Classes (HTML)\nDESCRIPTION: This HTML snippet defines two buttons using Layui CSS classes (`layui-btn`, `layui-btn-normal`). The first button (`#ID-upload-demo-choose`) is intended for file selection, and the second button (`#ID-upload-demo-action`) is for initiating the upload process. These buttons are styled by the Layui framework and serve as the user interface elements for the file upload functionality handled by the subsequent JavaScript code.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/auto.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-normal\" id=\"ID-upload-demo-choose\">选择文件</button>\n  <button type=\"button\" class=\"layui-btn\" id=\"ID-upload-demo-action\">开始上传</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Alert with Countdown Timer JavaScript\nDESCRIPTION: Implements the event handler for the 'test-count-down' `lay-on` value. It displays a Layui alert dialog (`layer.alert`) that automatically closes after a set time (5 seconds) using the 'time' option. The `success` callback is used to start and manage a countdown timer displayed in the dialog's title bar, and the `end` callback ensures the timer interval is cleared when the dialog closes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-count-down\": function(){\n  layer.alert('在标题栏显示自动关闭倒计秒数', {\n    time: 5*1000,\n    success: function(layero, index){\n      var timeNum = this.time/1000, setText = function(start){\n        layer.title('<span class=\"layui-font-red\">'+ (start ? timeNum : --timeNum) + '</span> 秒后自动关闭', index);\n      };\n      setText(!0);\n      this.timer = setInterval(setText, 1000);\n      if(timeNum <= 0) clearInterval(this.timer);\n    },\n    end: function(){\n      clearInterval(this.timer);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Building Nested Collapse Panels for Tree Structure in Layui HTML\nDESCRIPTION: Presents a deeply nested collapsible panel structure to create a tree-like hierarchy of panels. Uses multiple nested \"layui-collapse\" containers with accordion mode enabled to represent hierarchical categories such as literati by dynasty. Each nested item can expand or collapse independently, enabling complex multi-level content organization. Requires Layui CSS and JS for rendering and interaction.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-collapse\" lay-accordion>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">文学家</div>\n    <div class=\"layui-colla-content layui-show\">\n\n      <div class=\"layui-collapse\" lay-accordion>\n        <div class=\"layui-colla-item\">\n          <div class=\"layui-colla-title\">唐代</div>\n          <div class=\"layui-colla-content layui-show\">\n\n            <div class=\"layui-collapse\" lay-accordion>\n              <div class=\"layui-colla-item\">\n                <div class=\"layui-colla-title\">杜甫</div>\n                <div class=\"layui-colla-content layui-show\">\n                  唐代著名诗人，与李白齐名\n                </div>\n              </div>\n              <div class=\"layui-colla-item\">\n                <div class=\"layui-colla-title\">李白</div>\n                <div class=\"layui-colla-content\">\n                  <p>唐代著名诗人，与杜甫齐名</p>\n                </div>\n              </div>\n              <div class=\"layui-colla-item\">\n                <div class=\"layui-colla-title\">王勃</div>\n                <div class=\"layui-colla-content\">\n                  <p>著有千古名篇《滕王阁序》</p>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n        <div class=\"layui-colla-item\">\n          <div class=\"layui-colla-title\">宋代</div>\n          <div class=\"layui-colla-content\">\n            <p>一个属于文人的时代</p>\n          </div>\n        </div>\n        <div class=\"layui-colla-item\">\n          <div class=\"layui-colla-title\">现代</div>\n          <div class=\"layui-colla-content\">\n            <p>文学大师纷纷登场</p>\n          </div>\n        </div>\n        <div class=\"layui-colla-item\">\n          <div class=\"layui-colla-title\">当代</div>\n          <div class=\"layui-colla-content\">\n            <p>文人、作家</p>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">科学家</div>\n    <div class=\"layui-colla-content\">\n      <p>伟大的科学家</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">艺术家</div>\n    <div class=\"layui-colla-content\">\n      <p>浑身散发着艺术细胞</p>\n    </div>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: 删除 Layui 组件实例（JavaScript）\nDESCRIPTION: 使用 tabs.removeInst 方法删除已渲染的组件实例，通常在完全移除组件或释放资源时调用。依赖目标实例存在，参数 id 为唯一标识。调用后相关事件和操作将失效，仅在无需再用实例时使用。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例\ntabs.removeInst('id');\n```\n\n----------------------------------------\n\nTITLE: Accessing iframe Elements from Parent Page in Layui\nDESCRIPTION: Shows how to access elements within an iframe layer from the parent page using layer.getChildFrame(). This method is useful for manipulating content inside iframe layers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 2, // iframe 层\n  content: '/layer/test/iframe.html',\n  success: function(layero, index){\n    // 获取 iframe 中 body 元素的 jQuery 对象\n    var body = layer.getChildFrame('body', index);\n    // 给 iframe 页中的某个输入框赋值\n    body.find('input').val('Hello layer.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Changing iframe Layer URL in Layui\nDESCRIPTION: Shows how to dynamically change the URL of an existing iframe layer using layer.iframeSrc(). Takes the layer index and the new URL as parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开弹层\nvar index = layer.open({\n  type: 2, // iframe 层\n  content: '/layer/test/iframe.html'\n}); \n// 重置 iframe 页面 URL\nlayer.iframeSrc(index, 'https://cn.bing.com/');\n```\n\n----------------------------------------\n\nTITLE: Initializing Laydate for Year Range - JavaScript\nDESCRIPTION: This code initializes a year range picker using Layui's laydate module. It requires the Layui library to be loaded. It sets the `elem` to the container element, sets the `type` parameter to 'year' for year selection, and the `range` to true for selecting a range of years. The output is a range selection interface for selecting a range of years.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/range.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-range-year',\n  type: 'year',\n  range: true\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Dropdown Panel\nDESCRIPTION: This code demonstrates how to open the Layui dropdown component programmatically using the `dropdown.open()` method.  It requires you to define an ID for the dropdown component during rendering. The ID is used to target the specific dropdown to open. This feature requires Layui version 2.9.8 or later.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropdown = layui.dropdown;\n\n// 渲染\ndropdown.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 打开对应的组件面板\ndropdown.open('test');\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui TreeTable\nDESCRIPTION: This JavaScript snippet initializes a Layui treeTable using the `treeTable.render()` method. It specifies the table element, data URL, column definitions, and toolbar. It also defines event handlers for toolbar actions and cell-level operations such as viewing details, adding child nodes, and displaying a dropdown menu with further actions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/examples/demo.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nlayui.use(function(){\n  var treeTable = layui.treeTable;\n  var layer = layui.layer;\n  var dropdown = layui.dropdown;\n\n  // 渲染\n  var inst = treeTable.render({\n    elem: '#ID-treeTable-demo',\n    url: '/static/json/2/treeTable/demo-1.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n    tree: {\n      /*\n      // 异步加载子节点\n      async: {\n        enable: true,\n        url: '/static/json/2/treeTable/demo-async.json', // 此处为静态模拟数据，实际使用时需换成真实接口\n        autoParam: [\"parentId=id\"]\n      }\n      */\n    },\n    maxHeight: '501px',\n    toolbar: '#TPL-treeTable-demo',\n    cols: [[\n      {type: 'checkbox', fixed: 'left'},\n      {field: 'id', title: 'ID', width: 80, sort: true, fixed: 'left'},\n      {field: 'name', title: '用户名', width: 180, fixed: 'left'},\n      {field: 'sex', title: '性别', width: 80, sort: true},\n      {field: 'experience', title: '积分', width: 90, sort: true},\n      {field: 'city', title: '城市', width: 100},\n      { fixed: \"right\", title: \"操作\", width: 190, align: \"center\", toolbar: \"#TPL-treeTable-demo-tools\"} \n    ]],\n    page: true\n  });\n\n  // 表头工具栏工具事件\n  treeTable.on(\"toolbar(ID-treeTable-demo)\", function (obj) {\n    var config = obj.config;\n    var tableId = config.id;\n    var status = treeTable.checkStatus(tableId);\n\n    // 获取选中行\n    if (obj.event === \"getChecked\") {\n      if(!status.data.length) return layer.msg('无选中数据');\n      console.log(status);\n      layer.alert(\"当前数据选中已经输出到控制台，<br>您可按 F12 从控制台中查看结果。\");\n    }\n  });\n\n  // 单元格工具事件\n  treeTable.on('tool('+ inst.config.id +')', function (obj) {\n    var layEvent = obj.event; // 获得 lay-event 对应的值\n    var trElem = obj.tr;\n    var trData = obj.data;\n    var tableId = obj.config.id;\n\n    if (layEvent === \"detail\") {\n      layer.msg(\"查看操作：\" + trData.name);\n    } else if (layEvent === \"addChild\") {\n      var data = { id: Date.now(), name: \"新节点\" };\n      var newNode2 = treeTable.addNodes(tableId, {\n        parentIndex: trData[\"LAY_DATA_INDEX\"], \n        index: -1, \n        data: data\n      });\n    } else if (layEvent === \"more\") {\n      // 下拉菜单\n      dropdown.render({\n        elem: this, // 触发事件的 DOM 对象\n        show: true, // 外部事件触发即显示\n        align: \"right\", // 右对齐弹出\n        data: [\n          {\n            title: \"修改积分\",\n            id: \"edit\"\n          },\n          {\n            title: \"删除\",\n            id: \"del\"\n          }\n        ],\n        click: function (menudata) {\n          if (menudata.id === \"del\") {\n            layer.confirm(\"真的删除行么\", function (index) {\n              obj.del(); // 等效如下\n              // treeTable.removeNode(tableId, trElem.attr('data-index'))\n              layer.close(index);\n            });\n          } else if (menudata.id === \"edit\") {\n            layer.prompt({\n                value: trData.experience,\n                title: \"输入新的积分\"\n            }, function (value, index) {\n              obj.update({ experience: value }); // 等效如下\n              // treeTable.updateNode(tableId, trElem.attr('data-index'), {experience: value});\n              layer.close(index);\n            });\n          }\n        }\n      });\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Table Height in Layui\nDESCRIPTION: Example of using a function to dynamically calculate the table height based on window size and other elements, useful for responsive layouts.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nheight: function(){\n   // 自定义其他区域的高度\n  var otherHeight = $('#search-content').outerHeight();\n  return $(window).height() - otherHeight; // 返回 number 类型\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Footer Toolbar Template for Layui Table Pagination\nDESCRIPTION: This snippet defines an HTML template using a `<script>` tag with `type=\"text/html\"` and a unique ID (`ID-table-demo-page-pagebar`). It contains a `div` with buttons styled using Layui classes. Each button has a `lay-event` attribute used to trigger custom actions when clicked within the table's pagination bar.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/page.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/html\" id=\"ID-table-demo-page-pagebar\">\n  <div class=\"layui-btn-container\">\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"footerDemoBtn1\">底部按钮1</button>\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"footerDemoBtn2\">底部按钮2</button>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Tabs with Hash (JavaScript)\nDESCRIPTION: This JavaScript snippet initializes the Layui tabs and implements hash-based navigation. It utilizes the `layui.use()` method to load the Layui modules. It then uses `layui.hash()` to retrieve the current hash from the URL. Finally, it calls the `tabs.change()` method to activate the tab matching the hash.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/hash.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var tabs = layui.tabs;\n\n  // HASH 初始定位\n  var hash = layui.hash();\n  tabs.change('demoTabs-hash', hash.href);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Input Elements for Layui Date and Time Pickers\nDESCRIPTION: Provides the HTML structure for input fields that serve as the target elements for Layui date/time pickers. Each input has a unique id and placeholder corresponding to the date/time format it supports, such as year-only, year-month, time, and full datetime selections. The inputs are arranged within a form with class 'layui-form' to enable Layui styling and behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年选择器</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-type-year\" placeholder=\"yyyy\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年月选择器</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-type-month\" placeholder=\"yyyy-MM\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">时间选择器</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-type-time\" placeholder=\"HH:mm:ss\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期时间选择器</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-type-datetime\" placeholder=\"yyyy-MM-dd HH:mm:ss\">\n      </div>\n    </div>\n  </div>\n  <hr>\n  <h5 style=\"margin-bottom: 16px;\">\n    同时显示日期和时间选择器（全面板） <sup>2.8+<\\/sup> :\n  <\\/h5>\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期时间选择器</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-type-datetime-1\" placeholder=\"yyyy-MM-dd HH:mm:ss\">\n      <\\/div>\n    <\\/div>\n  <\\/div>\n<\\/div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Bars with element.render() in JavaScript\nDESCRIPTION: Shows how to programmatically render progress bars, especially useful for dynamically inserted elements. Uses element.render('progress', filter) with the progress container's lay-filter attribute.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nlayui.use(function(){\n  var element = layui.element;\n  var $ = layui.$;\n  $('#test').html(`\n    <div class=\"layui-progress\" lay-filter=\"demo-filter-progress\">\n      <div class=\"layui-progress-bar\" lay-percent=\"30%\"></div>\n    </div>\n  `);\n  // Render progress bar after dynamic insertion\n  element.render('progress', 'demo-filter-progress');\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Dropdown Panel\nDESCRIPTION: This code demonstrates how to close the Layui dropdown component programmatically using the `dropdown.close()` method.  It requires you to define an ID for the dropdown component during rendering. The ID is used to target the specific dropdown to close.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropdown = layui.dropdown;\n\n// 渲染\ndropdown.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 关闭对应的组件面板\ndropdown.close('test');\n```\n\n----------------------------------------\n\nTITLE: 实现输入框点缀布局结构 - HTML\nDESCRIPTION: 代码片段展示输入框点缀的基本静态布局结构，包括容器、前缀、输入框和后缀四个部分。通过不同的CSS类 layui-input-group 和 layui-input-wrap 来区分自适应前后置结构与固定宽度前缀后缀，前缀类和后缀类用于插入图标或提示内容，支持设置分隔框样式。该结构允许灵活修饰输入框周边内容，适用于对输入框进行视觉增强。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-input-{容器类}\">\n  <div class=\"layui-input-{前缀类}\"></div>\n  <input class=\"layui-input\" placeholder=\"输入框\">\n  <div class=\"layui-input-{后缀类}\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting custom CSS for Layui fixed toolbar container\nDESCRIPTION: Demonstrates how to position the fixed toolbar by setting CSS properties like right and bottom coordinates using the css option.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncss: {right: 32, bottom: 32}\n```\n\n----------------------------------------\n\nTITLE: Layui Table Cell Template for Select HTML (Layui Templating)\nDESCRIPTION: Provides an HTML template (`type=\"text/html\"`) used by Layui's table component to render a table cell containing an HTML `<select>` element. It dynamically populates the options using Layui's templating loop based on a `cityList` variable passed in the data (`d.cityList`) and sets the `selected` attribute based on the current cell's value (`d.city`). Requires Layui's form module for subsequent event binding.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_1\n\nLANGUAGE: HTML (Layui Templating)\nCODE:\n```\n{{# var cityList = d.cityList || [\"北京\",\"上海\",\"广州\",\"城市-1\"]; }}\n<select name=\"city\" lay-filter=\"select-demo\" lay-append-to=\"body\">\n  <option value=\"\">select 方式</option>\n  {{# layui.each(cityList, function(i, v){ }}\n  <option value=\"{{= v }}\" {{= v === d.city ? 'selected' : '' }}>{{= v }}</option>\n  {{# }); }}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Level (Infinite) Headers in layui Tables\nDESCRIPTION: This snippet showcases a more complex nested header setup with up to three levels, supporting fixed and scrollable columns, and multiple address subdivisions. It also includes a secondary header row with detailed address fields, supporting infinite nesting levels.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/theads.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-table\" lay-data=\"{url:'/static/json/2/table/demo2.json?v=3', cellMinWidth: 80, page: true}\" id=\"ID-table-demo-theads-2\">\n  <thead>\n    <tr>\n      <th lay-data=\"{field:'username', fixed:'left', width:80}\" rowspan=\"3\">联系人</th>\n      <th lay-data=\"{field:'amount'}\" rowspan=\"3\">数量</th>\n      <th lay-data=\"{align:'center'}\" colspan=\"5\">地址1</th>\n      <th lay-data=\"{align:'center'}\" colspan=\"2\">地址2</th>\n      <th lay-data=\"{fixed: 'right', width: 160, align: 'center', toolbar: '#templet-demo-theads-tool'}\" rowspan=\"3\">操作</th>\n    </tr>\n    <tr>\n      <th lay-data=\"{field:'province'}\" rowspan=\"2\">省</th>\n      <th lay-data=\"{field:'city'}\" rowspan=\"2\">市</th>\n      <th lay-data=\"{align:'center'}\" colspan=\"3\">详细</th>\n      <th lay-data=\"{field:'province'}\" rowspan=\"2\">省</th>\n      <th lay-data=\"{field:'city'}\" rowspan=\"2\">市</th>\n    </tr>\n    <tr>\n      <th lay-data=\"{field:'street'}\" rowspan=\"2\">街道</th>\n      <th lay-data=\"{field:'address'}\">小区</th>\n      <th lay-data=\"{field:'house'}\">单元</th>\n    </tr>\n  </thead>\n</table>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/html\" id=\"templet-demo-theads-tool\">\n  <div class=\"layui-clear-space\">\n    <a class=\"layui-btn layui-btn-primary layui-btn-xs\" lay-event=\"detail\">按钮1</a>\n    <a class=\"layui-btn layui-btn-primary layui-btn-xs\" lay-event=\"edit\">按钮2</a>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring bars property in Layui fixed toolbar\nDESCRIPTION: Defines the structure for setting up fixed toolbar items through the bars property. Each bar can have a type, icon class, content, and custom styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbars: [\n  {\n    type: '', // bar 类型名，用于事件区分\n    icon: '', // bar 图标的 className\n    content: '', // bar 任意内容\n    style: '' // bar 任意样式\n  },\n  // …\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Confirm Dialog JavaScript\nDESCRIPTION: Implements the event handler for the 'test-confirm' `lay-on` value. It displays a Layui confirm dialog (`layer.confirm`) with a specific icon (3). It provides separate callback functions to execute custom logic when the user clicks either the 'OK' or 'Cancel' button.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-confirm\": function(){\n  layer.confirm('一个询问框的示例？', {icon: 3}, function(){\n    layer.msg('点击确定的回调', {icon: 1});\n  }, function(){\n    layer.msg('点击取消的回调');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Button Sizes - HTML\nDESCRIPTION: This snippet illustrates how to set different sizes for Layui buttons, including large, default, small, and mini sizes. It showcases normal and primary styles along with fluid width buttons. The layui-btn-fluid class ensures the button occupies the full width of its parent container.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">  \n  <button type=\"button\" class=\"layui-btn layui-btn-lg\">大型按钮</button>\n  <button type=\"button\" class=\"layui-btn\">默认按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm\">小型按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-xs\">迷你按钮</button>\n</div> \n \n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-lg layui-btn-normal\">大型按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-normal\">默认按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-normal\">小型按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-xs layui-btn-normal\">迷你按钮</button>\n</div>\n \n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-lg\">大型按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\">默认按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-sm\">小型按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary layui-btn-xs\">迷你按钮</button>\n</div>\n \n<div style=\"width: 380px;\">\n  <button type=\"button\" class=\"layui-btn layui-btn-fluid\">流体按钮（宽度自适应）</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Upload Buttons with Layui\nDESCRIPTION: This HTML snippet defines a set of buttons for initiating file uploads using the Layui framework. Each button has a class of \"layui-btn\" and \"demo-class-accept\". The `lay-options` attribute configures the upload behavior, such as the accepted file type (file, video, audio) and allowed file extensions (zip|rar|7z).  These buttons trigger the file upload functionality when clicked.  They also utilize the Layui icon class to include icons within the buttons, improving UI.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/accept.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn demo-class-accept\" lay-options=\"{accept: 'file'}\">\n    <i class=\"layui-icon layui-icon-upload\"></i> \n    上传文件\n  </button>\n  <button type=\"button\" class=\"layui-btn demo-class-accept\" lay-options=\"{\n    accept: 'file',\n    exts: 'zip|rar|7z'\n  }\">\n    <i class=\"layui-icon layui-icon-upload\"></i> \n    只允许压缩文件\n  </button>\n  <button type=\"button\" class=\"layui-btn demo-class-accept\" lay-options=\"{accept: 'video'}\">\n    <i class=\"layui-icon layui-icon-upload\"></i> \n    上传视频\n  </button>\n  <button type=\"button\" class=\"layui-btn demo-class-accept\" lay-options=\"{accept: 'audio'}\">\n    <i class=\"layui-icon layui-icon-upload\"></i>\n    上传音频\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring event handling for Layui fixed toolbar\nDESCRIPTION: Shows how to define custom event handlers for toolbar items using the on property. The callback function receives the type value from the bars configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\non: {\n  // 点击事件\n  click: function(type){\n    // bars 对属性应的 type 值\n    console.log(type);\n  },\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Layui Checkbox\nDESCRIPTION: This snippet demonstrates the basic usage of the Layui checkbox component with the default style. It includes examples of setting the title, checked state, disabled state, and the indeterminate state. The script initializes and renders the form, including the checkbox element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/checkbox.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"checkbox\" name=\"AAA\" title=\"默认\">\n  <input type=\"checkbox\" name=\"BBB\" lay-text=\"选中\" checked> \n  <input type=\"checkbox\" name=\"CCC\" title=\"禁用\" disabled> \n  <input type=\"checkbox\" name=\"DDD\" title=\"半选\" id=\"ID-checkbox-ind\"> \n</div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var form = layui.form;\n  var $ = layui.$;\n\n  // 初始设置半选\n  $('#ID-checkbox-ind').prop('indeterminate', true); // 半选属性只能动态设置\n  form.render('checkbox');\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Layui Table Cell Template for Dropdown Button HTML (Layui Templating)\nDESCRIPTION: Provides an HTML template (`type=\"text/html\"`) used by Layui's table component to render a table cell containing a button element styled with Layui classes. This button is intended to serve as the trigger element for a Layui dropdown component, displaying the current cell's value (`d.sex`) within a `span`. Requires Layui's dropdown module for functionality.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_2\n\nLANGUAGE: HTML (Layui Templating)\nCODE:\n```\n<button class=\"layui-btn layui-btn-primary dropdown-demo\">\n  <span>{{= d.sex || '无' }}</span>\n  <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Get TreeTable Data - JavaScript\nDESCRIPTION: This snippet shows how to retrieve data from a Layui TreeTable. The `getData` method is used to fetch the current page's data. The retrieved data represents the original data returned from the interface, without the internal `treeTable` component's specific fields.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 获取当前页接口的树表数据\nvar data = treeTable.getData('test'); // 获取第一行的数据\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Rendering Normal Select Boxes with Layui\nDESCRIPTION: This snippet demonstrates how to create standard select boxes using Layui's styling. It includes examples of a basic select, a pre-selected option, a disabled select, and a disabled option within a select. It showcases the basic usage of the `<select>` element within a Layui form structure.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/select.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form layui-row layui-col-space16\">\n  <div class=\"layui-col-md6\">\n    <select>\n      <option value=\"\">请选择</option>\n      <option value=\"AAA\">选项 A</option>\n      <option value=\"BBB\">选项 B</option>\n      <option value=\"CCC\">选项 C</option>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select>\n      <option value=\"\">请选择</option>\n      <option value=\"AAA\">选项 A</option>\n      <option value=\"BBB\">选项 B</option>\n      <option value=\"CCC\" selected>选项 C</option>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select disabled>\n      <option value=\"\">禁用选择框</option>\n      <option value=\"AAA\">选项 A</option>\n      <option value=\"BBB\">选项 B</option>\n      <option value=\"CCC\">选项 C</option>\n    </select>\n  </div>\n  <div class=\"layui-col-md6\">\n    <select>\n      <option value=\"\">请选择</option>\n      <option value=\"AAA\">选项 A</option>\n      <option value=\"BBB\" disabled>选项 B（禁用选项）</option>\n      <option value=\"CCC\">选项 C</option>\n    </select>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Including and Initializing Layui Web UI Components in HTML\nDESCRIPTION: This snippet demonstrates the minimal HTML structure needed to include Layui's CSS and JavaScript files and initialize its modules in a web page. It uses native HTML5 elements to set metadata and link the Layui stylesheet. The example shows how to call layui.use to load Layui modules and utilize the `layer` component to display a temporary message. No external build tools or complex setup are required.\nSOURCE: https://github.com/layui/layui/blob/main/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Quick Start - Layui</title>\n    <link href=\"./layui/css/layui.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <!-- HTML Content -->\n    <script src=\"./layui/layui.js\"></script>\n    <script>\n      // Usage\n      layui.use(function () {\n        var layer = layui.layer;\n        // Welcome\n        layer.msg(\"Hello World\", { icon: 6 });\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Layui File Upload in JavaScript\nDESCRIPTION: This script initializes Layui modules and configures the upload component to handle file uploading. It specifies the DOM element to bind, the upload URL, and provides a callback for successful upload notifications using the layer module for UI messaging. Dependencies include Layui's upload and layer modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/form.file.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var upload = layui.upload;\n  var layer = layui.layer\n\n  // 渲染\n  upload.render({\n    elem: '#ID-upload-demo-form-files',\n    url: '', // 此处配置你自己的上传接口即可\n    done: function(res){\n      layer.msg('上传成功');\n      console.log(res)\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Layui Table Cell Template for Colorpicker HTML (Layui Templating)\nDESCRIPTION: Provides an HTML template (`type=\"text/html\"`) used by Layui's table component to render a table cell containing a `div` element. This div is configured with `lay-options` to pass initial configuration (like the default color, potentially randomly selected) to a Layui color picker component which will be initialized on this element. Requires Layui's colorpicker module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_4\n\nLANGUAGE: HTML (Layui Templating)\nCODE:\n```\n{{# var color = d.color || ['#16baaa','#16b777','#1E9FFF','#FF5722','#FFB800','#393D49'][Math.round(Math.random()*5)]; }}\n<div class=\"colorpicker-demo\" lay-options=\"{color: '{{= color }}'}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Data Parsing in Layui Transfer Component\nDESCRIPTION: Demonstrates how to use custom data format by implementing the parseData function. Maps custom data fields to the required format expected by the transfer component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo-parseData\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-parseData',\n    parseData: function(res){\n      return {\n        \"value\": res.id, // 数据值\n        \"title\": res.name, // 数据标题\n        \"disabled\": res.disabled,  // 是否禁用\n        \"checked\": res.checked // 是否选中\n      }\n    },\n    data: [\n      {\"id\": \"1\", \"name\": \"李白\"},\n      {\"id\": \"2\", \"name\": \"杜甫\"},\n      {\"id\": \"3\", \"name\": \"苏轼\"}\n    ],\n    height: 150\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Button Containers - HTML\nDESCRIPTION: This snippet demonstrates how to use Layui button containers using the layui-btn-container class. This helps to provide consistent spacing and alignment for buttons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn\">按钮一</button> \n  <button type=\"button\" class=\"layui-btn\">按钮二</button> \n  <button type=\"button\" class=\"layui-btn\">按钮三</button> \n</div>\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn\">按钮一</button> \n  <button type=\"button\" class=\"layui-btn\">按钮二</button> \n  <button type=\"button\" class=\"layui-btn\">按钮三</button> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Time Intervals (JavaScript)\nDESCRIPTION: Configures a time range picker with disabled periods based on custom logic for hours, minutes, and seconds. Utilizes layui's disabledTime callback to set ranges conditionally. Inputs include element selector and disabledTime function; outputs are time pickers with specified disabled intervals.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/limit.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-limit-5',\n  type: 'time',\n  range: true,\n  disabledTime: function(date, type){\n    return {\n      hours: function(){\n        return range(0, 10);\n      },\n      minutes:function(hour){\n        return hour > 5 ? range(0, 20) : [];\n      },\n      seconds:function(hour, minute){\n        return range(0, 2);\n      }\n    };\n  }\n});\n\nfunction range(start, end) {\n  var result = [];\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Layer Popup Before Close Callback in JavaScript\nDESCRIPTION: Defines the beforeEnd callback function in LayUI's layer popup to execute custom logic before the popup closes. The function returns either false or a rejected Promise to cancel closing. It uses jQuery Deferred to asynchronously confirm with the user if they want to close when input content exists, ensuring that unsaved input is not lost without confirmation. Requires jQuery and LayUI's layer module. Parameters include the layer DOM element and index. Input is user interaction with popup input; output controls closing flow.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  content: '<div style=\"padding: 32px;\"><input id=\"id\"/></div>',\n  /** @type {(layero: JQuery, index: number) => boolean | JQueryDeferred<boolean> | Promise<boolean>} */\n  beforeEnd: function(layero, index, that){\n    return $.Deferred(function(defer){\n      var el = layero.find('#id');\n      var val = el.val().trim();\n      if(val){\n        layer.confirm('关闭后您填写的内容将不会得到保存，确定关闭吗？', function (i) {\n          layer.close(i);\n          defer.resolve(true)\n        });\n      }else{\n        defer.resolve(true)\n      }\n    }).promise();\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Initializing Switch Style Layui Checkbox\nDESCRIPTION: This snippet shows the implementation of the 'switch' style for Layui checkboxes.  It demonstrates different title variations for ON/OFF states using the `title` attribute. It also includes examples of the disabled state.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/checkbox.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"checkbox\" name=\"AAA\" lay-skin=\"switch\">\n  <br>\n  <input type=\"checkbox\" name=\"BBB\" title=\"ON|OFF\" lay-skin=\"switch\" checked> \n  <br>\n  <input type=\"checkbox\" name=\"CCC\" title=\"开启|关闭\" lay-skin=\"switch\">\n  <br>\n  <input type=\"checkbox\" name=\"DDD\" lay-skin=\"switch\" disabled>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Header Element Rendering Example - Layui JavaScript\nDESCRIPTION: This code snippet illustrates how to render header tabs by binding them to existing elements in the DOM. It utilizes an array of element selectors, specifying which elements should be used as the header tabs.  This method allows for pre-existing HTML elements to be dynamically used as tabs.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nheader: ['#tabsHeader', '>li'],\n```\n\n----------------------------------------\n\nTITLE: Layui Table Cell Template for Laydate Input HTML (Layui Templating)\nDESCRIPTION: Provides an HTML template (`type=\"text/html\"`) used by Layui's table component to render a table cell containing an `<input>` element. This input is specifically designed to be initialized as a Layui date picker (`laydate`). It populates the input's value with the current cell's data (`d.fieldname3`). Requires Layui's laydate module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_3\n\nLANGUAGE: HTML (Layui Templating)\nCODE:\n```\n<input class=\"layui-input laydate-demo\" placeholder=\"选择日期\" value=\"{{= d.fieldname3 || '' }}\">\n```\n\n----------------------------------------\n\nTITLE: HTML Form Inputs for Layui laydate Date Pickers\nDESCRIPTION: This snippet defines the HTML structure for three laydate-enabled date inputs within a form. Each input is identified by unique IDs ('ID-laydate-calendar', 'ID-laydate-mark', and 'ID-laydate-holidays') and includes placeholder text showing the expected date format. The form uses Layui's CSS classes to style the form, input groups, and labels for better UI arrangement. This markup is required for binding the corresponding JavaScript laydate instances.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/mark.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">开启公历节日</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-calendar\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">自定义日子</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-mark\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">节假日标注</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-holidays\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Layui Table User Details\nDESCRIPTION: This script block defines an HTML template used by Layui's `table` module via the `templet` option. It renders user details (ID, username, sex, city) as an unordered list within a table cell, accessing data fields using Layui's template syntax `{{= d.field_name }}`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/css.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{{!\n    <ul>\n      <li><strong>ID:</strong> {{= d.id }} </li>\n      <li><strong>用户:</strong> {{= d.username }} </li>\n      <li><strong>性别:</strong> {{= d.sex }} </li>\n      <li><strong>城市:</strong> {{= d.city }} </li>\n    </ul>\n  !}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datetime Range Shortcuts in Layui - JavaScript\nDESCRIPTION: This JavaScript snippet configures a laydate datetime range picker with custom shortcuts. The `laydate.render()` function is used to initialize the datepicker. The type is set to 'datetime' and range is true. The code provides predefined shortcuts to select '上个月', '这个月' and '下个月'.  Each shortcut is associated with a function that computes and returns the start and end dates.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/shortcut.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  // 日期时间范围\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-range-datetime\",\n    type: \"datetime\",\n    range: true,\n    shortcuts: [\n      {\n        text: \"上个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month - 1, 1),\n            new Date(year, month, 0, 23, 59, 59)\n          ];\n        }\n      },\n      {\n        text: \"这个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month, 1),\n            new Date(year, month + 1, 0, 23, 59, 59)\n          ];\n        }\n      },\n      {\n        text: \"下个月\",\n        value: function(){\n          var date = new Date();\n          var year = date.getFullYear();\n          var month = date.getMonth();\n\n          return [\n            new Date(year, month + 1, 1),\n            new Date(year, month + 2, 0, 23, 59, 59)\n          ];\n        }\n      }\n    ]\n  });\n```\n\n----------------------------------------\n\nTITLE: 访问 Layui 组件基础常量（JavaScript）\nDESCRIPTION: 展示如何获取组件常用常量，如名称、自增索引及标准 class 前缀等，用于自定义样式及判定组件状态。依赖组件已经初始化。这些常量广泛用于开发过程中的样式和唯一标识约定。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 基础常量如下\ncomponent.CONST.MOD_NAME; // 组件名称\ncomponent.CONST.MOD_INDEX; // 组件自增索引\ncomponent.CONST.CLASS_THIS; // layui-this\ncomponent.CONST.CLASS_SHOW; // layui-show\ncomponent.CONST.CLASS_HIDE; // layui-hide\ncomponent.CONST.CLASS_HIDEV; // layui-hide-v\ncomponent.CONST.CLASS_DISABLED; // layui-disabled\ncomponent.CONST.CLASS_NONE; // layui-none\n// 更多常量一般在各组件内部单独定义，以 tabs 组件为例\ntabs.CONST.ELEM; // layui-tabs\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Panel with Layui in HTML\nDESCRIPTION: Demonstrates a collapsible panel container with multiple collapsible items, each with title and content sections. The collapse container uses the class \"layui-collapse\", and child items use \"layui-colla-item\" with titles and content wrapped separately. The snippet requires Layui CSS and JavaScript for full functionality, including auto-rendering the collapsible behavior. This structure supports toggling individual content panels open or closed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-collapse\">\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 1</div>\n    <div class=\"layui-colla-content\">\n      <p>Content 1</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 2</div>\n    <div class=\"layui-colla-content\">\n      <p>Content 2</p>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">Collapse Title 3</div>\n    <div class=\"layui-colla-content\">\n      <ul>\n        <li>Content list</li>\n        <li>Content list</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"layui-colla-item\">\n    <div class=\"layui-colla-title\">折叠面板的标题</div>\n    <div class=\"layui-colla-content\">\n      <p>折叠面板的内容</p>\n    </div>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Set Row Checked State in TreeTable - JavaScript\nDESCRIPTION: This snippet shows how to set the checked state of a row in a Layui TreeTable. The `setRowChecked` function allows you to programmatically check or uncheck rows, with options to specify the index and whether to trigger events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 勾选或取消勾选单个节点\ntreeTable.setRowChecked('test', {\n  index: 0,\n  checked: true // 选中\n}); \n```\n\n----------------------------------------\n\nTITLE: Rendering Slider Components in Layui\nDESCRIPTION: Shows how to render single and multiple slider components by selecting elements by ID or class, and how to specify options directly in HTML attributes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-test-slider\"></div>\n<div class=\"class-test-slider\" lay-options=\"{value: 50}\"></div>\n<div class=\"class-test-slider\" lay-options=\"{value: 80}\"></div>\n \n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n  // 单个渲染\n  slider.render({\n    elem: '#ID-test-slider'\n  });\n  // 批量渲染\n  slider.render({\n    elem: '.class-test-slider'\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Binding for Radio Buttons with Layui\nDESCRIPTION: This snippet shows how to link custom label templates with radio buttons using the `lay-radio` attribute that binds labels for more flexible styling or templating, enhancing UI customization beyond default titles.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/radio.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"radio\" name=\"AAA\" value=\"0\" title=\"默认\">\n  <div lay-radio>\n    <span style=\"color: blue;\">自定义模板 ♂</span>\n  </div>\n  <input type=\"radio\" name=\"AAA\" value=\"1\" title=\"默认\">\n  <div lay-radio>\n    <span style=\"color: pink;\">自定义模板 ♀</span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Single and Multiple Image Upload Buttons and Preview\nDESCRIPTION: Defines the user interface elements including upload buttons, image preview container, progress bar, and upload list for single and multiple image uploads. The HTML sets up the layout, CSS styles, and placeholders for dynamic content and progress indicators.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/image.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\" class=\"layui-btn\" id=\"ID-upload-demo-btn\">\n  <i class=\"layui-icon layui-icon-upload\"></i> 单图片上传\n</button>\n<div style=\"width: 132px;\">\n  <div class=\"layui-upload-list\">\n    <img class=\"layui-upload-img\" id=\"ID-upload-demo-img\" style=\"width: 100%; height: 92px;\">\n    <div id=\"ID-upload-demo-text\"></div>\n  </div>\n  <div class=\"layui-progress layui-progress-big\" lay-showPercent=\"yes\" lay-filter=\"filter-demo\">\n    <div class=\"layui-progress-bar\" lay-percent=\"\"></div>\n  </div>\n</div>\n<hr style=\"margin: 21px 0;\">\n<div class=\"layui-upload\">\n  <button type=\"button\" class=\"layui-btn\" id=\"ID-upload-demo-btn-2\">\n    <i class=\"layui-icon layui-icon-upload\"></i> 多图片上传\n  </button> \n  <blockquote class=\"layui-elem-quote layui-quote-nm\" style=\"margin-top: 11px;\">\n    预览图：\n    <div class=\"layui-upload-list\" id=\"upload-demo-preview\"></div>\n </blockquote>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Paginating Client-Side Array Data with Layui Laypage (JavaScript)\nDESCRIPTION: Demonstrates an advanced use case where laypage paginates data held in a local JavaScript array. The `jump` callback calculates the correct data slice based on the current page (`obj.curr`) and limit (`obj.limit`), then updates a designated DOM element (`demo-laypage-data-view`) to display the current page's items. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-data\"></div>\n<div id=\"demo-laypage-data-view\"></div> \n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 将一段已知数组分页展示\n  var data = [\"北京\",\"上海\",\"广州\",\"深圳\",\"杭州\",\"长沙\",\"合肥\",\"宁夏\",\"成都\",\"西安\",\"南昌\",\"上饶\",\"沈阳\",\"济南\",\"厦门\",\"福州\",\"九江\",\"宜春\",\"赣州\",\"宁波\",\"绍兴\",\"无锡\",\"苏州\",\"徐州\",\"东莞\",\"佛山\",\"中山\",\"成都\",\"武汉\",\"青岛\",\"天津\",\"重庆\",\"南京\",\"九江\",\"香港\",\"澳门\",\"台北\"]; // 测试数据\n\n  laypage.render({\n    elem: 'demo-laypage-data',\n    count: data.length,\n    jump: function(obj){\n      // 模拟渲染\n      document.getElementById('demo-laypage-data-view').innerHTML = function(){\n        var arr = [];\n        var thisData = data.concat().splice(obj.curr*obj.limit - obj.limit, obj.limit);\n        layui.each(thisData, function(index, item){\n          arr.push(item);\n        });\n        return arr.join('，');\n      }();\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Flow Control Using Modern Scriptlet Tags {{ }} in Layui Templates (2.11+) with JavaScript\nDESCRIPTION: Shows the new modern scriptlet tag style {{ }} introduced in Layui version 2.11 and later, recommended for flow control logic inside templates after setting `tagStyle: 'modern'`. It encloses JavaScript control structures without the # prefix unlike the old style. Requires explicit configuration of the tag style or template compilation will error. Input is data objects for conditional rendering; output varies with the logic flow results.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{ if (d.title) { }}\n  标题：{{= d.title }}\n{{ } else { }}\n  默认标题\n{{ } }}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Change Callback in Layui Color Picker (JavaScript)\nDESCRIPTION: Specifies the 'change' callback function triggered when the selected color value changes in the color picker component. The function receives the current color value as a parameter, allowing dynamic response to user selection changes. No external dependencies beyond Layui color picker initialization are required. Useful for real-time color application or validation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchange: function(value){\n  console.log(value); // 当前颜色值\n}\n```\n\n----------------------------------------\n\nTITLE: TreeTable Toolbar Template\nDESCRIPTION: This HTML snippet defines the template for the toolbar of the Layui treeTable. It includes a button to retrieve the selected data. The `lay-event` attribute is used to bind the button to a JavaScript event handler.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/examples/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"TPL-treeTable-demo\">\n  <div class=\"layui-btn-container\">\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"getChecked\">获取选中数据</button>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Clicks with Layui\nDESCRIPTION: This JavaScript snippet initializes the Layui framework and defines a click event handler for the menu. It uses the `layui.dropdown` module to listen for clicks on menu items with the ID 'demo-menu'. When an item is clicked, the handler logs the clicked item's options and displays them using the `layui.layer` module.  It depends on Layui, dropdown, layer, and util modules.  The key parameter is `options` which is the menu's option.\nSOURCE: https://github.com/layui/layui/blob/main/docs/menu/examples/demo.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 菜单点击事件\n  dropdown.on('click(demo-menu)', function(options){\n    console.log(this, options);\n    \n    // 显示 - 仅用于演示\n    layer.msg(util.escape(JSON.stringify(options)));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Multiple Tabs in Layui Tabs in JavaScript\nDESCRIPTION: Demonstrates how to close multiple tabs at once in a Layui tabs instance using `tabs.closeMult()`. It showcases different modes: closing all tabs except the current one (`other`), closing the current tab and all tabs to its right (`right`), and closing all tabs (`all`). An optional index or `lay-id` can specify the reference tab. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.closeMult(id, 'other'); // 关闭除当前标签外的所有标签\ntabs.closeMult(id, 'other', 3); // 关闭除索引为 3 的标签外的所有标签\ntabs.closeMult(id, 'right'); // 关闭当前标签及右侧标签\ntabs.closeMult(id, 'right', 3); // 关闭索引为 3 的标签的右侧所有标签\ntabs.closeMult(id, 'all'); // 关闭所有标签\n```\n\n----------------------------------------\n\nTITLE: Responding to Layer Popup Restore with restore Callback in JavaScript\nDESCRIPTION: Implements the restore callback to handle events when a minimized or maximized popup is restored to its original state. It receives the popup DOM, index, and instance. The provided example logs the restore event to the console. This callback allows developers to react to popup state restoration, relying solely on LayUI.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 1,\n  content: '内容',\n  restore: function(layero, index, that){\n    console.log('弹层已还原');\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Initializing Date Component: Ready Callback (Layui)\nDESCRIPTION: This code snippet demonstrates the 'ready' callback function within the Layui date component. It shows how to access the initial date and time object when the component is initialized. The `date` parameter provides year, month, date, hours, minutes, and seconds.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nready: function(date){\n  /* 得到初始的日期时间对象，date 参数格式如下：\n    {\n      year: 2017, // 年\n      month: 8, // 月\n      date: 18, // 日 \n      hours: 0, // 时 \n      minutes: 0, // 分 \n      seconds: 0 // 秒\n    }\n  */\n  console.log(date);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slider with Layui\nDESCRIPTION: Basic implementation of a Layui slider component with default settings. Demonstrates how to initialize a simple slider without any custom configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo'\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Layui Table Toolbar HTML Template\nDESCRIPTION: Defines the HTML template for the Layui table toolbar. It includes a button to retrieve the selected row data. The \"lay-event\" attribute is used to trigger corresponding JavaScript functions when the button is clicked.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/setRowChecked.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"demo-toolbar-setRowChecked\">\n  <div class=\"layui-btn-container\">\n    <button class=\"layui-btn layui-btn-sm\" lay-event=\"getCheckData\">获取选中行数据</button>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tab Container HTML Element for Layui Tabs\nDESCRIPTION: This HTML snippet defines a div element that acts as the container for the Layui tab components. The tabs rendered by the JavaScript snippet target this element via its ID ('demoTabs2'). It is an essential structural component where dynamic tabs and their content will be inserted by the Layui framework at runtime.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/method.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"demoTabs2\"></div>\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Tab Content Element in Layui Tabs (JavaScript)\nDESCRIPTION: Demonstrates retrieving the DOM element for a specific tab's content area within a Layui tabs instance ('test') using the `tabs.getBodyItem()` method. Requires the instance ID and the target tab's index or `lay-id`. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodyItem = tabs.getBodyItem('test', 3); // 获取索引为 3 的标签内容项元素\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Tool in Layui Table Toolbar\nDESCRIPTION: Example of how to rewrite the built-in export tool in Layui table's toolbar to provide custom export functionality for CSV and XLSX formats.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefaultToolbar: [\n  'filter',\n  {\n    name: 'exports',\n    onClick: function(obj) {\n      // 获得数据并清除临时字段\n      var data = table.clearCacheKey(obj.data);\n      // 当前示例配置项\n      var options = obj.config;\n\n      // 弹出面板\n      obj.openPanel({\n        list: [ // 列表\n          '<li data-type=\"csv\">导出 CSV 文件</li>',\n          '<li data-type=\"xlsx\">导出 XLSX 文件</li>'\n        ].join(''),\n        done: function(panel, list) { // 操作列表\n          list.on('click', function() {\n            var type = $(this).data('type')\n            if (type === 'csv') {\n               // 调用内置导出方法\n              table.exportFile(options.id, null, type);\n            } else if(type === 'xlsx') {\n              // 自助处理导出 - 如借助 sheetjs 库或服务端导出\n              // …\n            }\n          });\n        }\n      });\n    }\n  },\n  'print'\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui and Rendering a Data Table\nDESCRIPTION: Initializes the Layui environment and loads the `table` and `dropdown` modules. It then configures and renders a data table using `table.render`, targeting the previously defined HTML table (`#ID-dropdown-demo-table`). Configuration includes setting the data source URL, defining columns (including checkboxes, editable fields, and a fixed operations column using the toolbar template `#ID-dropdown-demo-table-tool`), enabling pagination, and specifying page limits.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/table.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var table = layui.table;\n  var dropdown = layui.dropdown;\n  \n  // dropdown 在表格中的应用\n  table.render({\n    elem: '#ID-dropdown-demo-table',\n    url: '/static/json/2/table/demo5.json',\n    title: '用户数据表',\n    cols: [[\n      {type: 'checkbox', fixed: 'left'},\n      {field:'id', title:'ID', width:80, fixed: 'left', unresize: true, sort: true},\n      {field:'username', title:'用户名', width:120, edit: 'text'},\n      {field:'email', title:'邮箱', minWidth:150},\n      {fixed: 'right', title:'操作', toolbar: '#ID-dropdown-demo-table-tool', width:150}\n    ]],\n    limits: [3],\n    page: true\n  });\n\n  // ... [Event handling code follows]\n});\n```\n\n----------------------------------------\n\nTITLE: Large Size Progress Bars in HTML\nDESCRIPTION: Creates larger progress bars by adding the 'layui-progress-big' class to the container, enhancing visual prominence for emphasis or visibility requirements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-progress layui-progress-big\">\n  <div class=\"layui-progress-bar\" lay-percent=\"15%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress layui-progress-big\">\n  <div class=\"layui-progress-bar layui-bg-orange\" lay-percent=\"35%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress layui-progress-big\">\n  <div class=\"layui-progress-bar layui-bg-blue\" lay-percent=\"75%\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Custom Content Example for Dropdown\nDESCRIPTION: Shows how to embed custom content, such as a tabbed interface, within the dropdown trigger. Relies on the template file '/dropdown/examples/content.md' and renders a specific interactive or customized dropdown menu.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/content.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Update Row Data in TreeTable - JavaScript\nDESCRIPTION: This snippet demonstrates how to update the data of a specific row in a Layui TreeTable.  The `updateNode` function allows modification of individual fields within the row's data.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 更新行数据\nvar data = treeTable.updateNode('test', 0, {  // 更新第一行的数据\n  title: '123'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Laydate Date Picker with English Localization in JavaScript\nDESCRIPTION: This snippet initializes a static Laydate date picker with English language localization. It targets the HTML element with id 'ID-laydate-static-2'. By setting the 'lang' option to 'en', the date picker displays months, days, and other UI text in English. The widget remains statically embedded on the page via the 'position: static' option.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/static.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  laydate.render({\n    elem: '#ID-laydate-static-2',\n    position: 'static',\n    lang: 'en'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Header Events in JavaScript\nDESCRIPTION: This JavaScript code uses Layui's `util.event` to handle click events on header elements with the `lay-header-event` attribute. It defines functions for `menuLeft` and `menuRight` events, using `layer.msg` and `layer.open` to display messages and open a panel, respectively. It depends on the `element`, `layer`, and `util` modules from Layui.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(['element', 'layer', 'util'], function(){\n  var element = layui.element;\n  var layer = layui.layer;\n  var util = layui.util;\n  var $ = layui.$;\n  \n  //头部事件\n  util.event('lay-header-event', {\n    menuLeft: function(othis){ // 左侧菜单事件\n      layer.msg('展开左侧菜单的操作', {icon: 0});\n    },\n    menuRight: function(){  // 右侧菜单事件\n      layer.open({\n        type: 1,\n        title: '更多',\n        content: '<div style=\"padding: 15px;\">处理右侧面板的操作</div>',\n        area: ['260px', '100%'],\n        offset: 'rt', // 右上角\n        anim: 'slideLeft', // 从右侧抽屉滑出\n        shadeClose: true,\n        scrollbar: false\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Progress Bars with Percentage Display in HTML\nDESCRIPTION: Displays the current progress percentage inside the progress bar, controlled by the lay-showpercent attribute which, when true, shows the progress value.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-progress\" lay-showpercent=\"true\">\n  <div class=\"layui-progress-bar\" lay-percent=\"30%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress\" lay-showpercent=\"true\">\n  <div class=\"layui-progress-bar\" lay-percent=\"5 / 10\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress layui-progress-big\" lay-showpercent=\"true\">\n  <div class=\"layui-progress-bar\" lay-percent=\"70%\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Table Container for Layui Table in HTML\nDESCRIPTION: This snippet defines an HTML <table> element with a unique ID and the 'layui-hide' style class, serving as a placeholder for Layui's data table rendering. No external scripts are strictly needed for this markup, but the Layui JavaScript and CSS are required for the table to be rendered and styled. The ID attribute ('ID-table-demo-data') links this element to the Layui.render invocation. Expected input is standard HTML, and the output is an initially hidden table that will be turned into an interactive component when Layui executes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/data.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-table-demo-data\"></table>\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Checkbox Events\nDESCRIPTION: This snippet shows how to handle events for Layui checkboxes, including the `checkbox` event for default and tag styles, and `switch` event for switch style. It captures the checked status and value of the checkbox and displays them using a layer message. It also demonstrates submitting a form, accessing the field values.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/checkbox.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <input type=\"checkbox\" name=\"agreement\" value=\"1\" title=\"是否同意\" lay-filter=\"demo-checkbox-filter\">\n  </div>\n  <div class=\"layui-form-item\">\n    <button class=\"layui-btn\" lay-submit lay-filter=\"demo-checkbox-submit\">确认</button>\n  </div>\n</div>\n\n<!-- import layui --> \n<script>\nlayui.use(function(){\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // checkbox 事件\n  form.on('checkbox(demo-checkbox-filter)', function(data){\n    var elem = data.elem; // 获得 checkbox 原始 DOM 对象\n    var checked = elem.checked; // 获得 checkbox 选中状态\n    var value = elem.value; // 获得 checkbox 值\n    var othis = data.othis; // 获得 checkbox 元素被替换后的 jQuery 对象\n    \n    layer.msg('checked 状态: '+ elem.checked);\n  });\n\n  // 通过表单提交事件，演示 checkbox 不同状态下的字段结果\n  form.on('submit(demo-checkbox-submit)', function(data){\n    var field = data.field; // 获取表单字段值\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n    // 此处可执行 Ajax 等操作\n    // …\n    return false; // 阻止默认 form 跳转\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling the afterRender Event in Layui Tabs (JavaScript)\nDESCRIPTION: Shows how to attach a callback function to the `afterRender` event for a specific Layui tabs instance (`testID`) using `tabs.on()`. The callback executes after the tabs component has finished rendering and receives data about the rendered tabs. Requires the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.on('afterRender(testID)', function(data){\n  console.log(data); // 标签相关数据\n});\n```\n\n----------------------------------------\n\nTITLE: Closing laydate Panel\nDESCRIPTION: Demonstrates how to programmatically close a laydate panel using the close method. This requires the component ID, and if no ID is provided, it closes the currently open date panel.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar laydate = layui.laydate;\n// 渲染\nlaydate.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 关闭对应的日期面板\nlaydate.close('test');\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Tab Before Delete Confirmation JavaScript\nDESCRIPTION: This JavaScript code snippet uses the Layui `element` module to listen for the `tabBeforeDelete` event on the tab container filtered by `lay-filter=\"test-tabs\"`. It retrieves information about the tab being deleted (`index`, `elem`, `id`) and displays a confirmation dialog using `layui.layer`. If the user confirms, it proceeds with the tab deletion using `element.tabDelete()`; otherwise, the `return false;` statement prevents the default deletion action.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var element = layui.element;\n\n  // tab 删除前的事件\n  element.on('tabBeforeDelete(test-tabs)', function(data){\n    console.log(data.index); // 得到被删除的 tab 项的所在下标\n    console.log(data.elem); // 得到当前的 tab 容器\n    console.log(data.id); // 得到被删除的 tab 项的 ID(2.9.11+)\n\n    // 确认删除\n    layer.confirm(`确认删除【${this.innerText}】吗？`, function (index) {\n      element.tabDelete('test-tabs', data.id, true); // 确认后强制删除 - 2.9.21+\n      layer.close(index);\n    });\n\n    return false; // 返回 false 时阻止默认删除选项卡行为\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Render Hook in Layui Components - JavaScript\nDESCRIPTION: A callback function invoked immediately before the component rendering process. The hook receives the render options and can be used for final adjustments or checks before the UI is constructed. It enables dynamic alteration of rendering parameters to impact the component's visual output or behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeRender: function(options) {\n  console.log(options); // 获得组件渲染前的配置项\n}\n```\n\n----------------------------------------\n\nTITLE: Full Functionality with Callbacks\nDESCRIPTION: This snippet demonstrates the full functionality of the Layui Colorpicker, including predefined colors, alpha transparency, and the `done`, `change`, and `cancel` callbacks. It shows how to update the background color of a button based on the selected color. The `cancel` callback is introduced in version 2.8+.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"layui-btn\" id=\"ID-colorpicker-demo-all-btn\">主题按钮</button>\n<hr>\n<div id=\"ID-colorpicker-demo-all\"></div> \n<span style=\"padding-left: 6px;\">演示：选择颜色并确定，改变上方按钮背景色</span>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n  var layer = layui.layer;\n  var $ = layui.$;\n\n  // 渲染\n  colorpicker.render({\n    elem: '#ID-colorpicker-demo-all',\n    color: '#16baaa',\n    predefine: true,\n    alpha: true,\n    done: function(color){\n      layer.msg('选择的值：'+ color); // 选择完毕的颜色值\n      \n      // 清空或取消选择时也执行 change\n      color || this.change(color); \n    },\n    change: function(color){\n      // 给当前页面头部和左侧设置主题色\n      $('#ID-colorpicker-demo-all-btn').css('background-color', color);\n    },\n    cancel: function(color){ // 取消颜色选择的回调 --- 2.8+\n      this.change(color);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Including Horizontal Alignment Configuration Example\nDESCRIPTION: Provides a snippet to include different horizontal alignment options for dropdown menus, demonstrating layout customization. Depends on the content in '/dropdown/examples/align.md'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/align.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Embedding a video in iframe with layui layer.open\nDESCRIPTION: This snippet opens a non-closable iframe layer displaying a Youku video embedded via URL. It uses specific size and shade settings, disabling the close button for the iframe popup, with an informational message prompting users that clicking outside will close the layer. Dependencies: layui.js layer module. Main parameters include content URL, size, overlay opacity, and control buttons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/iframe.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 2,\n  title: false,\n  area: ['630px', '360px'],\n  shade: 0.8,\n  closeBtn: 0,\n  shadeClose: true,\n  content: '//player.youku.com/embed/XMzI1NjQyMzkwNA=='\n});\nlayer.msg('点击遮罩区域可关闭');\n```\n\n----------------------------------------\n\nTITLE: layui Form with Custom Checkbox Skins (Tag Style)\nDESCRIPTION: This HTML snippet defines a layui form containing a set of checkboxes with custom \"tag\" skins. Similar to the card style, it uses `lay-skin=\"none\"` to remove default styling and applies custom CSS classes (`lay-skin-tag layui-badge`) for the tag-like appearance.  This example showcases a simpler visual representation for each checkbox.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkbox.skin.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <h3 class=\"ws-bold\">自定义“标签风格”的多选组件</h3>\n  <div>\n    <input type=\"checkbox\" name=\"hobby[0]\" value=\"唱\" lay-skin=\"none\" checked>\n    <div lay-checkbox class=\"lay-skin-tag layui-badge\">唱</div>\n    <input type=\"checkbox\" name=\"hobby[1]\" value=\"跳\" lay-skin=\"none\" checked>\n    <div lay-checkbox class=\"lay-skin-tag layui-badge\">跳</div>\n    <input type=\"checkbox\" name=\"hobby[2]\" value=\"rap\" lay-skin=\"none\">\n    <div lay-checkbox class=\"lay-skin-tag layui-badge\">rap</div>\n    <input type=\"checkbox\" name=\"hobby[3]\" value=\"篮球\" lay-skin=\"none\">\n    <div lay-checkbox class=\"lay-skin-tag layui-badge\">篮球</div>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Including Context Menu Dropdown Example\nDESCRIPTION: Demonstrates integrating a right-click context menu within dropdown components via template inclusion of '/dropdown/examples/contextmenu.md'. Assumes support for context menu logic and hot-spot configuration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/contextmenu.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Layui 组件事件注册与回调（JavaScript）\nDESCRIPTION: 使用 tabs.on 注册组件事件，响应组件渲染等生命周期钩子。依赖于组件已定义的事件列表。event(id) 为事件格式，callback 为事件回调。用于扩展组件行为，回调参数与事件类型相关，需根据组件文档确定。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例：\n// 组件渲染成功后的事件\ntabs.on('afterRender(id)', function(data) {\n  console.log(obj);\n});\n```\n\n----------------------------------------\n\nTITLE: Comment Tag {{# }} for Non-Output Annotations in Modern Layui Templates (2.11+) with JavaScript\nDESCRIPTION: Describes the use of the {{# }} tag as a comment tag in Layui templates starting from version 2.11 when `tagStyle: 'modern'` is set. It embeds comments that appear in the template source but are not rendered in the final output HTML. Without modern tag style enabled, this tag behaves like the old scriptlet tag. This improves template readability and maintenance without affecting output.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{# Comment text here }}\n```\n\n----------------------------------------\n\nTITLE: 自定义动态点缀示例及事件绑定 - JavaScript 和 HTML\nDESCRIPTION: 该示例展示如何通过lay-affix=\"customName\"属性实现自定义动态点缀功能，其中customName对应图标类layui-icon-后缀名。用户可自定义点缀图标及其交互行为。配合form.on('input-affix(filter)', callback)事件监听器，绑定点缀图标点击事件，callback参数包含当前输入框DOM元素和点缀名称，可执行自定义逻辑。示例依赖Layui的form模块及icon图标资源。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('input-affix(filter)', function(data){\n  var elem = data.elem; // 获取输入框 DOM 对象\n  var affix = data.affix; // 获取输入框 lay-affix 属性值\n  console.log(this); // 当前触发点缀事件的图标元素\n});\n```\n\n----------------------------------------\n\nTITLE: Layui Datepicker HTML Structure\nDESCRIPTION: This HTML snippet defines the structure for multiple Layui datepicker input fields, each bound to a different ID. These IDs are used in the JavaScript code to initialize and configure the corresponding datepickers. The labels provide context for each datepicker, explaining its specific functionality (e.g., initial value, callback, custom event).\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/more.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">初始赋值</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-value\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">选中后的回调</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-done\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期切换的回调</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-change\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">不出现底部栏</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-bottom\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">只出现确定按钮</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-btns\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">自定义事件</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-trigger\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\" id=\"ID-laydate-more-event-1\">点我触发</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-event\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\" id=\"ID-laydate-more-dblclick\">双击我触发</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-dblclick-input\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期只读</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-readonly\" readonly placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">非 input 元素</label>\n      <div class=\"layui-input-inline\">\n        <div id=\"ID-laydate-more-div\" style=\"height: 38px; line-height: 38px; cursor: pointer; border-bottom: 1px solid #e2e2e2;\"></div>\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">开启遮罩</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-shade\" readonly placeholder=\"yyyy-MM-dd\">\n      </div>\n      <div class=\"layui-form-mid layui-text-em\">\n        <sup>2.8+</sup>\n      </div>\n    </div>\n  </div>\n</div>\n<h5 style=\"margin-bottom: 15px; font-weight: 700;\">\n  覆盖实例与解除实例 <sup>2.8+</sup> : \n</h5>\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <div class=\"layui-form-label\" style=\"padding: 0; text-align: left;\">\n        <select lay-filter=\"filter-demo-laydate-reset\">\n          <option value=\"year\">年份</option>\n          <option value=\"month\">月份</option>\n          <option value=\"date\" selected>日期</option>\n          <option value=\"time\">时间</option>\n          <option value=\"other\">解除</option>\n        </select>\n      </div>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-more-reset\" autocomplete=\"off\">\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining the HTML Placeholder for a Layui Table\nDESCRIPTION: This snippet defines an empty HTML `<table>` element with the class `layui-hide` and a unique ID (`ID-table-demo-page`). This element serves as the container where the Layui table component will be rendered dynamically using JavaScript.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/page.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-table-demo-page\"></table>\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Functions for Tree Node Operations in layui TreeTable (JavaScript)\nDESCRIPTION: This snippet sets up callback functions such as 'beforeExpand' and 'onExpand' to handle events triggered before and after a node expands or collapses. These functions facilitate custom logic, such as validation or additional actions, during node interaction events.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: {\n    callback: {\n      beforeExpand: function(tableId, trData, expandFlag){\n        console.log(arguments);\n        // Return false to cancel expansion\n      },\n      onExpand: function(tableId, trData, expandFlag){\n        console.log(arguments);\n        // Post-expansion callback\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting RGB/RGBA Color Format\nDESCRIPTION: This snippet demonstrates how to configure the Layui Colorpicker to use RGB or RGBA color formats. It shows how to set the initial color in RGB or RGBA format and how to enable the alpha transparency slider.  The `format` option is set to `'rgb'` and `alpha` option is set to `true` to enable these features.  Two color pickers are initialized, one for RGB and the other for RGBA.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-colorpicker-demo-rgb\"></div>\n<div id=\"ID-colorpicker-demo-rgba\" style=\"margin-left: 16px;\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n\n  // 渲染\n  colorpicker.render({ // eg1\n    elem: '#ID-colorpicker-demo-rgb',\n    color: 'rgb(68,66,66)',\n    format: 'rgb' // 默认为 hex\n  }); \n  colorpicker.render({ // eg2\n    elem: '#ID-colorpicker-demo-rgba',\n    color: 'rgba(68,66,66,0.5)',\n    format: 'rgb',\n    alpha: true // 开启透明度滑块\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Card-Style Checkbox and Radio Components with Layui - CSS\nDESCRIPTION: This CSS snippet provides styles for implementing card-style checkbox and radio button UI components in Layui forms. It defines the main layout, visual response to checked, hovered, and disabled states, and styles for card layout elements such as avatars, headers, and descriptions. The styles expect certain class names from Layui and require the developer to supply appropriate HTML structure; there are no external dependencies beyond Layui's class conventions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkboxAndRadio.style.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.layui-form-checkbox>.lay-skin-checkcard,\n.layui-form-radio>.lay-skin-checkcard {\n  display: table;\n  display: flex;\n  padding: 12px;\n  white-space: normal;\n  border-radius: 10px;\n  border: 1px solid #e5e5e5;\n  color: #000;\n  background-color: #fff;\n}\n\n.layui-form-checkbox>.lay-skin-checkcard>*,\n.layui-form-radio>.lay-skin-checkcard>* {\n  /* display: table-cell; */  /* IE */\n  vertical-align: top;\n}\n\n.layui-form-checkbox:hover>.lay-skin-checkcard,\n.layui-form-radio:hover>.lay-skin-checkcard {\n  border-color: #16b777;\n}\n\n.layui-form-checked>.lay-skin-checkcard,\n.layui-form-radioed[lay-skin=\"none\"]>.lay-skin-checkcard {\n  color: #000;\n  border-color: #16b777;\n  background-color: rgb(22 183 119 / 10%) !important;\n  /* box-shadow: 0 0 0 3px rgba(22, 183, 119, 0.08); */\n}\n\n.layui-checkbox-disabled>.lay-skin-checkcard,\n.layui-radio-disabled>.lay-skin-checkcard {\n  box-shadow: none;\n  border-color: #e5e5e5 !important;\n  background-color: #eee !important;\n}\n\n.lay-skin-checkcard-avatar {\n  padding-right: 8px;\n}\n\n.lay-skin-checkcard-detail {\n  overflow: hidden;\n  width: 100%;\n}\n\n.lay-skin-checkcard-header {\n  font-weight: 500;\n  font-size: 16px;\n  white-space: nowrap;\n  margin-bottom: 4px;\n}\n\n.lay-skin-checkcard-description {\n  font-size: 13px;\n  color: #5f5f5f;\n}\n.layui-disabled  .lay-skin-checkcard-description{\n  color: #c2c2c2! important;\n}\n\n.layui-form-checked>.lay-check-dot:after,\n.layui-form-radioed>.lay-check-dot:after {\n  position: absolute;\n  content: \"\";\n  top: 2px;\n  right: 2px;\n  width: 0;\n  height: 0;\n  display: inline-block;\n  vertical-align: middle;\n  border-width: 10px;\n  border-style: dashed;\n  border-color: transparent;\n  border-top-left-radius: 0px;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: 6px;\n  border-top-color: #16b777;\n  border-top-style: solid;\n  border-right-color: #16b777;\n  border-right-style: solid;\n  overflow: hidden;\n}\n\n.layui-checkbox-disabled>.lay-check-dot:after,\n.layui-radio-disabled>.lay-check-dot:after {\n  border-top-color: #d2d2d2;\n  border-right-color: #d2d2d2;\n}\n\n.layui-form-checked>.lay-check-dot-2:before,\n.layui-form-radioed>.lay-check-dot-2:before {\n  position: absolute;\n  font-family: \"layui-icon\";\n  content: \"\\e605\";\n  color: #fff;\n  bottom: 4px;\n  right: 3px;\n  font-size: 9px;\n  z-index: 12;\n}\n\n.layui-form-checked>.lay-check-dot-2:after,\n.layui-form-radioed>.lay-check-dot-2:after {\n  position: absolute;\n  content: \"\";\n  bottom: 2px;\n  right: 2px;\n  width: 0;\n  height: 0;\n  display: inline-block;\n  vertical-align: middle;\n  border-width: 10px;\n  border-style: dashed;\n  border-color: transparent;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 6px;\n  border-bottom-left-radius: 0px;\n  border-right-color: #16b777;\n  border-right-style: solid;\n  border-bottom-color: #16b777;\n  border-bottom-style: solid;\n  overflow: hidden;\n}\n\n.layui-checkbox-disabled>.lay-check-dot-2:before,\n.layui-radio-disabled>.lay-check-dot-2:before {\n  color: #eee !important;\n}\n\n.layui-checkbox-disabled>.lay-check-dot-2:after,\n.layui-radio-disabled>.lay-check-dot-2:after {\n  border-bottom-color: #d2d2d2;\n  border-right-color: #d2d2d2;\n}\n\n.lay-ellipsis-multi-line {\n  overflow: hidden;\n  word-break: break-all;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date Formats with Layui Util\nDESCRIPTION: Demonstrates the use of Layui's util.toDateString method to format the current date according to a user-specified format string. The function updates in real-time as the user modifies the format pattern.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 转换日期格式\nvar toDateString = function(format){\n  var dateString = util.toDateString(new Date(), format); // 执行转换日期格式的方法\n  $('#test6').html(dateString);\n};\ntoDateString($('#test5').val());\n// 输入框事件\n$('#test5').on('input propertychange', function(){\n  toDateString(this.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Input Fields for Layui Date Pickers (HTML)\nDESCRIPTION: This HTML snippet defines several input fields within a Layui form structure. Each input field has a unique ID used by JavaScript to attach a themed Layui date picker. It utilizes standard Layui CSS classes for layout and styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/theme.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">墨绿主题</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-theme-molv\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">自定义颜色主题</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-theme-color\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">格子主题</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-theme-grid\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <!--<div class=\"layui-inline\">\n      <label class=\"layui-form-label\">圆圈高亮主题</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-theme-circle\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>-->\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">混合主题</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-theme-multi\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Properties via Attributes in HTML\nDESCRIPTION: Details the use of attributes like lay-percent and lay-showpercent to define the progress percentage and display of the progress value respectively. These attributes are essential for customizing progress bar presentation.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: HTML Structure for Multi-File Upload Interface using Layui\nDESCRIPTION: This snippet defines the HTML layout for a multi-file upload section, including a button for file selection, a table displaying file info and progress bars, and an action button to start uploading. It establishes the visual components necessary for user interactions and file management.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/files.table.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-upload\">\n  <button type=\"button\" class=\"layui-btn layui-btn-normal\" id=\"ID-upload-demo-files\">选择多文件</button> \n  <div class=\"layui-upload-list\">\n    <table class=\"layui-table\">\n      <colgroup>\n        <col style=\"min-width: 100px;\">\n        <col width=\"150\">\n        <col width=\"260\">\n        <col width=\"150\">\n      </colgroup>\n      <thead>\n        <th>文件名</th>\n        <th>大小</th>\n        <th>上传进度</th>\n        <th>操作</th>\n      </thead>\n      <tbody id=\"ID-upload-demo-files-list\"></tbody>\n    </table>\n  </div>\n  <button type=\"button\" class=\"layui-btn\" id=\"ID-upload-demo-files-action\">开始上传</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: 启用数字输入框动态点缀功能 - HTML\nDESCRIPTION: 该代码片段演示通过设置lay-affix=\"number\"属性激活数字输入框动态点缀功能，替代原生type=\"number\"输入框。支持步长(step)、最小值(min)、最大值(max)、小数精度(lay-precision)、步长限制(lay-step-strictly)以及鼠标滚轮开启(lay-wheel)等属性。示例展示多种配置场景，适用灵活控制数字输入交互和数据有效范围。依赖Layui框架解析lay-affix属性并提供交互支持。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"number\" lay-affix=\"number\" placeholder=\"\" value=\"0\" class=\"layui-input\">\n  <hr class=\"ws-space-16\">\n  <div class=\"layui-row layui-col-space16\">\n    <div class=\"layui-col-xs6\">\n      <input type=\"text\" lay-affix=\"number\" placeholder=\"设置 step 为 0.01\" step=\"0.01\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-col-xs6\">\n      <input type=\"text\" lay-affix=\"number\" placeholder=\"设置 step,min,max\" step=\"10\" min=\"0\" max=\"100\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-col-xs6\">\n      <input type=\"text\" lay-affix=\"number\" placeholder=\"步长严格模式\" lay-step-strictly step=\"10\" min=\"0\" max=\"100\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-col-xs4\">\n      <input type=\"text\" lay-affix=\"number\" placeholder=\"设置小数位精度为 2\" step=\"0.1\" lay-precision=\"2\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-col-xs4\">\n      <input type=\"text\" lay-affix=\"number\" readonly placeholder=\"不允许输入状态\" class=\"layui-input\">\n    </div>\n    <div class=\"layui-col-xs4\">\n      <input type=\"text\" lay-affix=\"number\" disabled placeholder=\"禁用状态\" class=\"layui-input\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Tab Style with HTML\nDESCRIPTION: This snippet demonstrates the basic structure for a default-styled tab component.  It includes the necessary HTML elements for the tab titles and content, using the `layui-tab` class for the container, `layui-tab-title` for the titles, and `layui-tab-content` for the content areas. The `layui-this` class indicates the active tab and `layui-tab-item` and `layui-show` is needed for the content section.  This example requires the Layui CSS and JavaScript files to be included in the project.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <textarea>\n<div class=\"layui-tab\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\">标签1</li>\n    <li>标签2</li>\n    <li>标签3</li>\n    <li>标签4</li>\n    <li>标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">内容-1</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n<!-- import layui -->\n  </textarea>\n```\n\n----------------------------------------\n\nTITLE: 实现输入框内容清除动态点缀 - HTML\nDESCRIPTION: 该代码片段利用lay-affix=\"clear\"属性为普通文本输入框添加内容清除功能。Layui框架会根据该属性在输入框内部添加清除按钮，用户可快速擦除输入内容。示例展示普通、默认值、禁用和只读状态下的输入框效果，兼容不同状态的交互限制。该功能依赖layui-input-wrap容器和Layui动态绑定机制。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" lay-affix=\"clear\" placeholder=\"请输入\" class=\"layui-input\">\n  </div>\n  <hr class=\"ws-space-16\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" value=\"默认有值状态\" lay-affix=\"clear\" class=\"layui-input\">\n  </div>\n  <hr class=\"ws-space-16\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" value=\"禁用状态时\" lay-affix=\"clear\" disabled class=\"layui-input\">\n  </div>\n  <hr class=\"ws-space-16\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" value=\"只读状态时\" lay-affix=\"clear\" readonly class=\"layui-input\">\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Parsing Changelog Links in Layui Documentation - JavaScript\nDESCRIPTION: This JavaScript snippet parses the Layui changelog to identify and convert specific patterns (e.g., Gitee issue links, GitHub pull request links, commit hashes, and usernames) into clickable hyperlinks. It targets <li> and <p> elements within the '#WS-text' container.  It dynamically creates <a> tags and inserts them into the document to replace the original text. This assumes the code will execute in a browser context.\nSOURCE: https://github.com/layui/layui/blob/main/docs/versions/2.9.x.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function() {\n  // 解析更新日志关联链接\n  var elem = document.querySelectorAll('#WS-text li, #WS-text p');\n  var types = [\n    { rule: /(#)Gitee-(\\S+)/g, href: 'https://gitee.com/layui/layui/issues/'},\n    { rule: /(#)(\\d+)/g, href: 'https://github.com/layui/layui/pull/' },\n    { rule: /\\[()([\\d\\w]+)\\]/g, href: 'https://github.com/layui/layui/commit/' },\n    { rule: /(@)(\\S+)/g, href: 'https://github.com/' }\n  ];\n  elem.forEach(function (item) {\n    item.childNodes.forEach(function (node) {\n      if (node.nodeType === 3) {\n        var nodeValue = node.nodeValue;\n        var i = 0;\n        var sNode = document.createElement('span');\n        for (; i < types.length; i++) {\n          if (types[i].rule.test(nodeValue)) {\n            nodeValue = nodeValue.replace(types[i].rule, function(s, s1, s2) {\n              return '<a href=\"'+ types[i].href + s2 +'\" target=\"_blank\">'+ s1 + s2 +'</a>';\n            });\n            node.matched = true;\n          }\n        }\n        if (node.matched) {\n          sNode.innerHTML = nodeValue;\n          node.parentNode.insertBefore(sNode, node);\n          node.parentNode.removeChild(node);\n        }\n      }\n    });\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Layui Date Picker Form Structure in HTML\nDESCRIPTION: HTML markup that defines a Layui form containing three date input fields. Each input field has the 'demo-laydate-item' class that will be targeted by the date picker initialization script.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/elem.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <input type=\"text\" class=\"layui-input demo-laydate-item\" lay-options=\"{}\" placeholder=\"yyyy-MM-dd\">\n    </div>\n    <div class=\"layui-inline\">\n      <input type=\"text\" class=\"layui-input demo-laydate-item\" lay-options=\"{}\" placeholder=\"yyyy-MM-dd\">\n    </div>\n    <div class=\"layui-inline\">\n      <input type=\"text\" class=\"layui-input demo-laydate-item\" lay-options=\"{}\" placeholder=\"yyyy-MM-dd\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons for Layui Tooltip Examples (HTML)\nDESCRIPTION: This HTML snippet defines a container with several buttons. Each button uses Layui CSS classes (`layui-btn`, `layui-btn-primary`) and a custom attribute `lay-on` to bind specific JavaScript actions defined elsewhere for demonstrating Layui's tooltip functionality.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/tips.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-top\">显示在上</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-right\">显示在右</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-bottom\">显示在下</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-left\">显示在左</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-color\">自定义背景色</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-tips-more\">允许多个 tips</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Titles and Dimensions in Layui Transfer Component\nDESCRIPTION: Shows how to customize the titles of the transfer boxes and define specific dimensions. Sets custom titles for the boxes and defines a custom height for the component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo-title\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"李白\"},\n    {\"value\": \"2\", \"title\": \"杜甫\"},\n    {\"value\": \"3\", \"title\": \"苏轼\"},\n    {\"value\": \"4\", \"title\": \"李清照\"},\n    {\"value\": \"5\", \"title\": \"鲁迅\", \"disabled\": true},\n    {\"value\": \"6\", \"title\": \"巴金\"},\n    {\"value\": \"7\", \"title\": \"冰心\"},\n    {\"value\": \"8\", \"title\": \"矛盾\"},\n    {\"value\": \"9\", \"title\": \"贤心\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-title',\n    title: ['候选文人', '获奖文人'],  //自定义标题\n    data: data,\n    // width: 150, // 定义宽度\n    height: 210 // 定义高度\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Opening Layui Layer Disabling Scrollbar JavaScript\nDESCRIPTION: This event handler for 'test-more-scrollbar' opens a simple Layui layer. The `scrollbar: false` option is specifically set to prevent the browser's main scrollbar from appearing or being usable while this particular layer instance is open, automatically restoring it when the layer is closed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'test-more-scrollbar': function(){\n  layer.open({\n    content: '浏览器滚动条已暂时屏蔽，关闭弹层后自动恢复',\n    scrollbar: false\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interdependent Layui Modules for Merging in JavaScript\nDESCRIPTION: Illustrates the definition of multiple related Layui modules (`mod1`, `mod2`, `index`/`main`) where dependencies exist between them (`mod2` depends on `mod1` and `form`; `index` depends on `mod2`). This structure is commonly used when planning to merge these separate module files into a single file (e.g., `index.js`) using build tools like Gulp, optimizing resource loading by reducing HTTP requests.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// mod1.js\nlayui.define('layer', function(exports){\n  // …\n  exports('mod1', {});\n});\n\n// mod2.js，假设依赖 mod1 和 form\nlayui.define(['mod1', 'form'], function(exports){\n  // …\n  exports('mod2', {});\n});\n\n// mod3.js\n// …\n\n// index.js 主入口模块\nlayui.define('mod2', function(exports){\n  // …\n  exports('main', {});\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Hints in laydate Component\nDESCRIPTION: Shows how to use the hint method to display a custom tooltip in the date picker panel. The method requires the component ID and supports setting custom content and display duration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar laydate = layui.laydate;\n// 渲染\nlaydate.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 弹出提示\nlaydate.hint('test', {\n  content: '提示内容'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Instance of laydate Component\nDESCRIPTION: Demonstrates how to retrieve the instance object of a specific laydate component using the getInst method, which requires the component ID. This allows access to the instance's properties and methods.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar laydate = layui.laydate;\n// 渲染\nlaydate.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 获取对应的实例\nvar inst = laydate.getInst('test');\nconsole.log(inst); // 实例对象\n```\n\n----------------------------------------\n\nTITLE: Legacy Template Syntax in Layui\nDESCRIPTION: Template code demonstrating the legacy syntax for Layui's template engine, showing escaped and raw output, conditional statements, and loops with forEach, using the older #-prefixed syntax.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"ID-tpl-template-legacy\">\n<p>转义输出：{{= d.desc }}</p>\n<p>原文输出：{{- d.desc }}</p>\n<p>\n  条件语句：\n  {{= d.list.length ? d.title : '' }}\n  {{#if(d.title){}} - #AAAA{{='A'}}{{#}}}\n</p>\n<p>循环语句：</p>\n<ul>\n{{#d.list.forEach(function(item) { }}\n  <li>\n    <span>{{= item.title }}</span>\n    <span>{{= item.name }}</span>\n  </li>\n{{#}); }}\n</ul>\n{{#if (d.list.length === 0) { }}\n  无数据\n{{#} }}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Get Node Data by Index in TreeTable - JavaScript\nDESCRIPTION: This snippet shows how to obtain data for a row in a Layui TreeTable using its index. The `getNodeDataByIndex` function retrieves data for the specified row, providing the same data format as the `treeTable.getData()` method.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 获取树表对应下标的数据\nvar obj = treeTable.getNodeDataByIndex('test', 0); // 获取第一行的数据\nconsole.log(obj);\n```\n\n----------------------------------------\n\nTITLE: Header Method Rendering Example - Layui JavaScript\nDESCRIPTION: This code snippet demonstrates how to render header tabs using the method rendering approach in Layui. It shows how to define an array of objects, where each object represents a tab header with a title.  The 'title' property is a required field, and other arbitrary fields can also be included.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nheader: [\n  { title: 'Tab1' }, // 除 `title` 为必传项外，也可传入其他任意字段。\n  { title: 'Tab2' }\n]\n```\n\n----------------------------------------\n\nTITLE: Auto-adjusting iframe Layer Height in Layui\nDESCRIPTION: Demonstrates how to make an iframe layer's height automatically adjust to its content using layer.iframeAuto(). This is useful for dynamic content that might change in size.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 2, // iframe 层\n  content: '/layer/test/iframe.html',\n  area: '600px', // 弹层初始宽度\n  success: function(layero, index, that){\n    layer.iframeAuto(index); // 让 iframe 高度自适应\n    that.offset(); // 重新自适应弹层坐标\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying All Controls in Layui Laypage using JavaScript\nDESCRIPTION: Configures laypage to display all available controls (count, prev, page, next, limit, refresh, skip) by specifying them in the `layout` array. The `jump` callback logs the pagination object to the console on page change. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-all\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 完整显示\n  laypage.render({\n    elem: 'demo-laypage-all', // 元素 id\n    count: 100, // 数据总数\n    layout: ['count', 'prev', 'page', 'next', 'limit', 'refresh', 'skip'], // 功能布局\n    jump: function(obj){\n      console.log(obj);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Date Picker Form Layout in HTML using Layui\nDESCRIPTION: HTML markup that creates a form layout for various date picker inputs using Layui's form component classes. The layout includes single date/time fields and range fields with appropriate IDs that will be used for JavaScript initialization.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/shortcut.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-date\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年份</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-year\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年月</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-month\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">时间</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-time\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期时间</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-datetime\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期时间全面板</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-datetime-fullPanel\">\n      </div>\n    </div>\n    <hr>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">日期范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-range-date\" placeholder=\" - \">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年份范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-range-year\" placeholder=\" - \">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">年月范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-range-month\" placeholder=\" - \">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">时间范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-range-time\" placeholder=\" - \">\n      </div>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">日期时间范围</label>\n    <div class=\"layui-input-block\">\n      <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-shortcut-range-datetime\" placeholder=\" - \">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Layui Module Definition Callback in JavaScript\nDESCRIPTION: Illustrates how to obtain the original callback function used when defining a specific module (e.g., 'demo') using the `layui.factory(mod)` method. This allows retrieving the function passed to `layui.define` for potential re-execution.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar demoCallback = layui.factory('demo'); // 得到定义 demo 模块时的 `callback`\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Layui Table Embedded Form\nDESCRIPTION: This script block defines an HTML template used by Layui's `table` module via the `templet` option. It renders a small form with two input fields and a submit button within a table cell. The form uses Layui components (`layui-form`, `layui-input-wrap`, `layui-input`, `layui-btn`) and includes data binding for input values (`{{= d.field_name || '' }}`) and a submit filter (`lay-filter`).\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/css.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{{!\n    <div class=\"layui-form layui-form-testcss\">\n      <div class=\"layui-input-wrap\">\n        <input name=\"AAA\" value=\"{{= d.AAA || '' }}\" lay-affix=\"clear\" placeholder=\"表单 1\" class=\"layui-input\" >\n      </div>\n      <div class=\"layui-input-wrap\">\n        <input name=\"BBB\" value=\"{{= d.BBB || '' }}\" lay-affix=\"clear\" placeholder=\"表单 2\" class=\"layui-input\" >\n      </div>\n      <div>\n        <button class=\"layui-btn layui-btn-fluid\" lay-submit lay-filter=\"demo-css-submit\">确认</button>\n      </div>\n    </div>\n  !}}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Trigger Buttons in Layui HTML\nDESCRIPTION: This snippet provides the HTML structure for three Layui-styled buttons, each acting as a dropdown trigger with a distinct user-event interaction (hover, mousedown, or double-click) set via the 'lay-options' attribute. The buttons use specific Layui classes for consistent styling and icon integration, preparing each for JavaScript-based dropdown functionality. No dependencies are required to render the HTML, but proper Layui JavaScript setup is necessary for dropdown behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/on.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-on\" lay-options=\"{trigger: 'hover'}\">\n    hover\n    <i class=\"layui-icon layui-icon-more-vertical layui-font-12\"></i>\n  </button>\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-on\" lay-options=\"{trigger: 'mousedown'}\">\n    mousedown\n    <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n  </button>\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-on\" lay-options=\"{trigger: 'dblclick'}\">\n    dblclick - 双击\n    <i class=\"layui-icon layui-icon-circle layui-font-12\"></i>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Get Node Information by ID in TreeTable - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a specific node's information set from a Layui TreeTable by its ID. The `getNodeById` method is utilized to fetch the node data based on the provided ID.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 获取节点信息集\nvar obj = treeTable.getNodeById('test', 1);\nconsole.log(obj);\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Callbacks in Layui Transfer Component\nDESCRIPTION: Shows how to use the onchange callback to handle transfer events. Displays an alert with the data being transferred and the direction of the transfer.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/demo.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-transfer-demo-onchange\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var transfer = layui.transfer;\n  var layer = layui.layer;\n\n  // 数据\n  var data = [\n    {\"value\": \"1\", \"title\": \"李白\"},\n    {\"value\": \"2\", \"title\": \"杜甫\"},\n    {\"value\": \"3\", \"title\": \"苏轼\"},\n    {\"value\": \"4\", \"title\": \"李清照\"},\n    {\"value\": \"5\", \"title\": \"鲁迅\", \"disabled\": true},\n    {\"value\": \"6\", \"title\": \"巴金\"},\n    {\"value\": \"7\", \"title\": \"冰心\"},\n    {\"value\": \"8\", \"title\": \"矛盾\"},\n    {\"value\": \"9\", \"title\": \"贤心\"}\n  ];\n\n  // 渲染\n  transfer.render({\n    elem: '#ID-transfer-demo-onchange',\n    data: data,\n    onchange: function(obj, index){\n      var arr = ['左边', '右边'];\n       // 查看被穿梭时的数据 --  仅用于演示\n      layer.alert('来自 <strong>'+ arr[index] + '</strong> 的数据：'+ JSON.stringify(obj));\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Year Picker in JavaScript\nDESCRIPTION: Initializes a Layui year picker widget tied to an input element with the id 'ID-laydate-type-year'. Uses Layui's laydate.render() method with the 'year' type to allow users to select only the year component. Relies on the Layui framework being loaded and accessible via the layui.laydate module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/type.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlaydate.render({\n  elem: '#ID-laydate-type-year',\n  type: 'year'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated Data Table with Layui - HTML\nDESCRIPTION: This HTML snippet configures a data table using Layui's table component by assigning the class 'layui-table' and specifying the table's data source, height, and pagination options through the 'lay-data' attribute. Each <th> element defines column properties like field name, width, and sorting behavior using the 'lay-data' attribute. Required dependencies include the Layui JavaScript and CSS assets, and the table expects data in JSON format from the provided URL. The element with id 'ID-table-demo-init' will be transformed by Layui into an interactive table; the snippet assumes the Layui library will be properly loaded and initialized elsewhere.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/autoRender.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-table\" lay-data=\"{height:315, url:'/static/json/2/table/user.json', page:true}\" id=\"ID-table-demo-init\">\n  <thead>\n    <tr>\n      <th lay-data=\"{field:'id', width:80, sort: true}\">ID</th>\n      <th lay-data=\"{field:'username', width:80}\">用户名</th>\n      <th lay-data=\"{field:'sex', width:80, sort: true}\">性别</th>\n      <th lay-data=\"{field:'city'}\">城市</th>\n      <th lay-data=\"{field:'sign'}\">签名</th>\n      <th lay-data=\"{field:'experience', sort: true}\">积分</th>\n      <th lay-data=\"{field:'score', sort: true}\">评分</th>\n      <th lay-data=\"{field:'classify'}\">职业</th>\n    </tr>\n  </thead>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Panel with Layui HTML\nDESCRIPTION: Defines a simple standard panel container using Layui classes. The panel serves as a wrapper to contain arbitrary HTML content styled with padding. This snippet requires no JavaScript dependencies and is intended for embedding basic content sections or grouping UI elements within a predefined styled container.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-panel\">\n  <div style=\"padding: 32px;\">面板任意内容</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Layui Date Inputs\nDESCRIPTION: Defines a form with two date input fields using Layui classes; one for Chinese locale and another for English. Inputs include placeholders and unique IDs required for JavaScript initialization.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/normal.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">中文版</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-demo\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">国际版</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-demo-en\" placeholder=\"yyyy-MM-dd\">\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Layui Modules and Setting Up Event Listener JavaScript\nDESCRIPTION: Initializes Layui by loading the 'layer' and 'util' modules. It then sets up a delegated event listener using `util.on` targeting elements with the 'lay-on' attribute. When a click occurs on such an element, the corresponding function defined in the provided object is executed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var layer = layui.layer;\n  var util = layui.util;\n\n  // 事件\n  util.on('lay-on', {\n    // Event handlers for specific lay-on values will be defined here\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: 重构 Layui 已有组件原型方法（JavaScript）\nDESCRIPTION: 演示如何获取已定义 tabs 组件的构造函数，并重写其原型方法（如 xxx），以实现功能性重构。该方式不推荐，因可能影响组件基础稳定性，仅在深度定制或调试场景下使用。使用时请谨慎。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n//  以 tabs 组件为例\nvar tabs = layui.tabs;\n// 获得 tabs 组件构造函数\nvar Class = tabs.Class;\n// 重构 tabs 组件内部的 xxx 方法（不推荐）\nClass.prototype.xxx = function() {\n  // …\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Layui Rate Component in JavaScript\nDESCRIPTION: Demonstrates the fundamental usage of the Layui rate module by rendering a rate component into a specified HTML element using the default options. It requires the Layui library and an empty div element as the target.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({\n    elem: '#ID-rate-demo'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Layui Template Syntax Example\nDESCRIPTION: 这段代码展示了 Layui 模板引擎中新增的界定符风格示例。该语法用于在 Layui 2.11.0 版本中进行模板解析，支持语句、转义输出、原文输出和注释等不同类型的模板操作。\nSOURCE: https://github.com/layui/layui/blob/main/docs/versions.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{!`{{ 语句 }}` `{{= 转义输出 }}` `{{- 原文输出 }}` `{{# 注释 }}`!}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Sub-templates with Include (JavaScript/HTML)\nDESCRIPTION: Shows how to define multiple templates in `<script>` tags (header, list, main). The main template uses the `{{- include('ID', data) }}` directive (available since v2.11+, requires unescaped output tag `{{- }}`) to recursively render the list template and include the header template. Demonstrates passing data to sub-templates and enabling the 'modern' tag style.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"ID-demo-tpl-header\" type=\"text/html\">\n  <div>头部公共模板</div>\n</script>\n<script id=\"ID-demo-tpl-list\" type=\"text/html\">\n  <ul>\n    {{ d.items.forEach(function(item, index) { }}\n      <li>\n        <span>{{= item.title }}</span>\n        {{ if(item.children) { }}\n          {{- include('ID-demo-tpl-list', { items: item.children }) }}\n        {{ } }}\n      </li>\n    {{ }); }}\n  </ul>\n</script>\n<script id=\"ID-demo-tpl-main\" type=\"text/html\">\n  {{- include('ID-demo-tpl-header') }}\n  <h3>循环输出：</h3>\n  {{- include('ID-demo-tpl-list', { items: d.items }) }}\n</script>\n<div id=\"ID-demo-view\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// import layui\nlayui.use(function() {\n  var laytpl = layui.laytpl;\n\n  var template = document.getElementById('ID-demo-tpl-main').innerHTML; // 获取模板字符\n  var target = document.getElementById('ID-demo-view'); // 输出结果的目标元素\n  var data = {\n    items: [{\"title\": \"list 1\", \"children\": [{\"title\": \"list 1-1\", \"children\": [{\"title\": \"list 1-1-1\"}]}, {\"title\": \"list 1-2\"}]},{\"title\": \"list 2\", \"children\": [{\"title\": \"list 2-1\"}]},{\"title\": \"list 3\"}]\n  };\n\n  // 创建模板实例\n  var templateInst = laytpl(template, {\n    tagStyle: 'modern' // 采用新版本的标签风格\n  });\n\n  // 渲染并输出结果\n  templateInst.render(data, function(html) {\n    target.innerHTML = html;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with Themes - HTML\nDESCRIPTION: This snippet demonstrates how to apply different themes to Layui buttons using predefined CSS classes. It showcases default, blue, orange, red, purple, and disabled button styles.  It also demonstrates the usage of primary buttons with different border colors.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn\">默认按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-bg-blue\">蓝色按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-bg-orange\">橙色按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-bg-red\">红色按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-bg-purple\">紫色按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-disabled\">禁用按钮</button>\n</div>\n \n<div class=\"layui-btn-container\">\n  <button class=\"layui-btn layui-btn-primary layui-border-green\">主色按钮</button>\n  <button class=\"layui-btn layui-btn-primary layui-border-blue\">蓝色按钮</button>\n  <button class=\"layui-btn layui-btn-primary layui-border-orange\">橙色按钮</button>\n  <button class=\"layui-btn layui-btn-primary layui-border-red\">红色按钮</button>\n  <button class=\"layui-btn layui-btn-primary layui-border-purple\">紫色按钮</button>\n  <button class=\"layui-btn layui-btn-primary layui-border\">普通按钮</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from a Layui Tabs Instance in JavaScript\nDESCRIPTION: Demonstrates how to retrieve data associated with a specific Layui tabs instance ('test') using the `tabs.data()` method. The returned object contains information like configuration options, container elements, current header/body items, current index, and total tab count. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = tabs.data('test');\nconsole.log(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  options, // 标签配置信息\n  container, // 标签容器的相关元素\n  thisHeaderItem, // 当前标签头部项\n  thisBodyItem, // 当前标签内容项\n  index, // 当前标签索引\n  length, // 当前标签数\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Tab Structure HTML\nDESCRIPTION: This HTML snippet defines the basic structure for Layui tabs. It includes the main container with `lay-allowclose='true'` to enable tab closing, an unordered list (`ul`) for tab titles (`layui-tab-title`) where each list item (`li`) has a `lay-id`, and a content area (`div.layui-tab-content`) containing corresponding content divs (`layui-tab-item`).\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tab\" lay-allowclose=\"true\" lay-filter=\"test-tabs\">\n  <ul class=\"layui-tab-title\">\n    <li lay-id=\"1\" class=\"layui-this\">标签1</li>\n    <li lay-id=\"2\">标签2</li>\n    <li lay-id=\"3\">标签3</li>\n    <li lay-id=\"4\">标签4</li>\n    <li lay-id=\"5\">标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">删除标签，弹出确认提示框</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Device-based Responsive Grid with Layui - HTML\nDESCRIPTION: This snippet shows how to use multiple Layui grid classes for adaptive layouts across devices (phones and desktops). It assigns different column spans on xs and md screens with class combinations like \"layui-col-xs12\" and \"layui-col-md8\". Layui CSS must be loaded. No scripting or special parameters required; expected output is proper rearrangement and resizing of columns per device.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-xs12 layui-col-md8\">\n    <div class=\"grid-demo grid-demo-bg1\">xs:12/12 | md:8/12</div>\n  </div>\n  <div class=\"layui-col-xs6 layui-col-md4\">\n    <div class=\"grid-demo\">xs:6/12 | md:4/12</div>\n  </div>\n  <div class=\"layui-col-xs6 layui-col-md12\">\n    <div class=\"grid-demo grid-demo-bg2\">xs:6/12 | md:12/12</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Trigger Buttons HTML\nDESCRIPTION: Defines a set of standard HTML buttons. Each button includes a 'lay-on' attribute, which acts as a custom data attribute used by Layui's utility module to delegate click events to specific JavaScript functions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-alert\">对话框带图标</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-confirm\">询问框</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-msg-dark\">深色提示框</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-msg-light\">浅色提示框</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-alert-btn\">自定义按钮</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-count-down\">关闭倒计时</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example usage of Layui icons with HTML and inline CSS\nDESCRIPTION: Shows how to embed icons within HTML using <i> tags, applying 'layui-icon' class and additional icon-specific classes. It illustrates customizing icon size and color through inline styles, enabling dynamic styling directly within HTML.\nSOURCE: https://github.com/layui/layui/blob/main/docs/icon/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"layui-icon layui-icon-face-smile\"></i> \\n<div>\\n  你可以去定义它的颜色或者大小，如：  \\n  <i class=\"layui-icon layui-icon-face-smile\" style=\"font-size: 30px; color: #1E9FFF;\"></i> \\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Tab Dynamically to Layui Tabs in JavaScript\nDESCRIPTION: Shows how to add a new tab item to an existing Layui tabs instance, identified by its ID ('test'), using the `tabs.add()` method. The example specifies the `title` and `content` for the new tab. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.add('test', {\n  title: 'New Tab 1',\n  content: 'New Tab Content 1',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Rate with Custom Length in JavaScript\nDESCRIPTION: Shows how to change the total number of stars displayed in the Layui rate component using the `length` option. Provides examples for setting the length to 3 and 10 stars, including setting an initial value. Requires the Layui library and appropriate div elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo-length-1\"></div>\n<hr>\n<div id=\"ID-rate-demo-length-2\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({\n    elem: '#ID-rate-demo-length-1',\n    length: 3\n  });\n  rate.render({\n    elem: '#ID-rate-demo-length-2',\n    length: 10,\n    value: 8 // 初始值\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tab Elements and Custom Styles with HTML\nDESCRIPTION: This HTML and JavaScript snippet demonstrates creating a custom tab component. It uses custom HTML elements (buttons and divs) instead of Layui's default tab structure.  The code defines custom styles, then uses the `element.tab` API to bind the custom elements as tab headers and tab content. It also requires Layui CSS and Javascript files.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n.demo-tab-header .layui-btn.layui-this{border-color: #1E9FFF; color: #1E9FFF;}\n.demo-tab-body>div{display: none;}\n</style>\n<!-- 任意自定义的 tab 元素 -->\n<div class=\"demo-tab-header layui-btn-container\" id=\"tabHeader\">\n  <button class=\"layui-btn layui-btn-primary layui-this\">标签1</button>\n  <button class=\"layui-btn layui-btn-primary\">标签2</button>\n  <button class=\"layui-btn layui-btn-primary\">标签3</button>\n</div>\n<div class=\"demo-tab-body\" id=\"tabBody\">\n  <div class=\"layui-show\">内容-1</div>\n  <div>内容-2</div>\n  <div>内容-3</div>\n</div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var element = layui.element;\n\n  // 绑定自定义的 tab 元素\n  element.tab({\n    headerElem: '#tabHeader>.layui-btn',\n    bodyElem: '#tabBody>div'\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling URL Hash Navigation in Layui Laypage (JavaScript)\nDESCRIPTION: Shows how to enable URL hash-based navigation, allowing the current page state to be reflected in and read from the URL hash. The `hash` option defines the hash key (e.g., `#!curr=3`), and `curr` is initialized by reading the hash value from `location.hash`. Requires the Layui library and its laypage module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-hash\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 开启 HASH\n  laypage.render({\n    elem: 'demo-laypage-hash',\n    count: 500,\n    curr: location.hash.replace('#!curr=', ''), // 初始获取 hash 值为 curr 的当前页\n    hash: 'curr' // 自定义 hash 名称\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Tabs Structure - HTML\nDESCRIPTION: Defines the basic HTML structure required for a Layui Tabs component. It includes a main container with `layui-tabs` class and an ID for referencing, a header list (`layui-tabs-header`) with `lay-id` attributes for each tab, and a body container (`layui-tabs-body`) with `layui-tabs-item` for each tab's content.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/beforeChange.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-hide-v\" id=\"demoTabsBeforeChange\">\n  <ul class=\"layui-tabs-header\">\n    <li lay-id=\"aaa\">Tab1</li>\n    <li lay-id=\"bbb\">Tab2</li>\n    <li lay-id=\"ccc\">Tab3</li>\n    <li lay-id=\"ddd\">Tab4</li>\n    <li lay-id=\"eee\">Tab5</li>\n    <li lay-id=\"fff\">Tab6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item\">Tab Content-1</div>\n    <div class=\"layui-tabs-item\">Tab Content-2</div>\n    <div class=\"layui-tabs-item\">Tab Content-3</div>\n    <div class=\"layui-tabs-item\">Tab Content-4</div>\n    <div class=\"layui-tabs-item\">Tab Content-5</div>\n    <div class=\"layui-tabs-item\">Tab Content-6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Structure with HTML\nDESCRIPTION: This HTML snippet defines the structure of a Layui menu.  It includes various menu item types, such as regular items, dividers, groups, and parent items with nested submenus. It uses Layui classes and `lay-options` attributes for styling and functionality. The input is the HTML structure and the output is the rendered menu in the browser.\nSOURCE: https://github.com/layui/layui/blob/main/docs/menu/examples/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"layui-menu\" id=\"demo-menu\">\n    <li lay-options=\"{id: 100}\">\n      <div class=\"layui-menu-body-title\"><a href=\"javascript:;\">menu item 1</a></div>\n    </li>\n    <li lay-options=\"{id: 101}\">\n      <div class=\"layui-menu-body-title\">\n        <a href=\"javascript:;\">menu item 2 <span class=\"layui-badge-dot\"></span></a>\n      </div>\n    </li>\n    <li class=\"layui-menu-item-divider\"></li>\n    <li class=\"layui-menu-item-group layui-menu-item-down\" lay-options=\"{type: 'group'}\">\n      <div class=\"layui-menu-body-title\">\n        menu group <i class=\"layui-icon layui-icon-up\"></i>\n      </div>\n      <ul>\n        <li lay-options=\"{id: 103}\">\n          <div class=\"layui-menu-body-title\">menu item 3-1</div>\n        </li>\n        <li class=\"layui-menu-item-group\" lay-options=\"{type: 'group', isAllowSpread: false}\">\n          <div class=\"layui-menu-body-title\">menu group 2</div>\n          <ul>\n            <li class=\"layui-menu-item-checked\">\n              <div class=\"layui-menu-body-title\">menu item 3-2-1</div>\n            </li>\n            <li><div class=\"layui-menu-body-title\">menu item 3-2-2</div></li>\n          </ul>\n        </li>\n        <li><div class=\"layui-menu-body-title\">menu item 3-3</div></li>\n      </ul>\n    </li>\n    <li class=\"layui-menu-item-divider\"></li>\n    <li><div class=\"layui-menu-body-title\">menu item 4 <span class=\"layui-badge\">1</span></div></li>\n    <li><div class=\"layui-menu-body-title\">menu item 5</div></li>\n    <li><div class=\"layui-menu-body-title\">menu item 6</div></li>\n    <li class=\"layui-menu-item-parent\" lay-options=\"{type: 'parent'}\">\n      <div class=\"layui-menu-body-title\">\n        menu item 7 Children\n        <i class=\"layui-icon layui-icon-right\"></i>\n      </div>\n      <div class=\"layui-panel layui-menu-body-panel\">\n        <ul>\n          <li class=\"layui-menu-item-parent\" lay-options=\"{type: 'parent'}\">\n            <div class=\"layui-menu-body-title\">\n              menu item 7-1\n              <i class=\"layui-icon layui-icon-right\"></i>\n            </div>\n            <div class=\"layui-panel layui-menu-body-panel\">\n              <ul>\n                <li><div class=\"layui-menu-body-title\">menu item 7-2-1</div></li>\n                <li><div class=\"layui-menu-body-title\">menu item 7-2-2</div></li>\n                <li><div class=\"layui-menu-body-title\">menu item 7-2-3</div></li>\n                <li><div class=\"layui-menu-body-title\">menu item 7-2-4</div></li>\n              </ul>\n            </div>\n          </li>\n          <li><div class=\"layui-menu-body-title\">menu item 7-2</div></li>\n          <li><div class=\"layui-menu-body-title\">menu item 7-3</div></li>\n        </ul>\n      </div>\n    </li>\n    <li>menu item 8</li>\n    <li class=\"layui-menu-item-divider\"></li>\n    <li class=\"layui-menu-item-group\" lay-options=\"{type: 'group', isAllowSpread: false}\">\n      <div class=\"layui-menu-body-title\">menu group 9</div>\n      <ul>\n        <li><div class=\"layui-menu-body-title\">menu item 9-1</div></li>\n        <li class=\"layui-menu-item-parent\" lay-options=\"{type: 'parent'}\">\n          <div class=\"layui-menu-body-title\">\n            menu item 9-2\n            <i class=\"layui-icon layui-icon-right\"></i>\n          </div>\n          <div class=\"layui-panel layui-menu-body-panel\">\n            <ul>\n              <li><div class=\"layui-menu-body-title\">menu item 9-2-1</div></li>\n              <li><div class=\"layui-menu-body-title\">menu item 9-2-2</div></li>\n              <li><div class=\"layui-menu-body-title\">menu item 9-2-3</div></li>\n            </ul>\n          </div>\n        </li>\n        <li><div class=\"layui-menu-body-title\">menu item 9-31</div></li>\n      </ul>\n    </li>\n    <li class=\"layui-menu-item-divider\"></li>\n    <li><div class=\"layui-menu-body-title\">menu item 10</div></li>\n  </ul>\n```\n\n----------------------------------------\n\nTITLE: Using Layui Code Preview Component with HTML Attributes for Configuration\nDESCRIPTION: This snippet illustrates configuring the Layui code preview component by placing JSON-formatted options directly inside an element's 'lay-options' attribute. It shows example code blocks where themes and layout styling are set through these attributes. This approach is an alternative to passing options via JavaScript and allows per-element configuration. The key attributes include 'preview', 'codeStyle', 'layout', and 'theme', which control the preview display, code block height, component layout, and syntax theme respectively.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<pre class=\"layui-code\" lay-options=\"{preview: true, codeStyle: 'height: 315px;', layout: ['code', 'preview']}\"><textarea>\n<pre class=\"layui-code code-demo\" lay-options=\"{}\">\nlight theme\nlight theme\nlight theme\n</pre>\n\n<hr>\n\n<pre class=\"layui-code code-demo\" lay-options=\"{theme: 'dark'}\">\ndark theme\ndark theme\ndark theme\n</pre>\n\n<!-- import layui -->  \n<script>\nlayui.use(function(){\n  // code\n  layui.code({\n    elem: '.code-demo'\n  });\n})\n</script>\n</textarea>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: HTML Button Structure for Layui Layer Demo\nDESCRIPTION: HTML markup defining buttons that trigger different layer theme examples. Each button uses the 'lay-on' attribute to bind click events handled by Layui's util component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/skin.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-skin-alert\">\n    墨绿与深蓝主题\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-skin-win10\">\n    Windows 10 风格信息框 <span class=\"layui-badge-dot\"></span>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-skin-win10-page\">\n    Win10 风格页面层 <span class=\"layui-badge-dot\"></span>\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-skin-custom\">自定义任意主题</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Component Instance Methods in Layui - JavaScript\nDESCRIPTION: Defines an extension method on the component instance by returning an object with additional functions when the component is rendered. The example adds a `close` method that calls the component's original `remove` method. This approach facilitates adding custom instance methods accessible after rendering via the returned object.\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nextendsInstance: function(that) {\n  return {\n    // 关闭组件\n    close: function() {\n      that.remove(); // 调用组件原型中的 remove 方法\n    }\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar inst = xxx.render(); // 某组件渲染\ninst.close(); // 关闭某组件\n```\n\n----------------------------------------\n\nTITLE: Mixing and Matching Button Styles - HTML\nDESCRIPTION: This snippet demonstrates how to mix and match different Layui button styles. It showcases large buttons with rounded corners, buttons with links, and buttons with icons and text.\nSOURCE: https://github.com/layui/layui/blob/main/docs/button/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-lg layui-btn-primary layui-btn-radius\">大型加圆角</button>\n  <a href=\"/\" class=\"layui-btn\" target=\"_blank\">跳转的按钮</a>\n  <button type=\"button\" class=\"layui-btn layui-btn-sm layui-btn-normal\">\n    <i class=\"layui-icon layui-icon-delete\"></i> 删除\n  </button>\n  <button type=\"button\" class=\"layui-btn layui-btn-xs layui-btn-disabled\">\n    <i class=\"layui-icon layui-icon-share\"></i> 分享\n  </button>\n</div> \n```\n\n----------------------------------------\n\nTITLE: Body Method Rendering Example - Layui JavaScript\nDESCRIPTION: This code snippet demonstrates how to render tab content using the method rendering approach within Layui.  It defines an array of objects, where each object represents a tab body with a 'content' property.  The 'content' property is required and specifies the content to be displayed in the tab.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbody: [\n  { content: 'Tab1' }, // `content` 为必传项\n  { content: 'Tab2' }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Alpha Transparency\nDESCRIPTION: This snippet showcases how to enable the alpha transparency slider in the Layui Colorpicker.  The `alpha: true` option enables the slider, allowing users to select a color with transparency. The example shows different ways to specify the color value, including hex and rgba formats, while always using the `rgb` format for the colorpicker output.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/demo.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-colorpicker-demo-alpha-1\"></div>\n<div id=\"ID-colorpicker-demo-alpha-2\" style=\"margin-left: 16px;\"></div>\n<div id=\"ID-colorpicker-demo-alpha-3\" style=\"margin-left: 16px;\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var colorpicker = layui.colorpicker;\n\n  // 渲染\n  colorpicker.render({ // eg1\n    elem: '#ID-colorpicker-demo-alpha-1',\n    color: '#16baaa', // hex\n    alpha: true, // 开启透明度\n    format: 'rgb'\n  });\n  colorpicker.render({ // eg2\n    elem: '#ID-colorpicker-demo-alpha-2',\n    color: 'rgb(0,150,136,0.6)', // rgba\n    alpha: true,\n    format: 'rgb'\n  });\n  colorpicker.render({ // eg3\n    elem: '#ID-colorpicker-demo-alpha-3',\n    alpha: true,\n    format: 'rgb'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropdown Menus with Alignment Options in Layui (JavaScript)\nDESCRIPTION: Uses Layui's dropdown module in JavaScript to render dropdown menus attached to all elements with the class 'demo-dropdown-align'. Dropdown menu data such as item titles and IDs is provided in the configuration. Alignment is handled using the values from each button's 'lay-options' attribute. Dependencies: Layui core JS, 'dropdown' module; expects elements with the correct classes and lay-options in the DOM.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/align.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n\n  // 水平对齐方式\n  dropdown.render({\n    elem: '.demo-dropdown-align',\n    // align: 'center' // align 已配置在元素 `lay-options` 属性上\n    data: [{\n      title: 'menu item test 111',\n      id: 100\n    },{\n      title: 'menu item test 222',\n      id: 101\n    },{\n      title: 'menu item test 333',\n      id: 102\n    }]\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Checkboxes and Edit Icons in Layui Tree (JavaScript/HTML)\nDESCRIPTION: Shows how to display checkboxes next to each node and enable editing icons (add, update, delete) in a Layui tree. Checkboxes are enabled via `showCheckbox: true`, and edit icons are configured using the `edit: ['add', 'update', 'del']` option in `tree.render`. The example data includes pre-checked (`checked:true`) and disabled (`disabled:true`) nodes. Requires the Layui `tree` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tree/detail/demo.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"ID-tree-demo-showCheckbox\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var tree = layui.tree;\n \n  // 模拟数据\n  var data = [{title:'早餐',id:1,children:[{title:'拌粉',id:5},{title:'蒸饺',id:6},{title:'豆浆',id:7}]},{title:'午餐',id:2,checked:true,children:[{title:'藜蒿炒腊肉',id:8},{title:'西湖醋鱼',id:9},{title:'小白菜',id:10},{title:'海带排骨汤',id:11}]},{title:'晚餐',id:3,children:[{title:'红烧肉',id:12,fixed:true},{title:'番茄炒蛋',id:13}]},{title:'夜宵',id:4,children:[{title:'小龙虾',id:14,checked:true},{title:'香辣蟹',id:15,disabled:true},{title:'烤鱿鱼',id:16}]}];\n\n  // 渲染\n  tree.render({\n    elem: '#ID-tree-demo-showCheckbox',\n    data: data,\n    showCheckbox: true,\n    edit: ['add', 'update', 'del'] // 开启节点的右侧操作图标\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Layui JavaScript\nDESCRIPTION: This code snippet includes the Layui JavaScript file in the HTML document, typically from a CDN.  It's required for Layui components and functionality to work.  The dependency is the Layui Javascript file.  It doesn't take any parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/menu/examples/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"{{= d.layui[2].cdn.js }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Ago Functionality with Layui\nDESCRIPTION: Uses Layui's util.timeAgo method to calculate and display how long ago a selected date occurred. The function works with a datetime picker that allows users to select a specific date and time.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 某个时间在多久前\nvar setTimeAgo = function(y, M, d, H, m, s){\n  var str = util.timeAgo(new Date(y, M||0, d||1, H||0, m||0, s||0));\n  lay('#test4').html(str);\n};\nlaydate.render({\n  elem: '#test3',\n  type: 'datetime',\n  done: function(value, date){\n    setTimeAgo(\n      date.year, \n      date.month - 1, \n      date.date, \n      date.hours, \n      date.minutes, \n      date.seconds\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: 扩展 Layui 组件原型方法（JavaScript）\nDESCRIPTION: 展示如何通过 component.Class 构造器扩展或重构组件原型方法。建议避免重写已定义基础方法以免损坏核心功能。通过给 prototype 添加新方法，可为所有实例提供额外行为。依赖组件已构建完成，适用于定制高级特性。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * 定义组件\n */\nlayui.define('component', function(exports) {\n  // 创建组件\n  var component = layui.component({\n    name: '', // 组件名称\n    // …\n  });\n  // 获取构造器\n  var Class = component.Class;\n  // 扩展原型\n  Class.prototype.xxx = function() {\n    // …\n  };\n  Class.prototype.aaa = function() {\n    // …\n  };\n  // 输出组件接口\n  exports(component.CONST.MOD_NAME, component);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering fixbar using util.fixbar() in JavaScript\nDESCRIPTION: This snippet demonstrates how to invoke the util.fixbar() method to render the fixed toolbar on the page. It requires passing an options object that defines the toolbar's appearance and behavior. The options parameter references supplementary property details.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nutil.fixbar(options);\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Layui Template Demo Interface\nDESCRIPTION: CSS styles that format the template demo interface, including panel layouts, text areas, headers, and syntax highlighting for the template code and output display.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/demo.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.laytpl-demo{border: 1px solid #eee;}\n.laytpl-demo:first-child{border-right: none;}\n.laytpl-demo>textarea{position: relative; display: block; width:100%; height: 320px; padding: 11px; border: 0; box-sizing: border-box; resize: none; background-color: #fff; font-family: Courier New; font-size: 13px;}\n.laytpl-demo>div:first-child{height: 32px; line-height: 32px; padding: 6px 11px; border-bottom: 1px solid #eee; background-color: #F8F9FA;}\n.laytpl-demo .layui-tabs{top: -1px;}\n\n#ID-tpl-view-body {\n  max-height: 320px; overflow: auto; clear: both;\n}\n#ID-tpl-view-body > div {\n  display: none;\n}\n.laytpl-demo pre {\n  margin: 0; padding: 16px; background-color: #1F1F1F; color: #F8F9FA; font-family: 'Courier New',Consolas, monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Style in Layui\nDESCRIPTION: Shows how to modify CSS properties of an existing layer using the layer.style() method. This function requires the layer index and CSS properties object, but doesn't work with loading or tips layers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开弹层\nvar index = layer.open({\n  type: 1,\n  content: '内容'\n});\n\n// 重新给对应层设定 width、top 等\nlayer.style(index, {\n  width: '1000px',\n  top: '10px'\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Layui Layer Lock Screen CSS\nDESCRIPTION: This CSS snippet defines styles for creating a custom-looking full-screen Layui layer instance used as a lock screen. It sets background properties, positions the form element using absolute positioning and transform, and styles specific elements like input fields and the suffix icon within the lock screen context.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.class-demo-layer-lockscreen{background: url(https://unpkg.com/outeres@0.0.12/img/wallpaper/001.jpg) #16b777; background-size: cover; color: rgba(255,255,255,1);}\n.class-demo-layer-lockscreen .layui-form{position: absolute; top: 50%; left: 50%; width: 300px; transform: translate(-50%, -50%);}\n.class-demo-layer-lockscreen .layui-form > div{margin-bottom: 8px;}\n.class-demo-layer-pin{width: 100%; height: 38px; padding: 0 8px; background-color: rgba(255,255,255,.8); border: none; border-radius: 3px; box-sizing: border-box;}\n.class-demo-layer-lockscreen .layui-input-suffix{pointer-events: auto; background-color: rgba(0,0,0,.5); border-radius: 0 3px 3px 0;}\n.class-demo-layer-lockscreen .layui-input-suffix .layui-icon-right{cursor: pointer; color: #fff;}\n```\n\n----------------------------------------\n\nTITLE: Implementing Normal Badges in HTML with Layui\nDESCRIPTION: Code snippet demonstrating how to create normal badges in Layui with different numbers and colors. It shows numeric badges, text badges with different background colors, and bordered badges.\nSOURCE: https://github.com/layui/layui/blob/main/docs/badge/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"layui-badge\">6</span>\n<span class=\"layui-badge\">99</span>\n<span class=\"layui-badge\">61728</span>\n<span class=\"layui-badge\">赤</span>\n<span class=\"layui-badge layui-bg-orange\">橙</span>\n<span class=\"layui-badge layui-bg-green\">绿</span>\n<span class=\"layui-badge layui-bg-cyan\">青</span>\n<span class=\"layui-badge layui-bg-blue\">蓝</span>\n<span class=\"layui-badge layui-bg-black\">深</span>\n<span class=\"layui-badge layui-bg-gray\">浅</span>\n \n<hr class=\"ws-space-16\">\n \n边框徽章：\n<span class=\"layui-badge-rim\">6</span>\n<span class=\"layui-badge-rim\">Hot</span>\n```\n\n----------------------------------------\n\nTITLE: Customizing Title Templates for Layui Checkbox\nDESCRIPTION: This code snippet demonstrates the customization of checkbox title templates, allowing the use of custom HTML elements and icons. The code binds a specific attribute `lay-checkbox` to an element adjacent to the checkbox input. Then the custom content can be put inside that element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/checkbox.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <input type=\"checkbox\" name=\"AAA\" value=\"0\">\n    <div lay-checkbox>\n      自定义<a href=\"#target-url\"><ins>标题模板</ins></a>\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <input type=\"checkbox\" name=\"BBB\" value=\"1\" lay-skin=\"tag\">\n    <div lay-checkbox>\n      <i class=\"layui-icon layui-icon-heart\" style=\"position: relative; top: 1px; line-height: normal;\"></i> 标题模板\n    </div>\n  </div>\n  <div class=\"layui-form-item\">\n    <input type=\"checkbox\" name=\"CCC\" value=\"2\" lay-skin=\"switch\">\n    <div lay-checkbox>\n      <i class=\"layui-icon layui-icon-moon\"></i> | \n      <i class=\"layui-icon layui-icon-light\"></i>\n    </div>\n  </div>\n</div>\n\n<!-- import layui -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Datepicker\nDESCRIPTION: This JavaScript code initializes the Layui datepicker for multiple input elements using `laydate.render()`. Each datepicker is configured with different options, such as initial values (`value`, `isInitValue`), event callbacks (`done`, `change`), and UI settings (`showBottom`, `btns`). It also demonstrates how to bind the datepicker to custom events like `mousedown` and `click`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/more.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n  var form = layui.form;\n\n  // 初始赋值\n  laydate.render({\n    elem: '#ID-laydate-more-value',\n    value: '2016-10-14',\n    isInitValue: true\n  });\n  \n  // 选中后的回调\n  laydate.render({\n    elem: '#ID-laydate-more-done',\n    done: function(value, date){\n      layer.alert('你选择的日期是：' + value + '<br>获得的对象是' + JSON.stringify(date));\n    }\n  });\n  \n  // 日期切换的回调\n  laydate.render({\n    elem: '#ID-laydate-more-change',\n    change: function(value, date){\n      layer.msg('你选择的日期是：' + value + '<br><br>获得的对象是' + JSON.stringify(date));\n    }\n  });\n\n  // 不出现底部栏\n  laydate.render({\n    elem: '#ID-laydate-more-bottom',\n    showBottom: false\n  });\n  \n  // 只出现确定按钮\n  laydate.render({\n    elem: '#ID-laydate-more-btns',\n    btns: ['confirm']\n  });\n  \n  // 自定义事件\n  laydate.render({\n    elem: '#ID-laydate-more-trigger',\n    trigger: 'mousedown'\n  });\n  \n  // 点我触发\n  laydate.render({\n    elem: '#ID-laydate-more-event',\n    eventElem: '#ID-laydate-more-event-1',\n    trigger: 'click'\n  });\n  \n  // 双击我触发\n  lay('#ID-laydate-more-dblclick').on('dblclick', function(){\n    laydate.render({\n      elem: '#ID-laydate-more-dblclick-input',\n      show: true,\n      closeStop: '#ID-laydate-more-dblclick',\n    });\n  });\n  \n  // 日期只读\n  laydate.render({\n    elem: '#ID-laydate-more-readonly',\n    trigger: 'click',\n  });\n  \n  // 非 input 元素\n  laydate.render({\n    elem: '#ID-laydate-more-div'\n  });\n\n  // 开启遮罩\n  laydate.render({\n    elem: '#ID-laydate-more-shade',\n    triggdestroyer: 'click',\n    shade: 0.8 // 遮罩透明度 --- 2.8+\n  });\n\n  // 覆盖实例与销毁实例\n  var inst = laydate.render({\n    elem: '#ID-laydate-more-reset'\n  });\n  form.on(\"select(filter-demo-laydate-reset)\", function (obj) {\n    var value = obj.value;\n    var options = inst.config;\n    var elem = options.elem[0];\n\n    if (value === \"other\") {\n      laydate.unbind(options.id); // 解绑实例 --- 2.8+\n      elem.focus();\n    } else {\n      // 覆盖渲染\n      laydate.render({\n        elem: elem,\n        type: value,\n        show: true // 渲染即显示\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Tabs in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to dynamically render the tab component using `element.render('tab', filter)`.  It first initializes the Layui modules required.  It then dynamically inserts the HTML for the tab component into an element with the ID 'test' and then renders the tab, using the `element.render` function. The filter is the value for the `lay-filter` attribute on the `div` containing the tabs. This is necessary for dynamically added tabs that need initialization.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var element = layui.element;\n  var $ = layui.$;\n  // 动态插入 tab 元素\n  $('#test').html(`\n    <div class=\"layui-tab\" lay-filter=\"demo-filter-tab\">\n      <!-- … -->\n    </div>\n  `);\n  // 渲染 tab 组件\n  element.render('tab', 'demo-filter-tab');\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal Lines with Layui Color Classes\nDESCRIPTION: Demonstrates how to create horizontal lines (hr elements) with different color styles in Layui. Shows the default style and various color options including red, orange, green, cyan, blue, and black using Layui's border color classes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/auxiliar/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n默认分割线\n<hr>\n \n赤色分割线\n<hr class=\"layui-border-red\">\n \n橙色分割线\n<hr class=\"layui-border-orange\">\n \n墨绿分割线\n<hr class=\"layui-border-green\">\n \n青色分割线\n<hr class=\"layui-border-cyan\">\n \n蓝色分割线\n<hr class=\"layui-border-blue\">\n \n深色分割线\n<hr class=\"layui-border-black\">\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Asynchronous Loading of Tree Nodes in layui TreeTable (JavaScript)\nDESCRIPTION: This example illustrates how to enable asynchronous loading of tree nodes via the 'async' attribute, specifying API endpoints, request types, headers, and custom format functions for processing loaded data. It supports on-demand data fetching and dynamic node rendering to optimize performance and user interaction.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: {\n    enable: true,\n    async: {\n      format: function(trData, options, callback){\n        // trData 为行数据、options 为 treeTable 属性选项\n        // callback 为子节点的渲染函数\n        // 可利用该函数对子节点数据进行异步请求或其他格式化处理\n        var nodeList = [\n          {id: 111, name: '子节点1'},\n          {id: 333, name: '子节点3'}\n        ];\n        callback(nodeList);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Upload Progress with progress Callback (Layui) - JavaScript\nDESCRIPTION: Implements the 'progress' callback for upload tasks to monitor progress percentage and update Layui UI elements. Parameters include percent value, the corresponding DOM element, server response, and file index. Typically called repeatedly during upload for each file; requires Layui's 'element' module for progress bar updates.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nprogress: function(n, elem, res, index){\n  var percent = n + '%' // 获取进度百分比\n  element.progress('demo', percent); // 可配合 layui 进度条元素使用\n  \n  // 得到当前触发的元素 DOM 对象\n  console.log(elem); // 可通过该元素定义的属性值匹配到对应的进度条。\n  console.log(res); // 得到 progress 响应信息\n  \n  console.log(index); // 得到当前上传文件的索引，多文件上传时的进度条控制\n  element.progress('demo-'+ index, n + '%'); // 进度条\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Markup for Layui Form with Special Attributes\nDESCRIPTION: Provides sample HTML markup to illustrate how to set up Layui forms with special attributes such as 'lay-filter' for filtering, 'lay-verify' for validation rules on inputs, 'lay-submit' on submit buttons to trigger event handling, and usage of 'lay-ignore' to exclude certain form elements from Layui rendering for native styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form\" lay-filter=\"form-1\">\n  <input type=\"text\" class=\"layui-input\" lay-verify=\"email\">\n  <input type=\"checkbox\" lay-skin=\"switch\" lay-filter=\"agree\" title=\"同意\">\n  <button class=\"layui-btn\" lay-submit>提交</button>\n</form>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <select>\n    <option value=\"a\">正常渲染的 select</option>\n  </select>\n  <input type=\"checkbox\" lay-skin=\"primary\" title=\"正常渲染的 checkbox\">\n  <hr>\n  <select lay-ignore>\n    <option value=\"\">忽略渲染的 select</option>\n  </select>\n  <input type=\"checkbox\" lay-ignore> 忽略渲染的 checkbox\n</div>\n```\n\n----------------------------------------\n\nTITLE: Layui-Based User Registration Form Layout\nDESCRIPTION: Defines the structure and style of the registration form using HTML and embedded CSS. Includes input fields for phone number, verification code, passwords, nickname, user agreement checkbox, and social login options. Provides visual layout and form element setup for user registration.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/form.reg.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n.demo-reg-container{width: 320px; margin: 21px auto 0;}\n.demo-reg-other .layui-icon{position: relative; display: inline-block; margin: 0 2px; top: 2px; font-size: 26px;}\n</style>\n<form class=\"layui-form\">\n  <div class=\"demo-reg-container\">\n    <div class=\"layui-form-item\">\n      <div class=\"layui-row\">\n        <div class=\"layui-col-xs7\">\n          <div class=\"layui-input-wrap\">\n            <div class=\"layui-input-prefix\">\n              <i class=\"layui-icon layui-icon-cellphone\"></i>\n            </div>\n            <input type=\"text\" name=\"cellphone\" value=\"\" lay-verify=\"required|phone\" placeholder=\"手机号\" lay-reqtext=\"请填写手机号\" autocomplete=\"off\" class=\"layui-input\" id=\"reg-cellphone\">\n          </div>\n        </div>\n        <div class=\"layui-col-xs5\">\n          <div style=\"margin-left: 11px;\">\n            <button type=\"button\" class=\"layui-btn layui-btn-fluid layui-btn-primary\" lay-on=\"reg-get-vercode\">获取验证码</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-vercode\"></i>\n        </div>\n        <input type=\"text\" name=\"vercode\" value=\"\" lay-verify=\"required\" placeholder=\"验证码\" lay-reqtext=\"请填写验证码\" autocomplete=\"off\" class=\"layui-input\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-password\"></i>\n        </div>\n        <input type=\"password\" name=\"password\" value=\"\" lay-verify=\"required\" placeholder=\"密码\" autocomplete=\"off\" class=\"layui-input\" id=\"reg-password\" lay-affix=\"eye\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-password\"></i>\n        </div>\n        <input type=\"password\" name=\"confirmPassword\" value=\"\" lay-verify=\"required|confirmPassword\" placeholder=\"确认密码\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"eye\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <div class=\"layui-input-wrap\">\n        <div class=\"layui-input-prefix\">\n          <i class=\"layui-icon layui-icon-username\"></i>\n        </div>\n        <input type=\"text\" name=\"nickname\" value=\"\" lay-verify=\"required\" placeholder=\"昵称\" autocomplete=\"off\" class=\"layui-input\" lay-affix=\"clear\">\n      </div>\n    </div>\n    <div class=\"layui-form-item\">\n      <input type=\"checkbox\" name=\"agreement\" lay-verify=\"required\" lay-skin=\"primary\" title=\"同意\"> \n      <a href=\"#terms\" target=\"_blank\" style=\"position: relative; top: 6px; left: -15px;\"><ins>用户协议</ins></a>\n    </div>\n    <div class=\"layui-form-item\">\n      <button class=\"layui-btn layui-btn-fluid\" lay-submit lay-filter=\"demo-reg\">注册</button>\n    </div>\n    <div class=\"layui-form-item demo-reg-other\">\n      <label>社交账号注册</label>\n      <span style=\"padding: 0 21px 0 6px;\">\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-qq\" style=\"color: #3492ed;\"></i></a>\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-wechat\" style=\"color: #4daf29;\"></i></a>\n        <a href=\"javascript:;\"><i class=\"layui-icon layui-icon-login-weibo\" style=\"color: #cf1900;\"></i></a>\n      </span>\n      <a href=\"#login\">登录已有帐号</a>\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Resizing Layui Table Dimensions (JavaScript)\nDESCRIPTION: Illustrates using `table.resize(id)` to readjust the dimensions and layout of a Layui table. This is often used when the table's container size changes dynamically to ensure proper display and fix layout anomalies.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 渲染\ntable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n\n// 重置对应 table 的尺寸，一般写在表格外部容器宽高发生变化后的段落\ntable.resize('test');\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Theming with Different Colors in HTML\nDESCRIPTION: Shows how to apply different color themes to progress bars by adding corresponding classes such as 'layui-bg-red', 'layui-bg-orange', etc. These classes modify the visual style of the progress bar for contextual cues.\nSOURCE: https://github.com/layui/layui/blob/main/docs/progress/index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar layui-bg-red\" lay-percent=\"10%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar layui-bg-orange\" lay-percent=\"30%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar layui-bg-primary\" lay-percent=\"50%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar layui-bg-blue\" lay-percent=\"60%\"></div>\n</div>\n\n<hr class=\"ws-space-16\">\n\n<div class=\"layui-progress\">\n  <div class=\"layui-progress-bar\" lay-percent=\"70%\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items with lay-src\nDESCRIPTION: This code snippet shows how to use the `lay-src` attribute for lazy loading images within a layui flow list. Instead of setting the `src` attribute directly, `lay-src` is used, and the layui flow module handles loading images as they become visible in the viewport. This avoids loading all images at once, improving page performance. It requires the `isLazyimg` property in the flow configuration to be set to `true`.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.each(data, function(index, item){\n  lis.push('<li><img lay-src=\"'+ item.src +'\"></li>');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Range Shortcuts in Layui - JavaScript\nDESCRIPTION: This JavaScript code sets up a laydate time range picker with predefined shortcuts. It configures a time range selector tied to the element with ID `#ID-laydate-shortcut-range-time`. The `type` is set to `time` and `range` is set to `true`.  The `shortcuts` array specifies time ranges for 09:30 to 11:30 and 13:00 to 15:00. Each shortcut's `value` is a function that returns an array of two `Date` objects representing the start and end times.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/shortcut.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  // 时间范围\n  laydate.render({\n    elem: \"#ID-laydate-shortcut-range-time\",\n    type: \"time\",\n    range: true,\n    shortcuts: [\n      {\n        text: '09:30 <p style=\"text-align: center;\">到</p> 11:30',\n        value: (function () {\n          var date1 = new Date();\n          date1.setHours(9, 0, 0, 0);\n\n          var date2 = new Date();\n          date2.setHours(11, 30, 0, 0);\n\n          return [date1, date2];\n        })\n      },\n      {\n        text: '13:00 <p style=\"text-align: center;\">到</p> 15:00',\n        value: (function () {\n          var date1 = new Date();\n          date1.setHours(13, 0, 0, 0);\n\n          var date2 = new Date();\n          date2.setHours(15, 0, 0, 0);\n\n          return [date1, date2];\n        })\n      }\n    ]\n  });\n```\n\n----------------------------------------\n\nTITLE: Define Custom CSS for Layui Table and Form\nDESCRIPTION: This CSS snippet defines custom styles applied to the Layui table header and form elements within the document. The `.layui-table-testcss` class is later applied to the table using the `className` option in `table.render` to customize its header background and text color. The `.layui-form-testcss` class styles the form elements within the tool template.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/css.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* 自定义样式  */\n.layui-table-testcss .layui-table-header,\n.layui-table-testcss thead tr{background-color: #F8FCF9; color: #16BAAA}\n.layui-form-testcss > div{margin-bottom: 6px;}\n```\n\n----------------------------------------\n\nTITLE: Parsing Update Log Links with JavaScript\nDESCRIPTION: 这段 JavaScript 代码用于解析更新日志中的关联链接，将特定格式的文本（如 GitHub issues、pull requests、commits 和用户名）转换为可点击的链接。代码通过正则表达式匹配不同类型的引用，并将它们替换为对应的 HTML 链接元素。\nSOURCE: https://github.com/layui/layui/blob/main/docs/versions.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  // 解析更新日志关联链接\n  var elem = document.querySelectorAll('#WS-text li, #WS-text p');\n  var types = [\n    { rule: /(#)Gitee-(\\S+)/g, href: 'https://gitee.com/layui/layui/issues/'},\n    { rule: /(#)(\\d+)/g, href: 'https://github.com/layui/layui/pull/' },\n    { rule: /\\[\\)([\\d\\w]+)\\]/g, href: 'https://github.com/layui/layui/commit/' },\n    { rule: /(@)(\\S+)/g, href: 'https://github.com/' }\n  ];\n  elem.forEach(function (item) {\n    item.childNodes.forEach(function (node) {\n      if (node.nodeType === 3) {\n        var nodeValue = node.nodeValue;\n        var i = 0;\n        var sNode = document.createElement('span');\n        for (; i < types.length; i++) {\n          if (types[i].rule.test(nodeValue)) {\n            nodeValue = nodeValue.replace(types[i].rule, function(s, s1, s2) {\n              return '<a href=\"'+ types[i].href + s2 +'\" target=\"_blank\">'+ s1 + s2 +'</a>';\n            });\n            node.matched = true;\n          }\n        }\n        if (node.matched) {\n          sNode.innerHTML = nodeValue;\n          node.parentNode.insertBefore(sNode, node);\n          node.parentNode.removeChild(node);\n        }\n      }\n    });\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Layui Context Menu Demo\nDESCRIPTION: This snippet provides the HTML UI for the context menu demonstration, including a grey background div area where right-click triggers a custom menu and a button to toggle the global context menu feature. The div uses the ID 'ID-dropdown-demo-contextmenu' as the dropdown target, and the button uses the 'lay-on' attribute to bind event handlers. The layout uses inline CSS for styling and positioning.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/contextmenu.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-bg-gray\" style=\"height: 260px; text-align: center;\" id=\"ID-dropdown-demo-contextmenu\">\n  <span class=\"layui-font-gray\" style=\"position: relative; top:50%;\">在此区域单击鼠标右键</span>\n</div>\n\n<button class=\"layui-btn\" style=\"margin-top: 15px;\" lay-on=\"contextmenu\">\n  开启全局右键菜单\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Brief Tab Style with HTML\nDESCRIPTION: This snippet provides the HTML structure for a brief-styled tab component. It uses the `layui-tab layui-tab-brief` classes to specify the brief style, along with the standard tab title and content structure. The snippet relies on the Layui framework's CSS and JavaScript for proper rendering and functionality.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <textarea>\n<div class=\"layui-tab layui-tab-brief\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\">标签1</li>\n    <li>标签2</li>\n    <li>标签3</li>\n    <li>标签4</li>\n    <li>标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">内容-1</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n<!-- import layui -->\n  </textarea>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Text for Layui Slider\nDESCRIPTION: Shows various ways to customize the tooltip display for Layui sliders. Examples include custom formatting, disabling tooltips, showing tooltips persistently, and using external elements to display values.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-setTips-1\"></div>\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-setTips-2\"></div>\n<div id=\"ID-slider-demo-setTips-result\"></div>\n<hr class=\"ws-space-16\">\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-setTips-tipsAlways\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n  var $ = layui.$;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-setTips-1',\n    min: 20,\n    max: 1000,\n    setTips: function(value){ // 自定义提示文本\n     return value + 'GB';\n    }\n  });\n  slider.render({\n    elem: '#ID-slider-demo-setTips-2',\n    tips: false, // 关闭默认提示层\n    change: function(value){\n      $('#ID-slider-demo-setTips-result').html('当前数值：'+ value);\n    }\n  });\n  slider.render({\n    elem: '#ID-slider-demo-setTips-tipsAlways',\n    tips: true, // 开启提示文本\n    tipsAlways: true // 开启始终显示提示文本\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission Event in Layui\nDESCRIPTION: This example demonstrates how to handle form submission events in Layui by binding to the submit event. It shows the use of lay-submit attribute on buttons and accessing form data in the callback function.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<form class=\"layui-form\">\n  <input type=\"text\" name=\"nickname\" lay-verify=\"required\" class=\"layui-input\">\n  <hr>\n  <button class=\"layui-btn\" lay-submit lay-filter=\"demo-submit\">提交按钮</button>\n  <button class=\"layui-btn\" id=\"test-btn-other\">普通按钮</button>\n</form>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var $ = layui.$;\n  var form = layui.form;\n  var layer = layui.layer;\n\n  // 提交事件\n  form.on('submit(demo-submit)', function(data){\n    var field = data.field; // 获取表单全部字段值\n    var elem = data.elem; // 获取当前触发事件的元素 DOM 对象，一般为 button 标签\n    var elemForm = data.form; // 获取当前表单域的 form 元素对象，若容器为 form 标签才会返回。\n\n    // 显示填写结果，仅作演示用\n    layer.alert(JSON.stringify(field), {\n      title: '当前填写的字段值'\n    });\n    // 此处可执行 Ajax 等操作\n    // …\n    return false; // 阻止默认 form 跳转\n  });\n  // 普通按钮\n  $('#test-btn-other').on('click', function(){\n    layer.msg('点击未设置特定属性的按钮不会触发组件的提交事件');\n    return false;\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Fixbar with Custom Options\nDESCRIPTION: This JavaScript snippet initializes the Layui fixbar using the `util.fixbar` method. It defines an array of custom bar items, each with a type, icon, and optional style. It also configures event handlers for `mouseenter` and `mouseleave` events, as well as a click handler.  It relies on the Layui library and its dependencies.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/detail/demo.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var util = layui.util;\n\n  // 自定义固定条\n  util.fixbar({\n    bars: [{ // 定义可显示的 bar 列表信息 -- v2.8.0 新增\n      type: 'share',\n      icon: 'layui-icon-share'\n    }, {\n      type: 'help',\n      icon: 'layui-icon-help'\n    }, { \n      type: 'cart',\n      icon: 'layui-icon-cart',\n      style: 'background-color: #FF5722;'\n    }, {\n      type: 'groups',\n      content: '群',\n      style: 'font-size: 21px;'\n    }],\n    // bar1: true,\n    // bar2: true,\n    // default: false, // 是否显示默认的 bar 列表 --  v2.8.0 新增\n    // bgcolor: '#393D52', // bar 的默认背景色\n    // css: {right: 100, bottom: 100},\n    // target: '#target-test', // 插入 fixbar 节点的目标元素选择器\n    // duration: 300, // top bar 等动画时长（毫秒）\n    on: { // 任意事件 --  v2.8.0 新增\n      mouseenter: function(type){\n        layer.tips(type, this, {\n          tips: 4, \n          fixed: true\n        });\n      },\n      mouseleave: function(type){\n        layer.closeAll('tips');\n      }\n    },\n    // 点击事件\n    click: function(type){\n      console.log(this, type);\n      // layer.msg(type);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Laydate Date Picker in JavaScript\nDESCRIPTION: This JavaScript snippet initializes a static Laydate date picker embedded into an HTML element with id 'ID-laydate-static-1'. It uses the 'laydate.render' method from Layui's laydate module, specifying the element and static position. No additional options are set, so the default date picker type and language are used. The static positioning means the picker is displayed inline rather than in a dropdown.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/static.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  // 直接嵌套显示\n  laydate.render({\n    elem: '#ID-laydate-static-1',\n    position: 'static'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Tab Operations with Layui\nDESCRIPTION: This snippet demonstrates how to create a tab interface with Layui and perform dynamic operations on it. It shows how to add new tabs, delete specific tabs, and switch between tabs using JavaScript. The example uses the element and util modules from Layui.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tab\" lay-filter=\"test-handle\" lay-allowclose=\"true\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\" lay-id=\"11\">标签1</li>\n    <li lay-id=\"22\">标签2</li>\n    <li lay-id=\"33\">标签3</li>\n    <li lay-id=\"44\">标签4</li>\n    <li lay-id=\"55\">标签5</li>\n  </ul>\n  <div class=\"layui-tab-content\">\n    <div class=\"layui-tab-item layui-show\">内容-1</div>\n    <div class=\"layui-tab-item\">内容-2</div>\n    <div class=\"layui-tab-item\">内容-3</div>\n    <div class=\"layui-tab-item\">内容-4</div>\n    <div class=\"layui-tab-item\">内容-5</div>\n  </div>\n</div>\n \n<div class=\"layui-btn-container\">\n  <button class=\"layui-btn\" lay-on=\"tabAdd\">新增 tab 项</button>\n  <button class=\"layui-btn\" lay-on=\"tabDelete\">删除「标签4」</button>\n  <button class=\"layui-btn\" lay-on=\"tabChange\">切换到「标签3」</button>\n</div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var element = layui.element;\n  var util = layui.util;\n\n  // 普通事件\n  util.on('lay-on', {\n    tabAdd: function(){\n      // 新增一个 tab 项\n      var label = (Math.random()*1000|0); // 标记 - 用于演示\n      element.tabAdd('test-handle', {\n        title: '新选项'+ label,\n        content: '内容-'+ label,\n        id: new Date().getTime(), // 实际使用一般是规定好的id，这里以毫秒数模拟\n        change: true // 是否添加完毕后即自动切换\n      })\n    },\n    tabDelete: function(othis){\n      // 删除指定 tab 项\n      element.tabDelete('test-handle', '44'); // 删除：\"商品管理\"\n      othis.addClass('layui-btn-disabled');\n    },\n    tabChange: function(){\n      // 切换到指定 tab 项\n      element.tabChange('test-handle', '33'); // 切换到：标签3\n    }\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Alignment Buttons with Layui in HTML\nDESCRIPTION: Creates a container of three Layui-styled buttons in HTML, each representing a dropdown button aligned left, center, or right. The alignment for each button is specified using the 'lay-options' attribute, which is later read by the JavaScript for configuration. Dependencies: Layui CSS and icon fonts. Expects Layui and relevant modules to be loaded for full behavior.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/align.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-align\" lay-options=\"{}\">\n    左对齐\n    <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n  </button>\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-align\" lay-options=\"{align: 'center'}\">\n    居中对齐\n    <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n  </button>\n  <button class=\"layui-btn layui-btn-primary demo-dropdown-align\" lay-options=\"{align: 'right'}\">\n    右对齐\n    <i class=\"layui-icon layui-icon-down layui-font-12\"></i>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Body Element Rendering Example - Layui JavaScript\nDESCRIPTION: This code snippet showcases how to render tab content by binding it to existing elements in the DOM using element selectors. It utilizes an array of element selectors to identify the elements that will serve as the tab content.  This enables the dynamic association of HTML elements as tab content within Layui.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbody: ['#tabsBody', '>div'],\n```\n\n----------------------------------------\n\nTITLE: Example Layer Configuration in Layui (JavaScript)\nDESCRIPTION: Provides a default example of using `layer.open` within a textarea for demonstration. It shows how to create a basic page layer popup, configuring options like type, area, title, shade, close behavior, minimization/maximization, animation, and custom HTML content.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/run.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 在此处输入 layer 的任意代码\nlayer.open({\n  type: 1, // page 层类型\n  area: ['500px', '300px'],\n  title: 'Hello layer',\n  shade: 0.6, // 遮罩透明度\n  shadeClose: true, // 点击遮罩区域，关闭弹层\n  maxmin: true, // 允许全屏最小化\n  anim: 0, // 0-6 的动画形式，-1 不开启\n  content: '<div style=\"padding: 32px;\">一个普通的页面层，传入了自定义的 HTML</div>'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Carousel Change Event - Layui\nDESCRIPTION: This code shows how to handle the `change` event of a Layui carousel using the `carousel.on()` method.  The event handler receives an object containing information about the carousel state after a slide change.  This method is available in Layui versions prior to 2.7.\nSOURCE: https://github.com/layui/layui/blob/main/docs/carousel/detail/options.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = layui.carousel;\n\n// 轮播渲染\ncarousel.render(options); \n\n// 触发轮播切换事件\ncarousel.on('change(filter)', function(obj){ // filter 对应轮播容器的 lay-filter 属性值\n  console.log(obj);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Color Picker Radio Component with Layui - CSS\nDESCRIPTION: This CSS snippet styles a radio button to appear as a circular color picker within Layui forms. It uses border-radius to create the circular shape and applies box-shadow to the selected radio for clear user feedback. The snippet is ready for use with Layui's expected HTML class structure and does not require additional resources.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/checkboxAndRadio.style.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.layui-form-radio>.lay-skin-color-picker {\n  border-radius: 50%;\n  border-width: 1px;\n  border-style: solid;\n  width: 20px;\n  height: 20px;\n}\n\n.layui-form-radioed>.lay-skin-color-picker {\n  box-shadow: 0 0 0 1px #ffffff, 0 0 0 4px currentColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling the afterChange Event in Layui Tabs (JavaScript)\nDESCRIPTION: Shows how to attach a callback function to the `afterChange` event for a Layui tabs instance (`testID`) using `tabs.on()`. The callback executes after a tab switch has successfully completed and receives data related to the change. Requires the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// tabs 切换后的事件\ntabs.on('afterChange(testID)', function(data) {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Data from Transfer Component in Layui\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve the data from the right-hand side of a `transfer` component using `transfer.getData()`. This retrieves the selected data from the component. The snippet requires the `transfer` component to be initialized and rendered with a specific `id`.  The returned data typically represents the items selected by the user.  It depends on the Layui library.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar transfer = layui.transfer;\n\n// 渲染\ntransfer.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  // 其他属性 …\n});\n// 获得右侧数据\nvar getData = transfer.getData('test');\n```\n\n----------------------------------------\n\nTITLE: Implementing Layui Text Container for Rich Text Content\nDESCRIPTION: This HTML example shows how to implement the layui-text container for rich text content including headings, paragraphs, lists, blockquotes, and code blocks. It demonstrates the styling Layui applies to text elements within this container.\nSOURCE: https://github.com/layui/layui/blob/main/docs/class/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>文本区域演示 - Layui</title>\n  <meta name=\"renderer\" content=\"webkit\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n</head>\n<body class=\"layui-padding-3\">\n  <div class=\"layui-text\">\n    <h1>标题1</h1>\n    <p>段落1段落1段落1段落1段落1段落1段落1段落1段落1 <sup class=\"footnote-ref\"><a href=\"javascript:;\">[1]</a></sup></p>\n    <h2>标题2</h2>\n    <p>段落2段落2 <strong>加粗</strong> <em>强调</em>  段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2</p>\n    <p>段落2-1 <code>inline code</code> 段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1段落2-1</p>\n    <h3>标题3</h3>\n    <p>段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3段落3 <a href=\"javascript:;\">链接</a></p>\n    <h4>标题4</h4>\n    <h5>标题5</h5>\n    <h6>标题6</h6>\n    <p>段落6段落6段落6段落6段落6段落6段落6段落6段落6</p>\n\n    <h3>无序列表</h3>\n    <ul>\n      <li>列表1</li>\n      <li>\n        列表2\n        <ul>\n          <li>\n            列表2-1\n            <ul>\n              <li>列表2-1-1</li>\n            </ul>\n          </li>\n          <li>列表2-2</li>\n        </ul>\n      </li>\n      <li>列表3</li>\n    </ul>\n\n    <h3>有序列表</h3>\n    <ol>\n      <li>列表1</li>\n      <li>列表2</li>\n      <li>列表3</li>\n    </ol>\n\n    <h3>混合列表</h3>\n    <ol>\n      <li>\n        <p>有序列表1</p>\n        <ul>\n          <li>无序列表1-1</li>\n          <li>无序列表1-2</li>\n          <li>无序列表1-3</li>\n        </ul>\n      </li>\n      <li>\n        <p>有序列表2</p>\n        <ul>\n          <li>\n            <p>无序列表2-1</p>\n            <ol>\n              <li>有序列表2-1-1</li>\n              <li>有序列表2-1-2</li>\n            </ol>\n          </li>\n          <li>\n            <p>无序列表2-2</p>\n            <ol>\n              <li>有序列表2-2-1</li>\n            </ol>\n          </li>\n        </ul>\n      </li>\n      <li>有序列表3</li>\n    </ol>\n\n    <h3>Blockquote</h3>\n    <blockquote>\n      <p>引用</p>\n      <blockquote>内嵌引用<blockquote>内嵌引用</blockquote></blockquote>\n    </blockquote>\n\n    <h3>Code</h3>\n&lt;pre&gt;<code>var cp = function(){\n  return gulp.src('./dist/**/*')\n  .pipe(gulp.dest(dest));\n};\n</code>&lt;/pre&gt;\n    <hr>\n    <p id=\"ref-1\">Footer</p>\n  </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Placeholder for Layui Table\nDESCRIPTION: Defines an empty HTML table element with the class 'layui-hide' and a specific ID ('ID-table-onrowContextmenu'). This element serves as the target container for the Layui table component rendered by the accompanying JavaScript code.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/onrowContextmenu.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-table-onrowContextmenu\"></table>\n```\n\n----------------------------------------\n\nTITLE: Integrating Badges with Layui UI Elements\nDESCRIPTION: Code snippet demonstrating how to combine badges with other Layui UI elements such as buttons, navigation menus, and tabs. Shows both normal badges and dot badges in practical usage contexts.\nSOURCE: https://github.com/layui/layui/blob/main/docs/badge/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"layui-btn\">\n  按钮甲\n  <span class=\"layui-badge layui-bg-gray\">1</span>\n</button>\n<button class=\"layui-btn\">\n  按钮乙\n  <span class=\"layui-badge-dot layui-bg-orange\"></span>\n</button>\n \n<hr class=\"ws-space-16\">\n \n<ul class=\"layui-nav\" style=\"text-align: right;\">\n  <li class=\"layui-nav-item\">\n    <a href=\"\">菜单甲<span class=\"layui-badge\">9</span></a>\n  </li>\n  <li class=\"layui-nav-item\">\n    <a href=\"\">菜单乙<span class=\"layui-badge-dot\"></span></a>\n  </li>\n</ul>\n \n<hr class=\"ws-space-16\">\n  \n<div class=\"layui-tab layui-tab-brief\">\n  <ul class=\"layui-tab-title\">\n    <li class=\"layui-this\">标签1</li>\n    <li>标签2<span class=\"layui-badge-dot\"></span></li>\n    <li>标签3<span class=\"layui-badge\">99+</span></li>\n  </ul>\n  <div class=\"layui-tab-content\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: 初始化普通输入框布局 - HTML\nDESCRIPTION: 该代码片段展示了如何创建基础的普通输入框和多行文本框，作为Layui输入框组件的扩展基础。依赖于Layui表单样式类layui-form、layui-input和layui-textarea。输入框使用<input type=\"text\">元素，文本域使用<textarea>元素。无动态功能，主要用于静态布局和样式实现。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-form\">\n  <input type=\"text\" name=\"\" placeholder=\"文本框\" class=\"layui-input\">\n  <hr class=\"ws-space-16\">\n  &lt;textarea name=\"\" placeholder=\"多行文本框\" class=\"layui-textarea\"&gt;&lt;/textarea&gt;\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling Global Context Menu with Layui Util Events in JavaScript\nDESCRIPTION: This snippet uses Layui's util.event method to bind a custom event handler to elements with the 'lay-on' attribute, specifically the 'contextmenu' event. The handler toggles the context menu between a local element and the entire document, effectively enabling or disabling a global right-click menu. It updates the button label, tracks state with data attributes, reloads the dropdown with new targets, and provides user feedback via messages. This snippet depends on Layui's 'dropdown', 'util', and 'layer' modules and requires a button element with the 'lay-on' attribute set to 'contextmenu'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/contextmenu.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  // 其他操作\n  util.event('lay-on', {\n    // 改变触发右键菜单的目标元素\n    contextmenu: function(othis){\n      var ID = 'ID-dropdown-demo-contextmenu';\n      if (!othis.data('open')) {\n        dropdown.reload(ID, {\n          elem: document // 设置全局元素右键\n        });\n\n        layer.msg('已开启全局右键菜单，请尝试在页面任意处单击右键。')\n        othis.html('取消全局右键菜单');\n        othis.data('open', true);\n      } else {\n        dropdown.reload(ID, {\n          elem: '#'+ ID // 设置局部元素右键\n        });\n\n        layer.msg('已取消全局右键菜单，恢复默认右键菜单')\n        othis.html('开启全局右键菜单');\n        othis.data('open', false);\n      }\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Configuration for laytpl (JavaScript)\nDESCRIPTION: Illustrates how to use `laytpl.config()` to modify the default settings for all subsequent `laytpl` instances globally. This example customizes the template delimiter tags (`open` and `close` properties) and sets the default `tagStyle` to 'modern'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlaytpl.config({\n  open: '<%', // 自定义起始界定符\n  close: '%>', // 自定义起始界定符\n  tagStyle: 'modern' // 采用新版本的标签风格\n});\n\n// 创建模板实例\nvar templateInst = laytpl(`\n  <% var roles = [\"前端工程师\",\"全栈工程师\",\"架构师\"]; %>\n  <%= d.name %>是一名<%= roles[d.role] %>\n`);\n// 渲染\ntemplateInst.render({\n  name: '张三',\n  role: 1\n}, function(string){\n  console.log(string); // 张三是一名全栈工程师\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Content Wrapper for Captured Layer\nDESCRIPTION: Defines a hidden HTML div element intended to be captured and displayed within a Layui layer. The `ID-test-layer-wrapper` element is referenced by the `test-page-wrap` button's event handler to populate the modal window's content.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/page.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-test-layer-wrapper\" style=\"display: none;\">\n  <div style=\"padding:16px;\">\n    弹出已经存在于页面中的一段元素<br>\n    通常是放置在 &amp;lt;body&amp;gt; 根节点下\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Spacing in Layui Grid Layout - HTML\nDESCRIPTION: This example illustrates the application of predefined Layui spacing classes (e.g., \"layui-col-space1\", \"layui-col-space5\", \"layui-col-space10\", etc.) on rows to customize the space between columns. Each row demonstrates a different spacing value, and the grid adjusts automatically for device size. Layui CSS must be present. Key parameter is the space class applied to each row; outputs are visually separated columns.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row layui-col-space1\">\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo grid-demo-bg1\">1/4</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo\">1/4</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo grid-demo-bg1\">1/4</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo\">1/4</div>\n  </div>\n</div>\n \n<div class=\"layui-row layui-col-space5\">\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">1/3</div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo\">1/3</div>\n  </div>\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">1/3</div>\n  </div>\n</div>\n \n<div class=\"layui-row layui-col-space10\">\n  <div class=\"layui-col-md9\">\n    <div class=\"grid-demo grid-demo-bg1\">9/12</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo\">3/12</div>\n  </div>\n</div>\n \n<div class=\"layui-row layui-col-space15\">\n  <div class=\"layui-col-md7\">\n    <div class=\"grid-demo grid-demo-bg1\">7/12</div>\n  </div>\n  <div class=\"layui-col-md5\">\n    <div class=\"grid-demo\">5/12</div>\n  </div>\n</div>\n \n<div class=\"layui-row layui-col-space30\">\n  <div class=\"layui-col-md7\">\n    <div class=\"grid-demo grid-demo-bg1\">7/12</div>\n  </div>\n  <div class=\"layui-col-md5\">\n    <div class=\"grid-demo\">5/12</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Data Table in JavaScript\nDESCRIPTION: This snippet initializes a Layui data table by targeting an HTML element with a specific ID and providing column configuration, predefined static data, pagination, and display options. Dependencies include the Layui library with its table module. Parameters include 'elem' for the table container selector, 'cols' for column definitions, 'data' for array of rows, 'page' to enable pagination, and 'limit'/'limits' for paging size control. Expected input is a DIV where the table is rendered, and output is the fully rendered, interactive table with features such as sorting and paging. Limitation: Data is not dynamic and internationalization is not illustrated.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/data.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('table', function(){\n  var table = layui.table;\n  \n  // 已知数据渲染\n  var inst = table.render({\n    elem: '#ID-table-demo-data',\n    cols: [[ //标题栏\n      {field: 'id', title: 'ID', width: 80, sort: true},\n      {field: 'username', title: '用户', width: 120},\n      {field: 'sign', title: '签名', minWidth: 160},\n      {field: 'sex', title: '性别', width: 80},\n      {field: 'city', title: '城市', width: 100},\n      {field: 'experience', title: '积分', width: 80, sort: true}\n    ]],\n    data: [{\n      \"id\": \"10001\",\n      \"username\": \"张三1\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"116\"\n    }, {\n      \"id\": \"10002\",\n      \"username\": \"张三2\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"12\",\n      \"LAY_CHECKED\": true\n    }, {\n      \"id\": \"10003\",\n      \"username\": \"张三3\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"65\"\n    }, {\n      \"id\": \"10004\",\n      \"username\": \"张三4\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"777\"\n    }, {\n      \"id\": \"10005\",\n      \"username\": \"张三5\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"86\"\n    }, {\n      \"id\": \"10006\",\n      \"username\": \"张三6\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"12\"\n    }, {\n      \"id\": \"10007\",\n      \"username\": \"张三7\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"16\"\n    }, {\n      \"id\": \"10008\",\n      \"username\": \"张三8\",\n      \"sex\": \"男\",\n      \"city\": \"浙江杭州\",\n      \"sign\": \"人生恰似一场修行\",\n      \"experience\": \"106\"\n    }],\n    //skin: 'line', // 表格风格\n    //even: true,\n    page: true, // 是否显示分页\n    limits: [5, 10, 15],\n    limit: 5 // 每页默认显示的数量\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Reload Asynchronous Node in TreeTable - JavaScript\nDESCRIPTION: This snippet demonstrates how to reload asynchronous child nodes in a Layui TreeTable. It initializes the TreeTable with asynchronous loading enabled and then uses the `reloadAsyncNode` method to refresh a specific node based on its index.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/index.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// 渲染\ntreeTable.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id 索引\n  async: {\n    enable: true // 开启异步加载模式\n  }\n  // 其他属性 …\n});\n// 重载子节点\ntreeTable.reloadAsyncNode('test', 0); // 第一行\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Layui Fixbar Example\nDESCRIPTION: This HTML snippet sets up the basic structure for the Layui fixbar example. It includes meta tags, a link to the Layui CSS stylesheet, and a target div element where the fixbar will be inserted. It also includes script tags for Layui JavaScript and the custom script.\nSOURCE: https://github.com/layui/layui/blob/main/docs/fixbar/detail/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>自定义固定条示例 - Layui</title>\n  <meta name=\"renderer\" content=\"webkit\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"target-test\" style=\"position: relative; padding: 16px;\">\n  页<br>面<br>内<br>容<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。\n</div>\n\n<script src=\"{{= d.layui[2].cdn.js }}\"></script>\n<script>\nlayui.use(function(){\n  var util = layui.util;\n\n  // 自定义固定条\n  util.fixbar({\n    bars: [{ // 定义可显示的 bar 列表信息 -- v2.8.0 新增\n      type: 'share',\n      icon: 'layui-icon-share'\n    }, {\n      type: 'help',\n      icon: 'layui-icon-help'\n    }, { \n      type: 'cart',\n      icon: 'layui-icon-cart',\n      style: 'background-color: #FF5722;'\n    }, {\n      type: 'groups',\n      content: '群',\n      style: 'font-size: 21px;'\n    }],\n    // bar1: true,\n    // bar2: true,\n    // default: false, // 是否显示默认的 bar 列表 --  v2.8.0 新增\n    // bgcolor: '#393D52', // bar 的默认背景色\n    // css: {right: 100, bottom: 100},\n    // target: '#target-test', // 插入 fixbar 节点的目标元素选择器\n    // duration: 300, // top bar 等动画时长（毫秒）\n    on: { // 任意事件 --  v2.8.0 新增\n      mouseenter: function(type){\n        layer.tips(type, this, {\n          tips: 4, \n          fixed: true\n        });\n      },\n      mouseleave: function(type){\n        layer.closeAll('tips');\n      }\n    },\n    // 点击事件\n    click: function(type){\n      console.log(this, type);\n      // layer.msg(type);\n    }\n  });\n});\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Modern Template Syntax in Layui\nDESCRIPTION: Template code demonstrating the modern syntax for Layui's template engine, including escaped and raw output, comments, conditional statements, and loops with forEach.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/html\" id=\"ID-tpl-template-modern\">\n<p>转义输出：{{= d.desc }}</p>\n<p>原文输出：{{- d.desc }}</p>\n\n{{#注释标签 - 仅在模板中显示，不在视图中输出 }}\n\n<p>&#123;&#123;! 忽略标签，可显示原始标签：\n{{ let a = 0; }} {{= escape }} {{- source }} {{#comments }} &#123;&#123;! ignore !&#125;&#125;\n!&#125;&#125;</p>\n\n{{#标签空主体测试 }}\n{{}} {{  }} {{   }} {{= }} {{=}} {{= }}\n\n<p>\n  条件语句：\n  {{= d.list.length ? d.title : '' }}\n  {{ if(d.title){}} - #AAAA{{='A'}}{{ } }}\n</p>\n<p>循环语句：</p>\n<ul>\n{{ d.list.forEach(function(item) { }}\n  <li>\n    <span>{{= item.title }}</span>\n    <span>{{= item.name }}</span>\n  </li>\n{{ }); }}\n</ul>\n{{ if (d.list.length === 0) { }}\n  无数据\n{{} }}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Alert with Changing Icons JavaScript\nDESCRIPTION: Implements the event handler for the 'test-alert' `lay-on` value. It displays a Layui alert dialog (`layer.alert`) and iterates through different built-in icons (0-6) with each subsequent click, demonstrating the icon option. A recursive function `changeIcon` is used to show the next icon upon closing the current alert.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/alert.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"test-alert\": function(){\n  // 示范对话框所有内置图标\n  var icon = 0;\n  (function changeIcon(){\n    layer.alert('点击确定，继续查看图标', {\n      icon: icon,\n      shadeClose: true,\n      title: 'icon: '+ icon\n    }, ++icon > 6 ? function(){\n      layer.msg('内置图标演示完毕', {icon: 1});\n    } : changeIcon);\n  }());\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Transfer Item Double Clicks with dblclick\nDESCRIPTION: Illustrates the `dblclick` callback function (available from Layui v2.9.3+) for the transfer component. It executes when an item is double-clicked, providing an object `obj` containing the clicked DOM element (`obj.elem`), the item's data (`obj.data`), and the source list index (`obj.index`). Returning `false` from this function prevents the default transfer action.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndblclick: function(obj){\n  console.log(obj.elem); // 点击的元素\n  console.log(obj.data); // 得到点击项的数据\n  console.log(obj.index); // 如果数据来自左边，index 为 0，否则为 1\n\n  return false // 返回 false 会阻止穿梭\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for Layui Layer Theme\nDESCRIPTION: CSS styling that defines a custom theme for Layui layer components. It customizes the title bar, button area, and button colors to create a unique layer appearance.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/skin.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n/* 自定义其他任意主题  */\n.class-layer-demo-custom .layui-layer-title{background-color: #EDEFF2;}\n.class-layer-demo-custom .layui-layer-btn{padding: 5px 10px 10px;}\n.class-layer-demo-custom .layui-layer-btn a{background: #fff; border-color: #E9E7E7; color: #333;}\n.class-layer-demo-custom .layui-layer-btn .layui-layer-btn0{border-color: #FA584D; background-color: #FA584D; color: #fff;}\n```\n\n----------------------------------------\n\nTITLE: Displaying Layui Transfer Title Default Value\nDESCRIPTION: Demonstrates using a Layui button with the `lay-layer` attribute to display the default value of the `title` option (`['列表一','列表二']`) in a popup layer. This is embedded within the documentation table.\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/options.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"layui-btn layui-btn-sm layui-btn-primary\" lay-layer=\"{\n  title: 'title 属性默认值',\n  content: '<div>title: [\\'列表一\\',\\'列表二\\']</div>'\n}\">查看默认值</button>\n```\n\n----------------------------------------\n\nTITLE: Version Selector HTML Structure\nDESCRIPTION: 这段 HTML 代码定义了一个版本选择器，用于在更新日志页面中导航不同的版本章节。它使用了 Layui 的 toc（目录）和 anchor（锚点）功能来组织内容结构。\nSOURCE: https://github.com/layui/layui/blob/main/docs/versions.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"WS-switch-v\"></div>\n\n<h2 id=\"2.10+\" lay-toc=\"{title: '2.10+'}\"></h2>\n\n<h2 id=\"v2.11.0\" lay-pid=\"2.10+\" class=\"ws-anchor\">\n  v2.11.0\n  <span class=\"layui-badge-rim\">2025-04-21</span>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flow Lazy Loading in Layui (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the Layui 'flow' module to initialize image lazy loading on a set of images within a scrollable container. It requires the Layui library and its 'flow' module. The snippet specifies the element selector for images to lazy load and optionally defines a scroll container to optimize resource loading. The inputs include the container selector and images with 'lay-src' attributes indicating the actual image URLs; the output is automatic loading of images only when they appear in the viewport during scrolling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/flow/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use('flow', function(){\n  var flow = layui.flow;\n  // 图片懒加载\n  flow.lazyimg({\n    elem: '#ID-flow-demo-lazyimg img',\n    scrollElem: '#ID-flow-demo-lazyimg' // 一般不用设置，此处只是演示需要。\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Tab Delete Events\nDESCRIPTION: This JavaScript snippet uses `element.on('tabDelete(filter)', callback)` to listen for tab delete events. The callback function receives an object with the index of the deleted tab, the tab container, and the tab ID(2.9.11+). It allows developers to perform actions, such as updating data or removing associated resources when a tab is closed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tab/index.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar element = layui.element;\n\n// tab 删除事件\nelement.on('tabDelete(filter)', function(data){\n  console.log(data.index); // 得到被删除的 tab 项的所在下标\n  console.log(data.elem); // 得到当前的 tab 容器\n  console.log(data.id); // 得到被删除的 tab 项的 ID(2.9.11+)\n});\n```\n\n----------------------------------------\n\nTITLE: Including Layui CSS via CDN\nDESCRIPTION: This HTML snippet includes the Layui CSS stylesheet from a CDN. It is necessary for styling the UI components provided by Layui and ensuring correct visual presentation. The unpkg CDN is used here.\nSOURCE: https://github.com/layui/layui/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 引入 layui.css -->\n<link href=\"//unpkg.com/layui@{{= d.layui[2].v }}/dist/css/layui.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Building Date and Time Input Form with Layui HTML Markup\nDESCRIPTION: This HTML snippet defines a form featuring multiple date, month, and time input fields, each prepared with unique placeholders and IDs for Layui integration. Each input uses specific class names and structure required by the Layui UI framework, enabling subsequent JavaScript-based initialization. No external dependencies are required to render the HTML, but Layui's CSS should be included for proper styling and visual layout.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/format.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择日期</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-1\" placeholder=\"yyyy年MM月dd日\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择日期</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-2\" placeholder=\"dd/MM/yyyy\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择月份</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-3\" placeholder=\"yyyyMMdd\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择时间</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-4\" placeholder=\"H点m分\">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-5\" placeholder=\" ~ \">\n      </div>\n    </div>\n    <div class=\"layui-inline\">\n      <label class=\"layui-form-label\">请选择范围</label>\n      <div class=\"layui-input-inline\">\n        <input type=\"text\" class=\"layui-input\" id=\"ID-laydate-format-6\" placeholder=\"开始 到 结束\">\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layui Transfer Custom Text Labels\nDESCRIPTION: Shows the structure of the `text` object used to customize the default text labels within the Layui transfer component. It allows defining custom messages for 'no data' (`none`) and 'no search results' (`searchNone`).\nSOURCE: https://github.com/layui/layui/blob/main/docs/transfer/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntext: {\n  none: '无数据', // 没有数据时的文案\n  searchNone: '无匹配数据' // 搜索无匹配数据时的文案\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for layUI Template Configuration\nDESCRIPTION: An HTML table that displays template engine configuration options for layUI, including delimiters, caching, whitespace handling, and tag style settings. The table includes parameter names, descriptions, data types, and default values.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/options.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"layui-table\">\n  <colgroup>\n    <col width=\"150\">\n    <col>\n  </colgroup>\n  <thead>\n    <tr>\n      <th>标签</th>\n      <th>描述</th>\n      <th>类型</th>\n      <th>默认值</th>\n    </tr>\n  </thead>\n  <tbody>{{!\n    <tr>\n<td>open</td>\n<td>\n\n用于设置起始界定符\n\n</td>\n<td>string</td>\n<td>\n\n`{{`\n\n</td>\n    </tr>\n    <tr>\n<td>close</td>\n<td>\n\n用于设置结束界定符\n\n</td>\n<td>string</td>\n<td>\n\n`}}`\n\n</td>\n    </tr>\n    <tr>\n<td>cache <sup>2.11+</sup></td>\n<td>\n\n是否开启模板缓存，以便下次渲染时不重新编译模板\n\n</td>\n<td>boolean</td>\n<td>\n\n`true`\n\n</td>\n    </tr>\n    <tr>\n<td>condense <sup>2.11+</sup></td>\n<td>\n\n是否压缩模板空白符，如：将多个连续的空白符压缩为单个空格\n\n</td>\n<td>boolean</td>\n<td>\n\n`true`\n\n</td>\n    </tr>\n    <tr>\n<td>tagStyle<br><sup>2.11+</sup></td>\n<td>\n\n设置标签风格。可选值：\n\n- `legacy`: 采用 `< 2.11` 旧版本的标签风格\n- `modern`: 采用 `2.11+` 新版本的标签风格\n\n为了保持向下兼容，默认仍然采用旧版本的标签风格，但在后续版本可能会将默认值设置为 `modern`，因此，**实际使用时，建议显式设置该选项值，以免升级时产生不兼容的问题**。\n\n</td>\n<td>string</td>\n<td>\n\n`legacy`\n\n</td>\n    </tr>\n  </tbody>!}}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Rate with Text Display in JavaScript\nDESCRIPTION: Shows how to render the Layui rate component and display text indicating the current rating value. This example sets an initial value and enables the text display feature using the `text: true` option. It requires the Layui library and an empty div element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo-text\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({\n    elem: '#ID-rate-demo-text',\n    value: 2, // 初始值\n    text: true // 开启文本\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Layer Popup Minimization with min Callback in JavaScript\nDESCRIPTION: Defines the min callback function that runs after a layer popup is minimized. It receives the popup DOM, index, and instance. The callback can execute custom logic or return false to prevent the default minimization behavior, allowing fine control over the minimizing process. Only LayUI is required.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.open({\n  type: 1,\n  content: '内容',\n  min: function(layero, index, that){\n    // do something\n    // return false; // 阻止默认最小化\n  }\n});  \n```\n\n----------------------------------------\n\nTITLE: Switching Active Tabs Programmatically in Layui Tabs (JavaScript)\nDESCRIPTION: Shows how to programmatically switch the active tab in a Layui tabs instance ('test') using the `tabs.change()` method. Examples illustrate switching to a tab by its index, forcing the switch (ignoring `beforeChange` event) using the `force` parameter, and switching by the `lay-id` attribute value. Requires an initialized tabs instance and the `tabs` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/index.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.change('test', 3); // 切换到索引为 3 的标签\ntabs.change('test', 3, true); // 强制切换到索引为 3 的标签\ntabs.change('test', 'abc'); // 切换到 lay-id=\"abc\" 的标签\ntabs.change('test', 'abc', true); // 强制切换到 lay-id=\"abc\" 的标签\n```\n\n----------------------------------------\n\nTITLE: Creating Triangles with Layui CSS Classes\nDESCRIPTION: This snippet demonstrates how to create triangles in different directions using Layui's triangle classes. The example shows all four directions (top, right, bottom, left) with both default and black coloring.\nSOURCE: https://github.com/layui/layui/blob/main/docs/class/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n向上三角： \n<i class=\"layui-edge layui-edge-top\"></i> \n<i class=\"layui-edge layui-edge-top\" style=\"border-bottom-color: black;\"></i>\n\n<hr>\n向右三角： \n<i class=\"layui-edge layui-edge-right\"></i>\n<i class=\"layui-edge layui-edge-right\" style=\"border-left-color: black;\"></i>\n\n<hr>\n向下三角： \n<i class=\"layui-edge layui-edge-bottom\"></i>\n<i class=\"layui-edge layui-edge-bottom\" style=\"border-top-color: black;\"></i>\n\n<hr>\n向左三角： \n<i class=\"layui-edge layui-edge-left\"></i>\n<i class=\"layui-edge layui-edge-left\" style=\"border-right-color: black;\"></i>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for Layui Template Engine Demo\nDESCRIPTION: JavaScript code that initializes and manages the template engine demo, including template rendering, data parsing, switching between template styles, and event handling for the interactive features.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/demo.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(['laytpl', 'util', 'tabs', 'dropdown'], function() {\n  var laytpl = layui.laytpl;\n  var util = layui.util;\n  var tabs = layui.tabs;\n  var dropdown = layui.dropdown;\n  var $ = layui.$;\n\n  // 默认设置\n  laytpl.config({\n    // tagStyle: 'modern' // 初始化标签风格\n  });\n\n  // 获取模板和数据\n  var getData = function(type) {\n    return {\n      template: $('#ID-tpl-src').val(), // 获取模板\n      data: function(){  // 获取数据\n        try {\n          return JSON.parse($('#ID-tpl-data').val());\n        } catch(e) {\n          $('#ID-tpl-view').html(e);\n        }\n      }()\n    };\n  };\n\n  // 视图渲染\n  var renderView = function(html, startTime) {\n    timer(startTime);\n    $('#ID-tpl-view').html(html);\n    $('#ID-tpl-view-code').html(util.escape(html));\n  };\n\n  // 生成模板\n  var createTemplate = function(opts) {\n    opts = $.extend({\n      tagStyle: 'legacy'\n    }, opts);\n\n    // 初始化模板\n    var elem = $('#ID-tpl-template-'+ opts.tagStyle);\n    $('#ID-tpl-src').val(elem.html().replace(/^\\s+/g, ''));\n\n    return opts;\n  };\n  var tplConfig = createTemplate();\n  var data = getData();\n\n  // 耗时计算\n  var timer = function(startTime, title) {\n    var endTime = new Date();\n    $('#ID-tpl-view-time').html((title || '本次渲染总耗时：')+ (endTime - startTime) + 'ms');\n  };\n  var startTime = new Date();\n\n  // 创建一个模板实例\n  var templateInst = laytpl(data.template, {\n    condense: false, // 不处理连续空白符，即保留模板原始结构\n    tagStyle: tplConfig.tagStyle\n  });\n\n  // 初始渲染\n  templateInst.render(data.data, function(html) {\n    renderView(html, startTime);\n  });\n\n  // 编辑\n  $('.laytpl-demo textarea').on('input', function() {\n    var data = getData();\n    var startTime = new Date();\n\n    // 若模板有变化，则重新编译模板\n    if (this.id === 'ID-tpl-src') {\n      templateInst.compile(data.template);\n    }\n\n    // 若模板没变，数据有变化，则从模板缓存中直接渲染数据（效率大增）\n    templateInst.render(data.data, function(html) {\n      renderView(html, startTime);\n    });\n  });\n\n  // 视图结果 tabs\n  tabs.render({\n    elem: '#ID-tpl-view-header',\n    body: ['#ID-tpl-view-body', '>div']\n  });\n\n  // 切换模板\n  dropdown.render({\n    elem: '#ID-tpl-src-title',\n    data: [{\n      title: '新版本模板',\n      tagStyle: 'modern'\n    }, {\n      title: '旧版本模板',\n      tagStyle: 'legacy'\n    }],\n    click: function(obj){\n      createTemplate({\n        tagStyle: obj.tagStyle\n      });\n      this.elem.children('strong').html(obj.title);\n\n      // 同步设置标签风格\n      templateInst.config.tagStyle = obj.tagStyle;\n\n      var data = getData();\n      var startTime = new Date();\n\n      // 重新渲染\n      templateInst.compile(data.template).render(data.data, function(html) {\n        renderView(html, startTime);\n      });\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Layui Form Inputs with Affixes in HTML\nDESCRIPTION: HTML structure for creating form inputs with affixes using Layui framework. It includes two examples: a location input with location affix and a search input with search affix. Both use the lay-affix attribute to specify the affix type.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/input.affix.custom.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" lay-affix=\"location\" lay-filter=\"location\" placeholder=\"位置\" class=\"layui-input\">\n  </div>\n  <hr class=\"ws-space-16\">\n  <div class=\"layui-input-wrap\">\n    <input type=\"text\" lay-affix=\"search\" lay-filter=\"search\" lay-options=\"{split: true}\" placeholder=\"搜索…\" class=\"layui-input\">\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Layui Button Container HTML\nDESCRIPTION: This HTML snippet defines a container with multiple Layui buttons. Each button is styled with `layui-btn` and `layui-btn-primary` classes, and has a `lay-on` attribute set to \"test-offset\". The `data-offset` attribute specifies the desired offset position for the popup layer.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/offset.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"t\">上</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"r\">右</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"b\">下</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"l\">左</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"rt\">右上</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"rb\">右下</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"lb\">左下</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"lt\">左上</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"auto\">正中</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-offset\" data-offset=\"\">任意</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeView Appearance and Behavior in layui TreeTable (JavaScript)\nDESCRIPTION: This code snippet sets up view-related attributes such as indentation, icons, icon display conditions, and double-click expand behavior for the TreeTable. It allows UI customization, including icon styles, expansion animation, and node display options, enhancing the user experience.\nSOURCE: https://github.com/layui/layui/blob/main/docs/treeTable/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreeTable.render({\n  elem: '',\n  tree: {\n    view: {\n      indent: 14,\n      flexIconClose: '',\n      flexIconOpen: '',\n      showIcon: true,\n      icon: '',\n      iconClose: '',\n      iconOpen: '',\n      iconLeaf: '',\n      showFlexIconIfNotParent: false,\n      dblClickExpand: true,\n      expandAllDefault: false\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Layui CSS\nDESCRIPTION: This snippet includes the Layui CSS file in the HTML document. It uses a template variable to reference the CSS path, typically from a CDN. The dependency is Layui's CSS file and it has no parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/menu/examples/demo.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Rate with Half Stars in JavaScript\nDESCRIPTION: Illustrates rendering the Layui rate component with half-star precision enabled via the `half: true` option. Shows two examples: one with only half stars enabled, and another combining half stars with text display. Requires the Layui library and appropriate div elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo-half-1\"></div>\n<hr>\n<div id=\"ID-rate-demo-half-2\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({ // eg1\n    elem: '#ID-rate-demo-half-1',\n    value: 2.5, // 初始值\n    half: true // 开启半星\n  });\n  rate.render({ // eg2\n    elem: '#ID-rate-demo-half-2',\n    value: 3.5,\n    half: true,\n    text: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Code Renderer for Syntax Highlighting in Layui\nDESCRIPTION: JavaScript function for custom code rendering in the Layui Code component. This example shows how to integrate highlight.js for syntax highlighting of code blocks.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncodeRender: function(code, opts){\n  // 此处以 highlight.js 为例\n  return hljs.highlight(code, {language: opts.lang}).value;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Picker Panel Close Callback in Layui Color Picker (JavaScript)\nDESCRIPTION: Specifies the 'close' callback function, introduced in Layui 2.8+, which fires immediately after the color picker panel is closed. Receives the current or last selected color value as input, facilitating cleanup or UI updates post panel closure. Useful for resetting states or saving selections when the panel is dismissed.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclose: function(value){\n  console.log(value); // 当前颜色值\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout for Layui Code Preview\nDESCRIPTION: JavaScript configuration for setting up the panel layout order in the Layui Code component. This example shows how to arrange code and preview areas using the 'layout' property.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout: ['code', 'preview']\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Layui Module without Dependencies in JavaScript\nDESCRIPTION: Shows how to define a basic Layui module named 'demo' using `layui.define` without declaring any explicit dependencies. The module's callback function receives an `exports` function, which is used here to export an object containing a `msg` property under the module name 'demo'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/modules.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** demo.js **/\nlayui.define(function(exports){\n  // do something\n\n  // 输出 demo 模块\n  exports('demo', {\n    msg: 'Hello Demo'\n  });\n});\n\n// 若该模块需要依赖别的模块，则在 `mods` 参数中声明即可：\n// layui.define(['layer', 'form'], callback);\n```\n\n----------------------------------------\n\nTITLE: Rendering Read-Only Layui Rate Component in JavaScript\nDESCRIPTION: Demonstrates how to render the Layui rate component in a read-only state, preventing user interaction to change the rating. This is achieved using the `readonly: true` option. Includes setting an initial value. Requires the Layui library and an empty div element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo-readonly\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({\n    elem: '#ID-rate-demo-readonly',\n    value: 4,\n    readonly: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Instance with Options (JavaScript)\nDESCRIPTION: Demonstrates passing an options object as the second argument to `laytpl()` during instance creation. This example specifically sets the `tagStyle` option to 'modern' to enable the newer template tag syntax (e.g., using `{{ let ... }}`).\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 创建模板实例\nvar templateInst = laytpl(`\n  {{ let role = d.role || '全栈开发者'; }}\n  {{= d.name }}是一名{{= role }}\n`, {\n  tagStyle: 'modern' // 采用新版本的标签风格\n});\nvar html = templateInst.render({ name: '张三' });\n```\n\n----------------------------------------\n\nTITLE: Defining Color Selection Completion Callback in Layui Color Picker (JavaScript)\nDESCRIPTION: Defines the 'done' callback function invoked when the user completes color selection by clicking 'confirm' or 'clear' buttons within the color picker. The function receives the final selected color value, facilitating actions after selection is finalized, such as form submission or interface updates. Relies on Layui's color picker event handling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/colorpicker/detail/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndone: function(value){\n  console.log(value); // 当前选中的颜色值\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Layui Util Demonstration\nDESCRIPTION: The HTML markup that creates the demo interface with four sections: countdown timer, time ago calculation, date format conversion, and HTML escaping. Each section includes form elements for user interaction.\nSOURCE: https://github.com/layui/layui/blob/main/docs/util/detail/demo.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h3 class=\"ws-anchor ws-bold\">倒计时</h3>\n\n请选择要计算的日期：\n<div class=\"layui-inline\">\n  <input type=\"text\" readonly class=\"layui-input\" id=\"test1\" value=\"2099-12-31 00:00:00\">\n</div>\n<span class=\"layui-word-aux layui-font-green\" id=\"test2\"></span>\n\n<h3 class=\"ws-anchor ws-bold\">某个时间在多久前</h3>\n\n请选择要计算的日期：\n<div class=\"layui-inline\">\n  <input type=\"text\" readonly class=\"layui-input\" id=\"test3\">\n</div>\n<span class=\"layui-word-aux\" id=\"test4\"></span>\n  \n<h3 class=\"ws-anchor ws-bold\">转换日期格式</h3>\n\n请编辑格式：\n<div class=\"layui-inline\">\n  <input type=\"text\" value=\"yyyy-MM-dd HH:mm:ss\" class=\"layui-input\" id=\"test5\">\n</div>\n<span class=\"layui-word-aux\" id=\"test6\"></span>\n  \n<h3 class=\"ws-anchor ws-bold\">转义 HTML</h3>\n\n<div class=\"layui-form\">\n  &lt;textarea class=\"layui-textarea\" id=\"test7\"&gt;\n<h3>HTML Title</h3>\n&lt;script&gt;\n  alert(0);\n&lt;/script&gt;\n  &lt;/textarea&gt;\n</div>\n<div class=\"layui-btn-container\" style=\"margin-top: 10px;\">\n  <button class=\"layui-btn\" lay-on=\"escape\">转义</button>\n  <button class=\"layui-btn\" lay-on=\"unescape\">还原</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Button Definitions for Layer Examples\nDESCRIPTION: Defines a set of HTML buttons within a div container, each linked to a specific Layui layer example via the `lay-on` attribute. These buttons serve as triggers for opening different types of Layui modal windows.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/page.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-btn-container\">\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-page\">普通页面层</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-page-wrap\">捕获层</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-page-title\">剔除默认标题栏</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-page-move\">绑定弹层的拖拽元素</button>\n  <button type=\"button\" class=\"layui-btn layui-btn-primary\" lay-on=\"test-page-custom\">\n    <span class=\"layui-badge-dot\"></span> 弹出任意自定义内容\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Radio Button Skins Using Layui in HTML\nDESCRIPTION: This HTML snippet defines several custom-styled radio buttons using Layui's skinning functionality by setting the attribute lay-skin=\"none\" on input elements and associating visually styled div elements representing the custom skins. The snippet includes three major skin styles: card-style radios with icons and detailed descriptions, tag-style radios styled as badges, and color-picker radios indicating colors visually. The code depends on Layui's CSS classes and icon fonts to render the styles and is intended for modern webkit-based browsers as noted. Expected inputs are standard radio buttons which are visually replaced by custom styled blocks. This snippet is static HTML and requires Layui CSS and JS for full interactivity and appearance.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/radio.skin.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\" lay-filter=\"form-demo-skin\">\n  {{- d.include(\"/form/examples/checkboxAndRadio.style.md\") }}\n  <h3 class=\"ws-bold\">自定义“卡片风格”的单选组件</h3>\n  <div class=\"layui-row layui-col-space8\">\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"radio\" name=\"radio1\" value=\"chrome\" lay-skin=\"none\">\n      <div lay-radio class=\"lay-skin-checkcard lay-check-dot-2\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <span class=\"layui-icon layui-icon-chrome\" style=\"font-size: 30px\"></span>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Chrome</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Google 公司开发的网页浏览器，被大多数人所使用。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"radio\" name=\"radio1\" value=\"edge\" lay-skin=\"none\" checked>\n      <div lay-radio class=\"lay-skin-checkcard lay-check-dot-2\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-edge\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Edge</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Microsoft 开发的网页浏览器，基于 Chromeium 内核。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"radio\" name=\"radio11\" value=\"firefox\" lay-skin=\"none\" disabled>\n      <div lay-radio class=\"lay-skin-checkcard lay-check-dot-2\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-firefox\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Firefox</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Mozilla 开发的开放源代码的网页浏览器。\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"layui-col-xs12 layui-col-sm6 layui-col-md3\">\n      <input type=\"radio\" name=\"radio11\" value=\"ie\" lay-skin=\"none\" disabled checked>\n      <div lay-radio class=\"lay-skin-checkcard lay-check-dot-2\" style=\"height: 100px\">\n        <div class=\"lay-skin-checkcard-avatar\">\n          <i class=\"layui-icon layui-icon-ie\" style=\"font-size: 30px\"></i>\n        </div>\n        <div class=\"lay-skin-checkcard-detail\">\n          <div class=\"lay-skin-checkcard-header\">Internet Explorer</div>\n          <div class=\"lay-skin-checkcard-description lay-ellipsis-multi-line\">\n            由 Microsoft 出品的网页浏览器，俗称 IE，已被微软放弃。\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <h3 class=\"ws-bold\">自定义“标签风格”的单选组件</h3>\n  <div>\n    <input type=\"radio\" name=\"hobby\" value=\"唱\" lay-skin=\"none\" checked>\n    <div lay-radio class=\"lay-skin-tag layui-badge\">唱</div>\n    <input type=\"radio\" name=\"hobby\" value=\"跳\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-tag layui-badge\">跳</div>\n    <input type=\"radio\" name=\"hobby\" value=\"rap\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-tag layui-badge\">rap</div>\n    <input type=\"radio\" name=\"hobby\" value=\"篮球\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-tag layui-badge\">篮球</div>\n  </div>\n\n  <h3 class=\"ws-bold\">自定义“颜色选择”的单选组件</h3>\n  <div>\n    <input type=\"radio\" name=\"color\" value=\"red\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-color-picker\" style=\"color: red; background-color: red\"></div>\n    <input type=\"radio\" name=\"color\" value=\"#16b777\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-color-picker\" style=\"color: #16b777; background-color: #16b777\"></div>\n    <input type=\"radio\" name=\"color\" value=\"blueviolet\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-color-picker\" style=\"color: blueviolet; background-color: blueviolet\"></div>\n    <input type=\"radio\" name=\"color\" value=\"#16baaa\" lay-skin=\"none\">\n    <div lay-radio class=\"lay-skin-color-picker\" style=\"color: #16baaa; background-color: #16baaa\"></div>\n  </div>\n\n  <hr>\n  <p>更多风格可自主实现，为避免影响文档其他重要版面的阅读，此处不做过多演示。</p>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Minimizing Layer in Layui\nDESCRIPTION: Demonstrates how to minimize an existing layer using layer.min(). Takes the layer index as a parameter to identify which layer to minimize.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开弹窗\nvar index = layer.open({\n  type: 1, // 页面层\n  content: '弹层内容'\n});\n// 设置弹层最大化\nlayer.min(index);\n```\n\n----------------------------------------\n\nTITLE: Button Element Initialization for Layui Dropdown Menu in HTML\nDESCRIPTION: Defines a button element with a specific ID and class to serve as the trigger element for the dropdown menu. This button displays descriptive text about the dropdown's features, including infinite levels, navigation, events, and custom templates. It provides the HTML structure required to bind the dropdown component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/complex.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"layui-btn\" id=\"ID-dropdown-demo-complex\">流时层级 + 跳转 + 事件 + 自定义模板</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Column Offsets in Layui Grid System - HTML\nDESCRIPTION: This snippet demonstrates how to offset columns within a Layui grid using classes like \"layui-col-md-offset*\". Offsets push columns to the right by the specified number, enabling more flexible grid arrangements. Both offset and non-offset columns are shown. Dependencies include Layui CSS; outputs are columns starting at offset grid positions.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/grid.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-row\">\n  <div class=\"layui-col-md4\">\n    <div class=\"grid-demo grid-demo-bg1\">4/12</div>\n  </div>\n  <div class=\"layui-col-md4 layui-col-md-offset4\">\n    <div class=\"grid-demo\">偏移4列</div>\n  </div>\n</div>\n \n<div class=\"layui-row\">\n  <div class=\"layui-col-md3 layui-col-md-offset3\">\n    <div class=\"grid-demo grid-demo-bg1\">偏移3列</div>\n  </div>\n  <div class=\"layui-col-md3\">\n    <div class=\"grid-demo\">不偏移</div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Fields in Dropdown\nDESCRIPTION: This code shows how to customize the data fields used by the Layui dropdown component.  It allows you to map custom field names to the default 'id', 'title', and 'children' fields. This feature requires Layui version 2.8.14 or later.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropdown = layui.dropdown;\n// 渲染\ndropdown.render({\n  elem: '', // 绑定元素选择器\n  data: [], // 数据源\n  customName: { // 自定义 data 字段名 --- 2.8.14+\n    id: 'id',\n    title: 'title',\n    children: 'child'\n  },\n  // 其他属性 …\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropdown with Render Method\nDESCRIPTION: This code demonstrates how to initialize the Layui dropdown component using the `dropdown.render()` method. It shows both single and batch rendering examples. It requires the Layui library to be included in the project.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/index.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"layui-btn\" id=\"ID-test-dropdown\">下拉菜单</button>\n<button class=\"layui-btn class-test-dropdown\" lay-options=\"{\n  data: [{title: 'item 1', id: 1}, {title: 'item 2', id: 2}]\n}\">下拉菜单</button>\n<button class=\"layui-btn class-test-dropdown\" lay-options=\"{\n  data: [{title: 'item A', id: 'a'}, {title: 'item B', id: 'b'}]\n}\">下拉菜单</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var dropdown = layui.dropdown;\n  // 单个渲染\n  dropdown.render({\n    elem: '#ID-test-dropdown',\n    // …\n  });\n  // 批量渲染\n  dropdown.render({\n    elem: '.class-test-dropdown',\n    // …\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layui Rate with Custom Text in JavaScript\nDESCRIPTION: Demonstrates how to customize the text displayed next to the rate component using the `setText` callback function. Includes examples for mapping integer values to custom strings and displaying raw half-star values. Requires the Layui library and appropriate div elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/rate/detail/demo.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-rate-demo-setText-1\"></div>\n<hr>\n<div id=\"ID-rate-demo-setText-2\"></div>\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var rate = layui.rate;\n\n  // 渲染\n  rate.render({ // eg1\n    elem: '#ID-rate-demo-setText-1',\n    value: 3,\n    text: true,\n    setText: function(value){ // 自定义文本的初始回调\n      var arrs = {\n        '1': '非常不满意',\n        '2': '不满意',\n        '3': '一般',\n        '4': '满意',\n        '5': '非常满意'\n      };\n      this.span.text(arrs[value] || ( value + \"星\"));\n    }\n  });\n  rate.render({ // eg2\n    elem: '#ID-rate-demo-setText-2',\n    value: 1.5,\n    half: true,\n    text: true,\n    setText: function(value){\n      this.span.text(value);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Maximizing Layer in Layui\nDESCRIPTION: Shows how to maximize an existing layer using layer.full(). Takes the layer index as a parameter to identify which layer to maximize.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 打开弹窗\nvar index = layer.open({\n  type: 1, // 页面层\n  content: '弹层内容'\n});\n// 设置弹层最大化\nlayer.full(index);\n```\n\n----------------------------------------\n\nTITLE: 重载（Reload）Layui 组件实例（JavaScript）\nDESCRIPTION: 利用 tabs.reload 方法，通过实例 ID 和新的配置项重载指定组件，可实现数据和视图的刷新。依赖已初始化的组件实例。参数 id 为实例标识，options 为重载参数。输出为新的组件状态。部分组件可能有数据重载专用方法，具体参考文档。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 以 tabs 组件为例\n// 重载 tabs 组件实例\ntabs.reload('id', {\n  // …\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Colors for Layui Slider\nDESCRIPTION: Shows how to apply custom theme colors to Layui sliders. Examples include single sliders with different colors and a range slider with custom theme color.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-theme-1\"></div>\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-theme-2\"></div>\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-theme-3\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-theme-1',\n    theme: '#1E9FFF' // 主题色\n  });\n  slider.render({\n    elem: '#ID-slider-demo-theme-2',\n    value: 50,\n    theme: '#16b777' // 主题色\n  });\n  slider.render({\n    elem: '#ID-slider-demo-theme-3',\n    value: [30, 70],\n    range: true,\n    theme: '#FF5722' // 主题色\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Date Picker with JavaScript\nDESCRIPTION: JavaScript code that initializes the Layui date picker functionality. It uses the layui.use() method to load dependencies and renders the date picker on all elements with the 'demo-laydate-item' class.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/elem.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  // 渲染\n  laydate.render({\n    elem: '.demo-laydate-item'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Completion Callback for Layui Code Component\nDESCRIPTION: JavaScript callback function that executes when the Layui Code component finishes rendering. Provides access to the container object and allows rendering of nested components within the preview section.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ndone: function(obj){\n  var container = obj.container; // 当前面板的容器对象\n  obj.render(); // 对预览中的 `element,form` 等组件进行渲染\n}\n```\n\n----------------------------------------\n\nTITLE: 实现输入框前置和后置自适应结构 - HTML\nDESCRIPTION: 本示例展示了输入框自适应的前置和后置布局结构，容器使用 class=\"layui-input-group\"，可以灵活控制前缀内容、输入框主体及后缀内容的宽度比例。适合动态调整界面布局，同时保持输入框和点缀元素的联动与响应。该结构方便添加任何自定义内容在前后位置。\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/input.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layui-input-group\">\n  <div class=\"layui-input-prefix\">前置内容</div>\n  <input type=\"text\" class=\"layui-input\">\n  <div class=\"layui-input-suffix\">后缀内容</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Flow Control Using Old Style Scriptlet Tags {{# }} in Layui Templates (Pre-2.11) with JavaScript\nDESCRIPTION: Demonstrates use of the legacy scriptlet tag style {{# }} available before Layui 2.11, typically for control flow such as conditionals inside templates. It encloses JavaScript code blocks to conditionally render template parts. Dependency on Layui template engine version < 2.11. Example uses standard JavaScript constructs within template tags. Input involves data objects with conditional properties, output depends on logic outcome in rendering.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{#if (d.title) { }}\n  标题：{{= d.title }}\n{{#} else { }}\n  默认标题\n{{#} }}\n```\n\n----------------------------------------\n\nTITLE: HTML Upload Button with Layui Styling\nDESCRIPTION: This HTML snippet defines a button element styled with Layui classes to trigger a file upload. It includes an icon and text indicating its purpose, along with a div element providing an auxiliary message about the file size limit.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/examples/size.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\" class=\"layui-btn layui-btn-danger\" id=\"ID-upload-demo-size\">\n  <i class=\"layui-icon layui-icon-upload\"></i> 上传图片\n</button>\n<div class=\"layui-inline layui-word-aux\">\n  这里以限制 60KB 为例\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tools for Layui Code Component\nDESCRIPTION: JavaScript configuration for the tools property that defines toolbar icons in the Layui Code component. Includes built-in options like fullscreen and window preview, plus an example of a custom tool for switching themes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntools: [\n  'full',\n  'window',\n  // 自定义扩展工具 --- 2.8.17+\n  {\n    title: ['切换高亮主题'],\n    type: 'theme',\n    event: function(obj) {\n      console.log(obj); // 当前实例相关信息\n      // do something\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Assigning Static Data to File Upload (Layui) - JavaScript\nDESCRIPTION: Demonstrates how to assign static data parameters to be sent with each file upload request in the Layui upload module configuration. No dependencies beyond Layui and basic JavaScript usage. The key parameter is 'data', set as an object whose values are static and included in the upload payload.\nSOURCE: https://github.com/layui/layui/blob/main/docs/upload/detail/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata: {\n  id: '123'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Layui Date Picker with JavaScript\nDESCRIPTION: Loads Layui modules and renders date pickers on specific input elements, configuring language settings for localization. The script initializes two date pickers: one default and another with English language support.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/examples/normal.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var laydate = layui.laydate;\n\n  // 渲染\n  laydate.render({\n    elem: '#ID-laydate-demo'\n  });\n  // 英文版\n  laydate.render({\n    elem: '#ID-laydate-demo-en',\n    lang: 'en'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Events in Layui Code Component\nDESCRIPTION: JavaScript event handler for toolbar clicks in the Layui Code component. This callback function receives information about the instance and the type of tool clicked, allowing for custom behaviors.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolsEvent: function(obj){\n  console.log(obj); // 当前实例相关信息\n  console.log(obj.type); // 当前实例相关信息\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Mode in Layui Tree (JavaScript/HTML)\nDESCRIPTION: Illustrates how to enable accordion mode in a Layui tree, where expanding one sibling node automatically collapses others at the same level. This behavior is activated by setting the `accordion: true` option during initialization with `tree.render`. Requires the Layui `tree` module.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tree/detail/demo.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"ID-tree-demo-accordion\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var tree = layui.tree;\n\n  // 渲染\n  tree.render({\n    elem: '#ID-tree-demo-accordion',\n    data: [{\n      title: '优秀',\n      children: [{\n        title: '80 ~ 90'\n      },{\n        title: '90 ~ 100'\n      }]\n    },{\n      title: '良好',\n      children: [{\n        title: '70 ~ 80'\n      },{\n        title: '60 ~ 70'\n      }]\n    },{\n      title: '一般',\n      children: [{\n        title: '0 ~ 60'\n      }]\n    }],\n    accordion: true \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the Custom Dropdown Content Container (CSS)\nDESCRIPTION: This CSS rule targets elements with the class `demo-dropdown-tabs`, which is applied to the custom dropdown container via the `className` option in the JavaScript configuration. It adds horizontal padding to the container, demonstrating how custom styles can be applied to the dropdown's content area.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/content.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-dropdown-tabs{padding: 0 16px;}\n```\n\n----------------------------------------\n\nTITLE: Styling Editable Layui Table Cells - CSS\nDESCRIPTION: Defines a CSS rule to visually distinguish editable cells within the Layui table. It targets table data cells (`td`) that have the `data-edit` attribute (applied by Layui when editing is enabled for a column) and sets their text color to a specific green.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editable.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.layui-table-view td[data-edit]{color: #16B777;}\n```\n\n----------------------------------------\n\nTITLE: Implementing Done Callback in Layui Table\nDESCRIPTION: Demonstrates the done callback function that executes after data rendering is complete, providing access to the rendered data, current page, and total count.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.render({\n  done: function(res, curr, count, origin){\n    console.log(res); // 得到当前渲染的数据\n    console.log(curr);  // 得到当前页码\n    console.log(count); // 得到数据总量\n    console.log(origin); // 回调函数所执行的来源 --- 2.8.7+\n  },\n  // …  // 其它属性\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Values Programmatically in Layui\nDESCRIPTION: Shows how to set slider values using the setValue method, including handling both single values and range sliders with start and end values.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar slider = layui.slider;\n \n// 渲染\nvar inst = slider.render({\n  elem: '#id'\n  // …\n});      \n \n// 设置滑块值\ninst.setValue(20);\n \n// 若滑块开启了范围，即： `range: true`\nins1.setValue(20, 0) // 设置开始值\nins1.setValue(60, 1) // 设置结尾值\n```\n\n----------------------------------------\n\nTITLE: Configuring Layui Tree for Icon-Only Expand/Collapse (JavaScript/HTML)\nDESCRIPTION: Demonstrates how to configure the Layui tree so that only clicking the node's icon (and not the title) triggers expand/collapse actions. This is done using the `onlyIconControl: true` option in `tree.render`. A `click` event handler using `layer.msg` is included to show data of the clicked node. Requires Layui `tree` and `layer` modules.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tree/detail/demo.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"ID-tree-demo-onlyIconControl\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var tree = layui.tree;\n  var layer = layui.layer;\n\n  // 模拟数据\n  var data = [{title:'江西',id:1,children:[{title:'南昌',id:1000,children:[{title:'青山湖区',id:10001},{title:'高新区',id:10002}]},{title:'九江',id:1001},{title:'赣州',id:1002}]},{title:'广西',id:2,children:[{title:'南宁',id:2000},{title:'桂林',id:2001}]},{title:'陕西',id:3,children:[{title:'西安',id:3000},{title:'延安',id:3001}]},{title:'山西',id:3,children:[{title:'太原',id:4000},{title:'长治',id:4001}]}];\n\n  // 渲染\n  tree.render({\n    elem: '#ID-tree-demo-onlyIconControl',\n    data: data,\n    onlyIconControl: true,  // 是否仅允许节点左侧图标控制展开收缩\n    click: function(obj){\n      layer.msg(JSON.stringify(obj.data));\n    }\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Blockquote Styles in Layui\nDESCRIPTION: Demonstrates two styles of blockquotes in Layui: the default style and a border style using the 'layui-elem-quote' class. The border style is applied with the additional 'layui-quote-nm' class.\nSOURCE: https://github.com/layui/layui/blob/main/docs/auxiliar/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"layui-elem-quote\">\n  引用内容，默认风格\n</blockquote>\n\n<blockquote class=\"layui-elem-quote layui-quote-nm\">\n  引用内容，边框风格\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Configuring Min and Max Values for Layui Slider\nDESCRIPTION: Shows how to set minimum and maximum value boundaries for a Layui slider. This limits the range the slider can move within.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-maxmin\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-maxmin',\n    min: 20, // 最小值\n    max: 50 // 最大值\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Layui Admin Layout HTML Structure\nDESCRIPTION: This HTML code defines the basic structure of an admin UI layout using Layui CSS classes. It includes a header with logo and navigation, a sidebar for menu items, a main content area, and a footer. It uses Layui's layout system to arrange the elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layout/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>layout 管理界面大布局示例 - Layui</title>\n  <meta name=\"renderer\" content=\"webkit\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link href=\"{{= d.layui[2].cdn.css }}\" rel=\"stylesheet\">\n</head>\n<body>\n<div class=\"layui-layout layui-layout-admin\">\n  <div class=\"layui-header\">\n    <div class=\"layui-logo layui-hide-xs layui-bg-black\">layout demo</div>\n    <!-- 头部区域（可配合layui 已有的水平导航） -->\n    <ul class=\"layui-nav layui-layout-left\">\n      <!-- 移动端显示 -->\n      <li class=\"layui-nav-item layui-show-xs-inline-block layui-hide-sm\" lay-header-event=\"menuLeft\">\n        <i class=\"layui-icon layui-icon-spread-left\"></i>\n      </li>\n      <li class=\"layui-nav-item layui-hide-xs\"><a href=\"javascript:;\">nav 1</a></li>\n      <li class=\"layui-nav-item layui-hide-xs\"><a href=\"javascript:;\">nav 2</a></li>\n      <li class=\"layui-nav-item layui-hide-xs\"><a href=\"javascript:;\">nav 3</a></li>\n      <li class=\"layui-nav-item\">\n        <a href=\"javascript:;\">nav groups</a>\n        <dl class=\"layui-nav-child\">\n          <dd><a href=\"javascript:;\">menu 11</a></dd>\n          <dd><a href=\"javascript:;\">menu 22</a></dd>\n          <dd><a href=\"javascript:;\">menu 33</a></dd>\n        </dl>\n      </li>\n    </ul>\n    <ul class=\"layui-nav layui-layout-right\">\n      <li class=\"layui-nav-item layui-hide layui-show-sm-inline-block\">\n        <a href=\"javascript:;\">\n          <img src=\"//unpkg.com/outeres@0.0.10/img/layui/icon-v2.png\" class=\"layui-nav-img\">\n          tester\n        </a>\n        <dl class=\"layui-nav-child\">\n          <dd><a href=\"javascript:;\">Your Profile</a></dd>\n          <dd><a href=\"javascript:;\">Settings</a></dd>\n          <dd><a href=\"javascript:;\">Sign out</a></dd>\n        </dl>\n      </li>\n      <li class=\"layui-nav-item\" lay-header-event=\"menuRight\" lay-unselect>\n        <a href=\"javascript:;\">\n          <i class=\"layui-icon layui-icon-more-vertical\"></i>\n        </a>\n      </li>\n    </ul>\n  </div>\n  <div class=\"layui-side layui-bg-black\">\n    <div class=\"layui-side-scroll\">\n      <!-- 左侧导航区域（可配合layui已有的垂直导航） -->\n      <ul class=\"layui-nav layui-nav-tree\" lay-filter=\"test\">\n        <li class=\"layui-nav-item layui-nav-itemed\">\n          <a class=\"\" href=\"javascript:;\">menu group 1</a>\n          <dl class=\"layui-nav-child\">\n            <dd><a href=\"javascript:;\">menu 1</a></dd>\n            <dd><a href=\"javascript:;\">menu 2</a></dd>\n            <dd><a href=\"javascript:;\">menu 3</a></dd>\n            <dd><a href=\"javascript:;\">the links</a></dd>\n          </dl>\n        </li>\n        <li class=\"layui-nav-item\">\n          <a href=\"javascript:;\">menu group 2</a>\n          <dl class=\"layui-nav-child\">\n            <dd><a href=\"javascript:;\">list 1</a></dd>\n            <dd><a href=\"javascript:;\">list 2</a></dd>\n            <dd><a href=\"javascript:;\">超链接</a></dd>\n          </dl>\n        </li>\n        <li class=\"layui-nav-item\"><a href=\"javascript:;\">click menu item</a></li>\n        <li class=\"layui-nav-item\"><a href=\"javascript:;\">the links</a></li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"layui-body\">\n    <!-- 内容主体区域 -->\n    <div style=\"padding: 15px;\">\n      <blockquote class=\"layui-elem-quote layui-text\">\n        Layui 框体布局内容主体区域\n      </blockquote>\n      <div class=\"layui-card layui-panel\">\n        <div class=\"layui-card-header\">\n          下面是充数内容，为的是出现滚动条\n        </div>\n        <div class=\"layui-card-body\">\n        充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>充数内容<br>你还真滑到了底部呀\n        </div>\n      </div>\n      <br><br>\n    </div>\n  </div>\n  <div class=\"layui-footer\">\n    <!-- 底部固定区域 -->\n    底部固定区域\n  </div>\n</div>\n \n<script src=\"{{= d.layui[2].cdn.js }}\"></script>\n<script>\n//JS \nlayui.use(['element', 'layer', 'util'], function(){\n  var element = layui.element;\n  var layer = layui.layer;\n  var util = layui.util;\n  var $ = layui.$;\n  \n  //头部事件\n  util.event('lay-header-event', {\n    menuLeft: function(othis){ // 左侧菜单事件\n      layer.msg('展开左侧菜单的操作', {icon: 0});\n    },\n    menuRight: function(){  // 右侧菜单事件\n      layer.open({\n        type: 1,\n        title: '更多',\n        content: '<div style=\"padding: 15px;\">处理右侧面板的操作</div>',\n        area: ['260px', '100%'],\n        offset: 'rt', // 右上角\n        anim: 'slideLeft', // 从右侧抽屉滑出\n        shadeClose: true,\n        scrollbar: false\n      });\n    }\n  });\n});\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Closable Tabs with Layui in HTML\nDESCRIPTION: This snippet sets up a Layui-based tab component in HTML with closable and non-closable tab options. The <ul> defines the tab headers, marking one as non-closable (with lay-closable set to false), while the corresponding <div>s provide content for each tab. Layui attributes such as lay-id and lay-options are used to configure functionality. The structure requires the inclusion of Layui's CSS and JavaScript to operate correctly, and assumes that Layui scripts will initialize the component.\nSOURCE: https://github.com/layui/layui/blob/main/docs/tabs/examples/beforeClose.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-tabs layui-hide-v\" id=\"demoTabsBeforeClose\" lay-options=\"{closable: true}\">\n  <ul class=\"layui-tabs-header\">\n    <li lay-id=\"aaa\" lay-closable=\"false\">Tab1</li>\n    <li lay-id=\"bbb\">Tab2</li>\n    <li lay-id=\"ccc\">Tab3</li>\n    <li lay-id=\"ddd\">Tab4</li>\n    <li lay-id=\"eee\">Tab5</li>\n    <li lay-id=\"fff\">Tab6</li>\n  </ul>\n  <div class=\"layui-tabs-body\">\n    <div class=\"layui-tabs-item\">Tab Content-1</div>\n    <div class=\"layui-tabs-item\">Tab Content-2</div>\n    <div class=\"layui-tabs-item\">Tab Content-3</div>\n    <div class=\"layui-tabs-item\">Tab Content-4</div>\n    <div class=\"layui-tabs-item\">Tab Content-5</div>\n    <div class=\"layui-tabs-item\">Tab Content-6</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Ignore Tag {{!{{! !}}!}} to Prevent Tag Parsing in Layui Templates with JavaScript\nDESCRIPTION: Utilizes the compound ignore tag syntax {{!{{! !}}!}} to prevent the content within from being parsed as template tags. This allows embedding of raw template-like strings, such as escaped template tags, ensuring they are output verbatim in the rendered HTML. This tag is important when displaying source code or templates as content. It requires the Layui template engine. Input is arbitrary template string; output is unprocessed literal text.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laytpl/detail/tags.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{! {{! 这里面的 {{= escape }} 等模板标签不会被解析 !}} !}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Dropdown in Table Context Example\nDESCRIPTION: Provides a method to incorporate dropdown menus within table elements, enabling contextual options directly associated with table data. Utilizes template inclusion of '/dropdown/examples/table.md' and depends on the templating engine capabilities.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/table.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Applying and Triggering CSS3 Animations with Layui Classes\nDESCRIPTION: This snippet shows how to add the 'layui-anim' class to an element and dynamically append specific animation classes to produce various CSS3 animated effects. It also details how to trigger animations on user interaction using event handlers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/anim/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  //演示动画\n  $('.ws-docs-anim .layui-anim').on('click', function(){\n    var othis = $(this), anim = othis.data('anim');\n \n    //停止循环\n    if(othis.hasClass('layui-anim-loop')){\n      return othis.removeClass(anim);\n    }\n    \n    othis.removeClass(anim);\n    \n    setTimeout(function(){\n      othis.addClass(anim);\n    });\n    //恢复渐隐\n    if(anim === 'layui-anim-fadeout'){\n      setTimeout(function(){\n        othis.removeClass(anim);\n      }, 1300);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Layui Icons in HTML\nDESCRIPTION: Example of how to implement Layui icons in HTML. The pattern uses the 'layui-icon' base class combined with a specific icon class to render icons. Additional animation classes like 'layui-anim-rotate' and 'layui-anim-loop' can be used for animated icons.\nSOURCE: https://github.com/layui/layui/blob/main/docs/icon/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"layui-icon layui-icon-loading layui-anim layui-anim-rotate layui-anim-loop\"></i>\n```\n\n----------------------------------------\n\nTITLE: Setting Step Size for Layui Slider\nDESCRIPTION: Demonstrates how to configure step size for a Layui slider and optionally display step markers. The examples show both a simple step configuration and one with visual markers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-step-1\"></div>\n<hr class=\"ws-space-16\">\n<div id=\"ID-slider-demo-step-2\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-step-1',\n    step: 10 // 步长\n  });\n\n  slider.render({\n    elem: '#ID-slider-demo-step-2',\n    step: 10, // 步长\n    showstep: true // 开启间隔点\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: 扩展 Layui 组件接口（JavaScript）\nDESCRIPTION: 通过 layui.$.extend 扩展组件对象接口，以添加如关闭面板等新方法。核心依赖已由 component 创建的组件实例，能自由增加接口行为。示例添加 close 方法，先使用 getInst 获取实例，再调用其 remove 实现关闭。此方式便于灵活扩展，不影响组件基础接口。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * 定义组件\n */\nlayui.define('component', function(exports) {\n  // 创建组件\n  var component = layui.component({\n    name: 'test',\n    // …\n  });\n  // 扩展组件接口\n  layui.$.extend(component, {\n    // 以扩展一个关闭组件面板的接口为例\n    close: function(id) {\n      var that = component.getInst(id);\n      if(!that) return this;\n      that.remove(obj); // 调用原型中的 remove 方法\n    }\n  });\n  // 输出组件接口\n  exports(component.CONST.MOD_NAME, component);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Export Template in Layui Table\nDESCRIPTION: Shows how to define a custom template for exporting table data, particularly useful when the display template contains complex elements like selects.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/detail/options.cols.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexportTemplet: function(d, obj){\n  // 当前 td\n  var td = obj.td(this.field);\n  // 返回 select 选中值\n  return td.find('select').val();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value for Layui Slider\nDESCRIPTION: Demonstrates how to set an initial value for a Layui slider. The example shows how to render a slider with a predefined starting position.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"ID-slider-demo-value\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-value',\n    value: 20 //初始值\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Day of a Month\nDESCRIPTION: Shows how to use the getEndDate method to determine the last day of a specific month in a given year. The method can be used with just the month parameter (defaulting to current year) or with both month and year parameters.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar days1 = laydate.getEndDate(10); // 获得 10 月的最后一天为 31 号\nvar days2 = laydate.getEndDate(2, 2080); // 获得 2080 年 2 月的最后一天为 29 号\n```\n\n----------------------------------------\n\nTITLE: Creating Dot Badges in HTML with Layui\nDESCRIPTION: Code snippet showing how to implement small dot badges in Layui with different background colors. These dot badges can be used as indicators or notification markers.\nSOURCE: https://github.com/layui/layui/blob/main/docs/badge/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"layui-badge-dot\"></span>\n<span class=\"layui-badge-dot layui-bg-orange\"></span>\n<span class=\"layui-badge-dot layui-bg-green\"></span>\n<span class=\"layui-badge-dot layui-bg-cyan\"></span>\n<span class=\"layui-badge-dot layui-bg-blue\"></span>\n<span class=\"layui-badge-dot layui-bg-black\"></span>\n<span class=\"layui-badge-dot layui-bg-gray\"></span>\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Sliders with Layui\nDESCRIPTION: Demonstrates how to create vertical sliders with Layui. Examples include basic vertical slider, vertical slider with initial value, vertical range slider, and vertical slider with input field.\nSOURCE: https://github.com/layui/layui/blob/main/docs/slider/detail/demo.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<br><br>\n<div class=\"layui-inline\" style=\"margin-right: 32px;\" id=\"ID-slider-demo-vertical-1\"></div>\n<div class=\"layui-inline\" style=\"margin-right: 32px;\" id=\"ID-slider-demo-vertical-2\"></div>\n<div class=\"layui-inline\" style=\"margin-right: 32px;\" id=\"ID-slider-demo-vertical-3\"></div>\n<div class=\"layui-inline\" id=\"ID-slider-demo-vertical-4\"></div>\n\n<!-- import layui -->\n<script>\nlayui.use(function(){\n  var slider = layui.slider;\n\n  // 渲染\n  slider.render({\n    elem: '#ID-slider-demo-vertical-1',\n    type: 'vertical' // 垂直滑块\n  });\n  slider.render({\n    elem: '#ID-slider-demo-vertical-2',\n    value: 30,\n    type: 'vertical' // 垂直滑块\n  });\n  slider.render({\n    elem: '#ID-slider-demo-vertical-3',\n    value: 50,\n    range: true, // 范围选择\n    type: 'vertical' // 垂直滑块\n  });\n  slider.render({\n    elem: '#ID-slider-demo-vertical-4',\n    value: 80,\n    input: true, // 输入框\n    type: 'vertical' // 垂直滑块\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: 使用和操作自定义 Layui 组件（JavaScript）\nDESCRIPTION: 调用自定义组件 test 的 render 和 close 方法，演示初始化与关闭面板的流程。依赖组件已通过 layui.use 加载。render 输入为配置对象，close 输入为实例 id。该代码可嵌入事件处理等各类场景进行高级操作。\nSOURCE: https://github.com/layui/layui/blob/main/docs/component/index.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * 使用组件（以上述定义的 test 组件为例）\n */\nlayui.use('test', function() {\n  var test = layui.test;\n  // 渲染组件\n  test.render({\n    elem: '#id',\n    id: 'test-1'\n  });\n  // 关闭组件面板（通常在某个事件中使用）\n  test.close('test-1');\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Stacked Layui Layers JavaScript\nDESCRIPTION: This handler for 'test-more-stack' opens new layers configured for multi-window mode (no shade, maxmin enabled) at random positions. It uses `layer.zIndex` and `layer.setTop(layero)` in the `success` callback to manage window stacking order, ensuring the clicked window is always on top. It also maintains `layer.escIndex` to track layer indices for global ESC key closing.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/examples/more.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'test-more-stack': function(){\n  var that = this;\n\n  // 多窗口模式 + 层叠置顶 + Esc 关闭\n  layer.open({\n    type: 1,\n    title: '当你选择该窗体时，即会在最顶端',\n    area: ['390px', '260px'],\n    shade: 0,\n    maxmin: true,\n    offset: [ // 为了便于演示，此处采用随机坐标\n      Math.random()*($(window).height()-300),\n      Math.random()*($(window).width()-390)\n    ],\n    content: '<div style=\"padding: 16px;\">内容标记：'+ new Date().getTime() + '，按 ESC 键可关闭。<br><br>当你的页面有很多很多 layer 窗口，你需要像 Window 窗体那样，点击某个窗口，该窗体就置顶在上面，那么 layer.setTop() 可以来轻松实现。它采用巧妙的逻辑，以使这种置顶的性能达到最优。</div>',   \n    btn: ['继续弹出', '全部关闭'], //只是为了演示\n    yes: function(){\n      $(that).click(); \n    },\n    btn2: function(){\n      layer.closeAll();\n    },\n    zIndex: layer.zIndex, // 重点 1 --- 初始设置当前最高层叠顺序，\n    success: function(layero, index){\n      layer.setTop(layero); // 重点 2 --- 保持选中窗口置顶\n      \n      // 记录索引，以便按 esc 键关闭。事件见代码最末尾处。\n      layer.escIndex = layer.escIndex || [];\n      layer.escIndex.unshift(index);\n      // 选中当前层时，将当前层索引放置在首位\n      layero.on('mousedown', function(){\n        var _index = layer.escIndex.indexOf(index);\n        if(_index !== -1){\n          layer.escIndex.splice(_index, 1); //删除原有索引\n        }\n        layer.escIndex.unshift(index); //将索引插入到数组首位\n      });\n    },\n    end: function(){\n      //更新索引\n      if(typeof layer.escIndex === 'object'){\n        layer.escIndex.splice(0, 1);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Layui CSS3 Animation Trigger with JavaScript\nDESCRIPTION: This snippet demonstrates how to trigger a slide-down animation on a target element when a button is clicked using Layui's JavaScript module. It involves removing and adding the CSS animation class to animate the element.\nSOURCE: https://github.com/layui/layui/blob/main/docs/anim/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var $ = layui.$;\n  var elem = $('#example-anim-element');\n  var animName = 'layui-anim-down'; // 动画类名\n  \n  // 通过事件简单演示动画过程\n  $('#example-anim-usage').on('click', function(){\n    elem.removeClass(animName);\n    setTimeout(function(){\n      elem.addClass(animName); // 给目标元素追加「往下滑入」的动画\n    }); \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layui Input Affix Events in JavaScript\nDESCRIPTION: JavaScript code that initializes Layui and handles input affix events. It defines event handlers for both location and search affixes, demonstrating how to access the input element and its value, and perform different actions based on the affix type.\nSOURCE: https://github.com/layui/layui/blob/main/docs/form/examples/input.affix.custom.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayui.use(function(){\n  var form = layui.form;\n\n  // 输入框点缀事件 - 位置示例\n  form.on('input-affix(location)', function(data){\n    var elem = data.elem; // 输入框\n\n    // do something\n    layer.msg('模拟获取位置中…', {icon: 16, time: 1.5*1000}, function(){\n      elem.value = '浙江杭州'; // 向输入框赋值\n    })\n  });\n\n  // 输入框点缀事件 - 搜索示例\n  form.on('input-affix(search)', function(data){\n    var elem = data.elem; // 输入框\n    var value = elem.value; // 输入框的值\n\n    if(!value){\n      layer.msg('请输入搜索内容');\n      return elem.focus()\n    };\n\n    // 模拟搜索跳转\n    location.href = '?keywords='+ value + '&_'+ new Date().getTime() +'#affix-custom';\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Layui element.render for Collapse Panel Initialization in JavaScript\nDESCRIPTION: Provides the usage of the Layui 'element.render' method targeting collapse panels. The method accepts two parameters: the fixed string 'collapse' indicating the component type to render, and an optional filter representing the 'lay-filter' attribute value or a jQuery object referencing the element. It is necessary when dynamically injecting collapsible panel elements to ensure proper initialization and rendering of the collapsible functionality.\nSOURCE: https://github.com/layui/layui/blob/main/docs/panel/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nelement.render('collapse', filter);\n```\n\n----------------------------------------\n\nTITLE: Initializing Layer on Page Load in Layui\nDESCRIPTION: Demonstrates how to initialize a Layer dialog box when the page loads. This method ensures that dependent style files are loaded first, and is typically used when importing layui.js directly from source.\nSOURCE: https://github.com/layui/layui/blob/main/docs/layer/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 页面初始弹出层\nlayer.ready(function(){\n  layer.alert('对话框内容');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Code Preview in Layui\nDESCRIPTION: HTML structure required when enabling the preview feature for the Layui Code component. The code content needs to be placed within a <textarea> element inside a <pre> element with the 'layui-code' class.\nSOURCE: https://github.com/layui/layui/blob/main/docs/code/detail/options.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<pre class=\"layui-code\" lay-options=\"{}\">\n  <textarea>\ncode content\n  </textarea>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Themes to Layui Laypage in JavaScript\nDESCRIPTION: Shows how to customize the appearance of the laypage component using the `theme` option with hex color codes. It requires the Layui library and its laypage module. Multiple instances demonstrate applying different themes.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laypage/detail/demo.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo-laypage-theme-1\"></div>\n<div id=\"demo-laypage-theme-2\"></div>\n<div id=\"demo-laypage-theme-3\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayui.use(function(){\n  var laypage = layui.laypage;\n\n  // 自定义主题\n  laypage.render({\n    elem: 'demo-laypage-theme-1',\n    count: 100,\n    theme: '#1E9FFF'\n  });\n  laypage.render({\n    elem: 'demo-laypage-theme-2',\n    count: 100,\n    theme: '#FF5722'\n  });\n  laypage.render({\n    elem: 'demo-laypage-theme-3',\n    count: 100,\n    theme: '#FFB800'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Including Complex Dropdown Structure Example in Markdown\nDESCRIPTION: Illustrates embedding a complex dropdown menu example, showcasing nested or detailed configurations through template inclusion. Requires the template system with `d.include()` and the '/dropdown/examples/complex.md' file.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/complex.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Including Basic Dropdown Usage Example in Markdown\nDESCRIPTION: Demonstrates inclusion of a basic dropdown example via template syntax within Markdown. It sets up a preview container for a simple dropdown functional demonstration. Dependencies include the hosting template system supporting the `d.include()` method and the respective markdown file at '/dropdown/examples/base.md'.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/detail/demo.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{{- d.include(\"/dropdown/examples/base.md\") }}\n```\n\n----------------------------------------\n\nTITLE: Unbinding laydate Instance\nDESCRIPTION: Shows how to completely unbind a laydate instance from its target element using the unbind method. After unbinding, the element will no longer trigger the component rendering when events occur.\nSOURCE: https://github.com/layui/layui/blob/main/docs/laydate/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar laydate = layui.laydate;\n// 渲染\nlaydate.render({\n  elem: '', // 绑定元素选择器\n  id: 'test', // 自定义 id \n  // 其他属性 …\n});\n// 解除对应的实例绑定\nlaydate.unbind('test');\n```\n\n----------------------------------------\n\nTITLE: Layui Table HTML Definition\nDESCRIPTION: Defines the HTML structure for the Layui table. The table is initialized with the ID \"ID-table-demo-setRowChecked\", which is later used in the JavaScript code to initialize the table.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/setRowChecked.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-table-demo-setRowChecked\"></table>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Structure for Layui Dropdown\nDESCRIPTION: This HTML snippet defines the form structure containing a label and an input field. The input field with the ID \"ID-dropdown-demo-reloadData\" is used to trigger the dropdown and filter its contents.\nSOURCE: https://github.com/layui/layui/blob/main/docs/dropdown/examples/reloadData.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"layui-form\">\n  <div class=\"layui-form-item\">\n    <label class=\"layui-form-label\">输入时重载</label>\n    <div class=\"layui-input-inline\">\n      <input type=\"text\" autocomplete=\"off\" placeholder=\"输入关键字\" class=\"layui-input\" id=\"ID-dropdown-demo-reloadData\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Layui Table Placeholder HTML\nDESCRIPTION: Defines the basic HTML element that will serve as the container for the Layui table instance. It uses the `layui-hide` class to initially conceal the element until Layui's JavaScript renders the table structure into it, and an `id` attribute is used to target this element specifically for table rendering.\nSOURCE: https://github.com/layui/layui/blob/main/docs/table/examples/editModes.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"layui-hide\" id=\"ID-table-demo-editmodes\"></table>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Documentation\nDESCRIPTION: Instructions for enabling the automatic right-side table of contents in Layui documentation by adding a lay-toc attribute to anchor elements.\nSOURCE: https://github.com/layui/layui/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nlay-toc=\"{}\"\n```\n\n----------------------------------------\n\nTITLE: Icon list showcasing 192 icons with their codes, names, and classes\nDESCRIPTION: Displays a comprehensive set of icon examples including icons for common functions like '机器人', '叶子节点', '文件夹', 'Gitee', 'Github', and various status indicators. Each icon entry shows the HTML element with respective classes, the icon's name, its Unicode code, and the CSS class used for styling.\nSOURCE: https://github.com/layui/layui/blob/main/docs/icon/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"ws-docs-icon\">\\n  <div>\\n    <i class=\"layui-icon layui-icon-bot\"></i>\\n    <div class=\"docs-icon-name\">机器人</div>\\n    <div class=\"docs-icon-code\">&#xe7d6;</div>\\n    <div class=\"docs-icon-fontclass\">layui-icon-bot</div>\\n  </div>\\n  <div>\\n    <i class=\"layui-icon layui-icon-leaf\"></i>\\n    <div class=\"docs-icon-name\">叶子节点</div>\\n    <div class=\"docs-icon-code\">&#xe701;</div>\\n    <div class=\"docs-icon-fontclass\">layui-icon-leaf</div>\\n  </div>\\n  <div>\\n    <i class=\"layui-icon layui-icon-folder\" style=\"font-size: 32px;\"></i>\\n    <div class=\"docs-icon-name\">文件夹</div>\\n    <div class=\"docs-icon-code\">&#xeabe;</div>\\n    <div class=\"docs-icon-fontclass\">layui-icon-folder</div>\\n  </div>\\n  <div>\\n    <i class=\"layui-icon layui-icon-folder-open\" style=\"font-size: 32px;\"></i>\\n    <div class=\"docs-icon-name\">文件夹打开</div>\\n    <div class=\"docs-icon-code\">&#xeac1;</div>\\n    <div class=\"docs-icon-fontclass layui-font-12\">layui-icon-folder-open</div>\\n  </div>\\n  <!-- Additional icons continue similarly -->\\n</div>\n```"
  }
]