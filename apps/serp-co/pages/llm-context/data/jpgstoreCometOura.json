[
  {
    "owner": "jpg-store",
    "repo": "comet-oura",
    "content": "TITLE: Oura Full Example Configuration\nDESCRIPTION: This TOML configuration file provides a full example of configuring an Oura pipeline.  It uses a Node-to-Node (`N2N`) source, two filters (`Fingerprint` and `Selection`), and a Kafka sink. The `N2N` source connects to a Cardano mainnet relay, the filters select `Block` and `Transaction` variants, and the Kafka sink publishes events to a specified topic on a Kafka broker.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/daemon.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n[[filters]]\ntype = \"Fingerprint\"\n\n[[filters]]\ntype = \"Selection\"\npredicate = \"variant_in\"\nargument = [\"Block\", \"Transaction\"]\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"127.0.0.1:53147\"]\ntopic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon with Custom Configuration\nDESCRIPTION: Starts the Oura daemon with a custom configuration file specified by the `--config` option. The `my_config.toml` file will be used to configure the data pipeline.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/usage/daemon.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noura daemon --config my_config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SQS Sink in TOML\nDESCRIPTION: Configuration example for the AWS SQS sink. This defines the sink type, AWS region, SQS queue URL, FIFO queue setting, group ID for FIFO queues, and maximum retries for sending messages. The `queue_url` is the SQS queue URL provided by AWS.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/aws_sqs.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsSqs\"\nregion = \"us-west-2\"\nqueue_url = \"https://sqs.us-west-2.amazonaws.com/xxxxxx/my-queue\"\nfifo = true\ngroup_id = \"my_group\"\nmax_retries = 5\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP PubSub Sink\nDESCRIPTION: This TOML configuration defines a sink of type \"GcpPubSub\". It specifies the topic to which messages should be sent, which is set to \"test\".  The sink encodes each event as JSON before sending it to the designated PubSub topic.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/gcp_pubsub.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"GcpPubSub\"\ntopic = \"test\"\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Sink Configuration TOML\nDESCRIPTION: Configures an Elasticsearch sink with type, URL, index, and basic authentication. It specifies the Elasticsearch server address, index name, and credentials for connecting to the server. Idempotency and retry policy configurations are mentioned as optional settings.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/elastic.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Elastic\"\nurl = \"https://localhost:9200\"\nindex = \"oura.sink.v0.mainnet\"\n\n[sink.credentials]\ntype = \"Basic\"\nusername = \"oura123\"\npassword = \"my very secret stuff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink - Single Stream TOML\nDESCRIPTION: This configuration snippet shows how to configure the Redis stream sink to send all events to a single stream. It specifies the Redis server address and the name of the stream to use.  All incoming events will be serialized as JSON and added to the specified Redis stream.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/redis_streams.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nredis_server = \"redis://localhost:6379\"\nstream_name = \"mystream\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Sink Configuration (TOML)\nDESCRIPTION: This TOML configuration defines a Webhook sink. It specifies the endpoint URL, authorization details, timeout, error policy, retry policy, and custom headers. The sink sends each event as a JSON-encoded HTTP POST request.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/webhook.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Webhook\"\nurl = \"https://endpoint:5000/events\"\nauthorization = \"user:pass\"\ntimeout = 30000\nerror_policy = \"Continue\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: FileRotate Sink Configuration Example TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up a FileRotate sink. It includes parameters for specifying the output path, output format (JSONL), maximum bytes per file, maximum total files, and whether to compress rotated files. This configuration defines how events are written to the file system and how files are rotated and managed.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/file_rotate.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"FileRotate\"\noutput_path = \"/var/oura/mainnet\"\noutput_format = \"JSONL\"\nmax_bytes_per_file = 1_000_000\nmax_total_files = 10\ncompress_files = true\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'all_of' Predicate\nDESCRIPTION: This TOML configuration snippet showcases using the `all_of` predicate to filter events based on multiple conditions, where all conditions must be true for an event to pass. The example filters for \"OutputAsset\" events that also have a specific policy. This demonstrates Boolean \"and\" logic.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[filters.check]\npredicate = \"all_of\"\n\n[[filters.check.argument]]\npredicate = \"variant_in\"\nargument = [\"OutputAsset\"]\n\n[[filters.check.argument]]\npredicate = \"policy_equals\"\nargument = \"a5bb0e5bb275a573d744a021f9b3bff73595468e002755b447e01559\"\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with All of Addresses in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that interacts with all of the specified addresses simultaneously. It uses the `all` operator within the `filters.predicate` section.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[filters.predicate]\nall = [\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"stake178phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcccycj5\",\n]\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Address, Asset, and Metadata Label in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match transactions that simultaneously interact with a particular address, hold a specific asset, and present a specific metadata label. It uses the `all` operator within the `filters.predicate` section.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[filters.predicate]\nall = [\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\",\n    \"#789\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UtxoRPC Source\nDESCRIPTION: This TOML configuration snippet shows how to set up a UtxoRPC source. The 'type' field must be set to 'UtxoRPC', the 'url' field specifies the Dolos gRPC URL, and 'max_items_per_page' determines the number of blocks requested per page.  Default 'max_items_per_page' is 20.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sources/utxorpc.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"UtxoRPC\"\nurl = \"https://<hostname>\"\nmax_items_per_page = 20\n```\n\n----------------------------------------\n\nTITLE: Enabling Fingerprint Filter in TOML Configuration\nDESCRIPTION: This code snippet shows how to enable the Fingerprint filter within a TOML configuration file.  The `type` parameter must be set to \"Fingerprint\" to activate the filter in the pipeline.  This configuration enables the filter to compute and set the `fingerprint` property of each `Event` data structure.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/fingerprint.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Fingerprint\"\n```\n\n----------------------------------------\n\nTITLE: Chain Configuration Example TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure Oura's [chain] section with values for mainnet. These parameters are essential for Oura to establish a connection with the custom network. The configuration includes network type, magic number, epoch lengths, slot lengths, and known block hashes and timestamps for both Byron and Shelley eras.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/custom_network.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[chain]\ntype = \"custom\"\nmagic = 764824073\nbyron_epoch_length  = 432000\nbyron_slot_length = 20\nbyron_known_slot = 0\nbyron_known_time = 1506203091\nbyron_known_hash = \"f0f7892b5c333cffc4b3c4344de48af4cc63f55e44936196f365a9ef2244134f\"\nshelley_epoch_length = 432000\nshelley_slot_length = 1\nshelley_known_slot = 4492800\nshelley_known_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\nshelley_known_time = 1596059091\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration File\nDESCRIPTION: This TOML configuration file defines the data source as a Cardano node and the data sink as a Kafka topic. The source section specifies the connection details for the Cardano node (N2C via Unix socket, testnet magic). The sink section defines Kafka broker addresses and the target topic.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/guides/cardano_2_kafka.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"testnet\"\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"kafka-broker-0:9092\"]\ntopic = \"cardano-events\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura with a Custom Configuration File in Docker\nDESCRIPTION: This command demonstrates how to mount a custom configuration file for Oura when running it in Docker. It uses the `-v` flag to mount the `daemon.toml` file from the host's current working directory to the `/etc/oura/daemon.toml` path inside the container. Oura daemon is run in the background via the `-d` flag.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/docker.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -v $(pwd)/daemon.toml:/etc/oura/daemon.toml \\\n    ghcr.io/txpipe/oura:latest daemon\n```\n\n----------------------------------------\n\nTITLE: Configuring GcpCloudFunction Sink in TOML\nDESCRIPTION: This TOML configuration defines a GcpCloudFunction sink. It specifies the function URL, timeout, authorization, and additional headers. The sink sends events as JSON-encoded POST requests to the specified Cloud Function.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/gcp_cloudfunction.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"GcpCloudFunction\"\nurl = \"https://REGION-PROJECT_ID.cloudfunctions.net/FUNCTION_NAME\"\ntimeout = 30000\nauthorization = true\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GcpCloudFunction Sink\nDESCRIPTION: This TOML configuration defines a GcpCloudFunction sink named 'oura'. It includes settings for the Google Cloud project ID, region, timeout, authorization, custom headers, error policy, and retry policy. The configuration demonstrates how to specify extra headers and retry behavior when sending data to the cloud function.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/gcp_cloudfunction.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"GcpCloudFunction\"\nname = \"oura\"\nproject_id = \"XXX\"\nregion = \"us-west-2\"\ntimeout = 30000\nerror_policy = \"Continue\"\nauthorization = \"user:pass\"\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Sink Configuration - TOML\nDESCRIPTION: This TOML configuration defines an Elasticsearch sink with basic authentication. It specifies the Elasticsearch URL, the index to store events, and the credentials required for authentication. The `idempotency` flag can be optionally added to enable idempotent calls to Elasticsearch, preventing duplicate data.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/elasticsearch.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Elastic\"\nurl = \"https://localhost:9200\"\nindex = \"oura.sink.v0.mainnet\"\n\n[sink.credentials]\ntype = \"Basic\"\nusername = \"oura123\"\npassword = \"my very secret stuff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Sink\nDESCRIPTION: This snippet configures a Kafka sink by specifying the sink type as \"Kafka\", providing a list of Kafka broker addresses, and defining the topic to which events should be sent. The `brokers` parameter specifies the Kafka brokers' location, and the `topic` parameter specifies the Kafka topic to use for outbound messages.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/kafka.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Kafka\"\nbrokers = [\"kafka-broker-0:9092\"]\ntopic = \"cardano-events\"\n```\n\n----------------------------------------\n\nTITLE: Configuring N2N Source\nDESCRIPTION: Configuration snippet for setting up a typical N2N source in Comet Oura. It requires setting the `type` to \"N2N\" and specifying the `peers` as a list of strings, where each string represents a hostname and port number.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sources/n2n.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\npeers = [\"<hostname:port>\"]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Cardano Mainnet (TOML)\nDESCRIPTION: This snippet demonstrates how to configure the N2N source to connect to a remote Cardano node in the mainnet network using TCP sockets. It specifies the node's address and sets the network magic to \"mainnet\". The hostname and port provided connect to an IOHK relay.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2n.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Cardano Mainnet via Unix Socket\nDESCRIPTION: This snippet shows an example of connecting to a local Cardano node running on mainnet via Unix sockets.  It configures the N2C source with the appropriate address and network magic. Oura will use this information to establish a connection and begin fetching block data.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2c.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Nested Filter Configuration Example\nDESCRIPTION: This TOML configuration snippet presents a real-world example of using nested filters with the `any_of`, `all_of`, and other predicates. It demonstrates a complex filtering logic that filters for rollback events, CIP25Asset events with specific policies, and Transaction events with a specific VKey witness. This illustrates the flexibility of the selection filter.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"any_of\"\n\n[[filters.check.argument]]\npredicate = \"variant_in\"\nargument = [\"RollBack\"]\n\n[[filters.check.argument]]\npredicate = \"all_of\"\n\n[[filters.check.argument.argument]]\npredicate = \"variant_in\"\nargument = [\"CIP25Asset\"]\n\n[[filters.check.argument.argument]]\npredicate = \"any_of\"\n\n[[filters.check.argument.argument.argument]]\npredicate = \"policy_equals\"\nargument = \"<policy_a>\"\n\n[[filters.check.argument.argument.argument]]\npredicate = \"policy_equals\"\nargument = \"<policy_b>\"\n\n[[filters.check.argument]]\npredicate = \"all_of\"\n\n[[filters.check.argument.argument]]\npredicate = \"variant_in\"\nargument = [\"Transaction\"]\n\n[[filters.check.argument.argument]]\npredicate = \"v_key_witnesses_includes\"\nargument = \"<vkey>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink - Multiple Streams by Event Type TOML\nDESCRIPTION: This configuration snippet shows how to configure the Redis stream sink to send events to different streams based on their event type. The `stream_strategy` is set to `ByEventType`, causing the sink to create a new stream for each unique event type. The Redis server address is also specified.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/redis_streams.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nredis_server = \"redis://localhost:6379\"\nstream_strategy = \"ByEventType\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateful Cursor in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable and configure the stateful cursor feature in Oura. It specifies the persistence backend type (File) and the location of the cursor file within the file system. The `[cursor]` section enables the feature, `type` sets the persistence method, and `path` defines the file location. No external dependencies are explicitly required as this is a configuration file.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/stateful_cursor.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[cursor]\ntype = \"File\"\npath = \"/var/oura/cursor\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Sink Configuration\nDESCRIPTION: This TOML configuration snippet defines the settings for a RabbitMQ sink. It specifies the sink type as \"Rabbitmq\", the connection URI, the exchange name, and the routing key.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/rabbitmq.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Rabbitmq\"\nuri = \"amqp://rabbitmq:rabbitmq@127.0.0.1:5672\"\nexchange = \"events.exchange\"\nrouting_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Output Predicate in TOML\nDESCRIPTION: This snippet shows how to match transactions based on conditions related to their outputs, such as specific addresses, assets, and datums. It defines predicates for the output's address, assets, and datum fields.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n[filters.predicate.match.output]\naddress = \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\"\nassets = [\"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\"]\ndatum = \"datum1httkxyxp8x0dlpdt3k6cwng5pxj3j\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Sink Configuration Example\nDESCRIPTION: This TOML configuration defines a Webhook sink that sends events to a specified URL. It includes settings for authorization, custom headers, and error handling. The `timeout` specifies the HTTP response timeout in milliseconds.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/webhook.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Webhook\"\nurl = \"https://endpoint:5000/events\"\nauthorization = \"user:pass\"\ntimeout = 30000\nerror_policy = \"Continue\"\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring min_depth for N2N Source in Oura\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `min_depth` parameter for a node-to-node (N2N) source in Oura.  `min_depth` determines how many blocks deep a block must be before it is passed down the pipeline, mitigating the impact of rollbacks. Increasing `min_depth` reduces the chances of rollback events at the cost of increased latency.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/rollback_buffer.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\nmin_depth = 6\n```\n\n----------------------------------------\n\nTITLE: AWS SQS Sink Configuration - TOML\nDESCRIPTION: This TOML configuration snippet defines the settings for the AWS SQS sink in Oura. It specifies the queue type, AWS region, queue URL, and optional group ID for FIFO queues.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/aws_sqs.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"AwsSqs\"\nregion = \"us-west-2\"\nqueue_url = \"https://sqs.us-west-2.amazonaws.com/xxxxxx/my-queue.fifo\"\ngroup_id = \"my_group\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Cardano Testnet (TOML)\nDESCRIPTION: This snippet demonstrates how to configure the N2N source to connect to a remote Cardano node in the testnet network via TCP sockets. It specifies the node's address and sets the network magic to \"testnet\". The hostname and port provided connect to an IOHK relay.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2n.mdx#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Deno Filter Configuration in TOML\nDESCRIPTION: This TOML snippet configures the Deno filter within the pipeline. It specifies the filter's type as \"Deno\", the path to the main JavaScript module, and whether to use asynchronous execution.  The `main_module` parameter defines the entry point for the Deno filter, pointing to the JavaScript file to be executed.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/deno.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[filters]]\ntype = \"Deno\"\nmain_module = \"JS file Path\"\nuse_async = true\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration Example - TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to configure Oura to use fallback intersection points. The process will attempt to intersect at slot `4449598`, then `43159`, and finally `0` if the previous points are not found. The `type` is set to \"Fallbacks\" and `value` is an array of tuples representing slot and block hash.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/intersect_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = \"Fallbacks\"\nvalue = [\n    [4449598, \"2c9ba2611c5d636ecdb3077fde754413c9d6141c6288109922790e53bbb938b5\"],\n    [43159, \"f5d398d6f71a9578521b05c43a668b06b6103f94fcf8d844d4c0aa906704b7a6\"],\n    [0, \"f0f7892b5c333cffc4b3c4344de48af4cc63f55e44936196f365a9ef2244134f\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP PubSub Sink\nDESCRIPTION: This TOML configuration defines a sink that sends events to a Google Cloud PubSub topic. It specifies the sink type as \"GcpPubSub\", the target topic as \"test\", and a retry policy for handling message delivery failures. The retry policy includes settings for maximum retries, backoff unit, backoff factor, and maximum backoff duration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/gcp_pubsub.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"GcpPubSub\"\ntopic = \"test\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Specific Metadata Label in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that holds a specific metadata label. The `predicate` field is set to the metadata label string.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\npredicate = \"#127\"\n```\n\n----------------------------------------\n\nTITLE: Configure AwsLambda Sink\nDESCRIPTION: This TOML configuration snippet shows how to configure the `AwsLambda` sink in Oura. It requires specifying the AWS region and the Lambda function name (ARN). The type must be set to `AwsLambda`.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/aws_lambda.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsLambda\"\nregion = \"us-east-1\"\nfunction_name = \"my-lambda\"\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Specific Asset in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that interacts with a specific asset.  The `predicate` field is set to the asset string.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\npredicate = \"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\"\n```\n\n----------------------------------------\n\nTITLE: Including Transaction Details and Block CBOR\nDESCRIPTION: This snippet shows how to configure Oura to include transaction details and the block CBOR data within the events it produces. By setting `include_transaction_details` and `include_block_cbor` to `true`, Oura provides more comprehensive information about each transaction and block.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2c.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n\n\n[source.mapper]\ninclude_transaction_details = true\ninclude_block_cbor = true\n```\n\n----------------------------------------\n\nTITLE: N2C Source Configuration Example\nDESCRIPTION: This snippet shows a basic configuration example for the N2C source in Oura. It defines the source type, address, network magic, and optional intersect and mapper sections for customizing the data retrieval process.  The `address` specifies the location of the Cardano node's Unix socket.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2c.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"<socket location>\"]\nmagic = <network magic>\n\n[source.intersect]\ntype = <intersect strategy>\nvalue = <intersect argument>\n\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Specific Datum in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that holds a particular datum. The `predicate` field is set to the datum string.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\npredicate = \"datum1httkxyxp8x0dlpdt3k6cwng5pxj3j\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Sink in TOML\nDESCRIPTION: This configuration snippet demonstrates how to configure the AwsS3 sink in the daemon.toml file. The type must be set to 'AwsS3'. The region, bucket, and prefix specify the AWS region, bucket name, and the prefix for the object keys respectively.  The sink saves CBOR formatted blocks.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/aws_s3.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"AwsS3\"\nregion = \"us-west-2\"\nbucket = \"my-bucket\"\nprefix = \"mainnet/\"\n\n```\n\n----------------------------------------\n\nTITLE: Specifying a Versioned Oura Docker Image\nDESCRIPTION: This example illustrates how to use a specific version of the Oura Docker image, rather than the `latest` tag.  Using versioned images is recommended for production environments to avoid unexpected behavior from new releases. Replace `v2.0.0-alpha.1` with the desired version.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/docker.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nghcr.io/txpipe/oura:v2.0.0-alpha.1\n```\n\n----------------------------------------\n\nTITLE: Oura as Standalone Deployment in Kubernetes\nDESCRIPTION: This YAML defines a ConfigMap and a Deployment for Oura as a standalone service in Kubernetes.  The ConfigMap contains the Oura daemon configuration, while the Deployment defines the Oura pod with resource requests and limits.  This approach allows running Oura independently from the Cardano node, but requires the node's address to be configured in the Oura configuration. Ensure only one replica is running to avoid duplicate pipelines.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/kubernetes.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: oura\ndata:\n  daemon.toml: |-\n    [source]\n    # REDACTED: here goes your `source` configuration options\n\n    [[filters]]\n    # REDACTED: here goes your `filters` configuration options\n\n    [sink]\n    # REDACTED: here goes your `sink` configuration options\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: oura\n  labels:\n    app: oura\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: oura\n  template:\n    metadata:\n      labels:\n        app: oura\n    spec:\n      containers:\n      - name: main\n        image: ghcr.io/txpipe/oura:latest\n        env:\n          - name: \"RUST_LOG\"\n            value: \"info\"\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n          limits:\n            memory: 200Mi\n            cpu: 200m\n        args:\n          - \"daemon\"\n        volumeMounts:\n          - mountPath: /etc/oura\n            name: config\n      volumes:\n      - name: config\n        configMap:\n          name: oura\n```\n\n----------------------------------------\n\nTITLE: Oura as Sidecar Container in Kubernetes\nDESCRIPTION: This YAML defines a StatefulSet for a Cardano node with Oura running as a sidecar container. It uses volume mounts to share the Cardano node's Unix socket with Oura. This configuration requires a Cardano node StatefulSet/Deployment and enables Oura to access the node's data.  It involves creating an emptyDir volume to share the Unix socket and a configMap for Oura's configuration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/kubernetes.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cardano-node\nspec:\n\n  # REDACTED: here goes your normal cardano node sts / deployment spec\n\n  template:\n    spec:\n\n      # REDACTED: here goes your normal cardano node pod specs\n\n      containers:\n      - name: main\n\n        # REDACTED: here goes your normal cardano node container properties\n\n        # add a new volume mount to enable the socket to be\n        # consumed by the 2nd container in the pod (Oura)\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n\n      # add a 2nd container pointing to the _Oura_ image\n      - name: oura\n        image: ghcr.io/txpipe/oura:latest\n\n        # we mount the same volume that the main container uses as the source\n        # for the Cardano node unix socket.\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n        - mountPath: /etc/oura\n          name: oura-config\n\n      volumes:\n\n      # REDACTED: here goes any required volume for you normal cardano node setup\n\n      # empty-dir volume to share the unix socket between containers\n      - name: unix-socket\n        emptyDir: {}\n\n      # a config map resource with Oura's config particular for your requirements\n      - name: oura-config\n        configMap:\n          name: oura-config\n```\n\n----------------------------------------\n\nTITLE: Full Oura Configuration Example\nDESCRIPTION: Demonstrates a complete Oura configuration example using a Node-to-Node (N2N) data source, a Kafka sink for output, and SplitBlock and ParseCbor filters. The intersect type is set to Tip.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/usage/daemon.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\npeers = [\"relays-new.cardano-mainnet.iohk.io:3001\"]\n\n[intersect]\ntype = \"Tip\"\n\n[[filters]]\ntype = \"SplitBlock\"\n\n[[filters]]\ntype = \"ParseCbor\"\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"127.0.0.1:53147\"]\ntopic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Example Data Sent to Sink\nDESCRIPTION: This JSON snippet illustrates the structure of the data sent to the sink after the SplitBlock filter has processed a transaction. The event type is \"apply\", containing the slot number, hash, and transaction data in hexadecimal format. The sink receives an event for each transaction in the block.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/split_block.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"hex\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Watch Mode\nDESCRIPTION: This command initiates Oura in watch mode.  It requires specifying the socket for connecting to the Cardano node. Options can be used to configure the bearer type, network magic, mini-protocol mode, starting point, and output wrapping behavior.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura watch [OPTIONS] <socket>\n```\n\n----------------------------------------\n\nTITLE: Configure Retry Policy in TOML\nDESCRIPTION: Configures the retry policy within the `daemon.toml` file for Oura sinks. This snippet demonstrates setting the maximum number of retries, the initial backoff unit, the backoff factor, and the maximum backoff delay. These settings control how Oura handles failed attempts in sinks like GCP CloudFunction, GCP PubSub, Webhook, and Elasticsearch.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/retry_policy.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Cardano Node\nDESCRIPTION: Example configuration for connecting to a remote Cardano node through TCP sockets using the N2N source. The `peers` parameter specifies the address of the Cardano node relay.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sources/n2n.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\npeers = [\"relays-new.cardano-mainnet.iohk.io:3001\"]\n```\n\n----------------------------------------\n\nTITLE: Running Oura with WASM plugin\nDESCRIPTION: This command runs Oura using the `daemon.toml` configuration file, which is pre-configured to point to the compiled WASM module. It includes the `wasm` feature flag, which is required to enable WASM plugin support. This command runs Oura in daemon mode.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/wasm_basic/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --features wasm --bin oura -- daemon --config ./daemon.toml\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Dump Mode\nDESCRIPTION: This command executes Oura in 'dump' mode, connecting to a Cardano node to stream blockchain events. The `<socket>` argument specifies the connection details (TCP address or Unix socket path).  Options can be used to customize the connection, output, and starting point.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/dump.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noura dump [OPTIONS] <socket>\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'any_of' Predicate\nDESCRIPTION: This TOML configuration snippet demonstrates using the `any_of` predicate to filter events based on multiple conditions, where any of the conditions being true allows the event to pass. The example filters events that have either of two specified policies. This demonstrates Boolean \"or\" logic.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[filters.check]\npredicate = \"any_of\"\n\n[[filters.check.argument]]\npredicate = \"policy_equals\"\nargument = \"4bf184e01e0f163296ab253edd60774e2d34367d0e7b6cbc689b567d\"\n\n[[filters.check.argument]]\npredicate = \"policy_equals\"\nargument = \"a5bb0e5bb275a573d744a021f9b3bff73595468e002755b447e01559\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura Daemon with Docker\nDESCRIPTION: This command runs Oura's daemon component within a Docker container and displays the daemon's help message. It leverages the `-it` flags for interactive mode and tty allocation.  It shows how to pass arguments to the Oura executable within the container.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/docker.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it ghcr.io/txpipe/oura:latest \\\n    daemon --help\n```\n\n----------------------------------------\n\nTITLE: Using Versioned Oura Docker Image\nDESCRIPTION: This command uses a specific versioned Oura Docker image, replacing 'latest' with the desired version tag (e.g., v1.0.0). Using versioned images ensures stability by avoiding unexpected changes from newer releases.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/docker.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nghcr.io/txpipe/oura:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: N2N Source Configuration Template (TOML)\nDESCRIPTION: This snippet shows the general structure of the N2N source configuration in TOML format.  It defines the type, address, network magic, and optional intersect and mapper sections. The `type` field must be `N2N`.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2n.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"<hostname:port>\"]\nmagic = <network magic>\n\n[source.intersect]\ntype = <intersect strategy>\nvalue = <intersect argument>\n\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\n```\n\n----------------------------------------\n\nTITLE: Start Oura Daemon\nDESCRIPTION: Starts Oura in daemon mode with default configuration. It loads configuration from `/etc/oura/daemon.toml` if no config file is specified.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/daemon.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura daemon\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Specific Stake Address in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that interacts with a particular stake address. The `predicate` field is set to the stake address string.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\npredicate = \"stake178phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcccycj5\"\n```\n\n----------------------------------------\n\nTITLE: Start Oura Daemon with Custom Cursor\nDESCRIPTION: Starts Oura in daemon mode with a specific starting point in the chain using the `--cursor` option. The cursor is specified as `slot,hex-hash`.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/daemon.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\noura daemon --cursor 56134714,2d2a5503c16671ac7d5296f8e6bfeee050b2c2900a7d8c97b36c434667eb99d9\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Redis Cursor Persistence (Shell)\nDESCRIPTION: This command executes the Oura binary with the 'redis' feature enabled, specifying the 'daemon' command and loading configuration from the 'daemon.toml' file. It requires the Redis instance to be running and accessible as defined in the configuration file.  The 'redis' feature flag enables the Redis-based cursor persistence functionality.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/redis_cursor/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin oura --features redis daemon --config daemon.toml\n```\n\n----------------------------------------\n\nTITLE: Filtering by Policy ID\nDESCRIPTION: This TOML configuration snippet demonstrates how to filter events based on a specific policy ID. It uses the `policy_equals` predicate, which checks if the policy of a mint or output asset matches the provided policy ID. This is applicable to `Transaction`, `Mint`, `CIP25Asset`, and `OutputAsset` variants.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"policy_equals\"\nargument = \"<policy_id>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics in daemon.toml\nDESCRIPTION: This snippet shows the configuration settings for enabling and customizing the metrics endpoint in Oura's `daemon.toml` file. It allows specifying the address and endpoint for exposing the metrics in Prometheus format.  The absence of the `[metrics]` section disables the feature. Default address is `0.0.0.0:9186` and default endpoint is `/metrics`.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/pipeline_metrics.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\naddress = \"0.0.0.0:9186\"\nendpoint = \"/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Piping Data from Remote Relay to Shell Command\nDESCRIPTION: This example demonstrates piping the output of Oura in 'dump' mode to another shell command (grep). It connects to the specified host and port using TCP, streams blockchain data to stdout, and filters the output using `grep` to find lines containing \"block\".\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/dump.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp | grep block\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration Structure\nDESCRIPTION: Shows the basic structure for configuring Oura's intersect options in the `daemon.toml` file.  The `type` defines the intersection strategy (Origin, Tip, Point, Breadcrumbs), and `value` provides the corresponding argument (point or array of points). No dependencies required.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/intersect_options.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[intersect]\ntype = <Type>\nvalue = <Value>\n```\n\n----------------------------------------\n\nTITLE: Including Transaction Details and Block CBOR (TOML)\nDESCRIPTION: This snippet demonstrates how to configure the N2N source to include detailed information within transaction events and the raw block CBOR. It utilizes the `source.mapper` section to enable `include_transaction_details` and `include_block_cbor` options.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2n.mdx#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n\n[source.mapper]\ninclude_transaction_details = true\ninclude_block_cbor = true\n```\n\n----------------------------------------\n\nTITLE: Filtering by Asset Name\nDESCRIPTION: This TOML configuration snippet demonstrates how to filter events based on a specific asset (token name). It uses the `asset_equals` predicate, which checks if the asset name of a mint or output asset matches the provided name. Applicable to `CIP25Asset`, `Transaction`, `OutputAsset`, and `Mint` variants.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"asset_equals\"\nargument = \"<asset>\"\n```\n\n----------------------------------------\n\nTITLE: Reading from a Specific Point in the Chain\nDESCRIPTION: This example illustrates how to configure Oura to start reading chain events from a specific point using the `intersect` option. It specifies both the slot number and block hash to define the intersection point. Oura begins processing blocks from the provided point onwards.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2c.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n\n[source.intersect]\ntype = \"Point\"\nvalue = [48896539, \"5d1f1b6149b9e80e0ff44f442e0cab0b36437bb92eacf987384be479d4282357\"]\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Specific Address in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that interacts with a particular address. The `predicate` field is set to the address string.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\npredicate = \"addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgse35a3x\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ParseCbor Filter in TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the `ParseCbor` filter within a daemon configuration file. Adding this section enables the filter as part of the data processing pipeline.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/parse_cbor.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"ParseCbor\"\n```\n\n----------------------------------------\n\nTITLE: Watching Live Data from Remote Relay Node\nDESCRIPTION: This command connects to a remote Cardano mainnet relay node using TCP. It displays live blockchain events as they occur.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Oura Metrics in TOML\nDESCRIPTION: This code snippet shows how to configure the metrics endpoint in the Oura daemon's TOML configuration file. It specifies the address and endpoint where the metrics will be exposed. The `address` parameter defines the IP and port, while the `endpoint` parameter defines the URL path.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/pipeline_metrics.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# daemon.toml file\n\n[metrics]\naddress = \"0.0.0.0:9186\"\nendpoint = \"/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output Example\nDESCRIPTION: This snippet illustrates the expected output when accessing the `/metrics` endpoint of an Oura instance with metrics enabled. The output is in Prometheus format, including HELP and TYPE metadata for each metric, followed by the metric name and its current value. The metrics cover chain tip, rollback count, source and sink progress, and event counts.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/pipeline_metrics.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# HELP chain_tip the last detected tip of the chain (height)\n# TYPE chain_tip gauge\nchain_tip 6935733\n# HELP rollback_count number of rollback events occurred\n# TYPE rollback_count counter\nrollback_count 1\n# HELP sink_current_slot last slot processed by the sink of the pipeline\n# TYPE sink_current_slot gauge\nsink_current_slot 2839340\n# HELP sink_event_count number of events processed by the sink of the pipeline\n# TYPE sink_event_count counter\nsink_event_count 2277714\n# HELP source_current_height last height (block #) processed by the source of the pipeline\n# TYPE source_current_height gauge\nsource_current_height 2837810\n# HELP source_current_slot last slot processed by the source of the pipeline\n# TYPE source_current_slot gauge\nsource_current_slot 2839340\n# HELP source_event_count number of events processed by the source of the pipeline\n# TYPE source_event_count counter\nsource_event_count 2277715\n```\n\n----------------------------------------\n\nTITLE: Configuring LegacyV1 Filter in TOML\nDESCRIPTION: This TOML configuration snippet shows how to enable the LegacyV1 filter and configure its behavior within the Comet Oura pipeline.  It demonstrates disabling various optional features such as including block end events, transaction details, transaction end events, block cbor, and byron ebb. All options are set to `false` here.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/legacy_v1.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"LegacyV1\"\n include_block_end_events = false\n include_transaction_details = false\n include_transaction_end_events = false\n include_block_details = false\n include_block_cbor = false\n include_byron_ebb = false\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Remote Dolos Node\nDESCRIPTION: This TOML configuration snippet demonstrates connecting to a remote Dolos node in preprod through gRPC. The 'url' field specifies the gRPC endpoint of the Dolos node, and 'max_items_per_page' is set to 20. This configuration is used to fetch blocks from the specified Dolos node.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sources/utxorpc.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"UtxoRPC\"\nurl = \"https://50051-romantic-calmness-b55bqg.us1.demeter.run\"\nmax_items_per_page = 20\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for Deno Filter\nDESCRIPTION: This JavaScript snippet defines a function that processes event data within the Deno filter. It takes the event data as input, adds a new property (`extraProp`), and returns the modified event data. The function must be exported as `mapEvent` to be recognized by the Deno filter.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/deno.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function mapEvent(event) {\n    const event2 = { ...event, extraProp: \"123abc\" };\n    return event2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Oura from Source with Cargo\nDESCRIPTION: This code snippet outlines the process of cloning the Oura repository, navigating into it, and installing the project using Cargo. The `cargo install` command with the `--all-features` flag ensures that all features are included during the installation process.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/from_source.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:txpipe/oura.git\ncd oura\ncargo install --all-features --path .\n```\n\n----------------------------------------\n\nTITLE: Install Oura Binary on MacOS (Shell)\nDESCRIPTION: Downloads and installs the Oura binary release for MacOS from a Github URL.  It uses curl to fetch the tarball, extracts it to a temporary directory, and then moves the executable to /usr/local/bin. Requires curl and tar.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/binary_release.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2iH | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the selection filter in the Oura pipeline. It sets the filter type to \"Selection\" and specifies a predicate and its argument for evaluating events. This snippet provides the basic structure for configuring event filtering within the Oura daemon configuration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"<predicate kind>\"\nargument = <predicate argument>\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Daemon Mode\nDESCRIPTION: This shell command executes the Oura binary in daemon mode, loading the configuration from the specified TOML file. It sets the RUST_LOG environment variable to 'info', which controls the logging level. The output is then sent to standard output.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/guides/cardano_2_kafka.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nRUST_LOG=info oura daemon --config cardano2kafka.toml\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon\nDESCRIPTION: Starts the Oura daemon with the default configuration file located at `/etc/oura/daemon.toml`. No specific configuration file is provided, so Oura will use the default one.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/usage/daemon.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noura daemon\n```\n\n----------------------------------------\n\nTITLE: Matching Transaction with Any of Addresses in TOML\nDESCRIPTION: This snippet demonstrates how to configure a filter to match any transaction that interacts with any one of the specified addresses in the list. It uses the `any` operator within the `filters.predicate` section.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/select.mdx#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[filters.predicate]\nany = [\n    \"addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgse35a3x\",\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"addr1vx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzers66hrl8\",\n]\n```\n\n----------------------------------------\n\nTITLE: Terminal Sink Configuration in TOML\nDESCRIPTION: Configures a Terminal sink to output events to the terminal. The `throttle_min_span_millis` parameter controls the minimum time between prints, and the `wrap` parameter enables text wrapping for long lines.  The sink type is explicitly set to \"Terminal\".\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/terminal.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Terminal\"\nthrottle_min_span_millis = 500\nwrap = true\n```\n\n----------------------------------------\n\nTITLE: Dumping Data from Remote Relay to Rotating Files\nDESCRIPTION: This example shows how to stream blockchain data from a remote Cardano relay node into a set of rotating log files.  It connects to the specified host and port using TCP and specifies the output file prefix using the `--output` option. Logs are rotated and compressed automatically.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/dump.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp --output ./mainnet-logs\n```\n\n----------------------------------------\n\nTITLE: Start Oura Daemon with Custom Config\nDESCRIPTION: Starts Oura in daemon mode with a custom configuration file. The `--config` option specifies the path to the TOML configuration file to use.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/daemon.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura daemon --config my_config.toml\n```\n\n----------------------------------------\n\nTITLE: Finalize Oura Configuration\nDESCRIPTION: Configuration options within the `[finalize]` section of the `daemon.toml` file allow instructing Oura to stop syncing when it reaches a specific block hash or slot. `until_hash` specifies the block hash to stop at, and `max_block_slot` specifies the slot number.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/finalize_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[finalize]\nuntil_hash = <BlockHash>\nmax_block_slot = <SlotNumber>\n```\n\n----------------------------------------\n\nTITLE: Terminal Sink Configuration TOML\nDESCRIPTION: Configures the Terminal sink with options for throttling and text wrapping.  The `type` parameter is required and must be set to \"Terminal\". The `throttle_min_span_millis` parameter controls the minimum time between printing events, and the `wrap` parameter controls whether long lines are wrapped or truncated.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/terminal.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Terminal\"\nthrottle_min_span_millis = 500\nwrap = true\n```\n\n----------------------------------------\n\nTITLE: Oura Finalize Config - TOML\nDESCRIPTION: This TOML config shows the basic structure for the finalize config in Oura. It has an `until_hash` which specifies the block hash at which Oura should stop syncing.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/intersect_options.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source.finalize]\nuntil_hash = <BlockHash>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cursor Information from Redis (Shell)\nDESCRIPTION: These commands demonstrate how to connect to a Redis instance using the `redis-cli` command-line interface and retrieve the cursor information stored under the key specified in the `daemon.toml` file. It assumes that Docker is running and the Redis container is accessible. The expected output is the serialized cursor data.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/redis_cursor/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ docker exec -it redis redis-cli\n127.0.0.1:6379> GET key\n```\n\n----------------------------------------\n\nTITLE: Watching Live Data from Preview Testnet\nDESCRIPTION: This command connects to the Cardano \"Preview\" testnet using a TCP bearer and the `--magic preview` option.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\noura watch preview-node.world.dev.cardano.org:30002 --bearer tcp --magic preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Logs Sink in TOML\nDESCRIPTION: This TOML configuration defines a Logs sink, specifying the output path, format, maximum file size, maximum number of files, and whether to compress rotated files. It provides a complete example of how to configure the sink for event logging in Oura.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/logs.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Logs\"\noutput_path = \"/var/oura/mainnet\"\noutput_format = \"JSONL\"\nmax_bytes_per_file = 1_000_000\nmax_total_files = 10\ncompress_files = true\n```\n\n----------------------------------------\n\nTITLE: Watching Live Data from Pre-Production Testnet\nDESCRIPTION: This command connects to the Cardano \"Pre-Production\" testnet using a TCP bearer and the `--magic preprod` option.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\noura watch preprod-node.world.dev.cardano.org:30000 --bearer tcp --magic preprod\n```\n\n----------------------------------------\n\nTITLE: Watching Data Starting at a Specific Block\nDESCRIPTION: This command connects to a remote Cardano mainnet relay node and starts reading from a specific block identified by its slot and hash. The `--since` option defines the starting point.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 \\\n    --bearer tcp \\\n    --since 49159253,d034a2d0e4c3076f57368ed59319010c265718f0923057f8ff914a3b6bfd1314\n```\n\n----------------------------------------\n\nTITLE: Cloning Oura repository - Shell\nDESCRIPTION: Clones the Oura repository from GitHub using Git. This step is necessary to obtain the source code of the Oura project before building and installing it.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/from_source.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:txpipe/oura.git\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Sink Configuration in TOML\nDESCRIPTION: This TOML configuration defines a RabbitMQ sink. It specifies the type as 'Rabbitmq', the URI for connecting to the RabbitMQ server, the exchange name where events will be published, and the routing key used for message routing. It also references an external retry policy.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/rabbitmq.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Rabbitmq\"\nuri = \"amqp://rabbitmq:rabbitmq@127.0.0.1:5672\"\nexchange = \"events.exchange\"\nrouting_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Chain Configuration Example TOML\nDESCRIPTION: This TOML configuration example provides the chain information required by Oura to connect to the Cardano Testnet.  It includes parameters like epoch length, slot length, known block hash and time for both Byron and Shelley eras, as well as the address human-readable part and AdaHandle policy.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/custom_network.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[chain]\nbyron_epoch_length  = 432000\nbyron_slot_length = 20\nbyron_known_slot = 0\nbyron_known_hash = \"8f8602837f7c6f8b8867dd1cbc1842cf51a27eaed2c70ef48325d00f8efb320f\"\nbyron_known_time = 1564010416\nshelley_epoch_length = 432000\nshelley_slot_length = 1\nshelley_known_slot = 1598400\nshelley_known_hash = \"02b1c561715da9e540411123a6135ee319b02f60b9a11a603d3305556c04329f\"\nshelley_known_time = 1595967616\naddress_hrp = \"addr_test\"\nadahandle_policy = \"8d18d786e92776c824607fd8e193ec535c79dc61ea2405ddf3b09fe3\"\n\n```\n\n----------------------------------------\n\nTITLE: Filtering by VKey Witness\nDESCRIPTION: This TOML configuration snippet demonstrates how to filter events based on a VKey witness. It uses the `v_key_witnesses_includes` predicate, which checks if at least one of the VKeys matches the specified value. It applies to `VKeyWitness` and `Transaction` variants, and requires `include_transaction_details = true` in the mapper configuration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[source.mapper]\ninclude_transaction_details = true\n\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"v_key_witnesses_includes\"\nargument = \"<vkey>\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output\nDESCRIPTION: This code snippet shows the output format of the /metrics endpoint in Prometheus format. It includes HELP and TYPE metadata followed by the metric name and its current value. This data can be scraped by Prometheus and visualized in tools like Grafana.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/pipeline_metrics.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# HELP chain_tip the last detected tip of the chain (height)\n# TYPE chain_tip gauge\nchain_tip 6935733\n# HELP rollback_count number of rollback events occurred\n# TYPE rollback_count counter\nrollback_count 1\n# HELP sink_current_slot last slot processed by the sink of the pipeline\n# TYPE sink_current_slot gauge\nsink_current_slot 2839340\n# HELP sink_event_count number of events processed by the sink of the pipeline\n# TYPE sink_event_count counter\nsink_event_count 2277714\n# HELP source_current_height last height (block #) processed by the source of the pipeline\n# TYPE source_current_height gauge\nsource_current_height 2837810\n# HELP source_current_slot last slot processed by the source of the pipeline\n# TYPE source_current_slot gauge\nsource_current_slot 2839340\n# HELP source_event_count number of events processed by the source of the pipeline\n# TYPE source_event_count counter\nsource_event_count 2277715\n```\n\n----------------------------------------\n\nTITLE: Filtering by Metadata Sub Label\nDESCRIPTION: This TOML configuration snippet demonstrates how to filter events based on at least one metadata sub-label (key in the JSON map). It utilizes the `metadata_any_sub_label_equals` predicate, which checks if any sub-label in a metadata entry matches the specified value, applied on the `Metadata` variant.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"metadata_any_sub_label_equals\"\nargument = \"<label>\"\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration File Skeleton\nDESCRIPTION: Shows the general structure of an Oura configuration file written in TOML. It defines the source, intersect, filters (as an array), and sink sections, each with a `type` field and custom configuration options.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/usage/daemon.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"X\" # the type of source to use\n\n# custom config fields for this source type\nfoo = \"abc\"\nbar = \"xyz\"\n\n[intersect]\ntype = \"W\" # the type of source intersect chain\n\n[[filters]]\ntype = \"Y\" # the type of filter to use\n\n# custom config fields for this filter type\nfoo = \"123\"\nbar = \"789\"\n\n[sink]\n# the type of sink to use\ntype = \"Z\"\n\n# custom config fields for this sink type\nfoo = \"123\"\nbar = \"789\"\n```\n\n----------------------------------------\n\nTITLE: Installing Oura binary on GNU/Linux using shell script\nDESCRIPTION: Downloads and installs the Oura binary release for GNU/Linux. The script uses curl to download the release, extracts it to a temporary directory, and then moves the executable to /usr/local/bin.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/binary_release.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2ix | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Command-Line Arguments\nDESCRIPTION: This command runs Oura within a Docker container, passing specific command-line arguments to the Oura executable. It sets up an interactive terminal session (-it) and utilizes 'watch' and '--bearer tcp' parameters for Oura's operation, typically targeting a Cardano relay.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/docker.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it ghcr.io/txpipe/oura:latest \\\n    watch relays-new.cardano-mainnet.iohk.io:3001 \\\n    --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Install Oura Binary on GNU/Linux (Shell)\nDESCRIPTION: Downloads and installs the Oura binary release for GNU/Linux from a Github URL. It utilizes curl to retrieve the tarball, extracts it to a temporary directory (/tmp), and subsequently moves the executable file to the /usr/local/bin directory.  Requires curl and tar.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/binary_release.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2ix | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration Skeleton\nDESCRIPTION: This TOML configuration file skeleton defines the structure for configuring an Oura pipeline. It includes sections for `source`, `filters`, and `sink` to specify data origin, processing filters, and data destination, respectively. An optional `cursor` section allows configuring the cursor feature.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/daemon.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"X\" # the type of source to use\n\n# custom config fields for this source type\nfoo = \"abc\"\nbar = \"xyz\"\n\n[[filters]]\ntype = \"Y\" # the type of filter to use\n\n# custom config fields for this filter type\nfoo = \"123\"\nbar = \"789\"\n\n[sink]\n# the type of sink to use\ntype = \"Z\"\n\n# custom config fields for this sink type\nfoo = \"123\"\nbar = \"789\"\n\n# optional cursor settings, remove seaction to disable feature\n[cursor]\ntype = \"File\"\npath = \"/var/oura/cursor\"\n```\n\n----------------------------------------\n\nTITLE: Oura Origin Intersect and Finalize Configuration - TOML\nDESCRIPTION: This TOML configuration demonstrates how to configure Oura to sync the entire Byron era. It sets the `type` to \"Origin\" in the `[source.intersect]` section, instructing Oura to start from the beginning of the chain.  The `[source.finalize]` section defines `until_hash` which specifies the block hash at which Oura should stop syncing.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/intersect_options.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = \"Origin\"\n\n[source.finalize]\nuntil_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SplitBlock Filter\nDESCRIPTION: This configuration snippet shows how to enable the SplitBlock filter within the daemon's configuration file.  Adding this section to the `filters` array will activate the filter in the data processing pipeline. The filter type is specified as \"SplitBlock\".\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/split_block.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"SplitBlock\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Event Variant\nDESCRIPTION: This TOML configuration snippet demonstrates how to use the `variant_in` predicate to filter events based on their variant. It specifies that only events with the variants \"Block\" or \"Transaction\" should pass through the filter. This is useful for pipelines that only need to process specific types of events.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"variant_in\"\nargument = [\"Block\", \"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Configure Oura Mapper Options\nDESCRIPTION: This TOML configuration defines the settings for Oura's mapper, enabling or disabling specific features that impact performance. These options control the inclusion of block end events, transaction details, transaction end events, block CBOR, and Byron EBB events.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/mapper_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\ninclude_byron_ebb = <bool>\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Config - TOML\nDESCRIPTION: This TOML config shows the basic structure for the intersect config in Oura. It has a `type` (strategy to use for intersect) and a `value` to use as argument for the selected strategy.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/advanced/intersect_options.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = <Type>\nvalue = <Value>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Cardano Testnet via Unix Socket\nDESCRIPTION: This snippet demonstrates how to connect to a local Cardano node running on testnet through Unix sockets. It configures the N2C source with the testnet network magic and the socket address. This allows Oura to fetch data from the testnet blockchain.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2c.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Event Variant\nDESCRIPTION: This TOML configuration snippet demonstrates how to use the `variant_not_in` predicate to exclude events based on their variant. It specifies that all events except those with the variant \"Transaction\" should pass through the filter. This is useful for pipelines that need to process all events except a specific type.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"variant_not_in\"\nargument = [\"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring the AWS S3 Sink in TOML\nDESCRIPTION: This TOML configuration snippet shows how to set up the AWS S3 sink. It defines the sink's type, region, bucket, prefix, naming convention, content encoding, and maximum retry attempts.  The configuration parameters control how the sink interacts with the AWS S3 service.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/aws_s3.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"AwsS3\"\nregion = \"us-west-2\"\nbucket = \"my-bucket\"\nprefix = \"mainnet/\"\nnaming = \"SlotHash\"\ncontent = \"Cbor\"\nmax_retries = 5\n```\n\n----------------------------------------\n\nTITLE: Configure Retry Policy in TOML\nDESCRIPTION: This code snippet demonstrates how to configure retry policies within the `daemon.toml` file for the Oura daemon. It sets parameters such as `max_retries`, `backoff_unit_sec`, `backoff_factor`, and `max_backoff_sec` to control the retry behavior. The `dismissible` parameter determines if retries can be dismissed.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/retry_policy.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[retries]\nmax_retries = 3\nbackoff_unit_sec = 10\nbackoff_factor = 3\nmax_backoff_sec = 10\ndismissible = true\n```\n\n----------------------------------------\n\nTITLE: Negating a Predicate with 'not'\nDESCRIPTION: This TOML configuration snippet shows how to use the `not` predicate to negate the result of another predicate. In this example, it negates the `variant_in` predicate to allow all events except those with the variant \"Transaction\". This is a more complex way to achieve the same result as `variant_not_in`.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"not\"\n\n[filters.check.argument]\npredicate = \"variant_in\"\nargument = [\"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Oura Sidecar Deployment in Kubernetes\nDESCRIPTION: This YAML configuration defines a StatefulSet for a Cardano node with Oura deployed as a sidecar container. It includes volume mounts to share the unix socket between the Cardano node and Oura, allowing Oura to access node data. The configuration also specifies the Oura image and its mount path for configuration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/kubernetes.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cardano-node\nspec:\n\n  # REDACTED: here goes your normal cardano node sts / deployment spec\n\n  template:\n    spec:\n\n      # REDACTED: here goes your normal cardano node pod specs\n\n      containers:\n      - name: main\n\n        # REDACTED: here goes your normal cardano node container properties\n\n        # add a new volume mount to enable the socket to be\n        # consumed by the 2nd container in the pod (Oura)\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n\n      # add a 2nd container pointing to the _Oura_ image\n      - name: oura\n        image: ghcr.io/txpipe/oura:latest\n\n        # we mount the same volume that the main container uses as the source\n        # for the Cardano node unix socket.\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n        - mountPath: /etc/oura\n          name: oura-config\n\n      volumes:\n\n      # REDACTED: here goes any required volume for you normal cardano node setup\n\n      # empty-dir volume to share the unix socket between containers\n      - name: unix-socket\n        emptyDir: {}\n\n      # a config map resource with Oura's config particular for your requirements\n      - name: oura-config\n        configMap:\n          name: oura-config\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Sink in TOML\nDESCRIPTION: This TOML configuration defines an AWS Lambda sink. It specifies the region where the Lambda function is located, the ARN of the function to invoke, and the maximum number of retries in case of invocation failures. The `type` field is a literal value that identifies the sink as an AWS Lambda sink.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sinks/aws_lambda.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsLambda\"\nregion = \"us-west-2\"\nfunction_name = \"arn:aws:lambda:us-west-2:xxxxx:function:my-func\"\nmax_retries = 5\n```\n\n----------------------------------------\n\nTITLE: Example Oura V1 Data Output in JSON\nDESCRIPTION: This JSON snippet illustrates the data structure output by the LegacyV1 filter when all optional features are disabled. It provides context about the block, slot, and transaction, along with details about transaction index, block hashes, and timestamps.  The `record` field is truncated and indicated as `...`\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/legacy_v1.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 100110525,\n    \"hash\": \"c808fc4142c5f10a2a6d0922edbd23972100d7d22e2255206bd05e968cc045f1\"\n  },\n  \"record\": {\n    \"context\": {\n      \"block_hash\": \"c808fc4142c5f10a2a6d0922edbd23972100d7d22e2255206bd05e968cc045f1\",\n      \"block_number\": 9142145,\n      \"slot\": 100110525,\n      \"timestamp\": 1691676816,\n      \"tx_idx\": 6,\n      \"tx_hash\": \"4329140c6711f2197c8c81bfff4b75fb95892375050dafda30ba146476ca3d65\",\n      \"input_idx\": null,\n      \"output_idx\": null,\n      \"output_address\": null,\n      \"certificate_idx\": null\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink with TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up a Redis sink to send all events to a single stream named 'mystream' on a Redis instance running locally on port 6379. It defines the sink type, the Redis server URL, and the stream name.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/redis.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nurl = \"redis://localhost:6379\"\nstream_name = \"mystream\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Custom Configuration File\nDESCRIPTION: This command runs Oura in daemon mode within a Docker container, using a custom configuration file. It mounts the `daemon.toml` file from the current working directory into the container's `/etc/oura/daemon.toml` location. The `-d` option runs the container in the background.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/docker.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -v $(pwd)/daemon.toml:/etc/oura/daemon.toml \\\n    ghcr.io/txpipe/oura:latest daemon\n```\n\n----------------------------------------\n\nTITLE: Filtering by Metadata Label\nDESCRIPTION: This TOML configuration snippet demonstrates how to filter events based on a metadata label. It uses the `metadata_label_equals` predicate, which checks if the root label of a metadata entry matches the specified label. This applies to `Metadata` and `Transaction` variants.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/filters/selection.mdx#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Selection\"\n\n[filters.check]\npredicate = \"metadata_label_equals\"\nargument = \"<label>\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Oura directory - Shell\nDESCRIPTION: Changes the current directory to the cloned Oura project directory. This step is necessary to execute the Cargo install command within the project's root directory.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/from_source.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd oura\n```\n\n----------------------------------------\n\nTITLE: Installing Oura binary on MacOS using shell script\nDESCRIPTION: Downloads and installs the Oura binary release for MacOS. The script uses curl to download the release, extracts it to a temporary directory, and then moves the executable to /usr/local/bin.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/binary_release.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2iH | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Docker\nDESCRIPTION: This command pulls and runs the latest Oura Docker image from Github Packages. The expected output is Oura's command-line help message, indicating successful execution. No specific configuration is needed initially.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/docker.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run ghcr.io/txpipe/oura:latest\n```\n\n----------------------------------------\n\nTITLE: Running Oura Docker Image\nDESCRIPTION: This command pulls and runs the latest Oura Docker image from Github Packages. It will display Oura's command-line help message as output. No specific dependencies are required beyond Docker being installed.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/docker.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run ghcr.io/txpipe/oura:latest\n```\n\n----------------------------------------\n\nTITLE: Dumping Data from Remote Relay to Stdout\nDESCRIPTION: This example demonstrates streaming blockchain data from a remote Cardano relay node to standard output (stdout) using the TCP bearer. It connects to the specified host and port using the `oura dump` command with the `--bearer tcp` option.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/dump.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Stdout Sink Configuration in TOML\nDESCRIPTION: Configures a sink to output event data to the standard output. The `type` parameter must be set to \"Stdout\". This snippet provides the basic configuration structure required to use the Stdout sink.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/sinks/stdout.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Stdout\"\n```\n\n----------------------------------------\n\nTITLE: Starting from a Specific Point in the Chain (TOML)\nDESCRIPTION: This snippet configures the N2N source to start reading events from a particular point in the Cardano chain. It uses the `intersect` section with the `Point` type and provides a specific slot number and block hash. Note that the `type` is incorrectly set to `N2C` and should be `N2N` to match the examples.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/sources/n2n.mdx#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n[source.intersect]\ntype = \"Point\"\nvalue = [48896539, \"5d1f1b6149b9e80e0ff44f442e0cab0b36437bb92eacf987384be479d4282357\"]\n```\n\n----------------------------------------\n\nTITLE: Watching Live Data from Testnet Node\nDESCRIPTION: This command connects to a local Cardano testnet node via a Unix socket.  The `--magic testnet` option specifies the testnet network.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix --magic testnet\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration Example\nDESCRIPTION: Example TOML configuration for specifying the intersection point for Oura's chain sync process. This configuration uses the 'Point' strategy, specifying a specific slot and block hash to start syncing from.  No dependencies required.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/intersect_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[intersect]\ntype = \"Point\"\nvalue = [\n    4493860,\n    \"ce7f821d2140419fea1a7900cf71b0c0a0e94afbb1f814a6717cff071c3b6afc\",\n]\n```\n\n----------------------------------------\n\nTITLE: Finalize Oura Byron Era Configuration\nDESCRIPTION: This configuration example demonstrates how to configure Oura to stop syncing during the Byron era by specifying the `until_hash`. This will make Oura stop at the block hash provided.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/advanced/finalize_options.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[finalize]\nuntil_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\n```\n\n----------------------------------------\n\nTITLE: Watching Live Data from Local Node via Unix Socket\nDESCRIPTION: This command connects to a local Cardano node through a Unix socket.  The `--bearer unix` option specifies the connection type.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/usage/watch.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix\n```\n\n----------------------------------------\n\nTITLE: Example Parsed CborBlock Output as JSON\nDESCRIPTION: This JSON snippet shows an example of the data structure that will be sent to the sink when the filter receives a CborBlock record. It includes event type, slot/hash point, header, and body.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/parse_cbor.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"header\": {},\n    \"body\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parsed CborTx Output as JSON\nDESCRIPTION: This JSON snippet provides an example of the data structure that will be sent to the sink when the filter receives a CborTx record. It includes event type, slot/hash point, inputs, outputs, and other transaction-related fields.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/filters/parse_cbor.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"inputs\": [],\n    \"outputs\": [],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Oura with Cargo - Shell\nDESCRIPTION: Installs the Oura project using Cargo, Rust's package manager. The `--all-features` flag enables all optional features of the project, and `--path .` specifies that the project should be installed from the current directory.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/installation/from_source.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install --all-features --path .\n```\n\n----------------------------------------\n\nTITLE: Oura Standalone Deployment in Kubernetes\nDESCRIPTION: This YAML configuration deploys Oura as a standalone application in Kubernetes, using a ConfigMap to define Oura's daemon configuration. The deployment specifies resources, environment variables, and command-line arguments for the Oura container.  It also defines a volume mount for the Oura configuration.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v1/installation/kubernetes.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: oura\ndata:\n  daemon.toml: |-\n    [source]\n    # REDACTED: here goes your `source` configuration options\n\n    [[filters]]\n    # REDACTED: here goes your `filters` configuration options\n\n    [sink]\n    # REDACTED: here goes your `sink` configuration options\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: oura\n  labels:\n    app: oura\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: oura\n  template:\n    metadata:\n      labels:\n        app: oura\n    spec:\n      containers:\n      - name: main\n        image: ghcr.io/txpipe/oura:latest\n        env:\n          - name: \"RUST_LOG\"\n            value: \"info\"\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n          limits:\n            memory: 200Mi\n            cpu: 200m\n        args:\n          - \"daemon\"\n        volumeMounts:\n          - mountPath: /etc/oura\n            name: config\n      volumes:\n      - name: config\n        configMap:\n          name: oura\n```\n\n----------------------------------------\n\nTITLE: Building WASM plugin with TinyGo\nDESCRIPTION: This command compiles the Golang source code into a WASM module using TinyGo. It uses the `tinygo build` command with the `-o` flag to specify the output file name and the `-target` flag to specify the target architecture as WASI. This command must be executed from within the `./extract_fee` directory.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/wasm_basic/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntinygo build -o plugin.wasm -target wasi main.go\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Tables using SQL\nDESCRIPTION: This command connects to a PostgreSQL database server running locally on port 5432 as the 'postgres' user and executes the SQL statements contained in the `init.sql` file.  It assumes a PostgreSQL server is running and accessible on the specified host and port. The `init.sql` file should contain the table creation statements.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/postgresql/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\npsql -h localhost -p 5432 -U postgres -f init.sql\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Compose\nDESCRIPTION: This command initializes and starts the services defined in the `docker-compose.yml` file. It's used to set up the PostgreSQL database environment as defined in the Docker Compose configuration. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/examples/postgresql/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Import and Render Configuration Component\nDESCRIPTION: This snippet imports the `Configuration` component from a relative path and then renders it using JSX. The `Configuration` component is expected to be defined in the `../../components/configuration` file. This snippet shows the basic usage of the component within a React application.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/v2/configuration.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Configuration } from \"../../components/configuration\";\n\n<Configuration />\n```\n\n----------------------------------------\n\nTITLE: Import Hero Component (JavaScript)\nDESCRIPTION: Imports the `Hero` component from a relative file path. This allows the component to be used within the current file's scope.  The relative path `../components/hero` indicates the location of the `Hero` component file.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Hero } from \"../components/hero\";\n```\n\n----------------------------------------\n\nTITLE: Render Hero Component (JSX)\nDESCRIPTION: Renders the imported `Hero` component using JSX syntax.  `<Hero />` is a self-closing tag, indicating that this is a simple component invocation without any props being passed directly.\nSOURCE: https://github.com/jpg-store/comet-oura/blob/main/docs/pages/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Hero />\n```"
  }
]