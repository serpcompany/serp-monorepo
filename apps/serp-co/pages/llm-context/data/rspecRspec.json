[
  {
    "owner": "rspec",
    "repo": "rspec",
    "content": "TITLE: Basic RSpec Matcher Usage in Ruby\nDESCRIPTION: Demonstrates the basic syntax for using matchers with expect(..).to, expect(..).not_to, and the legacy should syntax. These examples show the fundamental pattern of RSpec expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(result).to   eq(3)\nexpect(list).not_to be_empty\npi.should be > 3\n```\n\n----------------------------------------\n\nTITLE: Basic RSpec Test Structure Example\nDESCRIPTION: Demonstrates basic RSpec test structure using describe and it blocks to test an Order class's price summation functionality.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Order do\n  it \"sums the prices of its line items\" do\n    order = Order.new\n\n    order.add_entry(LineItem.new(:item => Item.new(\n      :price => Money.new(1.11, :USD)\n    )))\n    order.add_entry(LineItem.new(:item => Item.new(\n      :price => Money.new(2.22, :USD),\n      :quantity => 2\n    )))\n\n    expect(order.total).to eq(Money.new(5.55, :USD))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Method Stub in Ruby with RSpec Mocks\nDESCRIPTION: Creates a method stub that instructs the 'die' object to return the value 3 whenever it receives the 'roll' message. This allows controlling the behavior of objects during testing.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nallow(die).to receive(:roll) { 3 }\n```\n\n----------------------------------------\n\nTITLE: Simple RSpec Expectation Examples\nDESCRIPTION: Basic examples of using RSpec expectations with the equality matcher, showing both positive and negative expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(5).to eq(5)\nexpect(5).not_to eq(4)\n```\n\n----------------------------------------\n\nTITLE: Calculator Test Example\nDESCRIPTION: Shows a complete TDD cycle with a simple calculator class implementation and testing.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# in spec/calculator_spec.rb\nRSpec.describe Calculator do\n  describe '#add' do\n    it 'returns the sum of its arguments' do\n      expect(Calculator.new.add(1, 2)).to eq(3)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Message Expectation in Ruby with RSpec Mocks\nDESCRIPTION: Demonstrates setting up a message expectation to verify the Account object sends the 'account_closed' message to the logger when closed. This example shows how to test object interactions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe Account do\n  context \"when closed\" do\n    it \"logs an 'account closed' message\" do\n      logger = double()\n      account = Account.new\n      account.logger = logger\n\n      expect(logger).to receive(:account_closed).with(account)\n\n      account.close\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RSpec Test Structure in Ruby\nDESCRIPTION: Demonstrates the basic structure of an RSpec test using describe and it blocks. Shows how to create a test case for checking an Account's initial balance state.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/features/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Account do\n  it \"has a balance of zero when first opened\" do\n    # example code goes here - for more on the\n    # code inside the examples, see rspec-expectations\n    # and rspec-mocks\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example with RSpec::Expectations\nDESCRIPTION: Demonstrates how to use RSpec::Expectations in a test case that verifies an Order class correctly sums prices from line items. Shows the structure of a basic test with describe, it blocks and an expectation.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Order do\n  it \"sums the prices of the items in its line items\" do\n    order = Order.new\n    order.add_entry(LineItem.new(:item => Item.new(\n      :price => Money.new(1.11, :USD)\n    )))\n    order.add_entry(LineItem.new(:item => Item.new(\n      :price => Money.new(2.22, :USD),\n      :quantity => 2\n    )))\n    expect(order.total).to eq(Money.new(5.55, :USD))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Compound Matcher Expressions in RSpec\nDESCRIPTION: Demonstrates how to combine matchers using logical 'and' and 'or' operators to create more complex expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(alphabet).to start_with(\"a\").and end_with(\"z\")\nexpect(stoplight.color).to eq(\"red\").or eq(\"green\").or eq(\"yellow\")\n```\n\n----------------------------------------\n\nTITLE: Nested Groups in RSpec\nDESCRIPTION: Shows how to organize tests using nested describe and context blocks for different test scenarios.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Order do\n  context \"with no items\" do\n    it \"behaves one way\" do\n      # ...\n    end\n  end\n\n  context \"with one item\" do\n    it \"behaves another way\" do\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of RSpec Expectations\nDESCRIPTION: Shows the fundamental syntax for RSpec expectations, demonstrating both positive and negative expectation patterns.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to matcher(expected)\nexpect(actual).not_to matcher(expected)\n```\n\n----------------------------------------\n\nTITLE: Installing RSpec gem in Ruby\nDESCRIPTION: Command to install the RSpec meta-gem, which includes rspec-core, rspec-expectations, and rspec-mocks.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install rspec\n```\n\n----------------------------------------\n\nTITLE: Error Expectation Matchers in RSpec\nDESCRIPTION: Matchers for testing that code raises specific errors. These verify both that exceptions are raised and optionally that they match expected classes and messages.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { ... }.to raise_error\nexpect { ... }.to raise_error(ErrorClass)\nexpect { ... }.to raise_error(\"message\")\nexpect { ... }.to raise_error(ErrorClass, \"message\")\n```\n\n----------------------------------------\n\nTITLE: Collection Membership Matchers in RSpec\nDESCRIPTION: Shows matchers for testing various aspects of collections, including exact equality, partial matching, order-dependent and order-independent matching.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# exact order, entire collection\nexpect(actual).to eq(expected)\n\n# exact order, partial collection (based on an exact position)\nexpect(actual).to start_with(expected)\nexpect(actual).to end_with(expected)\n\n# any order, entire collection\nexpect(actual).to match_array(expected)\n\n# You can also express this by passing the expected elements\n# as individual arguments\nexpect(actual).to contain_exactly(expected_element1, expected_element2)\n\n # any order, partial collection\nexpect(actual).to include(expected)\n```\n\n----------------------------------------\n\nTITLE: Basic RSpec Test Example for a Calculator\nDESCRIPTION: A simple RSpec test that describes a Calculator class with an add method. The test verifies that the add method correctly returns the sum of its arguments.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# in spec/calculator_spec.rb\nRSpec.describe Calculator do\n  describe '#add' do\n    it 'returns the sum of its arguments' do\n      expect(Calculator.new.add(1, 2)).to eq(3)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Calculator Class Implementation\nDESCRIPTION: A simple Ruby class implementation for a Calculator with an add method. This is the implementation that satisfies the RSpec test example.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# in lib/calculator.rb\nclass Calculator\n  def add(a, b)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Error Expectation Matchers in RSpec\nDESCRIPTION: Demonstrates how to test that code raises specific exceptions, with options to verify the error class and/or error message.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { ... }.to raise_error\nexpect { ... }.to raise_error(ErrorClass)\nexpect { ... }.to raise_error(\"message\")\nexpect { ... }.to raise_error(ErrorClass, \"message\")\n```\n\n----------------------------------------\n\nTITLE: Collection Membership Examples in RSpec\nDESCRIPTION: Provides concrete examples of collection membership matchers with arrays, hashes, and strings, demonstrating different matching strategies.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nexpect([1, 2, 3]).to eq([1, 2, 3])            # Order dependent equality check\nexpect([1, 2, 3]).to include(1)               # Exact ordering, partial collection matches\nexpect([1, 2, 3]).to include(2, 3)            #\nexpect([1, 2, 3]).to start_with(1)            # As above, but from the start of the collection\nexpect([1, 2, 3]).to start_with(1, 2)         #\nexpect([1, 2, 3]).to end_with(3)              # As above but from the end of the collection\nexpect([1, 2, 3]).to end_with(2, 3)           #\nexpect({:a => 'b'}).to include(:a => 'b')     # Matching within hashes\nexpect(\"this string\").to include(\"is str\")    # Matching within strings\nexpect(\"this string\").to start_with(\"this\")   #\nexpect(\"this string\").to end_with(\"ring\")     #\nexpect([1, 2, 3]).to contain_exactly(2, 3, 1) # Order independent matches\nexpect([1, 2, 3]).to match_array([3, 2, 1])   #\n\n# Order dependent compound matchers\nexpect(\n  [{:a => 'hash'},{:a => 'another'}]\n).to match([a_hash_including(:a => 'hash'), a_hash_including(:a => 'another')])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test Double in Ruby with RSpec Mocks\nDESCRIPTION: Creates a simple test double that stands in for a real object during testing. The double is named 'book' to help identify it in test output.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbook = double(\"book\")\n```\n\n----------------------------------------\n\nTITLE: Requiring Implementation File in RSpec Test\nDESCRIPTION: Code showing how to require the implementation file in the RSpec test. RSpec automatically adds the ./lib directory to the $LOAD_PATH.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# in spec/calculator_spec.rb\n# - RSpec adds ./lib to the $LOAD_PATH\nrequire \"calculator\"\n```\n\n----------------------------------------\n\nTITLE: Comparison Matchers in RSpec\nDESCRIPTION: Matchers for comparing values using greater than, less than, between ranges, regular expressions, and numerical proximity. These matchers handle various types of value comparisons.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be >  expected\nexpect(actual).to be >= expected\nexpect(actual).to be <= expected\nexpect(actual).to be <  expected\nexpect(actual).to be_between(minimum, maximum).inclusive\nexpect(actual).to be_between(minimum, maximum).exclusive\nexpect(actual).to match(/expression/)\nexpect(actual).to be_within(delta).of(expected)\nexpect(actual).to start_with expected\nexpect(actual).to end_with expected\n\n# NOTE: `expect` does not support `=~` matcher.\n```\n\n----------------------------------------\n\nTITLE: Collection Membership Matcher Examples in RSpec\nDESCRIPTION: Examples of testing collection membership with arrays, hashes, and strings. These demonstrate the flexibility of include, contain_exactly, and match_array matchers.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nexpect([1, 2, 3]).to     include(1)\nexpect([1, 2, 3]).to     include(1, 2)\nexpect(:a => 'b').to     include(:a => 'b')\nexpect(\"this string\").to include(\"is str\")\nexpect([1, 2, 3]).to     contain_exactly(2, 1, 3)\nexpect([1, 2, 3]).to     match_array([3, 2, 1])\n```\n\n----------------------------------------\n\nTITLE: Comparison Matchers in RSpec\nDESCRIPTION: Shows how to use comparison matchers to test relationships between values, including greater than, less than, and approximate equality within a delta.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be >  expected\nexpect(actual).to be >= expected\nexpect(actual).to be <= expected\nexpect(actual).to be <  expected\nexpect(actual).to be_within(delta).of(expected)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Test Double in Ruby RSpec\nDESCRIPTION: Shows how to create a basic test double object using the double method with an optional identifier.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbook = double(\"book\")\n```\n\n----------------------------------------\n\nTITLE: Predicate Matcher Examples in RSpec\nDESCRIPTION: Examples of using predicate matchers with common Ruby methods like empty? and has_key? for arrays and hashes respectively.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nexpect([]).to      be_empty\nexpect(:a => 1).to have_key(:a)\n```\n\n----------------------------------------\n\nTITLE: Change Observation Matchers in RSpec\nDESCRIPTION: Matchers for testing that a block of code changes an object's attribute by a specific amount or to a specific value. These verify state changes caused by actions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { object.action }.to change(object, :value).from(old).to(new)\nexpect { object.action }.to change(object, :value).by(delta)\nexpect { object.action }.to change(object, :value).by_at_least(minimum_delta)\nexpect { object.action }.to change(object, :value).by_at_most(maximum_delta)\n```\n\n----------------------------------------\n\nTITLE: Equivalence Matchers in RSpec\nDESCRIPTION: Shows how to use equivalence matchers with the expect syntax. These matchers verify that objects are equal using different equality methods (==, eql?).\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to eq(expected)  # passes if actual == expected\nexpect(actual).to eql(expected) # passes if actual.eql?(expected)\nexpect(actual).not_to eql(not_expected) # passes if not(actual.eql?(expected))\n```\n\n----------------------------------------\n\nTITLE: Consecutive Return Values in Ruby RSpec\nDESCRIPTION: Shows how to configure stubs to return different values on subsequent calls.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nallow(die).to receive(:roll).and_return(1, 2, 3)\ndie.roll # => 1\ndie.roll # => 2\ndie.roll # => 3\ndie.roll # => 3\ndie.roll # => 3\n```\n\n----------------------------------------\n\nTITLE: Collection Membership Matchers in RSpec\nDESCRIPTION: Matchers for testing inclusion of elements in collections. These verify that collections contain specific elements, regardless of order in some cases.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to include(expected)\nexpect(array).to match_array(expected_array)\n# ...which is the same as:\nexpect(array).to contain_exactly(individual, elements)\n```\n\n----------------------------------------\n\nTITLE: Truthiness Matchers in RSpec\nDESCRIPTION: Shows matchers for testing boolean conditions and nil values, distinguishing between Ruby's concept of truthiness (not nil or false) and actual boolean values.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_truthy   # passes if actual is truthy (not nil or false)\nexpect(actual).to be true     # passes if actual == true\nexpect(actual).to be_falsy    # passes if actual is falsy (nil or false)\nexpect(actual).to be false    # passes if actual == false\nexpect(actual).to be_nil      # passes if actual is nil\nexpect(actual).to_not be_nil  # passes if actual is not nil\n```\n\n----------------------------------------\n\nTITLE: RSpec Test Double Response Methods Overview\nDESCRIPTION: Lists the primary methods available for configuring test double responses in RSpec, including and_return, and_raise, and_invoke, and_throw, and_yield, and_call_original, and and_wrap_original. These methods can be used with both allow and expect syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/configuring_responses/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nand_return\nand_raise\nand_invoke\nand_throw\nand_yield\nand_call_original\nand_wrap_original\n```\n\n----------------------------------------\n\nTITLE: RSpec Response Setting Methods\nDESCRIPTION: Illustrates different ways to set responses for method stubs and expectations including return values, raising errors, throwing symbols, and yielding to blocks.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg) { value }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg).and_return(value)\nexpect(double).to receive(:msg).exactly(3).times.and_return(value1, value2, value3)\n  # returns value1 the first time, value2 the second, etc\nexpect(double).to receive(:msg).and_raise(error)\n  # `error` can be an instantiated object (e.g. `StandardError.new(some_arg)`) or a class (e.g. `StandardError`)\n  # if it is a class, it must be instantiable with no args\nexpect(double).to receive(:msg).and_throw(:msg)\nexpect(double).to receive(:msg).and_yield(values, to, yield)\nexpect(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)\n  # for methods that yield to a block multiple times\n```\n\nLANGUAGE: ruby\nCODE:\n```\nallow(double).to receive(:msg).and_return(value)\nallow(double).to receive(:msg).and_return(value1, value2, value3)\nallow(double).to receive(:msg).and_raise(error)\nallow(double).to receive(:msg).and_throw(:msg)\nallow(double).to receive(:msg).and_yield(values, to, yield)\nallow(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)\n```\n\n----------------------------------------\n\nTITLE: Predicate Matchers in RSpec\nDESCRIPTION: Shows how RSpec automatically creates matchers from Ruby's predicate methods (ending with '?'), allowing for more readable expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_xxx         # passes if actual.xxx?\nexpect(actual).to have_xxx(:arg) # passes if actual.has_xxx?(:arg)\n```\n\n----------------------------------------\n\nTITLE: Method Stubbing Patterns in Ruby RSpec\nDESCRIPTION: Shows three different syntaxes for creating method stubs in RSpec mocks.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nallow(book).to receive(:title) { \"The RSpec Book\" }\nallow(book).to receive(:title).and_return(\"The RSpec Book\")\nallow(book).to receive_messages(\n    :title => \"The RSpec Book\",\n    :subtitle => \"Behaviour-Driven Development with RSpec, Cucumber, and Friends\")\n```\n\n----------------------------------------\n\nTITLE: Shared Examples Implementation\nDESCRIPTION: Demonstrates how to create and include shared example groups for testing collections with common behavior.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.shared_examples \"collections\" do |collection_class|\n  it \"is empty when first created\" do\n    expect(collection_class.new).to be_empty\n  end\nend\n\nRSpec.describe Array do\n  include_examples \"collections\", Array\nend\n\nRSpec.describe Hash do\n  include_examples \"collections\", Hash\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Arbitrary Argument Handling\nDESCRIPTION: Shows how to handle custom argument validation and block yielding in method stubs using custom blocks.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg) do |arg|\n  expect(arg.size).to eq 7\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg) do |&arg|\n  begin\n    arg.call\n  ensure\n    # cleanup\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Composable Matcher Example in Ruby\nDESCRIPTION: Demonstrates how to use compound matchers with 'and' and 'or' operators to create complex matching expressions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(alphabet).to start_with(\"a\").and end_with(\"z\")\n```\n\n----------------------------------------\n\nTITLE: Output Capture Matchers in RSpec\nDESCRIPTION: Matchers for testing that code produces specific output to stdout or stderr. These help test command-line utilities and logging behavior.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { actual }.to output(\"some output\").to_stdout\nexpect { actual }.to output(\"some error\").to_stderr\n```\n\n----------------------------------------\n\nTITLE: RSpec Receive Count Expectations\nDESCRIPTION: Demonstrates various ways to specify how many times a method should be called on a test double using RSpec's receive count matchers.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg).once\nexpect(double).to receive(:msg).twice\nexpect(double).to receive(:msg).exactly(n).time\nexpect(double).to receive(:msg).exactly(n).times\nexpect(double).to receive(:msg).at_least(:once)\nexpect(double).to receive(:msg).at_least(:twice)\nexpect(double).to receive(:msg).at_least(n).time\nexpect(double).to receive(:msg).at_least(n).times\nexpect(double).to receive(:msg).at_most(:once)\nexpect(double).to receive(:msg).at_most(:twice)\nexpect(double).to receive(:msg).at_most(n).time\nexpect(double).to receive(:msg).at_most(n).times\n```\n\n----------------------------------------\n\nTITLE: RSpec Original Implementation Delegation\nDESCRIPTION: Demonstrates how to allow a partial mock to call through to the original implementation of a method.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(Person).to receive(:find).and_call_original\nPerson.find # => executes the original find method and returns the result\n```\n\n----------------------------------------\n\nTITLE: Object Equivalence Matcher in RSpec\nDESCRIPTION: Tests if objects are equivalent using the eq matcher, which passes if actual == expected. This is one of the most commonly used matchers.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to eq(expected) # passes if actual == expected\n```\n\n----------------------------------------\n\nTITLE: Using Expect Syntax in RSpec\nDESCRIPTION: Examples showing the unified expect syntax for both value and block expectations in RSpec.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to eq(expected)\nexpect { ... }.to raise_error(ErrorClass)\n```\n\n----------------------------------------\n\nTITLE: Argument Matchers in Ruby RSpec\nDESCRIPTION: Shows various argument matching techniques for verifying method calls with specific argument patterns.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg).with(no_args)\nexpect(double).to receive(:msg).with(any_args)\nexpect(double).to receive(:msg).with(1, any_args)\nexpect(double).to receive(:msg).with(1, kind_of(Numeric), \"b\")\nexpect(double).to receive(:msg).with(1, boolean(), \"b\")\nexpect(double).to receive(:msg).with(1, /abc/, \"b\")\nexpect(double).to receive(:msg).with(1, anything(), \"b\")\nexpect(double).to receive(:msg).with(1, duck_type(:abs, :div), \"b\")\nexpect(double).to receive(:msg).with(hash_including(:a => 5))\nexpect(double).to receive(:msg).with(array_including(5))\nexpect(double).to receive(:msg).with(hash_excluding(:a => 5))\nexpect(double).to receive(:msg).with(start_with('a'))\nexpect(double).to receive(:msg).with(satisfy { |data| data.dig(:a, :b, :c) == 5 })\n```\n\n----------------------------------------\n\nTITLE: Namespace-Aware Constant Stubbing in Ruby RSpec\nDESCRIPTION: Shows how to properly stub constants within nested namespaces, highlighting the importance of using fully qualified constant names to avoid accidental stubbing in the wrong namespace.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/mutating_constants/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyGem\n  class SomeClass; end\nend\n\nmodule MyGem\n  describe \"Something\" do\n    let(:fake_class) { Class.new }\n\n    it \"accidentally stubs the wrong constant\" do\n      # this stubs ::SomeClass (in the top-level namespace),\n      # not MyGem::SomeClass like you probably mean.\n      stub_const(\"SomeClass\", fake_class)\n    end\n\n    it \"stubs the right constant\" do\n      stub_const(\"MyGem::SomeClass\", fake_class)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Block Matcher Example\nDESCRIPTION: Example showing compound matcher usage with block matchers for testing multiple changes.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { ... }.to change { x }.to(3).and change { y }.to(4)\n```\n\n----------------------------------------\n\nTITLE: Yield Matchers in RSpec\nDESCRIPTION: Demonstrates matchers for testing that methods yield control to blocks, with options to verify yielded arguments.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { |b| 5.tap(&b) }.to yield_control # passes regardless of yielded args\n\nexpect { |b| yield_if_true(true, &b) }.to yield_with_no_args # passes only if no args are yielded\n\nexpect { |b| 5.tap(&b) }.to yield_with_args(5)\nexpect { |b| 5.tap(&b) }.to yield_with_args(Integer)\nexpect { |b| \"a string\".tap(&b) }.to yield_with_args(/str/)\n\nexpect { |b| [1, 2, 3].each(&b) }.to yield_successive_args(1, 2, 3)\nexpect { |b| { :a => 1, :b => 2 }.each(&b) }.to yield_successive_args([:a, 1], [:b, 2])\n```\n\n----------------------------------------\n\nTITLE: Composing Matchers in RSpec\nDESCRIPTION: Shows advanced examples of composing matchers to create powerful, flexible expectations that focus on essential aspects of complex objects and data structures.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { k += 1.05 }.to change { k }.by( a_value_within(0.1).of(1.0) )\n\nexpect { s = \"barn\" }.to change { s }\n  .from( a_string_matching(/foo/) )\n  .to( a_string_matching(/bar/) )\n\nexpect([\"barn\", 2.45]).to contain_exactly(\n  a_value_within(0.1).of(2.5),\n  a_string_starting_with(\"bar\")\n)\n\nexpect([\"barn\", \"food\", 2.45]).to end_with(\n  a_string_matching(\"foo\"),\n  a_value > 2\n)\n\nexpect([\"barn\", 2.45]).to include( a_string_starting_with(\"bar\") )\n\nexpect(:a => \"food\", :b => \"good\").to include(:a => a_string_matching(/foo/))\n\nhash = {\n  :a => {\n    :b => [\"foo\", 5],\n    :c => { :d => 2.05 }\n  }\n}\n\nexpect(hash).to match(\n  :a => {\n    :b => a_collection_containing_exactly(\n      a_string_starting_with(\"f\"),\n      an_instance_of(Integer)\n    ),\n    :c => { :d => (a_value < 3) }\n  }\n)\n\nexpect { |probe|\n  [1, 2, 3].each(&probe)\n}.to yield_successive_args( a_value < 2, 2, a_value > 2 )\n```\n\n----------------------------------------\n\nTITLE: Constant Hiding in Ruby RSpec\nDESCRIPTION: Shows how to temporarily remove a constant using hide_const. The constant is restored to its original value after the test completes.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/mutating_constants/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nFOO = 42\nhide_const(\"FOO\")\nFOO # => NameError: uninitialized constant FOO\n```\n\n----------------------------------------\n\nTITLE: Throw Symbol Matchers in RSpec\nDESCRIPTION: Matchers for testing that code throws symbols, optionally with specific values. These verify the use of Ruby's throw/catch mechanism.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { ... }.to throw_symbol\nexpect { ... }.to throw_symbol(:symbol)\nexpect { ... }.to throw_symbol(:symbol, 'value')\n```\n\n----------------------------------------\n\nTITLE: Message Expectations in Ruby RSpec\nDESCRIPTION: Shows how to set expectations that certain messages will be received by test doubles.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nvalidator = double(\"validator\")\nexpect(validator).to receive(:validate) { \"02134\" }\nzipcode = Zipcode.new(\"02134\", validator)\nzipcode.valid?\n```\n\n----------------------------------------\n\nTITLE: Type and Class Matchers in RSpec\nDESCRIPTION: Demonstrates matchers for verifying object types and class inheritance relationships, including exact class matching and kind_of? relationships.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_an_instance_of(expected) # passes if actual.class == expected\nexpect(actual).to be_a(expected)              # passes if actual.kind_of?(expected)\nexpect(actual).to be_an(expected)             # an alias for be_a\nexpect(actual).to be_a_kind_of(expected)      # another alias\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec to Raise Errors for Deprecations in Ruby\nDESCRIPTION: Adds a configuration option to turn deprecation warnings into errors, allowing easier identification of deprecated usage locations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.raise_errors_for_deprecations!\n```\n\n----------------------------------------\n\nTITLE: Array Matching with Contain Exactly in Ruby\nDESCRIPTION: Shows usage of the contain_exactly matcher which provides a less ambiguous way to match array contents compared to match_array.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(array).to contain_exactly(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Predicate Matchers in RSpec\nDESCRIPTION: Matchers that dynamically map to predicate methods (methods ending with ?) on the target object. These provide a more readable syntax for boolean methods.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_xxx         # passes if actual.xxx?\nexpect(actual).to have_xxx(:arg) # passes if actual.has_xxx?(:arg)\n```\n\n----------------------------------------\n\nTITLE: Type and Class Matchers in RSpec\nDESCRIPTION: Matchers for verifying an object's type, class inheritance, and method availability. These help ensure objects conform to expected interfaces.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_instance_of(expected)\nexpect(actual).to be_kind_of(expected)\nexpect(actual).to respond_to(expected)\n```\n\n----------------------------------------\n\nTITLE: Updating RSpec Initialization\nDESCRIPTION: Updates the `spec_helper` file generated by `rspec --init` to include warnings enabled in the commented-out section, making users consciously opt-in to the setting. It also sets the new rspec-expectations `include_chain_clauses_in_custom_matcher_descriptions` configuration option and the rspec-mocks `verify_partial_doubles` option, which will be enabled by default in RSpec 4.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: RSpec Scoping Example\nDESCRIPTION: Illustrates RSpec's scoping rules with example groups and individual examples using a stack implementation.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Using an array as a stack\" do\n  def build_stack\n    []\n  end\n\n  before(:example) do\n    @stack = build_stack\n  end\n\n  it 'is initially empty' do\n    expect(@stack).to be_empty\n  end\n\n  context \"after an item has been pushed\" do\n    before(:example) do\n      @stack.push :item\n    end\n\n    it 'allows the pushed item to be popped' do\n      expect(@stack.pop).to eq(:item)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Test Spies in Ruby RSpec\nDESCRIPTION: Demonstrates the use of test spies for verifying message receipt after the fact.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ninvitation = spy('invitation')\n\nuser.accept_invitation(invitation)\n\nexpect(invitation).to have_received(:accept)\n\n# You can also use other common message expectations. For example:\nexpect(invitation).to have_received(:accept).with(mailer)\nexpect(invitation).to have_received(:accept).twice\nexpect(invitation).to_not have_received(:accept).with(mailer)\n\n# One can specify a return value on the spy the same way one would a double.\ninvitation = spy('invitation', :accept => true)\nexpect(invitation).to have_received(:accept).with(mailer)\nexpect(invitation.accept).to eq(true)\n```\n\n----------------------------------------\n\nTITLE: Change Observation Matcher Examples in RSpec\nDESCRIPTION: Examples of testing changes to variables after executing blocks of code. These demonstrate different ways to verify that values change as expected.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { a += 1 }.to change { a }.by(1)\nexpect { a += 3 }.to change { a }.from(2)\nexpect { a += 3 }.to change { a }.by_at_least(2)\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec Bisect Runner\nDESCRIPTION: Configuration code showing how to set the bisect runner type in RSpec. Can be set to either :shell or :fork via config option.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.bisect_runner = :shell\n# or\nconfig.bisect_runner = :fork\n```\n\n----------------------------------------\n\nTITLE: Using RSpec Expectations to Test Account Balance\nDESCRIPTION: Example of using RSpec expectations to verify that a newly created Account has a balance of zero.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Account do\n  it \"has a balance of zero when first created\" do\n    expect(Account.new.balance).to eq(Money.new(0))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Identity Matchers in RSpec\nDESCRIPTION: Demonstrates identity matchers that check if objects are the same instance using the equal? method, with both be() and equal() providing the same functionality.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be(expected)    # passes if actual.equal?(expected)\nexpect(actual).to equal(expected) # passes if actual.equal?(expected)\n```\n\n----------------------------------------\n\nTITLE: Configuring Focus Filtering in RSpec\nDESCRIPTION: Sets up RSpec configuration to automatically run examples tagged with `:focus` metadata. This is a common setup for temporarily focusing on specific tests during development.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.filter_run_when_matching :focus\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Configuration Reporter Access\nDESCRIPTION: Public API method to access the RSpec reporter instance, now part of SemVer API contract.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec::Core::Configuration#reporter\n```\n\n----------------------------------------\n\nTITLE: RSpec One-liner Is Expected Syntax\nDESCRIPTION: Alternative one-liner syntax using is_expected instead of should.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe User do\n  it { is_expected.to validate_presence_of :email }\nend\n```\n\n----------------------------------------\n\nTITLE: Truthiness and Existentialism Matchers in RSpec\nDESCRIPTION: Matchers for checking various truthy/falsy states and existence. These distinguish between Ruby's concept of truthiness versus exact true/false values.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be_truthy    # passes if actual is truthy (not nil or false)\nexpect(actual).to be true      # passes if actual == true\nexpect(actual).to be_falsey    # passes if actual is falsy (nil or false)\nexpect(actual).to be false     # passes if actual == false\nexpect(actual).to be_nil       # passes if actual is nil\nexpect(actual).to exist        # passes if actual.exist? and/or actual.exists? are truthy\nexpect(actual).to exist(*args) # passes if actual.exist?(*args) and/or actual.exists?(*args) are truthy\n```\n\n----------------------------------------\n\nTITLE: Object Identity Matcher in RSpec\nDESCRIPTION: Checks if objects are the same instance using the be matcher, which passes if actual.equal?(expected).\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to be(expected) # passes if actual.equal?(expected)\n```\n\n----------------------------------------\n\nTITLE: Adding Exclude Pattern CLI Option\nDESCRIPTION: Adds the `--exclude-pattern` CLI option, `config.exclude_pattern =` config option, and `task.exclude_pattern =` rake task config option. Matching files will be excluded during the test execution.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n\"--exclude-pattern\"\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n\"config.exclude_pattern =\"\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n\"task.exclude_pattern =\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec Expectation Syntax\nDESCRIPTION: Configuration options for enabling/disabling expect and should syntaxes in RSpec.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.expect_with :rspec do |c|\n    c.syntax = :expect             # disables `should`\n    # or\n    c.syntax = :should             # disables `expect`\n    # or\n    c.syntax = [:should, :expect]  # default, enables both `should` and `expect`\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Optional Identity/Equivalence Matchers in RSpec\nDESCRIPTION: Additional matchers for testing equivalence relationships between objects, including eql and equal. These provide alternatives to the more common eq matcher.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to eql(expected)   # passes if actual.eql?(expected)\nexpect(actual).to equal(expected) # passes if actual.equal?(expected)\n\n# NOTE: `expect` does not support `==` matcher.\n```\n\n----------------------------------------\n\nTITLE: Creating Verifying Double in Ruby RSpec\nDESCRIPTION: Demonstrates creating a verifying double that validates against real objects, with method stub for pages.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbook = instance_double(\"Book\", :pages => 250)\n```\n\n----------------------------------------\n\nTITLE: Installing RSpec Gems Using Gemfile for Main Branch\nDESCRIPTION: Ruby code for a Gemfile that adds the main branch of RSpec and its dependent repos. This setup allows developers to run tests against the latest development versions of all RSpec components.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n%w[rspec rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|\n  if lib == 'rspec'\n    gem lib, git: \"https://github.com/rspec/rspec\"\n  else\n    gem lib, git: \"https://github.com/rspec/rspec\", glob: \"#{lib}/#{lib}.gemspec\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matchers in RSpec\nDESCRIPTION: Shows how to match strings against regular expressions using the match matcher.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to match(/expression/)\n```\n\n----------------------------------------\n\nTITLE: Declaring Tagged Example Groups in RSpec\nDESCRIPTION: Demonstrates how to tag an example group with metadata (`:awesome => true`) that can be used for filtering test runs.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Thing, :awesome => true do\n  it \"does something\" do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Cross-Repository Development in Ruby\nDESCRIPTION: This snippet shows how to configure Gemfile to use custom branches of RSpec repositories when developing changes that span multiple gems. It demonstrates pinning repositories to specific branches for cross-repository development work.\nSOURCE: https://github.com/rspec/rspec/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n%w[rspec rspec-core rspec-expectations rspec-support].each do |lib|\n  if lib == 'rspec'\n    gem lib, git: \"https://github.com/rspec/rspec\"\n  else\n    gem lib, git: \"https://github.com/rspec/rspec\", glob: \"#{lib}/#{lib}.gemspec\"\n  end\nend\ngem 'rspec-mocks', git: \"https://github.com/my_user_name/rspec\", branch: 'your-custom-branch', glob: \"rspec-mocks/rspec-mocks.gemspec\"\n```\n\n----------------------------------------\n\nTITLE: Array Return Value Stubbing in Ruby RSpec\nDESCRIPTION: Demonstrates how to stub a method to return an array containing a test double.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nallow(team).to receive(:players).and_return([double(:name => \"David\")])\n```\n\n----------------------------------------\n\nTITLE: RSpec Message Expectation Syntax Example\nDESCRIPTION: Shows the basic syntax for setting expectations in RSpec tests using the expect(...).to receive(...) pattern. This forms the foundation for adding additional constraints to test expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/setting_constraints/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nexpect(...).to receive(...)\n```\n\n----------------------------------------\n\nTITLE: RSpec Ordered Message Expectations\nDESCRIPTION: Shows how to specify the order in which messages should be received by test doubles, including ordered expectations with different arguments.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg).ordered\nexpect(double).to receive(:other_msg).ordered\n  # This will fail if the messages are received out of order\n```\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:msg).with(\"A\", 1, 3).ordered\nexpect(double).to receive(:msg).with(\"B\", 2, 4).ordered\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Build Script\nDESCRIPTION: Command to run the build verification steps locally for an individual library\nSOURCE: https://github.com/rspec/rspec/blob/main/DEVELOPMENT.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ script/run_build\n```\n\n----------------------------------------\n\nTITLE: Using be_instance_of and be_kind_of Matchers\nDESCRIPTION: Improved error handling for instance and kind checking matchers to raise ArgumentError instead of NoMethodError when methods are not supported.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(object).to be_an_instance_of(Class)\nexpect(object).to be_kind_of(Module)\n```\n\n----------------------------------------\n\nTITLE: Block Expectation Matcher Examples in RSpec\nDESCRIPTION: Examples of testing block yielding behavior with different scenarios. These demonstrate how to verify blocks receive specific arguments and control.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { |b| User.transaction(&b) }.to yield_control\nexpect { |b| User.transaction(&b) }.to yield_with_no_args\nexpect { |b| 5.tap(&b)            }.not_to yield_with_no_args         # because it yields with `5`\nexpect { |b| 5.tap(&b)            }.to yield_with_args(5)             # because 5 == 5\nexpect { |b| 5.tap(&b)            }.to yield_with_args(Integer)       # because Integer === 5\nexpect { |b| [1, 2, 3].each(&b)   }.to yield_successive_args(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Generating YARD Documentation\nDESCRIPTION: Command to generate YARD documentation and check for errors or warnings.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec yard doc --no-cache\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/yard doc --no-cache\n```\n\n----------------------------------------\n\nTITLE: Using Include Matcher with Hash-like Objects\nDESCRIPTION: Enhanced include matcher that treats objects implementing to_hash as hashes for comparison purposes.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(hash_like_object).to include(:key)\n```\n\n----------------------------------------\n\nTITLE: Block Expectation Matchers in RSpec\nDESCRIPTION: Matchers for testing that methods yield control to blocks with specific arguments. These verify how methods interact with provided blocks.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { |b| object.action(&b) }.to yield_control\nexpect { |b| object.action(&b) }.to yield_with_no_args           # only matches no args\nexpect { |b| object.action(&b) }.to yield_with_args              # matches any args\nexpect { |b| object.action(&b) }.to yield_successive_args(*args) # matches args against multiple yields\n```\n\n----------------------------------------\n\nTITLE: Throw Symbol Matchers in RSpec\nDESCRIPTION: Shows how to test that code throws specific symbols, optionally with expected values.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { ... }.to throw_symbol\nexpect { ... }.to throw_symbol(:symbol)\nexpect { ... }.to throw_symbol(:symbol, 'value')\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec to Use Legacy Syntax\nDESCRIPTION: Configuration options to explicitly enable the old :should syntax in RSpec. Shows both the rspec-core configuration approach and the standalone rspec-mocks configuration method.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/old_syntax/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# If you're using rspec-core:\nRSpec.configure do |config|\n  config.mock_with :rspec do |mocks|\n    mocks.syntax = :should\n  end\nend\n\n# Or, if you're using rspec-mocks in another context:\nRSpec::Mocks.configuration.syntax = :should\n```\n\n----------------------------------------\n\nTITLE: Method Chain Stubbing in Ruby RSpec\nDESCRIPTION: Demonstrates how to stub chains of method calls using receive_message_chain.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nallow(double).to receive_message_chain(\"foo.bar\") { :baz }\nallow(double).to receive_message_chain(:foo, :bar => :baz)\nallow(double).to receive_message_chain(:foo, :bar) { :baz }\n\n# Given any of the above forms:\ndouble.foo.bar # => :baz\n```\n\n----------------------------------------\n\nTITLE: Creating a Verifying Test Double in Ruby with RSpec Mocks\nDESCRIPTION: Creates a verifying test double that validates it resembles the actual 'Book' class. This example also stubs the 'pages' method to return 250, ensuring the double behaves like an actual Book instance.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbook = instance_double(\"Book\", :pages => 250)\n```\n\n----------------------------------------\n\nTITLE: Using RSpec::Expectations Outside RSpec Core\nDESCRIPTION: Demonstrates how to use RSpec::Expectations in any Ruby class by requiring the library and including the RSpec::Matchers module, allowing expectations to be used in non-test code.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rspec/expectations'\n\nclass MyClass\n  include RSpec::Matchers\n\n  def do_something(arg)\n    expect(arg).to be > 0\n    # do other stuff\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using and_invoke Implementation\nDESCRIPTION: Shows the and_invoke implementation added in v3.11.0 for configuring responses to receive and receive_messages with multiple callable objects.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/Changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nand_invoke\n```\n\n----------------------------------------\n\nTITLE: RSpec Equivalence Matchers\nDESCRIPTION: Examples of using equivalence matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should     eq(expected)  # passes if actual == expected\nactual.should     == expected   # passes if actual == expected\nactual.should_not eql(expected) # passes if actual.eql?(expected)\n```\n\n----------------------------------------\n\nTITLE: Combined Double Creation and Stubbing in Ruby RSpec\nDESCRIPTION: Shows various shortcuts for creating test doubles with method stubs in a single statement.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbook = double(\"book\", :title => \"The RSpec Book\")\ndouble(:foo => 'bar')\norder.calculate_total_price(double(:price => 1.99), double(:price => 2.99))\n```\n\n----------------------------------------\n\nTITLE: RSpec Spy Reference Syntax\nDESCRIPTION: Demonstrates the syntax reference for using spies with have_received in RSpec tests, which supports the same fluent interface as regular message expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/setting_constraints/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhave_received(...)\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to RSpec Documentation\nDESCRIPTION: A set of markdown links that reference related RSpec documentation files and modules.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-support/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [The combined readme](../README.md)\n* [rspec-core](../rspec-core/README.md)\n* [rspec-expectations](../rspec-expectations/README.md)\n* [rspec-mocks](../rspec-mocks/README.md)\n```\n\n----------------------------------------\n\nTITLE: RSpec Identity Matchers\nDESCRIPTION: Examples of using identity matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should     be(expected)    # passes if actual.equal?(expected)\nactual.should_not equal(expected) # passes if actual.equal?(expected)\n```\n\n----------------------------------------\n\nTITLE: Collection Iteration Matcher in Ruby\nDESCRIPTION: Demonstrates the 'all' matcher which verifies that all elements in a collection match a given condition.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nexpect([1, 3, 5]).to all( be_odd )\n```\n\n----------------------------------------\n\nTITLE: Range Matchers in RSpec\nDESCRIPTION: Demonstrates how to test that a value is included in a range using the cover matcher, available in Ruby 1.9 and later.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(1..10).to cover(3)\n```\n\n----------------------------------------\n\nTITLE: RSpec Comparison Matchers\nDESCRIPTION: Examples of using comparison matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should be >  expected\nactual.should be >= expected\nactual.should be <= expected\nactual.should be <  expected\nactual.should be_within(delta).of(expected)\n```\n\n----------------------------------------\n\nTITLE: Using Change Matcher with Nested Objects\nDESCRIPTION: Improved change matcher that correctly detects changes in deeply nested mutable objects using hash comparison.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { operation }.to change(receiver, :message)\n```\n\n----------------------------------------\n\nTITLE: Basic Constant Stubbing in Ruby RSpec\nDESCRIPTION: Demonstrates the basic usage of stub_const to replace a constant with a test double. The stubbed constant is automatically restored after the test completes.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/mutating_constants/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nstub_const(\"Foo\", fake_foo)\nFoo # => fake_foo\n```\n\n----------------------------------------\n\nTITLE: RSpec Type/Class Matchers\nDESCRIPTION: Examples of using type and class matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should     be_an_instance_of(expected)\nactual.should_not be_a_kind_of(expected)\n```\n\n----------------------------------------\n\nTITLE: Should Syntax in RSpec Expectations\nDESCRIPTION: Shows the legacy 'should' syntax that remains supported in RSpec, providing an alternative to the 'expect' syntax for writing expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/README.md#2025-04-21_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should eq expected\nactual.should be > 3\n[1, 2, 3].should_not include 4\n```\n\n----------------------------------------\n\nTITLE: Using respond_to Matcher with Keyword Arguments\nDESCRIPTION: Enhancement added in v3.5.0 to support keyword arguments in the respond_to matcher for testing method responses.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(object).to respond_to(:method).with_keywords(:foo, :bar)\n```\n\n----------------------------------------\n\nTITLE: RSpec Predicate Matchers\nDESCRIPTION: Examples of using predicate matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should     be_xxx         # passes if actual.xxx?\nactual.should_not have_xxx(:arg) # passes if actual.has_xxx?(:arg)\n```\n\n----------------------------------------\n\nTITLE: Range Coverage Matcher in RSpec (Ruby 1.9+)\nDESCRIPTION: A matcher for testing if a range includes a specific value. This uses Ruby's cover? method which is available in Ruby 1.9 and later.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(1..10).to cover(3)\n```\n\n----------------------------------------\n\nTITLE: RSpec Any Instance Stubbing\nDESCRIPTION: Demonstrates how to stub or mock methods on any instance of a class using allow_any_instance_of and expect_any_instance_of.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nallow_any_instance_of(Widget).to receive(:name).and_return(\"Wibble\")\nexpect_any_instance_of(Widget).to receive(:name).and_return(\"Wobble\")\n```\n\n----------------------------------------\n\nTITLE: RSpec Collection Membership Matchers\nDESCRIPTION: Examples of using collection membership matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should include(expected)\nactual.should start_with(expected)\nactual.should end_with(expected)\n```\n\n----------------------------------------\n\nTITLE: RSpec Truthiness Matchers\nDESCRIPTION: Examples of using truthiness matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should be_true  # passes if actual is truthy (not nil or false)\nactual.should be_false # passes if actual is falsy (nil or false)\nactual.should be_nil   # passes if actual is nil\n```\n\n----------------------------------------\n\nTITLE: Described Class Usage\nDESCRIPTION: Demonstrates how to use described_class helper to reference the class under test.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.shared_examples \"collections\" do\n  it \"is empty when first created\" do\n    expect(described_class.new).to be_empty\n  end\nend\n\nRSpec.describe Array do\n  include_examples \"collections\"\nend\n\nRSpec.describe Hash do\n  include_examples \"collections\"\nend\n```\n\n----------------------------------------\n\nTITLE: Enhancing yield_control with exact and relative counts - Ruby\nDESCRIPTION: Introduces enhancements to the `yield_control` matcher allowing specification of exact or relative counts for control yield expectations, enriching the testing capability of RSpec by adding flexibility in expectation definitions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { }.to yield_control.exactly(3).times\n```\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { }.to yield_control.at_least(2).times\n```\n\n----------------------------------------\n\nTITLE: RSpec Combined Expectation Example\nDESCRIPTION: Shows how to combine multiple expectation details including specific arguments, receive counts, and responses.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(double).to receive(:<<).with(\"illegal value\").once.and_raise(ArgumentError)\n```\n\n----------------------------------------\n\nTITLE: Basic Should Syntax Examples\nDESCRIPTION: Basic examples of using should and should_not for expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should eq expected\nactual.should be > 3\n[1, 2, 3].should_not include 4\n```\n\n----------------------------------------\n\nTITLE: Improving Differ Handling for Array Outputs - Ruby\nDESCRIPTION: This snippet enhances the differ functionality to better handle array outputs during expectation failures by printing each element on a separate line, thus providing clearer failure messages for array comparisons.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Displaying RSpec Help Commands\nDESCRIPTION: Shows how to display all available RSpec command line options using the --help flag.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/features/command_line/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n$ rspec --help\n```\n\n----------------------------------------\n\nTITLE: Using is_expected for One-Liner Expectations in RSpec\nDESCRIPTION: Shows the usage of is_expected for writing more readable one-liner expectations with RSpec's expect syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nit { is_expected.to read_well }\n```\n\n----------------------------------------\n\nTITLE: Accepting Duck-Typed Strings as Expectation Messages - Ruby\nDESCRIPTION: Enhancement to allow duck-typed strings which respond to `:to_str` to be used as expectation messages, thereby broadening the types of objects that can be used in expectation definitions to include more diverse input types.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Ensuring Proper Usage of raise_error Matcher - Ruby\nDESCRIPTION: This fix ensures that `expect(object).to raise_error` now provides warnings when passed incorrectly, thus preventing silent failures in specs.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Using array_excluding Matcher\nDESCRIPTION: Demonstrates the array_excluding matcher added in v3.13.0 for matching arguments. Allows specifying array contents that should not be present.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/Changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\narray_excluding\n```\n\n----------------------------------------\n\nTITLE: Accessing Current RSpec Execution Scope\nDESCRIPTION: Method that exposes the current scope in which RSpec is executing, such as :before_example_hook or :example, allowing code to understand its execution context.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.current_scope\n```\n\n----------------------------------------\n\nTITLE: Improving raise_error Matcher on Ruby 2.0 - Ruby\nDESCRIPTION: A fix for the `expect { raise s }.to raise_error(s)` syntax in Ruby 2.0 where s is an error instance, thus providing better handling for raised errors.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Running RSpec Command Line Examples\nDESCRIPTION: Examples of running RSpec commands in the terminal to execute tests and see different output formats, including dealing with failing tests and using formatters.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ rspec spec/calculator_spec.rb\n./spec/calculator_spec.rb:1: uninitialized constant Calculator\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rspec spec/calculator_spec.rb\nF\n\nFailures:\n\n  1) Calculator#add returns the sum of its arguments\n     Failure/Error: expect(Calculator.new.add(1, 2)).to eq(3)\n\n       expected: 3\n            got: nil\n\n       (compared using ==)\n     # ./spec/calculator_spec.rb:6:in `block (3 levels) in <top (required)>'\n\nFinished in 0.00131 seconds (files took 0.10968 seconds to load)\n1 example, 1 failure\n\nFailed examples:\n\nrspec ./spec/calculator_spec.rb:5 # Calculator#add returns the sum of its arguments\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rspec spec/calculator_spec.rb\n.\n\nFinished in 0.000315 seconds\n1 example, 0 failures\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rspec spec/calculator_spec.rb --format doc\nCalculator\n  #add\n    returns the sum of its arguments\n\nFinished in 0.000379 seconds\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Fixing the be_within matcher for Integer Comparisons - Ruby\nDESCRIPTION: This fix resolves an issue with the `expect(something).to be_within(x).percent_of(y)` syntax where both x and y are integers, ensuring the matcher performs accurately for integer variables.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Using Exactly One Time Syntax\nDESCRIPTION: Demonstrates the time alias added in v3.9.0 for specifying single method call expectations.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/Changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(Class).to receive(:method).exactly(1).time\n```\n\n----------------------------------------\n\nTITLE: Satisfy Matcher in RSpec\nDESCRIPTION: A flexible matcher that takes a custom block to determine if the expectation is met. This allows for arbitrary conditions to be tested.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/built_in_matchers/README.md#2025-04-21_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nexpect(actual).to satisfy { |value| value == expected }\n```\n\n----------------------------------------\n\nTITLE: Implementation of Calculator's Add Method\nDESCRIPTION: The implementation of the add method in the Calculator class that makes the test pass. It simply returns the sum of its two arguments.\nSOURCE: https://github.com/rspec/rspec/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add(a, b)\n  a + b\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests with Ruby Command\nDESCRIPTION: Demonstrates how to run RSpec tests using the ruby command with proper load path configuration for lib and spec directories, along with rspec/autorun requirement.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/features/command_line/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n$ ruby -Ilib -Ispec -rrspec/autorun path/to/spec.rb\n```\n\n----------------------------------------\n\nTITLE: Setting RSpec Color Mode Configuration\nDESCRIPTION: Shows how to configure RSpec color output mode. Can be set to :automatic (default), :on, or :off.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.color_mode = :automatic  # default\n# or\nconfig.color_mode = :on\n# or\nconfig.color_mode = :off\n```\n\n----------------------------------------\n\nTITLE: Ruby Structure Definition Example\nDESCRIPTION: Example code showing struct creation and matcher usage with the have_attributes matcher.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nPerson = Struct.new(:name, :age)\nperson = Person.new(\"Bob\", 32)\nexpect(person).to have_attributes(:name => \"Bob\", :age => 32)\n```\n\n----------------------------------------\n\nTITLE: RSpec One-liner Should Syntax\nDESCRIPTION: Demonstration of the one-liner syntax using should for more readable specs.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe User do\n  it { should validate_presence_of :email }\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Example Group API Check\nDESCRIPTION: API method to check if RSpec is currently executing a context hook, primarily intended for use by rspec-rails.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec::Core::ExampleGroup.currently_executing_a_context_hook?\n```\n\n----------------------------------------\n\nTITLE: Using RSpec Configuration API Example\nDESCRIPTION: Example showing new config.filter_run_when_matching API usage that replaces the combination of config.filter_run and config.run_all_when_everything_filtered.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.filter_run_when_matching\n```\n\n----------------------------------------\n\nTITLE: Required Matcher Methods in RSpec\nDESCRIPTION: Lists the core methods that any RSpec matcher must implement to satisfy the matcher protocol.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmatches?(actual)\nfailure_message\n```\n\n----------------------------------------\n\nTITLE: Optional Matcher Methods in RSpec\nDESCRIPTION: Lists the optional methods that can be implemented by RSpec matchers to provide additional functionality.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/features/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndoes_not_match?(actual)\nfailure_message_when_negated\ndescription\nsupports_block_expectations?\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Example in RSpec Block in Ruby\nDESCRIPTION: Demonstrates how to access the current example as a block argument in RSpec example blocks, which is the new recommended approach replacing deprecated methods.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nit { |example| expect(example.metadata).to include(:some_key) }\n```\n\n----------------------------------------\n\nTITLE: Metadata Access in RSpec\nDESCRIPTION: Shows how to access example metadata within a test case for accessing test information.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nit \"does something\" do |example|\n  expect(example.metadata[:description]).to eq(\"does something\")\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Undefined Constants in Ruby RSpec\nDESCRIPTION: Demonstrates that hiding an already undefined constant has no effect.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/mutating_constants/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nhide_const(\"NO_OP\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Cause Backtrace Option in RSpec\nDESCRIPTION: This snippet shows the addition of a configuration option to print the entire backtrace of an exception cause in RSpec error reporting. This enables more detailed debugging information when exceptions are caused by other exceptions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec::Core::Configuration#full_cause_backtrace\n```\n\n----------------------------------------\n\nTITLE: Tagging Slow Tests in RSpec\nDESCRIPTION: Example of tagging a test group as `:slow` so it can be excluded from regular test runs but included when specifically requested.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Something, :slow => true do\n```\n\n----------------------------------------\n\nTITLE: Adding Gem Filtering API\nDESCRIPTION: Introduces the `config.filter_gems_from_backtrace` API to simplify filtering named gems from backtraces. This allows users to easily exclude specific gems like \"rack\" or \"rake\" from appearing in backtraces, improving readability and focus.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n\"config.filter_gems_from_backtrace \\\"rack\\\", \\\"rake\\\"\"\n```\n\n----------------------------------------\n\nTITLE: RSpec Collection Membership Examples\nDESCRIPTION: Detailed examples of using collection membership matchers with various types of collections.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n[1,2,3].should       include(1)\n[1,2,3].should       include(1, 2)\n[1,2,3].should       start_with(1)\n[1,2,3].should       start_with(1,2)\n[1,2,3].should       end_with(3)\n[1,2,3].should       end_with(2,3)\n{:a => 'b'}.should   include(:a => 'b')\n\"this string\".should include(\"is str\")\n\"this string\".should start_with(\"this\")\n\"this string\".should end_with(\"ring\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Differ on Differently-Encoded Strings - Ruby\nDESCRIPTION: Addresses an issue where the differ would throw errors when comparing differently-encoded strings, ensuring that string variations do not cause unexpected matcher failures.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Defining Custom Example Group Aliases in RSpec\nDESCRIPTION: New method to define custom example group methods with specified metadata, allowing creation of domain-specific group definitions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.alias_example_group_to :feature, :type => :feature\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec Mock Framework in Ruby\nDESCRIPTION: Demonstrates the correct way to configure the mock framework in RSpec 3, using exact symbols instead of fuzzy matching.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.mock_with :rspec # or :mocha, :flexmock, :rr, :nothing\nend\n```\n\n----------------------------------------\n\nTITLE: Deprecating Potentially Misleading raise_error Syntax - Ruby\nDESCRIPTION: Deprecation of `expect { }.not_to raise_error(SpecificErrorClass)` and similar usages to avoid hiding failures due to any other error passing, promoting clearer test practices.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Configuring RSpec DSL Global Exposure in Ruby\nDESCRIPTION: New configuration option to control whether RSpec's DSL methods are exposed globally. When disabled, it removes monkey patches to main and Module.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.expose_dsl_globally = false\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Regular Expression Matchers\nDESCRIPTION: Examples of using regular expression matchers with should syntax.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nactual.should match(/expression/)\nactual.should =~ /expression/\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests with Bundle\nDESCRIPTION: Commands to run the RSpec test suite, either with bundle exec or using standalone binstubs.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rspec\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/rspec\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Line Number for Spec Rerun in RSpec\nDESCRIPTION: Configuration option to force RSpec to always print a line number instead of an example ID when the line number is ambiguous during spec reruns, improving consistency in test references.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec::Core::Configuration#force_line_number_for_spec_rerun\n```\n\n----------------------------------------\n\nTITLE: RSpec Range Coverage Matcher\nDESCRIPTION: Example of using the cover matcher with ranges in Ruby 1.9+.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Should.md#2025-04-21_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n(1..10).should cover(3)\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Scenarios\nDESCRIPTION: Commands to execute Cucumber scenarios for acceptance testing and documentation generation.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec cucumber\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/cucumber\n```\n\n----------------------------------------\n\nTITLE: Setting up RSpec in a Ruby project\nDESCRIPTION: Command to initialize RSpec in a Ruby project, creating the necessary configuration files.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrspec --init\n```\n\n----------------------------------------\n\nTITLE: Nested Constants Transfer in Ruby RSpec\nDESCRIPTION: Illustrates how to handle nested constants when stubbing a class or module, including the use of the :transfer_nested_constants option to selectively transfer nested constants to the stub.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/mutating_constants/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CardDeck\n  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]\n  NUM_CARDS = 52\nend\n\nfake_class = Class.new\nstub_const(\"CardDeck\", fake_class)\nCardDeck # => fake_class\nCardDeck::SUITS # => raises uninitialized constant error\nCardDeck::NUM_CARDS # => raises uninitialized constant error\n\nstub_const(\"CardDeck\", fake_class, :transfer_nested_constants => true)\nCardDeck::SUITS # => [:Spades, :Diamonds, :Clubs, :Hearts]\nCardDeck::NUM_CARDS # => 52\n\nstub_const(\"CardDeck\", fake_class, :transfer_nested_constants => [:SUITS])\nCardDeck::SUITS # => [:Spades, :Diamonds, :Clubs, :Hearts]\nCardDeck::NUM_CARDS # => raises uninitialized constant error\n```\n\n----------------------------------------\n\nTITLE: Checking YARD Documentation Coverage\nDESCRIPTION: Command to verify YARD documentation coverage by listing undocumented elements.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec yard stats --list-undoc\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/yard stats --list-undoc\n```\n\n----------------------------------------\n\nTITLE: Setting up Standalone Bundle Installation\nDESCRIPTION: Commands to install dependencies in standalone mode and create binstubs for CI-like environment\nSOURCE: https://github.com/rspec/rspec/blob/main/DEVELOPMENT.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle install --standalone --path <current_lib>/bundle\n$ bundle binstubs --path <current_lib>/bundle/bin\n```\n\n----------------------------------------\n\nTITLE: Creating Named Verifying Doubles in Ruby RSpec\nDESCRIPTION: Shows how to create multiple verifying doubles with custom identifiers and add them to a collection.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = []\nbooks << instance_double(\"Book\", :rspec_book, :pages => 250)\nbooks << instance_double(\"Book\", \"(Untitled)\", :pages => 5000)\n\nputs books.inspect # with names, it's clearer which were actually added\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Rake in Shell\nDESCRIPTION: Commands to run tests using Rake within any RSpec library. Options include running all tests, only RSpec tests, or only Cucumber tests.\nSOURCE: https://github.com/rspec/rspec/blob/main/DEV-README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrake\nrake spec\nrake cucumber\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler\nDESCRIPTION: Commands to navigate to the RSpec directory and install dependencies using Bundler\nSOURCE: https://github.com/rspec/rspec/blob/main/DEVELOPMENT.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rspec\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Initializing RSpec Development Environment in Shell\nDESCRIPTION: Commands to clone the RSpec repository, navigate to the project directory, and install required dependencies using Bundler.\nSOURCE: https://github.com/rspec/rspec/blob/main/DEV-README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/rspec/rspec.git\ncd rspec\ngem install bundler\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Rake Task Pattern Configuration\nDESCRIPTION: Fixes the rake task `t.pattern =` option to avoid running all specs when it matches no files. This is achieved by passing the `--pattern` option to the `rspec` command instead of resolving the file list individually.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n\"t.pattern =\"\n```\n\n----------------------------------------\n\nTITLE: Running RuboCop Style Checks\nDESCRIPTION: Commands to run RuboCop for enforcing style conventions on the project's lib directory.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rubocop lib\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/rubocop lib\n```\n\n----------------------------------------\n\nTITLE: Executing RSpec Directly with Bundler\nDESCRIPTION: Command to run RSpec directly using Bundler's exec feature, which ensures the correct gem versions are used.\nSOURCE: https://github.com/rspec/rspec/blob/main/DEV-README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: RSpec Configuration Pattern\nDESCRIPTION: Fixes `config.pattern=` so that it still takes affect even if `config.files_to_run` has already been accessed.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\n\"config.pattern=\"\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n\"config.files_to_run\"\n```\n\n----------------------------------------\n\nTITLE: Running Individual Spec Files\nDESCRIPTION: Bash loop to run each spec file individually, ensuring they pass in isolation as well as part of the full suite.\nSOURCE: https://github.com/rspec/rspec/blob/main/BUILD_DETAIL.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfor file in `find spec -iname '*_spec.rb'`; do\n  echo \"Running $file\"\n  bin/rspec $file -b --format progress\ndone\n```\n\n----------------------------------------\n\nTITLE: Running RSpec with Binstubs in Shell\nDESCRIPTION: Commands to create and use binstubs for RSpec, allowing direct execution without bundle exec. This installs the executable scripts in the bin directory.\nSOURCE: https://github.com/rspec/rspec/blob/main/DEV-README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbundle install --binstubs rspec-core\nbin/rspec\n```\n\n----------------------------------------\n\nTITLE: Cloning RSpec Repository\nDESCRIPTION: Command to clone the RSpec repository from GitHub using SSH\nSOURCE: https://github.com/rspec/rspec/blob/main/DEVELOPMENT.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:rspec/rspec.git\n```\n\n----------------------------------------\n\nTITLE: Enhancing the have Matcher for Ruby 2.0 Compatibility - Ruby\nDESCRIPTION: Fixes the `have` matcher to accommodate the behavior of Ruby 2.0 where `Enumerator#size` may return nil, ensuring that matchers behave consistently across Ruby versions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-expectations/Changelog.md#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Starting YARD Documentation Server\nDESCRIPTION: Commands to start a YARD server for viewing API documentation, with options for both regular and standalone bundle installations\nSOURCE: https://github.com/rspec/rspec/blob/main/DEVELOPMENT.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec yard server --reload\n\n# or, if you installed your bundle with `--standalone --binstubs`:\n\n$ bin/yard server --reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Pending Failure Output in RSpec\nDESCRIPTION: Configuration option that allows customizing how pending failures are reported, including the ability to skip backtraces or suppress pending specs output entirely.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npending_failure_output\n```\n\n----------------------------------------\n\nTITLE: Initializing RSpec Bug Report Template in Ruby\nDESCRIPTION: A self-contained Ruby script that sets up a minimal RSpec test environment with Bundler for dependency management. It includes basic test examples and prints the Ruby version being used. The script can be executed directly to demonstrate potential issues with RSpec.\nSOURCE: https://github.com/rspec/rspec/blob/main/REPORT_TEMPLATE.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  gem \"rspec\", \"3.13.0\" # Activate the gem and version you are reporting the issue against.\nend\n\nputs \"Ruby version is: #{RUBY_VERSION}\"\nrequire 'rspec/autorun'\n\nRSpec.describe 'additions' do\n  it 'returns 2' do\n    expect(1 + 1).to eq(2)\n  end\n\n  it 'returns 1' do\n    expect(3 - 1).to eq(-1)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old RSpec Mocking Syntax\nDESCRIPTION: Shows the legacy monkey-patched syntax for stubbing and mocking methods in RSpec that was used prior to version 2.14. This syntax is now deprecated but still supported.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-mocks/features/old_syntax/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nobj.stub(:foo).and_return(15)\nobj.should_receive(:bar)\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Filter with Tag Values in RSpec\nDESCRIPTION: Example of using tag-based filtering in RSpec tests where multiple values can be matched against a tag using an array pattern. This syntax allows for matching against specific tag values including strings and regular expressions.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nit \"does something\", :x => [:foo,'bar',/baz/]\n```\n\n----------------------------------------\n\nTITLE: Silencing Filter Announcements in RSpec\nDESCRIPTION: Shows how to configure RSpec to hide the default filter announcement messages that appear before test runs, which is useful for cleaner output.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |c|\n  c.filter_run_including :foo => :bar\n  c.silence_filter_announcements = true\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Custom RSpec Formatters in Ruby\nDESCRIPTION: Custom formatters must now register themselves with RSpec and specify which notifications they want to receive. This allows adding new notifications without breaking existing formatters.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Changelog.md#2025-04-21_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec::Core::Formatters.register(formatter_class, *notifications)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Filters in RSpec\nDESCRIPTION: Demonstrates how to set up default inclusion and exclusion filters in the RSpec configuration. These can be used to control which tests run by default.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |c|\n  c.filter_run_including :foo => :bar\n  c.filter_run_excluding :foo => :bar\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Focus to Individual Examples in RSpec\nDESCRIPTION: Shows how to mark a specific example with `:focus` metadata to temporarily run only that example when focus filtering is enabled.\nSOURCE: https://github.com/rspec/rspec/blob/main/rspec-core/Filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nit \"does something\" do\n# becomes...\nit \"does something\", :focus do\n```"
  }
]