[
  {
    "owner": "recharts",
    "repo": "recharts",
    "content": "TITLE: Rendering a LineChart with Recharts in React\nDESCRIPTION: This JSX snippet demonstrates how to create a simple LineChart using Recharts components. It configures the chart's width, height, data source, XAxis, Tooltip, CartesianGrid, and Line series. The 'data' variable is expected to be an array of objects, each with 'name', 'uv', and 'pv' properties.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/README.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<LineChart width={400} height={400} data={data}>\n  <XAxis dataKey=\"name\" />\n  <Tooltip />\n  <CartesianGrid stroke=\"#f5f5f5\" />\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#ff7300\" />\n  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#387908\" />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic LineChart with Recharts\nDESCRIPTION: This code snippet demonstrates how to create a basic LineChart using Recharts. It imports the necessary components (LineChart and Line) and renders a LineChart component with specified width, height, and data.  The Line component is used to display the data as a line, with 'uv' as the data key and a specified stroke color.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineChart, Line } from 'recharts';\nconst renderLineChart = (\n<LineChart width={400} height={400} data={data}>\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n</LineChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Recharts via npm\nDESCRIPTION: This shell command shows how to install Recharts and its peer dependency `react-is` using npm. Make sure `react-is` needs to match the version of installed `react` package. This command adds Recharts as a dependency to the project, enabling its use in React components.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# latest stable\n$ npm install recharts react-is\n```\n\n----------------------------------------\n\nTITLE: Adding CartesianGrid and Axes to Recharts LineChart\nDESCRIPTION: This snippet shows how to enhance a LineChart by adding a CartesianGrid, XAxis, and YAxis.  These components provide visual structure and context to the chart. The XAxis is configured to display the 'name' property of the data, while the YAxis provides a scale for the 'uv' values.  A CartesianGrid is added to visually separate points.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nconst renderLineChart = (\n<LineChart width={600} height={300} data={data}>\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n  <CartesianGrid stroke=\"#ccc\" />\n  <XAxis dataKey=\"name\" />\n  <YAxis />\n</LineChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ResponsiveContainer Usage in Recharts\nDESCRIPTION: This snippet demonstrates how to use the ResponsiveContainer component to make a LineChart responsive to its parent's width, while maintaining a fixed height.  It requires the recharts library and assumes that 'args' and the Line component are defined elsewhere in the application. The 'uv' dataKey is used to specify which data field to display on the line.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/ResponsiveContainer.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponsiveContainer width=\"100%\" height={400}>\n  <LineChart {...args}>\n    <Line dataKey=\"uv\" />\n  </LineChart>\n</ResponsiveContainer>\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to Recharts LineChart\nDESCRIPTION: This code snippet shows how to add a Tooltip component to a Recharts LineChart to provide interactive hovering functionality.  When the user hovers over a data point, the Tooltip component will display information about that point.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nconst renderLineChart = (\n<LineChart width={600} height={300} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n  <XAxis dataKey=\"name\" />\n  <YAxis />\n  <Tooltip />\n</LineChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip Component\nDESCRIPTION: This React component, `CustomTooltip`, customizes the content of the tooltip in Recharts. It receives payload, label, and active props. It displays the label, a description retrieved from `getIntroOfPage`, and a generic description when the tooltip is active.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nexport const CustomTooltip = ({ payload, label, active }) => {\n  if (active) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`${label} : ${payload[0].value}`}</p>\n        <p className=\"intro\">{getIntroOfPage(label)}</p>\n        <p className=\"desc\">Anything you want can be displayed here.</p>\n      </div>\n    );\n  }\n  else{\n    return <></>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Line Chart with Keyboard Accessibility in Recharts\nDESCRIPTION: This snippet demonstrates how to enable keyboard accessibility for a LineChart in Recharts using the `accessibilityLayer` prop. It includes a ResponsiveContainer, LineChart, Line, XAxis, YAxis, and Tooltip components. The `accessibilityLayer` prop adds the chart to the tab order and enables keyboard navigation between data points using arrow keys, displaying the tooltip for each point.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/Accessibility.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponsiveContainer width=\"100%\" height={400}>\n    <LineChart\n        data={pageData}\n        title=\"Line chart showing UV values for pages\"\n        accessibilityLayer\n    >\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n    </LineChart>\n</ResponsiveContainer>\n```\n\n----------------------------------------\n\nTITLE: BarChart with Customized Tooltip Content\nDESCRIPTION: This code snippet demonstrates how to create a BarChart with customized tooltip content using the `CustomTooltip` component and `getIntroOfPage` function. It imports necessary Recharts components and defines the chart structure with a customized Tooltip component.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';\n...\nfunction getIntroOfPage(label) {\n  if (label === 'Page A') {\n    return 'Page A is about men\\'s clothing';\n  } if (label === 'Page B') {\n    return 'Page B is about women\\'s dress';\n  } if (label === 'Page C') {\n    return 'Page C is about women\\'s bag';\n  } if (label === 'Page D') {\n    return 'Page D is about household goods';\n  } if (label === 'Page E') {\n    return 'Page E is about food';\n  } if (label === 'Page F') {\n    return 'Page F is about baby food';\n  }\n}\n\nfunction CustomTooltip({ payload, label, active }) {\nif (active) {\nreturn (\n<div className=\"custom-tooltip\">\n<p className=\"label\">{`${label} : ${payload[0].value}`}</p>\n<p className=\"intro\">{getIntroOfPage(label)}</p>\n<p className=\"desc\">Anything you want can be displayed here.</p>\n</div>\n);\n}\n\nreturn null;\n}\nconst renderBarChart = (\n<BarChart width={600} height={300} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 20 }}>\n  <XAxis dataKey=\"name\" tick={<CustomizedAxisTick/>} />\n  <YAxis />\n  <Tooltip content={<CustomTooltip />}/>\n  <Bar dataKey=\"uv\" fill=\"#8884d8\"\n       shape={<TriangleBar />} />\n</BarChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margins and Grid Style in Recharts LineChart\nDESCRIPTION: This snippet demonstrates how to adjust the margins and grid style of a Recharts LineChart.  The `margin` prop on the LineChart component is used to create space around the chart.  The `strokeDasharray` prop on the CartesianGrid component is used to create a dashed grid effect, improving readability.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nconst renderLineChart = (\n<LineChart width={600} height={300} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n  <XAxis dataKey=\"name\" />\n  <YAxis />\n</LineChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple LineChart - Recharts\nDESCRIPTION: This code snippet demonstrates how to create a basic LineChart using Recharts. It defines the chart's width, height, data source, and accessibility features. The chart includes XAxis, YAxis, CartesianGrid, Line components, and Tooltip to display data points and interactions.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Welcome.mdx#_snippet_0\n\nLANGUAGE: typescript jsx\nCODE:\n```\n  <LineChart width={500} height={300} data={data} accessibilityLayer>\n    <XAxis dataKey=\"name\"/>\n    <YAxis/>\n    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n    <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\n    <Tooltip/>\n  </LineChart>\n```\n\n----------------------------------------\n\nTITLE: BarChart with Customized Chart Element Styles\nDESCRIPTION: This code snippet demonstrates how to customize the styles of chart elements such as XAxis, CartesianGrid, and Bar in Recharts.  It shows how to set stroke colors, dash arrays, and fill colors using props.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts';\n\nconst renderBarChart = (\n<BarChart width={600} height={300} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 20 }}>\n  <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\n  <YAxis />\n  <Tooltip />\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n  <Bar dataKey=\"uv\" fill=\"#8884d8\" barSize={30} />\n</BarChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Rectangle in SVG using JSX\nDESCRIPTION: Demonstrates how to render a Rectangle component directly within an SVG element. The Rectangle's position, dimensions, and styling (stroke, fill) are defined as props. This usage is a basic example of integrating the Rectangle component.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Rectangle.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<svg height={100} width=\"100%\">\n  <Rectangle x={0} y={0} height={100} width={200} stroke=\"#111\" fill=\"red\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Customized Axis Tick Component\nDESCRIPTION: This React component, `CustomizedAxisTick`, is used to customize the appearance of XAxis ticks in Recharts. It receives props including x, y, stroke, and payload, and renders a rotated text element for each tick.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport const CustomizedAxisTick = (...args)=>{\n  const {  x, y, stroke, payload } = args[0];\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">\n        {payload.value}\n      </text>\n    </g>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Bar Label Component\nDESCRIPTION: This React component, `renderCustomBarLabel`, renders a custom label for each bar in the BarChart. It receives props including payload, x, y, width, height, and value. It displays the value above the bar.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nexport const renderCustomBarLabel = ({ payload, x, y, width, height, value }) => {\n  return <text x={x + width / 2} y={y} fill=\"#666\" textAnchor=\"middle\" dy={-6}>{`value: ${value}`}</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sector Component in Customized Component (JSX)\nDESCRIPTION: Demonstrates how to use the Sector component within a Customized component in Recharts. The sectorProps object is passed to the Sector component.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Sector.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Customized component={<Sector {...sectorProps} />} />\n```\n\n----------------------------------------\n\nTITLE: BarChart with Customized Bar Shape\nDESCRIPTION: This code snippet demonstrates how to create a BarChart with customized bar shapes using the `TriangleBar` component. It imports necessary Recharts components and defines the chart structure with a customized Bar component that renders triangle shapes.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BarChart, Bar, XAxis, YAxis } from 'recharts';\nconst getPath = (x, y, width, height) => (\n  `M${x},${y + height}\n   C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\n   C${x + width / 2},${y + height / 3} ${x + 2 * width / 3},${y + height} ${x + width}, ${y + height}\n   Z`\n);\n\nconst TriangleBar = (props) => {\nconst {\nfill, x, y, width, height,\n} = props;\n\nreturn <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\n};\nconst renderBarChart = (\n<BarChart width={600} height={300} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 20 }}>\n  <XAxis dataKey=\"name\" tick={<CustomizedAxisTick/>} />\n  <YAxis />\n  <Bar dataKey=\"uv\" fill=\"#8884d8\"\n       shape={<TriangleBar />} />\n</BarChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Dot with JSX in Recharts\nDESCRIPTION: This snippet demonstrates how to use the Dot component within a `<Customized />` component in Recharts. It takes dotProps as input and renders a Dot with those properties. The Dot is a basic SVG shape used for scatter and line points.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Dot.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Customized component={<Dot {...dotProps} />} />\n```\n\n----------------------------------------\n\nTITLE: BarChart with Customized Tooltip and Legend Styles\nDESCRIPTION: This code snippet shows how to customize the styles of the Tooltip and Legend components in Recharts using wrapperStyle props.  It demonstrates setting width, background color, border, and other CSS properties.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';\n\nconst renderBarChart = (\n<BarChart width={600} height={300} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 20 }}>\n  <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\n  <YAxis />\n  <Tooltip wrapperStyle={{ width: 100, backgroundColor: '#ccc' }} />\n  <Legend width={100} wrapperStyle={{ top: 40, right: 20, backgroundColor: '#f5f5f5', border: '1px solid #d5d5d5', borderRadius: 3, lineHeight: '40px' }} />\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n  <Bar dataKey=\"uv\" fill=\"#8884d8\" barSize={30} />\n</BarChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Triangle Bar Component\nDESCRIPTION: This React component, `TriangleBar`, renders a triangle shape for the bars in the BarChart. It uses the `getPath` function to define the shape based on the provided x, y, width, height, and fill props.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nexport const TriangleBar = (...args) => {\n  const {\n    fill, x, y, width, height,\n  } = args[0];\n\n  return <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Rectangle with Customized Component using JSX\nDESCRIPTION: Illustrates how to use the Rectangle component within a `<Customized />` component. This allows for dynamic and data-driven rendering of the Rectangle, using `rectangleProps` to pass properties to the component.  This is useful for integrating Rectangle into more complex chart setups.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Rectangle.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Customized component={<Rectangle {...rectangleProps} />} />\n```\n\n----------------------------------------\n\nTITLE: Using Curve within Customized Component (JSX)\nDESCRIPTION: Demonstrates how to use the Curve component within a Customized component in Recharts. The `crossProps` object likely contains the data and styling properties for the curve.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Curve.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Customized component={<Curve {...crossProps} />} />\n```\n\n----------------------------------------\n\nTITLE: Using Cross component within Customized\nDESCRIPTION: This snippet demonstrates how to use the Cross component within the Customized component in Recharts. It allows for custom rendering and styling of the Cross shape. The crossProps variable should contain the properties to be passed to the Cross component.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Cross.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Customized component={<Cross {...crossProps} />} />\n```\n\n----------------------------------------\n\nTITLE: ResponsiveContainer with Initial Dimensions in Recharts\nDESCRIPTION: This snippet shows how to provide initial dimensions for the ResponsiveContainer when rendering on the server (SSR) to avoid layout shift before hydration. It takes the LineChart and renders it with the specified initial width and height before the actual dimensions are calculated in the browser.  It is essential that the `initialDimension` values are close to actual values to minimize content layout shift.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/ResponsiveContainer.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponsiveContainer width=\"100%\" height={400} initialDimension={{ width: 520, height: 400 }}>\n  <LineChart {...args}>\n    <Line dataKey=\"uv\" />\n  </LineChart>\n</ResponsiveContainer>\n```\n\n----------------------------------------\n\nTITLE: Using Polygon in Customized Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to integrate the Polygon component within a Customized component in Recharts. The polygonProps variable represents the properties to be passed to the Polygon component, allowing for customization of its appearance and behavior.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/API/shapes/Polygon.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Customized component={<Polygon {...polygonProps} />} />\n```\n\n----------------------------------------\n\nTITLE: BarChart with Customized Axis Tick and Label\nDESCRIPTION: This code snippet demonstrates how to create a BarChart with customized axis ticks and bar labels using the `CustomizedAxisTick` and `renderCustomBarLabel` components. It imports necessary Recharts components and defines the chart structure with customized XAxis and Bar components.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BarChart, Bar, XAxis, YAxis } from 'recharts';\nconst CustomizedAxisTick = (...args)=>{\n  const {  x, y, stroke, payload } = args[0];\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">\n        {payload.value}\n      </text>\n    </g>\n  );\n};\nconst renderCustomBarLabel = ({ payload, x, y, width, height, value }) => {\n  return <text x={x + width / 2} y={y} fill=\"#666\" textAnchor=\"middle\" dy={-6}>{`value: ${value}`}</text>;\n};\nconst renderBarChart = (\n  <BarChart width={600} height={300} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 20 }}>\n    <XAxis dataKey=\"name\" tick={<CustomizedAxisTick/>}\n    <YAxis />\n    <Bar dataKey=\"uv\" barSize={30} fill=\"#8884d8\" label={renderCustomBarLabel}/>\n  </BarChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Including Recharts via UMD from unpkg\nDESCRIPTION: This HTML snippet demonstrates how to include Recharts and its dependencies (React, ReactDOM, and react-is) in a web page using the UMD (Universal Module Definition) builds hosted on unpkg.com. This allows Recharts to be used directly in HTML without a module bundler. The library is then available as `window.Recharts`.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\"></script>\n<script src=\"https://unpkg.com/react-dom/umd/react-dom.production.min.js\"></script>\n<script src=\"https://unpkg.com/react-is/umd/react-is.production.min.js\"></script>\n<script src=\"https://unpkg.com/recharts/umd/Recharts.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Recharts using NPM\nDESCRIPTION: This command installs the latest stable version of Recharts using NPM, the Node Package Manager. It is the recommended installation method for single-page applications and pairs well with module bundlers like Webpack.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install recharts\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for Recharts LineChart\nDESCRIPTION: This code defines a sample data array that will be used as input for the Recharts LineChart component.  The data consists of an array of objects, each representing a data point with properties like 'name', 'uv', 'pv', and 'amt'.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst data = [{name: 'Page A', uv: 400, pv: 2400, amt: 2400}, ...];\n```\n\n----------------------------------------\n\nTITLE: Including Recharts via UMD\nDESCRIPTION: These script tags include Recharts via the UMD (Universal Module Definition) build hosted on unpkg.com.  It requires React, ReactDOM, and prop-types to be included before the Recharts script.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Installation.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\"></script>\n<script src=\"https://unpkg.com/react-dom/umd/react-dom.production.min.js\"></script>\n<script src=\"https://unpkg.com/prop-types/prop-types.min.js\"></script>\n<script src=\"https://unpkg.com/recharts/umd/Recharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Get Intro of Page Function\nDESCRIPTION: This JavaScript function, `getIntroOfPage`, returns a description based on the input label. It uses a series of if statements to match the label and return the corresponding text.  It's used to customize tooltip content in the examples.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getIntroOfPage = (label) =>{\nif (label === 'Page A') {\nreturn 'Page A is about mens clothing';\n} if (label === 'Page B') {\nreturn 'Page B is about womens dress';\n} if (label === 'Page C') {\nreturn 'Page C is about womens bag';\n} if (label === 'Page D') {\nreturn 'Page D is about household goods';\n} if (label === 'Page E') {\nreturn 'Page E is about food';\n} if (label === 'Page F') {\nreturn 'Page F is about baby food';\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Recharts\nDESCRIPTION: Clones the Recharts repository from GitHub, navigates to the project directory, installs dependencies using npm, and builds the library.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/DEVELOPING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone https://github.com/recharts/recharts.git\n$ cd recharts\n$ npm install\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Customizing X-Axis Tick in Recharts LineChart\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the X-axis ticks in a Recharts LineChart using a custom axis tick render function. The `CustomizedAxisTick` component is a custom React component that renders the X-axis tick labels with a rotation applied.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { PureComponent } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nconst CustomizedAxisTick = (...args)=>{\n  const {  x, y, stroke, payload } = args[0];\n  return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">\n          {payload.value}\n        </text>\n      </g>\n    );\n};\n\nconst renderLineChart = (\n<LineChart width={600} height={300} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n  <XAxis dataKey=\"name\" tick={<CustomizedAxisTick />} />\n  <YAxis />\n  <Tooltip />\n</LineChart>\n);\n```\n\n----------------------------------------\n\nTITLE: Linting Code\nDESCRIPTION: This command runs the linter to check for code style issues in the Recharts project. It helps maintain a consistent coding style throughout the codebase.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Recharts Unit Tests\nDESCRIPTION: Executes the unit tests for the Recharts library using the npm test command.  This verifies the functionality of the core components.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/DEVELOPING.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: Running Recharts Linter and Type Checker\nDESCRIPTION: Executes the linter and type checker for the Recharts library using npm. This helps maintain code quality and prevent type-related errors.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/DEVELOPING.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run lint\n$ npm run check-types\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command executes the test suite for the Recharts project. It ensures that existing functionality remains intact and new changes don't introduce regressions.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Get Path Function\nDESCRIPTION: This JavaScript function, `getPath`, generates an SVG path string. It takes x, y, width, and height as arguments and returns a string defining a cubic Bézier curve. This path is used to create a custom bar shape.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Customise.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getPath = (x, y, width, height) => (\n  `M${x},${y + height}\n   C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\n   C${x + width / 2},${y + height / 3} ${x + 2 * width / 3},${y + height} ${x + width}, ${y + height}\n   Z`\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Code Styling\nDESCRIPTION: This command runs the linter to check the code styling. It is useful to identify and fix styling issues before submitting a pull request.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Example\nDESCRIPTION: This snippet shows an example of a TypeScript type definition for AnimationTiming, including a JSDoc comment. The JSDoc comment should be used to auto-generate descriptions for args in the MDX file in storybook.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** The type of easing function to use for animations */\nexport type AnimationTiming = 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';\n```\n\n----------------------------------------\n\nTITLE: Running Mutation Tests\nDESCRIPTION: This command executes mutation tests using Stryker.  It requires updating the list of checked files in `./stryker.config.mjs` beforehand. The command analyzes how well the tests catch injected mutations.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-mutation\n```\n\n----------------------------------------\n\nTITLE: Running Recharts Mutation Tests\nDESCRIPTION: Executes mutation tests for the Recharts library using the npm test-mutation command. Mutation tests help ensure the robustness of the tests themselves.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/DEVELOPING.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run test-mutation\n```\n\n----------------------------------------\n\nTITLE: MDX Component Story Import\nDESCRIPTION: This MDX snippet demonstrates how to import a component's stories and display its props table using the <ArgTypes> component. This is the initial content of the MDX file when documenting a new component in storybook.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/README.md#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\nimport * as ComponentStories from './Component.stories';\n<ArgTypes of={ComponentStories} sort={'requiredFirst'}/>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Export\nDESCRIPTION: This code snippet shows how to export CustomizedAxisTick so it can be used within another component or chart.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/GettingStarted.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const CustomizedAxisTick = (...args)=>{\n  const {  x, y, stroke, payload } = args[0];\n  return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">\n          {payload.value}\n        </text>\n      </g>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Recharts Storybook\nDESCRIPTION: Starts the Storybook environment for Recharts, allowing developers to browse components and examples. Access the environment at http://localhost:6006.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/DEVELOPING.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run[-script] storybook\n```\n\n----------------------------------------\n\nTITLE: Setting up Recharts Dev Build\nDESCRIPTION: These commands clone the Recharts repository from GitHub, navigate to the project directory, install the necessary dependencies, and build the project. This is used for local development and contribution to Recharts.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/storybook/stories/Installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/recharts/recharts.git\ncd recharts\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for D3 Modules in Recharts\nDESCRIPTION: This JavaScript snippet provides a configuration for Jest to handle D3 modules within a Recharts project. It defines module name mappers and transform ignore patterns to ensure proper testing of D3-related code. This is necessary because D3 modules are often distributed as ES6 modules, which Jest needs to transpile.\nSOURCE: https://github.com/recharts/recharts/blob/3.x/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require('path');\n// took from d3/package.json\nconst d3Pkgs = [\n\t'd3',\n\t'd3-array',\n\t'd3-axis',\n\t'd3-brush',\n\t'd3-chord',\n\t'd3-color',\n\t'd3-contour',\n\t'd3-delaunay',\n\t'd3-dispatch',\n\t'd3-drag',\n\t'd3-dsv',\n\t'd3-ease',\n\t'd3-fetch',\n\t'd3-force',\n\t'd3-format',\n\t'd3-geo',\n\t'd3-hierarchy',\n\t'd3-interpolate',\n\t'd3-path',\n\t'd3-polygon',\n\t'd3-quadtree',\n\t'd3-random',\n\t'd3-scale',\n\t'd3-scale-chromatic',\n\t'd3-selection',\n\t'd3-shape',\n\t'd3-time',\n\t'd3-time-format',\n\t'd3-timer',\n\t'd3-transition',\n\t'd3-zoom',\n];\n\n// option 1 map module to an bundled version of the package which is es5\nconst moduleNameMapper = d3Pkgs.reduce((acc, pkg) => {\n\tacc[`^${pkg}$`] = path.join(require.resolve(pkg), `../../dist/${pkg}.min.js`);\n\treturn acc;\n}, {});\n\nmodule.exports = {\n\tmoduleNameMapper: {\n\t\t// option 1\n\t\t// ...moduleNameMapper\n\t},\n\ttransform: {\n\t\t// match mjs js jsx ts tsx\n\t\t'^.+\\.m?[jt]sx?$': 'babel-jest',\n\t},\n\t// stop ignore node_modules transform since d3 and others start to put es6 as main of packages\n\ttransformIgnorePatterns: [\n\t\t// option 2, stop ignore transform on es6 packages\n\t\t`/node_modules/(?!${d3Pkgs.join('|')}|internmap|d3-delaunay|delaunator|robust-predicates)`,\n\t\t// option 3, stop ignore transform on all node_modules\n\t\t// `/node_modules/(?!.*)`,\n\t],\n};\n```"
  }
]