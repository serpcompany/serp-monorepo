[
  {
    "owner": "dcloudio",
    "repo": "uni-app",
    "content": "TITLE: Complete Example of Image Preview Implementation in Vue Component\nDESCRIPTION: A comprehensive Vue component demonstrating the image preview plugin functionality. Features include toggling indicator styles, loop functionality, and adding images through the device gallery. Imports the previewImage function from uni-previewImage.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/uni-ext-api/uni_modules/uni-previewImage/readme.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n\t<!-- #ifdef APP -->\n\t<scroll-view style=\"flex: 1\">\n\t<!-- #endif -->\n\t\t<view style=\"padding-left: 8px; padding-right: 8px\">\n\t\t\t<view>\n\t\t\t\t<text class=\"text-desc\">图片指示器样式</text>\n\t\t\t\t<radio-group class=\"cell-ct\" style=\"background-color: white\" @change=\"onIndicatorChanged\">\n\t\t\t\t\t<view class=\"indicator-it\" v-for=\"(item, index) in indicator\" :key=\"item.value\">\n\t\t\t\t\t\t<radio :disabled=\"isWeb\" :checked=\"index == 0\" :value=\"item.value\">{{item.name}}</radio>\n\t\t\t\t\t</view>\n\t\t\t\t</radio-group>\n\t\t\t</view>\n\t\t\t<view>\n\t\t\t\t<checkbox-group @change=\"onCheckboxChange\" style=\"margin-top: 16px; margin-bottom: 16px; margin-left: 8px\">\n\t\t\t\t\t<checkbox :disabled=\"isWeb\" :checked=\"isLoop\" style=\"margin-right: 15px\">循环播放</checkbox>\n\t\t\t\t</checkbox-group>\n\t\t\t</view>\n\t\t\t<view style=\"background-color: white\">\n\t\t\t\t<text class=\"text-desc\">点击图片开始预览</text>\n\t\t\t\t<view class=\"cell-ct\" style=\"margin: 8px;\">\n\t\t\t\t\t<view class=\"cell cell-choose-image\" v-for=\"(image, index) in imageList\" :key=\"index\">\n\t\t\t\t\t\t<image style=\"width: 100px; height: 100px\" mode=\"aspectFit\" :src=\"image\" @click=\"pImage(index)\">\n\t\t\t\t\t\t</image>\n\t\t\t\t\t</view>\n\t\t\t\t\t<image class=\"cell cell-choose-image\" src=\"/static/plus.png\" @click=\"chooseImage\">\n\t\t\t\t\t\t<view></view>\n\t\t\t\t\t</image>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t<!-- #ifdef APP -->\n\t</scroll-view>\n\t<!-- #endif -->\n</template>\n\n<script>\n\ttype Indicator = \"number\" | \"default\" | \"none\"\n\ttype ItemType = {\n\t\tvalue : Indicator,\n\t\tname : string\n\t}\n\timport { previewImage } from '@/uni_modules/uni-previewImage';\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\timageList: [\"/static/logo.png\",\n\t\t\t\t\t\"https://wx2.sinaimg.cn/mw690/00839aAegy1htk3px3c2pj30u00zlwrg.jpg\",\n\t\t\t\t\t\"https://pic.rmb.bdstatic.com/bjh/news/a006b0c2e8f43f3d062f7371f99878ac.jpeg\",\n\t\t\t\t\t\"https://q3.itc.cn/q_70/images03/20241015/67ad77dab850427ba6668726c24b2407.png\"],\n\t\t\t\tindicator: [{\n\t\t\t\t\tvalue: \"default\",\n\t\t\t\t\tname: \"圆点\"\n\t\t\t\t}, {\n\t\t\t\t\tvalue: \"number\",\n\t\t\t\t\tname: \"数字\"\n\t\t\t\t}, {\n\t\t\t\t\tvalue: \"none\",\n\t\t\t\t\tname: \"不显示\"\n\t\t\t\t}] as ItemType[],\n\t\t\t\tcurrentIndicator: \"default\" as Indicator,\n\t\t\t\t// #ifdef WEB\n\t\t\t\tisWeb: false,\n\t\t\t\t// #endif\n\t\t\t\t// #ifndef WEB\n\t\t\t\tisWeb: false,\n\t\t\t\t// #endif\n\t\t\t\tisLoop: true\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tpImage(index : number) {\n\t\t\t\tpreviewImage({\n\t\t\t\t\turls: this.imageList,\n\t\t\t\t\tcurrent: index,\n\t\t\t\t\tindicator: this.currentIndicator,\n\t\t\t\t\tloop: this.isLoop,\n\t\t\t\t\tlongPressActions: {\n\t\t\t\t\t\titemList: [\"1\", \"2\", \"3\", \"4\"],\n\t\t\t\t\t\titemColor: \"#cc00cc\",\n\t\t\t\t\t\tcomplete(e){\n\t\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t} as LongPressActionsOptions,\n\t\t\t\t\tcomplete(e){\n\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\t\t\tchooseImage() {\n\t\t\t\tuni.chooseImage({\n\t\t\t\t\tsourceType: ['album'],\n\t\t\t\t\tsuccess: (e) => {\n\t\t\t\t\t\tthis.imageList = this.imageList.concat(e.tempFilePaths)\n\t\t\t\t\t},\n\t\t\t\t\tfail(_) {\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\t\t\tonIndicatorChanged(e : UniRadioGroupChangeEvent) {\n\t\t\t\tthis.currentIndicator = e.detail.value as Indicator\n\t\t\t},\n\t\t\tonCheckboxChange(_ : UniCheckboxGroupChangeEvent) {\n\t\t\t\tthis.isLoop = !this.isLoop\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style>\n\t.text-desc {\n\t\tmargin-top: 16px;\n\t\tmargin-left: 8px;\n\t\tmargin-bottom: 16px;\n\t\tfont-weight: bold;\n\t}\n\n\t.cell-ct {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tflex-direction: row;\n\t}\n\n\t.cell {\n\t\tmargin-left: 3px;\n\t\tmargin-right: 3px;\n\t\twidth: 100px;\n\t\theight: 100px;\n\t}\n\n\t.cell-choose-image {\n\t\tborder-width: 1px;\n\t\tborder-style: solid;\n\t\tborder-color: lightgray;\n\t}\n\n\t.indicator-it {\n\t\tmargin: 8px;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Source Code with uni-preprocess in TypeScript\nDESCRIPTION: This snippet imports and uses the 'preprocess' function from '@dcloudio/uni-preprocess' to parse and transform source code containing conditional compilation directives such as // #ifdef and // #endif. It requires the '@dcloudio/uni-preprocess' package and TypeScript support. The snippet configures the preprocess call with 'type' set to 'js' for JavaScript-style comment recognition, a context object defining which conditions (e.g., B) are true, and detailed source map options to generate high-resolution mappings without embedding original source contents. The input is a multiline string of source code with conditional blocks, and the output includes the processed code and a source map object suitable for debugging and tooling.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-preprocess/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { preprocess } from '@dcloudio/uni-preprocess'\\n\\nconst { code, map } = preprocess(\\n  `a\\n  // #ifdef B\\n  b\\n  // #endif\\n  // #ifdef C\\n  c\\n  // #endif\\n  // #ifndef D\\n  d\\n  // #endif\\n  e\\n  `,\\n  {\\n    /**\\n     * 可选值 js | html | auto\\n     * 如果是处理 js、ts、uts、css、scss、less 等文件(识别的是单行或多行注释`// #ifdef `和`\\/* #ifdef *\\/`)，可以传 js\\n     * 如果是处理 html 等模板文件（识别的是<!-- #ifdef -->）\\uff0c可以传 html\\n     * 如果是处理 vue、nvue、uvue 文件（需要同时识别上述两种类型），可以传 auto\\n     **/\\n    type: 'js',\\n    context: { B: true },\\n    sourceMap: {\\n      /**\\n       * Whether the mapping should be high-resolution.\\n       * Hi-res mappings map every single character, meaning (for example) your devtools will always\\n       * be able to pinpoint the exact location of function calls and so on.\\n       * With lo-res mappings, devtools may only be able to identify the correct\\n       * line - but they're quicker to generate and less bulky.\\n       * You can also set \\\"boundary\\\" to generate a semi-hi-res mappings segmented per word boundary\\n       * instead of per character, suitable for string semantics that are separated by words.\\n       * If sourcemap locations have been specified with s.addSourceMapLocation(), they will be used here.\\n       */\\n      hires: true,\\n      /**\\n       * The filename where you plan to write the sourcemap.\\n       */\\n      file: 'test',\\n      /**\\n       * The filename of the file containing the original source.\\n       */\\n      source: 'test.uts',\\n      /**\\n       * Whether to include the original content in the map's sourcesContent array.\\n       */\\n      includeContent: false,\\n    },\\n  }\\n)\\nconsole.log('code:\\n', code)\\nconsole.log('sourceMap:\\n', map)\n```\n\n----------------------------------------\n\nTITLE: Configuring @dcloudio/vite-plugin-uni in vite.config.ts\nDESCRIPTION: This TypeScript example demonstrates how to integrate the `@dcloudio/vite-plugin-uni` plugin into a Vite configuration file (`vite.config.ts`). It imports the `defineConfig` function from Vite and the `uni` plugin factory, then includes the executed `uni()` plugin within the `plugins` array of the exported configuration object.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/vite-plugin-uni/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport uni from \"@dcloudio/vite-plugin-uni\";\n\nexport default defineConfig({\n  plugins: [uni()],\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript Error Stacktrace with uniStracktraceyPreset Using JavaScript\nDESCRIPTION: Demonstrates usage of the stacktracey function with the uniStracktraceyPreset configuration to parse and resolve a JavaScript error stack trace string. The preset requires specifying an absolute 'base' path to the local sourcemap directory and an optional 'sourceRoot'. The method returns a Promise resolving to the processed stack trace mapped to original source locations.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstacktracey(uniErrorMsg, {\n  preset: uniStracktraceyPreset({\n    base: path.resolve(__dirname, './__UNI__APPID__/1.0.0/.sourcemap/h5/'),\n    sourceRoot: '',\n  }),\n}).then((stacktrace) => {\n  // stacktrace 即为解析 sourcemap 后的错误信息\n  console.log('stacktrace :>> ', stacktrace)\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing UTS Kotlin Error Stacktrace with utsStracktraceyPreset Using JavaScript\nDESCRIPTION: Shows how to use stacktracey with the utsStracktraceyPreset to parse UTS plugin Kotlin error stack traces. The preset requires a 'base' directory where sourcemaps reside and a 'sourceRoot' that corresponds to the subpath prefix to be replaced in the error stack file paths. The function returns a Promise resolving to a mapped and parsed stack trace object.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nstacktracey(utsErrorMsg, {\n  preset: utsStracktraceyPreset({\n    base: path.resolve(\n      __dirname,\n      './nativeplugins-sourceMap/DCloud-UTSPlugin/'\n    ),\n    sourceRoot: 'DCloud-UTSPlugin/android/src/',\n  }),\n}).then((stacktrace) => {\n  // stacktrace 即为解析 sourcemap 后的错误信息\n  console.log('stacktrace :>> ', stacktrace)\n})\n```\n\n----------------------------------------\n\nTITLE: Consuming a Source Map Example\nDESCRIPTION: This example demonstrates how to consume a source map using the `SourceMapConsumer` class. It shows how to initialize the consumer with a raw source map, query for original positions, generated positions, and iterate through mappings.  It also shows how to use `SourceMapConsumer.with` to ensure proper resource cleanup.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rawSourceMap = {\n  version: 3,\n  file: 'min.js',\n  names: ['bar', 'baz', 'n'],\n  sources: ['one.js', 'two.js'],\n  sourceRoot: 'http://example.com/www/js/',\n  mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'\n};\n\nconst whatever = await SourceMapConsumer.with(rawSourceMap, null, consumer => {\n\n  console.log(consumer.sources);\n  // [ 'http://example.com/www/js/one.js',\n  //   'http://example.com/www/js/two.js' ]\n\n  console.log(consumer.originalPositionFor({\n    line: 2,\n    column: 28\n  }));\n  // { source: 'http://example.com/www/js/two.js',\n  //   line: 2,\n  //   column: 10,\n  //   name: 'n' }\n\n  console.log(consumer.generatedPositionFor({\n    source: 'http://example.com/www/js/two.js',\n    line: 2,\n    column: 10\n  }));\n  // { line: 2, column: 28 }\n\n  consumer.eachMapping(function (m) {\n    // ...\n  });\n\n  return computeWhatever();\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Generated Position to Original Source with originalPositionFor in JavaScript\nDESCRIPTION: This snippet shows how to retrieve the original source position given a generated position, using 'originalPositionFor'. It highlights handling of unknown positions with nulls and setting bias for closest matching.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.originalPositionFor({ line: 2, column: 10 })\n// { source: 'foo.coffee',\n//   line: 2,\n//   column: 2,\n//   name: null }\n\nconsumer.originalPositionFor({ line: 99999999999999999, column: 999999999999999 })\n// { source: null,\n//   line: null,\n//   column: null,\n//   name: null }\n```\n\n----------------------------------------\n\nTITLE: Mapping Original Source Position to Generated with generatedPositionFor in JavaScript\nDESCRIPTION: This snippet demonstrates how to find the generated source position corresponding to an original source location using 'generatedPositionFor'. It enables reverse-mapping from original code to generated code positions.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.generatedPositionFor({ source: \"example.js\", line: 2, column: 10 })\n// { line: 1,\n//   column: 56 }\n```\n\n----------------------------------------\n\nTITLE: Generating Source Map with SourceNode (High Level API)\nDESCRIPTION: This code demonstrates how to generate a source map using the `SourceNode` class, a high-level API for creating source maps.  It includes a `compile` function that processes an Abstract Syntax Tree (AST) and generates a `SourceNode` based on the AST structure.  The output includes both the generated code and the corresponding source map.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction compile(ast) {\n  switch (ast.type) {\n  case 'BinaryExpression':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      [compile(ast.left), \" + \", compile(ast.right)]\n    );\n  case 'Literal':\n    return new SourceNode(\n      ast.location.line,\n      ast.location.column,\n      ast.location.source,\n      String(ast.value)\n    );\n  // ...\n  default:\n    throw new Error(\"Bad AST\");\n  }\n}\n\nvar ast = parse(\"40 + 2\", \"add.js\");\nconsole.log(compile(ast).toStringWithSourceMap({\n  file: 'add.js'\n}));\n// { code: '40 + 2',\n//   map: [object SourceMapGenerator] }\n```\n\n----------------------------------------\n\nTITLE: Generating Source Map with SourceMapGenerator (Low Level API)\nDESCRIPTION: This snippet illustrates how to generate a source map using the `SourceMapGenerator` class, which offers a low-level API for creating source maps.  It demonstrates how to add individual mappings between the generated and original code, specifying line numbers, column numbers, source file, and identifier names. The final source map is then output as a JSON string.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar map = new SourceMapGenerator({\n  file: \"source-mapped.js\"\n});\n\nmap.addMapping({\n  generated: {\n    line: 10,\n    column: 35\n  },\n  source: \"foo.js\",\n  original: {\n    line: 33,\n    column: 2\n  },\n  name: \"christopher\"\n});\n\nconsole.log(map.toString());\n// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'\n```\n\n----------------------------------------\n\nTITLE: Extended HTML Preprocessing Syntax with Conditional and Exec Tags (HTML)\nDESCRIPTION: This snippet shows advanced HTML preprocessing using conditional directives with string comparisons, variable echoing, and execution of functions via '@exec'. It demonstrates how to conditionally include scripts or content blocks based on environment variables and embed dynamic values such as commit hashes or CDN URLs derived by executing context functions at preprocess time.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- @if NODE_ENV!='production' -->\n    <header>You're on dev!</header>\n    <!-- @endif -->\n\n    <!-- @if NODE_ENV='production' -->\n    <script src=\"some/production/javascript.js\"></script>\n    <!-- @endif -->\n\n    <script>\n    var fingerprint = '<!-- @echo COMMIT_HASH -->' || 'DEFAULT';\n    </script>\n\n    <script src=\"<!-- @exec static_path('another/production/javascript.js') -->\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Preprocessing HTML Files Using Directive Syntax (HTML)\nDESCRIPTION: This snippet exemplifies how to embed preprocess directives in HTML files to conditionally include or exclude code based on environment variables (e.g., NODE_ENV) or defined flags (e.g., DEBUG). It shows directives like '@if', '@ifdef', '@endif', and '@include' to manage content such as script tags, debug headers, and file inclusions. These directives are processed and replaced prior to deployment to customize the final HTML output.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Your App</title>\n\n  <!-- @if NODE_ENV='production' -->\n  <script src=\"some/production/lib/like/analytics.js\"></script>\n  <!-- @endif -->\n\n</head>\n<body>\n  <!-- @ifdef DEBUG -->\n  <h1>Debugging mode - <!-- @echo RELEASE_TAG --> </h1>\n  <!-- @endif -->\n  <p>\n  <!-- @include welcome_message.txt -->\n  </p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: preprocess() API Usage Examples in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the preprocess() function from the 'preprocess' module. It shows preprocessing strings with embedded directives, supplying a variable context, specifying the source type, and usage of helper functions to preprocess and write files asynchronously and synchronously. It requires Node.js and the 'preprocess' npm package.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nvar pp = require('preprocess');\n\nvar text = 'Hi, I am <!-- @echo USERNAME -->';\n\npp.preprocess(text);\n// -> Hi, I am jsoverson\n\npp.preprocess(text, {USERNAME : \"Bob\"});\n// -> Hi, I am Bob\n\n// specify the format to use for the directives as the third parameter\npp.preprocess(text, {USERNAME : \"Bob\"}, {type: 'html'});\n// -> Hi, I am Bob\n\n// Preprocess files asynchronously\npp.preprocessFile(src, dest, context, callback, options);\n\n// Preprocess files synchronously\npp.preprocessFileSync(src, dest, context, options);\n```\n\n----------------------------------------\n\nTITLE: Embedding Preprocessing Directives in JavaScript Source (JavaScript)\nDESCRIPTION: This snippet demonstrates JavaScript source containing preprocess directives within comments and string literals. It shows conditional debugging code inclusion using '@ifdef' and variable substitution with '@echo'. These directives enable dynamic code generation or removal dependent on the environment or context provided during preprocessing.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar configValue = '/* @echo FOO */' || 'default value';\n\n// @ifdef DEBUG\nsomeDebuggingCall()\n// @endif\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Block Comments for Conditional Compilation and Exclusion (JavaScript)\nDESCRIPTION: This snippet demonstrates the preprocess directives embedded in JavaScript block comments that conditionally include or exclude code blocks during preprocessing. It supports hidden blocks using special comment endings and variable substitution, allowing dynamic builds tailored for production or development environments.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnormalFunction();\n//@exclude\nsuperExpensiveDebugFunction()\n//@endexclude\n\nanotherFunction('/* @echo USERNAME */');\n```\n\n----------------------------------------\n\nTITLE: CSS Conditional Block Inclusion Using Preprocess Directives (CSS)\nDESCRIPTION: This CSS snippet illustrates the usage of preprocess conditional directives within CSS comment blocks to apply styles only for specific environments. It supports single line comment directives and enables environment-tailored styling by including or removing rules at build time.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbody {\n/* @if NODE_ENV=='development' */\n  background-color: red;\n/* @endif */\n\n}\n// @include util.css\n```\n\n----------------------------------------\n\nTITLE: Using SourceMapConsumer.with for Safe Resource Management in JavaScript\nDESCRIPTION: This snippet demonstrates the use of 'SourceMapConsumer.with' for constructing a source map consumer, executing an asynchronous operation with it, and ensuring proper cleanup via automatic destruction after operation completes. It simplifies resource management by avoiding explicit calls to 'destroy'.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst xSquared = await SourceMapConsumer.with(\n  myRawSourceMap,\n  null,\n  async function (consumer) {\n    // Use `consumer` inside here and don't worry about remembering\n    // to call `destroy`.\n\n    const x = await whatever(consumer);\n    return x * x;\n  }\n);\n\n// You may not use that `consumer` anymore out here; it has\n// been destroyed. But you can use `xSquared`.\nconsole.log(xSquared);\n```\n\n----------------------------------------\n\nTITLE: Using previewImage API for Image Preview in uni-app x\nDESCRIPTION: Basic function call to preview images. Requires the uni-previewImage module and accepts various options including the images to display, current index, indicator style, and loop settings.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/uni-ext-api/uni_modules/uni-previewImage/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npreviewImage(options: PreviewImageOptions)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Generated Positions for an Original Source Location in JavaScript\nDESCRIPTION: This snippet shows how to obtain all generated positions for a specific original source line and column using 'allGeneratedPositionsFor', returning an array of mappings with detailed line and column info.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView Back Navigation in React Native with UniApp\nDESCRIPTION: This snippet demonstrates how to implement back button functionality in a webview component. It includes registering plugin methods and managing navigation states.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/playground/uni_modules/src/uni_modules/test-com1/changelog.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction registerWebviewPlugin(plugin) {\n}\n\nmodule.exports = {\n  goWeb: function (options) {\n    var webviewOptions = {\n      url: options.url\n    }\n    var gwebview = plus.webview.create(\n      webviewOptions.url,\n      'gwebview',\n      {\n        titleNView: {\n          backgroundColor: '#f7f7f7',\n          titleText: options.title || '',\n          titleColor: '#000000',\n          buttons: [\n            {\n              float: 'left',\n              fontSrc: '/static/uni.ttf',\n              text: '\\ue583',\n              fontSize: '22px',\n              onclick: function () {\n                // 返回逻辑\n                if (gwebview.canBack()) {\n                  gwebview.back()\n                } else {\n                  gwebview.close()\n                }\n              }\n            }\n          ]\n        }\n      }\n    )\n    gwebview.show('slide-in-right')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Vue SFC Facade Module (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates the structure of the facade module generated by the `@vue/compiler-sfc` package during the build process. It shows how the compiler constructs a module that imports the main script block, the compiled template render function, and styles from the same Vue Single File Component using virtual module paths differentiated by query strings (e.g., `?vue&type=script`). The snippet demonstrates how the imported render function is attached to the script's default export and how additional metadata like `__file` and `__scopeId` are added for debugging and scoping purposes.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/@vue/compiler-sfc/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// main script\nimport script from '/project/foo.vue?vue&type=script'\n// template compiled to render function\nimport { render } from '/project/foo.vue?vue&type=template&id=xxxxxx'\n// css\nimport '/project/foo.vue?vue&type=style&index=0&id=xxxxxx'\n\n// attach render function to script\nscript.render = render\n\n// attach additional metadata\n// some of these should be dev only\nscript.__file = 'example.vue'\nscript.__scopeId = 'xxxxxx'\n\n// additional tooling-specific HMR handling code\n// using __VUE_HMR_API__ global\n\nexport default script\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing SourceNodes in JavaScript\nDESCRIPTION: This class represents source code fragments associated with source map information. It provides constructors for creating nodes with original source position, filename, optional name, and content, as well as methods for adding, prepending chunks, setting source content, walking the node tree, joining nodes, replacing patterns, and generating string output with or without source maps.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew SourceNode([line, column, source[, chunk[, name]]])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.fromStringWithSourceMap(code, sourceMapConsumer[, relativePath])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.add(chunk)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.prepend(chunk)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.setSourceContent(sourceFile, sourceContent)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.walk(fn)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.walkSourceContents(fn)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.join(sep)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.replaceRight(pattern, replacement)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.toString()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceNode.prototype.toStringWithSourceMap([startOfSourceMap])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original Source Content with sourceContentFor in JavaScript\nDESCRIPTION: This snippet demonstrates using 'sourceContentFor' to obtain the original source code, handling missing sources with errors or optional null return, crucial for source code reconstruction.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.sourceContentFor(\"my-cool-lib.clj\")\n// \"...\"\n\nconsumer.sourceContentFor(\"this is not in the source map\");\n// Error: \"this is not in the source map\" is not in the source map\n\nconsumer.sourceContentFor(\"this is not in the source map\", true);\n// null\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Mappings with eachMapping in JavaScript\nDESCRIPTION: This snippet details how to iterate over all source-to-generated position mappings using 'eachMapping', enabling comprehensive traversal for analysis or transformation tasks.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.eachMapping(function (m) { console.log(m); })\n// ...\n// { source: 'illmatic.js',\n//   generatedLine: 1,\n//   generatedColumn: 0,\n//   originalLine: 1,\n//   originalColumn: 0,\n//   name: null }\n// { source: 'illmatic.js',\n//   generatedLine: 2,\n//   generatedColumn: 0,\n//   originalLine: 2,\n//   originalColumn: 0,\n//   name: null }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating SourceMapGenerator from Existing SourceMapConsumer in JavaScript\nDESCRIPTION: This snippet demonstrates the creation of a 'SourceMapGenerator' from an existing 'SourceMapConsumer', facilitating modifications or extensions to an existing source map.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar generator = sourceMap.SourceMapGenerator.fromSourceMap(consumer);\n```\n\n----------------------------------------\n\nTITLE: Excluding HTML Blocks Via @exclude Directive (HTML)\nDESCRIPTION: This snippet illustrates the use of the '@exclude' and '@endexclude' directives in HTML to remove sections of the file during preprocessing. Useful for excluding developer-only sections or debug information from production builds.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- @exclude -->\n    <header>You're on dev!</header>\n    <!-- @endexclude -->\n</body>\n```\n\n----------------------------------------\n\nTITLE: Applying a SourceMap to a SourceMap in JavaScript\nDESCRIPTION: This method applies an existing source map to another source map, adjusting mappings for a specific source file. Dependencies include a SourceMapConsumer instance. The method handles optional source file and source map path parameters, updating mappings accordingly and ensuring correct source path resolution.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nSourceMapGenerator.prototype.applySourceMap(sourceMapConsumer[, sourceFile[, sourceMapPath]])\n```\n\n----------------------------------------\n\nTITLE: Adding a Mapping Entry to SourceMapGenerator in JavaScript\nDESCRIPTION: This snippet illustrates adding a single mapping between original and generated code positions, including source filename and optional name, a key step in source map creation.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.addMapping({\n  source: \"module-one.scm\",\n  original: { line: 128, column: 0 },\n  generated: { line: 3, column: 456 }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting a SourceMapGenerator to String JSON in JavaScript\nDESCRIPTION: This method serializes the current source map into a JSON string, including version, sources, mappings, and other metadata. It is useful for exporting, debugging, or storing generated source maps.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.toString()\n```\n\n----------------------------------------\n\nTITLE: Creating a SourceMapGenerator with options in JavaScript\nDESCRIPTION: This snippet shows how to instantiate a 'SourceMapGenerator' with optional configuration such as target filename, source root, and validation setting, enabling incremental source map construction.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar generator = new sourceMap.SourceMapGenerator({\n  file: \"my-generated-javascript-file.js\",\n  sourceRoot: \"http://example.com/app/js/\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Original Source Content in SourceMapGenerator in JavaScript\nDESCRIPTION: This snippet sets the original source content for a specific source file within the source map, which is critical for source code debugging and validation.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ngenerator.setSourceContent(\"module-one.scm\",\n                           fs.readFileSync(\"path/to/module-one.scm\"))\n```\n\n----------------------------------------\n\nTITLE: Computing Last Column for Mappings Using computeColumnSpans in JavaScript\nDESCRIPTION: This snippet illustrates the usage of 'computeColumnSpans' to calculate and assign the last column number for each generated mapping, turning sparse position data into contiguous spans, which simplifies source code analysis.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Before:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1 },\n//   { line: 2,\n//     column: 10 },\n//   { line: 2,\n//     column: 20 } ]\n\nconsumer.computeColumnSpans();\n\n// After:\nconsumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" })\n// [ { line: 2,\n//     column: 1,\n//     lastColumn: 9 },\n//   { line: 2,\n//     column: 10,\n//     lastColumn: 19 },\n//   { line: 2,\n//     column: 20,\n//     lastColumn: Infinity } ]\n```\n\n----------------------------------------\n\nTITLE: PreviewImageOptions Type Definition for Image Preview\nDESCRIPTION: TypeScript interface defining all available options for the previewImage function, including current image, URLs array, indicator style, loop functionality, and callback functions.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/uni-ext-api/uni_modules/uni-previewImage/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PreviewImageOptions = {\n\t/**\n\t * current 为当前显示图片的链接/索引值，不填或填写的值无效则为 urls 的第一张。\n\t */\n\tcurrent ?: any | null,\n\t/**\n\t * 需要预览的图片链接列表\n\t */\n\turls : Array<string.ImageURIString>,\n\t/**\n\t * 图片指示器样式\n\t */\n\tindicator ?:\n\t/**\n\t * 底部圆点指示器\n\t */\n\t'default' |\n\t/**\n\t * 顶部数字指示器\n\t */\n\t'number' |\n\t/**\n\t * 不显示指示器\n\t */\n\t'none' |\n\tnull,\n\t/**\n\t * 是否可循环预览\n\t */\n\tloop ?: boolean | null,\n\t/**\n\t * 长按图片显示操作菜单，如不填默认为保存相册。\n\t */\n\tlongPressActions ?: LongPressActionsOptions | null,\n\t/**\n\t * 接口调用成功的回调函数\n\t */\n\tsuccess ?: (PreviewImageSuccessCallback) | null,\n\t/**\n\t * 接口调用失败的回调函数\n\t */\n\tfail ?: (PreviewImageFailCallback) | null,\n\t/**\n\t * 接口调用结束的回调函数（调用成功、失败都会执行）\n\t */\n\tcomplete ?: (PreviewImageCompleteCallback) | null\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Complete Source Content Availability with hasContentsOfAllSources in JavaScript\nDESCRIPTION: This snippet illustrates querying whether the source consumer has embedded content for all sources via 'hasContentsOfAllSources', which influences subsequent source content access methods.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...\nif (consumer.hasContentsOfAllSources()) {\n  consumerReadyCallback(consumer);\n} else {\n  fetchSources(consumer, consumerReadyCallback);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: LongPressActionsOptions Type Definition for Image Preview\nDESCRIPTION: TypeScript interface defining options for customizing long-press actions in the image preview, including item list, color settings, and callback functions.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/uni-ext-api/uni_modules/uni-previewImage/readme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LongPressActionsOptions = {\n\t/**\n\t * 按钮的文字数组\n\t */\n\titemList : string[],\n\t/**\n\t * 按钮的文字颜色，字符串格式，默认为\"#000000\"\n\t */\n\titemColor : string | null,\n\t/**\n\t * 接口调用成功的回调函数\n\t */\n\tsuccess : ((result : LongPressActionsSuccessResult) => void) | null,\n\t/**\n\t * 接口调用失败的回调函数\n\t */\n\tfail : ((result : LongPressActionsFailResult) => void) | null,\n\t/**\n\t * 接口调用结束的回调函数（调用成功、失败都会执行）\n\t */\n\tcomplete : ((result : any) => void) | null\n};\n```\n\n----------------------------------------\n\nTITLE: Building uni-app-x with Vite\nDESCRIPTION: Command for building the uni-app-x runtime. Runs using the x.vite.config.ts configuration file and produces the dist/uni.x.runtime.esm.js output file that other projects will depend on.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-app-plus/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/build.js uni-app-plus\n```\n\n----------------------------------------\n\nTITLE: Initializing uni-stacktracey from uniapp-cli-vite Plugin Using JavaScript\nDESCRIPTION: This snippet shows how to require the uni-stacktracey related modules (stacktracey and its presets) from the HBuilderX uniapp-cli-vite plugin. It is a prerequisite step that sets up access to stack trace parsing functions needed in subsequent usage.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  sourcemap: { stacktracey, uniStracktraceyPreset, utsStracktraceyPreset },\n} = require('${HBuilderX}/plugins/uniapp-cli-vite')\n```\n\n----------------------------------------\n\nTITLE: Creating SourceMapConsumer Instance\nDESCRIPTION: This code demonstrates creating an instance of `SourceMapConsumer` using `new sourceMap.SourceMapConsumer(rawSourceMapJsonData)`. The `destroy` method is called to release resources, or `SourceMapConsumer.with` can be used instead.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst consumer = await new sourceMap.SourceMapConsumer(rawSourceMapJsonData);\ndoStuffWith(consumer);\nconsumer.destroy();\n```\n\n----------------------------------------\n\nTITLE: Including Source Map in Web Page\nDESCRIPTION: This snippet demonstrates how to include the source-map library in a web page using a script tag.  It also shows how to initialize the library, specifying the location of the `mappings.wasm` file.  This initialization is required when using SourceMapConsumer outside of Node.js.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/source-map@0.7.3/dist/source-map.js\"></script>\n    <script>\n        sourceMap.SourceMapConsumer.initialize({\n            \"lib/mappings.wasm\": \"https://unpkg.com/source-map@0.7.3/lib/mappings.wasm\"\n        });\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Initializing SourceMapConsumer\nDESCRIPTION: This snippet demonstrates how to initialize the `SourceMapConsumer` outside of Node.js environments, such as in a web browser. It uses the `initialize` method to specify the URL of the `lib/mappings.wasm` file, which is required for the consumer to function correctly.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsourceMap.SourceMapConsumer.initialize({\n  \"lib/mappings.wasm\": \"https://example.com/source-map/lib/mappings.wasm\"\n});\n```\n\n----------------------------------------\n\nTITLE: Mini Program Vite Plugin Import Structure\nDESCRIPTION: A code snippet showing the import structure of various plugins used in the @dcloudio/uni-mp-vite package. These plugins handle different aspects of mini program development such as processing configuration files, managing entries, injecting code, and handling components.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-mp-vite/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// main.js\nimport { uniMainJsPlugin } from './plugins/mainJs'\n// manifest.json\nimport { uniManifestJsonPlugin } from './plugins/manifestJson'\n// pages.json\nimport { uniPagesJsonPlugin } from './plugins/pagesJson'\n// entry uni:virtual uniPage:// uniComponent://\nimport { uniEntryPlugin } from './plugins/entry'\n// 'uni:mp-inject'\n// packages/uni-cli-shared/src/vite/plugins/inject.ts\n// options.vite.inject\nimport { uniViteInjectPlugin } from '@dcloudio/uni-cli-shared'\n// render js 过滤 options.template.filter 的内容\nimport { uniRenderjsPlugin } from './plugins/renderjs'\n// runtime hooks uni:mp-runtime-hooks enforce='post'\nimport { uniRuntimeHooksPlugin } from './plugins/runtimeHooks'\n// uniMiniProgramPlugin 'uni:mp', 重新组织 vite config\nimport { uniMiniProgramPlugin } from './plugin'\n// uniUsingComponentsPlugin\nimport { uniUsingComponentsPlugin } from './plugins/usingComponents'\n\n// UNI_SUBPACKAGE UNI_MP_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Referencing Source Map Module\nDESCRIPTION: This code shows how to reference the source-map module in different environments: Node.js, browsers, and Firefox.  The appropriate method (`require` or `window.sourceMap`) depends on the execution environment.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Node.js\nvar sourceMap = require('source-map');\n\n// Browser builds\nvar sourceMap = window.sourceMap;\n\n// Inside Firefox\nconst sourceMap = require(\"devtools/toolkit/sourcemap/source-map.js\");\n```\n\n----------------------------------------\n\nTITLE: Example UTS Kotlin Error Stack String for uni-stacktracey Parsing Using JavaScript\nDESCRIPTION: This snippet shows a sample error stack from a UTS Kotlin compile error output. The multi-line string contains the compilation failure message as input 'stacktrace' to be parsed by the stacktracey function with the utsStracktraceyPreset to resolve source locations.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utsErrorMsg = `e: DCloud-UTSPlugin/android/src/io/dcloud/uniplugin/TestModule.kt: (9, 5): Unresolved reference: logxxxxxxx\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':nativeplugins:DCloud-UTSPlugin:compileReleaseKotlin'.\n> Compilation error. See log for more details\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 2s\n`\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript Error Stack String for uni-stacktracey Parsing Using JavaScript\nDESCRIPTION: This snippet provides a sample JavaScript error stack trace string which represents the error call frames with file paths and line numbers. This string serves as the input parameter 'stacktrace' for the stacktracey function to be mapped to original source locations.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// js 错误堆栈\nconst uniErrorMsg = `Error: Sentry Error\nat a.throwError(/static/js/pages-index-index.3ab0d0e5.js:1:567)\nat click(/static/js/pages-index-index.3ab0d0e5.js:1:2745)\nat ee(/static/js/chunk-vendors.75525bd5.js:34:11927)\nat n(/static/js/chunk-vendors.75525bd5.js:34:13747)\nat ee(/static/js/chunk-vendors.75525bd5.js:34:11927)\nat HTMLElement.n(/static/js/chunk-vendors.75525bd5.js:34:13824)\nat HTMLElement.o._wrapper(/static/js/chunk-vendors.75525bd5.js:34:53966)\nat HTMLElement.i(/static/js/chunk-vendors.75525bd5.js:7:609894)`\n```\n\n----------------------------------------\n\nTITLE: Destroying SourceMapConsumer Instances in JavaScript\nDESCRIPTION: This snippet details the manual destruction process of a SourceMapConsumer instance by calling its 'destroy' method to free associated wasm data. It emphasizes preferred resource cleanup alternatives via 'SourceMapConsumer.with'.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsumer.destroy();\n```\n\n----------------------------------------\n\nTITLE: Shell Script Including External File Using Preprocess Directive (bash)\nDESCRIPTION: This shell script snippet shows how the '@include' directive can be used in bash scripts to embed the contents of external scripts, allowing modular script composition. It requires the preprocess tool to resolve and replace the directive with the included file content.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# @include util.sh\n```\n\n----------------------------------------\n\nTITLE: Installing preprocess npm Package Using Bash\nDESCRIPTION: This snippet demonstrates installing the 'preprocess' package via npm. It requires Node.js and npm to be installed on the system. Installation adds the package as a dependency to the project.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-cli-shared/lib/preprocess/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save preprocess\n```\n\n----------------------------------------\n\nTITLE: Installing @dcloudio/vite-plugin-uni via npm\nDESCRIPTION: This shell command installs the `@dcloudio/vite-plugin-uni` package as a project dependency using the Node Package Manager (npm). Execute this command in your project's root directory.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/vite-plugin-uni/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @dcloudio/vite-plugin-uni\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map via NPM\nDESCRIPTION: This command installs the source-map library using Node Package Manager (npm). This allows the library to be used in Node.js projects.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-stacktracey/lib/source-map/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install source-map\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Link to uni-app License\nDESCRIPTION: A markdown link that redirects to the uni-app license document hosted on the dcloud.io website.\nSOURCE: https://github.com/dcloudio/uni-app/blob/next/packages/uni-mp-lark/license.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[https://dcloud.io/license/uni-app.html](https://dcloud.io/license/uni-app.html)\n```"
  }
]