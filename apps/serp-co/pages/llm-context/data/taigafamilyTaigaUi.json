[
  {
    "owner": "taiga-family",
    "repo": "taiga-ui",
    "content": "TITLE: Integrating TuiRoot Component in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiRoot component from Taiga UI's core package and include it in an Angular standalone component. TuiRoot is a root component that needs to be included for Taiga UI to function properly.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/app-standalone.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiRoot} from '@taiga-ui/core';\n// ..\n\n@Component({\n  standalone: true,\n  selector: 'app-root',\n  imports: [\n    TuiRoot,\n    // ...\n  ],\n  templateUrl: './app.component.html',\n})\nexport class App {}\n```\n\n----------------------------------------\n\nTITLE: Importing Taiga UI Core Styles in LESS\nDESCRIPTION: Imports the core Taiga UI theme, fonts, and global styles needed for Taiga UI components to render properly.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/src/global_styles.less.md#2025-04-11_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import '@taiga-ui/core/styles/taiga-ui-theme.less';\n@import '@taiga-ui/core/styles/taiga-ui-fonts.less';\n@import '@taiga-ui/styles/taiga-ui-global.less';\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Avatar Component in HTML\nDESCRIPTION: This snippet shows how to use the tui-avatar component from Taiga UI to display an avatar with the text 'Batman'. The component is a custom HTML element that encapsulates avatar functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/avatar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-avatar>Batman</tui-avatar>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI CDK with npm\nDESCRIPTION: Command to install the Taiga UI CDK package using npm. This installs the development kit containing low-level tools and abstractions used to build Taiga UI Angular components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/cdk/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/cdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Root Component with Content Layers\nDESCRIPTION: Shows the basic structure of a Taiga UI application using the tui-root component with different content projection layers. Demonstrates how to organize content across different overlay levels including main content, dialogs, alerts, dropdowns, and hints.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/app-template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-root>\n  <!-- content of your app -->\n\n  <!--\n     If you need, you can add something between Taiga portal layers:\n    -->\n  <ng-container ngProjectAs=\"tuiOverContent\">\n    <!-- Content over app content -->\n  </ng-container>\n  <ng-container ngProjectAs=\"tuiOverDialogs\">\n    <!-- Content over dialogs -->\n  </ng-container>\n  <ng-container ngProjectAs=\"tuiOverAlerts\">\n    <!-- Content over alerts -->\n  </ng-container>\n  <ng-container ngProjectAs=\"tuiOverDropdowns\">\n    <!-- Content over dropdowns -->\n  </ng-container>\n  <ng-container ngProjectAs=\"tuiOverHints\">\n    <!-- Content over hints -->\n  </ng-container>\n</tui-root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Date Input in Angular Reactive Form\nDESCRIPTION: This snippet demonstrates how to use the tui-input-date component from Taiga UI within an Angular reactive form. It includes form binding with formGroup and formControlName directives, and uses the tuiTextfieldLegacy directive for the input element.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-date formControlName=\"testValue\">\n    Choose a date\n    <input tuiTextfieldLegacy />\n  </tui-input-date>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Core Components\nDESCRIPTION: Command to install the required Taiga UI packages including CDK, core, and kit modules. These packages provide the foundation for building Taiga UI based applications.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/kit/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core,kit}\n```\n\n----------------------------------------\n\nTITLE: Opening Dialog with Taiga UI in Angular\nDESCRIPTION: Shows how to inject and use TuiDialogService to display a simple dialog message in an Angular component. The example demonstrates dependency injection using the inject function and subscribing to the dialog opening.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/dialog/examples/import/service-usage.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PolymorpheusComponent} from '@taiga-ui/polymorpheus';\nimport {TuiDialogService} from '@taiga-ui/core';\nimport {inject} from '@angular/core';\n\n// ...\n\nexport class Example {\n  private readonly dialogs = inject(TuiDialogService);\n\n  // ...\n\n  open() {\n    this.dialogs.open('Hello!').subscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Input with Form Validation\nDESCRIPTION: Code example showing how to bind a Taiga UI input component to a form control and apply custom validation. Uses formControlName for form binding and tuiValidator directive for custom validation logic.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/validator/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-input\n  formControlName=\"control\"\n  [tuiValidator]=\"validator\"\n></tui-input>\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using TuiAlertService in TypeScript with Taiga UI\nDESCRIPTION: This snippet demonstrates how to import, inject, and use the TuiAlertService from Taiga UI. It shows how to open a notification and subscribe to its completion event to perform an action when the notification is closed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/service-usage.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAlertService} from '@taiga-ui/core';\n//...\n\nexport class Example {\n  private readonly alerts = inject(TuiAlertService);\n\n  constructor() {\n    //...\n\n    this.alerts.open('Notification').subscribe({\n      complete: () => {\n        console.log('Notification is closed');\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring a Documentation Page Template in Angular\nDESCRIPTION: HTML template for a documentation page using Taiga UI components, including tabs, examples, and property documentation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<tui-doc-page\n  header=\"Super\"\n  package=\"SUPER-PACKAGE\"\n  deprecated\n>\n  <ng-template pageTab>\n    <!-- default tab name would be used -->\n    This would be the content of a first tab\n\n    <tui-doc-example\n      id=\"basic-example\"\n      heading=\"Example of usage\"\n      [content]=\"example\"\n    >\n      <example-1></example-1>\n    </tui-doc-example>\n  </ng-template>\n\n  <ng-template pageTab=\"Documentation\">\n    <tui-doc-demo>\n      <super-component [input]=\"input\"></super-component>\n    </tui-doc-demo>\n    <tui-doc-documentation>\n      <ng-template\n        documentationPropertyName=\"input\"\n        documentationPropertyMode=\"input\"\n        documentationPropertyType=\"T\"\n        [documentationPropertyValues]=\"inputVariants\"\n        [(documentationPropertyValue)]=\"input\"\n      >\n        Some input\n      </ng-template>\n    </tui-doc-documentation>\n  </ng-template>\n</tui-doc-page>\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with Avatar and Title using Taiga UI Components\nDESCRIPTION: This HTML snippet demonstrates how to create a card using Taiga UI's tuiCardMedium directive, combined with a tui-avatar component and title elements. The card includes a star avatar, a main title, and a subtitle using Taiga UI's components and directives.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-medium/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiCardMedium>\n  <tui-avatar\n    class=\"star\"\n    src=\"@tui.star\"\n  ></tui-avatar>\n\n  <h2 tuiTitle>\n    Title\n    <span tuiSubtitle>Subtitle</span>\n  </h2>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiAvatar in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiAvatar component from the Taiga UI kit and use it in a standalone Angular component. It demonstrates the component setup with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/avatar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiAvatar} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAvatar,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Select with Dropdown\nDESCRIPTION: Shows how to implement a select input field with a dropdown list using Taiga UI components. The component includes a textfield wrapper with chevron, an input with two-way binding, and a data list wrapper for dropdown options.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/select/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield tuiChevron>\n  <input\n    tuiSelect\n    [(ngModel)]=\"value\"\n  />\n\n  <tui-data-list-wrapper\n    *tuiTextfieldDropdown\n    [items]=\"items\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Notification Component with TuiAlertService in Angular\nDESCRIPTION: This code demonstrates how to inject and use TuiAlertService to display a custom notification component. It creates an instance of PolymorpheusComponent with a custom notification component, opens it with the alert service, and subscribes to handle the completion event when the notification is closed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/service-usage-component.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PolymorpheusComponent} from '@taiga-ui/polymorpheus';\nimport {TuiAlertService} from '@taiga-ui/core';\nimport {CustomNotification} from './custom-notification.component';\nimport {inject} from '@angular/core';\n\n//...\n\nexport class Example {\n  private readonly alerts = inject(TuiAlertService);\n\n  constructor() {\n    //...\n\n    this.alerts.open(new PolymorpheusComponent(CustomNotificationComponent)).subscribe({\n      complete: () => {\n        console.log('Notification is closed');\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar with Multiple Notification Badges in Taiga UI\nDESCRIPTION: This snippet shows how to wrap an avatar component with notification badges positioned at the top and bottom using Taiga UI components. It demonstrates the use of tui-badged-content as a container, tui-badge-notification for displaying notification counts, and the tuiSlot directive for positioning.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badged-content/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-badged-content>\n  <tui-badge-notification tuiSlot=\"top\">1</tui-badge-notification>\n  <tui-avatar src=\"@tui.user\"></tui-avatar>\n  <tui-badge-notification tuiSlot=\"bottom\">1</tui-badge-notification>\n</tui-badged-content>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Base Packages\nDESCRIPTION: Command to install the base packages required for Taiga UI, including the CDK and core components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-table/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Input and Display with Taiga UI in Angular\nDESCRIPTION: This snippet demonstrates how to create a file input field and display uploaded files using Taiga UI components. It uses the tuiInputFiles directive for the input and tui-files component for displaying the files. The input accepts multiple image files and is bound to a form control.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-files/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<label tuiInputFiles>\n  <input\n    tuiInputFiles\n    accept=\"image/*\"\n    [multiple]=\"true\"\n    [formControl]=\"control\"\n    (reject)=\"onReject($event)\"\n  />\n</label>\n\n<tui-files>\n  <tui-file\n    tuiItem\n    [file]=\"file\"\n  ></tui-file>\n</tui-files>\n```\n\n----------------------------------------\n\nTITLE: Binding FormControl and TuiValueChanges in Taiga UI Input\nDESCRIPTION: Shows how to bind an Angular FormControl and handle value changes using Taiga UI's tuiValueChanges event directive. The input uses property binding for form control and event binding for change detection.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/value-changes/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  [formControl]=\"control\"\n  (tuiValueChanges)=\"onChanges($event)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Search Form with Taiga UI Components in Angular Template\nDESCRIPTION: Demonstrates how to structure a search form using Taiga UI components including tuiSearch directive, tuiTextfield component with icon, and tuiButton. The form uses Angular's reactive forms with formGroup and formControlName directives for form management.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/search/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<search tuiSearch>\n  <form [formGroup]=\"form\">\n    <fieldset>\n      <tui-textfield iconStart=\"@tui.search\">\n        <label tuiLabel>Search</label>\n        <input\n          placeholder=\"Search\"\n          tuiTextfield\n          formControlName=\"search\"\n        />\n      </tui-textfield>\n      <button tuiButton>Search</button>\n    </fieldset>\n  </form>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Implementing tuiBlockDetails layout with Taiga UI components in HTML\nDESCRIPTION: This snippet demonstrates a complete structure of a tuiBlockDetails container that includes various Taiga UI components and directives. It shows the proper nesting of tui-avatar, title with subtitle, formatted amount with description, comment, and badge elements as per Taiga UI design guidelines.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block-details/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiBlockDetails>\n  <tui-avatar></tui-avatar>\n  <h2 tuiTitle>\n    Title\n    <div tuiSubtitle>Subtitle</div>\n  </h2>\n\n  <span>{{ amount }} | tuiAmount: 'USD' | async }}</span>\n  <span tuiAmountDescription>description</span>\n  <span tuiComment>comment</span>\n  <tui-badge appearance=\"neutral\">Badge</tui-badge>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Table with Sorting and Custom Cell Rendering in HTML\nDESCRIPTION: This snippet demonstrates how to create a table using Taiga UI directives and Angular template syntax. It includes a header with sortable columns and a body that displays user data with custom formatting for email, status, and tags. The table supports sorting functionality and uses ngFor for iterating over user data.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table\n  tuiTable\n  [columns]=\"columns\"\n>\n  <thead tuiThead>\n    <tr tuiThGroup>\n      <th\n        *tuiHead=\"'name'\"\n        tuiTh\n      >\n        Name\n      </th>\n      <th\n        *tuiHead=\"'email'\"\n        tuiTh\n      >\n        E-mail\n      </th>\n      <th\n        *tuiHead=\"'status'\"\n        tuiTh\n      >\n        Status\n      </th>\n      <th\n        *tuiHead=\"'tags'\"\n        tuiTh\n        [sorter]=\"null\"\n      >\n        Tags\n      </th>\n    </tr>\n  </thead>\n  <tbody\n    *tuiLet=\"users | tuiTableSort as sortedUsers\"\n    tuiTbody\n    [data]=\"sortedUsers\"\n  >\n    <tr\n      *ngFor=\"let item of sortedUsers\"\n      tuiTr\n    >\n      <td\n        *tuiCell=\"'name'\"\n        tuiTd\n      >\n        {{ item.name }}\n      </td>\n      <td\n        *tuiCell=\"'email'\"\n        tuiTd\n      >\n        <a\n          *ngIf=\"item.email\"\n          tuiLink\n          [href]=\"'mailto:' + item.email\"\n        >\n          {{ item.email }}\n        </a>\n      </td>\n      <td\n        *tuiCell=\"'status'\"\n        tuiTd\n      >\n        <div [class]=\"item.status\">{{ item.status }}</div>\n      </td>\n      <td\n        *tuiCell=\"'tags'\"\n        tuiTd\n      >\n        <tui-tag\n          class=\"tui-space_right-1\"\n          *ngFor=\"let tag of item.tags\"\n          [value]=\"tag\"\n          [autoColor]=\"true\"\n        ></tui-tag>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI Imports\nDESCRIPTION: Sets up a standalone Angular component with necessary form modules and Taiga UI components. Includes form control initialization and required module imports for multi-select and data list functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/multi-select/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiDataList} from '@taiga-ui/core';\nimport {TuiDataListWrapper} from '@taiga-ui/kit';\nimport {TuiMultiSelectModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiMultiSelectModule,\n    TuiDataList,\n    TuiDataListWrapper,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with Taiga UI in TypeScript\nDESCRIPTION: This method opens a dialog using Taiga UI. It takes polymorphic content and optional dialog options as parameters, and returns an Observable of the dialog result. The content is typed with a TuiDialogContext, allowing for flexible dialog implementations.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/dialog/method.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen<O>(\n  content: PolymorpheusContent<TuiDialogContext<O, I>,\n  options: Partial<TuiDialogOptions<I>>,\n): Observable<O>;\n```\n\n----------------------------------------\n\nTITLE: Using the Taiga UI Calendar Range Component in HTML\nDESCRIPTION: Simple implementation of the tui-calendar-range component, which displays a calendar interface for selecting a date range. This self-closing component can be used in Angular templates to provide date range selection functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar-range/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-calendar-range />\n```\n\n----------------------------------------\n\nTITLE: Opening PDF with TuiPdfViewerService in TypeScript\nDESCRIPTION: Shows how to inject and use the TuiPdfViewerService to open a PDF file with custom configuration options. The service allows specifying a label and custom actions through PolymorpheusContent interface.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pdf-viewer/examples/import/service.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Example {\n  private readonly pdfService = inject(TuiPdfViewerService);\n\n  show(actions: PolymorpheusContent<TuiPdfViewerOptions>) {\n    this.pdfService\n      .open('/assets/taiga.pdf', {\n        label: 'Taiga UI',\n        actions,\n      })\n      .subscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Switch with NgModel\nDESCRIPTION: Shows how to implement a checkbox-based switch component using Taiga UI's tuiSwitch directive with two-way data binding via ngModel. The switch state is bound to the 'value' property in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/switch/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  tuiSwitch\n  type=\"checkbox\"\n  [(ngModel)]=\"value\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Accordion Structure in HTML\nDESCRIPTION: Demonstrates the structure of a Taiga UI accordion component with three expandable sections. Uses tui-accordion wrapper, tuiAccordion buttons, and tui-expand elements to create collapsible content sections describing different Taiga UI packages.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/accordion/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-accordion>\n  <button tuiAccordion>Taiga UI cdk</button>\n  <tui-expand>\n    Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities\n  </tui-expand>\n  <button tuiAccordion>Taiga UI core</button>\n  <tui-expand>Basic elements needed to develop components, directives and more using Taiga UI design system</tui-expand>\n  <button tuiAccordion>Taiga UI kit</button>\n  <tui-expand>The main set of components used to build Taiga UI based Angular applications</tui-expand>\n</tui-accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Navigation Layout Structure\nDESCRIPTION: Demonstrates the basic structure of a page layout using Taiga UI navigation directives. Shows the composition of header, collapsible sidebar, main content area, and navigation elements using custom directives like tuiNavigationHeader, tuiNavigationAside, tuiNavigationMain, and tuiNavigationNav.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/navigation/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header tuiNavigationHeader>Header content</header>\n<aside [tuiNavigationAside]=\"expanded\">Sidebar content</aside>\n<main tuiNavigationMain>\n  <nav tuiNavigationNav>Breadcrumbs, tabs, buttons</nav>\n  Main content\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiInputTimeModule with Form Integration in Angular\nDESCRIPTION: Sets up a standalone Angular component using TuiInputTimeModule with custom time input options and form control integration. Configures time format, icon, and item size through providers while implementing reactive form control.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-time/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputTimeModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputTimeModule,\n  ],\n  providers: [\n    {\n      provide: TUI_INPUT_TIME_OPTIONS,\n      useValue: {\n        icon: '@tui.circle-check',\n        mode: 'HH:MM:SS',\n        itemSize: 's',\n      },\n    },\n  ],\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(new TuiTime(12, 30)),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Taiga UI Packages via NPM\nDESCRIPTION: NPM installation command that installs four main Taiga UI packages: CDK (Component Development Kit), core UI components, component kit, and icons package. Uses NPM's ability to install multiple scoped packages in a single command.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/main.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core,kit,icons}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Block Status Component with Nested Elements in HTML\nDESCRIPTION: Example showing how to structure a tui-block-status component with an image in the top slot, a heading, description text, and a styled button. The component requires the [card] input property and uses tuiSlot, tuiButton, and tuiItem directives for layout and styling.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block-status/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-block-status [card]=\"card\">\n  <img\n    tuiSlot=\"top\"\n    src=\"src\"\n  />\n  <h4>Title</h4>\n  Description\n  <button\n    tuiButton\n    tuiItem\n  >\n    Button\n  </button>\n</tui-block-status>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Button with Taiga UI in Angular\nDESCRIPTION: Implements a button with a dropdown menu using Taiga UI components. The button opens a dropdown containing a data list of items that can be clicked. Uses Angular's ngFor directive for item iteration and two-way binding for dropdown state management.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-open/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiButton\n  type=\"button\"\n  [tuiDropdown]=\"dropdown\"\n  [(tuiDropdownOpen)]=\"open\"\n>\n  Open menu\n  <ng-template #dropdown>\n    <tui-data-list>\n      <button\n        *ngFor=\"let item of items\"\n        tuiOption\n        (click)=\"onClick()\"\n      >\n        {{item}}\n      </button>\n    </tui-data-list>\n  </ng-template>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Credit Card Payment Form with Taiga UI and Angular Reactive Forms\nDESCRIPTION: This code snippet shows how to create a credit card payment form using Taiga UI components and Angular reactive forms. It includes input fields for card number, expiration date, and CVC/CVV, each wrapped in a tui-textfield component with appropriate labels and form control bindings.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-card/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"form\">\n  <tui-textfield>\n    <label tuiLabel>Card number</label>\n    <input\n      formControlName=\"card\"\n      tuiInputCard\n    />\n  </tui-textfield>\n  <tui-textfield>\n    <label tuiLabel>Expire date</label>\n    <input\n      formControlName=\"expire\"\n      tuiInputExpire\n    />\n  </tui-textfield>\n  <tui-textfield>\n    <label tuiLabel>CVC/CVV</label>\n    <input\n      formControlName=\"cvc\"\n      tuiInputCVC\n    />\n  </tui-textfield>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb Navigation with Taiga UI in Angular\nDESCRIPTION: This code demonstrates how to use the tui-breadcrumbs component from Taiga UI to create a navigation breadcrumb trail. It iterates through an array of items to generate breadcrumb links, each with a caption and routerLink for navigation. The size property allows for customizing the breadcrumbs dimensions.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/breadcrumbs/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-breadcrumbs [size]=\"size\">\n  <ng-container *ngFor=\"let item of items\">\n    <a\n      *tuiItem\n      tuiLink\n      [routerLink]=\"item.routerLink\"\n    >\n      {{ item.caption }}\n    </a>\n  </ng-container>\n</tui-breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Pagination Component in Angular Template\nDESCRIPTION: Template code showing how to set up a Taiga UI pagination component with core pagination properties including total page count, current page index, and page change event handler. The component provides page navigation functionality through the indexChange event emitter.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pagination/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-pagination\n  [length]=\"pageCount\"\n  [index]=\"currentPage\"\n  (indexChange)=\"goToPage($event)\"\n></tui-pagination>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI via Angular CLI\nDESCRIPTION: Command to add Taiga UI to an Angular project using the Angular CLI's ng add command. This will install the necessary dependencies and set up initial configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/taiga-schematics/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add taiga-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Input with Taiga UI and Angular Forms\nDESCRIPTION: This snippet shows how to create a number input field using Taiga UI's tui-textfield component and tuiInputNumber directive. It binds the input to an Angular form control and applies custom number formatting with two decimal places precision.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-number/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiInputNumber\n    [formControl]=\"control\"\n    [tuiNumberFormat]=\"{precision: 2}\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Combo Box in Angular Reactive Form\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI combo box component within an Angular reactive form. It includes form group binding with formControlName and a data list wrapper to populate the combo box options.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/combo-box/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-combo-box formControlName=\"testValue\">\n    <tui-data-list-wrapper\n      *tuiDataList\n      [items]=\"items\"\n    ></tui-data-list-wrapper>\n  </tui-combo-box>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI App Bar with Navigation Controls in HTML\nDESCRIPTION: This code defines an HTML header section with a Taiga UI app bar component. It includes a back button positioned on the left, a centered page title, and a settings icon button on the right side of the bar.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/app-bar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header>\n  <tui-app-bar>\n    <button\n      tuiAppBarBack\n      tuiSlot=\"left\"\n    >\n      Back\n    </button>\n    Page title\n    <button\n      tuiIconButton\n      icon=\"@tui.settings\"\n      title=\"settings\"\n      tuiSlot=\"right\"\n    ></button>\n  </tui-app-bar>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import TuiPopup from @taiga-ui/core and TuiDrawer from @taiga-ui/kit, then add them to the imports array of a standalone Angular component. It shows the basic setup required to use Taiga UI components in an Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/drawer/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiPopup} from '@taiga-ui/core';\nimport {TuiDrawer} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPopup,\n    TuiDrawer,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Calendar Month Component in HTML\nDESCRIPTION: Basic implementation of the tui-calendar-month component from Taiga UI. This component renders a calendar month view, typically used for date selection in Angular applications built with Taiga UI.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar-month/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-calendar-month></tui-calendar-month>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Slider with Angular Reactive Forms\nDESCRIPTION: This snippet demonstrates how to create a slider input using Taiga UI's tuiSlider directive and bind it to an Angular FormControl. The input is of type 'range' and uses the formControl directive for form integration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/slider/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  tuiSlider\n  type=\"range\"\n  [formControl]=\"control\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Expandable Card with Taiga UI Directives in HTML\nDESCRIPTION: This snippet demonstrates a collapsible card component using Taiga UI directives. The card includes a header with title, subtitle, and a toggle button that changes the card's collapsed state. The content visibility is controlled through the tui-expand component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-collapsed/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<section\n  tuiCardLarge\n  [tuiCardCollapsed]=\"collapsed\"\n>\n  <header tuiHeader>\n    <hgroup tuiTitle>\n      <h2>Title</h2>\n      <p tuiSubtitle>Subtitle</p>\n    </hgroup>\n    <aside tuiAccessories>\n      <button\n        tuiIconButton\n        [tuiChevron]=\"!collapsed\"\n        (click)=\"collapsed = !collapsed\"\n      >\n        Expand\n      </button>\n    </aside>\n  </header>\n  <tui-expand [expanded]=\"!collapsed\">...</tui-expand>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input with Error Component in Angular Template\nDESCRIPTION: Shows how to set up a Taiga UI input field with form control binding and associated error handling. Uses the tui-input component for user input and tui-error component for displaying validation errors. The error handling leverages the tuiFieldError pipe for async error processing.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/field-error/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// ...\n<tui-input [formControl]=\"user\">User</tui-input>\n<tui-error\n  [formControl]=\"user\"\n  [error]=\"[] | tuiFieldError | async\"\n></tui-error>\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Island Component with Button in HTML\nDESCRIPTION: Example showing how to structure a Taiga UI Island component with a title, text content, and a secondary appearance button. Uses Taiga UI's custom element tui-island and related CSS classes for styling.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/island/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-island>\n  <h3 class=\"tui-island__title\">Title</h3>\n  <p class=\"tui-island__paragraph\">Text</p>\n  <p class=\"tui-island__paragraph tui-island__paragraph_button\">\n    <button\n      tuiButton\n      type=\"button\"\n      appearance=\"secondary\"\n    >\n      Button\n    </button>\n  </p>\n</tui-island>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Buttons in HTML\nDESCRIPTION: Demonstrates the use of tuiButton directive on both button and anchor elements to create consistent button styling. Shows how the same directive can be applied to different HTML elements while maintaining uniform appearance.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button tuiButton>Press me</button>\n<a tuiButton>Press me</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Action Bar with Conditional Display in HTML\nDESCRIPTION: A minimal example showing how to implement a Taiga UI action bar component. The tuiActionBar structural directive controls the visibility of the component based on the 'open' variable, which likely toggles the action bar's display state.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/action-bar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-action-bar *tuiActionBar=\"open\">content</tui-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Month Input with Calendar Dropdown in Taiga UI\nDESCRIPTION: This snippet demonstrates how to create a month input field with a dropdown calendar using Taiga UI components. It includes two-way data binding for the selected value, min/max date constraints, and a custom handler for disabling specific dates. The calendar appears in a dropdown when the input is focused.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-month/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiInputMonth\n    [(ngModel)]=\"value\"\n  />\n\n  <tui-calendar-month\n    *tuiTextfieldDropdown\n    [min]=\"min\"\n    [max]=\"max\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [(year)]=\"activeYear\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with TuiDialogService in Taiga UI\nDESCRIPTION: This snippet demonstrates how to open a custom dialog component using Taiga UI's dialog service. It imports the required services, injects them into the component, and defines an open method that displays the dialog and subscribes to the result.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/dialog/examples/import/lazy-dialog.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PolymorpheusComponent} from '@taiga-ui/polymorpheus';\nimport {TuiDialogService} from '@taiga-ui/core';\n\nimport {MyDialog} from './my-dialog.component.ts';\n\n// ...\n\n@Component({\n  // ...\n})\nexport class Example {\n  private readonly injector = inject(INJECTOR);\n  private readonly dialogs = inject(TuiDialogService);\n\n  // ...\n  open() {\n    this.dialogs\n      .open(\n        // this.injector is optional\n        new PolymorpheusComponent(MyDialog, this.injector),\n      )\n      .subscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Taiga UI date/time input with Angular reactive forms\nDESCRIPTION: This snippet shows how to integrate the tui-input-date-time component from Taiga UI into an Angular reactive form. It binds the component to a form control named 'testValue' within a form group 'testForm'.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-time/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-date-time formControlName=\"testValue\">Choose date and time</tui-input-date-time>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipe Actions with Taiga UI\nDESCRIPTION: Shows how to create a swipeable card with an action button using tui-swipe-actions component. The example includes a basic card content and a button with an eye icon that appears on swipe.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/swipe-action/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-swipe-actions>\n  <div>Card content</div>\n\n  <button\n    iconStart=\"@tui.eye\"\n    size=\"m\"\n    tuiIconButton\n    tuiSwipeAction\n  ></button>\n</tui-swipe-actions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Checkboxes in Angular Forms\nDESCRIPTION: Shows two ways to create checkboxes using Taiga UI directives. The first example uses tuiCheckbox directive for a visible checkbox, while the second uses tuiBlock directive for an implicit checkbox. Both examples demonstrate two-way data binding with ngModel.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Visible checkbox -->\n<label tuiBlock>\n  <input\n    type=\"checkbox\"\n    tuiCheckbox\n    [(ngModel)]=\"value\"\n  />\n  I'm a label\n</label>\n\n<!-- Implicit checkbox -->\n<label tuiBlock>\n  <input\n    type=\"checkbox\"\n    tuiBlock\n    [(ngModel)]=\"value\"\n  />\n  I'm a label\n</label>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Mobile Calendar Component in Angular Template\nDESCRIPTION: Implementation of a mobile calendar component from Taiga UI library with configurable min/max date ranges and custom disabled item handling functionality. The component allows setting minimum and maximum date boundaries and custom logic for disabling specific dates through the disabledItemHandler property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/mobile-calendar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-mobile-calendar\n  [min]=\"min\"\n  [max]=\"max\"\n  [disabledItemHandler]=\"disabledItemHandler\"\n></tui-mobile-calendar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Input with Angular Reactive Forms\nDESCRIPTION: This snippet shows how to integrate a Taiga UI input field with Angular's FormGroup. It binds a form control named 'testValue' to the tui-input component and includes placeholder text.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input formControlName=\"testValue\">\n    Type a text\n    <input tuiTextfieldLegacy />\n  </tui-input>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Date Selection with Taiga UI Input\nDESCRIPTION: Creates a form input field that allows multiple date selection using Taiga UI's tui-input-date component. The component is bound to a form control named 'testValue' within a reactive form group named 'testForm'. The multiple attribute enables selection of multiple dates.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-multi/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-date\n    multiple\n    formControlName=\"testValue\"\n  >\n    Choose a date\n  </tui-input-date>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Tooltips using Taiga UI\nDESCRIPTION: Demonstrates two button implementations using Taiga UI's tuiButton directive - one with a simple text tooltip and another with a template-based tooltip. Shows how to use both static and template-reference tooltips with the tuiHint directive.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiButton\n  type=\"button\"\n  tuiHint=\"Custom host with text tooltip\"\n>\n  Press me\n</button>\n<button\n  tuiButton\n  type=\"button\"\n  [tuiHint]=\"template\"\n>\n  Press him ↑\n</button>\n\n<ng-template #template>Reusable template</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Confirmation Dialog with Taiga UI in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a confirmation dialog using Taiga UI. It imports the TUI_CONFIRM token, injects the TuiDialogService, and creates a method to display a confirmation dialog with custom text and buttons. The dialog returns a boolean value through an Observable that can be subscribed to for handling user responses.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/confirm/examples/import/service.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TUI_CONFIRM} from '@taiga-ui/kit';\n\n// ...\nexport class Example {\n  private readonly dialogs = inject(TuiDialogService);\n\n  confirm() {\n    this.dialogs\n      .open<boolean>(TUI_CONFIRM, {\n        label: 'Are you sure?',\n        data: {\n          content: 'This action has consequences',\n          yes: 'Whatever...',\n          no: 'Oops!',\n        },\n      })\n      .subscribe((response) => {\n        // ...\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Navigation with Taiga UI Data List\nDESCRIPTION: This snippet shows how to create a hierarchical menu using Taiga UI components. It renders a data list with grouped options, where each option is a router link. The snippet uses *ngFor directives to iterate through groups and their items, and applies appropriate ARIA roles for accessibility.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/data-list/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-data-list role=\"menu\">\n  <tui-opt-group\n    *ngFor=\"let group of groups\"\n    [label]=\"group.label\"\n  >\n    <a\n      *ngFor=\"let item of group.items\"\n      tuiOption\n      role=\"menuitem\"\n      [routerLink]=\"item.routerLink\"\n    >\n      {{item.label}}\n    </a>\n  </tui-opt-group>\n</tui-data-list>\n```\n\n----------------------------------------\n\nTITLE: Using tuiFormatNumber Pipe in Angular Template\nDESCRIPTION: Shows how to format a numeric value using Taiga UI's tuiFormatNumber pipe with async handling. The pipe takes a numeric input 'index' and formats it according to the locale settings.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/format-number/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nFormatted number: {{index | tuiFormatNumber | async}}\n```\n\n----------------------------------------\n\nTITLE: Opening Sheet Dialog with TuiSheetDialogService in TypeScript\nDESCRIPTION: Shows how to inject and use the TuiSheetDialogService to open a sheet dialog with custom configuration. The service is injected via constructor and used to open a dialog with content, heading label, and offset parameters.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/sheet-dialog/examples/import/component.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private readonly sheets: TuiSheetDialogService) {}\n\n// ...\n\nthis.sheets\n    .open(\n        'Content',\n        {\n            label: 'Heading',\n            offset: 48,\n        },\n    )\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Tiles Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI Tiles component to create a dynamic grid layout. It binds to an 'items' array and creates individual tiles with customizable width and height. Each tile includes a drag handle icon and displays the item's content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tiles/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-tiles [(items)]=\"items\">\n  <tui-tile\n    *ngFor=\"let item of items\"\n    [width]=\"item.w\"\n    [height]=\"item.h\"\n  >\n    <tui-icon\n      tuiTileHandle\n      icon=\"@tui.grip-vertical\"\n    />\n    {{ item.content }}\n  </tui-tile>\n</tui-tiles>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI\nDESCRIPTION: Shows how to import and configure Taiga UI components (checkbox and label) along with Angular's FormsModule in a standalone component. The example includes necessary imports and component decorator configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/label/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule} from '@angular/forms';\nimport {TuiLabel} from '@taiga-ui/core';\nimport {TuiCheckbox} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiCheckbox,\n    TuiLabel,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCalendarRange in Standalone Component\nDESCRIPTION: Example of importing and configuring the TuiCalendarRange component from the Taiga UI kit package in a standalone Angular component. The component is added to the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar-range/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiCalendarRange} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCalendarRange,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input with Data List Dropdown in HTML\nDESCRIPTION: This snippet shows how to create an input field with a dropdown list using Taiga UI components. It binds the input to a form control and populates a dropdown list with items from an array. The *tuiDataList directive connects the input field with the dropdown list component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/data-list-wrapper/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-input [formControl]=\"control\">\n  Account\n\n  <tui-data-list-wrapper\n    *tuiDataList\n    [items]=\"items\"\n  ></tui-data-list-wrapper>\n</tui-input>\n```\n\n----------------------------------------\n\nTITLE: Configuring Imports for Angular Standalone Component with Taiga UI\nDESCRIPTION: This snippet shows how to configure import statements and component metadata for a standalone Angular component that uses Taiga UI components. It includes form module imports, Taiga UI core and kit components, and the legacy combo box module.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/combo-box/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiDataList} from '@taiga-ui/core';\nimport {TuiDataListWrapper} from '@taiga-ui/kit';\nimport {TuiComboBoxModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiComboBoxModule,\n    TuiDataList,\n    TuiDataListWrapper,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Integrating Taiga UI Time Input with Angular Reactive Forms\nDESCRIPTION: This snippet shows how to use the Taiga UI time input component within an Angular reactive form. The tui-input-time element is bound to a form control named 'testValue' using the formControlName directive. A placeholder text is also provided.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-time/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-time formControlName=\"testValue\">Placeholder</tui-input-time>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTable in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiTable component from @taiga-ui/addon-table package and include it in a standalone Angular component's imports array. The example uses TypeScript decorators and ES6 import syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTable} from '@taiga-ui/addon-table';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTable,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Integrating Taiga UI Navigation Bar in Angular Root Component\nDESCRIPTION: This snippet demonstrates how to add a Taiga UI navigation bar to the root component of an Angular application. It uses the tui-root component to wrap the app content and includes a nav element with tuiTabBar directive for navigation. The navigation items are dynamically generated using *ngFor directive.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tab-bar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    Add to the template inside your root component\n    at the required layer and position with CSS:\n-->\n<tui-root>\n  Your app\n  <nav\n    tuiTabBar\n    ngProjectAs=\"tuiOverContent\"\n  >\n    <a\n      *ngFor=\"let item of items\"\n      tuiTabBarItem\n      routerLinkActive\n      [routerLink]=\"item.path\"\n      [icon]=\"item.icon\"\n    >\n      {{ item.text}}\n    </a>\n  </nav>\n</tui-root>\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Taiga UI Icon\nDESCRIPTION: Shows how to implement a tooltip message on a Taiga UI icon component using the tuiTooltip directive. The tooltip displays a warning message when hovering over the icon.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tooltip/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-icon tuiTooltip=\"Please don't touch this\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Serbian Language in Angular Bootstrap\nDESCRIPTION: This code snippet demonstrates how to configure the Taiga UI language to Serbian in an Angular application's bootstrap process. It imports the necessary language modules, sets up the TUI_LANGUAGE provider with the Serbian language option, and handles any potential errors during the bootstrap process.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/i18n/custom.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TUI_LANGUAGE} from '@taiga-ui/i18n';\nimport {TUI_SERBIAN_LANGUAGE} from './serbian';\n\nbootstrapApplication(App, {\n  providers: [\n    // ...\n    {\n      provide: TUI_LANGUAGE,\n      useValue: of(TUI_SERBIAN_LANGUAGE),\n    },\n  ],\n}).catch((err: unknown) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Creating a Close Button with Taiga UI Directives in HTML\nDESCRIPTION: This snippet demonstrates how to create a close button using Taiga UI component library. It applies both the tuiIconButton and tuiButtonClose directives to a standard HTML button element.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button-close/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiIconButton\n  tuiButtonClose\n>\n  Close\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Input with Taiga UI Textfield in HTML\nDESCRIPTION: This snippet demonstrates how to create a search input field using Taiga UI's textfield component and input search directive. It binds the input to a 'value' model and associates it with a 'results' template for displaying search results.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-search/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-textfield>\n  <input\n    [tuiInputSearch]=\"results\"\n    [(ngModel)]=\"value\"\n  />\n  <ng-template #results>\n    <!-- ... -->\n  </ng-template>\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Loader Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-loader component from Taiga UI. The [showLoader] attribute is bound to a 'loader' variable, which controls the visibility of the loading indicator. The text 'Let off some steam, Bennett' is displayed as content within the loader component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/loader/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-loader [showLoader]=\"loader\">Let off some steam, Bennett</tui-loader>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Options with tuiAlertOptionsProvider in Angular Component\nDESCRIPTION: This snippet demonstrates how to provide custom alert options using tuiAlertOptionsProvider within an Angular component. It sets a dynamic label that capitalizes the status text, configures a 'negative' appearance, and sets an autoClose timeout of 7000ms.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/define-options.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {tuiAlertOptionsProvider} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  providers: [\n    tuiAlertOptionsProvider({\n      label: ({status}: any) => status[0].toUpperCase() + status.slice(1),\n      appearance: 'negative',\n      autoClose: 7000,\n    }),\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages with Taiga UI Error Component in HTML\nDESCRIPTION: This snippet shows how to use the tui-error component from Taiga UI to display error messages. The error message is bound to the 'error' property, likely defined in the component's TypeScript file.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/error/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-error [error]=\"error\"></tui-error>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pin Input with Taiga UI in Angular Template\nDESCRIPTION: This snippet demonstrates how to create a pin input field using Taiga UI components within an Angular reactive form. It uses the tui-textfield component and the tuiInputPin directive to create a specialized input for PIN entry, limited to 4 characters.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-pin/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-textfield>\n    <input\n      maxlength=\"4\"\n      tuiInputPin\n      [formControl]=\"control\"\n    />\n  </tui-textfield>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Angular Application with Taiga UI\nDESCRIPTION: This code initializes an Angular application with Taiga UI integration. It imports necessary Angular and Taiga UI modules, defines a Root component as the application shell, and bootstraps the application with required providers. A special note indicates a workaround for StackBlitz regarding assets handling.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/src/main.ts.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport 'zone.js';\nimport {provideRouter} from '@angular/router';\nimport {bootstrapApplication} from '@angular/platform-browser';\nimport {provideAnimations} from '@angular/platform-browser/animations';\nimport {Component} from '@angular/core';\nimport {TuiRoot, tuiAssetsPathProvider} from '@taiga-ui/core';\nimport {NG_EVENT_PLUGINS} from '@taiga-ui/event-plugins';\n\nimport {App} from './app/app.component';\n\n@Component({\n  standalone: true,\n  selector: 'root',\n  imports: [App, TuiRoot],\n  template: '<tui-root> <app/> </tui-root>',\n})\nclass Root {}\n\nbootstrapApplication(Root, {\n  providers: [\n    provideAnimations(),\n    provideRouter([]),\n    /**\n     * A workaround for StackBlitz only (it does not support assets).\n     * Don't use this approach in real-world applications!\n     */\n    tuiAssetsPathProvider('https://taiga-ui.dev/assets/taiga-ui/icons'),\n    NG_EVENT_PLUGINS,\n    {\n      provide: 'Pythons',\n      useValue: ['John Cleese', 'Eric Idle', 'Michael Palin', 'Graham Chapman', 'Terry Gilliam', 'Terry Jones'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Taiga UI Button with Hint in HTML\nDESCRIPTION: This snippet demonstrates how to create a Taiga UI button with a hint feature. It uses the 'tuiButton' attribute to style the button, 'tuiHint' to set the hint text, and 'tuiHintDescribe' to enable the hint functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-describe/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  tuiButton\n  tuiHint=\"I'm a hint\"\n  tuiHintDescribe\n>\n  Press me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Formatting Timestamps with tuiFormatDate Pipe in Angular Template\nDESCRIPTION: Shows how to use the tuiFormatDate pipe in an Angular template to format a timestamp value. The pipe is used in combination with the async pipe since tuiFormatDate returns an Observable.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/format-date/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nFormatted timestamp: {{timestamp | tuiFormatDate | async}}\n```\n\n----------------------------------------\n\nTITLE: Opening Mobile Dialog with TuiMobileDialogService in TypeScript\nDESCRIPTION: Shows how to create a mobile dialog using TuiMobileDialogService with configurable content, header, action buttons and handling button click events through subscription. The service is injected through dependency injection in the constructor.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/mobile-dialog/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private readonly dialogs: TuiMobileDialogService) {}\n\n// ...\n\nthis.dialogs\n    .open(\n        'Text',\n        {\n            label: 'Heading',\n            actions: ['Button 1', 'Button 2'],\n            data: 'Some data'\n        },\n    )\n    .subscribe(index => {\n        // Index of clicked button\n        console.log(index);\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Chip Component in HTML\nDESCRIPTION: This snippet demonstrates the use of Taiga UI's tuiItemGroup directive and tui-chip component. The chip is given a primary appearance and displays a dynamic value.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/item-group/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div tuiItemGroup>\n  <tui-chip appearance=\"primary\">{{ value }}</tui-chip>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Checkbox with Two-Way Data Binding in Angular\nDESCRIPTION: A snippet showing how to use the tuiCheckbox directive on an input element with two-way data binding to a 'value' property in the component class. The directive transforms a standard HTML checkbox into a styled Taiga UI checkbox component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/checkbox/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  tuiCheckbox\n  type=\"checkbox\"\n  [(ngModel)]=\"value\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Notification in HTML\nDESCRIPTION: Shows how to create a notification component with negative appearance using Taiga UI. The component displays custom content within a notification box styled with negative (typically error or warning) visual treatment.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/notification/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-notification appearance=\"negative\">Some content</tui-notification>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Date Range Input in Angular Form\nDESCRIPTION: Shows how to integrate the tui-input-date-range component with Angular's reactive forms. The component is bound to a form control named 'testValue' within a form group 'testForm', allowing for date range selection with validation support.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-range/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-date-range formControlName=\"testValue\">Choose dates</tui-input-date-range>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Angular Component in TypeScript\nDESCRIPTION: This code defines a standalone Angular component named 'App'. It imports the Component decorator from '@angular/core', sets the component as standalone, specifies the selector, and references external template and style files.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/starter/files/app.component.ts.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'app',\n  templateUrl: './app.template.html',\n  styleUrls: ['./app.style.less'],\n})\nexport class App {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with TuiSlider in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an Angular component using the TuiSlider from Taiga UI kit. It imports necessary modules from Angular forms and Taiga UI, configures the component as standalone, and sets up a FormControl for the slider.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/slider/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiSlider} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiSlider,\n  ],\n  // ...\n})\nexport class Example {\n  readonly control = new FormControl(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Multi-Select Form Control with Data List\nDESCRIPTION: Shows how to set up a Taiga UI multi-select component within a reactive form using formGroup and formControlName directives. Includes a data list wrapper component to display selectable items with grouping support.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/multi-select/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-multi-select formControlName=\"testValue\">\n    <tui-data-list-wrapper\n      *tuiDataList\n      tuiMultiSelectGroup\n      [items]=\"items\"\n    ></tui-data-list-wrapper>\n  </tui-multi-select>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Scrollbar with List Items\nDESCRIPTION: Example showing how to wrap an unordered list with Taiga UI's scrollbar component (tui-scrollbar). The component provides custom scrolling functionality for the contained list elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/scrollbar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-scrollbar>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n</tui-scrollbar>\n```\n\n----------------------------------------\n\nTITLE: Integrating TUI Scrollbar with Infinite Scroll in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI scrollbar component in conjunction with an infinite scroll library. It uses the `tuiElement` directive and a template reference variable to access the native DOM element of the scrollbar, which is then passed to the infinite scroll component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/element/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-scrollbar\n  #element=\"elementRef\"\n  tuiElement\n>\n  <some-infinite-scroll-library [scrollingElement]=\"element.nativeElement\" />\n</tui-scrollbar>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Form in Angular Component\nDESCRIPTION: This code demonstrates how to create a reactive form within an Angular component using FormGroup and FormControl from @angular/forms. It shows the standard pattern of initializing a form with a single control called 'testValue'.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/combo-box/examples/import/form.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormControl, FormGroup} from '@angular/forms';\n\n// ...\n\n@Component({\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Tabs with Router Links\nDESCRIPTION: Example of Taiga UI tabs using router links for navigation between pages. Uses routerLink and routerLinkActive directives for route-based navigation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tabs/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-tabs>\n  <a\n    tuiTab\n    routerLink=\"/page-1\"\n    routerLinkActive\n  >\n    Page 1\n  </a>\n  <a\n    tuiTab\n    routerLink=\"/page-2\"\n    routerLinkActive\n  >\n    Page 2\n  </a>\n</tui-tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input Tag with Template-Driven Forms in Angular\nDESCRIPTION: This snippet demonstrates the use of tui-input-tag component with template-driven forms in Angular. It uses ngModel for two-way data binding.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-tag/examples/import/template.md#2025-04-11_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-input-tag [(ngModel)]=\"model\"></tui-input-tag>\n```\n\n----------------------------------------\n\nTITLE: Integrating tui-input-month-range with Angular Reactive Forms\nDESCRIPTION: This example shows how to incorporate the tui-input-month-range component from Taiga UI into an Angular form using reactive forms. The component is bound to a form control named 'testValue' within a parent form group 'testForm'.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-month-range/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-month-range formControlName=\"testValue\">Choose a range of months</tui-input-month-range>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiAccordion in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiAccordion component from the Taiga UI experimental package and include it in an Angular component's imports array. The component is set up as a standalone component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/accordion/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiAccordion} from '@taiga-ui/experimental';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAccordion,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Input Date Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-input-date component from Taiga UI, setting a custom date format. The [tuiDateFormat] input property is used to specify the mode and separator for the date format.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/date-format/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-input-date [tuiDateFormat]=\"{mode, separator}\"></tui-input-date>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Stepper with Angular Router Links in HTML\nDESCRIPTION: This snippet demonstrates how to create a stepper navigation using Taiga UI's tui-stepper component. It includes three steps, each represented by an anchor tag with Angular router directives and Taiga UI's tuiStep attribute.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/stepper/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-stepper>\n  <a\n    routerLink=\"/step-1\"\n    routerLinkActive\n    tuiStep\n  >\n    One 1\n  </a>\n  <a\n    routerLink=\"/step-2\"\n    routerLinkActive\n    tuiStep\n  >\n    Two 2\n  </a>\n  <a\n    routerLink=\"/step-3\"\n    routerLinkActive\n    tuiStep\n  >\n    Three 3\n  </a>\n</tui-stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Elastic Sticky Header in Taiga UI Scrollbar\nDESCRIPTION: Example showing how to create a sticky header inside a Taiga UI scrollbar container using the tuiElasticSticky directive. The header element has an event binding that calls onElastic method when sticky behavior is triggered.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/elastic-sticky/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-scrollbar>\n  <header (tuiElasticSticky)=\"onElastic($event)\">I'm sticky</header>\n  ...\n</tui-scrollbar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Accordion Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI accordion component to create expandable/collapsible sections. It structures information about three Taiga UI packages (cdk, core, and kit) in an organized manner, with each section having a header and expandable content using the tuiAccordionItemContent template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/accordion-/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-accordion class=\"container\">\n  <tui-accordion-item>\n    Taiga UI cdk\n    <ng-template tuiAccordionItemContent>\n      Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities\n    </ng-template>\n  </tui-accordion-item>\n  <tui-accordion-item>\n    Taiga UI core\n    <ng-template tuiAccordionItemContent>\n      <div #content>Basic elements needed to develop components, directives and more using Taiga UI design system</div>\n    </ng-template>\n  </tui-accordion-item>\n  <tui-accordion-item>\n    Taiga UI kit\n    <ng-template tuiAccordionItemContent>\n      The main set of components used to build Taiga UI based Angular applications\n    </ng-template>\n  </tui-accordion-item>\n</tui-accordion>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCardMedium in a Standalone Angular Component\nDESCRIPTION: This snippet shows how to import the TuiCardMedium component from Taiga UI's layout package and use it in a standalone Angular component. It demonstrates the proper import syntax and component configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-medium/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiCardMedium} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCardMedium,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TUI_VIEWPORT Provider in Angular Component\nDESCRIPTION: Implements a custom viewport provider that returns the window dimensions using the TUI_VIEWPORT injection token. The provider uses a factory function to create an object with viewport type and dimensions based on the window's inner width and height.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/viewport/examples/import/providers.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TUI_VIEWPORT} from '@taiga-ui/core';\n\n@Component({\n  // ...\n  providers: [\n    {\n      provide: TUI_VIEWPORT,\n      useFactory: () => {\n        const win = inject(WA_WINDOW);\n\n        return {\n          type: `viewport`,\n          getClientRect() {\n            return {\n              top: 0,\n              left: 0,\n              right: win.innerWidth,\n              bottom: win.innerHeight,\n              width: win.innerWidth,\n              height: win.innerHeight,\n            };\n          },\n        };\n      },\n    },\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Standalone Component with Taiga UI InputTag\nDESCRIPTION: Sets up a standalone Angular component with required form and Taiga UI modules. Imports FormsModule, ReactiveFormsModule for form handling, and TuiInputTagModule from Taiga UI legacy package.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-tag/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputTagModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputTagModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Input Group with Taiga UI\nDESCRIPTION: Shows how to bind a Taiga UI card input group component to a form control using Angular's formControlName directive. This component handles credit card number input with built-in formatting and validation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-card-group/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-input-card-group formControlName=\"card\"></tui-input-card-group>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI\nDESCRIPTION: Shows how to configure a standalone Angular component with necessary imports from Angular Forms and Taiga UI Kit. Includes setup for TuiBlock and TuiCheckbox/TuiRadio components along with forms functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiBlock, TuiCheckbox} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiBlock,\n    TuiCheckbox, // or TuiRadio\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Tree Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-tree component from Taiga UI. It binds a value to the tree and specifies a handler for managing child nodes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tree/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-tree\n  [value]=\"value\"\n  [childrenHandler]=\"handler\"\n></tui-tree>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Interaction with Taiga UI in TypeScript\nDESCRIPTION: This code snippet shows how to implement dialog interaction using Taiga UI's TuiDialogContext and injectContext. It defines an Example class with methods to complete the dialog with true or false values.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/dialog/examples/import/custom-dialog.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDialogContext} from '@taiga-ui/core';\nimport {injectContext} from '@taiga-ui/polymorpheus';\n\n// ...\n\nexport class Example {\n  public readonly context = injectContext<TuiDialogContext<boolean>>();\n\n  ok() {\n    this.context.completeWith(true);\n  }\n\n  cancel() {\n    this.context.completeWith(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Drawer Component with Header in Taiga UI\nDESCRIPTION: Demonstrates the implementation of a Taiga UI drawer with a header section containing a title and close button. The drawer is controlled by a popup directive and includes structured content using Taiga UI's header components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/drawer/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-drawer *tuiPopup=\"open()\">\n  <header>\n    <h2 tuiHeader>\n      <div tuiTitle>Header</div>\n      <div tuiAccessories>\n        <button\n          tuiButton\n          (click)=\"open.set(false)\"\n        >\n          Close\n        </button>\n      </div>\n    </h2>\n    Content\n  </header>\n</tui-drawer>\n```\n\n----------------------------------------\n\nTITLE: Creating Elevated Button Group with Icon in Taiga UI\nDESCRIPTION: This snippet shows how to implement a button group with an elevated surface effect using Taiga UI. It contains a single button with a circle-plus icon followed by text. The tuiButtonGroup directive is used to create the button group container while tuiSurface sets the elevation style.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button-group/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  tuiButtonGroup\n  tuiSurface=\"elevated\"\n>\n  <button>\n    <tui-icon icon=\"@tui.circle-plus\"></tui-icon>\n    Create a payment\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using tuiFilter Pipe in Angular Template with Taiga UI\nDESCRIPTION: Angular template code that iterates over an array 'items' using *ngFor directive while applying the tuiFilter pipe. The filter takes a matcher function and an optional argument to filter the array items before display.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/filter/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div *ngFor=\"let item of items | tuiFilter: matcher: someArg\">{{item}}</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI TextField with Currency Input\nDESCRIPTION: Creates a form-controlled text input field with a USD currency prefix using Taiga UI's tuiTextField and tuiInputNumber directives\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/currency/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield>\n  <label tuiLabel>Type a sum</label>\n\n  <input\n    formControlName=\"testValue\"\n    tuiInputNumber\n    [prefix]=\"'USD' | tuiCurrency\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiInputModule\nDESCRIPTION: This snippet demonstrates how to set up a standalone Angular component with TuiInputModule and ReactiveFormsModule. It creates a simple form with an email field that has an initial value.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    ReactiveFormsModule,\n    TuiInputModule,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl('mail@mail.ru'),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown with Taiga UI Directives in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to create a dropdown component using Taiga UI directives in an Angular template. It uses the tuiDropdown directive to bind the dropdown content and tuiDropdownManual to control the dropdown's open state.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  [tuiDropdown]=\"dropdownContent\"\n  [tuiDropdownManual]=\"open\"\n>\n  Host element\n</div>\n\n<ng-template #dropdownContent>Dropdown content</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiProgress Module in Standalone Component\nDESCRIPTION: Shows how to import the TuiProgress component from @taiga-ui/kit package and include it in a standalone Angular component's imports array. This setup enables the use of TuiProgress functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/progress-bar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiProgress} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiProgress,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Basic TuiExpand Component Implementation\nDESCRIPTION: Shows how to implement the TuiExpand component with an expanded state binding and eager content loading. The component takes a boolean expanded property to control its state and wraps the content to be shown/hidden.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/expand/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-expand [expanded]=\"expanded\">Eager content</tui-expand>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiBlockStatus in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiBlockStatus component from the Taiga UI layout package and include it in the imports array of a standalone Angular component. The component is named 'Example' and uses the standalone: true option.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block-status/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiBlockStatus} from '@taiga-ui/layout';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBlockStatus,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Format Service with Taiga UI\nDESCRIPTION: Creates a FormatService that extends TuiFormatDateService to provide relative time formatting using date-fns formatDistance. The service updates the formatted distance every second using RxJS timer. Includes component configuration showing how to provide the custom service.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/format-date/examples/import/provide.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport formatDistance from 'date-fns/formatDistance';\n\n@Injectable()\nexport class FormatService extends TuiFormatDateService {\n  format(timestamp: number): Observable<string> {\n    return timer(0, 1000).pipe(map(() => formatDistance(timestamp, Date.now())));\n  }\n}\n\n@Component({\n  // ...\n  providers: [\n    {\n      provide: TuiFormatDateService,\n      useClass: FormatService,\n    },\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Integrating Taiga UI Textarea with Angular Reactive Forms\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI textarea component within an Angular reactive form. It binds the textarea to a form control named 'testValue' within the 'testForm' form group. The textarea displays 'Bio' as its label or placeholder text.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/textarea/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-textarea formControlName=\"testValue\">Bio</tui-textarea>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiCheckbox in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiCheckbox component from the Taiga UI kit and include it in an Angular standalone component's imports array. The component is set up as standalone with necessary imports, though some imports are omitted as indicated by comments.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/checkbox/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiCheckbox} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCheckbox,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Effects with Taiga UI Directives\nDESCRIPTION: Shows how to apply touch interaction effects using Taiga UI's tuiTouchable directive. The example includes both transform and opacity effects on different HTML elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/touchable/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiTouchable=\"transform\">...</div>\n<a\n  tuiLink\n  tuiTouchable=\"opacity\"\n>\n  ...\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Dropdown Hover in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the tuiDropdownHover directive to create a dropdown that appears when the user hovers over an element. It binds a template reference to the dropdown content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-hover/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  tuiDropdownHover\n  [tuiDropdown]=\"content\"\n>\n  Host element\n</div>\n\n<ng-template #content>Dropdown content</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Standalone Angular Component with TuiBlockDetails\nDESCRIPTION: Creates a standalone Angular component that imports the TuiBlockDetails module from Taiga UI. The component is configured as standalone and includes necessary imports from Angular core and Taiga UI layout package.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/block-details/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiBlockDetails} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBlockDetails,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Inserting Taiga UI Calendar Component in HTML\nDESCRIPTION: This snippet shows how to add the Taiga UI calendar component to an HTML template. The <tui-calendar> custom element is used to render the calendar interface.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-calendar></tui-calendar>\n```\n\n----------------------------------------\n\nTITLE: Implementing TUI Arc Chart with Value Binding in HTML\nDESCRIPTION: Example of how to implement a basic TUI Arc Chart component with value binding. The component takes a 'value' input property that determines the chart data to be displayed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/arc-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-arc-chart [value]=\"value\"></tui-arc-chart>\n```\n\n----------------------------------------\n\nTITLE: Basic Taiga UI Carousel Implementation in HTML\nDESCRIPTION: Shows how to create a basic carousel component using Taiga UI's tui-carousel element and tuiItem directive. The example includes three simple slides with text content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/carousel/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-carousel>\n  <div *tuiItem>Slide 1</div>\n  <div *tuiItem>Slide 2</div>\n  <div *tuiItem>Slide 3</div>\n</tui-carousel>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiBadgeNotification in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiBadgeNotification component from @taiga-ui/kit and add it to the imports array of a standalone Angular component. The example includes the basic structure for creating a standalone component with proper imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badge-notification/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiBadgeNotification} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBadgeNotification,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Primitive Textfield in HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-primitive-textfield component from Taiga UI. It includes two-way data binding for the value property and displays a placeholder text inside the textfield.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/primitive-textfield/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-primitive-textfield [(value)]=\"value\">Type something</tui-primitive-textfield>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Dropdown with Template Reference\nDESCRIPTION: Shows how to set up a dropdown using tuiDropdownContext directive and template reference. The code includes a host element that triggers the dropdown and a template containing the dropdown content with a close button functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-context/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  tuiDropdownContext\n  [tuiDropdown]=\"content\"\n>\n  Host element\n</div>\n\n<ng-template\n  #content\n  let-close\n>\n  Dropdown content\n  <button (click)=\"close()\"></button>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Table with Filters in HTML\nDESCRIPTION: This snippet shows the structure of a Taiga UI table with filtering capabilities. It uses the tuiTableFilters directive and includes a text input filter for the 'balance' column. The table displays user data with 'name' and 'balance' columns.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table-filters/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table\n  tuiTableFilters\n  tuiTable\n  [columns]=\"columns\"\n>\n  <thead tuiThead>\n    <tr tuiThGroup>\n      <th\n        *tuiHead=\"'name'\"\n        tuiTh\n      >\n        Name\n      </th>\n      <th\n        *tuiHead=\"'balance'\"\n        tuiTh\n      >\n        <tui-textfield>\n          <label tuiLabel>Minimal balance</label>\n          <input\n            tuiInputNumber\n            tuiTableFilter\n            [tuiGenericFilter]=\"filter\"\n            [formControl]=\"balance\"\n          />\n        </tui-textfield>\n      </th>\n    </tr>\n  </thead>\n  <tbody tuiTbody>\n    <tr\n      *ngFor=\"let item of users | tuiTableFilters\"\n      tuiTr\n    >\n      <td\n        *tuiCell=\"'name'\"\n        tuiTd\n      >\n        {{item.name}}\n      </td>\n      <td\n        *tuiCell=\"'balance'\"\n        tuiTd\n      >\n        {{ item.balance}}\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Taiga UI Components in Angular\nDESCRIPTION: This snippet shows how to import Taiga UI components (TuiButton and TuiButtonGroup) and use them in a standalone Angular component. It demonstrates the basic structure of a component using Taiga UI.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button-group/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiButton} from '@taiga-ui/core';\nimport {TuiButtonGroup} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiButton,\n    TuiButtonGroup,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Displaying Country Flag Using Taiga UI Flag Pipe\nDESCRIPTION: Renders a country flag image using Taiga UI's tuiFlag pipe to transform a country code into the corresponding flag image URL. In this example, 'AE' represents the United Arab Emirates country code.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/flag/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img\n  alt=\"United Arab Emirates\"\n  [src]=\"'AE' | tuiFlag\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Sidebar Button with Toggle in HTML\nDESCRIPTION: Shows how to create a button using tuiButton directive that controls a sidebar's visibility through click events and active zone changes. The button includes a tuiSidebar directive bound to an 'open' variable for conditional content rendering.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/sidebar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiButton\n  type=\"button\"\n  (click)=\"toggle(true)\"\n  (tuiActiveZoneChange)=\"toggle($event)\"\n>\n  Show sidebar\n  <div *tuiSidebar=\"open\">Content</div>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiBadge in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiBadge component from Taiga UI and use it in an Angular standalone component. It shows the necessary import statements and the component declaration with standalone configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badge/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiBadge} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBadge,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiFiles in an Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiFiles component from the @taiga-ui/kit package and use it in an Angular standalone component. The component is included in the imports array to make it available for use within the component template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-files/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiFiles} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [TuiFiles],\n  //...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLineDaysChart in Angular Standalone Component\nDESCRIPTION: This code snippet demonstrates how to import the TuiLineDaysChart component from the @taiga-ui/addon-charts package and include it in the imports array of an Angular standalone component decorator. The component is named 'Example' and uses the standalone: true configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-days-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLineDaysChart} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLineDaysChart,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing International Phone Input with Taiga UI in Angular Reactive Forms\nDESCRIPTION: This snippet demonstrates how to integrate Taiga UI's international phone input directive within an Angular reactive form. It uses the tuiInputPhoneInternational directive on an input element inside a tui-textfield component, with form control binding and country selection options.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-phone-international/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-textfield>\n    <input\n      tuiInputPhoneInternational\n      formControlName=\"testValue\"\n      [countries]=\"countries\"\n    />\n  </tui-textfield>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiReorder in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiReorder component from the @taiga-ui/addon-table package and include it in an Angular standalone component's imports array. The TuiReorder component is likely used for reordering functionality within tables.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/reorder/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiReorder} from '@taiga-ui/addon-table';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiReorder,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLineChart in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiLineChart component from the Taiga UI library and include it in an Angular standalone component's imports array. It sets up the basic structure for using the line chart component in the application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLineChart} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLineChart,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Range Component with Different Form Controls\nDESCRIPTION: Shows two ways to implement the tui-range component - using ngModel for two-way data binding and using formControl for reactive forms. Both examples set a maximum value of 10 for the range component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/range/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-range\n  [max]=\"10\"\n  [(ngModel)]=\"model\"\n></tui-range>\n\n<tui-range\n  [formControl]=\"testValue\"\n  [max]=\"10\"\n></tui-range>\n```\n\n----------------------------------------\n\nTITLE: Detecting Microsoft Edge Browser in Angular with Taiga UI\nDESCRIPTION: This code snippet imports utilities from Taiga UI and Angular Web APIs, and uses dependency injection to access the user agent string. It then checks if the browser is Microsoft Edge using the tuiIsEdge function.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/browser/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {tuiIsEdge} from '@taiga-ui/cdk';\nimport {WA_USER_AGENT} from '@ng-web-apis/common';\n\n// ...\nexport class Example {\n  private readonly userAgent = inject(WA_USER_AGENT);\n\n  areThereProblems = tuiIsEdge(this.userAgent);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiProgress in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiProgress component from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. The component is set up as standalone and includes other imports as well.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/progress-circle/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiProgress} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiProgress,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Basic Taiga UI Line Chart Implementation in HTML\nDESCRIPTION: Implementation of a tui-line-chart component with basic configuration properties including position coordinates (x,y), dimensions (width, height) and data value binding.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-line-chart\n  [x]=\"0\"\n  [y]=\"0\"\n  [width]=\"200\"\n  [height]=\"100\"\n  [value]=\"value\"\n></tui-line-chart>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiArcChart in Angular Standalone Component\nDESCRIPTION: This code snippet demonstrates how to import the TuiArcChart component from the Taiga UI library and include it in an Angular standalone component. The TuiArcChart is added to the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/arc-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiArcChart} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiArcChart,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiRingChart in Angular Standalone Component\nDESCRIPTION: Shows how to import and declare TuiRingChart from Taiga UI's addon-charts package in an Angular standalone component. The component is configured using standalone: true and includes TuiRingChart in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/ring-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiRingChart} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiRingChart,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input Tag with Reactive Forms in Angular\nDESCRIPTION: This snippet shows how to use the tui-input-tag component within a reactive form. It uses formGroup directive on the container and formControlName on the input tag component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-tag/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ng-container [formGroup]=\"formName\">\n  <tui-input-tag formControlName=\"controlName\"></tui-input-tag>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiBar Component in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiBar component from Taiga UI's chart addon package and include it in a standalone component's imports array. The example uses Angular's standalone component syntax with TypeScript.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiBar} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBar,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Progress Circle in HTML\nDESCRIPTION: Shows how to use the tui-progress-circle component with basic value and maximum attributes. The component visualizes progress as a circular indicator with a value of 70 out of maximum 100.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/progress-circle/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-progress-circle\n  [max]=\"100\"\n  [value]=\"70\"\n></tui-progress-circle>\n```\n\n----------------------------------------\n\nTITLE: Creating Taiga UI HTML Base Template\nDESCRIPTION: A basic HTML template for the Taiga UI project that includes the page structure, header with logo, GitHub star button, and a loading indicator. The template loads the Manrope font from Google Fonts and displays a simple loading message until the actual UI loads.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/src/index.html.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <title>Taiga UI</title>\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Manrope:wght@500;800&display=swap\"\n      rel=\"stylesheet\"\n    />\n  </head>\n\n  <body>\n    <header class=\"header\">\n      <h1>\n        <img\n          src=\"https://raw.githubusercontent.com/taiga-family/taiga-ui/main/projects/demo/src/assets/images/taiga.svg\"\n          alt=\"taiga ui logo\"\n          width=\"24\"\n        />\n        Taiga UI\n      </h1>\n\n      <iframe\n        src=\"https://ghbtns.com/github-btn.html?user=Taiga-family&repo=taiga-ui&type=star&count=true&size=large\"\n        frameborder=\"0\"\n        scrolling=\"0\"\n        width=\"170\"\n        height=\"30\"\n        title=\"GitHub\"\n      ></iframe>\n    </header>\n\n    <root>Loading Taiga UI...</root>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI Imports\nDESCRIPTION: This snippet demonstrates how to set up an Angular component using the standalone configuration and importing Taiga UI modules. It includes imports from '@taiga-ui/core' and '@taiga-ui/layout', and configures the component decorator with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/form/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiAppearance} from '@taiga-ui/core';\nimport {TuiCardLarge, TuiForm} from '@taiga-ui/layout';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCardLarge,\n    TuiAppearance,\n    TuiForm,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Bottom Sheet in HTML\nDESCRIPTION: This snippet shows how to use the tui-bottom-sheet component from Taiga UI to create a bottom sheet element. The component wraps the content that will be displayed in the bottom sheet.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bottom-sheet/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-bottom-sheet>Content</tui-bottom-sheet>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Preview Dialog in Angular Component\nDESCRIPTION: This TypeScript code demonstrates how to set up and use the TuiPreviewDialogService in an Angular component. It includes the necessary imports, injects the service, sets up a ViewChild for the preview template, and provides a method to open the preview dialog.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/preview/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {, inject, TemplateRef, ViewChild} from '@angular/core';\nimport {TuiPreviewDialogService} from '@taiga-ui/kit';\nimport {PolymorpheusContent} from '@taiga-ui/polymorpheus';\nimport {TuiDialogContext} from '@taiga-ui/core';\n\n@Component({\n  // ...\n})\nexport class Example {\n  private readonly previewDialogService = inject(TuiPreviewDialogService);\n\n  @ViewChild(`preview`)\n  readonly preview: TemplateRef<TuiDialogContext<void>>;\n\n  show() {\n    this.previewDialogService.open(this.preview).subscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Ring Chart in Angular HTML Template\nDESCRIPTION: This snippet shows how to use the tui-ring-chart component from Taiga UI in an Angular template. The component takes a 'value' input binding to display data in a ring chart format.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/ring-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-ring-chart [value]=\"value\"></tui-ring-chart>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiAxes in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiAxes component from @taiga-ui/addon-charts package and include it in a standalone Angular component's imports array. The component is configured as standalone using the standalone: true property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/axes/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAxes} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAxes,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Tabs with Click Events\nDESCRIPTION: Example of Taiga UI tabs using button elements with click event handlers. Uses two-way binding for activeItemIndex and click event handlers for tab interactions.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tabs/examples/import/template.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tui-tabs [(activeItemIndex)]=\"activeItemIndex\">\n  <button\n    tuiTab\n    (click)=\"onTabClick(1)\"\n  >\n    Page 1\n  </button>\n  <button\n    tuiTab\n    (click)=\"onTabClick(2)\"\n  >\n    Page 2\n  </button>\n</tui-tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Reorder Component in HTML\nDESCRIPTION: Angular template code showing how to implement the tui-reorder component with two-way data binding for items array and enabled state. The component allows for reordering of items through drag and drop when enabled.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/reorder/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-reorder\n  [(items)]=\"items\"\n  [(enabled)]=\"enabled\"\n></tui-reorder>\n```\n\n----------------------------------------\n\nTITLE: Opening alerts with PolymorpheusContent in Taiga UI\nDESCRIPTION: Method signature for opening an alert notification in Taiga UI. Takes content as PolymorpheusContent with TuiAlertContext and optional number options, and returns an Observable that completes when the alert is closed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/method.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nopen(\n    content: PolymorpheusContent<TuiAlertContext<number>>,\n    options: Partial<number> = {},\n): Observable<void>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiItemsWithMore in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiItemsWithMore component from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. This setup allows the component to use the TuiItemsWithMore functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/items-with-more/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiItemsWithMore} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiItemsWithMore,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Badge Component in HTML\nDESCRIPTION: This snippet demonstrates the usage of the Taiga UI Badge component. It sets the appearance to 'primary' and displays a dynamic value using Angular's interpolation syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badge/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-badge appearance=\"primary\">{{ value }}</tui-badge>\n```\n\n----------------------------------------\n\nTITLE: Structuring Header with Taiga UI Components in HTML\nDESCRIPTION: This code snippet illustrates the structure of a header using Taiga UI components. It utilizes custom elements and attributes such as tuiHeader, tuiTitle, tuiSubtitle, and tuiAccessories to create a well-organized header with a title, subtitle, and accessories section.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/header/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<header tuiHeader>\n  <hgroup tuiTitle>\n    <h1>Title</h1>\n    <p tuiSubtitle>Subtitle</p>\n  </hgroup>\n  <aside tuiAccessories>Accessories</aside>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Tag Components in HTML\nDESCRIPTION: This snippet shows two ways to use the Taiga UI tag component. The first example creates a simple tag, while the second demonstrates how to create a tag that functions as a clickable link.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tag/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-tag [value]=\"tag\"></tui-tag>\n<!--Use can use tag as link-->\n<a\n  tuiTag\n  href=\"https://somesite.com\"\n  target=\"_blank\"\n  [value]=\"tag\"\n></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI Imports\nDESCRIPTION: Sets up a standalone Angular component with necessary imports from Taiga UI library including form modules, data list components, and email pipe functionality. Uses the standalone component pattern with explicit imports declaration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/emails/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule} from '@angular/forms';\nimport {TuiDataList} from '@taiga-ui/core';\nimport {TuiDataListWrapper, TuiInputModule} from '@taiga-ui/kit';\nimport {TuiEmailsPipe} from '@taiga-ui/proprietary';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiEmailsPipe,\n    TuiInputModule,\n    TuiDataList,\n    TuiDataListWrapper,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Standalone Component with Taiga UI Phone Input\nDESCRIPTION: This snippet demonstrates how to import and configure the necessary modules for using Taiga UI's phone input component in an Angular standalone component. It also shows the setup of a reactive form with an initial phone number value.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-phone/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputPhoneModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    ReactiveFormsModule,\n    TuiInputPhoneModule,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl('+78005553535'),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDataListWrapper in a Standalone Angular Component with TypeScript\nDESCRIPTION: This code demonstrates how to import the TuiDataListWrapper component from the @taiga-ui/kit package and include it in a standalone Angular component's imports array. The imports array is used to specify the dependencies required by the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/data-list-wrapper/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDataListWrapper} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDataListWrapper,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiTablePagination in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiTablePagination component from the Taiga UI library and include it in the imports array of a standalone Angular component. The TuiTablePagination is likely used for implementing table pagination functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table-pagination/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiTablePagination} from '@taiga-ui/addon-table';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTablePagination,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiBottomSheet from Taiga UI in Angular Standalone Component\nDESCRIPTION: This code shows how to import the TuiBottomSheet component from the @taiga-ui/addon-mobile package and include it in the imports array of a standalone Angular component. This is the proper way to use Taiga UI components in Angular's standalone component architecture.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bottom-sheet/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiBottomSheet} from '@taiga-ui/addon-mobile';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBottomSheet,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Textfield with Input Slider in HTML\nDESCRIPTION: Combines a numeric input field with a range slider using Taiga UI components. The input supports currency prefix ($), percentage postfix (%), custom number formatting with 3 decimal precision, and is bound to a value model. The range slider includes customizable key steps, segments, and step size.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-slider/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiInputSlider\n    prefix=\"$\"\n    postfix=\"%\"\n    [min]=\"0\"\n    [max]=\"100\"\n    [tuiNumberFormat]=\"{precision: 3}\"\n    [(ngModel)]=\"value\"\n  />\n\n  <input\n    tuiSlider\n    type=\"range\"\n    [keySteps]=\"keySteps\"\n    [segments]=\"segments\"\n    [step]=\"step\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Standalone Component with Taiga UI Imports\nDESCRIPTION: Sets up a basic Angular standalone component with necessary Taiga UI imports including appearance and card layout modules. The component uses the standalone: true flag and imports specific Taiga UI modules through the imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-large/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiAppearance} from '@taiga-ui/core';\nimport {TuiCardLarge} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAppearance,\n    TuiCardLarge,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing TUI Compass Component in Angular HTML Template\nDESCRIPTION: A simple implementation of the TUI Compass component from Taiga UI that displays a compass widget. The component takes a degrees input binding to control the compass direction/orientation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/compass/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-compass [degrees]=\"degrees\"></tui-compass>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Buttons with Tooltips in HTML\nDESCRIPTION: Shows how to create Taiga UI buttons with tooltips using both direct text and template references. The tuiHintManual directive is used to control tooltip display behavior manually, and demonstrates both simple text tooltips and reusable template-based tooltips.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-manual/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiButton\n  type=\"button\"\n  tuiHint=\"Custom host with text tooltip\"\n  [tuiHintManual]=\"true\"\n>\n  Press me\n</button>\n\n<button\n  tuiButton\n  type=\"button\"\n  [tuiHint]=\"template\"\n  [tuiHintManual]=\"true\"\n>\n  Press that ↑\n</button>\n\n<ng-template #template>Reusable template</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Input with Angular Reactive Forms\nDESCRIPTION: Shows how to embed a Taiga UI phone input component within an Angular reactive form using formGroup and formControlName directives. The component allows users to input phone numbers with proper formatting and validation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-phone/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-phone formControlName=\"testValue\">Type phone number</tui-input-phone>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Large Taiga UI Card with Header in HTML\nDESCRIPTION: This code snippet demonstrates how to create a large card component using Taiga UI directives. It includes a floating appearance and a header with a title. The card is structured using nested div elements with specific Taiga UI attributes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-large/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  tuiCardLarge\n  tuiAppearance=\"floating\"\n>\n  <div tuiHeader>\n    <h2 tuiTitle>Header</h2>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing TuiScrollService in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to set up and use the TuiScrollService in a standalone Angular component. It shows the component decoration, service injection using the 'inject' function, and initialization of the scroll behavior in the ngOnInit lifecycle hook.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/services/scroll-service/examples/import/inject-service.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  standalone: true,\n  // ...\n  providers: [TuiScrollService],\n  // ...\n})\nexport class Example {\n  private tuiScrollService = inject(TuiScrollService);\n\n  ngOnInit() {\n    this.tuiScrollService.scroll$(this.elementRef.nativeElement, 500).subscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Textfield with ngModel Binding in Angular\nDESCRIPTION: Shows how to create a textfield input using Taiga UI's tui-textfield component with two-way data binding using ngModel directive. The component wraps a standard input element with the tuiTextfield directive for styling and functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/textfield/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiTextfield\n    [(ngModel)]=\"value\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Configuring TUI_DIALOGS_CLOSE Provider with Auth Service in Angular Component\nDESCRIPTION: Shows how to configure a standalone Angular component with a custom dialog close handler that uses AuthService. The provider uses a factory function to bind the dialog close behavior to the logout$ observable from the auth service.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/dialog/examples/import/dialogs-close-token.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  standalone: true,\n  // ...\n  providers: [\n    {\n      provide: TUI_DIALOGS_CLOSE,\n      deps: [AuthService],\n      useFactory: (authService) => authService.logout$,\n    },\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Bar Chart in HTML\nDESCRIPTION: This snippet shows how to use the tui-bar-chart component from Taiga UI in an Angular template. The [value] attribute is used to bind data to the chart, which should be provided by a corresponding TypeScript component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-bar-chart [value]=\"value\"></tui-bar-chart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Pager Component in HTML\nDESCRIPTION: This snippet shows how to use the tui-pager component from Taiga UI. It binds the 'index' and 'count' properties to control the current page and total number of pages respectively.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pager/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-pager\n  [index]=\"index\"\n  [count]=\"count\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Cell Layout with Taiga UI Components\nDESCRIPTION: Shows how to structure a cell layout using Taiga UI components including avatar, title with subtitle, and a button. The tuiCell directive creates a container for these elements, while tuiTitle and tuiSubtitle handle text hierarchy.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/cell/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiCell>\n  <tui-avatar src=\"...\"></tui-avatar>\n  <div tuiTitle>\n    Title\n    <div tuiSubtitle>Subtitle</div>\n  </div>\n  <button tuiButton>Action</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Documentation Page Component in Angular\nDESCRIPTION: TypeScript code for creating a standalone Angular component for a documentation page, including example code import and input variants.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAddonDoc} from '@taiga-ui/addon-doc';\n\n@Component({\n  standalone: true,\n  imports: [TuiAddonDoc, SuperComponent],\n})\nexport class App {}\n\n// ..\n\n@Component({\n  standalone: true,\n  selector: 'super',\n  templateUrl: './super.component.html',\n})\nexport class Super {\n  // Keys would be used as tabs for code example\n  readonly example = {\n    // import a file as a string\n    TypeScript: import('./examples/1/index.ts?raw'),\n    HTML: import('./examples/1/index.html?raw'),\n  };\n\n  readonly inputVariants = ['input 1', 'input 2'];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ripple Effect with Taiga UI Directive\nDESCRIPTION: Demonstrates how to add a ripple effect to a div element using the tuiRipple directive from Taiga UI. The ripple effect provides visual feedback when the element is clicked.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/ripple/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiRipple>...</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Combo Box with Data List in HTML\nDESCRIPTION: Demonstrates setting up a Taiga UI combo box component with a data list wrapper. The component uses two-way ngModel binding for value management and includes a stringify function for item content display. The data list wrapper uses the tuiDataList directive and accepts items array as input.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/stringify-content/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-combo-box\n  [stringify]=\"stringify\"\n  [(ngModel)]=\"value\"\n>\n  <tui-data-list-wrapper\n    *tuiDataList\n    [items]=\"items\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n  ></tui-data-list-wrapper>\n</tui-combo-box>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiCarousel in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiCarousel component from @taiga-ui/kit and include it in a standalone Angular component's imports array. It demonstrates the basic setup required to use the Taiga UI Carousel in an Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/carousel/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiCarousel} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCarousel,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Pie Chart in HTML\nDESCRIPTION: This code snippet shows how to use the tui-pie-chart component from Taiga UI. It binds a 'value' property to the chart, which likely contains the data to be displayed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pie-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-pie-chart [value]=\"value\"></tui-pie-chart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-to-Refresh with Taiga UI in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the tui-pull-to-refresh component from Taiga UI. It sets up the component with a pulled event handler, which triggers the onPulled() method when the user performs a pull-to-refresh action. The component wraps around the content that should be refreshed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pull-to-refresh/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-pull-to-refresh (pulled)=\"onPulled()\">content</tui-pull-to-refresh>\n```\n\n----------------------------------------\n\nTITLE: Implementing tui-input-inline Component with Angular FormControl\nDESCRIPTION: This snippet shows how to implement a Taiga UI inline input field with a placeholder. The input element is bound to an Angular FormControl named 'control' using the formControl directive for reactive form functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-inline/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-input-inline>\n  Placeholder\n  <input [formControl]=\"control\" />\n</tui-input-inline>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLink in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiLink component from the Taiga UI core package and include it in an Angular standalone component's imports array. It sets up the necessary configuration for using TuiLink within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/link/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiLink} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLink,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Chip Component with Primary Appearance in HTML\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI Chip component with the 'primary' appearance setting. The chip displays a dynamic value using Angular's interpolation syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/chip/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-chip appearance=\"primary\">{{ value }}</tui-chip>\n```\n\n----------------------------------------\n\nTITLE: Including TuiDocMainModule in Angular Template\nDESCRIPTION: HTML snippet showing how to use the TuiDocMain component in an Angular template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tui-doc-main>You can add content here, it will be shown below navigation in the sidebar</tui-doc-main>\n```\n\n----------------------------------------\n\nTITLE: Applying tuiMapper Filter in Angular Template\nDESCRIPTION: Shows how to use the tuiMapper pipe filter to transform an item using a custom mapper function with an additional argument. The filter takes three parameters: the item to transform, the mapper function, and an optional argument passed to the mapper.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/mapper/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{item | tuiMapper: mapper: someArg}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Angular Component with TuiButton Import\nDESCRIPTION: This snippet demonstrates how to create a standalone Angular component that imports the TuiButton component from the Taiga UI library. It includes the necessary imports and component decorator configuration with the standalone property set to true.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiButton} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiButton,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Table Pagination in Angular HTML Template\nDESCRIPTION: This snippet shows how to use the tui-table-pagination component from Taiga UI in an Angular template. It binds the total number of items, current page, and page size to the component using property binding and two-way binding.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table-pagination/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-table-pagination\n  [total]=\"total\"\n  [(page)]=\"page\"\n  [(size)]=\"size\"\n></tui-table-pagination>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Taiga UI Commerce Input Components in Angular\nDESCRIPTION: This snippet shows how to import commerce-related input components from Taiga UI's addon-commerce package and use them in a standalone Angular component. It includes TuiInputCard, TuiInputCVC, and TuiInputExpire components which are typically used together to create credit card input forms.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-card/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiInputCard, TuiInputCVC, TuiInputExpire} from '@taiga-ui/addon-commerce';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiInputCard,\n    TuiInputCVC,\n    TuiInputExpire,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using TuiKeyboardService in Angular Component\nDESCRIPTION: This snippet shows how to inject the TuiKeyboardService from Taiga UI's CDK and implement a toggle method in an Angular component class. It uses Angular's dependency injection system with the inject function.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/services/keyboard-service/examples/inject.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {inject} from '@angular/core';\nimport {TuiKeyboardService} from '@taiga-ui/cdk';\n\n// ...\nexport class Example {\n  private readonly keyboard = inject(TuiKeyboardService);\n\n  toggle(): void {\n    this.keyboard.toggle();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Radio Input with Angular Two-Way Binding\nDESCRIPTION: This snippet demonstrates how to create a radio input using Taiga UI's tuiRadio directive. It utilizes Angular's ngModel for two-way data binding with a 'value' property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/radio/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  tuiRadio\n  type=\"radio\"\n  [(ngModel)]=\"value\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI TuiSegmented in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiSegmented module from Taiga UI and configure it in a standalone Angular component. It shows the component decorator with imports array, including the TuiSegmented module.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/segmented/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSegmented} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSegmented,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Creating Taiga UI Links with tuiLink Directive in HTML\nDESCRIPTION: This snippet shows how to create styled links using the tuiLink directive from Taiga UI. It includes examples of a basic link and a link with an icon on the left side.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/link/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a\n  tuiLink\n  href=\"#\"\n>\n  Link\n</a>\n\n<a\n  tuiLink\n  iconStart=\"@tui.settings\"\n  href=\"#\"\n>\n  Link with an icon on the left\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options in tsconfig.json\nDESCRIPTION: This snippet defines the TypeScript compiler options for the Angular project. It includes settings for strict type checking, module resolution, target ECMAScript version, and Angular-specific compiler options. These settings ensure type safety and proper compilation of TypeScript code in the Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/configs.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"esModuleInterop\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"ES2015\",\n    \"module\": \"ES2022\",\n    \"useDefineForClassFields\": false,\n    \"lib\": [\"ES2022\", \"dom\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Bootstrap with Taiga UI Providers\nDESCRIPTION: Sets up the necessary providers for bootstrapping an Angular application with Taiga UI integration. Includes animation support and event plugins from the Taiga UI library.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/main-standalone.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {provideAnimations} from '@angular/platform-browser/animations';\nimport {NG_EVENT_PLUGINS} from '@taiga-ui/event-plugins';\n// ...\n\nbootstrapApplication(App, {\n  providers: [\n    provideAnimations(),\n    NG_EVENT_PLUGINS,\n    //...\n  ],\n}).catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Applying Fade Animation with Taiga UI in HTML\nDESCRIPTION: This snippet demonstrates how to use the tuiFade directive from Taiga UI to apply a fade animation to a div element. The content inside the div will be affected by the fade animation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/fade/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div tuiFade>\n  <!-- long text here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Title with Subtitles in HTML\nDESCRIPTION: Shows how to create a hierarchical title structure using Taiga UI's tuiTitle and tuiSubtitle directives. The example includes a main title with two subtitle elements, one before and one after the main title text.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/title/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h2 tuiTitle=\"s\">\n  <div tuiSubtitle>Caption</div>\n  I am a title\n  <div tuiSubtitle>I'm a subtitle</div>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiPagination in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiPagination component from the @taiga-ui/kit package and include it in the imports array of an Angular standalone component. This allows the component to use the TuiPagination functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pagination/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiPagination} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPagination,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Injecting TuiBreakpointService using Angular DI\nDESCRIPTION: Shows how to inject and use TuiBreakpointService from the Taiga UI Core library in a TypeScript class using Angular's inject function. The service is stored in a private readonly class property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/services/breakpoint-service/examples/inject-service.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiBreakpointService} from '@taiga-ui/core';\n\n// ...\nexport class Example {\n  private readonly breakpoint$ = inject(TuiBreakpointService);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Root Component in HTML\nDESCRIPTION: This snippet demonstrates how to set up the root component for a Taiga UI application. It uses the tui-root component to wrap the app content and includes a tui-sheets-host for overlay content projected using ngProjectAs.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/sheet/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-root>\n  <!-- Your app content -->\n  <tui-sheets-host ngProjectAs=\"tuiOverContent\"></tui-sheets-host>\n</tui-root>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTiles Component in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiTiles component from the @taiga-ui/kit package and include it in a standalone Angular component's imports array. This setup enables the use of TuiTiles functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tiles/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTiles} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTiles,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Legend Item in Angular Template\nDESCRIPTION: Shows how to use the tui-legend-item component from Taiga UI library, binding a value property and including content within the component tags.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/legend-item/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-legend-item [value]=\"value\">Content</tui-legend-item>\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Notification in Taiga UI\nDESCRIPTION: Demonstrates usage of the tui-badge-notification component to display a numeric notification badge with the value 10. This component is commonly used to show unread counts, notifications, or other numeric indicators in a UI.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badge-notification/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-badge-notification>10</tui-badge-notification>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Material Icons Assets in Angular Workspace\nDESCRIPTION: This configuration adds Taiga UI material icons to an Angular project's build assets. It copies all files from the @taiga-ui/icons-material source folder to the assets/taiga-ui/icons/ directory in the build output.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/icon/examples/import/material.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"demo\": {\n      \"architect\": {\n        \"build\": {\n          \"assets\": [\n            {\n              \"glob\": \"**/*\",\n              \"input\": \"node_modules/@taiga-ui/icons-material/src\",\n              \"output\": \"assets/taiga-ui/icons/\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with TuiIsPresent Pipe in Angular Template\nDESCRIPTION: Uses the TuiIsPresent pipe to conditionally render content when 'item' has a value. The pipe checks if the value is present (not null, undefined, or empty) before displaying it in the template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/is-present/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div *ngIf=\"item | tuiIsPresent\">{{item}}</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Styles in Angular.json\nDESCRIPTION: This JSON configuration specifies the Taiga UI styles to be included in the Angular project build. It includes the core theme, fonts, and optional mobile styles.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/angular-json-styles.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"my-project\": {\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"styles\": [\n              \"@taiga-ui/core/styles/taiga-ui-theme.less\",\n              \"@taiga-ui/core/styles/taiga-ui-fonts.less\",\n              \"@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less\" // optional\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI Date-Time Input\nDESCRIPTION: This snippet demonstrates how to set up an Angular component with Taiga UI's date-time input module. It imports necessary modules, configures the component as standalone, and sets up a reactive form with a single form control.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-time/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputDateTimeModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputDateTimeModule,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiFilter in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiFilter component from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. It showcases the basic setup required to use TuiFilter in an Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/filter/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiFilter} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFilter,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Using tuiSwipe Directive in HTML Template\nDESCRIPTION: Demonstrates how to attach the tuiSwipe directive to a div element. The directive listens for swipe gestures and executes the provided handler when triggered.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/swipe/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div (tuiSwipe)=\"...\"></div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with tuiAmount Pipe in Angular Templates\nDESCRIPTION: Shows three examples of using the tuiAmount pipe to format the number 100000 with different currency codes (978/EUR) and text alignment options. The pipe is used in combination with the async pipe for handling asynchronous formatting.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/amount/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- {{ 100000 | tuiAmount : currency : align | async }} -->\n<p>{{ 100000 | tuiAmount : '978' : 'left' | async }}</p>\n<p>{{ 100000 | tuiAmount : 'EUR' : 'right' | async }}</p>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFlagPipe in Standalone Angular Component\nDESCRIPTION: Shows how to properly import and configure TuiFlagPipe from @taiga-ui/core in a standalone Angular component. The component is set up with standalone: true and includes TuiFlagPipe in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/flag/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFlagPipe} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFlagPipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Clamp with Template Content in Taiga UI\nDESCRIPTION: Shows how to use the tui-line-clamp component with a template reference to display multi-line content with a line limit of 3. The content includes formatted text with line breaks and bold styling.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-clamp/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-line-clamp\n  [content]=\"content\"\n  [linesLimit]=\"3\"\n></tui-line-clamp>\n<ng-template #content>\n  Lorem ipsum\n  <br />\n  Gaudeamus igitur\n  <br />\n  <strong>Carpe diem</strong>\n  <br />\n  Veni, vidi, vici\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Preview Component Template with Taiga UI\nDESCRIPTION: Angular template implementing a preview component using Taiga UI's tui-preview directives. Features include a title, pagination controls, action buttons for delete and download operations, and an image display area using polymorpheus outlet.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/preview/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-template #preview>\n  <tui-preview>\n    <tui-preview-title>{{title}}</tui-preview-title>\n    <tui-preview-pagination\n      [length]=\"2\"\n      [(index)]=\"index\"\n    ></tui-preview-pagination>\n\n    <button\n      tuiIconButton\n      tuiPreviewAction\n      icon=\"@tui.trash\"\n      title=\"Delete\"\n      (click)=\"delete()\"\n    ></button>\n    <button\n      tuiIconButton\n      tuiPreviewAction\n      icon=\"@tui.download\"\n      title=\"Download\"\n      (click)=\"download()\"\n    ></button>\n\n    <img\n      *polymorpheusOutlet=\"previewContent as src\"\n      alt=\"\"\n      [src]=\"src\"\n    />\n  </tui-preview>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Styles in Angular Build Configuration\nDESCRIPTION: Defines the styles to be included in the build process for a project using Taiga UI. It references the core theme styles, font styles, and optionally the mobile addon styles. This configuration would typically be found in angular.json.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/project-json-styles.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        \"styles\": [\n          \"@taiga-ui/core/styles/taiga-ui-theme.less\",\n          \"@taiga-ui/core/styles/taiga-ui-fonts.less\",\n          \"@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less\" // optional\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiNotification in Angular Standalone Component\nDESCRIPTION: Shows how to import TuiNotification from @taiga-ui/core and include it in a standalone component's imports array. The component is defined using the standalone: true property and includes TuiNotification in its imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/notification/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiNotification} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiNotification,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Detection with Taiga UI Button\nDESCRIPTION: Shows how to add hover state detection to a Taiga UI button using the tuiHoveredChange event directive. The button listens for hover state changes and calls an onHovered method when the state changes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hovered-change/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  tuiButton\n  type=\"button\"\n  (tuiHoveredChange)=\"onHovered($event)\"\n>\n  Hover over me to reveal hidden text!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiChip Component in Angular\nDESCRIPTION: This code demonstrates how to import the TuiChip component from the Taiga UI kit and add it to an Angular component's imports array. It shows the standalone component pattern where components are directly imported in the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/chip/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiChip} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  imports: [\n    // ...\n    TuiChip,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiStepper in Standalone Angular Component\nDESCRIPTION: Shows how to import and declare the TuiStepper component from Taiga UI kit in a standalone Angular component. The component is imported from @taiga-ui/kit package and added to the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/stepper/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiStepper} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiStepper,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular TypeScript\nDESCRIPTION: This snippet demonstrates how to import Taiga UI components, set up a standalone Angular component, and create a FormGroup. It shows the usage of TuiTextfield and TuiInputPin from Taiga UI, along with Angular's form controls.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-pin/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTextfield} from '@taiga-ui/core';\nimport {TuiInputPin} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTextfield,\n    TuiInputPin,\n  ],\n  // ...\n})\nexport class Example {\n  readonly testForm = new FormGroup({\n    testValue: new FormControl(null),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Styling with Taiga UI in HTML\nDESCRIPTION: Shows how to apply a success status color to a span element using Taiga UI's tuiStatus directive with CSS variable. The directive uses the predefined positive status color variable from Taiga UI's theme.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/status/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span tuiStatus=\"var(--tui-status-positive)\">Success</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Checkbox with Angular Binding in HTML\nDESCRIPTION: This snippet shows how to create a checkbox input using Taiga UI components and Angular's ngModel for two-way data binding. It includes a label wrapper and sets the checkbox size to small.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/label/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<label tuiLabel>\n  <input\n    tuiCheckbox\n    type=\"checkbox\"\n    size=\"s\"\n    [(ngModel)]=\"selected\"\n  />\n  Label text\n</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Copying for Taiga UI Icons in Angular.json\nDESCRIPTION: This JSON configuration snippet defines how to copy Taiga UI icon assets during the Angular build process. It specifies the input directory in node_modules and the output directory in the project's assets folder.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/assets.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"my-project\": {\n      \"architect\": {\n        \"build\": {\n          // ...\n          \"assets\": [\n            {\n              \"glob\": \"**/*\",\n              \"input\": \"node_modules/@taiga-ui/icons/src\",\n              \"output\": \"assets/taiga-ui/icons\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Notification with TuiAlertService in Angular\nDESCRIPTION: This code demonstrates how to use TuiAlertService to display a custom notification component in a Taiga UI Angular application. It injects the alert service and INJECTOR, creates a PolymorpheusComponent with the CustomNotification component, and configures it with a label heading.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/lazy-module.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {PolymorpheusComponent} from '@taiga-ui/polymorpheus';\nimport {TuiAlertService} from '@taiga-ui/core';\nimport {inject, INJECTOR} from '@angular/core';\n\nimport {CustomNotification} from './custom-notification.component';\n\n//...\nexport class Example {\n  constructor() {\n    //...\n    inject(TuiAlertService)\n      .open(new PolymorpheusComponent(CustomNotification, inject(INJECTOR)), {\n        label: 'Heading',\n      })\n      .subscribe();\n  }\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Component Visibility Control in Angular HTML Templates\nDESCRIPTION: Shows two different techniques for controlling component visibility in Angular templates. The first uses CSS class binding with [class.hidden], while the second uses the structural *ngIf directive. Both examples include the tuiPresentChange event handler for visibility state changes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/present/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  [class.hidden]=\"!visible\"\n  (tuiPresentChange)=\"onPresentChange($event)\"\n>\n  I am a component hidden with CSS\n</div>\nor\n<div\n  *ngIf=\"visible\"\n  (tuiPresentChange)=\"onPresentChange($event)\"\n>\n  I am a component hidden with *ngIf\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiLoader in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiLoader component from Taiga UI and configure it in a standalone Angular component. It uses the tuiLoaderOptionsProvider to set custom options such as size, color inheritance, and overlay.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/loader/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLoader} from '@taiga-ui/core';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLoader,\n  ],\n  providers: [\n    tuiLoaderOptionsProvider({\n      size: 'l',\n      inheritColor: false,\n      overlay: true,\n    }),\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Adding Comment Tooltip with Taiga UI Directive\nDESCRIPTION: Shows how to use the tuiComment directive to add a tooltip-style comment below an HTML element. The directive takes a 'bottom' position parameter and displays the text 'comment' as tooltip content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/comment/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiComment=\"bottom\">comment</div>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTree in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiTree component from @taiga-ui/kit package and include it in a standalone Angular component's imports array. The example demonstrates the modern standalone component approach in Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tree/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTree} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTree,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular\nDESCRIPTION: This snippet demonstrates how to import TuiHint and TuiTooltip components from Taiga UI library and include them in an Angular component's imports array. It uses the standalone component feature of Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tooltip/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiHint} from '@taiga-ui/core';\nimport {TuiTooltip} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTooltip,\n    TuiHint,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Using Taiga UI Pin Component with Open State Control\nDESCRIPTION: Demonstrates the implementation of a Taiga UI Pin component displaying the number '16' with a dynamic open state controlled by a boolean binding. The component uses property binding for the open state via the [open] attribute.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pin/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-pin [open]=\"open\">16</tui-pin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Rating Component with Two-Way Data Binding in HTML\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI rating component (tui-rating) with Angular's ngModel directive for two-way data binding. The value property is bound to a component property named 'value', allowing for dynamic updates of the rating.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/rating/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-rating [(ngModel)]=\"value\"></tui-rating>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Copying for Taiga UI Icons in Angular JSON\nDESCRIPTION: This JSON configuration snippet defines how to copy Taiga UI icon assets from the node_modules directory to the project's assets folder during the Angular build process. It specifies the source glob pattern, input directory, and output directory for the icons.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/nx-assets.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        // ...\n        \"assets\": [\n          {\n            \"glob\": \"**/*\",\n            \"input\": \"node_modules/@taiga-ui/icons/src\",\n            \"output\": \"assets/taiga-ui/icons\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiFieldErrorPipe\nDESCRIPTION: Shows how to properly import TuiFieldErrorPipe from Taiga UI kit and configure it in a standalone Angular component's imports array. This setup enables form field error handling functionality in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/field-error/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFieldErrorPipe} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFieldErrorPipe,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCalendar in a Standalone Angular Component with TypeScript\nDESCRIPTION: This snippet demonstrates how to import the TuiCalendar component from the @taiga-ui/core package and include it in the imports array of a standalone Angular component. The example uses Angular's standalone component pattern where dependencies are explicitly imported at the component level.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiCalendar} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCalendar,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiInputCardGroup in Standalone Angular Component\nDESCRIPTION: Demonstrates how to import and declare the TuiInputCardGroup component from @taiga-ui/addon-commerce package in a standalone Angular component. Shows the proper import statement and component configuration using the standalone: true pattern.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-card-group/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiInputCardGroup} from '@taiga-ui/addon-commerce';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiInputCardGroup,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes with Taiga UI Dialog\nDESCRIPTION: Shows how to configure Angular routes incorporating a dialog using tuiGenerateDialogableRoute. The code sets up a parent route with a child dialog route using Taiga UI's dialog generation utility.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/routable/eager/examples/setup/routes.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = [\n  {\n    path: '',\n    component: MyPage,\n    children: [\n      tuiGenerateDialogableRoute(MyDialog, {\n        path: 'path/to/dialog',\n      }),\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Video with Taiga UI Directives in HTML\nDESCRIPTION: This code snippet shows how to create a video element with multiple sources using Taiga UI directives. It uses tuiMedia for media controls and tuiHdpi for conditional rendering of high-DPI video sources.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/media/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n  tuiMedia\n  controls\n>\n  <source\n    *tuiHdpi\n    src=\"4k.mp4\"\n    type=\"video/mp4\"\n  />\n  <source\n    src=\"1080p.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Initializing Angular Component with Taiga UI Appearance\nDESCRIPTION: This snippet defines an Angular component that imports the TuiAppearance module from Taiga UI. It's configured as a standalone component, which allows for more modular and self-contained component definitions in Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/appearance/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiAppearance} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAppearance,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Example with Taiga UI in TypeScript\nDESCRIPTION: This code defines a NotificationExample class that uses Taiga UI's TuiPopover and TuiAlertOptions. It injects the POLYMORPHEUS_CONTEXT and provides methods for completing the context with boolean values.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/alert/examples/import/custom-alert.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAlertOptions} from '@taiga-ui/core';\nimport {TuiPopover} from '@taiga-ui/cdk';\nimport {POLYMORPHEUS_CONTEXT} from '@taiga-ui/polymorpheus';\n\n//...\n\nexport class NotificationExample {\n  private readonly context: TuiPopover<TuiAlertOptions<boolean>, boolean> = inject(POLYMORPHEUS_CONTEXT);\n\n  ok() {\n    this.context.completeWith(true);\n  }\n\n  cancel() {\n    this.context.completeWith(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Base Packages\nDESCRIPTION: Command to install the required base packages (@taiga-ui/cdk and @taiga-ui/core) that are prerequisites for the commerce addon.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-commerce/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiNavigation\nDESCRIPTION: This snippet demonstrates how to import the TuiNavigation module from the Taiga UI library and include it in the imports array of a standalone Angular component. It showcases the basic structure of a component using the @Component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/navigation/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiNavigation} from '@taiga-ui/layout';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiNavigation,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Form with Custom Attributes in HTML\nDESCRIPTION: This snippet shows how to set up a form using Taiga UI custom attributes. It applies a floating appearance, large card style, and 'l' form size.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/form/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form\n  tuiAppearance=\"floating\"\n  tuiCardLarge\n  tuiForm=\"l\"\n>\n  <!-- Form content -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Filter Component with Angular Reactive Forms\nDESCRIPTION: This snippet shows how to integrate the tui-filter component within an Angular reactive form. The filter is bound to a form control named 'filters' and configured with handlers for badges and disabled items, along with size configuration and event binding for toggled items.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/filter/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"form\">\n  <tui-filter\n    formControlName=\"filters\"\n    [badgeHandler]=\"badgeHandler\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [items]=\"items\"\n    [size]=\"size\"\n    (toggledItem)=\"onToggledItemChange($event)\"\n  ></tui-filter>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiLike Component Import in Angular\nDESCRIPTION: Shows how to import the TuiLike component from @taiga-ui/kit and include it in a standalone Angular component's imports array. The component is configured as standalone and includes necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/like/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiLike} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLike,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTouchable in Standalone Component\nDESCRIPTION: Shows the import statement and component configuration for using TuiTouchable from Taiga UI's mobile addon package in a standalone Angular component. The component is included in the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/touchable/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTouchable} from '@taiga-ui/addon-mobile';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTouchable,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Applying Surface Directive in HTML\nDESCRIPTION: Demonstrates how to apply the tuiSurface directive to a div element to add surface styling. The tuiSurface directive is used to create a styled surface container that follows Taiga UI design patterns.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/surface/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiSurface>\n  <!-- Content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing tuiAutoFocus on HTML and Taiga UI Components\nDESCRIPTION: Shows two examples of applying the tuiAutoFocus directive: first on a basic HTML div element with tabindex, and second on a Taiga UI input component with ngModel binding. The directive automatically sets focus on the element when rendered.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/auto-focus/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Usual HTML element -->\n<div\n  tuiAutoFocus\n  tabindex=\"0\"\n></div>\n\n<!-- Or focusable component of Taiga UI -->\n<tui-input\n  tuiAutoFocus\n  [(ngModel)]=\"model\"\n>\n  Input\n</tui-input>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI FontAwesome Icons Assets in Angular Project\nDESCRIPTION: JSON configuration that specifies how to include Taiga UI FontAwesome icons in an Angular project build. It instructs the build process to copy all files from the '@taiga-ui/icons-fontawesome/src' directory in node_modules to the 'assets/taiga-ui/icons/' directory in the build output.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/icon/examples/import/font-awesome.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"demo\": {\n      \"architect\": {\n        \"build\": {\n          \"assets\": [\n            {\n              \"glob\": \"**/*\",\n              \"input\": \"node_modules/@taiga-ui/icons-fontawesome/src\",\n              \"output\": \"assets/taiga-ui/icons/\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Core Packages for Charts\nDESCRIPTION: Command to install the required base packages (@taiga-ui/cdk and @taiga-ui/core) for using the charts addon.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-charts/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular\nDESCRIPTION: Demonstrates importing TuiInputSearch from the layout package and TuiTextfield from the core package, then including them in a standalone component's imports array. Shows the basic structure of a standalone Angular component with Taiga UI dependencies.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-search/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiInputSearch} from '@taiga-ui/layout';\nimport {TuiTextfield} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTextfield,\n    TuiInputSearch,\n  ],\n  // ...\n})\nexport class MyComponent {}\n```\n\n----------------------------------------\n\nTITLE: Implementing tuiActiveZoneChange with Taiga UI Buttons in HTML\nDESCRIPTION: This code demonstrates the use of the tuiActiveZoneChange directive on a div element containing two Taiga UI buttons. The directive triggers the onActiveZone function when the active zone changes within the div.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/active-zone/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div (tuiActiveZoneChange)=\"onActiveZone($event)\">\n  <button\n    tuiButton\n    type=\"button\"\n  >\n    Button 1\n  </button>\n  <button\n    tuiButton\n    type=\"button\"\n  >\n    Button 2\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiBarSet in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiBarSet component from @taiga-ui/addon-charts and include it in the imports array of a standalone Angular component. This allows the component to use TuiBarSet in its template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar-set/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiBarSet} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBarSet,\n  ],\n})\n// ...\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Textarea in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import and configure the necessary modules for using Taiga UI's Textarea component in an Angular standalone component. It also shows the setup of a basic reactive form with a textarea field.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/textarea/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiTextareaModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiTextareaModule,\n  ],\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl('Content'),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Pulse Component in HTML\nDESCRIPTION: This snippet shows how to use the tui-pulse component from Taiga UI in an Angular template. The [playing] attribute is bound to a 'value' variable, allowing dynamic control of the pulse animation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pulse/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-pulse [playing]=\"value\"></tui-pulse>\n```\n\n----------------------------------------\n\nTITLE: Rendering Taiga UI Components with Async Stream in Angular\nDESCRIPTION: This snippet demonstrates how to use Taiga UI components in conjunction with Angular's async pipe and template binding. It shows a paragraph displaying a stream value, a Taiga UI icon with a tooltip, and a delete button. The template uses the tuiLet directive for efficient async handling.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/let/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ng-container *tuiLet=\"someStream | async as streamValue\">\n  <p>\n    {{streamValue}}\n    <tui-icon [tuiTooltip]=\"template\"></tui-icon>\n  </p>\n  <button\n    tuiButton\n    type=\"button\"\n  >\n    Delete {{streamValue}}\n  </button>\n  <ng-template #template>{{streamValue}} is a current value of a someStream</ng-template>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Thumbnail Card with Visa Payment System\nDESCRIPTION: Shows how to implement a tui-thumbnail-card component with Visa payment system specified. The card displays a number (1234) as its content and includes a 'logo' CSS class.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/thumbnail-card/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-thumbnail-card\n  class=\"logo\"\n  paymentSystem=\"visa\"\n>\n  {{ 1234 }}\n</tui-thumbnail-card>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Taiga UI Project\nDESCRIPTION: Command to install project dependencies using npm. This is the first step in setting up the development environment for contributing to Taiga UI.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI in TypeScript\nDESCRIPTION: This snippet shows the setup of an Angular standalone component using Taiga UI form elements. It imports FormsModule from Angular, and TuiTextfield and TuiSelect from Taiga UI. The component is configured with these imports and initializes a 'value' property as null.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/select/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule} from '@angular/forms';\nimport {TuiTextfield} from '@taiga-ui/core';\nimport {TuiSelect} from '@taiga-ui/kit';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiTextfield,\n    TuiSelect,\n  ],\n})\nexport class Example {\n  value: null = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Progress Bar in HTML\nDESCRIPTION: This code snippet demonstrates how to create a progress bar using the Taiga UI framework. It uses the tuiProgressBar directive on a <progress> element, setting the maximum value to 5, defining 5 segments, and setting the current value to 3.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/progress-segmented/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<progress\n  tuiProgressBar\n  [max]=\"5\"\n  [segments]=\"5\"\n  [value]=\"3\"\n></progress>\n```\n\n----------------------------------------\n\nTITLE: Adding Clear Button to Taiga UI Input\nDESCRIPTION: Shows how to enhance a Taiga UI input field with a cleaner button functionality by applying the tuiTextfieldCleaner directive to the wrapper div. The directive enables a clear button that appears when the input contains text.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/textfield-controller/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"wrapper\"\n  [tuiTextfieldCleaner]=\"true\"\n>\n  <tui-input>...</tui-input>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiCalendarMonth in Standalone Component\nDESCRIPTION: Shows how to import TuiCalendarMonth from @taiga-ui/kit package and include it in a standalone component's imports array. This setup enables the use of the calendar month component within the Example component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/calendar-month/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiCalendarMonth} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCalendarMonth,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiSwipeActions in Angular Component\nDESCRIPTION: This code snippet shows how to import TuiSwipeActions from the Taiga UI library and use it in a standalone Angular component. It demonstrates the component setup with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/swipe-action/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSwipeActions} from '@taiga-ui/addon-mobile';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSwipeActions,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiAutoFocus in Angular Component with Custom Options\nDESCRIPTION: This snippet demonstrates how to set up a standalone Angular component that uses TuiAutoFocus from Taiga UI. It includes custom configuration for auto-focus behavior, such as setting a delay and preventing scroll.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/auto-focus/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAutoFocus,\n  ],\n  providers: [\n    tuiAutoFocusOptionsProvider({\n      delay: 300, // NaN = no delay/sync\n      preventScroll: true,\n    }),\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Loading Directive Usage in Angular Template\nDESCRIPTION: Shows how to apply the tuiSkeleton directive to a span element to create a loading placeholder effect. The directive is set to true to activate the skeleton loading animation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/skeleton/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span [tuiSkeleton]=\"true\">Loading..</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiInputNumber Component with Custom Options in Angular\nDESCRIPTION: This snippet shows how to create a standalone Angular component that uses TuiInputNumber with custom default options. It demonstrates importing necessary modules, setting up global configuration using tuiInputNumberOptionsProvider, and creating a form control for the input.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-number/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiNumberFormat} from '@taiga-ui/core';\nimport {TuiInputNumber, tuiInputNumberOptionsProvider} from '@taiga-ui/kit';\n\n@Component({\n  standalone: true,\n  imports: [ReactiveFormsModule, TuiInputNumber, TuiNumberFormat],\n  providers: [\n    /**\n     * (Optional)\n     * Customize default behavior for all InputNumber-s\n     * inside specific Dependency Injection scope\n     */\n    tuiInputNumberOptionsProvider({\n      min: 0,\n      max: 100,\n      postfix: '%',\n    }),\n  ],\n})\nexport class Example {\n  protected readonly control = new FormControl(42);\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - v4.7.0 Taiga UI Update\nDESCRIPTION: Changelog entry documenting bug fixes and feature updates for version 4.7.0 of Taiga UI, including addon-doc improvements and core component enhancements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.7.0](https://github.com/taiga-family/taiga-ui/compare/v4.6.0...v4.7.0) (2024-09-16)\n\n### 🚀 Features\n\n- **addon-doc:** `API` add new component ([#9015](https://github.com/taiga-family/taiga-ui/issues/9015))\n  ([a87b608](https://github.com/taiga-family/taiga-ui/commit/a87b60879bf6318a04b1b83c5d2a7e04227288f1))\n- **addon-doc:** adds keybindings to the search field ([#8830](https://github.com/taiga-family/taiga-ui/issues/8830))\n  ([8d03673](https://github.com/taiga-family/taiga-ui/commit/8d03673bc6597dfaceb54ec1512acf96cb8eb23b))\n- **core:** `Appearance` allow multiple modes ([#9042](https://github.com/taiga-family/taiga-ui/issues/9042))\n  ([e1853dd](https://github.com/taiga-family/taiga-ui/commit/e1853dd2842352cbe67f7c82447250b206c49db3))\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTabs in Standalone Angular Component\nDESCRIPTION: Shows how to import and configure the TuiTabs component from @taiga-ui/kit package in a standalone Angular component. The example demonstrates the proper import statement and component configuration using the standalone: true property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tabs/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTabs} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTabs,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Taiga UI Multi-Date Input in a Standalone Angular Component\nDESCRIPTION: This snippet demonstrates how to set up a standalone Angular component with Taiga UI's multi-date input. It imports the necessary Angular and Taiga UI modules and creates a form control that accepts an array of dates.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-multi/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputDateMultiModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    ReactiveFormsModule,\n    TuiInputDateMultiModule,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl([]),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI\nDESCRIPTION: This code sets up a standalone Angular component named 'Example'. It imports the TuiSurface module from Taiga UI's core package. The component is declared as standalone and includes TuiSurface in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/surface/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSurface} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSurface,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Setting First Day of Week in Taiga UI Angular Component\nDESCRIPTION: This TypeScript code configures a standalone Angular component to use Sunday as the first day of the week in Taiga UI. It imports necessary types from Taiga UI packages and uses dependency injection to provide the custom configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/tokens/examples/7/provide-first-day-of-week-token.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDayOfWeek} from '@taiga-ui/cdk';\nimport {TUI_FIRST_DAY_OF_WEEK} from '@taiga-ui/core';\n\n@Component({\n  standalone: true,\n  // ...\n  providers: [\n    {\n      provide: TUI_FIRST_DAY_OF_WEEK,\n      useValue: TuiDayOfWeek.Sunday,\n    },\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiSidebar\nDESCRIPTION: Shows how to import and configure TuiSidebar and TuiActiveZone components in a standalone Angular component. Includes basic toggle functionality for controlling the sidebar's open state.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/sidebar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiSidebar} from '@taiga-ui/addon-mobile';\nimport {TuiActiveZone} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSidebar,\n    TuiActiveZone,\n  ],\n  // ...\n})\nexport class Example {\n  open = false;\n\n  toggle(open: boolean) {\n    this.open = open;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiCopyProcessor in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiCopyProcessor from the @taiga-ui/core package and include it in the imports array of a standalone Angular component. The TuiCopyProcessor is likely used for handling copy functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/copy-processor/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiCopyProcessor} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCopyProcessor,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiInputMonth Component in Angular\nDESCRIPTION: Demonstrates how to set up a standalone Angular component with Taiga UI month input integration. Shows required module imports including FormsModule and Taiga UI components, along with basic value initialization using TuiMonth type.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-month/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule} from '@angular/forms';\nimport {TuiTextfield} from '@taiga-ui/core';\nimport {TuiInputMonth} from '@taiga-ui/kit';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiTextfield,\n    TuiInputMonth,\n  ],\n})\nexport class Example {\n  value: TuiMonth | null = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - v4.6.0 Taiga UI Update\nDESCRIPTION: Changelog entry listing bug fixes for version 4.6.0 of Taiga UI, addressing issues in addon-commerce, addon-mobile, and other core components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.6.0](https://github.com/taiga-family/taiga-ui/compare/v4.5.0...v4.6.0) (2024-09-10)\n\n### 🐞 Bug Fixes\n\n- **addon-commerce:** `InputCardGroup` fix autofill styles\n  ([#8794](https://github.com/taiga-family/taiga-ui/issues/8794))\n  ([de3a923](https://github.com/taiga-family/taiga-ui/commit/de3a9230508fccf9224023287ec35d3de07aabd8))\n- **addon-mobile:** `Card` fix paddings on mobile devices\n  ([#8949](https://github.com/taiga-family/taiga-ui/issues/8949))\n  ([12ebe35](https://github.com/taiga-family/taiga-ui/commit/12ebe35a0e21805fa3e3d8e57251f9c8559b8285))\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDropdown in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiDropdown component from the Taiga UI core library and include it in the imports array of a standalone Angular component. The component is set up as standalone and imports TuiDropdown along with other unspecified imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-selection/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiDropdown} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDropdown,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Bar Component in HTML\nDESCRIPTION: This code demonstrates how to use the tui-bar component from Taiga UI, binding a dynamic value to control the bar's state. The value property determines the current progress or level displayed by the bar component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-bar [value]=\"value\"></tui-bar>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiBarChart in Angular Component\nDESCRIPTION: This code snippet demonstrates how to import the TuiBarChart component from the Taiga UI addon-charts package and include it in the imports array of a standalone Angular component. It sets up the basic structure for using the TuiBarChart in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiBarChart} from '@taiga-ui/addon-charts';\n\n//...\n\n@Component({\n  standalone: true,\n  imports: [\n    //  ...\n    TuiBarChart,\n  ],\n  //...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiPrimitiveTextfieldModule in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiPrimitiveTextfieldModule from Taiga UI's legacy package and include it in a standalone Angular component's imports array. The module is necessary for using primitive textfield functionality in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/primitive-textfield/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiPrimitiveTextfieldModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPrimitiveTextfieldModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiPager in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiPager component from the Taiga UI kit and use it in an Angular standalone component. It shows the import statements and the component decorator with the standalone and imports configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pager/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiPager} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPager,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiElasticSticky Component with Scale Handling\nDESCRIPTION: Angular component setup showing integration of TuiElasticSticky and TuiScrollbar from Taiga UI. Includes scale handling logic with a clamp function to restrict scaling between 50% and 100%.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/elastic-sticky/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiElasticSticky} from '@taiga-ui/addon-mobile';\nimport {TuiScrollbar} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiScrollbar,\n    TuiElasticSticky,\n  ],\n  // ...\n})\nexport class Example {\n  scale = 1;\n\n  // ...\n\n  onElastic(scale: number) {\n    this.scale = clamp(scale, 0.5, 1); // We do not want to scale below 50%\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiPan in Angular Standalone Component\nDESCRIPTION: This code snippet demonstrates how to import the TuiPan component from the Taiga UI CDK and include it in the imports array of an Angular standalone component. The TuiPan component is likely used for handling pan gestures in the user interface.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/pan/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiPan} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPan,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing TuiInputPhoneInternational with Angular Reactive Forms in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a component that uses the TuiInputPhoneInternational component from Taiga UI's experimental library with Angular Reactive Forms. It initializes a form with a phone number value and specifies a list of country codes to be displayed in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-phone-international/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport type {TuiCountryIsoCode} from '@taiga-ui/i18n';\nimport {TuiTextfield} from '@taiga-ui/core';\nimport {TuiInputPhoneInternational} from '@taiga-ui/experimental';\n\n@Component({\n  standalone: true,\n  imports: [ReactiveFormsModule, TuiInputPhoneInternational],\n  // ...\n})\nexport class Example {\n  readonly testForm = new FormGroup({\n    testValue: new FormControl('+78005553535'),\n  });\n\n  readonly countries: ReadonlyArray<TuiCountryIsoCode> = ['RU', 'KZ', 'UA', 'BY'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiTagModule with Custom Options in Angular Component\nDESCRIPTION: Shows how to set up a standalone Angular component that uses the TuiTagModule from Taiga UI with custom default options for size and status using tuiTagOptionsProvider. The configuration sets the tag size to large ('l') and status to 'success'.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tag/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTagModule, tuiTagOptionsProvider} from '@taiga-ui/legacy';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [TuiTagModule],\n  providers: [\n    tuiTagOptionsProvider({\n      size: 'l',\n      status: 'success',\n    }),\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Standalone Angular Component with Taiga UI Date Range Input\nDESCRIPTION: This snippet demonstrates how to configure a standalone Angular component with Taiga UI's date range input. It shows the required imports from Angular's forms modules and Taiga UI's legacy components, and includes a basic form group setup.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date-range/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputDateRangeModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputDateRangeModule,\n  ],\n  // ...\n})\nexport class Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiColorPickerModule in Angular\nDESCRIPTION: This code snippet demonstrates how to import the TuiColorPickerModule from the @taiga-ui/legacy package and include it in the imports array of an Angular module. The module is declared as standalone and uses the TuiColorPickerModule along with other unspecified imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-color/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiColorPickerModule} from '@taiga-ui/legacy';\n\n// ...\n\n@NgModule({\n  standalone: true,\n  imports: [\n    // ...\n    TuiColorPickerModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiRating Component in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiRating component from Taiga UI kit and use it in a standalone Angular component. The example demonstrates the basic component setup with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/rating/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiRating} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiRating,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiPieChart in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiPieChart component from @taiga-ui/addon-charts and include it in a standalone Angular component's imports array. This setup enables the use of the pie chart functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pie-chart/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiPieChart} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPieChart,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Hint with Taiga UI in HTML\nDESCRIPTION: This snippet demonstrates how to add a pointer hint to a div element using Taiga UI directives. The tuiHintPointer directive enables the pointer functionality, while tuiHint sets the hint text.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-pointer/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  tuiHintPointer\n  tuiHint=\"Hint text\"\n>\n  Block with pointer hint\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Month Range Input\nDESCRIPTION: Demonstrates setting up a standalone Angular component with form handling capabilities and Taiga UI's month range input module. The example includes necessary imports, component configuration, and a basic form group setup.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-month-range/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputMonthRangeModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputMonthRangeModule,\n  ],\n  // ...\n})\nexport class Example {\n  readonly testForm = new FormGroup({\n    testValue: new FormControl(null),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDataList in Angular Standalone Component\nDESCRIPTION: Shows how to import TuiDataList from @taiga-ui/core and include it in a standalone component's imports array. This setup enables the use of TuiDataList functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/data-list/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDataList} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDataList,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing @tuiPure Decorator in Angular Component\nDESCRIPTION: This code snippet demonstrates the use of the @tuiPure decorator in an Angular component class. It is applied to a getter method for complex calculations and a class method with parameters. The @tuiPure decorator is likely used for memoization or performance optimization.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/pure/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  standalone: true,\n  // ..\n})\nexport class Example {\n  @tuiPure\n  get complexCalculationWithFixedResult(): number {\n    // ...\n  }\n\n  @tuiPure\n  someMethod(arg1: number, arg2: {}): {} {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TaigaUI Push Notification\nDESCRIPTION: Demonstrates the usage of tui-push component with a heading, icon and link button. Shows how to combine TaigaUI elements like tui-icon and tuiLink directive within a push notification.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/push/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-push heading=\"1.21 Gigawatts!?!\">\n  <tui-icon icon=\"@tui.clock\" />\n  This is heavy!\n  <button tuiLink>Great Scott!</button>\n</tui-push>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDateFormat in Angular Standalone Component\nDESCRIPTION: Shows how to properly import and configure TuiDateFormat from Taiga UI core package within an Angular standalone component declaration. The component is defined as standalone and includes TuiDateFormat in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/date-format/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDateFormat} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDateFormat,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiAmountPipe in Standalone Component\nDESCRIPTION: Example showing how to import TuiAmountPipe from @taiga-ui/addon-commerce package and include it in a standalone component's imports array. This setup enables using the amount pipe functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/amount/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAmountPipe} from '@taiga-ui/addon-commerce';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAmountPipe,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiPin Component in Angular\nDESCRIPTION: This code snippet shows how to import the TuiPin component from Taiga UI kit and use it in a standalone Angular component. It demonstrates the basic structure of a component using Taiga UI.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pin/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiPin} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPin,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Dropdown Selection in Angular Template\nDESCRIPTION: Demonstrates how to create a dropdown selection component using Taiga UI's tuiDropdownSelection directive. The template consists of a host element with the dropdown directive and a separate template for the dropdown content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-selection/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  tuiDropdownSelection\n  [tuiDropdown]=\"content\"\n>\n  Host element\n</div>\n\n<ng-template #content>Dropdown content</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import Taiga UI components from different packages (@taiga-ui/core, @taiga-ui/kit, @taiga-ui/layout) and register them in an Angular standalone component using the imports array. The Example component is configured as a standalone component that uses these Taiga UI components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/card-collapsed/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiButton, TuiTitle} from '@taiga-ui/core';\nimport {TuiExpand, TuiChevron} from '@taiga-ui/kit';\nimport {TuiCard, TuiHeader} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCard,\n    TuiHeader,\n    TuiTitle,\n    TuiButton,\n    TuiChevron,\n    TuiExpand,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiDropdown in Angular Standalone Component\nDESCRIPTION: Shows how to import TuiDropdown from Taiga UI core and include it in a standalone component's imports array. The example demonstrates the basic setup required to use TuiDropdown in an Angular component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-context/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDropdown} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDropdown,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiIcon in a Standalone Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiIcon component from the Taiga UI Core package and include it in a standalone component's imports array. The component is set up as standalone with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/icon/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiIcon} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiIcon,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiSkeleton in Standalone Angular Component\nDESCRIPTION: Shows the basic setup of a standalone Angular component that imports the TuiSkeleton component from @taiga-ui/kit. The component is configured as standalone and includes TuiSkeleton in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/skeleton/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSkeleton} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSkeleton,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiResizable Components in Angular Standalone Component\nDESCRIPTION: Demonstrates importing TuiResizable and TuiResizer components from @taiga-ui/cdk package and including them in a standalone Angular component's imports array. These components provide resizing functionality for UI elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/resizer/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiResizable, TuiResizer} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiResizable,\n    TuiResizer,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiHint in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiHint component from the Taiga UI core package and include it in the imports array of a standalone Angular component. It sets up the component to use TuiHint along with other potential imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-describe/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiHint} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHint,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiIsPresentPipe\nDESCRIPTION: Shows how to import TuiIsPresentPipe from Taiga UI CDK and include it in a standalone component's imports array. The component is configured using the standalone: true property and includes the pipe in its imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/is-present/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiIsPresentPipe} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiIsPresentPipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing tui-bar-set Component with Value Binding in HTML\nDESCRIPTION: Simple implementation of the tui-bar-set component from Taiga UI, binding a value property to control the component's display. The value property likely determines the bar's displayed data.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/bar-set/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-bar-set [value]=\"value\"></tui-bar>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiMapperPipe in Standalone Component\nDESCRIPTION: Shows how to import TuiMapperPipe from @taiga-ui/cdk package and include it in a standalone Angular component's imports array. This allows using the mapper pipe functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/mapper/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiMapperPipe} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    //    ...\n    TuiMapperPipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Icon Assets Build Path\nDESCRIPTION: Angular project configuration that specifies how to copy Taiga UI icons from node_modules to the project's assets directory. Defines the source glob pattern and output destination for icon assets.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/icon/examples/import/lucide.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"demo\": {\n      \"architect\": {\n        \"build\": {\n          \"assets\": [\n            {\n              \"glob\": \"**/*\",\n              \"input\": \"node_modules/@taiga-ui/icons/src\",\n              \"output\": \"assets/taiga-ui/icons/\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI Slider Input\nDESCRIPTION: This snippet demonstrates how to set up an Angular component using Taiga UI's input slider. It imports necessary modules from Angular forms and Taiga UI, configures the component as standalone, and includes required imports. The component also initializes a 'value' property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-slider/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {FormsModule} from '@angular/forms';\nimport {TuiNumberFormat, TuiTextfield} from '@taiga-ui/core';\nimport {TuiInputSlider} from '@taiga-ui/kit';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    TuiTextfield,\n    TuiInputSlider,\n    TuiNumberFormat,\n  ],\n  // ...\n})\nexport class Example {\n  value = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiHighlight in Standalone Angular Component\nDESCRIPTION: Shows how to import TuiHighlight from Taiga UI Kit and include it in a standalone Angular component's imports array. The component is configured using the standalone: true property and includes TuiHighlight in its imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/highlight/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiHighlight} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHighlight,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLet in Standalone Angular Component with Taiga UI\nDESCRIPTION: This snippet demonstrates how to import the TuiLet component from the Taiga UI CDK and include it in the imports array of a standalone Angular component. TuiLet is likely used for template rendering or structural directives within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/let/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLet} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLet,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Portal Host Content Projection in Taiga UI Root Component\nDESCRIPTION: Demonstrates how to project a portal host component into the Taiga UI root element using the ngProjectAs directive to specify content placement. The portal host is injected into a specific content slot of the root component for managing dynamic content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/portals/examples/setup/insert-host.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-root>\n\n    <ng-container ngProjectAs=\"tuiOverContent\">\n        <my-portal-host></my-portal-host>\n    </ng-container>\n\n</tui-root>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFormatDatePipe in Angular Standalone Component\nDESCRIPTION: Shows how to import TuiFormatDatePipe from Taiga UI core and include it in a standalone component's imports array. The component is configured as standalone with necessary imports setup.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/format-date/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFormatDatePipe} from '@taiga-ui/core';\n\n//...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFormatDatePipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Line Days Chart in HTML\nDESCRIPTION: This snippet shows how to use the tui-line-days-chart component from Taiga UI. It sets up a chart with a fixed y-axis value, height, and binds a value property for data input.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-days-chart/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-line-days-chart\n  [y]=\"0\"\n  [height]=\"100\"\n  [value]=\"value\"\n></tui-line-days-chart>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiValidator in Standalone Angular Component\nDESCRIPTION: Shows how to properly import the TuiValidator from Taiga UI CDK package and include it in a standalone component's imports array. The component is configured as standalone with necessary imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/validator/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiValidator} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiValidator,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes with Taiga UI Dialog\nDESCRIPTION: Sets up Angular route configuration using tuiGenerateDialogableRoute for lazy loading dialog components. Demonstrates nested routing with a main page component and a dynamically imported dialog component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/routable/lazy/examples/setup/routes.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = [\n  {\n    path: '',\n    component: MyPage,\n    children: [\n      tuiGenerateDialogableRoute(async () => import('./dialog.component'), {\n        path: 'path/to/dialog',\n      }),\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Importing TuiHint in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiHint component from Taiga UI core package and include it in a standalone component's imports array. Demonstrates the proper syntax for standalone component configuration with TypeScript decorators.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-manual/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiHint} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHint,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiHovered in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiHovered module from @taiga-ui/cdk and include it in the imports array of a standalone Angular component. The TuiHovered module likely provides hover-related functionality for UI elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hovered-change/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiHovered} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHovered,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDropdown in Standalone Angular Component\nDESCRIPTION: Demonstrates importing TuiDropdown from @taiga-ui/core package and including it in a standalone component's imports array. Shows the basic structure of a standalone component definition with proper imports configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDropdown} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDropdown,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFilterByInputPipe in Standalone Component\nDESCRIPTION: Shows the configuration of a standalone Angular component with the TuiFilterByInputPipe imported from the Taiga UI kit library. The pipe is included in the component's imports array for use within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/filter-by-input/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFilterByInputPipe} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFilterByInputPipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiAppBar from Taiga UI in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiAppBar component from Taiga UI's layout package and use it in an Angular standalone component. The code shows the proper import statement and how to include the component in the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/app-bar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAppBar} from '@taiga-ui/layout';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAppBar,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiActionBar in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiActionBar component from @taiga-ui/kit and include it in a standalone Angular component's imports array. Demonstrates the basic setup pattern for using Taiga UI components in standalone components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/action-bar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiActionBar} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    TuiActionBar,\n    // ...\n  ],\n  // ...\n})\nexport class App {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Taiga UI Components in Angular\nDESCRIPTION: This code snippet demonstrates how to import and configure Taiga UI components within an Angular component. It imports TuiHeader and TuiTitle from Taiga UI modules and sets up a standalone component with these imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/header/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiHeader} from '@taiga-ui/layout';\nimport {TuiTitle} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHeader,\n    TuiTitle,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Segmented Control in HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-segmented component to create a tabbed interface. It binds the activeItemIndex to a variable 'index' for two-way data binding, allowing the active tab to be tracked and updated.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/segmented/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-segmented [(activeItemIndex)]=\"index\">\n  <button>Tab 1</button>\n  <button>Tab 2</button>\n  <button>Tab 3</button>\n</tui-segmented>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDropdown in Angular Standalone Component\nDESCRIPTION: Shows how to import the TuiDropdown component from @taiga-ui/core package and include it in a standalone component's imports array. This setup enables the use of TuiDropdown functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-hover/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDropdown} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDropdown,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiImgLazyLoading in Standalone Angular Component\nDESCRIPTION: Shows how to import and include the TuiImgLazyLoading component from Taiga UI Kit into a standalone Angular component. The component is added to the imports array of the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/lazy-loading/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiImgLazyLoading} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiImgLazyLoading,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiBadgedContent in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiBadgedContent from the Taiga UI kit and set up a standalone Angular component. It shows the necessary import statements and the component decorator configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/badged-content/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiBadgedContent} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiBadgedContent,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Detecting Payment System using Taiga UI in TypeScript\nDESCRIPTION: This snippet imports the getPaymentSystem function from the Taiga UI kit and uses it to determine the payment system based on a card number. The result is stored in the paymentSystem variable.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/miscellaneous/examples/import/component.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getPaymentSystem} from '@taiga-ui/kit';\n\n//...\npaymentSystem = getPaymentSystem(cardNumber);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing TuiMessage Component in Angular\nDESCRIPTION: Code example showing how to import and declare the TuiMessage component from Taiga UI Kit in an Angular component. Uses standalone component imports syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/message/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiMessage} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  imports: [\n    // ...\n    TuiMessage,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiAccordion in Angular Standalone Component with TypeScript\nDESCRIPTION: This snippet demonstrates how to import the TuiAccordion component from the Taiga UI kit package and use it in a standalone Angular component. The example shows the proper import syntax and how to include the component in the imports array of the @Component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/accordion-/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiAccordion} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiAccordion,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI Buttons\nDESCRIPTION: Demonstrates setting up a standalone Angular component with Taiga UI button dependencies. Shows how to import and configure TuiButton and TuiButtonClose components from Taiga UI's core and kit packages.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/button-close/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiButton} from '@taiga-ui/core';\nimport {TuiButtonClose} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiButton,\n    TuiButtonClose,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiDropdown in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiDropdown component from Taiga UI core package and use it in a standalone Angular component. The component is configured with standalone: true and includes TuiDropdown in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/dropdown-open/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiDropdown} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiDropdown,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiMedia in Standalone Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiMedia module from @taiga-ui/cdk and use it in a standalone Angular component. The component is configured with the standalone property set to true and includes TuiMedia in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/media/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiMedia} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiMedia,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiPush Component in Angular\nDESCRIPTION: This snippet demonstrates how to import the TuiPush component from the Taiga UI kit and include it in an Angular component's imports array. It uses the standalone component configuration in Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/push/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiPush} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPush,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiSearch Component in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiSearch component from @taiga-ui/layout package and include it in a standalone Angular component's imports array. The example demonstrates the modern standalone component pattern in Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/search/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiSearch} from '@taiga-ui/layout';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSearch,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Binding Value to TaigaUI Axes Component\nDESCRIPTION: Implementation example showing how to bind a value property to the tui-axes component from TaigaUI framework. The value property controls the axes data to be displayed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/axes/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-axes [value]=\"value\"></tui-axes>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFormatNumberPipe in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiFormatNumberPipe from Taiga UI core package and include it in a standalone component's imports array. The component is configured as standalone and includes the pipe in its dependencies.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/format-number/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFormatNumberPipe} from '@taiga-ui/core';\n\n//...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFormatNumberPipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTitle in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiTitle component from @taiga-ui/core package and include it in a standalone component's imports array. The component is configured using the standalone: true property with TuiTitle added to the imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/title/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTitle} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTitle,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing TuiItemsWithMore Component in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the TuiItemsWithMore component to display a list of items with a 'more' functionality. It iterates through an array of items, displaying each one, and includes a template for showing the number of additional items not displayed.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/items-with-more/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-items-with-more>\n  <ng-container *ngFor=\"let item of items\">\n    <span *tuiItem>{{ item }}</span>\n  </ng-container>\n  <ng-template\n    tuiMore\n    let-index\n  >\n    and {{ items.length - index - 1 }} more\n  </ng-template>\n</tui-items-with-more>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFade in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiFade module from Taiga UI and set up a standalone Angular component. It shows the component decorator with imports, including TuiFade.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/fade/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiFade} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFade,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiSwipe in Standalone Angular Component\nDESCRIPTION: Shows how to properly import the TuiSwipe directive from @taiga-ui/cdk and include it in a standalone component's imports array. This setup enables swipe gesture functionality in the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/swipe/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiSwipe} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSwipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCurrencyPipe in Standalone Angular Component\nDESCRIPTION: Demonstrates how to import TuiCurrencyPipe from @taiga-ui/addon-commerce package and include it in a standalone component's imports array. This setup allows the component to use currency formatting functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/currency/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiCurrencyPipe} from '@taiga-ui/addon-commerce';\n\n//...\n\n@Component({\n  standalone: true,\n  imports: [\n    //...\n    TuiCurrencyPipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiIsland in Standalone Component\nDESCRIPTION: Example showing how to import the TuiIsland component from Taiga UI's legacy package and integrate it into a standalone Angular component. Demonstrates the proper module import syntax within the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/island/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiIsland} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiIsland,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLegendItem in Angular Standalone Component\nDESCRIPTION: This code snippet shows how to import the TuiLegendItem component from the @taiga-ui/addon-charts package and include it in the imports array of an Angular standalone component. The component is defined using the @Component decorator with the standalone property set to true.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/legend-item/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLegendItem} from '@taiga-ui/addon-charts';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLegendItem,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Width Class in Less CSS\nDESCRIPTION: Defines a responsive image class that sets a fixed width of 300px on desktop and switches to 100% width on mobile screens using Taiga UI's mobile media query variable (@tui-mobile).\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/markup/breakpoints/examples/import/base-breakpoint-usage.md#2025-04-11_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n.image {\n  width: 300px;\n\n  @media @tui-mobile {\n    width: 100%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI Imports\nDESCRIPTION: This snippet demonstrates how to import and configure Taiga UI components in an Angular standalone component. It imports TuiItem from @taiga-ui/cdk and TuiBreadcrumbs from @taiga-ui/kit, then includes them in the component's imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/breadcrumbs/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiItem} from '@taiga-ui/cdk';\nimport {TuiBreadcrumbs} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiItem,\n    TuiBreadcrumbs,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Applying tuiPan Directive in Angular Template\nDESCRIPTION: This snippet demonstrates how to use the tuiPan directive from Taiga UI on a div element. The directive is used to detect pan gestures, and the ellipsis (...) indicates that an event handler or expression should be provided to respond to the pan events.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/pan/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div (tuiPan)=\"...\"></div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiProgress in Angular Component\nDESCRIPTION: This snippet shows how to import the TuiProgress module from @taiga-ui/kit and include it in the imports array of a standalone Angular component. It sets up the necessary configuration to use Taiga UI's progress component in the component's template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/progress-segmented/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiProgress} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiProgress,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiRadio Import\nDESCRIPTION: Shows how to import and configure a standalone Angular component that uses the TuiRadio module from Taiga UI kit. Demonstrates the proper import syntax and component decorator configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/radio/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiRadio} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiRadio,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Styling the App Root Component in LESS\nDESCRIPTION: Defines base styles for the app root component, setting up the main container with appropriate padding, height, and box-sizing properties.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/src/global_styles.less.md#2025-04-11_snippet_1\n\nLANGUAGE: less\nCODE:\n```\napp {\n  display: block;\n  padding: 1.5rem;\n  height: 100%;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Calendar Component in Angular\nDESCRIPTION: Shows how to import and configure TuiMobileCalendar component and its provider in a standalone Angular component. Includes necessary imports from @taiga-ui/addon-mobile and @taiga-ui/legacy packages.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/mobile-calendar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiMobileCalendar, tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';\nimport {TuiInputDateModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiMobileCalendar,\n  ],\n  // If you want it in date picker inputs\n  providers: [tuiProvideMobileCalendar()],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Extending TuiPortalService in TypeScript for Taiga UI\nDESCRIPTION: Defines a custom MyPortalService class that extends TuiPortalService from Taiga UI. The service is decorated with @Injectable and configured to be provided at the root level of the application, making it globally available.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/portals/examples/setup/create-service.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyPortalService extends TuiPortalService {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiGroup Module in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiGroup module from Taiga UI's core package and include it in a standalone Angular component's imports array. The component is defined as standalone with TuiGroup listed among other implied imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/group/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiGroup} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiGroup,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for Images using Taiga UI in HTML\nDESCRIPTION: This code snippet demonstrates how to use the tuiLoading directive from Taiga UI to implement lazy loading for an image. The directive is applied to an img tag with specified dimensions and source.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/lazy-loading/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img\n  src=\"myImage.jpg\"\n  height=\"200\"\n  width=\"300\"\n  tuiLoading=\"lazy\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiZoom Component in Angular Standalone Component\nDESCRIPTION: Demonstrates importing the TuiZoom component from @taiga-ui/cdk package and including it in a standalone Angular component's imports array. The component is marked as standalone and configured through the Component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/zoom/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiZoom} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiZoom,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Using tuiCopyProcessor Directive in HTML Template\nDESCRIPTION: A code example showing how to apply the tuiCopyProcessor directive to a span element in HTML. The directive accepts a processor function as input to transform copied content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/copy-processor/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span [tuiCopyProcessor]=\"processor\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Angular Component with Taiga UI Textfield in TypeScript\nDESCRIPTION: This code sets up a standalone Angular component that imports the TuiTextfield from Taiga UI. It demonstrates how to properly import and include Taiga UI components in an Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/textfield/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiTextfield} from '@taiga-ui/core';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTextfield,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Group with Taiga UI Input Controls for Address Information\nDESCRIPTION: This snippet demonstrates how to create a group of Taiga UI input controls for collecting address information. The form includes three input fields for house number, house building, and apartment number, each with associated validation and error handling. The tuiGroup directive is used to visually organize the inputs together.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/group/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"group\"\n  tuiGroup\n>\n  <div>\n    <tui-input\n      formControlName=\"testValue\"\n      tuiHintContent=\"Write a number\"\n      [style.border-radius]=\"'inherit'\"\n    >\n      House\n      <input\n        tuiTextfieldLegacy\n        placeholder=\"House\"\n      />\n    </tui-input>\n    <tui-error\n      formControlName=\"testValue\"\n      [error]=\"[] | tuiFieldError | async\"\n    ></tui-error>\n  </div>\n  <div>\n    <tui-input\n      formControlName=\"testValue2\"\n      tuiHintContent=\"Write house building\"\n      [style.border-radius]=\"'inherit'\"\n    >\n      House building\n      <input\n        tuiTextfieldLegacy\n        placeholder=\"House building\"\n      />\n    </tui-input>\n    <tui-error\n      formControlName=\"testValue2\"\n      [error]=\"[] | tuiFieldError | async\"\n    ></tui-error>\n  </div>\n  <div>\n    <tui-input\n      formControlName=\"testValue3\"\n      tuiHintContent=\"Write an apartment number only\"\n      [style.border-radius]=\"'inherit'\"\n    >\n      Apartment\n      <input\n        tuiTextfieldLegacy\n        placeholder=\"Apartment number\"\n      />\n    </tui-input>\n    <tui-error\n      formControlName=\"testValue3\"\n      [error]=\"[] | tuiFieldError | async\"\n    ></tui-error>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Layout Package\nDESCRIPTION: Command to install the @taiga-ui/layout package which contains layout components\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/layout/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/layout\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiInputRangeModule in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import and configure the TuiInputRangeModule from Taiga UI legacy package along with Angular's form modules. It demonstrates the setup of a standalone Angular component with the required module imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-range/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputRangeModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputRangeModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiElasticContainer in a Standalone Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiElasticContainer from Taiga UI's kit package and add it to a standalone Angular component's imports array. The component is configured as standalone and includes the TuiElasticContainer in its imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/elastic-container/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiElasticContainer} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiElasticContainer,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Component with TuiStringifyPipe\nDESCRIPTION: Shows how to import and configure TuiStringifyPipe from Taiga UI kit in a standalone Angular component. The example demonstrates the basic structure of a component decorator with imports configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/stringify/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiStringifyPipe} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    //...\n    TuiStringifyPipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiThumbnailCard in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiThumbnailCard component from the Taiga UI addon-commerce package and include it in the imports array of a standalone Angular component. It sets up the necessary configuration for using the TuiThumbnailCard within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/thumbnail-card/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiThumbnailCard} from '@taiga-ui/addon-commerce';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiThumbnailCard,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTabBar in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiTabBar component from @taiga-ui/addon-mobile package and include it in a standalone Angular component's imports array. This setup enables the use of TuiTabBar within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/tab-bar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTabBar} from '@taiga-ui/addon-mobile';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTabBar,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Experimental Package\nDESCRIPTION: Command to install the experimental package (@taiga-ui/experimental) which contains new component versions.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/experimental/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/experimental\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Charts Addon\nDESCRIPTION: Command to install the Taiga UI charts addon package (@taiga-ui/addon-charts) after installing the base packages.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-charts/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/addon-charts\n```\n\n----------------------------------------\n\nTITLE: Implementing Portal Host Component with Taiga UI in TypeScript\nDESCRIPTION: This code snippet defines an Angular component class named MyPortalHost. It extends the TuiPortals class from Taiga UI and uses the tuiAsPortal provider to inject MyPortalService. The component has a selector, template, and styles defined.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/portals/examples/setup/create-host.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Component({\n  selector: 'my-portal-host',\n  templateUrl: './my-portal-host.template.html',\n  styleUrls: ['./my-portal-host.style.less'],\n  providers: [tuiAsPortal(MyPortalService)],\n})\nexport class MyPortalHost extends TuiPortals {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with TuiInputInline and ReactiveFormsModule\nDESCRIPTION: This snippet shows how to import necessary modules and configure a standalone Angular component with TuiInputInline from Taiga UI and ReactiveFormsModule. It demonstrates the use of the 'standalone' property and the 'imports' array in the component decorator.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-inline/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputInline} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    ReactiveFormsModule,\n    TuiInputInline,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Addon Packages via NPM\nDESCRIPTION: Commands to install various Taiga UI addon packages including components for charts, commerce features, mobile support, tables, documentation tools, and layout utilities. Each package serves a specific purpose in the Taiga UI ecosystem.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/addons.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/addon-charts    // Components for various charts, graphs and visualizations\nnpm i @taiga-ui/addon-commerce  // Money-related extension with currencies, credit card inputs and validators\nnpm i @taiga-ui/addon-mobile    // Components and tools specific to mobile version of the app\nnpm i @taiga-ui/addon-table     // Interactive table component and related utilities\nnpm i @taiga-ui/addon-doc       // Taiga UI based library for developing documentation portals for Angular libraries\nnpm i @taiga-ui/layout          // Layout components\n```\n\n----------------------------------------\n\nTITLE: Importing TuiSheetModule in Standalone Component\nDESCRIPTION: Shows how to import TuiSheetModule from @taiga-ui/legacy package and include it in a standalone Angular component's imports array. The component uses standalone: true configuration with the module imported in the imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/sheet/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiSheetModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSheetModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiElement in Standalone Angular Component\nDESCRIPTION: This snippet demonstrates how to import TuiElement from @taiga-ui/cdk and use it in a standalone Angular component. It shows the component decorator with the standalone property set to true and includes TuiElement in the imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/element/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiElement} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiElement,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing css-vars-ponyfill Package via NPM\nDESCRIPTION: Command to install the css-vars-ponyfill package using NPM package manager. This polyfill enables CSS custom properties (variables) support in legacy browsers that don't natively support them.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/ponyfill.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install css-vars-ponyfill\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Mobile Addon\nDESCRIPTION: Command to install the Taiga UI Mobile addon package, which provides mobile-specific behaviors.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-mobile/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/addon-mobile\n```\n\n----------------------------------------\n\nTITLE: Importing TuiComment Component in Angular\nDESCRIPTION: Shows how to import TuiComment from @taiga-ui/kit package and include it in a standalone Angular component's imports. The example demonstrates the basic setup required to use Taiga UI components in an Angular application.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/comment/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiComment} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiComment,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Project Settings in angular.json\nDESCRIPTION: This snippet defines the Angular project configuration, including build options, development server settings, and project structure. It specifies build configurations for development and production environments, as well as asset management and output settings.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/configs.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"demo\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"configurations\": {\n            \"development\": {\n              \"extractLicenses\": false,\n              \"namedChunks\": true,\n              \"optimization\": false,\n              \"sourceMap\": true\n            },\n            \"production\": {\n              \"aot\": true,\n              \"extractLicenses\": true,\n              \"namedChunks\": false,\n              \"optimization\": true,\n              \"outputHashing\": \"all\",\n              \"sourceMap\": false\n            }\n          },\n          \"options\": {\n            \"assets\": [],\n            \"index\": \"src/index.html\",\n            \"browser\": \"src/main.ts\",\n            \"outputPath\": \"dist/demo\",\n            \"scripts\": [],\n            \"styles\": [\"src/global_styles.less\"],\n            \"tsConfig\": \"tsconfig.json\"\n          }\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"development\": {\n              \"buildTarget\": \"demo:build:development\"\n            },\n            \"production\": {\n              \"buildTarget\": \"demo:build:production\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        }\n      },\n      \"prefix\": \"app\",\n      \"projectType\": \"application\",\n      \"root\": \"\",\n      \"schematics\": {},\n      \"sourceRoot\": \"src\"\n    }\n  },\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiRepeatTimesPipe in Standalone Angular Component\nDESCRIPTION: Demonstrates the import and configuration of TuiRepeatTimesPipe within a standalone Angular component. The pipe is imported from @taiga-ui/cdk package and added to the component's imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/repeat-times/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiRepeatTimesPipe} from '@taiga-ui/cdk';\n\n//...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiRepeatTimesPipe,\n  ],\n  //  ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with TuiNumberFormat\nDESCRIPTION: Shows how to import TuiNumberFormat from @taiga-ui/core and include it in a standalone component's imports array. The component is configured as standalone with necessary imports including TuiNumberFormat.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/number-format/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiNumberFormat} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiNumberFormat,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Taiga UI i18n\nDESCRIPTION: Markdown content showing badges for npm version and Discord channel, along with a link to detailed i18n documentation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/i18n/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Taiga UI — i18n\n\n[![npm version](https://img.shields.io/npm/v/@taiga-ui/i18n.svg)](https://npmjs.com/package/@taiga-ui/i18n)\n[![Discord](https://img.shields.io/discord/748677963142135818?color=7289DA&label=%23taiga-ui&logo=discord&logoColor=white)](https://discord.gg/Us8d8JVaTg)\n\n[Read more about internationalization...](https://taiga-ui.dev/i18n)\n```\n\n----------------------------------------\n\nTITLE: Importing TuiPullToRefresh in Standalone Component\nDESCRIPTION: Example showing how to import the TuiPullToRefresh component from @taiga-ui/addon-mobile package and include it in a standalone Angular component's imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pull-to-refresh/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiPullToRefresh} from '@taiga-ui/addon-mobile';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPullToRefresh,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCompass Component in Angular\nDESCRIPTION: Example of importing TuiCompass from Taiga UI Kit into a standalone Angular component. Shows the basic component structure with necessary imports and component decorator configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/compass/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiCompass} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiCompass,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input Range in Angular Template\nDESCRIPTION: This snippet demonstrates how to use the Taiga UI input range component within an Angular template. It utilizes Angular's reactive forms with formGroup and formControlName directives. The input range is wrapped in a form container and has a placeholder.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-range/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ng-container [formGroup]=\"testForm\">\n  <tui-input-range\n    class=\"input-wrapper\"\n    formControlName=\"testValue\"\n  >\n    placeholder\n  </tui-input-range>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Importing Taiga UI Core Styles\nDESCRIPTION: Imports the main Taiga UI core styles from the local package using Less @import statement. The imported file contains base styling variables and mixins needed for Taiga UI components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/import-local-less.md#2025-04-11_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import '@taiga-ui/core/styles/taiga-ui-local.less';\n\n// other styles\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Switcher in Taiga UI Bootstrap\nDESCRIPTION: Implementation of the tuiLanguageSwitcher provider in a Taiga UI application bootstrap configuration. Uses lazy loading to dynamically import language files from node_modules when needed. Includes error handling for the bootstrap process.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/i18n/dynamic.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {tuiLanguageSwitcher, TuiLanguageName} from '@taiga-ui/i18n';\n\nbootstrapApplication(App, {\n  providers: [\n    // ...\n    tuiLanguageSwitcher(\n      /**\n       * @note:\n       * then the i18n language files will be loaded from node_modules\n       */\n      async (language: TuiLanguageName): Promise<unknown> =>\n        import(\n          /* webpackMode: \"lazy\" */\n          /* webpackChunkName: \"i18n-lazy-\" */\n          `@taiga-ui/i18n/languages/${language}`\n          // also you can override the paths to your i18n language files\n        ),\n    ),\n  ],\n}).catch((err: unknown) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing TuiRipple and Configuring Angular Component with Taiga UI in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the TuiRipple module from Taiga UI's addon-mobile package and include it in an Angular standalone component's imports. It sets up the basic structure of an Angular component using the TuiRipple module.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/ripple/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiRipple} from '@taiga-ui/addon-mobile';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiRipple,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files in JSON\nDESCRIPTION: Specifies the setup files that Jest should run after the test environment is initialized. Points to setup-jest.js in the root directory.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/testing/jest/examples/package-json.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"setupFilesAfterEnv\": [\"<rootDir>/setup-jest.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js Languages in Angular Module\nDESCRIPTION: TypeScript code to configure language highlighting options for the documentation using Highlight.js in an Angular module.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiDocMainModule} from '@taiga-ui/addon-doc';\nimport {hljsLanguages} from './hljsLanguages';\nimport {HIGHLIGHT_OPTIONS, HighlightLanguage} from 'ngx-highlightjs';\nimport {App} from './app.component';\n\n@Component({\n  standalone: true,\n  imports: [TuiDocMainModule],\n  providers: [\n    {\n      provide: HIGHLIGHT_OPTIONS,\n      useValue: {\n        coreLibraryLoader: () => import('highlight.js/lib/core' as string),\n        lineNumbersLoader: () => import('highlightjs-line-numbers.js' as string), // Optional, only if you want the line numbers\n        languages: {\n          typescript: () => import('highlight.js/lib/languages/typescript' as string),\n          less: () => import('highlight.js/lib/languages/less' as string),\n          xml: () => import('highlight.js/lib/languages/xml' as string),\n        },\n      },\n    },\n  ],\n})\nexport class App {}\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Taiga UI with npm and nx\nDESCRIPTION: A two-step process for setting up Taiga UI in a project. First, install the package using npm, then use the nx CLI to generate the initial configuration with the ng-add schematic.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/nx-add.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i taiga-ui\nnx g taiga-ui:ng-add\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiPulse in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiPulse module from @taiga-ui/kit and include it in the imports array of a standalone Angular component. It demonstrates the use of standalone component syntax in Angular.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/pulse/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiPulse} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPulse,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Core and Doc Packages\nDESCRIPTION: Commands to install the main Taiga UI packages and the documentation addon using npm.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core,kit,addon-mobile}\nnpm i @taiga-ui/addon-doc\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Language Switcher in TypeScript\nDESCRIPTION: This snippet shows how to set up the Taiga UI language switcher using dynamic imports. It includes support for multiple predefined languages and demonstrates how to add a custom language. The switcher is configured as a provider in the application bootstrap process.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/i18n/esbuild.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {tuiLanguageSwitcher, TuiLanguageName} from '@taiga-ui/i18n';\n\nbootstrapApplication(App, {\n  providers: [\n    // ...\n    tuiLanguageSwitcher(async (language: TuiLanguageName): Promise<unknown> => {\n      switch (language) {\n        case 'belarusian':\n          return import('@taiga-ui/i18n/languages/belarusian');\n        case 'chinese':\n          return import('@taiga-ui/i18n/languages/chinese');\n        case 'dutch':\n          return import('@taiga-ui/i18n/languages/dutch');\n        case 'french':\n          return import('@taiga-ui/i18n/languages/french');\n        case 'german':\n          return import('@taiga-ui/i18n/languages/german');\n        case 'italian':\n          return import('@taiga-ui/i18n/languages/italian');\n        case 'polish':\n          return import('@taiga-ui/i18n/languages/polish');\n        case 'portuguese':\n          return import('@taiga-ui/i18n/languages/portuguese');\n        case 'russian':\n          return import('@taiga-ui/i18n/languages/russian');\n        case 'spanish':\n          return import('@taiga-ui/i18n/languages/spanish');\n        case 'turkish':\n          return import('@taiga-ui/i18n/languages/turkish');\n        case 'ukrainian':\n          return import('@taiga-ui/i18n/languages/ukrainian');\n        case 'vietnamese':\n          return import('@taiga-ui/i18n/languages/vietnamese');\n\n        case 'serbian': // custom language for example\n          return import('@my-scope/serbian-language');\n\n        default:\n          return import('@taiga-ui/i18n/languages/english');\n      }\n    }),\n  ],\n}).catch((err: unknown) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiLineClamp in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiLineClamp module from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. The TuiLineClamp module is likely used for text truncation or line clamping functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/line-clamp/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiLineClamp} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiLineClamp,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Angular CLI Migration Command\nDESCRIPTION: CLI command to update Taiga UI dependencies and apply migrations for version 4.0.0\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng update @taiga-ui/cdk\n```\n\n----------------------------------------\n\nTITLE: Rendering Taiga UI Example Container in HTML\nDESCRIPTION: Basic HTML markup that creates a paragraph element to serve as a container for Taiga UI component examples and demonstrations.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/starter/files/app.template.html.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p>Here you can reproduce any Taiga UI example</p>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiCell in Angular Component\nDESCRIPTION: This snippet shows how to import and use the TuiCell component from the Taiga UI layout module in an Angular component. It demonstrates the correct import statement and how to include TuiCell in the component's imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/cell/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiCell} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  imports: [\n    // ...\n    TuiCell,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Taiga UI Elastic Container with HTML\nDESCRIPTION: This snippet demonstrates how to use the tui-elastic-container component to wrap content in an elastic/flexible container. The container includes a title, paragraph text, and a button that could be used to expand content dynamically.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/elastic-container/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-elastic-container>\n  <h2>Title</h2>\n  <p>Your content here</p>\n  <button>Add more</button>\n</tui-elastic-container>\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Base Packages\nDESCRIPTION: Command to install the base packages required for Taiga UI, including CDK, Core, and Kit.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-mobile/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core,kit}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Color with Taiga UI CSS Variable\nDESCRIPTION: Sets the background color of an element using Taiga UI's status-positive CSS variable. This demonstrates usage of Taiga UI's design system color tokens for consistent theming.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/markup/colors/examples/import/basic-imports-less.md#2025-04-11_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n.class {\n  background-color: var(--tui-status-positive);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone Angular Component with TuiSensitive\nDESCRIPTION: Shows how to create a standalone Angular component that imports the TuiSensitive module from the Taiga UI kit. The component is configured using the standalone: true property and includes necessary module imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/sensitive/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSensitive} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSensitive,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Table Addon\nDESCRIPTION: Command to install the Taiga UI Table addon package, which provides functionality for displaying tabled data with advanced features.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-table/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/addon-table\n```\n\n----------------------------------------\n\nTITLE: Importing TuiStatus in Standalone Angular Component\nDESCRIPTION: This snippet shows how to import the TuiStatus module from @taiga-ui/kit and include it in a standalone Angular component. The component is declared as standalone and imports necessary modules, including TuiStatus.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/status/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiStatus} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiStatus,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Icons Package via NPM\nDESCRIPTION: Command to install the @taiga-ui/icons package using npm package manager. This package contains vector icons used by Taiga UI framework.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/icons-fontawesome/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @taiga-ui/icons\n```\n\n----------------------------------------\n\nTITLE: Importing Taiga UI Core Styles\nDESCRIPTION: Imports the base styling definitions from Taiga UI core package. This import gives access to the core variables, mixins and styles defined in the taiga-ui-local.less file.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/markup/breakpoints/examples/import/import-taiga-ui-local-less.md#2025-04-11_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import '@taiga-ui/core/styles/taiga-ui-local.less';\n```\n\n----------------------------------------\n\nTITLE: Importing TuiTableFilters in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiTableFilters component from the @taiga-ui/addon-table package and use it in a standalone Angular component. The component is declared as standalone and includes TuiTableFilters in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/table-filters/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiTableFilters} from '@taiga-ui/addon-table';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTableFilters,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Core and CDK packages\nDESCRIPTION: Command for installing the required Taiga UI packages. Both the Core and CDK packages are needed to develop components using the Taiga UI design system.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/core/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiFilterPipe in Angular Standalone Component\nDESCRIPTION: Shows how to import TuiFilterPipe from Taiga UI CDK and include it in a standalone component's imports array. The component is configured using the standalone: true property and includes other imports indicated by the ellipsis.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/filter/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiFilterPipe} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiFilterPipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TuiInputYearModule in Standalone Angular Component\nDESCRIPTION: Demonstrates how to import TuiInputYearModule from @taiga-ui/legacy package and set up a basic form control in a standalone Angular component. The example includes module import configuration and form group initialization.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-year/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiInputYearModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiInputYearModule,\n  ],\n  // ...\n})\nexport class Example {\n  readonly testForm = new FormGroup({\n    testValue: new FormControl(null),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress with Chrome Motion Preferences\nDESCRIPTION: Defines a Cypress configuration that sets up event handlers for browser launching. Specifically adds a force-prefers-reduced-motion flag for Chrome browsers to ensure consistent motion behavior during tests.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/testing/disable-animation/examples/cypress.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'cypress';\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        /* ... */\n\n        if (browser.name === `chrome`) {\n          launchOptions.args.push(`--force-prefers-reduced-motion`);\n        }\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Base Packages\nDESCRIPTION: Command to install the required base packages (@taiga-ui/cdk and @taiga-ui/core) as prerequisites for the layout package\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/layout/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiValueChanges in Angular Standalone Component\nDESCRIPTION: Example showing how to import and include TuiValueChanges directive from Taiga UI CDK package in a standalone Angular component declaration. The component is configured with standalone: true and includes TuiValueChanges in its imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/value-changes/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiValueChanges} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiValueChanges,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Icons Package via NPM\nDESCRIPTION: Command to install the @taiga-ui/icons package using npm package manager. This package is part of the Taiga UI ecosystem and is fully treeshakable.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/icons-material/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @taiga-ui/icons\n```\n\n----------------------------------------\n\nTITLE: Implementing TuiZoom Directive in HTML Template\nDESCRIPTION: Shows how to attach the tuiZoom directive to a div element to handle zoom events. The directive emits zoom events which are handled by the onZoom method.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/zoom/examples/import/insert-template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div (tuiZoom)=\"onZoom($event)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Environment for Taiga UI with TypeScript\nDESCRIPTION: Sets up the testing environment by importing Jest setup utilities, enabling runtime type reflection, and creating mock implementations for AnimationEvent, TransitionEvent, and DragEvent.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/testing/jest/examples/setup-jest.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@taiga-ui/testing/setup-jest';\n\n// allows you to do runtime reflection on types\nimport 'reflect-metadata';\n\n// make custom mocks\n(window as any).AnimationEvent = {};\n(window as any).TransitionEvent = {};\n(window as any).DragEvent = class {};\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Icons Package with NPM\nDESCRIPTION: Command to install the @taiga-ui/icons package using npm package manager. This package provides vector icons used in Taiga UI components.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/icons/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/icons\n```\n\n----------------------------------------\n\nTITLE: Repeating Elements with tuiRepeatTimes in Angular Template\nDESCRIPTION: Demonstrates how to create multiple div elements using Angular's @for directive combined with the tuiRepeatTimes pipe from Taiga UI. The code creates three div elements with class 't-cell'.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/repeat-times/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@for (index of 3 | tuiRepeatTimes; track index) {\n<div class=\"t-cell\"></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes for Documentation Pages\nDESCRIPTION: TypeScript code snippet showing how to set up Angular routes for documentation pages, including lazy-loading and title configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-doc/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Routes} from '@angular/router';\n\nconst appRoutes: Routes = [\n  {\n    path: 'super-page',\n    loadChildren: async () => (await import('../super-page/super-page.module')).SuperModule,\n    data: {\n      title: 'Super Page',\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TuiSwitch in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiSwitch module from Taiga UI and set up a standalone Angular component. It shows the basic structure of the component decorator with imports.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/switch/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiSwitch} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiSwitch,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files in TypeScript\nDESCRIPTION: Exports a Jest configuration object that defines the setup files to be executed after the test environment is initialized. Uses a root-relative path to reference the setup script.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/testing/jest/examples/jest-config.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI Pipe\nDESCRIPTION: Demonstrates how to set up a standalone Angular component with the TuiStringifyContentPipe imported from the @taiga-ui/kit package. Shows the proper import statement and component decorator configuration.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/stringify-content/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiStringifyContentPipe} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiStringifyContentPipe,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Position using Taiga UI CDK in TypeScript\nDESCRIPTION: This code snippet imports the isElementAtPoint function from the Taiga UI CDK package and uses it to determine if an element is at a specific point (x, y) on the page. The result is stored in the isAtPoint variable.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/dom/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {isElementAtPoint} from '@taiga-ui/cdk';\n\n//...\nisAtPoint = isElementAtPoint(element, point.x, point.y);\n//...\n```\n\n----------------------------------------\n\nTITLE: Migrating Taiga UI with Nx commands\nDESCRIPTION: These commands update Taiga UI dependencies and apply migrations. The first command generates a migrations.json file with necessary changes, while the second command executes those migrations to update the codebase.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/nx-migrate.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx migrate @taiga-ui/cdk\nnx migrate --run-migrations=migrations.json\n```\n\n----------------------------------------\n\nTITLE: Setting Russian Language for Taiga UI Application\nDESCRIPTION: Demonstrates how to configure Russian language settings by providing TUI_LANGUAGE token with TUI_RUSSIAN_LANGUAGE value in the application bootstrap configuration. The code uses Angular's dependency injection system to set up localization.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/i18n/base.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TUI_LANGUAGE, TUI_RUSSIAN_LANGUAGE} from '@taiga-ui/i18n';\n\nbootstrapApplication(App, {\n  providers: [\n    // ...\n    {\n      provide: TUI_LANGUAGE,\n      useValue: of(TUI_RUSSIAN_LANGUAGE),\n    },\n  ],\n}).catch((err: unknown) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with Taiga UI and Reactive Forms\nDESCRIPTION: This snippet demonstrates how to import and configure an Angular component using Taiga UI's TuiInputDateModule and Angular's ReactiveFormsModule. It sets up a standalone component with the necessary imports for form handling and date input functionality.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-date/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TuiInputDateModule} from '@taiga-ui/legacy';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    ReactiveFormsModule,\n    TuiInputDateModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Stylesheets in Angular Component\nDESCRIPTION: Shows how to specify multiple stylesheet files with different formats (SCSS and LESS) in an Angular component's decorator metadata using the styleUrls property. The example demonstrates referencing both .scss and .less files simultaneously.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/home/examples/components-styles.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  //...,\n  styleUrls: ['./my.component.scss', './my.component.less'],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Commerce Addon\nDESCRIPTION: Command to install the Taiga UI Commerce addon package which contains components and utilities related to payment systems, currencies, and card UI elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/addon-commerce/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/addon-commerce\n```\n\n----------------------------------------\n\nTITLE: Styling the Header Component with Taiga UI Variables\nDESCRIPTION: Defines styles for a header component with flexbox layout and uses Taiga UI border variables for consistent theming.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/app/stackblitz/project-files/src/global_styles.less.md#2025-04-11_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid var(--tui-border-normal);\n  padding-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Textfield with Fluid Typography in HTML\nDESCRIPTION: This snippet demonstrates how to create a textfield input using Taiga UI components. It utilizes the tui-textfield component and applies the tuiTextfield and tuiFluidTypography directives to the input element.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/fluid-typography/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiTextfield\n    tuiFluidTypography\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Example of Conventional Commit Message for Taiga UI\nDESCRIPTION: An example of a commit message following the Conventional Commits standard. This format is required for all commits in the Taiga UI project to maintain consistency and clarity in the commit history.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nfeat(core): improve typing\n```\n\n----------------------------------------\n\nTITLE: Installing Taiga UI Base Packages\nDESCRIPTION: Command to install the required base packages (@taiga-ui/cdk and @taiga-ui/core) for Taiga UI framework.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/experimental/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @taiga-ui/{cdk,core}\n```\n\n----------------------------------------\n\nTITLE: Executing NX Migration for Taiga UI CDK\nDESCRIPTION: Two-step process to migrate Taiga UI CDK package. First command initiates migration from version 3.0.0, second command executes the pending migrations.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/migration-guide/examples/manual-trigger-nx-migrate-v4.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @taiga-ui/cdk --from=\"@taiga-ui/cdk@3.0.0\"\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Like Component with HTML Input\nDESCRIPTION: Example of applying the tuiLike directive to a checkbox input element. This creates a like/thumbs up interaction component using Taiga UI's styling and behavior.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/like/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  tuiLike\n  type=\"checkbox\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Core Team Profile Table in HTML\nDESCRIPTION: HTML table structure displaying core team member profiles with images, names, and social media links to Twitter, GitHub and Telegram.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n    <tr>\n       <td align=\"center\">\n            <a href=\"https://twitter.com/waterplea\"\n                ><img\n                    src=\"https://github.com/waterplea.png?size=200\"\n                    width=\"100\"\n                    style=\"margin-bottom: -4px; border-radius: 8px;\"\n                    alt=\"Alex Inkin\"\n                /><br /><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alex&nbsp;Inkin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></a\n            >\n            <div style=\"margin-top: 4px\">\n                <a\n                    href=\"https://twitter.com/waterplea\"\n                    title=\"Twitter\"\n                    ><img\n                        width=\"16\"\n                        src=\"https://raw.githubusercontent.com/MarsiBarsi/readme-icons/main/twitter.svg\"\n                /></a>\n                <a href=\"https://github.com/waterplea\" title=\"Github\"\n                    ><img\n                        width=\"16\"\n                        src=\"https://raw.githubusercontent.com/MarsiBarsi/readme-icons/main/github.svg\"\n                /></a>\n                <a\n                    href=\"https://t.me/waterplea\"\n                    title=\"Telegram\"\n                    ><img\n                        width=\"16\"\n                        src=\"https://raw.githubusercontent.com/MarsiBarsi/readme-icons/main/send.svg\"\n                /></a>\n            </div>\n        </td>\n        <!-- Additional team members follow similar pattern -->\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input Year Component in Angular Template\nDESCRIPTION: This snippet demonstrates how to use the tui-input-year component from Taiga UI within an Angular reactive form. The component is bound to a form control named 'testValue' using the formControlName directive.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-year/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"testForm\">\n  <tui-input-year formControlName=\"testValue\">Choose a month</tui-input-year>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Check Icon with Taiga UI Icon Component\nDESCRIPTION: Uses the tui-icon component from Taiga UI to display a check icon. The component takes an 'icon' attribute that specifies which icon to display, using the @tui namespace to reference the built-in check icon.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/icon/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-icon icon=\"@tui.check\"></tui-icon>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Button with Secondary Appearance in HTML\nDESCRIPTION: This code snippet demonstrates how to create a Taiga UI button with secondary appearance using HTML. It utilizes the 'tuiButton' and 'tuiAppearance' attributes to define the button's style and behavior.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/appearance/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  tuiButton\n  tuiAppearance=\"secondary\"\n>\n  Press me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using tuiMessage Directive in HTML Template\nDESCRIPTION: Demonstrates how to use the tuiMessage directive on a span element to display a message with a dynamic value binding. The tuiMessage directive applies Taiga UI's message styling and functionality to the text content.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/message/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span tuiMessage>{{ value }}</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Progress Bar in HTML\nDESCRIPTION: Demonstrates the use of tuiProgressBar directive on a native HTML progress element. The progress bar is configured with a value of 40 and a maximum value of 100, representing a 40% completion state.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/progress-bar/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<progress\n  tuiProgressBar\n  [value]=\"40\"\n  [max]=\"100\"\n></progress>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component with TuiRange and Form Modules in TypeScript\nDESCRIPTION: This snippet demonstrates how to import required modules, set up a standalone Angular component, and create a form group with a single form control. It uses TuiRange from Taiga UI kit along with Angular's FormsModule and ReactiveFormsModule.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/range/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TuiRange} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    FormsModule,\n    ReactiveFormsModule,\n    TuiRange,\n  ],\n})\nclass Example {\n  testForm = new FormGroup({\n    testValue: new FormControl(0),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TuiHint in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiHint component from @taiga-ui/core package and include it in a standalone Angular component's imports array. This setup enables the use of TuiHint functionality within the component.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiHint} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHint,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Input with Filtered Data List\nDESCRIPTION: Shows how to create an input field with a filtered dropdown list using Taiga UI components. The input is bound to a form control named 'user' and includes a data list wrapper that filters items based on input using the tuiFilterByInput pipe.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/filter-by-input/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-input [formControl]=\"user\">\n  User\n  <tui-data-list-wrapper\n    *tuiDataList\n    [items]=\"items | tuiFilterByInput\"\n  ></tui-data-list-wrapper>\n</tui-input>\n```\n\n----------------------------------------\n\nTITLE: Importing TuiPresent Component in Angular\nDESCRIPTION: Shows how to import the TuiPresent component from @taiga-ui/kit and include it in a standalone Angular component's imports array. Uses TypeScript decorators and ES6 import syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/present/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiPresent} from '@taiga-ui/kit';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiPresent,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Input with Taiga UI Textfield\nDESCRIPTION: Sets up a number input field using Taiga UI's textfield component and tuiInputNumber directive. Includes comprehensive format configuration options for decimal handling, precision, zero padding, rounding, and separator customization.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/number-format/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-textfield>\n  <input\n    tuiInputNumber\n    [tuiNumberFormat]=\"{decimal, precision, zeroPadding, rounding, thousandSeparator, decimalSeparator}\"\n  />\n</tui-textfield>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiItemGroup in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the TuiItemGroup component from the Taiga UI layout module and include it in an Angular component's imports array. It sets up a basic structure for a component that can use Taiga UI elements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/item-group/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiItemGroup} from '@taiga-ui/layout';\n// ...\n\n@Component({\n  imports: [\n    // ...\n    TuiItemGroup,\n  ],\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Nx CLI Migration Commands\nDESCRIPTION: Nx CLI commands to migrate Taiga UI dependencies and run migrations for version 4.0.0\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @taiga-ui/cdk\nnx migrate --run-migrations=migrations.json\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiExpand in Angular Standalone Component\nDESCRIPTION: This snippet shows how to import the TuiExpand component from Taiga UI's experimental package and include it in the imports array of an Angular standalone component. The ellipses indicate that there would be other imports and component configuration in a complete implementation.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/expand/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiExpand} from '@taiga-ui/experimental';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiExpand,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Taiga UI\nDESCRIPTION: Command to execute unit tests for the Taiga UI project. This ensures that existing functionality is not broken by new changes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing TuiScrollbar in Standalone Angular Component\nDESCRIPTION: Shows how to import and configure the TuiScrollbar component from @taiga-ui/core package in a standalone Angular component. The example demonstrates the proper import statement and component configuration using the standalone: true property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/scrollbar/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiScrollbar} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  // ...\n  imports: [\n    //  ...\n    TuiScrollbar,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Outlet in Angular Template\nDESCRIPTION: Basic implementation of the Angular router-outlet directive, which serves as a placeholder where router-matched components are rendered. This is a fundamental component for Angular's routing system.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/routable/lazy/examples/setup/html.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Taiga UI\nDESCRIPTION: Command to run end-to-end screenshot tests for Taiga UI. This helps verify the visual aspects and overall functionality of the project.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Access for Web Crawlers in robots.txt\nDESCRIPTION: A basic robots.txt configuration that permits all web crawlers to access the entire website. This is indicated by the 'User-agent: *' directive without any accompanying 'Disallow' statements.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/assets/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Integrating Taiga UI Color Picker with Two-way Binding in HTML Template\nDESCRIPTION: Implementation of a color picker component using Taiga UI library with Angular's two-way data binding. The component binds to a 'color' property in the component class using the [(color)] syntax.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/input-color/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-color-picker [(color)]=\"color\"></tui-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Taiga UI Textfield Controller in Angular Component\nDESCRIPTION: Demonstrates how to import and configure TuiTextfieldControllerModule in a standalone Angular component. Shows the module import from @taiga-ui/legacy package and its inclusion in the component's imports array.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/textfield-controller/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiTextfieldControllerModule} from '@taiga-ui/legacy';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTextfieldControllerModule,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Launching Taiga UI Demo Project\nDESCRIPTION: Command to start the demo project for Taiga UI. This allows contributors to see and interact with the project in a development environment.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing TuiError in Standalone Angular Component\nDESCRIPTION: Shows how to import the TuiError component from Taiga UI core package and include it in a standalone Angular component's imports array. This pattern enables using the TuiError component within the standalone component's template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/error/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiError} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiError,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Container with Taiga UI Directives\nDESCRIPTION: Demonstrates how to create a resizable container using Taiga UI's tuiResizable directive and tuiResizer component. The resizer is configured with coordinates [1, 0] indicating horizontal resizing capability.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/resizer/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div tuiResizable>\n  <div [tuiResizer]=\"[1, 0]\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TuiHint in Angular Standalone Component\nDESCRIPTION: This snippet demonstrates how to import the TuiHint component from the @taiga-ui/core package and include it in the imports array of a standalone Angular component. This allows the component to use TuiHint in its template.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/hint-pointer/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TuiHint} from '@taiga-ui/core';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiHint,\n  ],\n  // ...\n})\nexport class Example {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Taiga UI Combo Box with String Transform\nDESCRIPTION: Shows how to use the tui-combo-box component with ngModel two-way binding and a tuiStringify pipe applied to the 'name' property. The component allows for dynamic selection and display of values through the stringify property.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/pipes/stringify/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tui-combo-box\n  [stringify]=\"'name' | tuiStringify\"\n  [(ngModel)]=\"value\"\n>\n  <!-- ... -->\n</tui-combo-box>\n```\n\n----------------------------------------\n\nTITLE: Implementing TuiActiveZone in Angular Component\nDESCRIPTION: This snippet demonstrates how to create a standalone Angular component that uses the TuiActiveZone from Taiga UI CDK. It imports the necessary modules, sets up the component structure, and includes a method to handle active zone changes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/active-zone/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TuiActiveZone} from '@taiga-ui/cdk';\n\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiActiveZone,\n  ],\n  // ...\n})\nexport class Example {\n  active = false;\n\n  onActiveZone(active: boolean) {\n    this.active = active;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clamping Values with Taiga UI CDK\nDESCRIPTION: Demonstrates importing and using the clamp utility function from Taiga UI CDK to ensure a value stays within specified minimum and maximum bounds. The function takes three parameters: the value to clamp, minimum bound, and maximum bound.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/components/utils/math/examples/import/component.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {clamp} from '@taiga-ui/cdk';\n\n// ...\nclamped = clamp(value, min, max);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Applying Text Highlighting with Taiga UI in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the tuiHighlight directive from Taiga UI to highlight text within a div element. It binds the directive to a 'query' variable and sets a custom highlight color of '#228B22' (forest green).\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/highlight/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  [tuiHighlight]=\"query\"\n  [tuiHighlightColor]=\"'#228B22'\"\n>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sensitive Text Mask with tuiSensitive Directive\nDESCRIPTION: Applies the tuiSensitive directive to a span element to mask its text content. When set to true, the text within the span will be masked for privacy/security purposes.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/sensitive/examples/import/template.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span [tuiSensitive]=\"true\">text</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Screenshot and Motion Settings in TypeScript\nDESCRIPTION: Sets up Playwright test configuration with reduced motion settings and screenshot comparison options. Disables animations, hides caret, and uses device-specific scaling for visual testing.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/info/testing/disable-animation/examples/playwright.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig, devices} from '@playwright/test';\n\nexport default defineConfig({\n  // ...\n  use: {\n    // ...\n    contextOptions: {\n      reducedMotion: `reduce`,\n    },\n  },\n  expect: {\n    toHaveScreenshot: {\n      animations: `disabled`,\n      caret: `hide`,\n      scale: `device`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Router Outlet in Template\nDESCRIPTION: Adds a router-outlet component to enable routing functionality in an Angular application. This component acts as a placeholder where the router renders the component matched by the current route.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/customization/routable/eager/examples/setup/html.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Angular Component with Taiga UI\nDESCRIPTION: Demonstrates how to set up a standalone Angular component with Taiga UI imports. The component imports TuiTextfield from core and TuiFluidTypography from kit modules, using the standalone component pattern.\nSOURCE: https://github.com/taiga-family/taiga-ui/blob/main/projects/demo/src/modules/directives/fluid-typography/examples/import/import.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {TuiTextfield} from '@taiga-ui/core';\nimport {TuiFluidTypography} from '@taiga-ui/kit';\n// ...\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TuiTextfield,\n    TuiFluidTypography,\n  ],\n})\nexport class Example {}\n```"
  }
]