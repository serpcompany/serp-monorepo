[
  {
    "owner": "vuejs",
    "repo": "docs",
    "content": "TITLE: Select Multiple Values with v-model in Vue\nDESCRIPTION: This snippet shows how to create a multiple select dropdown, allowing the user to select multiple options. The selected values are bound to an array using `v-model`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Provide value with provide() in Vue.js\nDESCRIPTION: Demonstrates how to provide values using the `provide()` function in Vue.js Composition API. It shows providing static values, reactive values, and values with Symbol keys within a `<script setup>` block.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Define Props and Emits Vue\nDESCRIPTION: Shows how to declare options like `props` and `emits` with full type inference support using the `defineProps` and `defineEmits` APIs inside `<script setup>`. These are compiler macros and do not need to be imported.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps({\n  foo: String\n})\n\nconst emit = defineEmits(['change', 'delete'])\n// setup code\n</script>\n```\n\n----------------------------------------\n\nTITLE: Two-way data binding with defineModel() in Vue Component\nDESCRIPTION: This Vue component demonstrates two-way data binding using the `defineModel()` macro. The `model` ref is synced with the parent's v-model value, and updates to it emit an `update:modelValue` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Child.vue -->\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: v-model on custom component\nDESCRIPTION: Demonstrates v-model on a custom component, showing how the v-model is equivalent to a `:model-value` prop and an `@update:model-value` event listener.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<CustomInput\n  :model-value=\"searchText\"\n  @update:model-value=\"newValue => searchText = newValue\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Typing Provide/Inject with InjectionKey in Vue.js\nDESCRIPTION: This code snippet demonstrates how to use `InjectionKey` to properly type injected values in Vue.js. It defines a symbol-based injection key and uses it with `provide` and `inject` to ensure type safety between the provider and consumer. Providing a non-string value to `provide` will result in an error due to the type constraint on the `InjectionKey`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined\n```\n\n----------------------------------------\n\nTITLE: Checkbox Value Bindings in Vue\nDESCRIPTION: This snippet demonstrates how to bind the `true` and `false` values of a checkbox to specific strings using `true-value` and `false-value`. This allows you to control the value of the bound variable based on the checkbox's state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  true-value=\"yes\"\n  false-value=\"no\" />\n```\n\n----------------------------------------\n\nTITLE: Simplified Mouse Tracking Composable JavaScript\nDESCRIPTION: This updated `useMouse` composable utilizes the `useEventListener` composable to manage the mousemove event listener. It imports both `ref` from Vue and `useEventListener` from './event'. It encapsulates the reactive state (x and y coordinates) and uses the `useEventListener` composable to handle the event listener lifecycle.  This showcases how composables can be nested for complex logic reuse.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// mouse.js\nimport { ref } from 'vue'\nimport { useEventListener } from './event'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  useEventListener(window, 'mousemove', (event) => {\n    x.value = event.pageX\n    y.value = event.pageY\n  })\n\n  return { x, y }\n}\n```\n\n----------------------------------------\n\nTITLE: v-model Modifier Handling (Composition API)\nDESCRIPTION: Shows how to access and handle custom modifiers on a `v-model` binding within a Vue.js component using the Composition API and `defineModel`. It demonstrates how to use the `set` option to implement a `capitalize` modifier.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst [model, modifiers] = defineModel({\n  set(value) {\n    if (modifiers.capitalize) {\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n    return value\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Exposing ref to Template - Composition API - JavaScript\nDESCRIPTION: Shows how to expose a `ref` to a component's template by declaring it within the `setup()` function and returning it. When using refs in templates, the `.value` property is automatically unwrapped.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ref } from 'vue'\n\nexport default {\n  // `setup` is a special hook dedicated for the Composition API.\n  setup() {\n    const count = ref(0)\n\n    // expose the ref to the template\n    return {\n      count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Props Definition Using an Interface in Vue\nDESCRIPTION: This code shows defining props using an interface for better organization and reusability. An interface `Props` is defined with `foo` as a required string and `bar` as an optional number. This interface is then used as the generic type for `defineProps`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Two-way data binding with native input element\nDESCRIPTION: This shows how to bind the `defineModel` ref to a native input element using v-model to wrap native input elements and provide the same `v-model` usage.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst model = defineModel()\n</script>\n\n<template>\n  <input v-model=\"model\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Prop (Options API)\nDESCRIPTION: This snippet demonstrates how to define a boolean prop named 'disabled' using the Options API in Vue.js.  When the 'disabled' attribute is present on the component, it's equivalent to passing `:disabled=\"true\"`. When it's absent, it's equivalent to `:disabled=\"false\"`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    disabled: Boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Composable JavaScript\nDESCRIPTION: This JavaScript code defines a `useEventListener` composable that simplifies adding and removing event listeners on a specified target. It takes the target element, event type, and callback function as arguments. It uses `onMounted` and `onUnmounted` to manage the event listener's lifecycle, ensuring it's added when the component is mounted and removed when unmounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// event.js\nimport { onMounted, onUnmounted } from 'vue'\n\nexport function useEventListener(target, event, callback) {\n  // if you want, you can also make this\n  // support selector strings as target\n  onMounted(() => target.addEventListener(event, callback))\n  onUnmounted(() => target.removeEventListener(event, callback))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Object with reactive() in Vue.js\nDESCRIPTION: Creates a reactive proxy of the object using the `reactive()` function. The conversion is deep, affecting all nested properties and unwrapping refs while maintaining reactivity. It's recommended to work exclusively with the reactive proxy.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = reactive({ count: 0 })\nobj.count++\n```\n\n----------------------------------------\n\nTITLE: defineModel with Arguments and Options\nDESCRIPTION: Shows how to pass both the model name and prop options to `defineModel` when using arguments with v-model.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst title = defineModel('title', { required: true })\n```\n\n----------------------------------------\n\nTITLE: Defining a Two-Way Binding Prop with defineModel in Vue\nDESCRIPTION: This code snippet shows how to use `defineModel` to declare a two-way binding prop in Vue. The `defineModel` macro automatically declares a model prop and a corresponding value update event, enabling the use of `v-model` from the parent component. The code also shows how to declare the prop with options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// declares \"modelValue\" prop, consumed by parent via v-model\nconst model = defineModel()\n// OR: declares \"modelValue\" prop with options\nconst model = defineModel({ type: String })\n\n// emits \"update:modelValue\" when mutated\nmodel.value = 'hello'\n\n// declares \"count\" prop, consumed by parent via v-model:count\nconst count = defineModel('count')\n// OR: declares \"count\" prop with options\nconst count = defineModel('count', { type: Number, default: 0 })\n\nfunction inc() {\n  // emits \"update:count\" when mutated\n  count.value++\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Single-File Component (Composition API)\nDESCRIPTION: This snippet demonstrates a Vue Single-File Component (SFC) using the Composition API and `<script setup>`. It defines a reactive `count` ref, a template with a button to increment the count, and scoped CSS to style the button.\n\nDependencies: vue\nInput: None\nOutput: A complete Vue component definition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vue SFC Example\nDESCRIPTION: This snippet illustrates the basic structure of a Vue Single-File Component (SFC) with template, script, and style blocks. It shows how to define a simple component with data and styling using HTML-like syntax.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State with ref() - Composition API - JavaScript\nDESCRIPTION: Shows how to declare reactive state using the `ref()` function in the Composition API.  `ref()` wraps the argument in a ref object with a `.value` property, which must be accessed to get or set the value. The ref needs to be declared and returned from the component's `setup()` function to be accessed in the template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst count = ref(0)\n```\n\n----------------------------------------\n\nTITLE: Concise Typing for Component Emits in Vue 3.3+\nDESCRIPTION: This code snippet shows the more succinct syntax available from Vue 3.3+ for typing component emits using a type literal where values are array/tuple types representing accepted event parameters. Named tuples provide explicit naming for each argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{  change: [id: number]\n  update: [value: string]\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Augmenting Global Properties in Vue.js with TypeScript\nDESCRIPTION: This snippet explains how to augment global properties added to component instances via `app.config.globalProperties` in Vue.js using TypeScript module augmentation. It shows how to declare a module 'vue' and extend the `ComponentCustomProperties` interface to include the types of globally available properties, enabling type-safe access to these properties within components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-for on Component\nDESCRIPTION: Illustrates how to use the `v-for` directive directly on a Vue component. This example shows how to iterate over an array of items and render a component for each item, ensuring each component has a unique key.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_21\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\n----------------------------------------\n\nTITLE: Type-Only Props/Emit Declarations TypeScript\nDESCRIPTION: Illustrates how to declare props and emits using pure-type syntax by passing a literal type argument to `defineProps` or `defineEmits`.  This allows for type safety and automatic runtime declaration generation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number] // named tuple syntax\n  update: [value: string]\n}>()\n```\n\n----------------------------------------\n\nTITLE: Defining prop options for defineModel\nDESCRIPTION: Shows how to pass prop options to `defineModel` to specify if the `v-model` is required or provide a default value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// making the v-model required\nconst model = defineModel({ required: true })\n\n// providing a default value\nconst model = defineModel({ default: 0 })\n```\n\n----------------------------------------\n\nTITLE: Nullable Type Prop (Options API)\nDESCRIPTION: This snippet demonstrates how to define a prop that is required but can also accept a null value using Options API. The `id` prop is defined to be either a string or null, and it is marked as required.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    id: {\n      type: [String, null],\n      required: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching Component Vue\nDESCRIPTION: This Vue component demonstrates basic asynchronous data fetching using `fetch`. It utilizes `ref` to manage the data and error states. The template conditionally renders a loading message, the fetched data, or an error message based on the current state.  This is a basic pattern for fetching data within a Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Computed Property Definition (Options API)\nDESCRIPTION: This snippet demonstrates defining a computed property called `publishedBooksMessage` within the Options API. The computed property's getter function checks if the `author.books` array has any books and returns 'Yes' or 'No' accordingly. The `this` keyword refers to the component instance, allowing access to the component's data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Slots Vue.js\nDESCRIPTION: This code snippet demonstrates how to use the `<FancyButton>` component, passing \"Click me!\" as slot content. The content is rendered within the `<slot>` element defined in the `<FancyButton>` component's template.  The slot content is rendered where the `<slot>` element is placed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>\n```\n\n----------------------------------------\n\nTITLE: Preventing Style Tag Rendering in Vue.js Templates\nDESCRIPTION: This example shows that Vue prevents rendering of style tags inside templates to avoid potential vulnerabilities related to styling the entire page by malicious users.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<style>{{ userProvidedStyles }}</style>\n```\n\n----------------------------------------\n\nTITLE: Sync Watcher (Options API) - JavaScript\nDESCRIPTION: This code snippet creates a synchronous watcher using the Options API. The `flush: 'sync'` option makes the callback execute immediately after the reactive state changes, before any Vue-managed updates occur.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'sync'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-model with Arguments Options API\nDESCRIPTION: Options API implementation of `v-model` with arguments: the child component should expect a `title` prop and emit an `update:title` event to update the parent value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<!-- MyComponent.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['update:title']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Pseudo-code for Vue Reactivity with Proxy and Getter/Setter\nDESCRIPTION: Illustrates the core concepts of Vue's reactivity system using pseudo-code.  It showcases how `reactive()` uses Proxies to intercept property access and trigger dependency tracking (`track()`) and updates (`trigger()`).  Similarly, `ref()` uses getter/setters for reactive primitive values. This snippet highlights the key mechanisms behind Vue's reactivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reactive(obj) {\n  return new Proxy(obj, {\n    get(target, key) {\n      track(target, key)\n      return target[key]\n    },\n    set(target, key, value) {\n      target[key] = value\n      trigger(target, key)\n    }\n  })\n}\n\nfunction ref(value) {\n  const refObject = {\n    get value() {\n      track(refObject, 'value')\n      return value\n    },\n    set value(newValue) {\n      value = newValue\n      trigger(refObject, 'value')\n    }\n  }\n  return refObject\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props with defineComponent in Vue.js\nDESCRIPTION: This snippet demonstrates how to enable type inference for component props in Vue.js Options API using `defineComponent()`. It shows how Vue infers types based on the `props` option, including `required: true` and `default` settings. It covers basic types like String, Number, and String, as well as the `null` type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props with defineProps in Vue\nDESCRIPTION: This code snippet shows how to define component props with TypeScript using the `defineProps` macro in `<script setup>`. It uses runtime declaration, inferring the props types based on the argument provided to `defineProps()`. The example defines `foo` as a required string and `bar` as an optional number.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>\n```\n\n----------------------------------------\n\nTITLE: Binding a v-model to a Vue Component\nDESCRIPTION: This shows how a parent component can bind a value to a child component using `v-model`.  Any changes made to the `countModel` in the child will automatically update the `countModel` in the parent.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Parent.vue -->\n<Child v-model=\"countModel\" />\n```\n\n----------------------------------------\n\nTITLE: Text Input Binding with v-model (Vue HTML)\nDESCRIPTION: Demonstrates basic text input binding using v-model. The input's value is bound to the 'text' variable. When the input value changes, the 'text' variable is updated automatically.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n\n```\n\n----------------------------------------\n\nTITLE: Text Interpolation in Vue Template\nDESCRIPTION: This code snippet demonstrates text interpolation in a Vue template using the mustache syntax (double curly braces). The `msg` property from the component instance is dynamically rendered within the `<span>` element. The content will update whenever the `msg` property changes in the Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<span>Message: {{ msg }}</span>\n```\n\n----------------------------------------\n\nTITLE: Deep Reactivity with Composition API in Vue\nDESCRIPTION: This example illustrates deep reactivity using the Composition API in Vue. The `ref` function is used to create a reactive object `obj`. The `mutateDeeply` function modifies nested properties within `obj`, and Vue automatically detects these changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst obj = ref({\n  nested: { count: 0 },\n  arr: ['foo', 'bar']\n})\n\nfunction mutateDeeply() {\n  // these will work as expected.\n  obj.value.nested.count++\n  obj.value.arr.push('baz')\n}\n```\n\n----------------------------------------\n\nTITLE: Using reactive state in Vue templates\nDESCRIPTION: This example shows how to use the state created with `reactive()` in a Vue template. The `state.count` property is accessed and mutated directly within the template using data binding and event handling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"state.count++\">\n  {{ state.count }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component\nDESCRIPTION: Implementation of a custom input component to work with `v-model`. It accepts a `modelValue` prop and emits an `update:modelValue` event when the input changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>\n\n<template>\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with aria-labelledby\nDESCRIPTION: This Vue.js code demonstrates using aria-labelledby to associate instructions with an input field.  The aria-labelledby attribute allows linking multiple IDs to provide comprehensive context and instructions for the input, enhancing accessibility.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<fieldset>\n  <legend>Using aria-labelledby</legend>\n  <label id=\"date-label\" for=\"date\">Current Date: </label>\n  <input\n    type=\"date\"\n    name=\"date\"\n    id=\"date\"\n    aria-labelledby=\"date-label date-instructions\"\n  />\n  <p id=\"date-instructions\">MM/DD/YYYY</p>\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Multiple v-model Bindings (Composition API)\nDESCRIPTION: Shows how to define multiple `v-model` bindings within a Vue.js component using Composition API and `defineModel`. It defines two refs, `firstName` and `lastName`, which are bound to input fields.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst firstName = defineModel('firstName')\nconst lastName = defineModel('lastName')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"firstName\" />\n  <input type=\"text\" v-model=\"lastName\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Watch with Side Effect Cleanup (Vue 3.5+) - JavaScript\nDESCRIPTION: Shows how to use `onWatcherCleanup` to register a cleanup function in Vue 3.5+. This function is called when the watcher is about to re-run, allowing for cleanup of previous side effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onWatcherCleanup } from 'vue'\n\nwatch(id, async (newId) => {\n  const { response, cancel } = doAsyncWork(newId)\n  onWatcherCleanup(cancel)\n  data.value = await response\n})\n```\n\n----------------------------------------\n\nTITLE: Template Ref in Options API in Vue\nDESCRIPTION: This code demonstrates how to use the `ref` attribute in the Options API in Vue.js to create a template reference. The `ref` attribute is bound to a DOM element, making it accessible via `this.$refs` within the component instance. The `ref` will be registered under the component's `this.$refs` object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- stored as this.$refs.p -->\n<p ref=\"p\">hello</p>\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events using defineEmits Vue\nDESCRIPTION: This snippet shows how to declare emitted events using `defineEmits()` macro in the Composition API. The component declares that it will emit `inFocus` and `submit` events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_10\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\ndefineEmits(['inFocus', 'submit'])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multiple Checkboxes with v-model (Vue HTML)\nDESCRIPTION: Demonstrates binding multiple checkboxes to the same 'checkedNames' array. When a checkbox is checked or unchecked, its value is added to or removed from the 'checkedNames' array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n\n```\n\n----------------------------------------\n\nTITLE: Providing with Symbol Key (Composition API)\nDESCRIPTION: This snippet shows how to provide data using a Symbol injection key in Vue.js Composition API. It imports the Symbol key and provides an object associated with it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// in provider component\nimport { provide } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nprovide(myInjectionKey, {\n  /* data to provide */\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Properties in Script Setup with defineExpose in Vue\nDESCRIPTION: This code snippet demonstrates how to explicitly expose properties in a `<script setup>` component using the `defineExpose` compiler macro. This allows parent components to access these properties via template refs or `$parent` chains.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\ndefineExpose({\n  a,\n  b\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Vue Composable (useCounter)\nDESCRIPTION: This snippet shows how to unit test a composable function like `useCounter`. It imports the composable, invokes it, and then asserts that the state and methods behave as expected. It leverages Vitest's `expect` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// counter.test.js\nimport { useCounter } from './counter.js'\n\ntest('useCounter', () => {\n  const { count, increment } = useCounter()\n  expect(count.value).toBe(0)\n\n  increment()\n  expect(count.value).toBe(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamically Render Select Options in Vue\nDESCRIPTION: This snippet shows how to dynamically render select options using `v-for`.  The options are created from an array of objects, where each object has a `text` and `value` property. The selected value is bound to a data property with `v-model`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\n----------------------------------------\n\nTITLE: Reactive Count Initialization (Options API)\nDESCRIPTION: Defines a reactive data property `count` within a Vue component using the Options API. This property is initialized to 0 and bound to an event handler. The Options API allows defining component logic through the `data` property and other options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exposed Method as Event Handler - Composition API - HTML\nDESCRIPTION: Example of how to use the method exposed above in a Vue HTML template. This displays the usage of the increment function within the template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_8\n\nLANGUAGE: Vue\nCODE:\n```\n<button @click=\"increment\">\n  {{ count }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Emitting events with defineEmits in Composition API Vue\nDESCRIPTION: This snippet shows how to declare and use `defineEmits` within `<script setup>` to create an emit function, which can then be used to emit events.  This is an alternate method that is used for emitting events within the setup script.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_11\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nconst emit = defineEmits(['inFocus', 'submit'])\n\nfunction buttonClick() {\n  emit('submit')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using a Component (Options API) Vue\nDESCRIPTION: Demonstrates how to import and register a child component (ButtonCounter.vue) within a parent component using the Options API. The `components` option registers the imported `ButtonCounter` making it available for use in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events with Type Annotations (Composition API) TypeScript\nDESCRIPTION: This snippet demonstrates using type annotations with `defineEmits` in `<script setup>` to declare emitted events with TypeScript. It specifies the event names and their argument types.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component A - Composition API - Vue\nDESCRIPTION: This Vue component (ComponentA.vue) imports the shared `store` and displays the `count` property. It utilizes the Composition API and assumes the `store` module exports a reactive object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- ComponentA.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Watching Reactive Object Property (Vue.js)\nDESCRIPTION: This snippet demonstrates the correct way to watch a property of a reactive object using a getter function in Vue.js Composition API. It highlights that directly watching obj.count won't work and provides the correct approach using a getter.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// instead, use a getter:\nwatch(\n  () => obj.count,\n  (count) => {\n    console.log(`Count is: ${count}`)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Typescript with defineModel in Vue\nDESCRIPTION: This snippet demonstrates how to use TypeScript with `defineModel` to specify the types of the model value and the modifiers. It shows how to define the type of the model value and how to specify the available modifiers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst modelValue = defineModel<string>()\n//    ^? Ref<string | undefined>\n\n// default model with options, required removes possible undefined values\nconst modelValue = defineModel<string>({ required: true })\n//    ^? Ref<string>\n\nconst [modelValue, modifiers] = defineModel<string, 'trim' | 'uppercase'>()\n//                 ^? Record<'trim' | 'uppercase', true | undefined>\n```\n\n----------------------------------------\n\nTITLE: defineModel with Arguments\nDESCRIPTION: Demonstrates using `defineModel()` with an argument to create a two-way binding to a specific prop in the child component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<!-- MyComponent.vue -->\n<script setup>\nconst title = defineModel('title')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"title\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Component (Options API) JavaScript\nDESCRIPTION: Defines a Vue component as a plain JavaScript object using the Options API. The `data` option initializes the `count` property. The `template` option provides an inlined HTML string that displays a button which, when clicked, increments the value of count.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Component (Composition API) Vue\nDESCRIPTION: Defines a Vue component using the Composition API within a Single-File Component (SFC).  It imports the `ref` function from Vue and uses it to create a reactive `count` variable initialized to 0.  The template displays the current value of `count` and increments it on button click.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Watching a Ref with Composition API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to use the `watch` function from the Vue.js Composition API to watch a ref and execute a callback function whenever the ref's value changes. The `count` ref is initialized to 0, and the `watch` function is used to log the new count value to the console whenever it changes. This approach allows for reactive side effects based on changes in reactive data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-10/description.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue'\n\nconst count = ref(0)\n\nwatch(count, (newCount) => {\n  // yes, console.log() is a side effect\n  console.log(`new count is: ${newCount}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Props in Options API setup function\nDESCRIPTION: This snippet shows how to access props within the `setup` function of a Vue component using the Options API. The `props` object is passed as the first argument to the `setup` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Data Fetching with useFetch Composable in Vue.js\nDESCRIPTION: This `useFetch` composable function demonstrates fetching data using a URL that can be a static string, a ref, or a getter function. It leverages `watchEffect` to react to changes in the URL, and `toValue` to normalize the URL argument. The composable returns reactive `data` and `error` refs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch.js\nimport { ref, watchEffect, toValue } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  const fetchData = () => {\n    // reset state before fetching..\n    data.value = null\n    error.value = null\n\n    fetch(toValue(url))\n      .then((res) => res.json())\n      .then((json) => (data.value = json))\n      .catch((err) => (error.value = err))\n  }\n\n  watchEffect(() => {\n    fetchData()\n  })\n\n  return { data, error }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Directive SSR Implementation JavaScript\nDESCRIPTION: This JavaScript code defines a custom directive with client-side (`mounted`) and server-side (`getSSRProps`) implementations. The `getSSRProps` hook allows specifying attributes to be added to the rendered element during SSR, enabling custom directive behavior on the server. It receives the directive binding as an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myDirective = {\n  mounted(el, binding) {\n    // client-side implementation:\n    // directly update the DOM\n    el.id = binding.value\n  },\n  getSSRProps(binding) {\n    // server-side implementation:\n    // return the props to be rendered.\n    // getSSRProps only receives the directive binding.\n    return {\n      id: binding.value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Composition API and render function\nDESCRIPTION: This code snippet demonstrates the usage of `defineComponent` with a function signature (Composition API and render function).  It defines a component that uses the Composition API to manage state (`count`) and returns a render function (using `h`) to create the component's virtual DOM.  The props are manually declared.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Typing Computed Properties in Vue.js\nDESCRIPTION: This snippet demonstrates how a computed property infers its type based on its return value in Vue.js. It shows a basic example where the `greeting` computed property's type is inferred from its return value, a string. It also shows how to explicitly annotate the return type of a computed property and how to annotate a writable computed property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Prop Validation (Options API)\nDESCRIPTION: This snippet demonstrates prop validation using the `props` option in Options API. It showcases specifying different types, required props, default values, and custom validators for props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    // Basic type check\n    //  (`null` and `undefined` values will allow any type)\n    propA: Number,\n    // Multiple possible types\n    propB: [String, Number],\n    // Required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // Required but nullable string\n    propD: {\n      type: [String, null],\n      required: true\n    },\n    // Number with a default value\n    propE: {\n      type: Number,\n      default: 100\n    },\n    // Object with a default value\n    propF: {\n      type: Object,\n      // Object or array defaults must be returned from\n      // a factory function. The function receives the raw\n      // props received by the component as the argument.\n      default(rawProps) {\n        return { message: 'hello' }\n      }\n    },\n    // Custom validator function\n    // full props passed as 2nd argument in 3.4+\n    propG: {\n      validator(value, props) {\n        // The value must match one of these strings\n        return ['success', 'warning', 'danger'].includes(value)\n      }\n    },\n    // Function with a default value\n    propH: {\n      type: Function,\n      // Unlike object or array default, this is not a factory\n      // function - this is a function to serve as a default value\n      default() {\n        return 'Default function'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Good Prop Use in SFC (kebab-case or camelCase)\nDESCRIPTION: Shows proper usage of props in Single-File Components (SFC) using either kebab-case or camelCase but emphasizing consistency within the project.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n// for SFC - please make sure your casing is consistent throughout the project\n// you can use either convention but we don't recommend mixing two different casing styles\n<WelcomeMessage greeting-text=\"hi\"/>\n// or\n<WelcomeMessage greetingText=\"hi\"/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Type Inference with ref() in Vue\nDESCRIPTION: This example demonstrates how to override the default type inference of `ref()` by passing a generic argument when calling the function. Here, `year` is explicitly defined as `Ref<string | number>`, allowing it to accept both string and number values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// resulting type: Ref<string | number>\nconst year = ref<string | number>('2020')\n\nyear.value = 2020 // ok!\n```\n\n----------------------------------------\n\nTITLE: Using Imported Helpers Vue\nDESCRIPTION: Demonstrates how imported helper functions can be directly used in template expressions without needing to expose them via the `methods` option. The example uses a `capitalize` function imported from a local file.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { capitalize } from './helpers'\n</script>\n\n<template>\n  <div>{{ capitalize('hello') }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Method Handler Definition (Options API)\nDESCRIPTION: Defines a `greet` method within a Vue component using the Options API. It accesses the component's `name` data property to construct a greeting message. `this` refers to the current Vue instance. The method also handles the native DOM event object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Props and Emits Declaration for v-model with Modifiers (Options API)\nDESCRIPTION: This JavaScript code defines the `props` and `emits` options for a Vue component that uses `v-model` with a modifier. It shows how to access the modifiers within the component's `created` lifecycle hook. It relies on the Vue Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['title', 'titleModifiers'],\n  emits: ['update:title'],\n  created() {\n    console.log(this.titleModifiers) // { capitalize: true }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MyModal Component (Composition API)\nDESCRIPTION: This snippet shows the implementation of the <MyModal> component using the Composition API. It uses a ref to manage the open/close state of the modal and includes the modal's template and styles.  The modal is styled with fixed positioning and a z-index.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Author Data (Composition API)\nDESCRIPTION: This snippet initializes author data using the Composition API with `reactive`. It imports `reactive` from 'vue' and creates a reactive object called `author` containing the author's name and books array. The `reactive` function makes the object's properties reactive, meaning changes to these properties will trigger updates in the component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Multiline Text Input - Correct v-model Binding (Vue HTML)\nDESCRIPTION: Shows the correct way to bind a textarea to a reactive variable 'text' using v-model for proper two-way data binding.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- good -->\n<textarea v-model=\"text\"></textarea>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Data with Data Function in Vue.js\nDESCRIPTION: This code demonstrates how to define the `data` option in a Vue.js component.  The `data` option is a function that returns a plain JavaScript object, which Vue will make reactive.  The returned object becomes accessible via `this.$data` and individual properties are proxied to the component instance (e.g., `this.a`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return { a: 1 }\n  },\n  created() {\n    console.log(this.a) // 1\n    console.log(this.$data) // { a: 1 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Input using v-model\nDESCRIPTION: Illustrates the basic usage of `v-model` on a native input element, which gets compiled into a `:value` binding and an `@input` event listener.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-model=\"searchText\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Array with Composition API in Vue\nDESCRIPTION: This code snippet demonstrates how to initialize an array of objects using the Composition API in Vue. It uses the `ref` function to create a reactive reference to the array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n----------------------------------------\n\nTITLE: BaseLayout Template with Named Slots (Vue)\nDESCRIPTION: This example demonstrates a BaseLayout component with named slots for the header, main content, and footer. The `name` attribute on the `<slot>` element defines the slot's name, allowing the parent component to target specific sections of the layout.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript in Single-File Components\nDESCRIPTION: Shows how to use TypeScript within Vue Single-File Components (SFCs) by adding the `lang=\"ts\"` attribute to the `<script>` tag. This enables type checking and auto-completion in the template.  The example defines a component with a data property and displays it in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disable attribute inheritance (Composition API)\nDESCRIPTION: This code demonstrates disabling attribute inheritance for a Vue component using the Composition API within `<script setup>`. It uses `defineProps`, `defineEmits`, and `defineOptions` to achieve the same effect as the Options API example.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps(['label', 'value'])\ndefineEmits(['input'])\ndefineOptions({\n  inheritAttrs: false\n})\n</script>\n\n<template>\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    />\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inject values with inject() in Vue.js\nDESCRIPTION: Illustrates how to inject provided values using the `inject()` function in Vue.js Composition API. It demonstrates injecting static values, reactive values, values with Symbol keys, values with default values, and values with default value factories within a `<script setup>` block.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Symbol Injection Key (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a Symbol injection key in JavaScript. This is used to avoid potential naming conflicts when providing and injecting dependencies in large applications. It exports the Symbol for use in both provider and injector components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// keys.js\nexport const myInjectionKey = Symbol()\n```\n\n----------------------------------------\n\nTITLE: Computed classObject (Options API)\nDESCRIPTION: Defines a computed property within Vue's Options API that returns a class object. The class object is dynamically constructed based on the component's data properties, allowing for complex class binding logic.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template with v-if Directive - HTML\nDESCRIPTION: This HTML snippet demonstrates how the `v-if` directive creates a new block node. The outer `div` is the root block, and the `div` with the `v-if` directive creates a child block. This nested structure allows Vue to efficiently update the DOM when the condition of the `v-if` directive changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div> <!-- root block -->\n  <div>\n    <div v-if> <!-- if block -->\n      ...\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Refs from Composables in Vue.js\nDESCRIPTION: This example shows how to correctly destructure refs returned from a composable while maintaining reactivity. Composables should return plain objects containing refs to allow destructuring without losing the reactivity connection to the internal state of the composable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// x and y are refs\nconst { x, y } = useMouse()\n```\n\n----------------------------------------\n\nTITLE: Declaring Props with Type Validation (Options API)\nDESCRIPTION: This snippet illustrates how to declare props with type validation in a Vue component using the Options API. The component defines 'title' as a String type and 'likes' as a Number type. This provides runtime warnings in the console if incorrect types are passed as props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Custom Element in Vue SFC without Type Definitions\nDESCRIPTION: Demonstrates how to use a custom element in a Vue SFC when the custom element library does not provide type definitions.  It shows how to define types locally and integrate those types with Vue's `GlobalComponents` type. It imports the custom element and the type helper and manually defines the property and event types.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Suppose that `some-lib` is plain JS without type definitions, and TypeScript\n// cannot infer the types:\nimport { SomeElement } from 'some-lib'\n\n// We'll use the same type helper as before.\nimport { DefineCustomElement } from './DefineCustomElement'\n\ntype SomeElementProps = { foo?: number; bar?: string }\ntype SomeElementEvents = { 'apple-fell': AppleFellEvent }\ninterface AppleFellEvent extends Event {\n  /* ... */\n}\n\n// Add the new element type to Vue's GlobalComponents type.\ndeclare module 'vue' {\n  interface GlobalComponents {\n    'some-element': DefineCustomElement<\n      SomeElementProps,\n      SomeElementEvents\n    >\n  }\n}\n\n// ... same as before, use a reference to the element ...\n</script>\n\n<template>\n  <!-- ... same as before, use the element in the template ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Define Component with TypeScript\nDESCRIPTION: Demonstrates how to use `defineComponent()` to enable type inference for component options in Vue.js. This includes defining props with their respective types and accessing them within the component's `data` and `mounted` hooks. It showcases type checking for props, data properties, and the component instance (`this`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Async Component with Dynamic Import\nDESCRIPTION: This snippet shows how to use `defineAsyncComponent` with ES module dynamic import. Bundlers like Vite and webpack support this syntax and will use it as bundle split points.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\n----------------------------------------\n\nTITLE: Provide Reactive Value in Vue.js\nDESCRIPTION: This code snippet demonstrates providing a reactive value using `ref` and `provide` from Vue.js. It creates a reactive `count` using `ref` and provides it under the key 'key'. This allows descendant components to reactively connect to the provided value. Import both `ref` and `provide` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)\n```\n\n----------------------------------------\n\nTITLE: Type Inference with ref() in Vue\nDESCRIPTION: This code demonstrates how `ref()` infers its type from the initial value.  `year` is inferred to be `Ref<number>`. Subsequent attempts to assign a string value will result in a TypeScript error.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// => TS Error: Type 'string' is not assignable to type 'number'.\nyear.value = '2020'\n```\n\n----------------------------------------\n\nTITLE: Using onUnmounted to clear interval\nDESCRIPTION: This example demonstrates the usage of the `onUnmounted` lifecycle hook to clear an interval. This is important for cleaning up side effects and preventing memory leaks. It imports `onMounted` and `onUnmounted` from 'vue', sets up an interval in `onMounted`, and clears the interval in `onUnmounted`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n  intervalId = setInterval(() => {\n    // ...\n  })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Passing Content to Named Slots (Vue)\nDESCRIPTION: This snippet shows how to pass content to named slots in a parent component using the `<template v-slot:header>` syntax (or the shorthand `<template #header>`). Each `<template>` targets a specific slot in the `BaseLayout` component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<BaseLayout>\n  <template #header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template #default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>\n```\n\n----------------------------------------\n\nTITLE: v-slot Usage Examples in Vue.js\nDESCRIPTION: Illustrates the use of v-slot for defining named slots and scoped slots in Vue.js components.  Examples show how to pass data to slots using props and destructuring. v-slot facilitates flexible content distribution and customization within components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Named slots -->\n<BaseLayout>\n  <template v-slot:header>\n    Header content\n  </template>\n\n  <template v-slot:default>\n    Default slot content\n  </template>\n\n  <template v-slot:footer>\n    Footer content\n  </template>\n</BaseLayout>\n\n<!-- Named slot that receives props -->\n<InfiniteScroll>\n  <template v-slot:item=\"slotProps\">\n    <div class=\"item\">\n      {{ slotProps.item.text }}\n    </div>\n  </template>\n</InfiniteScroll>\n\n<!-- Default slot that receive props, with destructuring -->\n<Mouse v-slot=\"{ x, y }\">\n  Mouse position: {{ x }}, {{ y }}\n</Mouse>\n```\n\n----------------------------------------\n\nTITLE: Using `aria-describedby` for Input Description\nDESCRIPTION: This code demonstrates how to use the `aria-describedby` attribute to provide a description for an input field. The `aria-describedby` attribute references the `id` of another element (usually a paragraph) to use its content as the description of the input field. This description provides additional information or instructions to the user.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <h1 id=\"billing\">Billing</h1>\n  <div class=\"form-item\">\n    <label for=\"name\">Full Name: </label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id=\"name\"\n      v-model=\"name\"\n      aria-labelledby=\"billing name\"\n      aria-describedby=\"nameDescription\"\n    />\n    <p id=\"nameDescription\">Please provide first and last name.</p>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Converting Reactive Object to Refs in Vue.js (toRefs)\nDESCRIPTION: The `toRefs` function converts a reactive object to a plain object where each property is a ref pointing to the corresponding property of the original reactive object. This enables destructuring without losing reactivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toRefs<T extends object>(\n  object: T\n): {\n  [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({\n  foo: 1,\n  bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n  foo: Ref<number>,\n  bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useFeatureX() {\n  const state = reactive({\n    foo: 1,\n    bar: 2\n  })\n\n  // ...logic operating on state\n\n  // convert to refs when returning\n  return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()\n```\n\n----------------------------------------\n\nTITLE: Declaring Props with the `props` option (Composition API)\nDESCRIPTION: This JavaScript snippet shows how to declare props using the `props` option in a Vue component when not using `<script setup>`. The component defines a 'foo' prop and logs its value within the `setup` function. The `setup` function receives the props as its first argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handler Definition (Options API)\nDESCRIPTION: Defines a `warn` method within the `methods` object of a Vue component. It receives a `message` and an `event` object, preventing the default behavior if an event object is passed. This showcases how to access and handle the native event object within a method handler using the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values for Type-Based Props TypeScript\nDESCRIPTION: Shows how to use JavaScript's native default value syntax to declare default values for props when using type-based props declaration with `defineProps`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()\n```\n\n----------------------------------------\n\nTITLE: Component setup with reactive and ref in Vue.js\nDESCRIPTION: This code snippet shows how to set up a Vue component using the `setup()` function. It declares reactive state with `reactive()` and `ref()`, and returns them as properties to be used in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetup() {\n  const counter = reactive({ count: 0 })\n  const message = ref('Hello World!')\n  return {\n    counter,\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Complex Slot Content Vue.js\nDESCRIPTION: This code snippet demonstrates passing more complex slot content to the `<FancyButton>` component, including a `<span>` element with inline styling and an `AwesomeIcon` component.  The parent can provide arbitrary template code as slot content.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<FancyButton>\n  <span style=\"color:red\">Click me!</span>\n  <AwesomeIcon name=\"plus\" />\n</FancyButton>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Arguments in Composition API Vue JavaScript\nDESCRIPTION: This snippet demonstrates handling event arguments within the Composition API. The function `increaseCount` receives the event argument `n` and adds it to the reactive `count.value`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction increaseCount(n) {\n  count.value += n\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Runtime Errors with App-Level Error Handler in Vue.js\nDESCRIPTION: This code snippet demonstrates how to use the app-level error handler in Vue.js to report runtime errors to tracking services. It configures the `app.config.errorHandler` to catch errors, the instance where the error occurred, and additional information, enabling integration with services like Sentry or Bugsnag for error monitoring.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/production-deployment.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Fetching Composable Vue\nDESCRIPTION: This Vue component demonstrates how to use the `useFetch` composable to fetch and display data. It imports the `useFetch` composable, calls it with a URL, and destructures the returned `data` and `error` refs. The template then utilizes these reactive values to display the fetched data or an error message.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Watcher with watchEffect() in Vue.js\nDESCRIPTION: Creates a watcher that immediately runs a function while reactively tracking its dependencies. It re-runs the function whenever the dependencies are changed, by default, watchers run just prior to component rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\ncount.value++\n// -> logs 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin - Vue.js\nDESCRIPTION: Illustrates how to define a Vue.js plugin as an object with an `install()` method. The `install()` method receives the application instance (`app`) and any options passed during installation, allowing the plugin to configure the application as needed. This provides a structured way to encapsulate plugin logic.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic HTML Form Example\nDESCRIPTION: This code shows a basic HTML form structure using semantic elements. It leverages a `v-for` loop to dynamically generate form items based on the `formItems` data.  It also includes autocomplete functionality and a submit button.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      :type=\"item.type\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref from Value/Getter/Reactive Prop in Vue.js (toRef)\nDESCRIPTION: The `toRef` function creates a ref from a value, getter, or reactive object property. In the case of an object property, the created ref is synced with the original property, enabling two-way data binding.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// normalization signature (3.3+)\nfunction toRef<T>(\n  value: T\n): T extends () => infer R\n  ? Readonly<Ref<R>>\n  : T extends Ref\n  ? T\n  : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n  object: T,\n  key: K,\n  defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({\n  foo: 1,\n  bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooRef = ref(state.foo)\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reactivity with Refs Vue\nDESCRIPTION: Shows how to create reactive state using the `ref` function from Vue's reactivity APIs.  Refs are automatically unwrapped when referenced in templates. This example creates a reactive `count` variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Providing Reactive Data in Vue (Composition API)\nDESCRIPTION: This snippet demonstrates providing reactive data using the `provide` function in Vue.js Composition API.  It defines a `location` ref and a function `updateLocation` to mutate it, then provides both to the child component. The lines highlighted with {7-9,13} are the `updateLocation` function and the destructuring of the injected object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<!-- inside provider component -->\n<script setup>\nimport { provide, ref } from 'vue'\n\nconst location = ref('North Pole')\n\nfunction updateLocation() {\n  location.value = 'South Pole'\n}\n\nprovide('location', {\n  location,\n  updateLocation\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State with reactive() in Vue\nDESCRIPTION: This example shows how to use the `reactive()` API to create reactive state in Vue. The `reactive()` function takes an object and returns a reactive proxy of that object, allowing Vue to track changes to its properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { reactive } from 'vue'\n\nconst state = reactive({ count: 0 })\n```\n\n----------------------------------------\n\nTITLE: Style Properties data properties (Options API)\nDESCRIPTION: Defines data properties within Vue's Options API to store style properties such as 'activeColor' and 'fontSize'. These properties can then be bound to the `style` attribute for dynamic styling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Ref Attribute Vue HTML\nDESCRIPTION: Demonstrates the basic usage of the `ref` attribute in a Vue template. The `ref` attribute allows obtaining a direct reference to a specific DOM element after it's mounted. The value of the `ref` attribute is a string that serves as the reference name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input ref=\"input\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Writable Computed Ref in Vue.js\nDESCRIPTION: Shows how to create a writable computed ref using the `computed()` function with a `get` and `set` object. This allows modifying the computed value, which in turn updates the underlying reactive value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n```\n\n----------------------------------------\n\nTITLE: Teleporting the Modal\nDESCRIPTION: This snippet demonstrates how to use the <Teleport> component to move the modal's content to the body tag. The to prop specifies the target element, which can be a CSS selector or a DOM node. This allows the modal to break out of the nested DOM structure and avoid potential styling and z-index issues.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Props with Typescript in Vue\nDESCRIPTION: This code snippet demonstrates how to define default values for props when using TypeScript with Vue. It uses the `withDefaults` compiler macro to provide type checks for the default values and ensures that the returned `props` type has the optional flags removed for properties that do have default values declared.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons with v-model (Vue HTML)\nDESCRIPTION: Example of binding radio buttons to a 'picked' ref. When a radio button is selected, its value is assigned to the 'picked' ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Wrapper for Composables in Vue.js\nDESCRIPTION: This code demonstrates how to use `reactive()` to wrap the return value of a composable function, allowing access to the returned state as object properties while maintaining reactivity. This approach unwraps the refs so they can be accessed directly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mouse = reactive(useMouse())\n// mouse.x is linked to original ref\nconsole.log(mouse.x)\n```\n\n----------------------------------------\n\nTITLE: Custom Input with Computed Property\nDESCRIPTION: Another way of implementing `v-model` within a custom input component is to use a writable `computed` property with both a getter and a setter.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  computed: {\n    value: {\n      get() {\n        return this.modelValue\n      },\n      set(value) {\n        this.$emit('update:modelValue', value)\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <input v-model=\"value\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing i18n Plugin with Translations - Vue.js\nDESCRIPTION: Shows how to install the i18n plugin and pass a configuration object containing the translations. The configuration object is passed as the second argument to `app.use()`, providing the translated values that the `$translate` method will use.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: List Rendering with v-for in Vue\nDESCRIPTION: This code snippet demonstrates how to use the `v-for` directive in Vue.js to render a list of `<li>` elements based on the `todos` array.  The `key` attribute is bound to a unique `id` for each todo object to improve rendering performance and handle list updates efficiently.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li v-for=\"todo in todos\" :key=\"todo.id\">\n    {{ todo.text }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing created Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `created` lifecycle hook, which is called after a Vue.js component instance has finished processing all state-related options, such as reactive data, computed properties, methods, and watchers. The mounting phase has not yet started when this hook is called.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  created?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Events with .once Modifier Vue HTML\nDESCRIPTION: This snippet demonstrates how to use the `.once` modifier with `v-on` to ensure that a listener is only triggered once. The `callback` function is executed only the first time `MyComponent` emits `some-event`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_4\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<MyComponent @some-event.once=\"callback\" />\n```\n\n----------------------------------------\n\nTITLE: Typing Emits with defineComponent in Vue\nDESCRIPTION: This example shows how to use `defineComponent()` to type the `emit` function when not using `<script setup>`. `defineComponent` infers the allowed events based on the `emits` option, enabling type checking and autocompletion.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: ['change'],\n  setup(props, { emit }) {\n    emit('change') // <-- type check / auto-completion\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Modules with Composition API - JavaScript\nDESCRIPTION: Illustrates how to access CSS Modules classes within the `setup()` function using the `useCssModule` API. This allows for dynamic class binding based on component state. Accepts the module name as argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCssModule } from 'vue'\n\n// inside setup() scope...\n// default, returns classes for <style module>\nuseCssModule()\n\n// named, returns classes for <style module=\"classes\">\nuseCssModule('classes')\n```\n\n----------------------------------------\n\nTITLE: Mouse Tracking Component (Direct Implementation) Vue\nDESCRIPTION: This Vue component demonstrates mouse tracking functionality using the Composition API directly within the component. It uses `ref` to create reactive state for the x and y coordinates of the mouse, and `onMounted` and `onUnmounted` lifecycle hooks to add and remove the mousemove event listener. The template displays the current mouse position.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Basic Usage\nDESCRIPTION: Illustrates how to wrap a dynamic component with `<KeepAlive>` to cache the component instance and persist its state when switching away from it. This prevents the component from being unmounted and recreated.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Inactive components will be cached! -->\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Defining Props with Validation and Options in Vue.js\nDESCRIPTION: This code demonstrates the object-based syntax for declaring props in Vue.js, allowing for type validation, default values, required status, and custom validators. Each prop is defined as a key-value pair, where the key is the prop name, and the value is an object containing options such as `type`, `default`, `required`, and `validator`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    // type check\n    height: Number,\n    // type check plus other validations\n    age: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: (value) => {\n        return value >= 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Props Destructure Example with watchEffect\nDESCRIPTION: This example showcases reactive props destructuring in Vue 3.5+ within `<script setup>`. The `watchEffect` automatically re-runs when the destructured 'foo' prop changes due to compiler transformation. This snippet requires Vue 3.5 or higher for the reactive destructuring to work as expected.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Basic Usage - Vue HTML\nDESCRIPTION: This example demonstrates the basic usage of the `<KeepAlive>` component. It wraps a dynamic component (`<component :is=\"view\">`), caching the component instance when it's not active.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<KeepAlive>\n  <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Fallback Content Vue.js\nDESCRIPTION: This code snippet shows how to use the `<SubmitButton>` component without providing any slot content. In this case, the fallback content defined in the component will be rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<SubmitButton />\n```\n\n----------------------------------------\n\nTITLE: Use component-scoped styling - Good Example 1 - HTML/CSS (Scoped Attribute)\nDESCRIPTION: Demonstrates the correct way of styling components using the `scoped` attribute in Single-File Components. This ensures that the styles only apply to the current component, preventing style conflicts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button class=\"button button-close\">×</button>\n</template>\n\n<!-- Using the `scoped` attribute -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using v-on Directive for Event Handling in Vue.js\nDESCRIPTION: These snippets illustrate various ways to use the `v-on` directive (shorthand `@`) in Vue.js for event handling. It can attach listeners to native DOM events or custom events emitted by child components. The directive supports modifiers for event propagation, default prevention, key filtering, and more. It can also accept an object of event/listener pairs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- method handler -->\n<button v-on:click=\"doThis\"></button>\n\n<!-- dynamic event -->\n<button v-on:[event]=\"doThis\"></button>\n\n<!-- inline statement -->\n<button v-on:click=\"doThat('hello', $event)\"></button>\n\n<!-- shorthand -->\n<button @click=\"doThis\"></button>\n\n<!-- shorthand dynamic event -->\n<button @[event]=\"doThis\"></button>\n\n<!-- stop propagation -->\n<button @click.stop=\"doThis\"></button>\n\n<!-- prevent default -->\n<button @click.prevent=\"doThis\"></button>\n\n<!-- prevent default without expression -->\n<form @submit.prevent></form>\n\n<!-- chain modifiers -->\n<button @click.stop.prevent=\"doThis\"></button>\n\n<!-- key modifier using keyAlias -->\n<input @keyup.enter=\"onEnter\" />\n\n<!-- the click event will be triggered at most once -->\n<button v-on:click.once=\"doThis\"></button>\n\n<!-- object syntax -->\n<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent @my-event=\"handleThis\" />\n\n<!-- inline statement -->\n<MyComponent @my-event=\"handleThis(123, $event)\" />\n```\n\n----------------------------------------\n\nTITLE: v-for with Props\nDESCRIPTION: Demonstrates how to pass data to a component when using `v-for`. The `item` and `index` from the loop are passed as props to the `MyComponent`, making the data accessible within the component's scope.  The key prop is essential for Vue's reactivity system to track changes efficiently.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\n----------------------------------------\n\nTITLE: useModel() Usage Example - JavaScript\nDESCRIPTION: Demonstrates how to use `useModel()` within a component's setup function in JavaScript. It shows how to bind a prop named 'count' using `useModel` and update its value. This snippet requires the `props` to be defined along with corresponding `emits`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Unwrapping a Ref Value in Vue.js (unref)\nDESCRIPTION: The `unref` function returns the inner value of a ref, or the value itself if it's not a ref. It's a utility to simplify accessing the underlying value, ensuring that you are working with a plain value regardless of whether it's wrapped in a ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unref<T>(ref: T | Ref<T>): T\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useFoo(x: number | Ref<number>) {\n  const unwrapped = unref(x)\n  // unwrapped is guaranteed to be number now\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Global Translation Method - Vue.js\nDESCRIPTION: Demonstrates how to add a globally available translation method (`$translate`) to a Vue.js application using a plugin. It attaches the method to `app.config.globalProperties`, allowing it to be accessed from any template. The method retrieves nested properties from the plugin's options based on a dot-delimited key.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Increment Function in Vue Composition API (SFC)\nDESCRIPTION: This code defines a Vue component using the Composition API within a Single-File Component (SFC). It uses `ref` to create a reactive `count` variable and defines an `increment` function that increments the `count`'s value when called.  It highlights the usage of `ref` and updating its `.value`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  // update component state\n  count.value++\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Post-Flush Watcher (Options API) - JavaScript\nDESCRIPTION: This shows how to define a post-flush watcher in the Options API.  The `flush: 'post'` option ensures the callback is executed after the owner component's DOM has been updated.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'post'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Communication with Events (Composition API) - Good\nDESCRIPTION: This code demonstrates the preferred pattern for parent-child component communication using events with Composition API.  The child component emits an event to notify the parent of a change, and the parent handles the event. The `defineEmits` function is used to declare emitted events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['input'])\n</script>\n\n<template>\n  <input :value=\"todo.text\" @input=\"emit('input', $event.target.value)\" />\n</template>\n\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['delete'])\n</script>\n\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"emit('delete')\">×</button>\n  </span>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Inject value using setup function in Vue.js\nDESCRIPTION: This code snippet illustrates injecting a value using the `inject` function within the `setup()` function (when not using `<script setup>`).  The `inject` function retrieves the provided value based on the given injection key.  Ensure to import `inject` from 'vue' and return the injected value from the `setup` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inject } from 'vue'\n\nexport default {\n  setup() {\n    const message = inject('message')\n    return { message }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Prop in Template\nDESCRIPTION: This snippet shows how to use the boolean prop 'disabled' in a Vue.js template. The presence of the `disabled` attribute is interpreted as `true`, while its absence is interpreted as `false`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- equivalent of passing :disabled=\"true\" -->\n<MyComponent disabled />\n\n<!-- equivalent of passing :disabled=\"false\" -->\n<MyComponent />\n```\n\n----------------------------------------\n\nTITLE: Declaring Props with Type Validation (Composition API)\nDESCRIPTION: This snippet demonstrates how to declare props with type validation in a Vue component using the Composition API with `defineProps`. The component defines 'title' as a String type and 'likes' as a Number type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration in Vue.js\nDESCRIPTION: Demonstrates how to register a component globally using the `.component()` method on a Vue application instance. This makes the component available in all templates within the application. The example shows registering both a component implementation and an imported .vue file.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Prop Name Casing in props option (Options API)\nDESCRIPTION: Example of prop name casing using props options in Options API. The 'greetingMessage' is declared as a camelCase prop.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    greetingMessage: String\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List with Index and Parent Message in Vue\nDESCRIPTION: This snippet uses `v-for` to iterate over an array and display a message that includes the parent message, the index of the item, and the item's message. This demonstrates accessing variables from both the parent scope and the current iteration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Basic Watcher in Composition API (Vue.js)\nDESCRIPTION: This code snippet illustrates a basic watcher implementation in Vue.js using the Composition API. It imports 'ref' and 'watch' from 'vue', creates reactive variables for 'question', 'answer', and 'loading', and then uses 'watch' to monitor changes to the 'question' ref. When the question includes a question mark, it fetches data from an API and updates the 'answer' ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { ref, watch } from 'vue'\n\nconst question = ref('')\nconst answer = ref('Questions usually contain a question mark. ;-)')\nconst loading = ref(false)\n\n// watch works directly on a ref\nwatch(question, async (newQuestion, oldQuestion) => {\n  if (newQuestion.includes('?')) {\n    loading.value = true\n    answer.value = 'Thinking...'\n    try {\n      const res = await fetch('https://yesno.wtf/api')\n      answer.value = (await res.json()).answer\n    } catch (error) {\n      answer.value = 'Error! Could not reach the API. ' + error\n    } finally {\n      loading.value = false\n    }\n  }\n})\n</script>\n\n<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" :disabled=\"loading\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Rendering - JavaScript\nDESCRIPTION: This snippet shows how to dynamically render components using the `h()` function based on a condition. It imports `Foo` and `Bar` components and conditionally renders either `Foo` or `Bar` based on the value of `ok.value`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Foo from './Foo.vue'\nimport Bar from './Bar.jsx'\n\nfunction render() {\n  return ok.value ? h(Foo) : h(Bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Key Modifiers Example\nDESCRIPTION: Demonstrates how to use key modifiers in Vue.js to listen for specific keyboard events. The `@keyup.enter` modifier ensures that the `submit` method is only called when the Enter key is pressed. Similarly `@keyup.page-down` ensures `onPageDown` is only called when the PageDown key is pressed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<input @keyup.page-down=\"onPageDown\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Composition API Example\nDESCRIPTION: Demonstrates a basic Vue component using Composition API with `<script setup>`. It defines a reactive `count` state, an `increment` function to update the state, and a `onMounted` lifecycle hook to log the initial count.  The template renders a button that increments the count when clicked.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/composition-api-faq.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Local Component Registration in Vue.js (Options API)\nDESCRIPTION: Demonstrates how to register a component locally using the `components` option in a Vue.js component definition (Options API, without `<script setup>`). This makes the component available only within the current component's template. The example imports the component and registers it in the `components` object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Store - JavaScript\nDESCRIPTION: This JavaScript module creates a reactive store using Vue's `reactive` API.  The store contains a `count` property initialized to 0. It is designed to be imported and used across multiple components to share state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})\n```\n\n----------------------------------------\n\nTITLE: Using Prop as Initial Data (Composition API)\nDESCRIPTION: This snippet shows how to use a prop as the initial value for a local data property using Composition API. The `initialCounter` prop is used to initialize the `counter` ref, disconnecting it from future prop updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)\n```\n\n----------------------------------------\n\nTITLE: Use component-scoped styling - Good Example 3 - HTML/CSS (BEM)\nDESCRIPTION: Demonstrates the correct way of styling components using the BEM convention in Single-File Components. This provides human-readable class names that are unlikely to conflict.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button class=\"c-Button c-Button--close\">×</button>\n</template>\n\n<!-- Using the BEM convention -->\n<style>\n.c-Button {\n  border: none;\n  border-radius: 2px;\n}\n\n.c-Button--close {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Ref in Vue\nDESCRIPTION: This code snippet demonstrates how to create a template ref in Vue using the `ref` attribute in the HTML template. The `ref` attribute allows you to obtain a reference to a specific DOM element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<p ref=\"pElementRef\">hello</p>\n```\n\n----------------------------------------\n\nTITLE: Text Input Binding with v-model (Simplified) (Vue HTML)\nDESCRIPTION: A simplified version of the text input binding using v-model. This directive handles both the value binding and the input event listener, reducing boilerplate code.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-model=\"text\">\n\n```\n\n----------------------------------------\n\nTITLE: Namespaced Components Vue\nDESCRIPTION: Illustrates the usage of component tags with dots (e.g., `<Foo.Bar>`) to refer to components nested under object properties, which is useful when importing multiple components from a single file.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport * as Form from './form-components'\n</script>\n\n<template>\n  <Form.Input>\n    <Form.Label>label</Form.Label>\n  </Form.Input>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mixins Option: Basic Usage (Vue.js)\nDESCRIPTION: Demonstrates how to use the `mixins` option to include shared logic in a Vue.js component. Mixins can contain component options such as lifecycle hooks, which are merged with the component's own options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst mixin = {\n  created() {\n    console.log(1)\n  }\n}\n\ncreateApp({\n  created() {\n    console.log(2)\n  },\n  mixins: [mixin]\n})\n\n// => 1\n// => 2\n```\n\n----------------------------------------\n\nTITLE: Typing Template Refs with useTemplateRef in Vue.js\nDESCRIPTION: This example demonstrates how to explicitly type a template ref using `useTemplateRef` and a generic type argument. This is useful when auto-inference is not possible or when you need to ensure a specific type for the referenced DOM element. Requires Vue 3.5+ and @vue/language-tools 2.1+ for optimal inference.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst el = useTemplateRef<HTMLInputElement>('el')\n```\n\n----------------------------------------\n\nTITLE: Watch Option Usage Example JavaScript\nDESCRIPTION: Demonstrates how to use the `watch` option in a Vue.js component to observe changes in data properties, including nested properties and using different callback configurations.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      a: 1,\n      b: 2,\n      c: {\n        d: 4\n      },\n      e: 5,\n      f: 6\n    }\n  },\n  watch: {\n    // watching top-level property\n    a(val, oldVal) {\n      console.log(`new: ${val}, old: ${oldVal}`)\n    },\n    // string method name\n    b: 'someMethod',\n    // the callback will be called whenever any of the watched object properties change regardless of their nested depth\n    c: {\n      handler(val, oldVal) {\n        console.log('c changed')\n      },\n      deep: true\n    },\n    // watching a single nested property:\n    'c.d': function (val, oldVal) {\n      // do something\n    },\n    // the callback will be called immediately after the start of the observation\n    e: {\n      handler(val, oldVal) {\n        console.log('e changed')\n      },\n      immediate: true\n    },\n    // you can pass array of callbacks, they will be called one-by-one\n    f: [\n      'handle1',\n      function handle2(val, oldVal) {\n        console.log('handle2 triggered')\n      },\n      {\n        handler: function handle3(val, oldVal) {\n          console.log('handle3 triggered')\n        }\n        /* ... */\n      }\n    ]\n  },\n  methods: {\n    someMethod() {\n      console.log('b changed')\n    },\n    handle1() {\n      console.log('handle 1 triggered')\n    }\n  },\n  created() {\n    this.a = 3 // => new: 3, old: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-model Modifier Handling (Options API)\nDESCRIPTION: Explains how to handle custom `v-model` modifiers using the Options API in Vue.js. It defines a `modelModifiers` prop and demonstrates how to check for modifiers and change the emitted value. Requires Vue.js framework.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitValue(e) {\n      let value = e.target.value\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1)\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Method for Filtering (Composition API)\nDESCRIPTION: Shows how to use a method to filter an array in Vue.js using the Composition API. The `even` method filters an array of numbers and returns a new array containing only the even numbers. This is useful in situations where computed properties are not feasible, such as inside nested `v-for` loops.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}\n```\n\n----------------------------------------\n\nTITLE: In-Browser Config for Custom Elements in Vue\nDESCRIPTION: This snippet demonstrates how to configure Vue in the browser to treat HTML tags containing a hyphen as custom elements. This configuration prevents Vue from attempting to resolve them as Vue components, avoiding warnings.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')\n```\n\n----------------------------------------\n\nTITLE: Computed classObject (Composition API)\nDESCRIPTION: Creates a computed property using Vue's Composition API that returns a class object based on reactive values.  This enables more complex logic for determining class application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))\n```\n\n----------------------------------------\n\nTITLE: Using $ref macro in Vue component\nDESCRIPTION: This snippet demonstrates how to use the `$ref` macro within a Vue component's `<script setup>` block to create a reactive variable `count`. The compiler transforms this into a standard `ref` usage, eliminating the need for `.value` in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nlet count = $ref(0)\n\nconsole.log(count)\n\nfunction increment() {\n  count++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Explicitly Typing Reactive Properties in Vue\nDESCRIPTION: This snippet shows how to explicitly type a `reactive` property using interfaces. The `book` reactive object is explicitly typed using the `Book` interface, providing type safety for its properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })\n```\n\n----------------------------------------\n\nTITLE: List Rendering with Key Attribute in Vue\nDESCRIPTION: This code demonstrates the usage of the `key` attribute within a `v-for` directive in Vue.js. The `key` attribute helps Vue's virtual DOM efficiently update and re-render list items.  It expects a unique `number`, `string`, or `symbol` for each item.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Replacing Array (Composition API)\nDESCRIPTION: Shows how to replace an array in Vue.js using the Composition API. The example filters an array of items and assigns the new, filtered array to the `items.value` ref. This approach ensures that Vue's reactivity system detects the change and updates the DOM accordingly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\n----------------------------------------\n\nTITLE: Watch Ref Example - JavaScript\nDESCRIPTION: Shows how to use the `watch` function in Vue.js to watch a ref. The callback function will be executed when the ref's value changes, providing the new and previous values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Attribute Binding Escaping in Vue.js - Example String\nDESCRIPTION: This is an example of a string that contains an onclick attribute that could be used for an XSS attack, it will be escaped.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n'\" onclick=\"alert(\\'hi\\')'\n```\n\n----------------------------------------\n\nTITLE: Mouse Tracking Composable JavaScript\nDESCRIPTION: This JavaScript file defines a `useMouse` composable function that tracks the mouse position using Vue's Composition API. It uses `ref` to create reactive state for the x and y coordinates and `onMounted` and `onUnmounted` to manage the mousemove event listener. The composable returns the x and y coordinates as a reactive object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Directives Vue\nDESCRIPTION: Demonstrates importing a custom directive and renaming it to fit the required naming scheme `vNameOfDirective` for use in `<script setup>`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { myDirective as vMyDirective } from './MyDirective.js'\n</script>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive with v-if / v-else - Vue HTML\nDESCRIPTION: This example shows how to use `<KeepAlive>` with `v-if` and `v-else` directives. Only one component should be rendered at a time within the `<KeepAlive>` component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<KeepAlive>\n  <comp-a v-if=\"a > 1\"></comp-a>\n  <comp-b v-else></comp-b>\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Writable Computed Property (Composition API)\nDESCRIPTION: This snippet defines a writable computed property `fullName` using the Composition API.  It imports `ref` and `computed`, creates reactive refs for `firstName` and `lastName`, and then defines the `fullName` computed property with a `get` and `set`. The getter combines the first and last names, and the setter splits the new value to update the individual refs. Destructuring assignment is used.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst firstName = ref('John')\nconst lastName = ref('Doe')\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value\n  },\n  // setter\n  set(newValue) {\n    // Note: we are using destructuring assignment syntax here.\n    [firstName.value, lastName.value] = newValue.split(' ')\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Directive\nDESCRIPTION: This JavaScript code demonstrates how to register a custom directive named `focus` within a Vue.js component. The directive automatically focuses the element it's bound to when the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus: {\n      mounted(el) {\n        el.focus()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mouse Tracking Composable Vue\nDESCRIPTION: This Vue component utilizes the `useMouse` composable function to track and display the mouse position. It imports the composable and destructures the returned reactive values (x and y) to be used in the template.  This demonstrates how to consume the stateful logic encapsulated within the `useMouse` composable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\n----------------------------------------\n\nTITLE: Text Input with v-model (Vue HTML)\nDESCRIPTION: Example of binding a text input to a 'message' ref using v-model. Any changes to the input field will automatically update the value of the 'message' ref, and vice versa.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n\n```\n\n----------------------------------------\n\nTITLE: Using Named Scoped Slots in Vue.js\nDESCRIPTION: This code demonstrates how to use named scoped slots in a Vue.js component.  It defines three named slots (header, default, and footer) and passes slot props to each.  The v-slot directive is used to access these props within the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_21\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent>\n  <template #header=\"headerProps\">\n    {{ headerProps }}\n  </template>\n\n  <template #default=\"defaultProps\">\n    {{ defaultProps }}\n  </template>\n\n  <template #footer=\"footerProps\">\n    {{ footerProps }}\n  </template>\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Template with Computed Property\nDESCRIPTION: This code shows how to use a computed property within a Vue.js template.  It displays the value of the `publishedBooksMessage` computed property within a `<span>` element. Vue automatically updates the display whenever the computed property's dependencies change.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing Object with Options API in Vue\nDESCRIPTION: This code snippet shows how to initialize an object in the `data` option when using the Options API in Vue.  This makes the object available to the Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prop Validation (Composition API)\nDESCRIPTION: This snippet demonstrates prop validation using the `defineProps` macro in Composition API. It shows how to specify different types, required props, default values, and custom validators for props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Computed Ref in Vue.js\nDESCRIPTION: Demonstrates how to create a read-only computed ref using the `computed()` function, which takes a getter function and returns a readonly reactive ref object. Attempts to modify the value of a read-only computed ref will result in an error.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // error\n```\n\n----------------------------------------\n\nTITLE: Typing Component Emits with Options-Based Declaration in Vue\nDESCRIPTION: This example shows how to define component emits with TypeScript using an options-based approach with `defineEmits`. This allows you to specify validation functions for each emitted event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Bind Click Event to Method Handler\nDESCRIPTION: This snippet demonstrates how to bind a click event to a method handler named `greet` using the `@click` directive in a Vue template. When the button is clicked, the `greet` method defined in the component will be executed. The method name is referenced directly without parentheses.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering List with v-for in Vue Template\nDESCRIPTION: This code snippet shows how to use the `v-for` directive in a Vue template to render a list of items. It iterates over the `items` array and displays the `message` property of each item within an `<li>` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Exposing Top-Level Bindings Vue\nDESCRIPTION: Illustrates how top-level bindings (variables, function declarations, and imports) declared inside `<script setup>` are directly usable in the template. The example shows a variable `msg` and a function `log` being used in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Stopping a Watcher with $watch (Options API)\nDESCRIPTION: This snippet demonstrates how to stop a watcher created using the `$watch()` instance method in the Options API.  The `$watch()` method returns a function, `unwatch`, which when called, stops the watcher. This is primarily useful for cases where the watcher needs to be stopped before the component is unmounted. The watcher is defined on 'foo' and executes a callback function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwatch = this.$watch('foo', callback)\n\n// ...when the watcher is no longer needed:\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Ref with ref() in Vue.js\nDESCRIPTION: Creates a reactive and mutable ref object with a single property `.value` that points to the inner value. Any read operations to `.value` are tracked, and write operations trigger associated effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State - Options API - JavaScript\nDESCRIPTION: Demonstrates how to declare reactive state using the `data` option in the Options API.  The `data` option should be a function that returns an object. Vue wraps the returned object in its reactivity system, allowing access to its properties via `this` in methods and lifecycle hooks.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  // `mounted` is a lifecycle hook which we will explain later\n  mounted() {\n    // `this` refers to the component instance.\n    console.log(this.count) // => 1\n\n    // data can be mutated as well\n    this.count = 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Component - Options API - Vue\nDESCRIPTION: This Vue component implements a simple counter using the Options API. It defines the `count` state in the `data` option and an `increment` method to update the count. The template displays the current count.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script>\nexport default {\n  // state\n  data() {\n    return {\n      count: 0\n    }\n  },\n  // actions\n  methods: {\n    increment() {\n      this.count++\n    }\n  }\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Using Composables with Options API in Vue.js\nDESCRIPTION: This example shows how to use composables within a Vue.js component that uses the Options API. Composables must be called inside the `setup()` function, and the returned values must be returned from `setup()` to be accessible in the component's template and `this` context.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMouse } from './mouse.js'\nimport { useFetch } from './fetch.js'\n\nexport default {\n  setup() {\n    const { x, y } = useMouse()\n    const { data, error } = useFetch('...')\n    return { x, y, data, error }\n  },\n  mounted() {\n    // setup() exposed properties can be accessed on `this`\n    console.log(this.x)\n  }\n  // ...other options\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Prop (Composition API)\nDESCRIPTION: This snippet demonstrates how to define a boolean prop named 'disabled' using the Composition API in Vue.js. When the 'disabled' attribute is present on the component, it's equivalent to passing `:disabled=\"true\"`. When it's absent, it's equivalent to `:disabled=\"false\"`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  disabled: Boolean\n})\n```\n\n----------------------------------------\n\nTITLE: Injection Default Values (Options API)\nDESCRIPTION: This code demonstrates how to provide default values for injected properties using the object syntax within the `inject` option of Vue.js' Options API.  You can provide primitive default values directly, or use a factory function for non-primitive values or values that are expensive to create.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // object syntax is required\n  // when declaring default values for injections\n  inject: {\n    message: {\n      from: 'message', // this is optional if using the same key for injection\n      default: 'default value'\n    },\n    user: {\n      // use a factory function for non-primitive values that are expensive\n      // to create, or ones that should be unique per component instance.\n      default: () => ({ name: 'John' })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ref on Component (Composition API before 3.5)\nDESCRIPTION: Demonstrates using a ref on a child component in Vue versions before 3.5, using Composition API. The code imports `ref`, `onMounted`, and the `Child` component. A ref named `child` is created and initialized to null. The ref is then assigned to the Child component using the `ref` attribute.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Data Fetching Composable JavaScript\nDESCRIPTION: This JavaScript code defines a `useFetch` composable that encapsulates the logic for fetching data asynchronously. It takes a URL as an argument and uses `ref` to create reactive states for data and error. It uses the `fetch` API to make a request, parses the JSON response, and updates the data or error ref accordingly. It returns an object containing the `data` and `error` refs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Named Scoped Slots in Vue.js\nDESCRIPTION: This snippet illustrates how to pass props to a named scoped slot in Vue.js. It uses the <slot> tag with the `name` attribute to specify the slot name and passes the `message` prop. Note that the `name` attribute is reserved and will not be available in the slot props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<slot name=\"header\" message=\"hello\"></slot>\n```\n\n----------------------------------------\n\nTITLE: Async Component with Loading and Error States\nDESCRIPTION: This snippet shows how to configure loading and error components for an async component using the `defineAsyncComponent` options.  It configures loadingComponent, delay, errorComponent, and timeout.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})\n```\n\n----------------------------------------\n\nTITLE: Local Component Usage in Vue.js with <script setup>\nDESCRIPTION: Shows how to use components locally within a Vue.js component using `<script setup>`. Imported components are automatically available in the template without needing explicit registration in the `components` option. Requires using Single-File Components (SFCs).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Globally Registering Async Component\nDESCRIPTION: This snippet demonstrates how to register an async component globally using `app.component()`. This makes the component available throughout the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))\n```\n\n----------------------------------------\n\nTITLE: Transforming Prop with Computed Property (Composition API)\nDESCRIPTION: This snippet shows how to transform a prop's value using a computed property in Composition API. The `size` prop is trimmed and converted to lowercase, and the `normalizedSize` computed property automatically updates when the `size` prop changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())\n```\n\n----------------------------------------\n\nTITLE: Multiline Text Input with v-model (Vue HTML)\nDESCRIPTION: Illustrates binding a textarea element to a 'message' ref using v-model. This allows for capturing multiline text input and synchronizing it with the reactive variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Application\nDESCRIPTION: Shows how to mount a Vue application instance to a DOM element using app.mount().  It imports createApp, creates an app instance (details omitted for brevity), and then mounts it to an element with the ID 'app'.  This initiates the rendering process, inserting the Vue component into the specified DOM element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Accessing ref Value - Composition API - JavaScript\nDESCRIPTION: Demonstrates accessing and mutating the value of a `ref` object using the `.value` property. It highlights the difference between accessing the `ref` object itself and its value.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst count = ref(0)\n\nconsole.log(count) // { value: 0 }\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Component (Options API) Vue\nDESCRIPTION: Defines a Vue component using the Options API within a Single-File Component (SFC). It exports a default object with a `data` option that initializes the `count` property to 0. The template uses the `count` data property and increments it on button click.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Injecting Reactive Data in Vue (Composition API)\nDESCRIPTION: This snippet demonstrates injecting reactive data using the `inject` function in Vue.js Composition API. It injects the `location` and `updateLocation` from the parent component and uses them in the template. The line highlighted with {5} shows the destructuring of the injected object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<!-- in injector component -->\n<script setup>\nimport { inject } from 'vue'\n\nconst { location, updateLocation } = inject('location')\n</script>\n\n<template>\n  <button @click=\"updateLocation\">{{ location }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: ServerPrefetch Example - JavaScript\nDESCRIPTION: Demonstrates the usage of the 'serverPrefetch' lifecycle hook within a Vue.js component to pre-fetch data on the server. If the component is dynamically rendered on the client, the data is fetched in the 'mounted' hook. The `fetchOnServer` and `fetchOnClient` functions are assumed to exist and perform the actual data fetching.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      data: null\n    }\n  },\n  async serverPrefetch() {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    this.data = await fetchOnServer(/* ... */)\n  },\n  async mounted() {\n    if (!this.data) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      this.data = await fetchOnClient(/* ... */)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Debugging Hooks (Options API)\nDESCRIPTION: This snippet demonstrates how to use `renderTracked` and `renderTriggered` lifecycle hooks in Vue's Options API to debug component re-renders. A debugger statement is placed within the callbacks to interactively inspect the dependencies being tracked and triggering updates. This only works in development mode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  renderTracked(event) {\n    debugger\n  },\n  renderTriggered(event) {\n    debugger\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating XState with Vue (JavaScript)\nDESCRIPTION: This JavaScript code provides a composable function `useMachine` that integrates XState with Vue. It creates a state machine, a shallow ref to hold the current state, and uses the `interpret` function from XState to manage the state machine's lifecycle.  It returns the current state and a send function to send events to the state machine.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMachine, interpret } from 'xstate'\nimport { shallowRef } from 'vue'\n\nexport function useMachine(options) {\n  const machine = createMachine(options)\n  const state = shallowRef(machine.initialState)\n  const service = interpret(machine)\n    .onTransition((newState) => (state.value = newState))\n    .start()\n  const send = (event) => service.send(event)\n\n  return [state, send]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Element with Vue\nDESCRIPTION: This snippet shows how to define a custom element using Vue's `defineCustomElement` method. It includes defining properties, events, a template, and styles, and registering the element for use in HTML.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  // normal Vue component options here\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement only: CSS to be injected into shadow root\n  styles: [`/* inlined css */`]\n})\n\n// Register the custom element.\n// After registration, all `<my-vue-element>` tags\n// on the page will be upgraded.\ncustomElements.define('my-vue-element', MyVueElement)\n\n// You can also programmatically instantiate the element:\n// (can only be done after registration)\ndocument.body.appendChild(\n  new MyVueElement({\n    // initial props (optional)\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Slot Content in Child Component (HTML)\nDESCRIPTION: This code snippet shows how to define a slot in a child component using standard HTML. The `<slot></slot>` element acts as a placeholder where the parent component's slot content will be rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in child template -->\n<slot></slot>\n```\n\n----------------------------------------\n\nTITLE: Typing Event Handlers in Vue.js\nDESCRIPTION: This snippet shows how to properly type event handlers in Vue.js when dealing with native DOM events. It highlights the importance of explicitly annotating the `event` argument and using type assertions when accessing properties of `event` to avoid implicit `any` types and potential TypeScript errors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: v-if Equivalent Render Function - JavaScript (Composition API)\nDESCRIPTION: Shows the equivalent of the `v-if` directive using a render function with Composition API. Uses a ternary operator to conditionally render different vnodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nh('div', [ok.value ? h('div', 'yes') : h('span', 'no')])\n```\n\n----------------------------------------\n\nTITLE: Augmenting Component Options in Vue.js\nDESCRIPTION: Illustrates how to use declaration merging to augment the `ComponentCustomOptions` interface, allowing you to add custom options to the Vue component definition.  This is useful for adding custom lifecycle hooks or other component-specific configurations.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: any, from: any, next: () => void): void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node.js script\nDESCRIPTION: The shell command executes the specified JavaScript file using Node.js. This is often used to start the server-side rendering process or run other server-side scripts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n> node example.js\n```\n\n----------------------------------------\n\nTITLE: Typing Component Template Refs with InstanceType in Vue.js\nDESCRIPTION: This code snippet illustrates how to type a component template ref using `InstanceType` to extract the instance type of an imported component. It showcases a scenario with dynamic components where the ref can point to different component types, and uses a union type to represent the possible instance types. The `useTemplateRef` hook from Vue is utilized.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\ntype FooType = InstanceType<typeof Foo>\ntype BarType = InstanceType<typeof Bar>\n\nconst compRef = useTemplateRef<FooType | BarType>('comp')\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" ref=\"comp\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type-Based Props Declaration with defineProps in Vue\nDESCRIPTION: This code snippet demonstrates defining component props using a generic type argument in `defineProps`. This method allows for a cleaner and more straightforward way to define props types, where the compiler infers runtime options based on the type argument. `foo` is defined as a string and `bar` as an optional number.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst props = defineProps<{  foo: string\n  bar?: number\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive with Include / Exclude - Vue HTML\nDESCRIPTION: This example showcases the usage of the `include` prop of `<KeepAlive>`. It caches only the components whose names match the specified string, RegExp, or array of strings and RegExps. The `exclude` prop works similarly, but it excludes matching components from being cached.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Props Default Values with withDefaults in Vue\nDESCRIPTION: This code demonstrates using the `withDefaults` compiler macro to define default values for props. It provides type checks for the default values and ensures the returned `props` type has optional flags removed for properties that have default values declared. Mutable reference types should be wrapped in functions to avoid accidental modification.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n\n----------------------------------------\n\nTITLE: v-model Modifier Handling (Composition API - Pre 3.4)\nDESCRIPTION: Demonstrates how to handle custom v-model modifiers in Vue.js using the Composition API for versions prior to 3.4.  It defines a `modelModifiers` prop, checks for the `capitalize` modifier, and modifies the emitted value accordingly. Requires Vue.js and Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps({\n  modelValue: String,\n  modelModifiers: { default: () => ({}) }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nfunction emitValue(e) {\n  let value = e.target.value\n  if (props.modelModifiers.capitalize) {\n    value = value.charAt(0).toUpperCase() + value.slice(1)\n  }\n  emit('update:modelValue', value)\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"props.modelValue\" @input=\"emitValue\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Provide value using Composition API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to provide a value using the `provide` function from Vue.js' Composition API.  The first argument is the injection key (a string or Symbol), and the second is the value being provided. Make sure to import `provide` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exposing Public Interface (Composition API)\nDESCRIPTION: Demonstrates how to expose a public interface for a component using `<script setup>` and `defineExpose`. It defines two variables, `a` and `b`, and then uses `defineExpose` to make them accessible to parent components via a template ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\n// Compiler macros, such as defineExpose, don't need to be imported\ndefineExpose({\n  a,\n  b\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Centralizing Mutations with Methods - JavaScript\nDESCRIPTION: This JavaScript module defines an `increment` method within the reactive store.  This method is intended to be the sole way to update the `count` property, centralizing mutation logic and improving maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in Parent Component Vue HTML\nDESCRIPTION: This snippet shows how a parent component can listen to a custom event emitted by a child component using `v-on` (shorthand `@`). When `MyComponent` emits `some-event`, the `callback` function is executed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_3\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<MyComponent @some-event=\"callback\" />\n```\n\n----------------------------------------\n\nTITLE: Reactive Props Destructure with Default Value\nDESCRIPTION: This example showcases reactive props destructuring and using default values with type based props declaration. If the `foo` prop is not provided it will default to 'hello'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst {{ foo = 'hello' }} = defineProps<{ foo?: string }>()\n```\n\n----------------------------------------\n\nTITLE: Declaring Props with defineProps in Vue SFCs\nDESCRIPTION: This snippet demonstrates how to declare props in a Vue Single-File Component (SFC) using the `defineProps()` macro within `<script setup>`. It defines a prop named 'foo' and logs its value to the console. The component expects to receive a prop called 'foo'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Validating Emitted Events (Options API) JavaScript\nDESCRIPTION: This snippet shows how to validate emitted events in the Options API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime, logging a warning if the validation fails.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  emits: {\n    // No validation\n    click: null,\n\n    // Validate submit event\n    submit: ({ email, password }) => {\n      if (email && password) {\n        return true\n      } else {\n        console.warn('Invalid submit event payload!')\n        return false\n      }\n    }\n  },\n  methods: {\n    submitForm(email, password) {\n      this.$emit('submit', { email, password })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Slots in FancyList Component\nDESCRIPTION: This code demonstrates how to use scoped slots within a `FancyList` component. It utilizes a template with the `#item` shorthand for `v-slot:item` to define the structure for each item in the list. The component exposes `body`, `username`, and `likes` as slot props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n<FancyList :api-url=\"url\" :per-page=\"10\">\n  <template #item=\"{ body, username, likes }\">\n    <div class=\"item\">\n      <p>{{ body }}</p>\n      <p>by {{ username }} | {{ likes }} likes</p>\n    </div>\n  </template>\n</FancyList>\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots in Composition API - JSX\nDESCRIPTION: This JSX code shows how to access and render slots. It accesses the default and named slots, passing props to the named slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_23\n\nLANGUAGE: JSX\nCODE:\n```\n// default\n<div>{slots.default()}</div>\n\n// named\n<div>{slots.footer({ text: props.message })}</div>\n```\n\n----------------------------------------\n\nTITLE: Generic Component Definition\nDESCRIPTION: Defines a generic Vue component `MyGenericModal` that accepts a type parameter `ContentType`.  It uses `defineExpose` to expose the `open` method, which takes a value of type `ContentType` and sets the component's internal `content` ref.  This component requires the `vue` library.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_34\n\nLANGUAGE: vue\nCODE:\n```\n<!-- MyGenericModal.vue -->\n<script setup lang=\"ts\" generic=\"ContentType extends string | number\">\nimport { ref } from 'vue'\n\nconst content = ref<ContentType | null>(null)\n\nconst open = (newContent: ContentType) => (content.value = newContent)\n\ndefineExpose({\n  open\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events with Payload Type (Options API) JavaScript\nDESCRIPTION: This snippet shows how to declare emitted events with payload type validation in the Options API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  emits: {\n    submit(payload: { email: string, password: string }) {\n      // return `true` or `false` to indicate\n      // validation pass / fail\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Types in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define types for Vue custom elements to enable type checking in Vue templates. It imports `defineCustomElement` from Vue, converts a Vue component into a custom element, registers it with the browser, and then augments the `GlobalComponents` interface in the Vue module to provide type information for the custom element in Vue templates.  It is important to use the Vue component type when augmenting the `GlobalComponents` interface.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\n\n// Import the Vue component.\nimport SomeComponent from './src/components/SomeComponent.ce.vue'\n\n// Turn the Vue component into a Custom Element class.\nexport const SomeElement = defineCustomElement(SomeComponent)\n\n// Remember to register the element class with the browser.\ncustomElements.define('some-element', SomeElement)\n\n// Add the new element type to Vue's GlobalComponents type.\ndeclare module 'vue' {\n  interface GlobalComponents {\n    // Be sure to pass in the Vue component type here \n    // (SomeComponent, *not* SomeElement).\n    // Custom Elements require a hyphen in their name, \n    // so use the hyphenated element name here.\n    'some-element': typeof SomeComponent\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Import Maps for Vue (Options API)\nDESCRIPTION: This snippet demonstrates using import maps to map the 'vue' import specifier to the Vue.js ES module CDN URL. This allows using `import { createApp } from 'vue'` directly. It also includes the application initialization code using Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Component (Composition API) JavaScript\nDESCRIPTION: Defines a Vue component as a plain JavaScript object using the Composition API. It imports the `ref` function from Vue, initializes a reactive `count` variable using `ref(0)`, and exposes `count` through the `setup` function's return value. The template uses an inlined HTML string to display a button that increments `count` on click.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a Value for Injection (App-Level)\nDESCRIPTION: Demonstrates how to provide a value at the application level for dependency injection using app.provide(). It creates a Vue application instance and provides the string value 'hello' under the injection key 'message'. This makes the value available for injection in any descendant component within the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')\n```\n\n----------------------------------------\n\nTITLE: Maintaining State with Key Attribute in v-for\nDESCRIPTION: This code demonstrates how to use the `key` attribute with `v-for` to help Vue track each node's identity, enabling reuse and reordering of existing elements for efficient updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Components Vue\nDESCRIPTION: Demonstrates the usage of dynamic components inside `<script setup>` using the `:is` binding. The components are referenced as variables, allowing for conditional rendering of different components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Props in Vue.js\nDESCRIPTION: This snippet showcases the simple array-based syntax for declaring props in a Vue.js component. In this form, you provide an array of strings, each representing the name of a prop that the component accepts.  No type validation or default values are specified in this simple form.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['size', 'myMessage']\n}\n```\n\n----------------------------------------\n\nTITLE: Props Default Values with Reactive Props Destructure in Vue\nDESCRIPTION: This snippet illustrates how to set default values for props using Reactive Props Destructure. This approach allows specifying default values directly within the destructuring assignment, providing a concise way to define defaults for optional props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Composition API (JS) in Vue.js\nDESCRIPTION: This snippet illustrates how to declare and emit a custom event named 'response' from a Vue.js component using the Composition API with a standard JavaScript setup function. It utilizes the `emits` option to declare the event and the `emit` function (provided via the setup context) to trigger the event with a string argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // declare emitted events\n  emits: ['response'],\n  setup(props, { emit }) {\n    // emit with argument\n    emit('response', 'hello from child')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Transition Component in Vue\nDESCRIPTION: This snippet demonstrates how to create a reusable transition component in Vue by wrapping the built-in `<Transition>` component. It passes down the slot content, allowing the reusable component to transition any content passed to it.  The example highlights the importance of avoiding `<style scoped>` for styling the slot content.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<!-- MyTransition.vue -->\n<script>\n// JavaScript hooks logic...\n</script>\n\n<template>\n  <!-- wrap the built-in Transition component -->\n  <Transition\n    name=\"my-transition\"\n    @enter=\"onEnter\"\n    @leave=\"onLeave\">\n    <slot></slot> <!-- pass down slot content -->\n  </Transition>\n</template>\n\n<style>\n/*\n  Necessary CSS...\n  Note: avoid using <style scoped> here since it\n  does not apply to slot content.\n*/\n</style>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Slot Names (Vue)\nDESCRIPTION: This snippet demonstrates the usage of dynamic slot names using dynamic directive arguments on `v-slot`. The slot name is determined by the `dynamicSlotName` variable, allowing for more flexible slot content rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<base-layout>\n  <template v-slot:[dynamicSlotName]>\n    ...\n  </template>\n\n  <!-- with shorthand -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>\n```\n\n----------------------------------------\n\nTITLE: Reactive Props Destructure TypeScript\nDESCRIPTION: Demonstrates reactive props destructuring using `defineProps` in Vue 3.5+. Variables destructured from the return value of `defineProps` are reactive, and default values can be declared using JavaScript's native default value syntax. The compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Methods in Vue.js\nDESCRIPTION: This code shows how to define methods within a Vue.js component using the `methods` option. Methods are functions that can be called from the component instance or within templates.  The `this` context of a method is automatically bound to the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return { a: 1 }\n  },\n  methods: {\n    plus() {\n      this.a++\n    }\n  },\n  created() {\n    this.plus()\n    console.log(this.a) // => 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Vue Composable (useCounter)\nDESCRIPTION: This defines a simple composable function `useCounter` in Vue that manages a counter state and provides an increment function. It uses Vue's reactivity API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// counter.js\nimport { ref } from 'vue'\n\nexport function useCounter() {\n  const count = ref(0)\n  const increment = () => count.value++\n\n  return {\n    count,\n    increment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Getter Example - JavaScript\nDESCRIPTION: Demonstrates how to use the `watch` function in Vue.js to watch a getter function that accesses a reactive state. The callback function will be executed when the value returned by the getter changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Reactive URL (Ref) in Vue.js\nDESCRIPTION: This example demonstrates how to use a ref as the URL in a `useFetch()` composable.  When the ref's value changes, the `useFetch` function will automatically re-fetch the data. This enables reactive data fetching based on external changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = ref('/initial-url')\n\nconst { data, error } = useFetch(url)\n\n// this should trigger a re-fetch\nurl.value = '/new-url'\n```\n\n----------------------------------------\n\nTITLE: Watch Reactive Object with Deep Option - JavaScript\nDESCRIPTION: Demonstrates how to force deep traversal of the source if it is an object, so that the callback fires on deep mutations. When watching a reactive object with the `deep` option set to `true`, the watcher will trigger even when nested properties change.  If the callback was triggered by a deep mutation, the new and old values will be the same object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({ count: 0 })\nwatch(\n  () => state,\n  (newValue, oldValue) => {\n    // newValue === oldValue\n  },\n  { deep: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Alt + Enter Key Combination in Vue.js\nDESCRIPTION: This code snippet demonstrates how to bind a Vue.js method to the `keyup` event of an input element, triggering the method only when the Alt key and Enter key are pressed simultaneously. The `clear` method will be called when the user releases the Enter key while holding down the Alt key.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n```\n\n----------------------------------------\n\nTITLE: Passing DOM Properties to Custom Elements\nDESCRIPTION: This snippet demonstrates how to pass complex data as DOM properties to custom elements in Vue using the `.prop` modifier with `v-bind`.  This is necessary because DOM attributes can only be strings, while properties can hold complex data types.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_3\n\nLANGUAGE: Vue HTML\nCODE:\n```\n<my-element :user.prop=\"{ name: 'jack' }\"></my-element>\n\n<!-- shorthand equivalent -->\n<my-element .user=\"{ name: 'jack' }\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Annotating Complex Prop Types in Vue.js\nDESCRIPTION: This snippet illustrates how to annotate complex prop types in Vue.js, such as objects with nested properties or function call signatures, using the `PropType` utility type. It provides an example of defining a `Book` interface and using it to type the `book` prop, along with an example of typing a callback function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Simple Routing with Options API in Vue.js\nDESCRIPTION: This snippet demonstrates a simple client-side routing implementation in Vue.js using the Options API. It defines a `routes` object mapping URL hashes to Vue components, uses a data property to track the current path, and dynamically renders the appropriate component based on the `hashchange` event in the mounted lifecycle hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/routing.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Top-level Await in Vue Script Setup\nDESCRIPTION: This code shows the usage of top-level `await` inside `<script setup>`. The resulting code is compiled as `async setup()`, allowing you to directly await promises within the setup scope. Awaited expressions are compiled in a format that preserves the current component instance context after the `await`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_27\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst post = await fetch(`/api/post/1`).then((r) => r.json())\n</script>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Options API Vue JavaScript\nDESCRIPTION: This snippet demonstrates how to emit a custom event from a Vue.js component's method using the `this.$emit()` method within the Options API. The `submit` method, when called, emits the 'someEvent' event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting a Vue App in JavaScript\nDESCRIPTION: This code demonstrates how to mount a Vue application to a DOM element using its ID. The `app.mount()` function is called with the CSS selector of the container element, which will be replaced by the application's root component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Declaring Methods - Options API - JavaScript\nDESCRIPTION: Demonstrates how to add methods to a component instance using the `methods` option in the Options API. Vue automatically binds the `this` value for methods, ensuring it refers to the component instance. Arrow functions should be avoided when defining methods to preserve the correct `this` binding.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    // methods can be called in lifecycle hooks, or other methods!\n    this.increment()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Refs with Composition API (useTemplateRef)\nDESCRIPTION: Illustrates accessing a template ref using the `useTemplateRef()` helper function in the Composition API. It imports `useTemplateRef` and `onMounted` from Vue, defines a ref using `useTemplateRef` with the ref name matching the template, and focuses the input element in the `onMounted` lifecycle hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Compiled output of $ref usage\nDESCRIPTION: This JavaScript code shows the compiled output of the previous Vue component using the `$ref` macro. The `count` variable is now a standard Vue `ref`, and `.value` is used for accessing and modifying its value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nlet count = ref(0)\n\nconsole.log(count.value)\n\nfunction increment() {\n  count.value++\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Event Handlers with Type Assertion in Vue\nDESCRIPTION: This code demonstrates typing an event handler and using type assertions to access properties of the event target.  The `event` argument is explicitly typed as `Event`, and a type assertion is used to treat `event.target` as an `HTMLInputElement` to access the `value` property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleChange(event: Event) {\n  console.log((event.target as HTMLInputElement).value)\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS Example - Vue\nDESCRIPTION: Demonstrates how to use the `scoped` attribute in a `<style>` tag to apply CSS only to the current component. The styles are transformed using PostCSS to add a unique attribute to the elements and selectors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Composition API Vue Component\nDESCRIPTION: This snippet demonstrates how to declare props in a Vue component using the Composition API with script setup. It uses `defineProps` to declare the 'title' prop and renders it in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Async setup() with <script setup>\nDESCRIPTION: This Vue.js code shows how to use top-level await expressions within a `<script setup>` block, making the component an async dependency. It fetches data and makes it available in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst res = await fetch(...)\nconst posts = await res.json()\n</script>\n\n<template>\n  {{ posts }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: v-bind() in CSS with Script Setup - Vue\nDESCRIPTION: Illustrates the usage of `v-bind()` within a `<script setup>` block. JavaScript expressions are supported within the `v-bind()` function (must be wrapped in quotes). The color property is reactively updated.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nconst theme = ref({\n    color: 'red',\n})\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\np {\n  color: v-bind('theme.color');\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Good Component Name (PascalCase)\nDESCRIPTION: Shows correct practice of defining a component's name using PascalCase. Component names should use PascalCase in JS/JSX.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'MyComponent'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Type with computed() in Vue\nDESCRIPTION: This shows how to specify an explicit type for a computed property via a generic argument.  The compiler will check that the getter function returns the specified type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst double = computed<number>(() => {\n  // type error if this doesn't return a number\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Child Component (Composition API)\nDESCRIPTION: This snippet demonstrates how to import a child component in a Vue.js application using the Composition API. It assumes the component is defined in a Single-File Component (SFC) named ChildComp.vue. This is a necessary step before the component can be used in the template of the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ChildComp from './ChildComp.vue'\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Renaming Injection (Vue.js)\nDESCRIPTION: Shows how to inject a property with a different name using the `from` property in the `inject` option in Vue.js.  This allows you to map an injected property to a different local property name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: 'foo'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Reactivity with Options API in Vue\nDESCRIPTION: This example demonstrates how Vue's reactivity system automatically detects changes to nested objects and arrays when using the Options API. The `mutateDeeply` method modifies the `obj` and `arr` properties, which triggers reactivity updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      obj: {\n        nested: { count: 0 },\n        arr: ['foo', 'bar']\n      }\n    }\n  },\n  methods: {\n    mutateDeeply() {\n      // these will work as expected.\n      this.obj.nested.count++\n      this.obj.arr.push('baz')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Checkbox with v-model (Vue HTML)\nDESCRIPTION: Example of binding a single checkbox to a boolean 'checked' ref. The checkbox's checked state will update the 'checked' ref, and vice versa.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n\n```\n\n----------------------------------------\n\nTITLE: Validating Emitted Events (Composition API) Vue\nDESCRIPTION: This snippet shows how to validate emitted events in the Composition API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime, logging a warning if the validation fails.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_18\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nconst emit = defineEmits({\n  // No validation\n  click: null,\n\n  // Validate submit event\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false\n    }\n  }\n})\n\nfunction submitForm(email, password) {\n  emit('submit', { email, password })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaring Render Functions in Options API - JavaScript\nDESCRIPTION: Shows how to declare a render function using the `render` option in the Options API. The render function returns a vnode, string, or an array of vnodes, and has access to the component instance via `this`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  render() {\n    return 'hello world!'\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing v-model pre-Vue 3.4\nDESCRIPTION: This is how you would implement the same child component shown above prior to 3.4. Involves defining a prop `modelValue` and emitting an `update:modelValue` event when the input changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Child.vue -->\n<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using onMounted Hook (Composition API)\nDESCRIPTION: This code demonstrates how to use the `onMounted` lifecycle hook in the Composition API to execute code after the component has been mounted. This hook is useful for performing DOM operations or accessing template refs after the DOM is ready.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  // component is now mounted.\n})\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping with reactive() in Vue.js\nDESCRIPTION: Demonstrates how refs are automatically unwrapped when accessed as properties of a reactive object created with `reactive()`. Changes to the ref's value or the reactive object's property are synchronized.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = ref(1)\nconst obj = reactive({ count })\n\n// ref will be unwrapped\nconsole.log(obj.count === count.value) // true\n\n// it will update `obj.count`\ncount.value++\nconsole.log(count.value) // 2\nconsole.log(obj.count) // 2\n\n// it will also update `count` ref\nobj.count++\nconsole.log(obj.count) // 3\nconsole.log(count.value) // 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handler in JavaScript\nDESCRIPTION: This code demonstrates how to configure a global error handler for a Vue application. The `app.config.errorHandler` function is set to a callback that will be called whenever an error occurs in any descendant component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Class as Prop Type (Composition API)\nDESCRIPTION: This snippet demonstrates how to use a custom class `Person` as the type for a prop named `author` within Composition API. Vue will validate whether the prop's value is an instance of the class.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  author: Person\n})\n```\n\n----------------------------------------\n\nTITLE: Optimized Computed Property with Manual Comparison\nDESCRIPTION: Illustrates how to optimize a computed property by manually comparing the new value with the old value and conditionally returning the old value if nothing has changed. This prevents unnecessary effect triggers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Composition API (Script Setup) in Vue.js\nDESCRIPTION: This code snippet shows how to declare and emit a custom event named 'response' from a Vue.js component using the Composition API with `<script setup>`. The `defineEmits` function is used to declare the event, and the `emit` function is used to trigger the event, passing a string argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// declare emitted events\nconst emit = defineEmits(['response'])\n\n// emit with argument\nemit('response', 'hello from child')\n</script>\n```\n\n----------------------------------------\n\nTITLE: AlertBox Component with Slot in Vue\nDESCRIPTION: Defines a Vue component named `AlertBox` that uses a `<slot>` element. The `<slot>` element allows the component to accept and render content passed to it from its parent. The component template defines a styled div containing a heading and a slot for dynamic content.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_27\n\nLANGUAGE: vue\nCODE:\n```\n<!-- AlertBox.vue -->\n<template>\n  <div class=\"alert-box\">\n    <strong>This is an Error for Demo Purposes</strong>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\n.alert-box {\n  /* ... */\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: v-for Equivalent Render Function - JavaScript (Options API)\nDESCRIPTION: Demonstrates the equivalent of the `v-for` directive using a render function with Options API. Uses `map` to iterate over an array and generate a list of vnodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nh(\n  'ul',\n  this.items.map(({ id, text }) => {\n    return h('li', { key: id }, text)\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Local Component Registration and Usage in Vue.js (Options API + Template)\nDESCRIPTION: Illustrates local component registration within a Vue.js Single-File Component (SFC) using the `components` option. It includes the template code demonstrating how to use the locally registered component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Watching a Ref with watch() - JavaScript\nDESCRIPTION: This code demonstrates how to use the `watch` function in Vue.js to watch a ref called `todoId`. It fetches data from an API whenever the value of `todoId` changes.  The `immediate: true` option ensures the watcher runs immediately upon creation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst todoId = ref(1)\nconst data = ref(null)\n\nwatch(\n  todoId,\n  async () => {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n    )\n    data.value = await response.json()\n  },\n  { immediate: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Express Server with Vue SSR\nDESCRIPTION: This snippet sets up an Express server to handle requests and render a Vue app to HTML on the server-side. It imports Express, creates a Vue app instance, renders it to a string using `renderToString`, and sends the rendered HTML wrapped in a basic HTML structure as a response. Requires the 'express' and 'vue' packages.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport express from 'express'\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst server = express()\n\nserver.get('/', (req, res) => {\n  const app = createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n\n  renderToString(app).then((html) => {\n    res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Vue SSR Example</title>\n      </head>\n      <body>\n        <div id=\"app\">${html}</div>\n      </body>\n    </html>\n    `)\n  })\n})\n\nserver.listen(3000, () => {\n  console.log('ready')\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Component Emits with Runtime Declaration in Vue\nDESCRIPTION: This snippet demonstrates typing component emits using the `defineEmits` macro with runtime declaration. It specifies the event names as an array of strings.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reactive classObject (Composition API)\nDESCRIPTION: Defines a reactive object using Vue's Composition API to represent a class object.  The 'active' and 'text-danger' properties control the presence of corresponding CSS classes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst classObject = reactive({\n  active: true,\n  'text-danger': false\n})\n```\n\n----------------------------------------\n\nTITLE: Post Object Example (Composition API)\nDESCRIPTION: Illustrates how to define the post object with 'id' and 'title' properties using composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = {\n  id: 1,\n  title: 'My Journey with Vue'\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Scoped Slot Props (Vue)\nDESCRIPTION: This snippet demonstrates how to receive props passed from a child component to a scoped slot. The `v-slot` directive is used on the child component tag, and its value (`slotProps`) contains the props passed from the child.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-slot=\"slotProps\">\n  {{ slotProps.text }} {{ slotProps.count }}\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Method Definition with Argument (Options API)\nDESCRIPTION: Defines a `say` method within the `methods` object of a Vue component using the Options API. It takes a `message` argument and displays it in an alert. This showcases how to pass custom arguments to methods called from inline event handlers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Dynamic Value Bindings in Vue\nDESCRIPTION: This snippet demonstrates how to dynamically bind the `true` and `false` values of a checkbox to data properties using `:true-value` and `:false-value`. This allows for more flexible control over the values associated with the checkbox state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  :true-value=\"dynamicTrueValue\"\n  :false-value=\"dynamicFalseValue\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing beforeUpdate Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `beforeUpdate` lifecycle hook, which is called right before a Vue.js component is about to update its DOM tree due to a reactive state change. This hook can be used to access the DOM state before Vue updates the DOM. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  beforeUpdate?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Event Arguments with Inline Arrow Function Vue HTML\nDESCRIPTION: This snippet demonstrates listening for an event and accessing its argument using an inline arrow function. When the `increase-by` event is emitted by `MyButton`, the provided value `n` is added to the `count` variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_6\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<MyButton @increase-by=\"(n) => count += n\" />\n```\n\n----------------------------------------\n\nTITLE: v-bind() in CSS - Vue\nDESCRIPTION: Demonstrates how to use the `v-bind()` CSS function to link CSS values to dynamic component state. The CSS value is reactively updated whenever the bound data property changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Listening to Event Arguments with Method Vue HTML\nDESCRIPTION: This snippet shows how to listen for an event and pass its argument to a method. When the `increase-by` event is emitted, the `increaseCount` method is called with the event's argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_7\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<MyButton @increase-by=\"increaseCount\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Vnodes with h() - JavaScript\nDESCRIPTION: Demonstrates how to create virtual DOM nodes (vnodes) using the `h()` function in Vue.js. The `h()` function accepts the element type, props, and children as arguments.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Organizing Component Logic with Composables in Vue.js\nDESCRIPTION: This example illustrates how to organize component logic by extracting and using multiple composables within a Vue.js component. It shows how composables can be imported and used in `<script setup>`, allowing for better code organization and modularity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { useFeatureA } from './featureA.js'\nimport { useFeatureB } from './featureB.js'\nimport { useFeatureC } from './featureC.js'\n\nconst { foo, bar } = useFeatureA()\nconst { baz } = useFeatureB(foo)\nconst { qux } = useFeatureC(baz)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Scoped Slots - Child Component - JavaScript\nDESCRIPTION: This code demonstrates the child component providing data to the scoped slot via a function call.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// child component\nexport default {\n  setup(props, { slots }) {\n    const text = ref('hi')\n    return () => h('div', null, slots.default({ text: text.value }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: markRaw() Usage in Vue.js\nDESCRIPTION: Demonstrates how to use `markRaw()` to prevent an object from being converted to a proxy. It shows that `isReactive(reactive(foo))` returns `false` when `foo` is marked as raw. Also demonstrates nested usage where a raw object is nested inside reactive objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = markRaw({})\nconsole.log(isReactive(reactive(foo))) // false\n\n// also works when nested inside other reactive objects\nconst bar = reactive({ foo })\nconsole.log(isReactive(bar.foo)) // false\n```\n\n----------------------------------------\n\nTITLE: Passing Props via HTML Attributes\nDESCRIPTION: This snippet shows how to pass prop values to a Vue component using HTML attributes. It passes the 'title' prop to the BlogPost component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Directive (Options API) JavaScript\nDESCRIPTION: Demonstrates local registration of a custom directive `highlight` using the `directives` option in a Vue component defined with the Options API.  The directive adds the `is-highlight` class to the element during the `mounted` hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transition Hooks in Composition API JavaScript\nDESCRIPTION: This snippet showcases how to implement JavaScript transition hooks within Vue's Composition API. Each function corresponds to a specific stage in the transition lifecycle, such as before the element is inserted, during the animation, and after the animation has completed.  The `done` callback is crucial for JavaScript-only transitions to signal the end of the animation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// called before the element is inserted into the DOM.\n// use this to set the \"enter-from\" state of the element\nfunction onBeforeEnter(el) {}\n\n// called one frame after the element is inserted.\n// use this to start the entering animation.\nfunction onEnter(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the enter transition has finished.\nfunction onAfterEnter(el) {}\n\n// called when the enter transition is cancelled before completion.\nfunction onEnterCancelled(el) {}\n\n// called before the leave hook.\n// Most of the time, you should just use the leave hook\nfunction onBeforeLeave(el) {}\n\n// called when the leave transition starts.\n// use this to start the leaving animation.\nfunction onLeave(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the leave transition has finished and the\n// element has been removed from the DOM.\nfunction onAfterLeave(el) {}\n\n// only available with v-show transitions\nfunction onLeaveCancelled(el) {}\n```\n\n----------------------------------------\n\nTITLE: Configure Vitest in Vite Configuration\nDESCRIPTION: This code snippet shows how to configure Vitest within the Vite configuration file (vite.config.js). It enables global test APIs and sets up happy-dom as the DOM simulation environment for testing.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic setup() Usage in Vue.js\nDESCRIPTION: Demonstrates the basic usage of the `setup()` hook in a Vue.js component to declare reactive state using `ref` and expose it to the template and other options API hooks. Includes a simple counter example.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    // expose to template and other options API hooks\n    return {\n      count\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // 0\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Directive in Template (Options API) HTML\nDESCRIPTION: Shows how to use the locally registered `v-highlight` directive within a Vue template. This is used with the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<p v-highlight>This sentence is important!</p>\n```\n\n----------------------------------------\n\nTITLE: Providing Reactive Data with Computed Property (Options API)\nDESCRIPTION: This snippet shows how to provide reactive data using a computed property in Vue.js Options API. It creates a computed property `message` that depends on the component's `message` data property, ensuring that changes to the `message` data property are reflected in the provided value. Line {10} highlights the creation of the computed property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computed } from 'vue'\n\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    return {\n      // explicitly provide a computed property\n      message: computed(() => this.message)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with Named Slots\nDESCRIPTION: This is the final rendered HTML output after passing content to the named slots of the BaseLayout component. It demonstrates how the content from the parent component is inserted into the corresponding slots in the child component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Number Modifier for v-model in Vue\nDESCRIPTION: This snippet demonstrates the use of the `.number` modifier with `v-model`. This modifier automatically attempts to typecast the user input as a number. If parsing fails, the original string value is used.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_21\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-model.number=\"age\" />\n```\n\n----------------------------------------\n\nTITLE: Lazy Modifier for v-model in Vue\nDESCRIPTION: This snippet demonstrates the use of the `.lazy` modifier with `v-model`. This modifier syncs the input with the data only after a `change` event, instead of the default `input` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- synced after \"change\" instead of \"input\" -->\n<input v-model.lazy=\"msg\" />\n```\n\n----------------------------------------\n\nTITLE: Type Inference with defineComponent for Props in Vue\nDESCRIPTION: This example shows how to use `defineComponent()` when not using `<script setup>` to enable props type inference. The type of the props object passed to `setup()` is inferred from the `props` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // <-- type: string\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Slots Vue.js\nDESCRIPTION: This code snippet demonstrates how to define a Vue.js component (`FancyButton`) that uses a `<slot>` element as a slot outlet.  The slot outlet indicates where the parent-provided slot content should be rendered within the component's template. The class `fancy-btn` provides custom styling for the button.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>\n```\n\n----------------------------------------\n\nTITLE: Use Custom Element in Vue SFC with TypeScript\nDESCRIPTION: Demonstrates how to use the custom element in a Vue single-file component (SFC) with TypeScript support. It imports the custom element's JavaScript file and the Vue-specific type definition. It uses `useTemplateRef` to access the element's properties and sets up event handling. The template shows the usage of the custom element with type checked props and event handler.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// This will create and register the element with the browser.\nimport 'some-lib/dist/SomeElement.js'\n\n// A user that is using TypeScript and Vue should additionally import the\n// Vue-specific type definition (users of other frameworks may import other\n// framework-specific type definitions).\nimport type {} from 'some-lib/dist/SomeElement.vue.js'\n\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst el = useTemplateRef('el')\n\nonMounted(() => {\n  console.log(\n    el.value!.foo,\n    el.value!.bar,\n    el.value!.lorem,\n    el.value!.someMethod()\n  )\n\n  // Do not use these props, they are `undefined`\n  // IDE will show them crossed out\n  el.$props\n  el.$emit\n})\n</script>\n\n<template>\n  <!-- Now we can use the element, with type checking: -->\n  <some-element\n    ref=\"el\"\n    :foo=\"456\"\n    :blah=\"'hello'\"\n    @apple-fell=\"\n      (event) => {\n        // The type of `event` is inferred here to be `AppleFellEvent`\n      }\n    \"\n  ></some-element>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Directive in Template (Composition API) Vue\nDESCRIPTION: Demonstrates the use of a custom directive `v-highlight` within a Vue template using the Composition API and `<script setup>`. The directive adds the `is-highlight` class to the paragraph element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Expose Option Usage Example JavaScript\nDESCRIPTION: Illustrates how to use the `expose` option in Vue.js component to control which methods are accessible to the parent component via template refs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // only `publicMethod` will be available on the public instance\n  expose: ['publicMethod'],\n  methods: {\n    publicMethod() {\n      // ...\n    },\n    privateMethod() {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue SFC Example (Options API)\nDESCRIPTION: This is an example of a Vue Single-File Component using the Options API. It demonstrates the basic structure of an SFC with a script section defining data, a template section rendering the data, and a style section for component-scoped CSS.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Binding to Reactive Style Object (Vue)\nDESCRIPTION: Binds the `style` attribute to a reactive style object, dynamically applying styles based on the object's properties. This provides a cleaner way to manage style bindings in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"styleObject\"></div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Fallback Content with Slots Vue.js\nDESCRIPTION: This code snippet shows how to use the `<SubmitButton>` component and override the fallback content by providing the slot content \"Save\".\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<SubmitButton>Save</SubmitButton>\n```\n\n----------------------------------------\n\nTITLE: Watch with Flush and Debug Options - JavaScript\nDESCRIPTION: Demonstrates how to configure the `flush` timing and debugging options when using the `watch` function in Vue.js. These options allow fine-grained control over when the callback is executed and provide debugging hooks.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(source, callback, {\n  flush: 'post',\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Elements in JSX\nDESCRIPTION: This JSX snippet demonstrates how to import and define custom elements within a JSX component.  It imports the custom elements and then defines them using `customElements.define` before using them within the JSX markup. This allows for the usage of Vue-based custom elements in other frameworks that support JSX.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyFoo, MyBar } from 'path/to/elements.js'\n\ncustomElements.define('some-foo', MyFoo)\ncustomElements.define('some-bar', MyBar)\n\nexport function MyComponent() {\n  return <>\n    <some-foo ... >\n      <some-bar ... ></some-bar>\n    </some-foo>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Directive vFocus (Options API) JavaScript\nDESCRIPTION: Demonstrates the local registration of the `focus` directive using the `directives` option in a Vue component when using the Options API.  This directive calls the `focus()` method on the element when it is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component A - Options API - Vue\nDESCRIPTION: This Vue component (ComponentA.vue) imports the shared `store` and makes it available as a data property.  It utilizes the Options API to achieve this. The template displays the `count` property from the store.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- ComponentA.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Child Component in HTML Template in Vue.js\nDESCRIPTION: Passes a dynamic prop named 'msg' to a child component named 'child-comp' using the `v-bind` shorthand syntax (':'). The value of the 'msg' prop is bound to the 'greeting' variable in the parent component's scope. This is the syntax to use within a non-SFC HTML template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<child-comp :msg=\"greeting\"></child-comp>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Component\nDESCRIPTION: Illustrates registering a global component using app.component(). It creates a Vue application instance and then registers a component named 'MyComponent' with a provided component options object. This makes the component available for use in any other component within the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Provided Value (Composition API)\nDESCRIPTION: Illustrates how to inject a provided value within a component using the Composition API and the inject function. It imports the inject function from 'vue' and injects the value associated with the 'message' key within the setup function, logging it to the console. This allows components to access values provided at the application level.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Vitest Globals to TypeScript Configuration\nDESCRIPTION: This configures TypeScript to include vitest globals by adding `vitest/globals` to the `types` array in `tsconfig.json`. This allows you to use Vitest's test APIs without explicit imports.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Usage\nDESCRIPTION: Demonstrates the basic usage of a dynamic component in Vue.js using the `<component>` special element and the `:is` attribute to bind to an active component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<component :is=\"activeComponent\" />\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Example - Vue\nDESCRIPTION: Shows how to use CSS Modules with the `<style module>` tag.  The resulting CSS classes are exposed as an object under the `$style` key, providing a way to scope CSS and avoid naming collisions. Requires CSS Modules support via a preprocessor or bundler plugin.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for defineCustomElement\nDESCRIPTION: Shows the TypeScript type definition for the `defineCustomElement` function and the `CustomElementsOptions` interface. It illustrates the structure and available options when defining custom elements in Vue.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defineCustomElement(\n  component:\n    | (ComponentOptions & CustomElementsOptions)\n    | ComponentOptions['setup'],\n  options?: CustomElementsOptions\n): {\n  new (props?: object): HTMLElement\n}\n\ninterface CustomElementsOptions {\n  styles?: string[]\n\n  // the following options are 3.5+\n  configureApp?: (app: App) => void\n  shadowRoot?: boolean\n  nonce?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Vue Project with npm\nDESCRIPTION: This command uses npm to execute the create-vue scaffolding tool, which helps set up a new Vue project with a recommended project structure and configuration. It is a quick way to start a new Vue project using the latest best practices.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Sync Watcher (Composition API) - JavaScript\nDESCRIPTION: This snippet demonstrates creating a synchronous watcher using the Composition API. `flush: 'sync'` triggers the callback synchronously. The example shows the `watchSyncEffect()` alias.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(source, callback, {\n  flush: 'sync'\n})\n\nwatchEffect(callback, {\n  flush: 'sync'\n})\n\nimport { watchSyncEffect } from 'vue'\n\nwatchSyncEffect(() => {\n  /* executed synchronously upon reactive data change */\n})\n```\n\n----------------------------------------\n\nTITLE: Using Globally Registered Components in Vue.js Template\nDESCRIPTION: Demonstrates how to use globally registered components within a Vue.js template. The components can be used in any component within the application without needing explicit import or registration in each component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>\n```\n\n----------------------------------------\n\nTITLE: Method Handler Definition (Composition API)\nDESCRIPTION: Defines a method `greet` using Vue's Composition API.  It accesses a reactive variable `name` to construct a greeting message. It also accesses the native DOM event object. This showcases how to define event handlers as methods within a Vue component using the Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Properties in Vue.js\nDESCRIPTION: This example demonstrates how to register global properties that can be accessed on any component instance inside the application.  This makes the property available inside any component template and on `this` of any component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.globalProperties.msg = 'hello'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using v-model - Composition API - JavaScript\nDESCRIPTION: This code shows how to implement `v-model` functionality in a component using the Composition API and the `h()` function. It handles the `modelValue` prop and emits the `update:modelValue` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  setup(props, { emit }) {\n    return () =>\n      h(SomeComponent, {\n        modelValue: props.modelValue,\n        'onUpdate:modelValue': (value) => emit('update:modelValue', value)\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Components with h() in Vue.js\nDESCRIPTION: This snippet illustrates how to create Vue.js component VNodes using the `h()` function. It demonstrates passing props, single default slots, and named slots to components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n  // equivalent of some-prop=\"hello\"\n  someProp: 'hello',\n  // equivalent of @update=\"() => {}\"\n  onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n  default: () => 'default slot',\n  foo: () => h('div', 'foo'),\n  bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n----------------------------------------\n\nTITLE: Counter Component - Composition API - Vue\nDESCRIPTION: This Vue component demonstrates a simple counter using the Composition API. It initializes a reactive `count` variable using `ref` and provides an `increment` function to update the count. The template displays the current count.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Focus After Route Change (Composition API)\nDESCRIPTION: This Vue.js Composition API snippet watches the route path and sets focus to the `backToTop` ref after each route change. It imports `ref`, `watch`, and `useRoute` from Vue and Vue Router. It defines a reactive reference for `backToTop` and utilizes the `watch` function to monitor the route path, calling `focus()` on the referenced element whenever the path changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Validator and Default Prop Options Caveats in Vue.js\nDESCRIPTION: This snippet addresses caveats related to using function values for `validator` and `default` prop options in TypeScript versions less than 4.7. It demonstrates the importance of using arrow functions to prevent TypeScript from failing to infer the type of `this` inside these functions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin - Vue.js\nDESCRIPTION: Demonstrates how to install a Vue.js plugin using the `app.use()` method. It imports the `createApp` function from Vue and then uses `app.use()` to install the specified plugin, passing optional configuration options as a second argument. This allows the plugin to extend the application's functionality.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\n----------------------------------------\n\nTITLE: Using nextTick with Composition API in Vue\nDESCRIPTION: This code snippet demonstrates how to use `nextTick` within a Vue component using the Composition API. It increments a reactive `count` value and uses `nextTick` to wait for the DOM to update before asserting the updated value. The `await nextTick()` ensures the DOM has been updated before proceeding, demonstrating its usage with async/await.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: App-level Provide in Vue.js\nDESCRIPTION: This code shows how to provide values at the app level in Vue.js. This makes the provided values available to all components rendered within the app. This approach is useful for plugins. Import `createApp` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Boolean Prop (Composition API)\nDESCRIPTION: This snippet demonstrates how Vue.js casts boolean props when multiple types are allowed using the Composition API. Boolean casting takes precedence unless String appears before Boolean in the type array. When String is defined first, boolean casting rule does not apply and an empty string will be passed if the attribute is present.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, Number]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, String]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Number, Boolean]\n})\n\n// disabled will be parsed as an empty string (disabled=\"\")\ndefineProps({\n  disabled: [String, Boolean]\n})\n```\n\n----------------------------------------\n\nTITLE: Component Refs Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$refs` property, an object of DOM elements and component instances registered via template refs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $refs: { [name: string]: Element | ComponentPublicInstance | null }\n}\n```\n\n----------------------------------------\n\nTITLE: Trim Modifier for v-model in Vue\nDESCRIPTION: This snippet demonstrates the use of the `.trim` modifier with `v-model`. This modifier automatically trims whitespace from the user input.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-model.trim=\"msg\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Prefix for useId() in Vue.js\nDESCRIPTION: This snippet shows how to configure a prefix for all IDs generated via `useId()` inside this application. The `idPrefix` setting provides a way to namespace IDs generated by `useId()`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.idPrefix = 'myApp'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'\n```\n\n----------------------------------------\n\nTITLE: Binding Fallthrough Attributes with v-bind Vue HTML\nDESCRIPTION: This example shows how to bind fallthrough attributes to a specific element within the component using `v-bind=\"$attrs\"`. This is often used when attribute inheritance is disabled.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"btn-wrapper\">\n  <button class=\"btn\" v-bind=\"$attrs\">Click Me</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Computed Property Definition (Composition API)\nDESCRIPTION: This snippet demonstrates defining a computed property using the Composition API in Vue.js. It imports `reactive` and `computed` from Vue, creates a reactive `author` object, and then defines a computed property `publishedBooksMessage` that returns 'Yes' if the author has books, and 'No' otherwise.  The computed property is automatically updated whenever `author.books` changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { reactive, computed } from 'vue'\n\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n\n// a computed ref\nconst publishedBooksMessage = computed(() => {\n  return author.books.length > 0 ? 'Yes' : 'No'\n})\n</script>\n\n<template>\n  <p>Has published books:</p>\n  <span>{{ publishedBooksMessage }}</span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Boolean Prop (Options API)\nDESCRIPTION: This snippet demonstrates how Vue.js casts boolean props when multiple types are allowed using the Options API. Boolean casting takes precedence unless String appears before Boolean in the type array. When String is defined first, boolean casting rule does not apply and an empty string will be passed if the attribute is present.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Boolean, Number]\n  }\n}\n\n// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Boolean, String]\n  }\n}\n\n// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Number, Boolean]\n  }\n}\n\n// disabled will be parsed as an empty string (disabled=\"\")\nexport default {\n  props: {\n    disabled: [String, Boolean]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onUpdated to access updated DOM\nDESCRIPTION: This example demonstrates the usage of the `onUpdated` lifecycle hook to access and log the updated DOM content. The `onUpdated` hook is called after the component's DOM has been updated due to reactive state changes. It imports `ref` and `onUpdated` from 'vue', defines a reactive `count`, and logs the text content of an element with the id 'count' within the `onUpdated` callback.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n  // text content should be the same as current `count.value`\n  console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n  <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Arguments in Options API Vue JavaScript\nDESCRIPTION: This snippet demonstrates how to handle an event argument passed to a method in the Options API. The `increaseCount` method receives the event argument `n` and adds it to `this.count`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmethods: {\n  increaseCount(n) {\n    this.count += n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Application to DOM Element\nDESCRIPTION: Demonstrates mounting a Vue application to a specific DOM element reference using app.mount().  It gets a reference to the first child of the body element and then mounts the Vue application to that specific DOM node. This is an alternative to using a CSS selector.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.mount(document.body.firstChild)\n```\n\n----------------------------------------\n\nTITLE: Creating Template Refs - Composition API (3.5+) - JavaScript\nDESCRIPTION: This code snippet shows how to create a template ref using `useTemplateRef()` (Vue 3.5+) in the Composition API. The ref name is passed as a string prop to the vnode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, useTemplateRef } from 'vue'\n\nexport default {\n  setup() {\n    const divEl = useTemplateRef('my-div')\n\n    // <div ref=\"my-div\">\n    return () => h('div', { ref: 'my-div' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled props declaration in Vue\nDESCRIPTION: This JavaScript code shows the compiled output for the prop declaration in the preceding component. The `defineProps` macro and destructuring are transformed into a standard props declaration with default values and a `setup` function that accesses props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    msg: { type: String, required: true },\n    count: { type: Number, default: 1 },\n    foo: String\n  },\n  setup(props) {\n    watchEffect(() => {\n      console.log(props.msg, props.count, props.foo)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injection Aliasing in Vue.js Options API\nDESCRIPTION: This code snippet demonstrates how to alias an injection key to a different local key using the object syntax in the `inject` option of Vue.js' Options API. The `from` property specifies the injection key, and the local key becomes the name of the property on the component instance (e.g., `this.localMessage`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Plugin Options (Composition API) - Vue.js\nDESCRIPTION: Shows how to inject the provided i18n options into a component using the Composition API's `inject` function. It imports `inject` from Vue and uses it to retrieve the `i18n` options, which can then be used within the component's setup function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Simple Routing with Composition API in Vue.js\nDESCRIPTION: This snippet demonstrates a basic client-side routing implementation in Vue.js using the Composition API. It defines a `routes` object mapping URL hashes to Vue components, uses a `ref` to track the current path, and dynamically renders the appropriate component based on the `hashchange` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/routing.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Replacing Array (Options API)\nDESCRIPTION: Demonstrates how to replace an array in Vue.js using the Options API. The example filters an array of items and assigns the new, filtered array to `this.items`.  Vue intelligently re-renders only the changed elements, making this an efficient operation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nthis.items = this.items.filter((item) => item.message.match(/Foo/))\n```\n\n----------------------------------------\n\nTITLE: Injecting Provided Value (Options API)\nDESCRIPTION: Demonstrates how to inject a provided value within a component using the Options API and the inject option. It defines an inject option that lists 'message' as an injection dependency and then accesses the injected value using `this.message` in the created lifecycle hook. This allows components to access values provided at the application level.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing to Values from Refs/Getters in Vue.js (toValue)\nDESCRIPTION: The `toValue` function normalizes a source into a plain value. If the source is a ref, it returns the inner value. If the source is a getter function, it invokes and returns the result.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toValue<T>(source: T | Ref<T> | (() => T)): T\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n  watch(() => toValue(id), id => {\n    // react to id changes\n  })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)\n```\n\n----------------------------------------\n\nTITLE: Writable Computed Property (Options API)\nDESCRIPTION: This code shows how to define a writable computed property `fullName` using the Options API. It includes both a `get` and a `set` function. The `get` function returns the concatenation of `firstName` and `lastName`, while the `set` function splits the new value and updates `firstName` and `lastName` accordingly.  Destructuring assignment is used in the setter.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Data Entry (Vue.js)\nDESCRIPTION: Shows how to use an injected value as a data entry in a Vue.js component. This allows a component to initialize its data with values provided by ancestor components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = {\n  inject: ['foo'],\n  data() {\n    return {\n      bar: this.foo\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-bind Attribute Binding in Vue.js\nDESCRIPTION: Demonstrates how to use v-bind to dynamically bind HTML attributes to Vue.js expressions. This includes shorthand notations, dynamic attribute names, class and style bindings, and prop binding for components. v-bind allows flexible and reactive attribute manipulation based on component data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- bind an attribute -->\n<img v-bind:src=\"imageSrc\" />\n\n<!-- dynamic attribute name -->\n<button v-bind:[key]=\"value\"></button>\n\n<!-- shorthand -->\n<img :src=\"imageSrc\" />\n\n<!-- same-name shorthand (3.4+), expands to :src=\"src\" -->\n<img :src />\n\n<!-- shorthand dynamic attribute name -->\n<button :[key]=\"value\"></button>\n\n<!-- with inline string concatenation -->\n<img :src=\"'/path/to/images/' + fileName\" />\n\n<!-- class binding -->\n<div :class=\"{ red: isRed }\"></div>\n<div :class=\"[classA, classB]\"></div>\n<div :class=\"[classA, { classB: isB, classC: isC }]\"></div>\n\n<!-- style binding -->\n<div :style=\"{ fontSize: size + 'px' }\"></div>\n<div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n<!-- binding an object of attributes -->\n<div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n<!-- prop binding. \"prop\" must be declared in the child component. -->\n<MyComponent :prop=\"someThing\" />\n\n<!-- pass down parent props in common with a child component -->\n<MyComponent v-bind=\"$props\" />\n\n<!-- XLink -->\n<svg><a :xlink:special=\"foo\"></a></svg>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :someProperty.prop=\"someObject\"></div>\n\n<!-- equivalent to -->\n<div .someProperty=\"someObject\"></div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<svg :view-box.camel=\"viewBox\"></svg>\n```\n\n----------------------------------------\n\nTITLE: Animate Number with Watcher (Composition API)\nDESCRIPTION: This snippet demonstrates animating a number using a watcher and GSAP (GreenSock Animation Platform) in Vue.js with the Composition API. It watches for changes in the `number` ref and uses GSAP to tween the `tweened.number` reactive property, providing a smooth animation effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, reactive, watch } from 'vue'\nimport gsap from 'gsap'\n\nconst number = ref(0)\nconst tweened = reactive({\n  number: 0\n})\n\nwatch(number, (n) => {\n  gsap.to(tweened, { duration: 0.5, number: Number(n) || 0 })\n})\n```\n\n----------------------------------------\n\nTITLE: v-for Equivalent Render Function - JavaScript (Composition API)\nDESCRIPTION: Demonstrates the equivalent of the `v-for` directive using a render function with Composition API. Uses `map` to iterate over an array and generate a list of vnodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nh(\n  'ul',\n  // assuming `items` is a ref with array value\n  items.value.map(({ id, text }) => {\n    return h('li', { key: id }, text)\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing v-model Modifiers with defineModel in Vue\nDESCRIPTION: This code shows how to access modifiers used with the `v-model` directive by destructuring the return value of `defineModel()`. It demonstrates how to check if a modifier is present and conditionally transform the model value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst [modelValue, modelModifiers] = defineModel()\n\n// corresponds to v-model.trim\nif (modelModifiers.trim) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Reactivity with ref and computed\nDESCRIPTION: Demonstrates how to use Vue's `computed` property to create a reactive value that automatically updates when its dependencies change. This is a more declarative approach than using `watchEffect` for simple calculations.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, computed } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = computed(() => A0.value + A1.value)\n\nA0.value = 2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object for Dynamic Attribute Binding (Options API)\nDESCRIPTION: This JavaScript snippet shows how to define a data property `objectOfAttrs` in a Vue Options API component, which contains attributes intended for dynamic binding using the `v-bind` directive.  It provides values for `id` and `class` which can be dynamically bound to an HTML element.  This example is intended to be used with the `v-bind` directive without an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    objectOfAttrs: {\n      id: 'container',\n      class: 'wrapper'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locally Registering Async Component (Composition API)\nDESCRIPTION: This snippet demonstrates how to register an async component locally using the composition API with `<script setup>`. The component is only available within the scope of the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Ref in setup() (Composition API)\nDESCRIPTION: This snippet illustrates how to access and expose a template ref within the `setup()` function of a Vue component using the Composition API. The ref is initialized to `null` and then returned to be accessible in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsetup() {\n  const pElementRef = ref(null)\n\n  return {\n    pElementRef\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Class with static class (Vue)\nDESCRIPTION: Demonstrates how to bind classes using the object syntax in Vue, combining a static class with dynamically toggled classes based on the `isActive` and `hasError` data properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Provide value using setup function in Vue.js\nDESCRIPTION: This code snippet illustrates how to provide a value using the `provide` function within the `setup()` function when not using `<script setup>`. The `provide` function takes an injection key and the value to provide. It's crucial to call `provide()` synchronously inside `setup()` to ensure it registers correctly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: watch() with Side Effect Cleanup (Composition API) - JavaScript\nDESCRIPTION: This snippet demonstrates how to perform side effect cleanup within a `watch` callback using the Composition API.  It uses `AbortController` to cancel a stale `fetch` request when the watched `id` changes. `onWatcherCleanup` registers the abort function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const controller = new AbortController()\n\n  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n    // callback logic\n  })\n\n  onWatcherCleanup(() => {\n    // abort stale request\n    controller.abort()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing reactive data with ref\nDESCRIPTION: This script initializes a reactive boolean variable named `awesome` using `ref` from the `vue` library. The `awesome` variable controls the conditional rendering examples in the document.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\nconst awesome = ref(true)\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Content in Parent Component (HTML)\nDESCRIPTION: This code snippet demonstrates how to pass slot content from a parent component to a child component using standard HTML. The content between the opening and closing tags of the child component will be rendered in the child's slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<child-comp>\n  This is some slot content!\n</child-comp>\n```\n\n----------------------------------------\n\nTITLE: Nullable Type Prop (Composition API)\nDESCRIPTION: This snippet demonstrates how to define a prop that is required but can also accept a null value using Composition API. The `id` prop is defined to be either a string or null, and it is marked as required.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  id: {\n    type: [String, null],\n    required: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SSR App with Request-Specific Store Instance - Vue.js\nDESCRIPTION: This code snippet demonstrates how to create a new instance of the Vue application, including a new store instance, for each server request to prevent cross-request state pollution in SSR environments. It uses `createSSRApp` from Vue and `app.provide` to make the store available to components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js (shared between server and client)\nimport { createSSRApp } from 'vue'\nimport { createStore } from './store.js'\n\n// called on each request\nexport function createApp() {\n  const app = createSSRApp(/* ... */)\n  // create new instance of store per request\n  const store = createStore(/* ... */)\n  // provide store at the app level\n  app.provide('store', store)\n  // also expose store for hydration purposes\n  return { app, store }\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Property for Filtering (Options API)\nDESCRIPTION: Demonstrates how to use a computed property to filter an array in Vue.js using the Options API. The `evenNumbers` computed property returns a new array containing only the even numbers from the `numbers` data property. This maintains the immutability of the original array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject value using Composition API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to inject a value provided by an ancestor component using the `inject` function from Vue.js' Composition API. The `inject` function takes the injection key as an argument and returns the provided value.  Import `inject` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Increment Function with Vitest\nDESCRIPTION: This Vitest code tests the `increment` function to ensure it behaves as expected. It includes tests to verify that the function increments the current number by 1, does not increment it over the maximum, and uses the default maximum of 10. It imports the `increment` function from `./helpers.js`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// helpers.spec.js\nimport { increment } from './helpers'\n\ndescribe('increment', () => {\n  test('increments the current number by 1', () => {\n    expect(increment(0, 10)).toBe(1)\n  })\n\n  test('does not increment the current number over the max', () => {\n    expect(increment(10, 10)).toBe(10)\n  })\n\n  test('has a default max of 10', () => {\n    expect(increment(10)).toBe(10)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Watch with Side Effect Cleanup - JavaScript\nDESCRIPTION: Demonstrates how to use the `onCleanup` function within a `watch` callback to clean up side effects. This is useful for cancelling pending asynchronous operations when the watched source changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(id, async (newId, oldId, onCleanup) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onCleanup(cancel)\n  data.value = await response\n})\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping After Destructuring in Template\nDESCRIPTION: Demonstrates ref unwrapping in a Vue template after destructuring the `id` property into a top-level property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ id + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Updating List using filter() - Composition API\nDESCRIPTION: This JavaScript code demonstrates how to update a list in Vue.js Composition API by replacing the original array with a new filtered array. The `filter()` method is used to create the new array, and `todos` is assumed to be a `ref` object, hence the `.value` access.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntodos.value = todos.value.filter(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Typing Component Emits in Vue.js\nDESCRIPTION: This snippet explains how to declare the expected payload type for an emitted event using the object syntax of the `emits` option. It also highlights that all non-declared emitted events will throw a type error when called, enforcing type safety for event emissions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Fallthrough Attributes in Script Setup Vue\nDESCRIPTION: This code shows how to access fallthrough attributes using `useAttrs()` in `<script setup>`. The `attrs` object will contain all the fallthrough attributes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Include String\nDESCRIPTION: Demonstrates how to use the `include` prop with a comma-delimited string to specify which components should be cached by `<KeepAlive>`.  Only components with names matching 'a' or 'b' will be cached.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Use keyed v-for - Good Example - HTML\nDESCRIPTION: Demonstrates the correct way of using `v-for` with a `key` attribute, ensuring predictable behavior and optimal performance when the list changes. The key should be unique for each item in the list.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Elements in Vue\nDESCRIPTION: This Vue snippet illustrates how to import and register custom elements within a Vue component using the `register` function from the custom elements library. The `register` function is called within the `<script setup>` section to define the custom elements, making them available for use in the component's template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { register } from 'path/to/elements.js'\nregister()\n</script>\n\n<template>\n  <my-foo ...>\n    <my-bar ...></my-bar>\n  </my-foo>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with v-if on template\nDESCRIPTION: This snippet demonstrates the use of `v-if` on a `<template>` element to conditionally render multiple elements. The elements inside the template are only rendered if the `ok` variable is truthy. The template element itself is not rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Emitting events using setup context in Options API JavaScript\nDESCRIPTION: This snippet shows how to emit events using the `emit` function available on the `setup()` context in the Options API. This is an alternate method that is used for emitting events when using an explicit `setup` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, ctx) {\n    ctx.emit('submit')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Component (Composition API) Vue\nDESCRIPTION: Shows how to import and use a child component (ButtonCounter.vue) within a parent component using the Composition API with `<script setup>`.  The imported component is automatically available in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Calling Method with Argument in Inline Handler\nDESCRIPTION: This snippet demonstrates how to call a method with a custom argument from an inline handler in a Vue template.  The `@click` directive is used to bind the click event to the `say` method, passing the string 'hello' or 'bye' as an argument. Each button calls the same method but with a different argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```\n\n----------------------------------------\n\nTITLE: Providing Type Hints for Slots with defineSlots in Vue\nDESCRIPTION: This snippet shows how to use the `defineSlots` macro to provide type hints for slot name and props type checking in Vue. This macro allows you to specify the expected props for each slot, improving IDE support and code maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst slots = defineSlots<{\n  default(props: { msg: string }): any\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: v-on Equivalent JSX - JSX\nDESCRIPTION: Demonstrates how to handle events using JSX by passing an `onClick` prop. Event listeners are passed as `onXxx` props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  onClick={(event) => {\n    /* ... */\n  }}\n>\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Select Single Value with v-model in Vue\nDESCRIPTION: This snippet demonstrates how to create a single select dropdown using the `<select>` element and bind its selected value to a data property using `v-model`. It includes a disabled option as a best practice for iOS.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using v-model - Options API - JavaScript\nDESCRIPTION: This code shows how to implement `v-model` functionality in a component using the Options API and the `h()` function. It handles the `modelValue` prop and emits the `update:modelValue` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  render() {\n    return h(SomeComponent, {\n      modelValue: this.modelValue,\n      'onUpdate:modelValue': (value) => this.$emit('update:modelValue', value)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Hooks for Staggered Transitions with GSAP\nDESCRIPTION: This JavaScript snippet uses the GSAP library to animate the enter transition of list items with a delay based on their index. The `onEnter` function is called when an item is entering the list, and the GSAP `to` method is used to animate the item's opacity and height.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onEnter(el, done) {\n  gsap.to(el, {\n    opacity: 1,\n    height: '1.6em',\n    delay: el.dataset.index * 0.15,\n    onComplete: done\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Computed property (Options API, SFC)\nDESCRIPTION: This JavaScript snippet demonstrates how to define a computed property `filteredTodos` within a Vue.js component using the Options API and single-file component (SFC) syntax. The `filteredTodos` property is expected to return a filtered list of todos based on the `hideCompleted` state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  computed: {\n    filteredTodos() {\n      // return filtered todos based on `this.hideCompleted`\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Argument in Inline Handlers\nDESCRIPTION: Demonstrates how to access the original DOM event in an inline handler. The first button utilizes the `$event` special variable to pass the event object to the `warn` method.  The second button uses an inline arrow function to achieve the same result. Both approaches provide access to the native event object within the handler.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: useId() Usage Example - Vue\nDESCRIPTION: Illustrates how to use `useId()` within a `<script setup>` component to generate a unique ID for a form element's label and input. This ensures proper association between the label and input, improving accessibility.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { useId } from 'vue'\n\n  const id = useId()\n  </script>\n\n  <template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n  </template>\n```\n\n----------------------------------------\n\nTITLE: Async Component with Hydrate on Interaction\nDESCRIPTION: This snippet demonstrates how to use `hydrateOnInteraction` with an async component for lazy hydration, hydrating when specified event(s) are triggered on the component element(s).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhydrateOnInteraction(['wheel', 'mouseover'])\n```\n\n----------------------------------------\n\nTITLE: Testing Stepper Component with Vue Test Utils\nDESCRIPTION: This snippet demonstrates testing a Stepper component using Vue Test Utils. It mounts the component with a `max` prop, checks the initial value, triggers a click on the increment button, and asserts the updated value. This example tests the component's behavior based on user interactions and prop input.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst valueSelector = '[data-testid=stepper-value]'\nconst buttonSelector = '[data-testid=increment]'\n\nconst wrapper = mount(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\nexpect(wrapper.find(valueSelector).text()).toContain('0')\n\nawait wrapper.find(buttonSelector).trigger('click')\n\nexpect(wrapper.find(valueSelector).text()).toContain('1')\n```\n\n----------------------------------------\n\nTITLE: Transition with Key Attribute - Options API - Vue\nDESCRIPTION: This snippet demonstrates how to force a transition by using the `key` attribute on a span element inside the `<Transition>` component. The `count` data property is incremented every second, causing the span to re-render with a different key and triggering the transition. This example uses Vue 2/3's Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 1,\n      interval: null \n    }\n  },\n  mounted() {\n    this.interval = setInterval(() => {\n      this.count++;\n    }, 1000)\n  },\n  beforeDestroy() {\n    clearInterval(this.interval)\n  }\n}\n</script>\n\n<template>\n  <Transition>\n    <span :key=\"count\">{{ count }}</span>\n  </Transition>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Instance-Specific Debounced Method in Vue\nDESCRIPTION: This code snippet shows the recommended approach to create a debounced method within a Vue component using the `created` lifecycle hook. This ensures that each component instance has its own independent copy of the debounced function, preventing interference. The timer is also canceled in the `unmounted` lifecycle hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  created() {\n    // each instance now has its own copy of debounced handler\n    this.debouncedClick = _.debounce(this.click, 500)\n  },\n  unmounted() {\n    // also a good idea to cancel the timer\n    // when the component is removed\n    this.debouncedClick.cancel()\n  },\n  methods: {\n    click() {\n      // ... respond to click ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Style Values (Vue)\nDESCRIPTION: Shows how to provide an array of multiple values for a single style property. The browser will choose the last supported value from the array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_29\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Multiple v-model Bindings (Composition API - Pre 3.4)\nDESCRIPTION: Demonstrates how to implement multiple v-model bindings in Vue.js using the Composition API for versions prior to 3.4.  It defines props for firstName and lastName, emits update events, and binds the values to input fields. Requires Vue.js and the Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps({\n  firstName: String,\n  lastName: String\n})\n\ndefineEmits(['update:firstName', 'update:lastName'])\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Transition Example Vue HTML\nDESCRIPTION: A basic example demonstrating the use of the `<Transition>` component with `v-if` to toggle the visibility of a paragraph element. When the `show` data property changes, the transition is triggered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Vite Config for Custom Elements in Vue\nDESCRIPTION: This snippet shows how to configure Vite to treat HTML tags containing a hyphen as custom elements when using the Vue plugin.  This configuration is part of the build process and affects how Vue compiles the templates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Local and Global Styles - Vue\nDESCRIPTION: Demonstrates how to include both scoped and non-scoped styles within the same component by using separate `<style>` tags. This allows for a combination of component-specific and global styles.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<style>\n/* global styles */\n</style>\n\n<style scoped>\n/* local styles */\n</style>\n```\n\n----------------------------------------\n\nTITLE: activated / deactivated (Options API)\nDESCRIPTION: Illustrates the usage of the `activated` and `deactivated` lifecycle hooks in a component using the Options API. These hooks are called when a component is activated (re-inserted from the cache) and deactivated (removed from the DOM into the cache), respectively. They are also called on mount and unmount.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  activated() {\n    // called on initial mount\n    // and every time it is re-inserted from the cache\n  },\n  deactivated() {\n    // called when removed from the DOM into the cache\n    // and also when unmounted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transition with Key Attribute - Composition API - Vue\nDESCRIPTION: This snippet demonstrates how to force a transition by using the `key` attribute on a span element inside the `<Transition>` component.  The `count` ref is incremented every second, causing the span to re-render with a different key and triggering the transition. This uses Vue 3's Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';\nconst count = ref(0);\n\nsetInterval(() => count.value++, 1000);\n</script>\n\n<template>\n  <Transition>\n    <span :key=\"count\">{{ count }}</span>\n  </Transition>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Class Binding (Vue)\nDESCRIPTION: Illustrates how to use class binding when utilizing a Vue component. The 'active' class is dynamically added based on the 'isActive' property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent :class=\"{ active: isActive }\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple v-model Bindings with Different Arguments and Modifiers in Vue\nDESCRIPTION: This code snippet illustrates the usage of multiple `v-model` directives, each with a different argument and modifier. `first-name` with `capitalize` and `last-name` with `uppercase` are used as examples.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n<UserName\n  v-model:first-name.capitalize=\"first\"\n  v-model:last-name.uppercase=\"last\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Prop as Initial Data (Options API)\nDESCRIPTION: This snippet demonstrates how to use a prop as the initial value for a local data property using Options API. The `initialCounter` prop is used to initialize the `counter` data property, disconnecting it from future prop updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['initialCounter'],\n  data() {\n    return {\n      // counter only uses this.initialCounter as the initial value;\n      // it is disconnected from future prop updates.\n      counter: this.initialCounter\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Async Component\nDESCRIPTION: This snippet demonstrates the basic usage of `defineAsyncComponent` to load a component asynchronously. It shows how to use a Promise to resolve the component definition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component\n```\n\n----------------------------------------\n\nTITLE: Using onMounted to access template ref\nDESCRIPTION: This example demonstrates how to use the `onMounted` lifecycle hook to access a DOM element using a template ref. The `onMounted` hook ensures that the DOM is available before accessing the element. It imports `ref` and `onMounted` from 'vue', defines a ref called `el`, and accesses its value within the `onMounted` callback.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n  el.value // <div>\n})\n</script>\n\n<template>\n  <div ref=\"el\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using a Plugin\nDESCRIPTION: Illustrates how to install a plugin into a Vue application using app.use().  It imports createApp from 'vue' and a plugin named 'MyPlugin' from './plugins/MyPlugin'. The plugin is then installed using app.use(MyPlugin), allowing the plugin to extend the application's functionality.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)\n```\n\n----------------------------------------\n\nTITLE: Enabling Import Maps for Vue (Composition API)\nDESCRIPTION: This snippet demonstrates using import maps to map the 'vue' import specifier to the Vue.js ES module CDN URL when using Composition API. This allows using `import { createApp } from 'vue'` directly. It also includes the application initialization code using Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Good Computed Property (options API)\nDESCRIPTION: Demonstrates how to move a complex expression into a computed property within a Vue.js component's options API. The computed property handles the logic and returns a value that can be easily used in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n// The complex expression has been moved to a computed property\ncomputed: {\n  normalizedFullName() {\n    return this.fullName.split(' ')\n      .map(word => word[0].toUpperCase() + word.slice(1))\n      .join(' ')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ref() with Generic Type and no Initial Value in Vue\nDESCRIPTION: This shows what happens when you specify a generic type argument to `ref()` but omit the initial value. The resulting type will be a union type that includes `undefined`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// inferred type: Ref<number | undefined>\nconst n = ref<number>()\n```\n\n----------------------------------------\n\nTITLE: Reactive Proxy vs. Original Object\nDESCRIPTION: This snippet highlights that `reactive()` returns a proxy, not the original object. Modifying the original object will not trigger reactivity, reinforcing the need to work exclusively with the proxy returned by `reactive()`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst raw = {}\nconst proxy = reactive(raw)\n\n// proxy is NOT equal to the original.\nconsole.log(proxy === raw) // false\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Component\nDESCRIPTION: This snippet renders the imported DeveloperLanding component within the template. It displays the component's UI and functionality.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/developers/index.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<DeveloperLanding />\n```\n\n----------------------------------------\n\nTITLE: Component Force Update Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the `$forceUpdate` method for forcing the component instance to re-render. It should be rarely needed given Vue's fully automatic reactivity system.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $forceUpdate(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Binding checkbox with v-model in Vue.js\nDESCRIPTION: This HTML snippet demonstrates binding a checkbox to a `done` property of a `todo` object within a `v-for` loop. When the checkbox is checked or unchecked, the corresponding `todo.done` property is updated reactively.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<li v-for=\"todo in todos\">\n  <input type=\"checkbox\" v-model=\"todo.done\">\n  ...\n</li>\n```\n\n----------------------------------------\n\nTITLE: Computed Property Debugging (JavaScript)\nDESCRIPTION: This JavaScript code shows how to debug computed properties using the `onTrack` and `onTrigger` options. The `onTrack` callback is triggered when a reactive property or ref is tracked as a dependency, and the `onTrigger` callback is triggered when a dependency is mutated.  These options only work in development mode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst plusOne = computed(() => count.value + 1, {\n  onTrack(e) {\n    // triggered when count.value is tracked as a dependency\n    debugger\n  },\n  onTrigger(e) {\n    // triggered when count.value is mutated\n    debugger\n  }\n})\n\n// access plusOne, should trigger onTrack\nconsole.log(plusOne.value)\n\n// mutate count.value, should trigger onTrigger\ncount.value++\n```\n\n----------------------------------------\n\nTITLE: Adding a Skip Link in Vue\nDESCRIPTION: This code snippet adds a skip link to the top of the `App.vue` component, allowing users to skip repeated content and navigate directly to the main content area.  It includes HTML for the skip link and an anchor, along with a ref for managing focus.  The skip link is initially hidden and appears when focused.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Binding Style to Array (Vue)\nDESCRIPTION: Binds the `style` attribute to an array of style objects. This merges multiple style objects and applies them to the same element, useful for applying multiple sets of styles.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\n----------------------------------------\n\nTITLE: Component Template using $attrs (Vue)\nDESCRIPTION: Shows how to use `$attrs` in a Vue component's template to bind inherited attributes, including the `class` attribute, to a specific element. This is necessary when the component has multiple root elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>\n```\n\n----------------------------------------\n\nTITLE: Async Component Definition in Vue.js\nDESCRIPTION: This JavaScript snippet showcases how to define an asynchronous component in Vue.js using `defineAsyncComponent`.  The component is loaded only when it's rendered on the page, enabling code splitting and reducing initial load time.  `Foo.vue` and its dependencies are created as a separate chunk.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))\n```\n\n----------------------------------------\n\nTITLE: Transition Between Elements in Vue HTML\nDESCRIPTION: This snippet shows how to transition between two elements using `v-if` / `v-else` / `v-else-if` directives within a `<Transition>` component. The key is ensuring that only one element is visible at any given time to enable smooth transitions between them.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_21\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition>\n  <button v-if=\"docState === 'saved'\">Edit</button>\n  <button v-else-if=\"docState === 'edited'\">Save</button>\n  <button v-else-if=\"docState === 'editing'\">Cancel</button>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Destructuring refs with $() macro\nDESCRIPTION: This JavaScript code demonstrates the usage of the `$()` macro for destructuring an object of refs returned by a composition function (`useMouse` from `@vueuse/core`).  The `$()` macro ensures that the destructured variables (`x` and `y`) become reactive variables.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMouse } from '@vueuse/core'\n\nconst { x, y } = $(useMouse())\n\nconsole.log(x, y)\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events with Payload Type (Composition API) TypeScript\nDESCRIPTION: This snippet demonstrates how to declare emitted events with payload type validation in the Composition API using TypeScript. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits({\n  submit(payload: { email: string, password: string }) {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Toggle CSS Class for Animation (Options API)\nDESCRIPTION: This snippet shows how to toggle a CSS class to trigger an animation in Vue.js using the Options API. It uses the `data` property to manage the disabled state and the `methods` property to define the `warnDisabled` function. The disabled state is bound to the `shake` class in the HTML template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue HTML Template Example with Static Caching\nDESCRIPTION: This Vue HTML template demonstrates static caching. The `foo` and `bar` divs are static content which are cached by the compiler and reused in subsequent re-renders. The dynamic content is bound to the `dynamic` property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening for Emitted Events in Parent Component (HTML)\nDESCRIPTION: This code shows how a parent component listens for the 'response' event emitted by a child component using the `v-on` directive (shorthand `@`) in a standard HTML template.  The handler function receives the argument passed from the child and assigns it to a local state variable `childMsg`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<child-comp @response=\"(msg) => childMsg = msg\"></child-comp>\n```\n\n----------------------------------------\n\nTITLE: Debugging Computed Properties in Vue.js\nDESCRIPTION: Illustrates how to debug computed properties using the `onTrack` and `onTrigger` options within the computed function.  These options allow setting breakpoints when dependencies are tracked or when the computed value is triggered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst plusOne = computed(() => count.value + 1, {\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Transition Vue HTML\nDESCRIPTION: A more advanced example of using the `<Transition>` component with a named transition. This example toggles the visibility of a paragraph using `v-if` and applies a slide-fade animation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition name=\"slide-fade\">\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Complex Prop Types with Options API in Vue\nDESCRIPTION: This code shows defining a complex prop type with `defineComponent` using the Options API. It uses `PropType` to define the type of the `book` prop as a `Book` object. This method is commonly used when working with the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    book: Object as PropType<Book>\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: v-cloak Directive Usage in Vue.js\nDESCRIPTION: Shows how to use v-cloak to hide un-compiled templates until Vue.js is ready, preventing a flash of unstyled content.  This directive is particularly useful in no-build-step setups. Requires corresponding CSS to initially hide the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n[v-cloak] {\n  display: none;\n}\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-cloak>\n  {{ message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Destructuring emit from setup context in Options API JavaScript\nDESCRIPTION: This snippet demonstrates how to destructure the `emit` function from the `setup()` context, providing a more concise way to emit events within the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, { emit }) {\n    emit('submit')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: script setup Example - Composition API - Vue\nDESCRIPTION: Example of using `<script setup>` to simplify Composition API usage in Single-File Components (SFCs). Top-level imports, variables, and functions declared within `<script setup>` are automatically available in the template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_9\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Watch Examples (JavaScript)\nDESCRIPTION: These JavaScript examples demonstrate different ways to use the `$watch` method: watching a property name, a dot-delimited path, and a complex expression using a getter function. It also shows how to stop a watcher.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$watch('a', (newVal, oldVal) => {})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$watch('a.b', (newVal, oldVal) => {})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$watch(\n  // every time the expression `this.a + this.b` yields\n  // a different result, the handler will be called.\n  // It's as if we were watching a computed property\n  // without defining the computed property itself.\n  () => this.a + this.b,\n  (newVal, oldVal) => {}\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwatch = this.$watch('a', cb)\n\n// later...\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Same-name Shorthand for v-bind in Vue 3.4+\nDESCRIPTION: This snippet showcases the same-name shorthand for the `v-bind` directive, available in Vue 3.4 and later. When the attribute name matches the JavaScript value being bound, the attribute value can be omitted. This simplifies the syntax, making it more concise. This feature is similar to property shorthand when declaring objects in JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Rendering - JSX\nDESCRIPTION: This snippet shows how to dynamically render components using JSX based on a condition. It imports `Foo` and `Bar` components and conditionally renders either `Foo` or `Bar` based on the value of `ok.value`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_21\n\nLANGUAGE: JSX\nCODE:\n```\nfunction render() {\n  return ok.value ? <Foo /> : <Bar />\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Hazard Example with markRaw()\nDESCRIPTION: Illustrates a potential identity hazard when using `markRaw()` with nested objects. While the top-level object is raw, nested objects are still reactive, leading to `foo.nested === bar.nested` evaluating to `false` because one is proxied and the other is not.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = markRaw({\n  nested: {}\n})\n\nconst bar = reactive({\n  // although `foo` is marked as raw, foo.nested is not.\n  nested: foo.nested\n})\n\nconsole.log(foo.nested === bar.nested) // false\n```\n\n----------------------------------------\n\nTITLE: Initializing updated Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `updated` lifecycle hook, which is called after a Vue.js component has updated its DOM tree due to a reactive state change. This hook is called after any DOM update of the component. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  updated?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with Accessible Placeholders\nDESCRIPTION: This code demonstrates a Vue.js form utilizing placeholders. It's crucial to ensure sufficient color contrast for placeholders to meet accessibility standards.  If the contrast is poor, it could be confused for pre-populated data.  This example shows how to set the color explicitly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      type=\"text\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n      :placeholder=\"item.placeholder\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Limiting Instance Access (Options API)\nDESCRIPTION: Demonstrates how to use the `expose` option in the Options API to limit access to a child component's properties and methods from a parent component using a template ref. It defines `publicData`, `privateData`, `publicMethod`, and `privateMethod`, and then exposes only `publicData` and `publicMethod` using the `expose` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expose: ['publicData', 'publicMethod'],\n  data() {\n    return {\n      publicData: 'foo',\n      privateData: 'bar'\n    }\n  },\n  methods: {\n    publicMethod() {\n      /* ... */\n    },\n    privateMethod() {\n      /* ... */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Slots to Components - JavaScript\nDESCRIPTION: This code shows how to pass slots to a component using the `h()` function. It demonstrates passing both a single default slot and named slots as functions within an object. The `null` argument is required to avoid the slots object being treated as props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n// single default slot\nh(MyComponent, () => 'hello')\n\n// named slots\n// notice the `null` is required to avoid\n// the slots object being treated as props\nh(MyComponent, null, {\n  default: () => 'default slot',\n  foo: () => h('div', 'foo'),\n  bar: () => [h('span', 'one'), h('span', 'two')]\n})\n```\n\n----------------------------------------\n\nTITLE: v-on Equivalent Render Function - JavaScript\nDESCRIPTION: Demonstrates how to handle events using a render function by passing an `onClick` prop. Event listeners are passed as `onXxx` props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nh(\n  'button',\n  {\n    onClick(event) {\n      /* ... */\n    }\n  },\n  'Click Me'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Error Handler\nDESCRIPTION: Shows how to assign a global error handler using app.config.errorHandler. The error handler function receives the error, the component instance, and an information string as arguments and can be used to report errors to a service or perform other error handling tasks. This allows centralized error management for the entire Vue application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Property Example - Options API - Javascript\nDESCRIPTION: Illustrates the use of a computed property in the Options API to filter a list of users based on their active status. This is a good practice to avoid using `v-if` with `v-for` directly on the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n  activeUsers() {\n    return this.users.filter(user => user.isActive)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Props with mergeProps() in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the `mergeProps()` function in Vue.js to merge multiple props objects.  It showcases the special handling for `class`, `style`, and `onXxx` event listeners, where multiple listeners are merged into an array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mergeProps } from 'vue'\n\nconst one = {\n  class: 'foo',\n  onClick: handlerA\n}\n\nconst two = {\n  class: { bar: true },\n  onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n {\n   class: 'foo bar',\n   onClick: [handlerA, handlerB]\n }\n */\n```\n\n----------------------------------------\n\nTITLE: Deep Watcher in Composition API (Vue.js)\nDESCRIPTION: This code shows that calling `watch()` directly on a reactive object creates a deep watcher by default. It also demonstrates how to force a deep watch when using a getter function with the `deep: true` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n  () => state.someObject,\n  (newValue, oldValue) => {\n    // Note: `newValue` will be equal to `oldValue` here\n    // *unless* state.someObject has been replaced\n  },\n  { deep: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Component with resolveComponent() in Vue.js Options API\nDESCRIPTION: This snippet demonstrates resolving a registered component by name using `resolveComponent()` within the options API render function. It shows how to render the resolved component using the `h` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n  render() {\n    const ButtonCounter = resolveComponent('ButtonCounter')\n    return h(ButtonCounter)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Transition for Nested Elements in HTML\nDESCRIPTION: This Vue.js transition component wraps a nested structure.  The transition classes will be applied to the outer div, but the CSS rules target the inner element for animation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition name=\"nested\">\n  <div v-if=\"show\" class=\"outer\">\n    <div class=\"inner\">\n      Hello\n    </div>\n  </div>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Vue Transition with Custom CSS Classes in HTML\nDESCRIPTION: This example demonstrates the use of custom CSS classes for transitions using the `enter-active-class` and `leave-active-class` props. It assumes that Animate.css is included and uses its animation classes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- assuming Animate.css is included on the page -->\n<Transition\n  name=\"custom-classes\"\n  enter-active-class=\"animate__animated animate__tada\"\n  leave-active-class=\"animate__animated animate__bounceOutRight\"\n>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Scaffold Vue Project with Yarn Legacy\nDESCRIPTION: This command uses yarn dlx to execute the create-vue scaffolding tool. dlx allows for running packages without globally installing them. This is specifically for yarn versions before v4.11\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Class to Computed Object (Vue)\nDESCRIPTION: Binds the `class` attribute to a computed property that returns a class object. This allows for dynamic class determination based on complex logic and reactive dependencies.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"classObject\"></div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Attribute Inheritance with defineOptions Vue\nDESCRIPTION: This snippet shows how to disable automatic attribute inheritance in a component using `defineOptions` within `<script setup>`. Setting `inheritAttrs` to `false` prevents automatic attribute application to the root element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Directive (Function Shorthand)\nDESCRIPTION: Shows how to register a global custom directive using app.directive() with a function shorthand definition. It creates a Vue application instance and registers a directive named 'myDirective' using a function that will be executed when the directive is bound and updated. This provides a simpler way to define directives for basic use cases.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Good Component Tag Everywhere\nDESCRIPTION: Demonstrates the correct usage of kebab-case for a component tag, which can be applied consistently everywhere, though PascalCase is generally preferred for Single-File Components and string templates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Everywhere -->\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Initializing Object with Composition API in Vue\nDESCRIPTION: This code snippet shows how to initialize a reactive object using the Composition API in Vue. The `reactive` function makes the object's properties reactive, so changes to them will trigger updates in the UI.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Props with the `props` option (Options API)\nDESCRIPTION: This snippet showcases how to declare props using the `props` option in a Vue component (Options API). The component defines a 'foo' prop and logs its value within the `created` lifecycle hook. Props are accessible via `this` keyword within the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Value Bindings in Vue\nDESCRIPTION: This snippet demonstrates how to bind the values of radio buttons to data properties using `:value`. When a radio button is selected, the value of the corresponding data property is assigned to the `v-model` bound variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<input type=\"radio\" v-model=\"pick\" :value=\"first\" />\n<input type=\"radio\" v-model=\"pick\" :value=\"second\" />\n```\n\n----------------------------------------\n\nTITLE: Using InstanceType with Generics\nDESCRIPTION: This code snippet illustrates how to correctly reference a generic component in a `ref` using `vue-component-type-helpers`.  It imports components and uses `ComponentExposed` from `vue-component-type-helpers` to create a type for a ref targeting a generic component. InstanceType works for components without generics.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<script\n  setup\n  lang=\"ts\"\n>\nimport componentWithoutGenerics from '../component-without-generics.vue';\nimport genericComponent from '../generic-component.vue';\n\nimport type { ComponentExposed } from 'vue-component-type-helpers';\n\n// Works for a component without generics\nref<InstanceType<typeof componentWithoutGenerics>>();\n\nref<ComponentExposed<typeof genericComponent>>();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Ref (Composition API)\nDESCRIPTION: This snippet shows how to access a template ref in the Composition API within a Vue component. It initializes a ref with `null` and exposes it for access in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst pElementRef = ref(null)\n```\n\n----------------------------------------\n\nTITLE: onActivated / onDeactivated (Composition API)\nDESCRIPTION: Demonstrates the usage of `onActivated` and `onDeactivated` lifecycle hooks in a component using the Composition API. These hooks are called when a component is activated (re-inserted from the cache) and deactivated (removed from the DOM into the cache), respectively. They are also called on mount and unmount.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onActivated, onDeactivated } from 'vue'\n\nonActivated(() => {\n  // called on initial mount\n  // and every time it is re-inserted from the cache\n})\n\nonDeactivated(() => {\n  // called when removed from the DOM into the cache\n  // and also when unmounted\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using v-else-if Directive with v-if in Vue.js\nDESCRIPTION: This snippet shows the usage of the `v-else-if` directive in Vue.js to create conditional chains. The `v-else-if` block is rendered if its condition is truthy and the preceding `v-if` and `v-else-if` conditions are falsy. The previous sibling element must have a `v-if` or `v-else-if` directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Directive in Template\nDESCRIPTION: This HTML code demonstrates how to use the custom directive `v-focus` in a Vue.js template. It binds the directive to an input element, causing it to automatically focus when the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-focus>\n```\n\n----------------------------------------\n\nTITLE: Using v-for Directive for List Rendering in Vue.js\nDESCRIPTION: These snippets demonstrate different ways to use the `v-for` directive in Vue.js to render a list of items.  It supports iterating over arrays, objects, numbers, strings and iterables.  You can access the index (or key for objects) in addition to the item itself. The `key` attribute is recommended for efficient updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"item in items\">\n  {{ item.text }}\n</div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"(item, index) in items\"></div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"(value, key) in object\"></div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"(value, name, index) in object\"></div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"item in items\" :key=\"item.id\">\n  {{ item.text }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Universal App\nDESCRIPTION: This JavaScript module exports a function `createApp` that creates a Vue app instance. This module is designed to be shared between the server and the client, ensuring that both environments use the same app definition. It uses `createSSRApp` for SSR compatibility.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app.js (shared between server and client)\nimport { createSSRApp } from 'vue'\n\nexport function createApp() {\n  return createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Composables with Lifecycle Hooks and Provide/Inject\nDESCRIPTION: This example demonstrates how to test a Vue composable that relies on lifecycle hooks or Provide / Inject, using the `withSetup` helper.  It mocks the provide and triggers the unmount hook if needed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSetup } from './test-utils'\nimport { useFoo } from './foo'\n\ntest('useFoo', () => {\n  const [result, app] = withSetup(() => useFoo(123))\n  // mock provide for testing injections\n  app.provide(...)\n  // run assertions\n  expect(result.foo.value).toBe(1)\n  // trigger onUnmounted hook if needed\n  app.unmount()\n})\n```\n\n----------------------------------------\n\nTITLE: Refs Inside v-for (Options API)\nDESCRIPTION: Illustrates using template refs inside a `v-for` loop using the Options API. It initializes the `list` data property with an array and accesses the corresponding elements through `this.$refs.items` in the `mounted` hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      list: [\n        /* ... */\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Typing Provide/Inject with String Keys in Vue.js\nDESCRIPTION: This code snippet shows how to type injected values when using string injection keys in Vue.js.  Since string keys result in an `unknown` type, a generic type argument is used with `inject` to explicitly declare the type. The injected value can be undefined if no provider is present, requiring a default value or a type assertion.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = inject<string>('foo') // type: string | undefined\n```\n\n----------------------------------------\n\nTITLE: Vue Reactivity with ref and watchEffect\nDESCRIPTION: Illustrates Vue's reactivity system using `ref` to create reactive variables and `watchEffect` to automatically update `A2` when `A0` or `A1` changes. This showcases a basic reactive effect in Vue.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // tracks A0 and A1\n  A2.value = A0.value + A1.value\n})\n\n// triggers the effect\nA0.value = 2\n```\n\n----------------------------------------\n\nTITLE: De-synchronization Issue with Default defineModel Prop Value - HTML\nDESCRIPTION: This HTML shows how to invoke child component that leads to de-synchronization issue between parent and child components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<Child v-model=\"myRef\"></Child>\n```\n\n----------------------------------------\n\nTITLE: Bad Component Name (camelCase)\nDESCRIPTION: Shows bad practice of defining a component's name using camelCase. Component names should use PascalCase in JS/JSX.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'myComponent'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writable Computed Property with Previous Value (Composition API)\nDESCRIPTION: This code snippet shows a writable computed property where the getter accesses the previous value, and the setter updates the state. It is implemented using the Composition API in Vue.js. The getter returns the current count if it's less than or equal to 3, otherwise it returns the previous value.  The setter updates the count ref by multiplying the new value by 2.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\nconst alwaysSmall = computed({\n  get(previous) {\n    if (count.value <= 3) {\n      return count.value\n    }\n\n    return previous\n  },\n  set(newValue) {\n    count.value = newValue * 2\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Passing Content to Named Slots (Vue) - Implicit Default\nDESCRIPTION: This example demonstrates how to pass content to the default slot implicitly by placing non-`<template>` nodes directly within the `BaseLayout` component. The content outside of `<template>` elements will be rendered in the default slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<BaseLayout>\n  <template #header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <!-- implicit default slot -->\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>\n```\n\n----------------------------------------\n\nTITLE: Transforming Prop with Computed Property (Options API)\nDESCRIPTION: This snippet demonstrates how to transform a prop's value using a computed property in Options API. The `size` prop is trimmed and converted to lowercase, and the `normalizedSize` computed property automatically updates when the `size` prop changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['size'],\n  computed: {\n    // computed property that auto-updates when the prop changes\n    normalizedSize() {\n      return this.size.trim().toLowerCase()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript whenDepsChange Function for Reactive Effect\nDESCRIPTION: Shows the `whenDepsChange()` function that wraps the `update` function and sets the `activeEffect` before running the update, enabling dependency tracking. This creates a reactive effect that automatically re-runs when its dependencies change.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction whenDepsChange(update) {\n  const effect = () => {\n    activeEffect = effect\n    update()\n    activeEffect = null\n  }\n  effect()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Directive on Component Usage HTML\nDESCRIPTION: Demonstrates using a custom directive on a Vue component.  The directive will be applied to the component's root node.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-demo=\"test\" />\n```\n\n----------------------------------------\n\nTITLE: Card Component with Conditional Slots (Vue)\nDESCRIPTION: This example showcases a Card component with conditional rendering of slots using `v-if` and the `$slots` property. If content is provided for a slot (header, default, or footer), the corresponding section within the card is rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n    \n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n    \n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic TransitionGroup Usage in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the `<TransitionGroup>` component in Vue.js to apply enter/leave transitions to a `v-for` list. It specifies the name and tag attributes for basic styling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>\n```\n\n----------------------------------------\n\nTITLE: Named Slots in Custom Element\nDESCRIPTION: Demonstrates how to use named slots with Vue-defined custom elements using the `slot` attribute.  The `v-slot` directive is not supported for named slots when consuming custom elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_8\n\nLANGUAGE: Vue HTML\nCODE:\n```\n<my-element>\n    <div slot=\"named\">hello</div>\n  </my-element>\n```\n\n----------------------------------------\n\nTITLE: Converting existing refs with $() macro\nDESCRIPTION: This JavaScript code shows how to use the `$()` macro to convert an existing ref (returned by `myCreateRef()`) into a reactive variable. This is useful when a function is not explicitly known to return a ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myCreateRef() {\n  return ref(0)\n}\n\nlet count = $(myCreateRef())\n```\n\n----------------------------------------\n\nTITLE: Setting Focus After Route Change (Options API)\nDESCRIPTION: This Vue.js Options API snippet watches the `$route` and sets focus to the `backToTop` ref after each route change.  It uses the `watch` property to detect route changes and then calls the `focus()` method on the referenced element, ensuring the user's focus is reset to the beginning of the page after navigation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Reactive URL (Getter) in Vue.js\nDESCRIPTION: This example demonstrates how to use a getter function to dynamically determine the URL in a `useFetch()` composable. When the value returned by the getter function changes (e.g., due to a change in `props.id`), the `useFetch` function will automatically re-fetch the data. This allows reactive data fetching based on computed values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// re-fetch when props.id changes\nconst { data, error } = useFetch(() => `/posts/${props.id}`)\n```\n\n----------------------------------------\n\nTITLE: KeepAlive with Max - Vue HTML\nDESCRIPTION: This example shows the usage of the `max` prop of the `<KeepAlive>` component. The `max` prop limits the maximum number of component instances to cache. Once the limit is reached, the least recently used cached component instance will be destroyed to make room for a new one.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<KeepAlive :max=\"10\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Using the Translation Method in a Template - Vue.js\nDESCRIPTION: Illustrates how to use the `$translate` method within a Vue.js template.  The method takes a string key (e.g. 'greetings.hello') which corresponds to a translated value defined in the plugin configuration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1>{{ $translate('greetings.hello') }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Side Effect Cleanup in Watchers in Vue.js\nDESCRIPTION: Demonstrates how to perform side effect cleanup within a watcher using the `onCleanup` callback. The cleanup callback is called right before the next time the effect is re-run, allowing for cleanup of invalidated side effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwatchEffect(async (onCleanup) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onCleanup(cancel)\n  data.value = await response\n})\n```\n\n----------------------------------------\n\nTITLE: Watch Reactive Object Directly - JavaScript\nDESCRIPTION: Shows how to directly watch a reactive object. The watcher is automatically in deep mode, and will trigger on any deep mutation to the object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({ count: 0 })\nwatch(state, () => {\n  /* triggers on deep mutation to state */\n})\n```\n\n----------------------------------------\n\nTITLE: Extends Option: Composition API Usage (Vue.js)\nDESCRIPTION: Shows how to use `extends` with Composition API by calling the base component's setup function within the extending component's setup function, and then merging the returned objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Base from './Base.js'\nexport default {\n  extends: Base,\n  setup(props, ctx) {\n    return {\n      ...Base.setup(props, ctx),\n      // local bindings\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: createRenderer Function and RendererOptions Interface in TypeScript\nDESCRIPTION: Defines the `createRenderer` function and the `RendererOptions` interface, used for creating custom renderers in Vue.js. The `RendererOptions` includes functions for manipulating host nodes and elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/custom-renderer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRenderer<HostNode, HostElement>(\n    options: RendererOptions<HostNode, HostElement>\n  ): Renderer<HostElement>\n\n  interface Renderer<HostElement> {\n    render: RootRenderFunction<HostElement>\n    createApp: CreateAppFunction<HostElement>\n  }\n\n  interface RendererOptions<HostNode, HostElement> {\n    patchProp(\n      el: HostElement,\n      key: string,\n      prevValue: any,\n      nextValue: any,\n      namespace?: ElementNamespace,\n      parentComponent?: ComponentInternalInstance | null,\n    ): void\n    insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void\n    remove(el: HostNode): void\n    createElement(\n      type: string,\n      namespace?: ElementNamespace,\n      isCustomizedBuiltIn?: string,\n      vnodeProps?: (VNodeProps & { [key: string]: any }) | null,\n    ): HostElement\n    createText(text: string): HostNode\n    createComment(text: string): HostNode\n    setText(node: HostNode, text: string): void\n    setElementText(node: HostElement, text: string): void\n    parentNode(node: HostNode): HostElement | null\n    nextSibling(node: HostNode): HostNode | null\n    querySelector?(selector: string): HostElement | null\n    setScopeId?(el: HostElement, id: string): void\n    cloneNode?(node: HostNode): HostNode\n    insertStaticContent?(\n      content: string,\n      parent: HostElement,\n      anchor: HostNode | null,\n      namespace: ElementNamespace,\n      start?: HostNode | null,\n      end?: HostNode | null,\n    ): [HostNode, HostNode]\n  }\n```\n\n----------------------------------------\n\nTITLE: Side Effect Cleanup (Vue 3.5+) in Watchers\nDESCRIPTION: Shows side effect cleanup within a watcher using `onWatcherCleanup` introduced in Vue 3.5+. It offers a more direct way to register cleanup functions for watchers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onWatcherCleanup } from 'vue'\n\nwatchEffect(async () => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onWatcherCleanup(cancel)\n  data.value = await response\n})\n```\n\n----------------------------------------\n\nTITLE: Example Vue Component Test with Vitest\nDESCRIPTION: This snippet demonstrates a basic unit test for a Vue component using Vitest and @testing-library/vue. It renders the component, passes props, and asserts that the expected output is displayed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.test.js\nimport { render } from '@testing-library/vue'\nimport MyComponent from './MyComponent.vue'\n\ntest('it should work', () => {\n  const { getByText } = render(MyComponent, {\n    props: {\n      /* ... */\n    }\n  })\n\n  // assert output\n  getByText('...')\n})\n```\n\n----------------------------------------\n\nTITLE: setup() with Render Functions\nDESCRIPTION: Demonstrates using `setup()` to return a render function directly, allowing the render function to use reactive state declared in the same scope.  Also demonstrates using `expose()` to expose methods when returning a render function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return () => h('div', count.value)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, ref } from 'vue'\n\nexport default {\n  setup(props, { expose }) {\n    const count = ref(0)\n    const increment = () => ++count.value\n\n    expose({\n      increment\n    })\n\n    return () => h('div', count.value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Default Scoped Slot with Template\nDESCRIPTION: This example demonstrates the correct way to use the default scoped slot with an explicit `<template>` tag when mixing it with named slots. Using the template tag clarifies the scope of the `message` prop, indicating that it's not available within the named `footer` slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_25\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent>\n  <!-- Use explicit default slot -->\n  <template #default=\"{ message }\">\n    <p>{{ message }}</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Testing Stepper Component with Testing Library\nDESCRIPTION: This snippet demonstrates testing a Stepper component using Testing Library. It renders the component, retrieves the initial value, clicks the increment button, and asserts the updated value. Testing Library emphasizes testing components as a user would, focusing on DOM elements and user interactions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { getByText } = render(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\ngetByText('0') // Implicit assertion that \"0\" is within the component\n\nconst button = getByRole('button', { name: /increment/i })\n\n// Dispatch a click event to our increment button.\nawait fireEvent.click(button)\n\ngetByText('1')\n\nawait fireEvent.click(button)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup and Lifecycle Hook\nDESCRIPTION: This code snippet demonstrates a Vue component setup using the `<script setup>` syntax. It imports necessary modules from Vue and a custom component. The `onMounted` lifecycle hook is used to call the `load` function when the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/sponsor/index.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport SponsorsGroup from '@theme/components/SponsorsGroup.vue'\nimport { load, data } from '@theme/components/sponsors'\nimport { onMounted } from 'vue'\n\nonMounted(load)\n</script>\n```\n\n----------------------------------------\n\nTITLE: v-once Directive in Vue.js\nDESCRIPTION: Demonstrates how v-once renders an element or component only once, skipping future updates. This improves performance by treating the element as static content.  Applies to single elements, elements with children, and components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- single element -->\n<span v-once>This will never change: {{msg}}</span>\n<!-- the element have children -->\n<div v-once>\n  <h1>Comment</h1>\n  <p>{{msg}}</p>\n</div>\n<!-- component -->\n<MyComponent v-once :comment=\"msg\"></MyComponent>\n<!-- `v-for` directive -->\n<ul>\n  <li v-for=\"i in list\" v-once>{{i}}</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Client Entry Point\nDESCRIPTION: This JavaScript snippet serves as the entry point for the client-side application. It imports the `createApp` function from the shared `app.js` module, calls the function to create the Vue app instance, and mounts the app to the DOM element with the ID 'app', initiating the hydration process.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// client.js\nimport { createApp } from './app.js'\n\ncreateApp().mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Dynamic Transition Name - Vue HTML\nDESCRIPTION: This code shows how to dynamically set the `name` prop of the `<Transition>` component. This allows you to use different CSS transitions based on the current state. `transitionName` is a variable in the Vue component's data or state that determines which CSS transition to apply.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<Transition :name=\"transitionName\">\n  <!-- ... -->\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Building a Vue Project with Yarn\nDESCRIPTION: This command builds a production-ready version of the Vue application using Yarn.  The output is typically placed in a `./dist` directory.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Incorrect onMounted Usage (Composition API, JavaScript)\nDESCRIPTION: Illustrates an incorrect way to use the `onMounted` hook in the Composition API.  `onMounted` must be called synchronously during component setup, not asynchronously inside a `setTimeout` call. This example shows what *not* to do.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(() => {\n  onMounted(() => {\n    // this won't work.\n  })\n}, 100)\n```\n\n----------------------------------------\n\nTITLE: Transition Modes in Vue HTML\nDESCRIPTION: This snippet demonstrates how to use the `mode` prop on the `<Transition>` component to control the timing of entering and leaving animations. Setting `mode=\"out-in\"` ensures that the leaving element is animated out before the entering element is animated in, preventing layout issues and creating a cleaner transition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition mode=\"out-in\">\n  ...\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: onWatcherCleanup Example - TypeScript\nDESCRIPTION: Illustrates how to use the `onWatcherCleanup` function in Vue.js within a `watch` callback to register a cleanup function.  This function is called when the watcher is about to re-run, allowing for cleanup of previous side effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onWatcherCleanup(cancel)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing v-model Modifiers (Pre 3.4 Composition API)\nDESCRIPTION: This Vue code snippet shows the older approach (pre Vue 3.4) for accessing v-model modifiers in the Composition API. It uses `defineProps` to declare props, including modifiers, and `defineEmits` for emitting update events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_29\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps({\nfirstName: String,\nlastName: String,\nfirstNameModifiers: { default: () => ({}) },\nlastNameModifiers: { default: () => ({}) }\n})\ndefineEmits(['update:firstName', 'update:lastName'])\n\nconsole.log(props.firstNameModifiers) // { capitalize: true }\nconsole.log(props.lastNameModifiers) // { uppercase: true }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue App with In-DOM Template in JavaScript\nDESCRIPTION: This JavaScript code creates a Vue application instance that uses the `innerHTML` of the mounting point as the component's template.  The component defines a `data` property called `count` initialized to 0.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Vue.js Event Modifiers Example\nDESCRIPTION: This snippet illustrates how to use event modifiers in Vue.js templates. Modifiers like `.stop`, `.prevent`, `.self`, `.capture`, `.once`, and `.passive` are appended to the event name to modify event handling behavior. This allows for concise and declarative event handling logic within the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- use capture mode when adding the event listener     -->\n<!-- i.e. an event targeting an inner element is handled -->\n<!-- here before being handled by that element           -->\n<div @click.capture=\"doThis\">...</div>\n\n<!-- the click event will be triggered at most once -->\n<a @click.once=\"doThis\"></a>\n\n<!-- the scroll event's default behavior (scrolling) will happen -->\n<!-- immediately, instead of waiting for `onScroll` to complete  -->\n<!-- in case it contains `event.preventDefault()`                -->\n<div @scroll.passive=\"onScroll\">...</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of v-for Scoping\nDESCRIPTION: This JavaScript snippet demonstrates the variable scoping behavior of `v-for` using the `forEach` method. It shows how the callback function has access to the outer scope variables but its own parameters (`item` and `index`) are only available within the callback.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Anonymous Functional Component Vue.js TypeScript\nDESCRIPTION: This code snippet demonstrates how to type an anonymous functional component in Vue.js using TypeScript. It defines the props and emits for the component, along with the component's rendering logic that includes an onClick event that emits a message.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { FunctionalComponent } from 'vue'\n\ntype FComponentProps = {\n  message: string\n}\n\ntype Events = {\n  sendMessage(message: string): void\n}\n\nconst FComponent: FunctionalComponent<FComponentProps, Events> = (\n  props,\n  context\n) => {\n  return (\n    <button onClick={() => context.emit('sendMessage', props.message)}>\n        {props.message} {' '}\n    </button>\n  )\n}\n\nFComponent.props = {\n  message: {\n    type: String,\n    required: true\n  }\n}\n\nFComponent.emits = {\n  sendMessage: (value) => typeof value === 'string'\n}\n```\n\n----------------------------------------\n\nTITLE: Configure App Instance of Custom Element\nDESCRIPTION: Demonstrates how to configure the app instance of a Vue custom element using the configureApp option in `defineCustomElement`. This allows for customization of the Vue app instance that powers the custom element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefineCustomElement(MyComponent, {\n  configureApp(app) {\n    app.config.errorHandler = (err) => {\n      /* ... */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Component in Vue.js\nDESCRIPTION: This code snippet renders the imported `Home` component.  The `<Home />` tag instantiates and displays the component within the Vue.js template. No specific props or attributes are being passed to the component in this instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/index.md#_snippet_1\n\nLANGUAGE: Vue.js\nCODE:\n```\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Good Simple Computed Properties (composition API)\nDESCRIPTION: Illustrates the recommended practice of breaking down a complex computed property into smaller, simpler computed properties using the Composition API for improved readability, testability, and adaptability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nconst basePrice = computed(\n  () => manufactureCost.value / (1 - profitMargin.value)\n)\n\nconst discount = computed(\n  () => basePrice.value * (discountPercent.value || 0)\n)\n\nconst finalPrice = computed(() => basePrice.value - discount.value)\n```\n\n----------------------------------------\n\nTITLE: Efficient List Rendering in Vue.js (Props Stability)\nDESCRIPTION: This Vue.js template snippet shows an optimized way to render a list.  Each `ListItem` only updates when its own `active` prop changes, reducing unnecessary re-renders.  The active state is pre-calculated in the parent component and passed as a direct prop.  The active state depends on a boolean expression.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events using emits Option JavaScript\nDESCRIPTION: This snippet shows how to declare emitted events using the `emits` option in the Options API. The component declares that it will emit `inFocus` and `submit` events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  emits: ['inFocus', 'submit']\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Option Merge Strategies in Vue.js\nDESCRIPTION: This example illustrates how to define a custom merge strategy for a component option.  A merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.  The example defines a custom merge strategy for `msg` that concatenates the parent and child values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'\n```\n\n----------------------------------------\n\nTITLE: Running Callback with Application Context\nDESCRIPTION: Shows how to run a callback function with the current application's context using app.runWithContext(). It provides the value '1' for the 'id' key, then runs a function which injects and returns the 'id' value. This allows injecting values outside of a component's setup scope.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1\n```\n\n----------------------------------------\n\nTITLE: Adding Directives with withDirectives() in Vue.js\nDESCRIPTION: This snippet demonstrates how to add custom directives to VNodes using the `withDirectives()` function in Vue.js. It creates a VNode and wraps it with a custom directive, including a value, argument, and modifiers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n  mounted() {\n    /* ... */\n  },\n  updated() {\n    /* ... */\n  }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n  [pin, 200, 'top', { animate: true }]\n])\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Class and $attrs (Vue)\nDESCRIPTION: Demonstrates using a component with a class attribute and how that attribute is passed down and applied using `$attrs` in the component's template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<MyComponent class=\"baz\" />\n```\n\n----------------------------------------\n\nTITLE: Staggering List Transitions with Data Attributes\nDESCRIPTION: This snippet shows how to add a `data-index` attribute to each list item, which is used later in JavaScript to stagger the animations. The `css` prop is set to `false` to disable CSS transitions, and event listeners for `before-enter`, `enter`, and `leave` are added.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<TransitionGroup\n  tag=\"ul\"\n  :css=\"false\"\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @leave=\"onLeave\"\n>\n  <li\n    v-for=\"(item, index) in computedList\"\n    :key=\"item.msg\"\n    :data-index=\"index\"\n  >\n    {{ item.msg }}\n  </li>\n</TransitionGroup>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Casting in Templates\nDESCRIPTION: Illustrates how to perform type casting in Vue templates when using TypeScript. This is useful when TypeScript cannot infer the correct type, and you need to explicitly cast a variable to a specific type to access its properties or methods.  The example casts a union type (string | number) to a number to use the `toFixed` method.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Vue Application Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Vue application instance using the `createApp` function from the 'vue' library. It imports the function and creates an application instance with a root component (represented by the options object).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component (Options API)\nDESCRIPTION: This snippet shows a Vue component implemented using the Options API. It includes reactive data (`count`), a method to increment the count (`increment`), and a lifecycle hook (`mounted`) to log the initial count.\n\nDependencies: None\nInput: None\nOutput: A Vue component object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: In-DOM Template for Vue Component (HTML)\nDESCRIPTION: This HTML code provides a template directly within the mount container. The template contains a button that increments a counter when clicked.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Transition on Appear in Vue HTML\nDESCRIPTION: This snippet shows how to apply a transition on the initial render of a node by adding the `appear` prop to the `<Transition>` component. This is useful for animating elements as they initially appear on the page.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition appear>\n  ...\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Force Casting Injected Values in Vue.js\nDESCRIPTION: This code snippet demonstrates force casting an injected value when you are certain that the value is always provided.  This avoids potential `undefined` issues. Note that this approach should be used cautiously, only when you are absolutely sure that the value will be provided at runtime.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = inject('foo') as string\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Prop Types in Vue.js\nDESCRIPTION: Shows how to use `ExtractPublicPropTypes` to extract the public prop types from a runtime props options object, representing the props that the parent component is allowed to pass. This utility type is available in Vue 3.3+.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst propsOptions = {\n  foo: String,\n  bar: Boolean,\n  baz: {\n    type: Number,\n    required: true\n  },\n  qux: {\n    type: Number,\n    default: 1\n  }\n} as const\n\ntype Props = ExtractPublicPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar?: boolean,\n//   baz: number,\n//   qux?: number\n// }\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Directive vFocus (Composition API) Vue\nDESCRIPTION: Defines a custom directive `vFocus` within a `<script setup>` block. This directive focuses the element it's bound to when the element is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Emits Option Object Syntax Example JavaScript\nDESCRIPTION: Shows how to use the `emits` option in Vue.js component with object syntax to define custom events and their corresponding validation functions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  emits: {\n    // no validation\n    click: null,\n\n    // with validation\n    submit: (payload) => {\n      if (payload.email && payload.password) {\n        return true\n      } else {\n        console.warn(`Invalid submit event payload!`)\n        return false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Max Instances\nDESCRIPTION: Explains how to limit the maximum number of component instances cached by `<KeepAlive>` using the `max` prop.  In this example, a maximum of 10 component instances will be cached using an LRU (Least Recently Used) cache replacement policy.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Rendering\nDESCRIPTION: This snippet renders the `ThemePage` component using its tag name.  It assumes the component has already been imported and registered in the Vue instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/ecosystem/themes.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<ThemePage />\n```\n\n----------------------------------------\n\nTITLE: Async Component with Hydrate on Idle\nDESCRIPTION: This snippet demonstrates how to use `hydrateOnIdle` with an async component for lazy hydration, which hydrates via `requestIdleCallback`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})\n```\n\n----------------------------------------\n\nTITLE: Using `is` attribute for dynamic components in Vue\nDESCRIPTION: This code snippet illustrates using the `is` attribute to render a Vue component in place of a native HTML element. The `vue:` prefix tells Vue.js to treat the element as a Vue component, resolving potential template parsing issues within the DOM.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Shared App\nDESCRIPTION: This JavaScript snippet demonstrates how to use the shared `createApp` function in the server-side rendering process. It imports the function from `app.js`, calls it to create a Vue app instance within the request handler, renders the app to HTML using `renderToString`, and sends the HTML as a response. Omitting the irrelevant code.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// server.js (irrelevant code omitted)\nimport { createApp } from './app.js'\n\nserver.get('/', (req, res) => {\n  const app = createApp()\n  renderToString(app).then(html => {\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Component Emits with Type-Based Declaration in Vue\nDESCRIPTION: This code snippet demonstrates typing component emits using type-based declaration, providing fine-grained control over the type constraints of emitted events using call signatures in a type literal.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// type-based\nconst emit = defineEmits<{  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Semantic HTML Structure with Headings\nDESCRIPTION: This HTML snippet demonstrates the correct usage of headings within a semantic HTML structure. It includes `main`, `section`, and heading elements (`h1`, `h2`, `h3`) with appropriate ARIA attributes for accessibility.  The snippet illustrates how to nest headings correctly and use `aria-labelledby` for associating section titles with the heading elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Imperative Watcher with $watch() - JavaScript\nDESCRIPTION: This example demonstrates creating a watcher imperatively using the `$watch()` instance method within a Vue component's `created` lifecycle hook. This is helpful for conditionally setting up watchers or responding to user interactions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  created() {\n    this.$watch('question', (newQuestion) => {\n      // ...\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping in Arrays and Collections with reactive() in Vue.js\nDESCRIPTION: Illustrates that refs are not automatically unwrapped when accessed as elements of a reactive array or native collection type like `Map`. The `.value` property needs to be explicitly accessed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)\n```\n\n----------------------------------------\n\nTITLE: Type Augmentation Placement in Vue.js\nDESCRIPTION: This snippet demonstrates the correct way to place TypeScript type augmentations for Vue.js. It emphasizes the necessity of placing the augmentation inside a TypeScript module (a file with at least one top-level import or export) to avoid overwriting the original types, ensuring proper augmentation instead.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Does not work, overwrites the original types.\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Works correctly\nexport {}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useTemplateRef() Usage Example - Vue\nDESCRIPTION: Demonstrates how to use `useTemplateRef()` in a `<script setup>` component to access a template element. In this example, `useTemplateRef('input')` is used to get a reference to an `<input>` element with `ref=\"input\"` in the template, and then `focus()` is called on the element after the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { useTemplateRef, onMounted } from 'vue'\n\n  const inputRef = useTemplateRef('input')\n\n  onMounted(() => {\n    inputRef.value.focus()\n  })\n  </script>\n\n  <template>\n    <input ref=\"input\" />\n  </template>\n```\n\n----------------------------------------\n\nTITLE: Splitting Modules - Component Definition (Composition API)\nDESCRIPTION: This snippet defines a Vue component in a separate JavaScript file using the Composition API. It exports the component's setup function and template. Requires the main HTML file to import this component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Internal Prop Types in Vue.js\nDESCRIPTION: Illustrates how to use `ExtractPropTypes` to extract the internal prop types from a runtime props options object. The extracted types include resolved props received by the component, considering boolean props and props with default values which are always defined.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst propsOptions = {\n  foo: String,\n  bar: Boolean,\n  baz: {\n    type: Number,\n    required: true\n  },\n  qux: {\n    type: Number,\n    default: 1\n  }\n} as const\n\ntype Props = ExtractPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar: boolean,\n//   baz: number,\n//   qux: number\n// }\n```\n\n----------------------------------------\n\nTITLE: TypeScript in Vue SFC\nDESCRIPTION: This snippet demonstrates the use of TypeScript within a Vue Single-File Component's `<script>` block. The `lang=\"ts\"` attribute specifies that the content should be treated as TypeScript code.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<script lang=\"ts\">\n  // use TypeScript\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested Reactive Objects\nDESCRIPTION: Illustrates that nested objects within a reactive object are also proxies due to Vue's deep reactivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = reactive({})\n\nconst raw = {}\nproxy.nested = raw\n\nconsole.log(proxy.nested === raw) // false\n```\n\n----------------------------------------\n\nTITLE: Using watchEffect() - JavaScript\nDESCRIPTION: This example shows how to use `watchEffect()` to automatically track reactive dependencies. It performs the same data fetching operation as the previous example, but without explicitly specifying `todoId` as a source. The `watchEffect` function automatically tracks `todoId.value` as a dependency.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwatchEffect(async () => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n  )\n  data.value = await response.json()\n})\n```\n\n----------------------------------------\n\nTITLE: Parent component binding v-model attributes\nDESCRIPTION: Demonstrates how the parent component's `v-model` syntax is compiled into prop binding and event listener for the pre-Vue 3.4 implementation.  The `foo` variable is passed as `modelValue` to the child, and updates are handled via the `@update:modelValue` event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Parent.vue -->\n<Child\n  :modelValue=\"foo\"\n  @update:modelValue=\"$event => (foo = $event)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: v-model Binding with Argument and Modifier in Vue\nDESCRIPTION: This code snippet demonstrates how to use v-model with both an argument (`title`) and a modifier (`capitalize`). The generated prop name will be `arg + \"Modifiers\"` (e.g., `titleModifiers`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_25\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-model:title.capitalize=\"myText\">\n```\n\n----------------------------------------\n\nTITLE: Using useSlots and useAttrs in Vue Script Setup\nDESCRIPTION: This code snippet demonstrates how to use the `useSlots` and `useAttrs` helpers inside `<script setup>` to access slots and attributes, respectively. These helpers are useful in cases where you need to access slots and attributes directly within the setup function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useSlots, useAttrs } from 'vue'\n\nconst slots = useSlots()\nconst attrs = useAttrs()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Async Component with Hydrate on Visible\nDESCRIPTION: This snippet demonstrates how to use `hydrateOnVisible` with an async component for lazy hydration, hydrating when element(s) become visible via `IntersectionObserver`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhydrateOnVisible({ rootMargin: '100px' })\n```\n\n----------------------------------------\n\nTITLE: Assigning Refs to Reactive Properties in Vue.js\nDESCRIPTION: Demonstrates that when assigning a ref to a property of a reactive object, the ref will be automatically unwrapped, and the reactive property will directly hold the ref's value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = ref(1)\nconst obj = reactive({})\n\nobj.count = count\n\nconsole.log(obj.count) // 1\nconsole.log(obj.count === count.value) // true\n```\n\n----------------------------------------\n\nTITLE: Checking if Object is Readonly in Vue.js (isReadonly)\nDESCRIPTION: The `isReadonly` function checks if a given value is a readonly object, including proxies created by `readonly()` and `shallowReadonly()`, as well as computed refs without a setter.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isReadonly(value: unknown): boolean\n```\n\n----------------------------------------\n\nTITLE: Attribute Binding using v-bind Directive in Vue\nDESCRIPTION: This code snippet demonstrates attribute binding using the `v-bind` directive in a Vue template.  The `id` attribute of the `<div>` element is dynamically bound to the `dynamicId` property of the component. When `dynamicId` changes, the `id` attribute will update accordingly.  If the bound value is `null` or `undefined`, the attribute will be removed from the rendered element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n----------------------------------------\n\nTITLE: Render Function with createElementBlock - JavaScript\nDESCRIPTION: This JavaScript snippet shows a render function that returns a virtual DOM tree. It uses `_openBlock()` and `_createElementBlock()` to create a fragment. The `_createElementBlock` function takes a `_Fragment` (which is likely a reference to Vue's Fragment component), null attributes, an array of children (empty in this case), and a flag `64 /* STABLE_FRAGMENT */` indicating that the fragment's children are stable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\n----------------------------------------\n\nTITLE: Component B - Composition API - Vue\nDESCRIPTION: This Vue component (ComponentB.vue) imports the shared `store` and displays the `count` property.  It utilizes the Composition API and assumes the `store` module exports a reactive object. Similar to ComponentA, it reflects the state in the shared store.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- ComponentB.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Components Option Type Definition\nDESCRIPTION: Defines the type for the `components` option in Vue.js component options. This option allows registering components to be made available to the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  components?: { [key: string]: Component }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Props using Type Annotations in Vue SFCs with TypeScript\nDESCRIPTION: This snippet demonstrates declaring props using type annotations within `<script setup lang=\"ts\">` in a Vue SFC. It defines optional props 'title' (string) and 'likes' (number) using TypeScript syntax. This enables type checking and IDE support for the component's props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineProps<{{\n  title?: string\n  likes?: number\n}}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Instance in Data Function with Arrow Function\nDESCRIPTION: This example shows how to access the component instance within a `data` function defined using an arrow function. Since arrow functions do not bind `this`, the component instance is passed as the first argument (vm). This pattern is useful when accessing component props within the `data` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: (vm) => ({ a: vm.myProp })\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Element\nDESCRIPTION: Demonstrates how to define a custom element using `defineCustomElement` and register it with the browser using `customElements.define`.  It shows the fundamental steps involved in creating and registering a Vue-powered web component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)\n```\n\n----------------------------------------\n\nTITLE: Custom Element Configuration Example\nDESCRIPTION: Illustrates how to configure a custom element using the `configureApp` option. Demonstrates passing custom options to `defineCustomElement` for Vue application configuration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Element from './MyElement.ce.vue'\n\ndefineCustomElement(Element, {\n  configureApp(app) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Computed Property Example - Composition API - Javascript\nDESCRIPTION: Illustrates the use of a computed property in the Composition API to filter a list of users based on their active status. This is a good practice to avoid using `v-if` with `v-for` directly on the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeUsers = computed(() => {\n  return users.filter((user) => user.isActive)\n})\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with aria-describedby\nDESCRIPTION: This Vue.js code demonstrates using aria-describedby to associate instructions with an input field. The aria-describedby attribute provides additional information or instructions related to the input, improving accessibility.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<fieldset>\n  <legend>Using aria-describedby</legend>\n  <label id=\"dob\" for=\"dob\">Date of Birth: </label>\n  <input type=\"date\" name=\"dob\" id=\"dob\" aria-describedby=\"dob-instructions\" />\n  <p id=\"dob-instructions\">MM/DD/YYYY</p>\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: SSR App Rendering (Node.js)\nDESCRIPTION: This JavaScript snippet demonstrates the basic rendering of a Vue app to a string on the server using Node.js. It imports the necessary functions from 'vue' and 'vue/server-renderer', creates a simple Vue app instance with a button, and renders it to HTML. The rendered HTML is then logged to the console.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this runs in Node.js on the server.\nimport { createSSRApp } from 'vue'\n// Vue's server-rendering API is exposed under `vue/server-renderer`.\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue with ES Module CDN (Composition API)\nDESCRIPTION: This snippet initializes a Vue application using the ES module build from a CDN, utilizing the Composition API. It defines a reactive 'message' using 'ref' and makes it available to the template.  Requires a browser that supports ES modules.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Provide per-instance state using Options API\nDESCRIPTION: This code demonstrates how to provide per-instance state in Vue.js' Options API.  The `provide` option should be a function that returns an object containing the provided values. This is necessary to access `this` and provide data defined in the `data()` option. Note that this does not make the injection reactive unless further steps are taken.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    // use function syntax so that we can access `this`\n    return {\n      message: this.message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use component-scoped styling - Good Example 2 - HTML/CSS (CSS Modules)\nDESCRIPTION: Demonstrates the correct way of styling components using CSS Modules in Single-File Components. This uses unique class names for each component and avoids style conflicts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">×</button>\n</template>\n\n<!-- Using CSS modules -->\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.buttonClose {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Binding Fallthrough Attributes in Multi-Root Component Vue HTML\nDESCRIPTION: This example demonstrates how to explicitly bind `$attrs` to a specific element in a multi-root component to resolve the fallthrough attribute warning.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```\n\n----------------------------------------\n\nTITLE: Combining Suspense with Transition, KeepAlive and RouterView\nDESCRIPTION: This HTML snippet shows how to combine `<Suspense>` with `<Transition>`, `<KeepAlive>`, and `<RouterView>` components in Vue.js, ensuring they all work together correctly. The `<RouterView>` uses a slot prop to access the current component, which is then wrapped by `<Transition>`, `<KeepAlive>`, and `<Suspense>`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<RouterView v-slot=\"{ Component }\">\n  <template v-if=\"Component\">\n    <Transition mode=\"out-in\">\n      <KeepAlive>\n        <Suspense>\n          <!-- main content -->\n          <component :is=\"Component\"></component>\n\n          <!-- loading state -->\n          <template #fallback>\n            Loading...\n          </template>\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </template>\n</RouterView>\n```\n\n----------------------------------------\n\nTITLE: Basic Transition CSS\nDESCRIPTION: CSS styles for a basic fade transition. Defines the active and to/from states using `opacity` and `transition` properties. The `v-enter-active` and `v-leave-active` classes specify the duration and easing for the transition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Types with @vue-generic Directive\nDESCRIPTION: This code snippet demonstrates how to pass explicit types to a Vue component using the `@vue-generic` directive. This is useful when the type cannot be inferred automatically. In the example, `ApiSelect` components are used with different data types (`Actor` and `Genre`) that are imported from the '@/api' module.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- @vue-generic {import('@/api').Actor} -->\n  <ApiSelect v-model=\"peopleIds\" endpoint=\"/api/actors\" id-prop=\"actorId\" />\n\n  <!-- @vue-generic {import('@/api').Genre} -->\n  <ApiSelect v-model=\"genreIds\" endpoint=\"/api/genres\" id-prop=\"genreId\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using mounted Hook (Options API)\nDESCRIPTION: This code snippet shows how to use the `mounted` lifecycle hook in the Options API to execute code after the component has been mounted. It is typically used to perform DOM manipulations after initial rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  mounted() {\n    // component is now mounted.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing beforeUnmount Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `beforeUnmount` lifecycle hook, which is called right before a Vue.js component instance is to be unmounted. When this hook is called, the component instance is still fully functional. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  beforeUnmount?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Author Data (Options API)\nDESCRIPTION: This code snippet initializes the author data with a name and an array of books using the Options API in Vue.js.  It defines the `data` property within the component's configuration object, returning an object that includes the author's name and a list of books.  This is used as the initial state for the component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue SFC Example (Composition API)\nDESCRIPTION: This is an example of a Vue Single-File Component using the Composition API. It showcases the `script setup` syntax for a more concise component definition with reactive data and a template section rendering that data, along with component-scoped CSS.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vue Transition Component with CSS Animations in HTML\nDESCRIPTION: This Vue.js component wraps a paragraph element with a v-if directive within a <Transition> component.  The `show` data property controls the visibility of the paragraph, triggering the transition when it changes. This example uses the default transition class naming convention.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition name=\"bounce\">\n  <p v-if=\"show\" style=\"text-align: center;\">\n    Hello here is some bouncy text!\n  </p>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Transition Between Dynamic Components - Vue HTML\nDESCRIPTION: This snippet demonstrates how to use the `<Transition>` component to animate transitions between dynamic components in Vue. The `mode=\"out-in\"` ensures that the exiting component is fully transitioned out before the entering component is transitioned in.  The `activeComponent` prop determines which component is rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<Transition name=\"fade\" mode=\"out-in\">\n  <component :is=\"activeComponent\"></component>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Attribute Binding Escaping in Vue.js\nDESCRIPTION: This example demonstrates how Vue automatically escapes dynamic attribute bindings to prevent HTML injection. The user-provided string containing an `onclick` attribute is escaped, preventing the execution of JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Rendering Built-in Components by Name in Vue\nDESCRIPTION: Demonstrates how to register and use built-in components like `Transition` and `TransitionGroup` with the `<component>` tag. The `is` prop is bound to the component name, which necessitates registration in the `components` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { Transition, TransitionGroup } from 'vue'\n\nexport default {\n  components: {\n    Transition,\n    TransitionGroup\n  }\n}\n</script>\n\n<template>\n  <component :is=\"isGroup ? 'TransitionGroup' : 'Transition'\">\n    ...\n  </component>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Deep Selectors Compiled - CSS\nDESCRIPTION: Shows the compiled output of the deep selector example, demonstrating how the `:deep()` pseudo-class is transformed to target elements without the scoping attribute.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.a[data-v-f3f3eg9] .b {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Readonly Computed Property in Vue.js\nDESCRIPTION: This example shows how to define a read-only computed property in a Vue.js component. The computed property `aDouble` returns the value of `this.a` multiplied by 2. Computed properties are cached and only re-evaluated when their dependencies change.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return { a: 1 }\n  },\n  computed: {\n    // readonly\n    aDouble() {\n      return this.a * 2\n    },\n    // writable\n    aPlus: {\n      get() {\n        return this.a + 1\n      },\n      set(v) {\n        this.a = v - 1\n      }\n    }\n  },\n  created() {\n    console.log(this.aDouble) // => 2\n    console.log(this.aPlus) // => 2\n\n    this.aPlus = 3\n    console.log(this.a) // => 2\n    console.log(this.aDouble) // => 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Directive with Script Setup (Composition API) Vue\nDESCRIPTION: Defines a custom directive `vHighlight` within a `<script setup>` block. This directive adds the class `is-highlight` to the element it is bound to when the element is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nconst vHighlight = {\n  mounted: el => {\n    el.classList.add('is-highlight')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provide Option: Basic Usage (Vue.js)\nDESCRIPTION: Demonstrates the basic usage of the `provide` option in Vue.js to provide values that can be injected by descendant components. It uses both a string key and a Symbol key for providing values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst s = Symbol()\n\nexport default {\n  provide: {\n    foo: 'foo',\n    [s]: 'bar'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Transition - Vue HTML\nDESCRIPTION: This example uses the `<Transition>` component with a dynamic component (`<component :is=\"view\">`). It also specifies a `name` for CSS class generation, sets the `mode` to `out-in` for a specific transition order, and uses `appear` to animate on initial render.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition name=\"fade\" mode=\"out-in\" appear>\n  <component :is=\"view\"></component>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Accessing SSR Context in Vue Component\nDESCRIPTION: This snippet demonstrates how to access the SSR context within a Vue component using the `useSSRContext` composable. It checks if the code is running during server-side rendering (SSR) using `import.meta.env.SSR` and then retrieves the context object. This allows components to attach information to the context, such as head metadata.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useSSRContext } from 'vue'\n\n// make sure to only call it during SSR\n// https://vitejs.dev/guide/ssr.html#conditional-logic\nif (import.meta.env.SSR) {\n  const ctx = useSSRContext()\n  // ...attach properties to the context\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Object Syntax for Style Binding in Vue.js\nDESCRIPTION: This demonstrates using object syntax with style bindings to restrict which style properties users can control. By limiting the allowed properties, the risk of clickjacking can be reduced. Sanitizing URLs is also crucial.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>\n```\n\n----------------------------------------\n\nTITLE: Integrating Immer with Vue (JavaScript)\nDESCRIPTION: This JavaScript code provides a composable function `useImmer` that integrates Immer with Vue. It uses a shallow ref to hold the immutable state and the `produce` function from Immer to update the state immutably. This composable returns the state and an update function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { produce } from 'immer'\nimport { shallowRef } from 'vue'\n\nexport function useImmer(baseState) {\n  const state = shallowRef(baseState)\n  const update = (updater) => {\n    state.value = produce(state.value, updater)\n  }\n\n  return [state, update]\n}\n```\n\n----------------------------------------\n\nTITLE: Component Options Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$options` property, which exposes the resolved component options used for instantiating the current component instance. It's the merge result of global mixins, component `extends` base, and component mixins.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $options: ComponentOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Self-closing Vue Components in SFC and JSX\nDESCRIPTION: This vue-html snippet illustrates the correct way to use self-closing tags for Vue components that have no content within Single-File Components (SFCs), string templates, and JSX. It uses the self-closing tag syntax `/>` for components like `<MyComponent/>` in these contexts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In Single-File Components, string templates, and JSX -->\n<MyComponent/>\n```\n\n----------------------------------------\n\nTITLE: Reactive Count Initialization (Composition API)\nDESCRIPTION: Defines a reactive variable `count` using Vue's Composition API's `ref` function. This variable is initialized to 0 and can be used to track the number of times an event is triggered. This snippet is part of a larger example showcasing event handling with inline handlers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App (Options API)\nDESCRIPTION: This snippet demonstrates how to initialize a Vue application using the Options API. It creates a new Vue app instance, defines a reactive `count` data property, and mounts the app to an HTML element with the ID 'app'.\n\nDependencies: vue\nInput: None\nOutput: A Vue application instance mounted to the DOM.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Reusing Components Vue-HTML\nDESCRIPTION: Demonstrates the reusability of components by displaying the ButtonCounter component multiple times.  Each instance of the component maintains its own independent state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />\n```\n\n----------------------------------------\n\nTITLE: Input Binding for Number Animation (Vue)\nDESCRIPTION: This Vue HTML snippet includes an input field bound to the `number` data property and displays the animated number (`tweened.number`) formatted to zero decimal places.  It utilizes `v-model.number` to ensure input is treated as a number.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.number.toFixed(0) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component Setup with Error Highlighting\nDESCRIPTION: This Vue.js component uses the Composition API to manage error highlighting based on the URL hash. It imports necessary modules from Vue and a data file containing error information, then utilizes `ref` to create a reactive variable `highlight` and `onMounted` to set the `highlight` value based on the URL hash after the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/error-reference/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from 'vue'\nimport { data } from './errors.data.ts'\nimport ErrorsTable from './ErrorsTable.vue'\n\nconst highlight = ref()\nonMounted(() => {\n  highlight.value = location.hash.slice(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Optional Injection (Vue.js)\nDESCRIPTION: Demonstrates how to make an injected dependency optional by providing a default value using the object syntax for the `inject` option in Vue.js.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = {\n  inject: {\n    foo: { default: 'foo' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Props in setup()\nDESCRIPTION: Illustrates how to access props within the `setup()` function in a Vue.js component. It highlights that props are reactive and updated when new props are passed in, and recommends accessing props as `props.xxx` to maintain reactivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Watcher in Composition API (Vue.js)\nDESCRIPTION: This code demonstrates how to create an eager watcher in Vue.js using the Composition API.  The `immediate: true` option ensures that the callback is executed immediately.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // executed immediately, then again when `source` changes\n  },\n  { immediate: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Watch Option Interface Definition TypeScript\nDESCRIPTION: Defines the TypeScript interface for the `watch` option in Vue.js component options, including different types for watch callbacks and associated options like immediate, deep, and flush.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  watch?: {\n    [key: string]: WatchOptionItem | WatchOptionItem[]\n  }\n}\n\ntype WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype ObjectWatchOptionItem = {\n  handler: WatchCallback | string\n  immediate?: boolean // default: false\n  deep?: boolean // default: false\n  flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping in Templates (Not Top-Level Property)\nDESCRIPTION: Illustrates that ref unwrapping does not apply if the ref is not a top-level property in the template render context. `object.id` is not unwrapped and remains a ref object, requiring explicit unwrapping or destructuring.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ object.id + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Reducing Reactivity Overhead with shallowRef\nDESCRIPTION: Demonstrates how to use `shallowRef()` to opt-out of deep reactivity for large immutable structures. Updates to nested properties won't trigger reactivity unless the root state is replaced.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shallowArray = shallowRef([\n  /* big list of deep objects */\n])\n\n// this won't trigger updates...\nshallowArray.value.push(newObject)\n// this does:\nshallowArray.value = [...shallowArray.value, newObject]\n\n// this won't trigger updates...\nshallowArray.value[0].foo = 1\n// this does:\nshallowArray.value = [\n  {\n    ...shallowArray.value[0],\n    foo: 1\n  },\n  ...shallowArray.value.slice(1)\n]\n```\n\n----------------------------------------\n\nTITLE: useModel() Type Definition - TypeScript\nDESCRIPTION: Defines the type definitions for the `useModel()` function and related types `DefineModelOptions` and `ModelRef`. `useModel()` is a helper function underlying `defineModel()` and is available in Vue 3.4+. It allows for creating a two-way binding ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n  ): ModelRef\n\n  type DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n  }\n\n  type ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n  ]\n```\n\n----------------------------------------\n\nTITLE: Transition with Event Listener - Vue HTML\nDESCRIPTION: This example demonstrates how to listen to transition events, specifically the `@after-enter` event. When the transition completes after entering, the `onTransitionComplete` method will be called.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition @after-enter=\"onTransitionComplete\">\n  <div v-show=\"ok\">toggled content</div>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Directive (Object Directive)\nDESCRIPTION: Demonstrates registering a global custom directive using app.directive() with an object-based directive definition. It creates a Vue application instance and registers a directive named 'myDirective' with a configuration object containing custom directive hooks. This enables custom DOM manipulation and logic during the component lifecycle.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Script Setup Syntax Vue\nDESCRIPTION: Demonstrates the basic syntax for using `<script setup>` in a Vue Single-File Component (SFC).  The `setup` attribute is added to the `<script>` block to enable the syntax, where code inside is compiled as the content of the component's `setup()` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconsole.log('hello script setup')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Value Assignment\nDESCRIPTION: Illustrates assigning string values of 'a' to the `picked` property when a radio button is checked and boolean values of true or false to the `toggle` property when a checkbox is checked. Also demonstrates assigning string values to a `selected` property when selecting the first option in a select element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_23\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- `picked` is a string \"a\" when checked -->\n<input type=\"radio\" v-model=\"picked\" value=\"a\" />\n\n<!-- `toggle` is either true or false -->\n<input type=\"checkbox\" v-model=\"toggle\" />\n\n<!-- `selected` is a string \"abc\" when the first option is selected -->\n<select v-model=\"selected\">\n  <option value=\"abc\">ABC</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Event Handler Definition (Composition API)\nDESCRIPTION: Defines a `warn` method that receives both a `message` string and an `event` object. The method prevents the default behavior of the event if an event object is provided, and then displays an alert with the provided message. It uses Vue's Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Import Transition Component in Render Function - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the `Transition` component from Vue.js for use within a render function. It's necessary to explicitly import built-in components when using render functions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Posts Array in Composition API\nDESCRIPTION: This snippet demonstrates how to define an array of posts using `ref` in a Vue component using the Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst posts = ref([\n  { id: 1, title: 'My journey with Vue' },\n  { id: 2, title: 'Blogging with Vue' },\n  { id: 3, title: 'Why Vue is so fun' }\n])\n```\n\n----------------------------------------\n\nTITLE: Custom Element Usage in HTML\nDESCRIPTION: Example of how the custom element defined with Vue is used inside HTML. This shows the HTML tag that will be used to render the Vue component as a custom element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_5\n\nLANGUAGE: Vue HTML\nCODE:\n```\n<my-vue-element></my-vue-element>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props with toRefs()\nDESCRIPTION: Shows how to destructure props while retaining reactivity using `toRefs()` and `toRef()` utility APIs.  `toRefs` converts the props object into an object of refs, while `toRef` converts a single prop into a ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Emit Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the `$emit` method for triggering custom events on the current component instance. It takes an event name and any number of additional arguments to be passed to the listener's callback function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $emit(event: string, ...args: any[]): void\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Vue Project with bun\nDESCRIPTION: This command utilizes bun to execute the create-vue scaffolding tool. It creates a new Vue project, utilizing bun as the package manager, offering an alternative to npm, yarn, or pnpm.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ bun create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Stopping a Watcher in Vue.js\nDESCRIPTION: Shows how to stop a watcher created with `watchEffect()` using the handle function returned by `watchEffect()`. Calling the handle function prevents the effect from running again.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst stop = watchEffect(() => {})\n\n// when the watcher is no longer needed:\nstop()\n```\n\n----------------------------------------\n\nTITLE: Binding Click Event with Ctrl Modifier in Vue.js\nDESCRIPTION: This example illustrates binding the `onClick` method to a button's click event when the Ctrl key is pressed (and potentially other modifiers). It also demonstrates binding the `onCtrlClick` method to the click event, but only when the Ctrl key is pressed and no other modifier keys are active, using the `.exact` modifier.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Built-in Components - Options API - JavaScript\nDESCRIPTION: This snippet demonstrates importing and rendering built-in components like `Transition` using the Options API and the `h()` function. These components need to be explicitly imported to be used.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, KeepAlive, Teleport, Transition, TransitionGroup } from 'vue'\n\nexport default {\n  render () {\n    return h(Transition, { mode: 'out-in' }, /* ... */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating List using push() - Composition API\nDESCRIPTION: This JavaScript code demonstrates how to update a list in Vue.js Composition API by using the `push()` method to add a new item (`newTodo`) to the `todos` array.  `todos` is assumed to be a `ref` object, hence the `.value` access.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntodos.value.push(newTodo)\n```\n\n----------------------------------------\n\nTITLE: Declaring Methods to Mutate ref - Composition API - JavaScript\nDESCRIPTION: Illustrates declaring a function within the `setup()` function to mutate a `ref` and exposing the function as a method.  The `.value` property is needed within the JavaScript function to modify the ref. The function then needs to be returned to be used within the template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    function increment() {\n      // .value is needed in JavaScript\n      count.value++\n    }\n\n    // don't forget to expose the function as well.\n    return {\n      count,\n      increment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering User-Provided HTML with innerHTML in Render Function\nDESCRIPTION: This example shows how to render user-provided HTML using the `innerHTML` property within a render function. It's crucial to ensure the HTML is safe before rendering it this way, as unsanitized HTML can lead to XSS attacks.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nh('div', {\n  innerHTML: this.userProvidedHtml\n})\n```\n\n----------------------------------------\n\nTITLE: v-if and v-for with <template> (Correct)\nDESCRIPTION: This code snippet shows the correct usage of `v-if` and `v-for` by placing the `v-for` on a wrapping `<template>` tag. This allows the `v-if` condition to access variables from the `v-for` scope.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: effectScope() Example in Vue.js\nDESCRIPTION: Shows how to create and use an `effectScope()` to manage reactive effects like `computed` and `watch`. It includes creating a scope, running effects within the scope, and stopping the scope to dispose of all effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst scope = effectScope()\n\nscope.run(() => {\n  const doubled = computed(() => counter.value * 2)\n\n  watch(doubled, () => console.log(doubled.value))\n\n  watchEffect(() => console.log('Count: ', doubled.value))\n})\n\n// to dispose all effects in the scope\nscope.stop()\n```\n\n----------------------------------------\n\nTITLE: v-memo Directive in Vue.js\nDESCRIPTION: Explains how v-memo memoizes a sub-tree of the template based on a dependency array.  If the values in the array haven't changed since the last render, updates to the sub-tree are skipped, improving performance, especially in large v-for lists.  Correct dependency specification is critical.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-memo=\"[valueA, valueB]\">\n  ...\n</div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-for=\"item in list\" :key=\"item.id\" v-memo=\"[item.id === selected]\">\n  <p>ID: {{ item.id }} - selected: {{ item.id === selected }}</p>\n  <p>...more child nodes</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Style Binding in Vue.js Templates\nDESCRIPTION: This code snippet demonstrates how to use dynamic style bindings in Vue.js templates. User-provided styles can create a security risk by allowing malicious users to perform clickjacking or inject custom styles. Sanitize styles or restrict user input.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\n----------------------------------------\n\nTITLE: Augmenting TSX Props in Vue.js\nDESCRIPTION: Shows how to augment allowed TSX props using `ComponentCustomProps` to enable the usage of non-declared props on TSX elements. This is particularly useful when working with third-party components or libraries that might not have complete type definitions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'vue' {\n  interface ComponentCustomProps {\n    hello?: string\n  }\n}\n\nexport {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// now works even if hello is not a declared prop\n<MyComponent hello=\"world\" />\n```\n\n----------------------------------------\n\nTITLE: Typing Generic Component Template Refs with ComponentExposed in Vue.js\nDESCRIPTION: This code demonstrates how to type template refs for generic components using `ComponentExposed` from the `vue-component-type-helpers` library. It is required because `InstanceType` doesn't work for generic components. It imports `useTemplateRef` from vue, `MyGenericModal` component, and `ComponentExposed` from `vue-component-type-helpers`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport MyGenericModal from './MyGenericModal.vue'\nimport type { ComponentExposed } from 'vue-component-type-helpers'\n\nconst modal = useTemplateRef<ComponentExposed<typeof MyGenericModal>>('modal')\n\nconst openModal = () => {\n  modal.value?.open('newValue')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with JSX\nDESCRIPTION: This code snippet demonstrates how to render Vue components using JSX. It imports `Foo` and `Bar` components and renders them within a `div` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_19\n\nLANGUAGE: JSX\nCODE:\n```\nfunction render() {\n  return (\n    <div>\n      <Foo />\n      <Bar />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Chained Global Component Registration in Vue.js\nDESCRIPTION: Illustrates how to chain the `.component()` method to register multiple components globally in a concise manner. This approach allows for registering several components in a single statement.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)\n```\n\n----------------------------------------\n\nTITLE: Functional Component Render Function - JavaScript\nDESCRIPTION: Demonstrates how to define a simple functional component using a render function. These are ideal for stateless, UI-focused components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction Hello() {\n  return 'hello world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Self-Closing Tag Example in Vue (In-DOM)\nDESCRIPTION: Illustrates the problem that occurs when using a self-closing tag for a component in in-DOM templates. The browser incorrectly interprets the subsequent element as content within the component, leading to unexpected rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_33\n\nLANGUAGE: vue-html\nCODE:\n```\n<my-component /> <!-- we intend to close the tag here... -->\n<span>hello</span>\n```\n\n----------------------------------------\n\nTITLE: Writable Computed Property with Previous Value (Options API)\nDESCRIPTION: This code snippet demonstrates a writable computed property where the getter accesses the previous value and the setter updates the state. It's implemented using the Options API in Vue.js.  The getter returns the current count if it's less than or equal to 3, otherwise it returns the previous value. The setter updates the count by multiplying the new value by 2.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting isCustomElement Compiler Option in Vue.js\nDESCRIPTION: This example demonstrates setting the `isCustomElement` compiler option to recognize native custom elements. The function should return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Dynamic v-bind Argument\nDESCRIPTION: Demonstrates how to use a JavaScript expression to dynamically determine the attribute bound by v-bind. The attribute name is determined by the value of `attributeName`. A shorthand notation is also shown. Requires a Vue component instance with a data property `attributeName`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<a v-bind:[attributeName]=\"url\"> ... </a>\n\n<!-- shorthand -->\n<a :[attributeName]=\"url\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Computed Property with New Object Creation\nDESCRIPTION: Shows a scenario where a computed property creates a new object on each compute, leading to unnecessary effect triggers because Vue.js considers the new value always different from the old one.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Angular-style Signals in Vue\nDESCRIPTION: This code snippet demonstrates how to create Angular-style signals in Vue using `shallowRef`. It exports a `signal` function that returns a function which acts as a getter and also has `set` and `update` methods for modifying the reactive value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { shallowRef } from 'vue'\n\nexport function signal(initialValue) {\n  const r = shallowRef(initialValue)\n  const s = () => r.value\n  s.set = (value) => {\n    r.value = value\n  }\n  s.update = (updater) => {\n    r.value = updater(r.value)\n  }\n  return s\n}\n```\n\n----------------------------------------\n\nTITLE: Prop Name Casing in defineProps (Composition API)\nDESCRIPTION: Example of prop name casing using defineProps in Composition API. The 'greetingMessage' is declared as a camelCase prop.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  greetingMessage: String\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Slots to Components - JSX\nDESCRIPTION: This code shows how to pass slots to a component using JSX. It demonstrates passing both a single default slot and named slots as functions within an object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_27\n\nLANGUAGE: JSX\nCODE:\n```\n// default\n<MyComponent>{() => 'hello'}</MyComponent>\n\n// named\n<MyComponent>{{\n  default: () => 'default slot',\n  foo: () => <div>foo</div>,\n  bar: () => [<span>one</span>, <span>two</span>]\n}}</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Add Test Script to Package.json\nDESCRIPTION: This code snippet adds a test script to the `package.json` file, allowing you to run Vitest tests using the command `npm test`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Values with toValue in Vue.js Composables\nDESCRIPTION: This code snippet illustrates the use of `toValue()` within a composable function to normalize input arguments. `toValue()` converts refs and getters into their corresponding values, ensuring consistent handling of different input types. This approach promotes flexibility and allows composables to accept various forms of input data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  // If maybeRefOrGetter is a ref or a getter,\n  // its normalized value will be returned.\n  // Otherwise, it is returned as-is.\n  const value = toValue(maybeRefOrGetter)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Refs with Options API\nDESCRIPTION: Demonstrates how to access template refs using the Options API.  It accesses the referenced DOM element through `this.$refs` in the `mounted` lifecycle hook, focusing the input element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Conditional Class in Array (Vue)\nDESCRIPTION: Uses a ternary expression within an array binding for the `class` attribute.  This allows conditionally applying a class based on a truthy value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing mounted Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `mounted` lifecycle hook, which is called after a Vue.js component has been mounted. The component is considered mounted when all synchronous child components have been mounted and its DOM tree has been created and inserted into the parent container. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  mounted?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Create Custom Element Type Helper in TypeScript\nDESCRIPTION: Creates a TypeScript type helper, `DefineCustomElement`, for registering custom element type definitions in Vue. It defines the `$props` and `$emit` properties for template type checking.  The `$props` type combines the element's props with global HTML props and Vue's special props. The `$emit` type is used to specifically define event types.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// file: some-lib/src/DefineCustomElement.ts\n\n// We can re-use this type helper per each element we need to define.\ntype DefineCustomElement<\n  ElementType extends HTMLElement,\n  Events extends EventMap = {},\n  SelectedAttributes extends keyof ElementType = keyof ElementType\n> = new () => ElementType & {\n  // Use $props to define the properties exposed to template type checking. Vue\n  // specifically reads prop definitions from the `$props` type. Note that we\n  // combine the element's props with the global HTML props and Vue's special\n  // props.\n  /** @deprecated Do not use the $props property on a Custom Element ref, \n    this is for template prop types only. */\n  $props: HTMLAttributes &\n    Partial<Pick<ElementType, SelectedAttributes>> &\n    PublicProps\n\n  // Use $emit to specifically define event types. Vue specifically reads event\n  // types from the `$emit` type. Note that `$emit` expects a particular format\n  // that we map `Events` to.\n  /** @deprecated Do not use the $emit property on a Custom Element ref, \n    this is for template prop types only. */\n  $emit: VueEmit<Events>\n}\n\ntype EventMap = {\n  [event: string]: Event\n}\n\n// This maps an EventMap to the format that Vue's $emit type expects.\ntype VueEmit<T extends EventMap> = EmitFn<{  [K in keyof T]: (event: T[K]) => void\n}>\n```\n\n----------------------------------------\n\nTITLE: isActive and hasError data properties (Options API)\nDESCRIPTION: Defines data properties within Vue's Options API to manage the 'active' and 'hasError' states. These properties are used to conditionally apply CSS classes to a DOM element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    isActive: true,\n    hasError: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Modifiers - Render Function - JavaScript\nDESCRIPTION: Shows how to use event modifiers like `.capture`, `.once` and `.passive` within render functions. Modifiers are concatenated to the event name in camelCase.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nh('input', {\n  onClickCapture() {\n    /* listener in capture mode */\n  },\n  onKeyupOnce() {\n    /* triggers only once */\n  },\n  onMouseoverOnceCapture() {\n    /* once + capture */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Transitions for Move Animations in Lists\nDESCRIPTION: This CSS snippet extends the previous example to include move transitions, making the list items move smoothly when their order changes. It also addresses layout issues by positioning leaving items absolutely.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.list-move, /* apply transition to moving elements */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n/* ensure leaving items are taken out of layout flow so that moving\n   animations can be calculated correctly. */\n.list-leave-active {\n  position: absolute;\n}\n```\n\n----------------------------------------\n\nTITLE: Usage of normal <script> alongside <script setup> in Vue\nDESCRIPTION: This code demonstrates the use of a normal `<script>` tag alongside `<script setup>`. A normal `<script>` is required for declaring options that cannot be expressed in `<script setup>`, declaring named exports, and running side effects that should only execute once.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// normal <script>, executed in module scope (only once)\nrunSideEffectOnce()\n\n// declare additional options\nexport default {\n  inheritAttrs: false,\n  customOptions: {}\n}\n</script>\n\n<script setup>\n// executed in setup() scope (for each instance)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Function Refs\nDESCRIPTION: Demonstrates the usage of function refs, where the `ref` attribute is bound to a function. This function is called on each component update, providing the element reference as the first argument, allowing for flexible storage of the reference.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n\n----------------------------------------\n\nTITLE: Dynamic Directive Argument HTML\nDESCRIPTION: Demonstrates the usage of a dynamic argument in a custom directive.  The argument passed to the directive will be dynamically updated based on the `arg` property in the component's state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-example:[arg]=\"value\"></div>\n```\n\n----------------------------------------\n\nTITLE: Global Selectors in Scoped CSS - Vue\nDESCRIPTION: Illustrates how to use the `:global` pseudo-class to apply a CSS rule globally, bypassing the scoping mechanism. This is useful for applying styles to elements outside the component's scope.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n:global(.red) {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating List using filter() - Options API\nDESCRIPTION: This JavaScript code demonstrates how to update a list in Vue.js Options API by replacing the original array with a new filtered array. The `filter()` method is used to create the new array, and `this.todos` assumes that `todos` is defined in the `data` property of the Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nthis.todos = this.todos.filter(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Providing Read-Only Data in Vue (Composition API)\nDESCRIPTION: This snippet demonstrates providing read-only reactive data using the `readonly` function in Vue.js Composition API.  It provides a `count` ref wrapped in `readonly` to prevent mutation by the injecting component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, provide, readonly } from 'vue'\n\nconst count = ref(0)\nprovide('read-only-count', readonly(count))\n</script>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Include Regex\nDESCRIPTION: Shows how to use the `include` prop with a regular expression to define which components should be cached by `<KeepAlive>`. The regular expression is bound using `v-bind`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Exporting Vue Custom Elements\nDESCRIPTION: This JavaScript snippet demonstrates how to export individual Vue custom elements and a registration function for convenient use in other applications. It utilizes `defineCustomElement` from Vue to convert Vue components into custom elements and then exports them along with a function to register them with the browser's `customElements` API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// elements.js\n\nimport { defineCustomElement } from 'vue'\nimport Foo from './MyFoo.ce.vue'\nimport Bar from './MyBar.ce.vue'\n\nconst MyFoo = defineCustomElement(Foo)\nconst MyBar = defineCustomElement(Bar)\n\n// export individual elements\nexport { MyFoo, MyBar }\n\nexport function register() {\n  customElements.define('my-foo', MyFoo)\n  customElements.define('my-bar', MyBar)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Props Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `SlotProps` for the properties that can be passed to a `<slot>` element. It includes properties for scoped slots and a reserved property for the slot name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SlotProps {\n  /**\n   * Any props passed to <slot> to passed as arguments\n   * for scoped slots\n   */\n  [key: string]: any\n  /**\n   * Reserved for specifying slot name.\n   */\n  name?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Template Ref in Composition API in Vue\nDESCRIPTION: This code demonstrates how to use the `ref` attribute in the Composition API with `<script setup>` in Vue.js to create a template reference. The `useTemplateRef` helper is imported and used to bind the ref to the DOM element. The reference will be stored in a ref with matching name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useTemplateRef } from 'vue'\n\nconst pRef = useTemplateRef('p')\n</script>\n\n<template>\n  <p ref=\"p\">hello</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Method for Filtering (Options API)\nDESCRIPTION: Demonstrates how to use a method to filter an array in Vue.js using the Options API. The `even` method filters an array of numbers and returns a new array containing only the even numbers. This is useful when computed properties are not suitable, for instance, within nested `v-for` loops.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering content with v-if and v-else\nDESCRIPTION: This snippet shows how to use `v-if` and `v-else` directives together to render different content based on a condition. A button toggles the value of `awesome`, which controls which h1 element is displayed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>\n```\n\n----------------------------------------\n\nTITLE: KeepAlive with Transition - Vue HTML\nDESCRIPTION: This example demonstrates the combined usage of `<Transition>` and `<KeepAlive>`. The `<KeepAlive>` component caches the dynamic component, and the `<Transition>` component applies transition effects when the component is toggled.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition>\n  <KeepAlive>\n    <component :is=\"view\"></component>\n  </KeepAlive>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Binding to Reactive classObject (Vue)\nDESCRIPTION: Binds the `class` attribute to a reactive `classObject`, dynamically applying classes based on the object's properties. This provides a cleaner way to manage class bindings in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"classObject\"></div>\n```\n\n----------------------------------------\n\nTITLE: Augmenting CSS Properties in Vue.js\nDESCRIPTION: Demonstrates how to augment the `CSSProperties` interface to allow custom CSS properties to be used in style bindings. This enables the use of CSS variables with type checking in Vue templates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'vue' {\n  interface CSSProperties {\n    [key: `--${string}`]: string\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<div style={ { '--bg-color': 'blue' } }>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<div :style=\"{ '--bg-color': 'blue' }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming a Watcher - JavaScript\nDESCRIPTION: Shows how to pause and resume a watcher created with the `watch` function in Vue.js. This feature is available in Vue 3.5+. The pause method temporarily suspends the watcher, while resume reactivates it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stop, pause, resume } = watch(() => {})\n\n// temporarily pause the watcher\npause()\n\n// resume later\nresume()\n\n// stop\nstop()\n```\n\n----------------------------------------\n\nTITLE: Rendering User-Provided HTML with innerHTML in Render Function (JSX)\nDESCRIPTION: This example shows how to render user-provided HTML using the `innerHTML` property within a render function using JSX. Be extremely careful when rendering user-provided HTML and ensure it is properly sanitized to prevent XSS.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile-Time Flags in Vite\nDESCRIPTION: This code snippet demonstrates how to configure compile-time flags in a Vite project using the `define` config option. It enables detailed warnings for hydration mismatches in production builds. This is achieved by setting the `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flag to `'true'`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  define: {\n    // enable hydration mismatch details in production build\n    __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'true'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Scoped Slots - Parent Component - JavaScript\nDESCRIPTION: This code demonstrates rendering a scoped slot in the parent component using the Composition API and the `h()` function. It passes a slot function to the child component that receives data from the child.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n// parent component\nexport default {\n  setup() {\n    return () => h(MyComp, null, {\n      default: ({ text }) => h('p', text)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing content with v-show\nDESCRIPTION: This snippet demonstrates the use of the `v-show` directive to conditionally display an element by toggling its `display` CSS property. The element is always rendered, but its visibility is controlled by the `ok` variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listener with v-on Directive in Vue\nDESCRIPTION: This code demonstrates how to use the `v-on` directive to bind a click event to a button element. When the button is clicked, the `increment` method is called. The component's `count` property is displayed within the button's text.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<button v-on:click=\"increment\">{{ count }}</button>\n```\n\n----------------------------------------\n\nTITLE: Object Syntax in Array Binding (Vue)\nDESCRIPTION: Combines object and array syntax for `class` binding.  This allows conditional application of classes using the object syntax within an array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Component\nDESCRIPTION: Shows how to retrieve a globally registered component using app.component(). It gets the registered component 'MyComponent' and assigns it to a constant named 'MyComponent'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve a registered component\nconst MyComponent = app.component('MyComponent')\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Object with Key and Value in Vue\nDESCRIPTION: This demonstrates iterating through an object's properties with `v-for`, accessing both the value and the key of each property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Using webpack Treeshaking with defineComponent\nDESCRIPTION: This code snippet demonstrates how to mark a `defineComponent` call as side-effect-free to enable webpack treeshaking. Adding the `/*#__PURE__*/` annotation before the function call tells webpack that it's safe to remove this component if it's not used in the application, preventing unnecessary code from being included in the final bundle.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default /*#__PURE__*/ defineComponent(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Rendering Built-in Components - Composition API - JavaScript\nDESCRIPTION: This snippet demonstrates importing and rendering built-in components like `Transition` using the Composition API and the `h()` function. These components need to be explicitly imported to be used.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, KeepAlive, Teleport, Transition, TransitionGroup } from 'vue'\n\nexport default {\n  setup () {\n    return () => h(Transition, { mode: 'out-in' }, /* ... */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Scope and Index in v-for (Options API)\nDESCRIPTION: This code snippet initializes a parent message and an array of items using the Options API, providing data for rendering within a v-for loop that accesses both the item and its index.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useId() Type Definition - TypeScript\nDESCRIPTION: Displays the type definition for the `useId()` function, which is used to generate unique application-wide IDs. This function doesn't take any arguments and returns a string which represents the unique ID.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useId(): string\n```\n\n----------------------------------------\n\nTITLE: Rendering a Range with v-for in Vue\nDESCRIPTION: This snippet shows how to use `v-for` to render a range of numbers. It iterates from 1 to 10 (inclusive) and displays each number within a `<span>` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration with SFC in Vue.js\nDESCRIPTION: Shows how to register a Single-File Component (SFC) globally using the `.component()` method. The component is imported from a `.vue` file and registered with a specified name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Creating Solid-style Signals in Vue\nDESCRIPTION: This code snippet demonstrates how to create Solid-style signals in Vue using `shallowRef` and `triggerRef`. It exports a `createSignal` function that returns a getter and a setter for a reactive value. The setter includes an option to disable equality checks and trigger updates manually.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { shallowRef, triggerRef } from 'vue'\n\nexport function createSignal(value, options) {\n  const r = shallowRef(value)\n  const get = () => r.value\n  const set = (v) => {\n    r.value = typeof v === 'function' ? v(r.value) : v\n    if (options?.equals === false) triggerRef(r)\n  }\n  return [get, set]\n}\n```\n\n----------------------------------------\n\nTITLE: Using nextTick with Options API in Vue\nDESCRIPTION: This code snippet demonstrates how to use `nextTick` within a Vue component using the Options API. It increments a `count` data property and uses `nextTick` to wait for the DOM to update before asserting the updated value. The `await nextTick()` ensures the DOM has been updated before proceeding, demonstrating its usage with async/await in the Options API context.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using v-text Directive in Vue.js\nDESCRIPTION: This snippet demonstrates the usage of the `v-text` directive in Vue.js to update the text content of an element. It sets the `textContent` property of the element, overwriting any existing content. It's equivalent to using mustache interpolation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<span v-text=\"msg\"></span>\n<!-- same as -->\n<span>{{msg}}</span>\n```\n\n----------------------------------------\n\nTITLE: Augmenting Custom Options in Vue.js with TypeScript\nDESCRIPTION: This snippet shows how to augment the `ComponentCustomOptions` interface in Vue.js to support custom component options provided by plugins, such as `beforeRouteEnter` from `vue-router`.  It allows you to properly type the arguments of these custom options, ensuring type safety when using plugins that extend component options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    // ...\n  }\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: Route, from: Route, next: () => void): void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use the filteredTodos in v-for\nDESCRIPTION: This diff snippet shows how to replace the original `todos` list with the computed `filteredTodos` property in the `v-for` directive. This will render only the todos that satisfy the filtering logic defined in the `filteredTodos` computed property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <li v-for=\"todo in todos\">\n+ <li v-for=\"todo in filteredTodos\">\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with Slots Vue.js\nDESCRIPTION: This snippet shows the final rendered HTML after using the `<FancyButton>` component with the slot content \"Click me!\".  The content has been inserted into the location of the slot, and the element has the `fancy-btn` class.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"fancy-btn\">Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Posts Array in Options API\nDESCRIPTION: This snippet demonstrates how to define an array of posts in the data property of a Vue component using the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // ...\n  data() {\n    return {\n      posts: [\n        { id: 1, title: 'My journey with Vue' },\n        { id: 2, title: 'Blogging with Vue' },\n        { id: 3, title: 'Why Vue is so fun' }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Component with Props and Setup\nDESCRIPTION: Illustrates using `defineComponent()` with the `setup()` function to enable type inference for props in Vue.js when using the Composition API. This example demonstrates how to define props and access them within the `setup()` function, with TypeScript providing type checking for the props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using mounted in createApp (Options API)\nDESCRIPTION: This snippet demonstrates using the `mounted` lifecycle hook within a `createApp` instance in the Options API to execute code after the component has been fully mounted within the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ncreateApp({\n  mounted() {\n    // component is now mounted.\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Definitions\nDESCRIPTION: This CSS defines the animation applied to the element during the enter and leave transitions.  It uses the `animation` property to apply a keyframe animation named `bounce-in` with a duration of 0.5 seconds. The `reverse` keyword is used for the leave animation to play the animation in reverse.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.bounce-enter-active {\n  animation: bounce-in 0.5s;\n}\n.bounce-leave-active {\n  animation: bounce-in 0.5s reverse;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.25);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fallthrough Attributes in Template Vue HTML\nDESCRIPTION: This shows how to access fallthrough attributes in a component's template using `$attrs`. This allows you to manually bind the attributes to specific elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\n----------------------------------------\n\nTITLE: Vue onServerPrefetch() Example\nDESCRIPTION: Demonstrates the usage of onServerPrefetch within a Vue component. It fetches data on the server using `fetchOnServer` and assigns it to a ref. If the component is dynamically rendered on the client, it fetches data using `fetchOnClient` in the `onMounted` hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n  // component is rendered as part of the initial request\n  // pre-fetch data on server as it is faster than on the client\n  data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n  if (!data.value) {\n    // if data is null on mount, it means the component\n    // is dynamically rendered on the client. Perform a\n    // client-side fetch instead.\n    data.value = await fetchOnClient(/* ... */)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component Props Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$props` property on a Vue component instance.  It holds the resolved props declared using the `props` option. The component instance proxies access to properties on this props object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $props: object\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating ref in Event Handlers - Composition API - HTML\nDESCRIPTION: Demonstrates mutating a `ref` directly in an event handler within a Vue template. This showcases how to directly modify the ref's value in response to user interactions.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_6\n\nLANGUAGE: Vue\nCODE:\n```\n<button @click=\"count++\">\n  {{ count }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Function Shorthand Directive Definition JavaScript\nDESCRIPTION: Defines a custom directive using the function shorthand, which combines the `mounted` and `updated` hooks into a single function.  This example sets the color style of the element to the value passed to the directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napp.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})\n```\n\n----------------------------------------\n\nTITLE: Vue.js v-on Modifier Example\nDESCRIPTION: Demonstrates the use of the `.prevent` modifier on the `v-on` directive. This modifier calls `event.preventDefault()` on the triggered event, preventing the default form submission behavior.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<form @submit.prevent=\"onSubmit\">...</form>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expressions in Vue Templates\nDESCRIPTION: This snippet demonstrates the usage of JavaScript expressions within Vue templates. It showcases basic arithmetic operations, ternary operators, string manipulation, and template literals. Expressions are evaluated in the context of the component instance, allowing dynamic rendering of data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\n----------------------------------------\n\nTITLE: Providing with Symbol Key (Options API)\nDESCRIPTION: This snippet demonstrates providing data using a Symbol injection key within the Options API.  It defines the provide option as a function that returns an object, using the Symbol key as a property name.  This ensures type safety and avoids naming conflicts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// in provider component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  provide() {\n    return {\n      [myInjectionKey]: {\n        /* data to provide */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async setup() Hook\nDESCRIPTION: This JavaScript snippet demonstrates how to define an async setup() hook in a Vue.js component. The component fetches data asynchronously and returns it to be used in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  async setup() {\n    const res = await fetch(...)\n    const posts = await res.json()\n    return {\n      posts\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Style Binding (Vue)\nDESCRIPTION: This Vue HTML snippet uses event binding (@mousemove) to call the `onMousemove` method and updates the background color of the div based on the `x` value, creating a state-driven animation effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<div\n  @mousemove=\"onMousemove\"\n  :style=\"{ backgroundColor: `hsl(${x}, 80%, 50%)` }\"\n  class=\"movearea\"\n>\n  <p>Move your mouse across this div...</p>\n  <p>x: {{ x }}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Directives - JavaScript\nDESCRIPTION: This code demonstrates how to apply custom directives to a vnode using the `withDirectives` helper function and the `h()` function. It showcases creating a custom directive and applying it with arguments and modifiers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n  mounted() { /* ... */ },\n  updated() { /* ... */ }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n  [pin, 200, 'top', { animate: true }]\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing unmounted Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `unmounted` lifecycle hook, which is called after a Vue.js component has been unmounted. Use this hook to clean up manually created side effects such as timers, DOM event listeners, or server connections. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  unmounted?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Ref on Component (Options API)\nDESCRIPTION: Illustrates how to use `ref` on a child component using the Options API. In the `mounted` hook, `this.$refs.child` is used to access the child component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport Child from './Child.vue'\n\nexport default {\n  components: {\n    Child\n  },\n  mounted() {\n    // this.$refs.child will hold an instance of <Child />\n  }\n}\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Computed Property Stability Example in Vue.js\nDESCRIPTION: Demonstrates how a computed property in Vue.js 3.4+ triggers effects only when its computed value changes. The example uses a ref to track a count and a computed property to determine if the count is even.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4\n```\n\n----------------------------------------\n\nTITLE: Data Example - Composition API - Javascript\nDESCRIPTION: Illustrates a data structure using ref representing a list of todos, used to exemplify the importance of using keys in v-for directives. This snippet is provided for context in Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst todos = ref([\n  {\n    id: 1,\n    text: 'Learn to use v-for'\n  },\n  {\n    id: 2,\n    text: 'Learn to use key'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Use detailed prop definitions - Good Example - Javascript - Composition API\nDESCRIPTION: Demonstrates a good practice of defining props with detailed configurations using the Composition API. It includes type validation and a custom validator to ensure prop values are correct.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps({\n  status: String\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Even better!\n\nconst props = defineProps({\n  status: {\n    type: String,\n    required: true,\n\n    validator: (value) => {\n      return ['syncing', 'synced', 'version-conflict', 'error'].includes(\n        value\n      )\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type signature for provide() in TypeScript\nDESCRIPTION: Shows the TypeScript type signature for the `provide()` function in Vue.js Composition API. It takes a key (string or InjectionKey<T>) and a value of type T as arguments and returns void.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction provide<T>(key: InjectionKey<T> | string, value: T): void\n```\n\n----------------------------------------\n\nTITLE: Importing $ref macro from vue/macros\nDESCRIPTION: This snippet shows how to explicitly import the `$ref` macro from the `vue/macros` module. This is optional, as the macros are globally available when Reactivity Transform is enabled. However, explicit import provides better code clarity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { $ref } from 'vue/macros'\n\nlet count = $ref(0)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Application Instances in JavaScript\nDESCRIPTION: This code shows how to create and mount multiple Vue application instances on the same page. Each instance is created using `createApp` and mounted to a different container element, allowing them to operate independently.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\n----------------------------------------\n\nTITLE: Using v-else Directive with v-if in Vue.js\nDESCRIPTION: This snippet illustrates the usage of the `v-else` directive in conjunction with `v-if` in Vue.js for conditional rendering.  The `v-else` block is rendered if the `v-if` condition is falsy. The previous sibling element must have a `v-if` or `v-else-if` directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-if=\"Math.random() > 0.5\">\n  Now you see me\n</div>\n<div v-else>\n  Now you don't\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Content for a Slot\nDESCRIPTION: This code snippet demonstrates how to define fallback content for a slot. If the parent component does not provide any slot content, the fallback content within the `<slot>` element will be displayed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<slot>Fallback content</slot>\n```\n\n----------------------------------------\n\nTITLE: Compiled output of $() destructuring\nDESCRIPTION: This snippet illustrates the compiled output of the previous JavaScript code using the `$()` macro for destructuring.  `toRef` is used to convert the properties from the `useMouse()` return object into refs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRef } from 'vue'\nimport { useMouse } from '@vueuse/core'\n\nconst __temp = useMouse(),\n  x = toRef(__temp, 'x'),\n  y = toRef(__temp, 'y')\n\nconsole.log(x.value, y.value)\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack with vue-loader in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure webpack to use vue-loader for processing `.vue` files. It includes enabling the `reactivityTransform` option.  Requires `vue-loader@>=17.0.0`. It should be placed inside `webpack.config.js` file.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          reactivityTransform: true\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Scoped Slot Props (Vue)\nDESCRIPTION: This example demonstrates how to use destructuring in `v-slot` to directly access specific props passed from the child component to the scoped slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-slot=\"{ text, count }\">\n  {{ text }} {{ count }}\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Injection Default Value (Composition API)\nDESCRIPTION: This shows how to provide a default value for an injected property using Vue.js Composition API.  If the injection key is not provided in the parent chain, the default value will be used.  The second argument to `inject` is the default value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// `value` will be \"default value\"\n// if no data matching \"message\" was provided\nconst value = inject('message', 'default value')\n```\n\n----------------------------------------\n\nTITLE: Import onMounted and Handle Hash Redirects Vue\nDESCRIPTION: This script imports the `onMounted` function from Vue and checks if the code is running in a browser environment. If so, it checks the URL hash and redirects to a different page if the hash matches certain outdated values related to v-model usage. This ensures that users with old links are directed to the correct content.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nif (typeof window !== 'undefined') {\n  const hash = window.location.hash\n\n  // The docs for v-model used to be part of this page. Attempt to redirect outdated links.\n  if ([\n    '#usage-with-v-model',\n    '#v-model-arguments',\n    '#multiple-v-model-bindings',\n    '#handling-v-model-modifiers'\n  ].includes(hash)) {\n    onMounted(() => {\n      window.location = './v-model.html' + hash\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Scoped Slots in FancyList Component\nDESCRIPTION: This code snippet shows how the `FancyList` component renders the scoped slot multiple times for each item in the list. It uses `v-for` to iterate over the `items` array and passes the current item data as slot props to the named slot 'item' using `v-bind`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li v-for=\"item in items\">\n    <slot name=\"item\" v-bind=\"item\"></slot>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: v-for with 'of' Delimiter in Vue Template\nDESCRIPTION: This code snippet demonstrates using `of` as the delimiter in the `v-for` directive, providing a syntax closer to JavaScript iterators.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div v-for=\"item of items\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Application (Imported Component)\nDESCRIPTION: Illustrates creating a Vue application with an imported root component using createApp.  It imports both createApp from 'vue' and a component named 'App' from './App.vue'.  The 'App' component is then passed as the first argument to createApp, creating the application instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n----------------------------------------\n\nTITLE: Apply CSS Class based on Data Binding (Vue)\nDESCRIPTION: This Vue HTML snippet applies the 'shake' CSS class based on the `disabled` data property. When `disabled` is true, the `shake` class is added to the div, triggering the CSS animation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Functional Component Definition - Options API - JavaScript\nDESCRIPTION: This code shows how to define a functional component, where the first argument will be `props` and the second argument is the `context` containing attrs, emit, and slots.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction MyComponent(props, context) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Good Single-File Component Structure - Vue HTML\nDESCRIPTION: Demonstrates the recommended structure for a Vue.js single-file component: `<script>`, `<template>`, then `<style>`. This ensures consistency and readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- ComponentA.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n\n----------------------------------------\n\nTITLE: v-if Equivalent Render Function - JavaScript (Options API)\nDESCRIPTION: Shows the equivalent of the `v-if` directive using a render function with Options API. Uses a ternary operator to conditionally render different vnodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nh('div', [this.ok ? h('div', 'yes') : h('span', 'no')])\n```\n\n----------------------------------------\n\nTITLE: Type Definition of getCurrentScope() in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the `getCurrentScope()` function. It returns the current active EffectScope or undefined if there is none.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getCurrentScope(): EffectScope | undefined\n```\n\n----------------------------------------\n\nTITLE: Typing Event Handlers in Vue\nDESCRIPTION: This example illustrates typing event handlers in Vue components. Without type annotation, the `event` argument implicitly has a type of `any`. It's recommended to explicitly annotate the event handler's argument for type safety and to avoid potential TS errors when `strict` or `noImplicitAny` are enabled.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nfunction handleChange(event) {\n  // `event` implicitly has `any` type\n  console.log(event.target.value)\n}\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Data Binding with v-model in Vue.js\nDESCRIPTION: This snippet demonstrates how to create a two-way data binding on an input element using the `v-model` directive in Vue.js. `v-model` simplifies the process by automatically synchronizing the input's value with the bound state, eliminating the need for an explicit event handler.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-model=\"text\">\n```\n\n----------------------------------------\n\nTITLE: Injecting Plugin Options (Options API) - Vue.js\nDESCRIPTION: Shows how to inject the provided i18n options into a component using the Options API's `inject` property. It specifies 'i18n' in the `inject` array, making the injected options available as `this.i18n` within the component instance, allowing access to the translation data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Content in Parent Component (SFC)\nDESCRIPTION: This code snippet demonstrates how to pass slot content from a parent component to a child component using Vue.js single-file components (SFC). The content between the opening and closing tags of the child component will be rendered in the child's slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<ChildComp>\n  This is some slot content!\n</ChildComp>\n```\n\n----------------------------------------\n\nTITLE: Boolean Attribute Binding with v-bind in Vue\nDESCRIPTION: This code snippet demonstrates how to bind boolean attributes using `v-bind` in Vue. The `disabled` attribute of the `<button>` element is bound to the `isButtonDisabled` property. The attribute will be included if `isButtonDisabled` is truthy; otherwise, it will be omitted. This offers dynamic control over boolean attributes based on component data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Directive Usage with v-if in Vue\nDESCRIPTION: This code demonstrates the usage of the `v-if` directive in Vue.  The `<p>` element will be rendered or removed from the DOM based on the truthiness of the `seen` property.  This provides a way to conditionally render elements based on component data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<p v-if=\"seen\">Now you see me</p>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object for Dynamic Attribute Binding (Composition API)\nDESCRIPTION: This JavaScript snippet defines an object, `objectOfAttrs`, intended for dynamic attribute binding in Vue's Composition API.  It contains attributes like `id`, `class`, and `style` that can be dynamically applied to an HTML element using `v-bind`. This is used in conjunction with the `v-bind` directive without an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Vue Components with Scoped CSS - Good Example\nDESCRIPTION: This code demonstrates the recommended approach of using class selectors within a `<style scoped>` block in a Vue component. This is more performant because Vue only needs to add attributes to elements with the specified class, instead of every element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n\n<style scoped>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with TSX and Generics\nDESCRIPTION: This code snippet shows how to define a Vue component using `defineComponent` with TypeScript, TSX, and generics.  It defines a generic type `T` for the `msg` and `list` props. The component utilizes the Composition API and returns a render function using JSX.  Manual runtime props declaration is needed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Props to a Scoped Slot (Vue)\nDESCRIPTION: This example shows how to pass data from a child component to a slot using attributes on the `<slot>` element. These attributes become available as props within the slot's scope in the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- <MyComponent> template -->\n<div>\n  <slot :text=\"greetingMessage\" :count=\"1\"></slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Piping Vue App to Node.js Writable\nDESCRIPTION: This snippet showcases piping a Vue application's server-side rendered output directly to a Node.js Writable stream (e.g., an HTTP response). It uses `pipeToNodeWritable` from `vue/server-renderer`. `app` should be a Vue application instance, and `res` a Node.js Writable stream.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a Node.js http handler\npipeToNodeWritable(app, {}, res)\n```\n\n----------------------------------------\n\nTITLE: Side Effect Cleanup with Callback Argument (Composition API) - JavaScript\nDESCRIPTION: This example demonstrates passing the cleanup function as the 3rd argument in `watch` and as the 1st argument in `watchEffect`.  This is an alternative approach compatible with older versions of Vue (before 3.5).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(id, (newId, oldId, onCleanup) => {\n  // ...\n  onCleanup(() => {\n    // cleanup logic\n  })\n})\n\nwatchEffect((onCleanup) => {\n  // ...\n  onCleanup(() => {\n    // cleanup logic\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Suspense Component Usage\nDESCRIPTION: This HTML snippet demonstrates how to use nested `<Suspense>` components in Vue.js. It shows a scenario where an inner `<Suspense>` is used to handle async components nested within another async component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <component :is=\"DynamicAsyncInner\" />\n  </component>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Emits Option Array Syntax Example JavaScript\nDESCRIPTION: Demonstrates how to use the `emits` option in Vue.js component with array syntax to declare custom events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  emits: ['check'],\n  created() {\n    this.$emit('check')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Warning Handler in Vue.js\nDESCRIPTION: This snippet shows how to assign a custom handler for runtime warnings from Vue. The handler receives the warning message, the source component instance, and a component trace string. It's useful for filtering out specific warnings during debug sessions in development mode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}\n```\n\n----------------------------------------\n\nTITLE: Object Literals Directive Usage HTML\nDESCRIPTION: Illustrates how to pass an object literal as the value to a custom directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with Visually Hidden Label\nDESCRIPTION: This Vue.js code shows how to visually hide a label while maintaining accessibility using CSS classes.  This is appropriate when the input's purpose is clear from the surrounding context, like a search button.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<form role=\"search\">\n  <label for=\"search\" class=\"hidden-visually\">Search: </label>\n  <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\n  <button type=\"submit\">Search</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Vue Version with Vue and JavaScript\nDESCRIPTION: Fetches the latest Vue version from the GitHub API and updates a reactive reference.  It uses the Vue Composition API's `ref` and `onMounted` functions. It fetches data from the GitHub API, parses the JSON response, and assigns the version name to the `version` ref.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/about/releases.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst version = ref()\n\nonMounted(async () => {\n  const res = await fetch('https://api.github.com/repos/vuejs/core/releases/latest')\n  version.value = (await res.json()).name\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating List using push() - Options API\nDESCRIPTION: This JavaScript code demonstrates how to update a list in Vue.js Options API by using the `push()` method to add a new item (`newTodo`) to the `todos` array.  `this.todos` assumes that `todos` is defined in the `data` property of the Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nthis.todos.push(newTodo)\n```\n\n----------------------------------------\n\nTITLE: Async Component with Custom Hydration Strategy\nDESCRIPTION: This snippet demonstrates how to define and use a custom hydration strategy for an async component, providing fine-grained control over the hydration process.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  // instead of a single element\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Text in Vue.js Template\nDESCRIPTION: This snippet demonstrates how to render dynamic text in a Vue.js template using mustache syntax. It displays the value of the `message` property from the component's data option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1>{{ message }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Template Refs - Composition API (pre 3.5) - JavaScript\nDESCRIPTION: This code snippet shows how to create a template ref using `ref()` in the Composition API, before Vue 3.5. The ref object itself is passed as a prop to the vnode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const divEl = ref()\n\n    // <div ref=\"divEl\">\n    return () => h('div', { ref: divEl })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoid v-if with v-for - Good Example 2 - HTML\nDESCRIPTION: Demonstrates an alternative correct way of using a `template` tag with `v-for` to wrap the element with the conditional rendering using `v-if`. This prevents the error of evaluating `v-if` before `v-for`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <template v-for=\"user in users\" :key=\"user.id\">\n    <li v-if=\"user.isActive\">\n      {{ user.name }}\n    </li>\n  </template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Composable with Global and Local State - JavaScript\nDESCRIPTION: This JavaScript module demonstrates a composable function (`useCount`) that returns both global and local reactive state using Vue's `ref` API.  `globalCount` is shared across all components using the composable, while `localCount` is unique to each component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for v-on Directive in Vue\nDESCRIPTION: This code shows the shorthand syntax for the `v-on` directive using the `@` symbol. It achieves the same functionality as `v-on:click`, binding the `increment` method to the button's click event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"increment\">{{ count }}</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Content for Slots Vue.js\nDESCRIPTION: This code snippet shows how to define fallback content for a slot in the `<SubmitButton>` component. If the parent component doesn't provide any slot content, the default content \"Submit\" will be rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<button type=\"submit\">\n  <slot>\n    Submit <!-- fallback content -->\n  </slot>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Options API in Vue.js\nDESCRIPTION: Declares a prop named 'msg' of type String in a Vue.js component using the Options API. The `props` option is an object where each key represents a prop name and the value specifies its type. The prop can then be accessed via `this.msg` within the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in child component\nexport default {\n  props: {\n    msg: String\n  },\n  setup(props) {\n    // access props.msg\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Vue Component\nDESCRIPTION: This snippet renders the PartnerAll component within the template. This will instantiate and display the PartnerAll component in the web page.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<PartnerAll />\n```\n\n----------------------------------------\n\nTITLE: Import Statements in Vue Script Setup\nDESCRIPTION: This example shows how to use import statements inside `<script setup>`. You can use aliases defined in your build tool configuration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { componentA } from './Components'\nimport { componentB } from '@/Components'\nimport { componentC } from '~/Components'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Template with Tracked and Untracked Elements - HTML\nDESCRIPTION: This HTML snippet illustrates which elements within a Vue template are tracked for dynamic updates based on their attributes and content. Elements with dynamic bindings (like `:id` and `{{ bar }}`) are tracked, while static elements are not. The outermost `div` represents the root block.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div> <!-- root block -->\n  <div>...</div>         <!-- not tracked -->\n  <div :id=\"id\"></div>   <!-- tracked -->\n  <div>                  <!-- not tracked -->\n    <div>{{ bar }}</div> <!-- tracked -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue with ES Module CDN (Options API)\nDESCRIPTION: This snippet shows how to initialize a Vue application using the ES module build from a CDN. It defines a simple component with data binding and mounts it to the DOM element with the ID 'app'. Requires a browser that supports ES modules.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Analogy for Named Slots\nDESCRIPTION: This JavaScript code provides an analogy to explain how named slots work. It simulates passing slot fragments as properties to a `BaseLayout` function, which then renders them in different places within the layout.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// passing multiple slot fragments with different names\nBaseLayout({\n  header: `...`,\n  default: `...`,\n  footer: `...`\n})\n\n// <BaseLayout> renders them in different places\nfunction BaseLayout(slots) {\n  return `<div class=\"container\">\n      <header>${slots.header}</header>\n      <main>${slots.default}</main>\n      <footer>>${slots.footer}</footer>\n    </div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Teleports SSR Context Example JavaScript\nDESCRIPTION: This JavaScript code shows how teleports are exposed under the `teleports` property of the SSR context object when using `renderToString`.  The `ctx.teleports` object contains the teleported content, which needs to be manually injected into the final page HTML. The context is passed into `renderToString` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }\n```\n\n----------------------------------------\n\nTITLE: Preserving HTML Comments in Vue.js Templates\nDESCRIPTION: This snippet shows how to set the `comments` compiler option to `true` to force Vue to preserve HTML comments even in production. By default, Vue removes comments in production. This option is used when Vue is used with other libraries that rely on HTML comments.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.compilerOptions.comments = true\n```\n\n----------------------------------------\n\nTITLE: Returning Ref from Setup Function\nDESCRIPTION: Shows how to return a template ref from the `setup()` function when not using `<script setup>`. It initializes the `input` ref to `null`, and includes the `input` ref in the object returned by the `setup` function, making it accessible in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component by Registered Name in Vue (Options API)\nDESCRIPTION: Demonstrates rendering a dynamic component using the `is` prop of the `<component>` element. The `view` data property determines which component (Foo or Bar) is rendered based on its registered name in the components option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n  components: { Foo, Bar },\n  data() {\n    return {\n      view: 'Foo'\n    }\n  }\n}\n</script>\n\n<template>\n  <component :is=\"view\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Version in JavaScript\nDESCRIPTION: This code snippet shows how to import and access the current version of Vue. It imports the `version` export from the `vue` package and logs it to the console. This can be useful for debugging or feature detection based on the Vue version.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { version } from 'vue'\n\nconsole.log(version)\n```\n\n----------------------------------------\n\nTITLE: Checking if Object is Reactive in Vue.js (isReactive)\nDESCRIPTION: The `isReactive` function checks if a given value is a proxy created by `reactive()` or `shallowReactive()`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isReactive(value: unknown): boolean\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Text in Vue.js Template\nDESCRIPTION: This snippet demonstrates how to render dynamic text in a Vue.js template using mustache syntax. It displays the value of the `message` ref and the `counter.count` property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1>{{ message }}</h1>\n<p>Count is: {{ counter.count }}</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Application (Inline Component)\nDESCRIPTION: Demonstrates creating a Vue application instance with an inline root component definition using the createApp function.  It imports createApp from 'vue' and defines a basic component options object directly within the createApp call. The resulting app instance is assigned to the 'app' constant.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Teleports on the Same Target\nDESCRIPTION: This snippet shows how multiple <Teleport> components can mount their content to the same target element. The order will be a simple append, with later mounts located after earlier ones, but all within the target element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport to=\"#modals\">\n  <div>A</div>\n</Teleport>\n<Teleport to=\"#modals\">\n  <div>B</div>\n</Teleport>\n```\n\n----------------------------------------\n\nTITLE: Importing External Files in Vue SFC\nDESCRIPTION: This snippet demonstrates how to import content from external files into Vue Single-File Components using the `src` attribute in the template, script, and style blocks. Relative paths need to start with `./`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template src=\"./template.html\"></template>\n<style src=\"./style.css\"></style>\n<script src=\"./script.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Reactive isActive and hasError (Composition API)\nDESCRIPTION: Defines reactive variables using Vue's Composition API to control the 'active' and 'text-danger' classes. These variables are used to dynamically update the class list of an element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst isActive = ref(true)\nconst hasError = ref(false)\n```\n\n----------------------------------------\n\nTITLE: Nested Suspense with suspensible prop\nDESCRIPTION: This HTML snippet demonstrates the use of nested `<Suspense>` components in Vue.js with the `suspensible` prop. It shows how the parent `<Suspense>` can handle async dependencies for the nested component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <Suspense suspensible> <!-- this -->\n      <component :is=\"DynamicAsyncInner\" />\n    </Suspense>\n  </component>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Component Slots Type Definition - Vue.js\nDESCRIPTION: Explains the structure for defining type-safe slots in Vue.js components. The `slots` option is used to assist type inference in render functions when working with slots programmatically.  The actual types for the slots are defined using type casting along with the `SlotsType` type helper. This functionality is available in Vue 3.3 and later.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlotsType } from 'vue'\n\ndefineComponent({\n  slots: Object as SlotsType<{\n    default: { foo: string; bar: number }\n    item: { data: number }\n  }>,\n  setup(props, { slots }) {\n    expectType<\n      undefined | ((scope: { foo: string; bar: number }) => any)\n    >(slots.default)\n    expectType<undefined | ((scope: { data: number }) => any)>(\n      slots.item\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Bad Prop Use in in-DOM Template (camelCase)\nDESCRIPTION: Shows bad practice of using camelCase when using props in in-DOM templates. For in-DOM templates kebab-case should be used.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_24\n\nLANGUAGE: vue-html\nCODE:\n```\n// for in-DOM templates\n<welcome-message greetingText=\"hi\"></welcome-message>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Options API setup function\nDESCRIPTION: Shows how to emit custom events using `ctx.emit` within the setup function when using the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  emits: ['enlarge-text'],\n  setup(props, ctx) {\n    ctx.emit('enlarge-text')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onMounted in createApp (Composition API)\nDESCRIPTION: This code illustrates how to use the `onMounted` lifecycle hook within a `createApp` instance using the Composition API. It shows how to ensure code executes after the component has been fully mounted within the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { onMounted } from 'vue'\n\ncreateApp({\n  setup() {\n    onMounted(() => {\n      // component is now mounted.\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reactive Class Names (Composition API)\nDESCRIPTION: Defines reactive variables using Vue's Composition API to store CSS class names as strings. These variables can be used in array syntax to dynamically apply classes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeClass = ref('active')\nconst errorClass = ref('text-danger')\n```\n\n----------------------------------------\n\nTITLE: Bad Complex Computed Property (composition API)\nDESCRIPTION: Shows bad practice of creating complex computed properties instead of breaking them into simpler ones using composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nconst price = computed(() => {\n  const basePrice = manufactureCost.value / (1 - profitMargin.value)\n  return basePrice - basePrice * (discountPercent.value || 0)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Whitespace Handling in Vue.js Templates\nDESCRIPTION: This snippet illustrates setting the `whitespace` compiler option to `'preserve'` to disable whitespace condensation in templates. By default, Vue condenses whitespace for more efficient output. Setting this option to `'preserve'` will disable the removal and condensing of whitespace characters.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.compilerOptions.whitespace = 'preserve'\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Rendering in Vue.js (Props Stability)\nDESCRIPTION: This Vue.js template snippet demonstrates an inefficient way to render a list.  Every `ListItem` updates whenever `activeId` changes, even if the `item.id` is not equal to `activeId`. This leads to unnecessary re-renders.  The list items depend on the ID and the active ID.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />\n```\n\n----------------------------------------\n\nTITLE: Debugger Event Type (TypeScript)\nDESCRIPTION: This TypeScript code defines the structure of the `DebuggerEvent` object passed to the component debugging hooks. It includes information about the reactive effect, target object, operation type (track or trigger), key, and related values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type:\n    | TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    | TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Child Component in Template (SFC)\nDESCRIPTION: This snippet shows how to use a registered child component within the template of a parent component in a Vue.js SFC. The child component is rendered using its tag name.  It requires the child component to be previously imported and registered in the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ChildComp />\n```\n\n----------------------------------------\n\nTITLE: Reactive Style Properties (Composition API)\nDESCRIPTION: Defines reactive variables using Vue's Composition API to store style properties like 'activeColor' and 'fontSize'. These variables can be used to dynamically style an element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeColor = ref('red')\nconst fontSize = ref(30)\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Dependencies in Vue SFC\nDESCRIPTION: This snippet demonstrates importing resources from npm dependencies inside a Vue Single-File Component's style block, using the `src` attribute. Note: webpack module resolution rules apply here.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<!-- import a file from the installed \"todomvc-app-css\" npm package -->\n<style src=\"todomvc-app-css/index.css\" />\n```\n\n----------------------------------------\n\nTITLE: Using Component with Fallthrough Attribute Vue HTML\nDESCRIPTION: This demonstrates how a parent component uses the `<MyButton>` component and passes a `class` attribute. Since `<MyButton>` doesn't declare `class` as a prop, it is a fallthrough attribute.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyButton class=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Style Object data property (Options API)\nDESCRIPTION: Defines a data property within Vue's Options API that holds an object representing inline styles. This allows for dynamic style application based on the properties within the object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Named Functional Component Vue.js TypeScript\nDESCRIPTION: This code snippet demonstrates how to type a named functional component in Vue.js using TypeScript. It defines the props and emits for the component, along with the component's rendering logic that includes an onClick event that emits a message.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { SetupContext } from 'vue'\ntype FComponentProps = {\n  message: string\n}\n\ntype Events = {\n  sendMessage(message: string): void\n}\n\nfunction FComponent(\n  props: FComponentProps,\n  context: SetupContext<Events>\n) {\n  return (\n    <button onClick={() => context.emit('sendMessage', props.message)}>\n        {props.message} {' '}\n    </button>\n  )\n}\n\nFComponent.props = {\n  message: {\n    type: String,\n    required: true\n  }\n}\n\nFComponent.emits = {\n  sendMessage: (value: unknown) => typeof value === 'string'\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with Fallback Content Vue.js\nDESCRIPTION: This snippet shows the rendered HTML when the `<SubmitButton>` component is used without providing slot content.  The fallback content \"Submit\" is rendered within the `<button>` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"submit\">Submit</button>\n```\n\n----------------------------------------\n\nTITLE: Running a Vue Project with pnpm\nDESCRIPTION: These commands navigate to the project directory and then install dependencies and start the development server using pnpm. The template syntax `{{'<your-project-name>'}}` will need to be replaced with the actual project name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ cd {{'<your-project-name>'}}\n$ pnpm install\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Boolean and Number Props Casting Example\nDESCRIPTION: This shows how Vue casts props defined as Boolean or Number types when set as attributes in the custom element.  Attributes are always strings, so Vue automatically converts them to the specified type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nprops: {\n    selected: Boolean,\n    index: Number\n  }\n```\n\n----------------------------------------\n\nTITLE: KeepAlive Include Array\nDESCRIPTION: Illustrates how to use the `include` prop with an array to specify which components should be cached by `<KeepAlive>`. The array is bound using `v-bind`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\n----------------------------------------\n\nTITLE: Component Compiler Options Definition - Vue.js\nDESCRIPTION: Illustrates the structure of the `compilerOptions` object within a Vue component. These options allow for customizing the runtime template compilation behavior, like custom element handling, whitespace management, custom delimiters, and comment handling. These options are only relevant with a full build of Vue.js, which includes the template compiler.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  compilerOptions?: {\n    isCustomElement?: (tag: string) => boolean\n    whitespace?: 'condense' | 'preserve' // default: 'condense'\n    delimiters?: [string, string] // default: ['{{', '}}']\n    comments?: boolean // default: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use detailed prop definitions - Good Example - Javascript - Options API\nDESCRIPTION: Demonstrates a good practice of defining props with detailed configurations in the Options API. It includes type validation and a custom validator to ensure prop values are correct.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  status: String\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Even better!\nprops: {\n  status: {\n    type: String,\n    required: true,\n\n    validator: value => {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].includes(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Vue Component\nDESCRIPTION: This script imports a Vue component named PartnerAll from a relative path. This allows the component to be used within the current Vue component or page.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport PartnerAll from './components/PartnerAll.vue'\n```\n\n----------------------------------------\n\nTITLE: Compiled Reactive Props Destructure JavaScript\nDESCRIPTION: Shows the compiled equivalent of the reactive props destructure example, demonstrating how the compiler transforms accesses to destructured props to `props.foo`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Fallthrough Attributes in Options API Javascript\nDESCRIPTION: This code shows how to access fallthrough attributes in the Options API using `this.$attrs`. This property is available in the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  created() {\n    console.log(this.$attrs)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing renderTracked Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `renderTracked` lifecycle hook, which is called when a reactive dependency has been tracked by the component's render effect. This hook is development-mode-only and not called during server-side rendering. It provides debugging information about the reactive effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  renderTracked?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n  key: any\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration (Browser)\nDESCRIPTION: This JavaScript snippet shows how to hydrate a server-rendered Vue app on the client-side. It imports `createSSRApp` from 'vue', creates a Vue app instance (identical to the server-side app), and mounts it to the DOM element with the ID 'app'. This process attaches event listeners and makes the app interactive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this runs in the browser.\nimport { createSSRApp } from 'vue'\n\nconst app = createSSRApp({\n  // ...same app as on server\n})\n\n// mounting an SSR app on the client assumes\n// the HTML was pre-rendered and will perform\n// hydration instead of mounting new DOM nodes.\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: v-if and v-for on the Same Element (Incorrect)\nDESCRIPTION: This code snippet shows the incorrect usage of `v-if` and `v-for` on the same element.  The `v-if` condition cannot access variables from the `v-for` scope directly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Importing SFC in Custom Element Mode\nDESCRIPTION: This example shows how to import a Vue Single-File Component (SFC) in custom element mode by using the `.ce.vue` extension.  This inlines the component's styles and exposes them in the component's `styles` option for use with `defineCustomElement`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineCustomElement } from 'vue'\nimport Example from './Example.ce.vue'\n\nconsole.log(Example.styles) // [\"/* inlined css */\"]\n\n// convert into custom element constructor\nconst ExampleElement = defineCustomElement(Example)\n\n// register\ncustomElements.define('my-example', ExampleElement)\n```\n\n----------------------------------------\n\nTITLE: Self-closing Vue Components in in-DOM templates\nDESCRIPTION: This vue-html snippet shows how to properly use self-closing tags for Vue components that have no content when using in-DOM templates.  In in-DOM templates, components should not be self-closing and require a closing tag\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In in-DOM templates -->\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in SFC using Composition API in Vue.js\nDESCRIPTION: Declares a prop named 'msg' of type String in a Vue.js Single File Component using the Composition API. `defineProps()` is a compile-time macro that defines the props accepted by the component. The prop can then be accessed in the template or via the object returned by `defineProps()` within the script.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- ChildComp.vue -->\n<script setup>\nconst props = defineProps({\n  msg: String\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Good Prop Declaration (camelCase Composition API)\nDESCRIPTION: Illustrates the correct usage of camelCase for prop declaration inside a Vue component's composition API. Prop names should always be camelCase when declared in JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst props = defineProps({\n  greetingText: String\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Directive\nDESCRIPTION: Demonstrates how to retrieve a globally registered directive using app.directive(). It retrieves the registered directive 'myDirective' and assigns it to a constant named 'myDirective'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')\n```\n\n----------------------------------------\n\nTITLE: v-model with Arguments\nDESCRIPTION: Shows how to use `v-model` with arguments on a component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-model:title=\"bookTitle\" />\n```\n\n----------------------------------------\n\nTITLE: Vite configuration for Reactivity Transform\nDESCRIPTION: This JavaScript code shows how to configure Reactivity Transform in a Vite project using `@vitejs/plugin-vue`. The `reactivityTransform` option is set to `true` within the Vue plugin options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default {\n  plugins: [\n    vue({\n      reactivityTransform: true\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue SFC\nDESCRIPTION: This example shows how to import a Vue Single-File Component into another component using standard JavaScript module syntax. This requires a build setup with a compiler that can handle `.vue` files.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Option Example (Options API)\nDESCRIPTION: Illustrates how to define the data option containing post object with 'id' and 'title' properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      post: {\n        id: 1,\n        title: 'My Journey with Vue'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Object Properties with v-for in Vue\nDESCRIPTION: This demonstrates iterating through the properties (values) of an object using `v-for`. The `value` alias represents the value of each property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Computed property (Composition API, SFC)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a computed ref `filteredTodos` within a Vue.js component using the Composition API and single-file component (SFC) syntax. It uses `ref` to create reactive variables `hideCompleted` and `todos`, and `computed` to create `filteredTodos` which depends on these reactive values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, computed } from 'vue'\n\nconst hideCompleted = ref(false)\nconst todos = ref([\n  /* ... */\n])\n\nconst filteredTodos = computed(() => {\n  // return filtered todos based on\n  // `todos.value` & `hideCompleted.value`\n})\n```\n\n----------------------------------------\n\nTITLE: Provide value using Options API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to provide a value using the `provide` option in Vue.js' Options API. The `provide` option is an object where keys are injection keys, and values are the values to be provided.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  provide: {\n    message: 'hello!'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with reactive() in Vue\nDESCRIPTION: This code demonstrates how `reactive()` implicitly infers the type from its argument. In this example, `book` is inferred to be of type `{ title: string }`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })\n```\n\n----------------------------------------\n\nTITLE: Suspense Component Usage\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `<Suspense>` component in Vue.js. It defines a default slot containing a component with potentially async dependencies and a fallback slot for the loading state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Suspense>\n  <!-- component with nested async dependencies -->\n  <Dashboard />\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Vue Component in JavaScript\nDESCRIPTION: This code snippet demonstrates the creation of a minimal Vue component using JavaScript. The component object includes a render function that returns a simple \"Hello world!\" string. This is a valid Vue component that can be used within a Vue application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/glossary/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst HelloWorldComponent = {\n  render() {\n    return 'Hello world!'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile-Time Flags in Webpack\nDESCRIPTION: This code snippet demonstrates how to configure compile-time flags in a Webpack project using the `DefinePlugin`. It sets the values for `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flags. This allows for fine-grained control over which features are included in the final bundle.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Scope and Index in v-for (Composition API)\nDESCRIPTION: This code snippet initializes a parent message and an array of items using the Composition API, preparing them for rendering within a v-for loop that accesses both the item and its index.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n----------------------------------------\n\nTITLE: Declaring Component Options with defineOptions in Vue\nDESCRIPTION: This code snippet shows how to declare component options directly inside `<script setup>` using the `defineOptions` macro. This eliminates the need for a separate `<script>` block for defining options like `inheritAttrs` or custom options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineOptions({\n  inheritAttrs: false,\n  customOptions: {\n    /* ... */\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Factory Function for Defaults (Vue.js)\nDESCRIPTION: Illustrates the usage of a factory function for non-primitive default values when using the `inject` option in Vue.js. This avoids value sharing between multiple component instances, which is important for objects and arrays.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: () => [1, 2, 3]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Props Definition without Empty Lines - Composition API - JavaScript\nDESCRIPTION: Demonstrates how to define component props using the Composition API in Vue.js without spaces. This example uses `defineProps` and `computed` to define properties and computed values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n})\nconst formattedValue = computed(() => {\n  // ...\n})\nconst inputClasses = computed(() => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Input Binding for Number Animation (Vue, Options API)\nDESCRIPTION: This Vue HTML snippet includes an input field bound to the `number` data property and displays the animated number (`tweened`) formatted to zero decimal places.  It utilizes `v-model.number` to ensure input is treated as a number, compatible with the Options API example.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.toFixed(0) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Splitting Modules - Component Definition (Options API)\nDESCRIPTION: This snippet defines a Vue component in a separate JavaScript file using the Options API. It exports the component's options object, including data and template. Requires the main HTML file to import this component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Dynamic v-on Event Handler\nDESCRIPTION: Illustrates how to bind a handler to a dynamic event name using v-on. The event name is determined by the value of `eventName`. A shorthand is also demonstrated. Requires a Vue component instance with a data property `eventName` and a method `doSomething`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<a v-on:[eventName]=\"doSomething\"> ... </a>\n\n<!-- shorthand -->\n<a @[eventName]=\"doSomething\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Calling Store Method from Template - Vue\nDESCRIPTION: This Vue template demonstrates calling the `increment` method on the shared store when a button is clicked.  This approach centralizes the mutation logic within the store, enhancing maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_9\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Function Ref in Vue\nDESCRIPTION: This code shows an alternative usage of the `ref` attribute, accepting a function value. This function provides full control over where to store the reference to the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<ChildComponent :ref=\"(el) => child = el\" />\n```\n\n----------------------------------------\n\nTITLE: Vue v-on Directive: Longhand (Preferred)\nDESCRIPTION: Demonstrates the alternative preferred practice of using only the longhand notation (`v-on:`) for the `v-on` directive. Consistency is maintained, leading to improved readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_51\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  v-on:input=\"onInput\"\n  v-on:focus=\"onFocus\"\n>\n```\n\n----------------------------------------\n\nTITLE: HTML Container for Vue Application\nDESCRIPTION: This HTML snippet defines a container element with the ID 'app'. The Vue application will be mounted to this element, and the application's root component will be rendered inside it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"app\"></div>\n```\n\n----------------------------------------\n\nTITLE: Shallow Readonly Usage\nDESCRIPTION: Illustrates how to use `shallowReadonly` to create an object where only root-level properties are readonly, not nested objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// mutating state's own properties will fail\nstate.foo++\n\n// ...but works on nested objects\nisReadonly(state.nested) // false\n\n// works\nstate.nested.bar++\n```\n\n----------------------------------------\n\nTITLE: CSS for Visually Hiding Elements\nDESCRIPTION: This CSS snippet provides a class that visually hides elements while keeping them accessible to assistive technologies. This technique is useful for labels or other content that is not needed visually but provides context for screen readers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.hidden-visually {\n  position: absolute;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0;\n  padding: 0;\n  height: 1px;\n  width: 1px;\n  clip: rect(0 0 0 0);\n  clip-path: inset(100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Vue v-slot Directive: Mixed Shorthand (Discouraged)\nDESCRIPTION: Demonstrates the discouraged practice of mixing shorthand and longhand notations for the `v-slot` directive. Consistency is crucial for readability and maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_47\n\nLANGUAGE: vue-html\nCODE:\n```\n<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template #footer>\n  <p>Here's some contact info</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Content Escaping in Vue.js Templates\nDESCRIPTION: This example showcases how Vue automatically escapes HTML content within templates to prevent script injection. The user-provided string containing a script tag is converted into its HTML entity equivalents, rendering it harmless.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ userProvidedString }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Run the development server\nDESCRIPTION: This command starts the local development server for the VueJS documentation website, allowing developers to preview changes in real-time. It requires dependencies to be installed beforehand.\nSOURCE: https://github.com/vuejs/docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile-Time Flags in Vue CLI\nDESCRIPTION: This code snippet shows how to configure compile-time flags in a Vue CLI project using `chainWebpack`. It sets the values for `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flags. This allows customizing the features included in the build.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.plugin('define').tap((definitions) => {\n      Object.assign(definitions[0], {\n        __VUE_OPTIONS_API__: 'true',\n        __VUE_PROD_DEVTOOLS__: 'false',\n        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n      })\n      return definitions\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Component Props and Emits - JavaScript\nDESCRIPTION: This code demonstrates how to define `props` and `emits` for a functional component by adding them as properties to the function.  `inheritAttrs` can be set to `false` to disable attribute inheritance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyComponent.props = ['value']\nMyComponent.emits = ['click']\nMyComponent.inheritAttrs = false\n```\n\n----------------------------------------\n\nTITLE: Import and Render Vue Component\nDESCRIPTION: This snippet imports the 'TeamPage.vue' component and renders it within the application. The component is used to display the team page content. It relies on the 'TeamPage.vue' file existing in the './team' directory.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/about/team.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport TeamPage from './team/TeamPage.vue'\n</script>\n\n<TeamPage />\n```\n\n----------------------------------------\n\nTITLE: Mutating Prop (Options API)\nDESCRIPTION: This snippet demonstrates the incorrect way to attempt mutating a prop directly within a component using Options API. The attempt to reassign the value of the prop `foo` within the `created` lifecycle hook will trigger a warning from Vue.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: ['foo'],\n  created() {\n    // ❌ warning, props are readonly!\n    this.foo = 'bar'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Value: No Quotes (Discouraged)\nDESCRIPTION: Demonstrates the discouraged practice of omitting quotes for HTML attribute values, which can lead to reduced readability and potential issues with spaces in attribute values. This example uses the `type` attribute of an input element without quotes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_41\n\nLANGUAGE: vue-html\nCODE:\n```\n<input type=text>\n```\n\n----------------------------------------\n\nTITLE: Eager Watcher in Options API (Vue.js)\nDESCRIPTION: This code shows how to create an eager watcher in Vue.js using the Options API. The `immediate: true` option ensures that the callback is executed immediately when the component is created.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  watch: {\n    question: {\n      handler(newQuestion) {\n        // this will be run immediately on component creation.\n      },\n      // force eager callback execution\n      immediate: true\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS Compiled - Vue\nDESCRIPTION: Shows the compiled output of the scoped CSS example, demonstrating how PostCSS adds a unique `data-v` attribute to both the CSS selectors and the HTML elements, ensuring style encapsulation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Elements Dynamically in Vue\nDESCRIPTION: Demonstrates rendering different HTML elements dynamically using the `is` prop of the `<component>` element. The example switches between an `<a>` tag (if `href` is truthy) and a `<span>` tag.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<component :is=\"href ? 'a' : 'span'\"></component>\n```\n\n----------------------------------------\n\nTITLE: Native Input v-model Expanded\nDESCRIPTION: Demonstrates the expanded form of v-model on a native input, showing the explicit value binding and input event handling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  :value=\"searchText\"\n  @input=\"searchText = $event.target.value\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deferred Teleport Usage\nDESCRIPTION: Demonstrates using the `defer` prop in `<Teleport>` to postpone target resolution until other application parts have mounted. This targets a container rendered by Vue later in the component tree.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Value in Computed Property (Composition API)\nDESCRIPTION: This code snippet demonstrates how to access the previous value of a computed property using Vue.js Composition API.  The computed function receives the previous value as its first argument.  It returns the current count if it's less than or equal to 3, otherwise, it returns the previous value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\n// This computed will return the value of count when it's less or equal to 3.\n// When count is >=4, the last value that fulfilled our condition will be returned\n// instead until count is less or equal to 3\nconst alwaysSmall = computed((previous) => {\n  if (count.value <= 3) {\n    return count.value\n  }\n\n  return previous\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Scaffold Vue Project with Yarn Modern\nDESCRIPTION: This command uses Yarn to execute the create-vue scaffolding tool for Yarn Modern (v2+). It initializes a new Vue project using Yarn as the package manager. Yarn Modern has different execution patterns compared to older Yarn versions, so this command is tailored for it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Bad Complex Expression in Template\nDESCRIPTION: Illustrates the bad practice of including complex expressions directly within a Vue.js template. Complex expressions should be refactored into computed properties or methods for better readability and maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_33\n\nLANGUAGE: vue-html\nCODE:\n```\n{{\\n  fullName.split(' ').map((word) => {\\n    return word[0].toUpperCase() + word.slice(1)\\n  }).join(' ')\\n}}\n```\n\n----------------------------------------\n\nTITLE: Good Component Registration (PascalCase)\nDESCRIPTION: Illustrates correct usage of PascalCase for component registration using `app.component` in Vue.js. This aligns with JavaScript class naming conventions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\napp.component('MyComponent', {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Binding ID Attribute with v-bind\nDESCRIPTION: This snippet demonstrates how to bind the `id` attribute of a `div` element to a dynamic value using the `v-bind` directive in Vue.js. The `dynamicId` property from the component's state will be used to update the `id` attribute.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n----------------------------------------\n\nTITLE: Once Watcher in Composition API (Vue.js)\nDESCRIPTION: This code demonstrates creating a watcher that triggers only once using the Composition API in Vue.js with the `once: true` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // when `source` changes, triggers only once\n  },\n  { once: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Bad Multi-Attribute Component (single line)\nDESCRIPTION: Illustrates the bad practice of defining a component with multiple attributes on a single line. Elements with multiple attributes should span multiple lines for better readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_30\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with Overridden Slot Content Vue.js\nDESCRIPTION: This snippet shows the rendered HTML when the `<SubmitButton>` component's fallback content is overridden by the slot content \"Save\".  The provided content \"Save\" is rendered within the `<button>` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"submit\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Declaring Render Functions in Composition API - JavaScript\nDESCRIPTION: Shows how to declare a render function within the `setup()` hook when using the Composition API. The render function returns a vnode, string, or an array of vnodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    return () => 'hello world!'\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Ref Implementation\nDESCRIPTION: Illustrates how to create a debounced ref using `customRef`, which allows explicit control over dependency tracking and update triggering, updating the value only after a certain timeout.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { customRef } from 'vue'\n\nexport function useDebouncedRef(value, delay = 200) {\n  let timeout\n  return customRef((track, trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newValue) {\n        clearTimeout(timeout)\n        timeout = setTimeout(() => {\n          value = newValue\n          trigger()\n        }, delay)\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Single-File Component Structure - Vue HTML\nDESCRIPTION: Illustrates a non-recommended structure for a Vue.js single-file component, where `<style>` is placed before `<script>` and/or `<template>`. This is inconsistent and not recommended.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<style>/* ... */</style>\n<script>/* ... */</script>\n<template>...</template>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n\n----------------------------------------\n\nTITLE: Teleport with Target Selector - Vue HTML\nDESCRIPTION: This example shows how to use the `to` prop of the `<Teleport>` component to specify the target container where the teleported content will be rendered. The target can be a CSS selector string or an actual DOM element. These examples demonstrate different types of CSS selectors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Components\nDESCRIPTION: This JavaScript code shows how to register components within a Vue.js component's `components` option. It demonstrates both shorthand registration and registering under a different name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n  components: {\n    // shorthand\n    Foo,\n    // register under a different name\n    RenamedBar: Bar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: withModifiers Helper - Render Function - JavaScript\nDESCRIPTION: Demonstrates how to use the `withModifiers` helper function to apply event modifiers like `.self` within render functions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { withModifiers } from 'vue'\n\nh('div', {\n  onClick: withModifiers(() => {}, ['self'])\n})\n```\n\n----------------------------------------\n\nTITLE: Increment Count with Inline Handler\nDESCRIPTION: This snippet demonstrates how to use an inline handler within a Vue template to increment the `count` variable.  The `@click` directive binds the click event of the button to the inline expression `count++`. The `{{ count }}` syntax displays the current value of the `count` variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Counter\nDESCRIPTION: This snippet defines the HTML template for a simple counter component in Vue. It includes a button that increments the `count` property when clicked.  The `count` property is displayed within the button.\n\nDependencies: None\nInput: None\nOutput: HTML markup for the counter component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: v-pre Directive in Vue.js\nDESCRIPTION: Explains how v-pre prevents Vue.js from compiling an element and its children, preserving the raw template syntax. This is useful for displaying code examples or preventing Vue from interpreting specific sections of the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<span v-pre>{{ this will not be compiled }}</span>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Directive vFocus in Template (Options API) HTML\nDESCRIPTION: Shows how to use the locally registered `v-focus` directive in a Vue template using the Options API.  The directive will automatically focus the input element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<input v-focus />\n```\n\n----------------------------------------\n\nTITLE: Configure Vite Alias for Vue\nDESCRIPTION: This code snippet shows how to configure an alias in Vite to resolve the `vue` import to the `vue/dist/vue.esm-bundler.js` file. This configuration is necessary when using Vue in HTML mode with Vite, ensuring correct in-browser template compilation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-1/description.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nexport default {\n  resolve: {\n    alias: {\n      vue: 'vue/dist/vue.esm-bundler.js'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js ARIA Hidden Example\nDESCRIPTION: This Vue.js code demonstrates the usage of `aria-hidden=\"true\"` to hide an element from assistive technologies like screen readers. This is useful for decorative or duplicated content that doesn't need to be read aloud.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>This is not hidden from screen readers.</p>\n<p aria-hidden=\"true\">This is hidden from screen readers.</p>\n```\n\n----------------------------------------\n\nTITLE: Component Template String Definition - Vue.js\nDESCRIPTION: Defines the structure of the `template` option within a Vue component, specifying that it accepts a string value representing the component's template. The template is used to generate the component's DOM structure at runtime, if a compiler is available. It is important to trust the source of the template to avoid security vulnerabilities.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  template?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Value in Computed Property (Options API)\nDESCRIPTION: This code snippet demonstrates how to access the previous value of a computed property's getter function in Vue.js Options API. The first argument of the getter provides the previous value. It returns the current count if it's less than or equal to 3, otherwise, it returns the previous value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(_, previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Teleport Conditionally\nDESCRIPTION: This snippet shows how to conditionally disable the <Teleport> component using the disabled prop.  The disabled prop is bound to a boolean value, allowing for dynamic control over whether the teleport is active.  This can be useful for rendering components differently based on the environment (e.g., desktop vs. mobile).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport :disabled=\"isMobile\">\n  ...\n</Teleport>\n```\n\n----------------------------------------\n\nTITLE: Method Invocation in Template\nDESCRIPTION: This snippet shows how to invoke a method directly within a Vue.js template.  The template calls the `calculateBooksMessage()` method, and the returned value is displayed.  This approach is similar to using a computed property but does not provide caching.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n----------------------------------------\n\nTITLE: Good Simple Computed Properties (options API)\nDESCRIPTION: Illustrates the recommended practice of breaking down a complex computed property into smaller, simpler computed properties for improved readability, testability, and adaptability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_39\n\nLANGUAGE: js\nCODE:\n```\ncomputed: {\n  basePrice() {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n\n  discount() {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n\n  finalPrice() {\n    return this.basePrice - this.discount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: createElementVNode Usage in JavaScript\nDESCRIPTION: This JavaScript code snippet showcases how `createElementVNode` is used with patch flags to optimize DOM updates. The third argument, `2`, is the CLASS patch flag which tells the runtime renderer only the class needs to be updated during patching. The code assumes the existence of `_normalizeClass` and `_ctx.active` for generating the class value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\n----------------------------------------\n\nTITLE: Render Filtered Array\nDESCRIPTION: Illustrates how to render a filtered array using `v-for` in the template.  This example displays the `evenNumbers` computed property, showcasing the dynamically updated filtered list.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\n----------------------------------------\n\nTITLE: To Raw Usage\nDESCRIPTION: Demonstrates how to use `toRaw` to retrieve the original, non-reactive object from a Vue-created proxy.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = {}\nconst reactiveFoo = reactive(foo)\n\nconsole.log(toRaw(reactiveFoo) === foo) // true\n```\n\n----------------------------------------\n\nTITLE: Type Inference with computed() in Vue\nDESCRIPTION: This code demonstrates how `computed()` infers its type based on the getter's return value.  `double` is inferred to be `ComputedRef<number>`. Attempting to call the `split` method on `double.value` will result in a type error.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n\n// => TS Error: Property 'split' does not exist on type 'number'\nconst result = double.value.split('')\n```\n\n----------------------------------------\n\nTITLE: useAttrs() Type Definition - TypeScript\nDESCRIPTION: Shows the type definition for the `useAttrs()` function. This function retrieves the attributes object from the Setup Context, including fallthrough attributes, and is intended for use in <script setup> components where the setup context object is not directly available.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAttrs(): Record<string, unknown>\n```\n\n----------------------------------------\n\nTITLE: Vue Component (Composition API)\nDESCRIPTION: This snippet presents a Vue component implemented using the Composition API and `<script setup>`.  It defines reactive state (`count` using `ref`), a function to increment the count (`increment`), and a lifecycle hook (`onMounted`) to log the initial count.\n\nDependencies: vue\nInput: None\nOutput: A Vue component object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Use multi-word component names - Bad Example - HTML\nDESCRIPTION: Illustrates the incorrect way of naming components, using single-word names that can conflict with future HTML elements. This snippet shows both pre-compiled and in-DOM template examples.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in pre-compiled templates -->\n<Item />\n\n<!-- in in-DOM templates -->\n<item></item>\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with h() - JavaScript\nDESCRIPTION: This code snippet demonstrates how to render Vue components using the `h()` function in JavaScript. It imports `Foo` and `Bar` components and renders them within a `div` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Foo from './Foo.vue'\nimport Bar from './Bar.jsx'\n\nfunction render() {\n  return h('div', [h(Foo), h(Bar)])\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Style Binding: No Quotes in Object (Discouraged)\nDESCRIPTION: Demonstrates the discouraged practice of omitting quotes for keys within a style object bound using `:style`. It is considered less readable. The value of the `width` property is dynamically set.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_42\n\nLANGUAGE: vue-html\nCODE:\n```\n<AppSidebar :style={width:sidebarWidth+'px'}>\n```\n\n----------------------------------------\n\nTITLE: Watch Function Type Definition - TypeScript\nDESCRIPTION: Defines the type signatures for the `watch` function in Vue.js, including single and multiple source variations, callback signature, watch options, and the returned watch handle. This TypeScript code specifies the structure for creating reactive watchers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// watching single source\nfunction watch<T>(\n  source: WatchSource<T>,\n  callback: WatchCallback<T>,\n  options?: WatchOptions\n): WatchHandle\n\n// watching multiple sources\nfunction watch<T>(\n  sources: WatchSource<T>[],\n  callback: WatchCallback<T[]>,\n  options?: WatchOptions\n): WatchHandle\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype WatchSource<T> =\n  | Ref<T> // ref\n  | (() => T) // getter\n  | (T extends object ? T : never) // reactive object\n\ninterface WatchOptions extends WatchEffectOptions {\n  immediate?: boolean // default: false\n  deep?: boolean | number // default: false\n  flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n  once?: boolean // default: false (3.4+)\n}\n\ninterface WatchHandle {\n  (): void // callable, same as `stop`\n  pause: () => void\n  resume: () => void\n  stop: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Multiple Sources Example - JavaScript\nDESCRIPTION: Illustrates watching multiple refs using the `watch` function in Vue.js. The callback receives arrays of new and old values corresponding to the watched ref array, enabling reactive updates based on changes in multiple sources.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Named Transition CSS\nDESCRIPTION: CSS styles for a named fade transition. The class names are prefixed with `fade` instead of `v`. This example defines a simple fade transition using `opacity` and `transition` properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Global Build Example - Options API\nDESCRIPTION: This example demonstrates how to use the global build of Vue with the Options API. It creates a simple Vue application that displays a message in a div element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Ref on Component (Composition API)\nDESCRIPTION: Shows how to use `ref` on a child component using the Composition API. It imports `useTemplateRef`, `onMounted`, and the `Child` component, then assigns the ref to a variable `childRef` using `useTemplateRef` with the ref name matching the template.  The `onMounted` hook indicates that `childRef.value` will hold an instance of the `Child` component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type Definition of effectScope() in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the `effectScope()` function and the `EffectScope` interface.  `effectScope` accepts an optional detached boolean. The interface defines `run` which executes a function and `stop` which disposes of the effects in the scope.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction effectScope(detached?: boolean): EffectScope\n\ninterface EffectScope {\n  run<T>(fn: () => T): T | undefined // undefined if scope is inactive\n  stop(): void\n}\n```\n\n----------------------------------------\n\nTITLE: v-for Equivalent JSX - JSX (Composition API)\nDESCRIPTION: Demonstrates the equivalent of the `v-for` directive using JSX with Composition API. Uses `map` to iterate over an array and generate a list of JSX elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  {items.value.map(({ id, text }) => {\n    return <li key={id}>{text}</li>\n  })}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Splitting Modules - Main HTML File\nDESCRIPTION: This snippet shows how to split your Vue application code into separate JavaScript files using ES modules. The main HTML file imports a component from `./my-component.js` and mounts it to the DOM.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue v-bind Directive: Shorthand (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of using only the shorthand notation (`:`) for the `v-bind` directive. This ensures consistency and improves code readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_48\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  :value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n----------------------------------------\n\nTITLE: Toggle CSS Class for Animation (Composition API)\nDESCRIPTION: This snippet demonstrates how to toggle a CSS class to trigger an animation in Vue.js using the Composition API. It uses `ref` to manage the disabled state and `setTimeout` to reset it after a delay. The disabled state is bound to the `shake` class in the HTML template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n```\n\n----------------------------------------\n\nTITLE: Component Watch Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the `$watch` method for creating watchers imperatively. It includes the `WatchCallback`, `WatchOptions`, and `StopHandle` types.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $watch(\n    source: string | (() => any),\n    callback: WatchCallback,\n    options?: WatchOptions\n  ): StopHandle\n}\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ninterface WatchOptions {\n  immediate?: boolean // default: false\n  deep?: boolean // default: false\n  flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n\ntype StopHandle = () => void\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with v-if and v-else in Vue.js\nDESCRIPTION: This snippet demonstrates how to use both `v-if` and `v-else` directives in Vue.js to conditionally render one of two `<h1>` elements. The first `<h1>` will be rendered if the `awesome` property is truthy; otherwise, the second `<h1>` will be rendered. No dependencies are required beyond Vue.js itself. Input is a boolean value for the 'awesome' property. Output is one of the two HTML elements based on the 'awesome' property value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile-Time Flags in Rollup\nDESCRIPTION: This code snippet shows how to configure compile-time flags in a Rollup project using `@rollup/plugin-replace`. It defines values for `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`. This ensures proper configuration for tree-shaking and optimized builds.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// rollup.config.js\nimport replace from '@rollup/plugin-replace'\n\nexport default {\n  plugins: [\n    replace({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Vitest Tests\nDESCRIPTION: This command executes the Vitest test runner, which will search for and run test files in the project based on naming conventions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: v-model Modifier Logging (Options API)\nDESCRIPTION: Demonstrates how to log the `modelModifiers` prop within a Vue.js component using the Options API. It shows how the `capitalize` modifier is available and set to true.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  created() {\n    console.log(this.modelModifiers) // { capitalize: true }\n  }\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Shake Animation CSS Keyframes\nDESCRIPTION: This CSS snippet defines the `shake` animation using keyframes.  It creates a horizontal shaking effect by translating the element along the x-axis.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Slotted Selectors in Scoped CSS - Vue\nDESCRIPTION: Demonstrates how to use the `:slotted` pseudo-class to target content passed into a component through `<slot/>`. This allows styling of elements provided by the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n:slotted(div) {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: De-synchronization Issue with Default defineModel Prop Value\nDESCRIPTION: This example highlights a potential issue with `defineModel` when a `default` value is provided and no value is passed from the parent component, leading to de-synchronization between parent and child components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// child component:\nconst model = defineModel({ default: 1 })\n\n// parent component:\nconst myRef = ref()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Directive with Setup Function (Options API) JavaScript\nDESCRIPTION: Demonstrates how to register a custom directive within the `setup` function of a Vue component when using the Options API. Note that you would typically do this with the `directives` option and not inside setup, but the example shows the structure.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    /*...*/\n  },\n  directives: {\n    // enables v-highlight in template\n    highlight: {\n      /* ... */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ServerPrefetch Hook Type Definition - TypeScript\nDESCRIPTION: Defines the type signature for the 'serverPrefetch' lifecycle hook in Vue.js components. This hook is an async function that is resolved before the component instance is rendered on the server. It allows pre-fetching data on the server for improved performance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ComponentOptions {\n  serverPrefetch?(this: ComponentPublicInstance): Promise<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Watcher in Options API (Vue.js)\nDESCRIPTION: This code snippet demonstrates a basic watcher implementation in Vue.js using the Options API. It watches the 'question' property and calls the getAnswer() method when the question includes a question mark. The getAnswer() method fetches data from an API and updates the 'answer' property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      question: '',\n      answer: 'Questions usually contain a question mark. ;-)',\n      loading: false\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes('?')) {\n        this.getAnswer()\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.loading = true\n      this.answer = 'Thinking...'\n      try {\n        const res = await fetch('https://yesno.wtf/api')\n        this.answer = (await res.json()).answer\n      } catch (error) {\n        this.answer = 'Error! Could not reach the API. ' + error\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useTemplateRef() Type Definition - TypeScript\nDESCRIPTION: Shows the type definition for the `useTemplateRef()` function, which returns a shallow ref that syncs with a template element or component via a matching ref attribute. The function takes a key (string) as input and returns a readonly shallow ref that can be null if the ref is not resolved.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useTemplateRef<T>(key: string): Readonly<ShallowRef<T | null>>\n```\n\n----------------------------------------\n\nTITLE: Shorthand for v-bind Directive in Vue\nDESCRIPTION: This code snippet demonstrates the shorthand syntax for the `v-bind` directive in a Vue template. The colon (`:`) is a shorthand for `v-bind:`. This code binds the `id` attribute of the `<div>` element to the `dynamicId` property of the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :id=\"dynamicId\"></div>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form Buttons Example\nDESCRIPTION: This Vue.js code shows how to create buttons inside a form, both using `<button>` elements and `<input>` elements.  Setting the `type` attribute on `<button>` elements is important to prevent accidental form submissions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\n  <!-- Buttons -->\n  <button type=\"button\">Cancel</button>\n  <button type=\"submit\">Submit</button>\n\n  <!-- Input buttons -->\n  <input type=\"button\" value=\"Cancel\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Declaring Methods - Options API - JavaScript (BAD)\nDESCRIPTION: Demonstrates the INCORRECT usage of methods in Options API, where arrow function is used. Arrow functions should be avoided when defining methods to preserve the correct `this` binding.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  methods: {\n    increment: () => {\n      // BAD: no `this` access here!\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Watcher Creation (Composition API)\nDESCRIPTION: This Vue component script demonstrates a scenario where a `watchEffect` watcher is created asynchronously using `setTimeout`.  Asynchronous watchers created this way are not automatically stopped when the component unmounts and must be stopped manually to prevent memory leaks. This example highlights the importance of synchronous watcher creation whenever possible.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { watchEffect } from 'vue'\n\n// this one will be automatically stopped\nwatchEffect(() => {})\n\n// ...this one will not!\nsetTimeout(() => {\n  watchEffect(() => {})\n}, 100)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Template Vue HTML\nDESCRIPTION: This snippet demonstrates how to emit a custom event directly from a Vue.js template using the `$emit` method within a `v-on` handler. Clicking the button emits the 'someEvent' event.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_1\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<!-- MyComponent -->\n<button @click=\"$emit('someEvent')\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Native Elements with h() in Vue.js\nDESCRIPTION: This snippet demonstrates how to create native HTML elements using the `h()` function in Vue.js. It covers creating simple divs, adding attributes and properties, handling classes and styles, and adding event listeners.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\n----------------------------------------\n\nTITLE: Class Names data properties (Options API)\nDESCRIPTION: Defines data properties within Vue's Options API to store CSS class names as strings.  These can be used in array bindings for dynamic class application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Good Computed Property (composition API)\nDESCRIPTION: Demonstrates how to move a complex expression into a computed property within a Vue.js component's composition API. The computed property handles the logic and returns a value that can be easily used in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\n// The complex expression has been moved to a computed property\nconst normalizedFullName = computed(() =>\n  fullName.value\n    .split(' ')\n    .map((word) => word[0].toUpperCase() + word.slice(1))\n    .join(' ')\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Modifiers with withModifiers() in Vue.js\nDESCRIPTION: This snippet demonstrates how to add built-in event modifiers (like `.stop` and `.prevent`) to an event handler function using `withModifiers()` in Vue.js.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n  // equivalent of v-on:click.stop.prevent\n  onClick: withModifiers(() => {\n    // ...\n  }, ['stop', 'prevent'])\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: This snippet imports the `ThemePage` component from a relative path. It uses Vue's `<script setup>` syntax for simplified component setup.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/ecosystem/themes.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\nimport ThemePage from './themes/ThemePage.vue'\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Generic Parameters with Constraints in Vue SFC\nDESCRIPTION: This code snippet shows how to use multiple generic type parameters (`T` and `U`) with `extends` constraints in a Vue SFC.  `T` is constrained to be either a `string` or a `number`, while `U` is constrained to extend the `Item` type, which is imported from `./types`. The component then defines props `id` of type `T` and `list` of type `U[]`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<script\n  setup\n  lang=\"ts\"\n  generic=\"T extends string | number, U extends Item\"\n>\nimport type { Item } from './types'\ndefineProps<{ \n  id: T\n  list: U[]\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Imported Props Interface in Vue Component\nDESCRIPTION: Demonstrates importing a props interface from an external file for use in the `defineProps` macro. This promotes code modularity and reusability. Requires TypeScript to be a peer dependency of Vue.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Props } from './foo'\n\nconst props = defineProps<Props>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component Rendering Another Component Vue HTML\nDESCRIPTION: This demonstrates a component `<MyButton>` that renders another component `<BaseButton>` as its root. Fallthrough attributes will be forwarded to `<BaseButton>`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\n----------------------------------------\n\nTITLE: Computed property (Options API, HTML)\nDESCRIPTION: This JavaScript snippet demonstrates how to define a computed property `filteredTodos` within a Vue.js application using the Options API in an HTML context. The `filteredTodos` property is expected to return a filtered list of todos based on the `hideCompleted` state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateApp({\n  // ...\n  computed: {\n    filteredTodos() {\n      // return filtered todos based on `this.hideCompleted`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Rendering with array in Vue\nDESCRIPTION: Illustrates how to dynamically render different components using the `<component>` element and the `:is` attribute. The value of `:is` determines which component is rendered. The rendered component is determined by the value of `tabs[currentTab]`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_29\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Component changes when currentTab changes -->\n<component :is=\"tabs[currentTab]\"></component>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Interface in TypeScript\nDESCRIPTION: Defines the interface for the `DynamicComponentProps` used by the `<component>` element in Vue.js. The `is` prop accepts either a string (HTML tag or component name) or a component definition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DynamicComponentProps {\n  is: string | Component\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Trigger Function for Effect Invocation\nDESCRIPTION: Demonstrates the `trigger()` function, which is responsible for invoking all subscriber effects associated with a specific property when that property is modified. This function iterates through the subscriber effects and executes them, triggering updates in the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction trigger(target, key) {\n  const effects = getSubscribersForProperty(target, key)\n  effects.forEach((effect) => effect())\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic v-model with Native HTML Elements in Vue\nDESCRIPTION: Illustrates the problem of using `v-model` directly with a dynamically rendered native HTML element using the `<component>` tag. This example highlights that `v-model` expansion is incompatible with native HTML elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst tag = ref('input')\nconst username = ref('')\n</script>\n\n<template>\n  <!-- This won't work as 'input' is a native HTML element -->\n  <component :is=\"tag\" v-model=\"username\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Class (Vue)\nDESCRIPTION: Demonstrates how to use a Vue component and pass a `class` attribute to it. The classes provided are merged with the component's root element's existing classes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- when using the component -->\n<MyComponent class=\"baz boo\" />\n```\n\n----------------------------------------\n\nTITLE: No Ref Unwrapping in Arrays and Collections\nDESCRIPTION: Illustrates that ref unwrapping does not occur when accessing refs as elements of reactive arrays or native collection types like `Map`. The `.value` property must be explicitly accessed in these cases.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props with PropType in Vue.js\nDESCRIPTION: Demonstrates how to use `PropType` to provide more specific type information for component props, especially when using runtime props declarations. This allows for stronger type checking and better IDE support when working with component props that are objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default {\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Example - Options API - Javascript\nDESCRIPTION: Illustrates a data structure representing a list of todos, used to exemplify the importance of using keys in v-for directives. This snippet is provided for context in Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    todos: [\n      {\n        id: 1,\n        text: 'Learn to use v-for'\n      },\n      {\n        id: 2,\n        text: 'Learn to use key'\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animate Number with Watcher (Options API)\nDESCRIPTION: This snippet demonstrates animating a number using a watcher and GSAP (GreenSock Animation Platform) in Vue.js with the Options API. It watches for changes in the `number` data property and uses GSAP to tween the `tweened` data property, creating a smooth animation effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport gsap from 'gsap'\n\nexport default {\n  data() {\n    return {\n      number: 0,\n      tweened: 0\n    }\n  },\n  watch: {\n    number(n) {\n      gsap.to(this, { duration: 0.5, tweened: Number(n) || 0 })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Context Usage\nDESCRIPTION: Demonstrates accessing the Setup Context object, which provides access to `attrs`, `slots`, `emit`, and `expose`.  Explains that `attrs` and `slots` are stateful but not reactive, and suggests using `onBeforeUpdate` for side effects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup(props, context) {\n    // Attributes (Non-reactive object, equivalent to $attrs)\n    console.log(context.attrs)\n\n    // Slots (Non-reactive object, equivalent to $slots)\n    console.log(context.slots)\n\n    // Emit events (Function, equivalent to $emit)\n    console.log(context.emit)\n\n    // Expose public properties (Function)\n    console.log(context.expose)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing/Resuming a Watcher in Vue.js\nDESCRIPTION: Illustrates how to pause and resume a watcher created with `watchEffect()` (available in Vue 3.5+). `pause()` temporarily stops the watcher, and `resume()` restarts it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stop, pause, resume } = watchEffect(() => {})\n\n// temporarily pause the watcher\npause()\n\n// resume later\nresume()\n\n// stop\nstop()\n```\n\n----------------------------------------\n\nTITLE: Mixing Named and Default Scoped Slots\nDESCRIPTION: This code demonstrates the correct way to mix named slots with the default scoped slot in Vue.js.  It highlights the necessity of using an explicit <template> tag for the default slot to avoid compilation errors and scope ambiguity when props are involved.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_23\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- <MyComponent> template -->\n<div>\n  <slot :message=\"hello\"></slot>\n  <slot name=\"footer\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Globally Registering Custom Directive in Vue JavaScript\nDESCRIPTION: Illustrates the global registration of a custom directive `highlight` using `app.directive`. This makes the `v-highlight` directive available in all components of the Vue application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Passing reactive variable as ref argument (incorrect)\nDESCRIPTION: This TypeScript code illustrates an issue where passing a reactive variable (created with `$ref`) directly to a function expecting a `Ref` will not work as expected. It will result in the value instead of the ref being passed.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction trackChange(x: Ref<number>) {\n  watch(x, (x) => {\n    console.log('x changed!')\n  })\n}\n\nlet count = $ref(0)\ntrackChange(count) // doesn't work!\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with npm\nDESCRIPTION: This command uses npm to install and execute create-vue, the official Vue project scaffolding tool, which guides you through setting up a new Vue project with optional features like TypeScript and testing support.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Component by Definition in Vue (Composition API)\nDESCRIPTION: Demonstrates rendering a dynamic component using the `is` prop of the `<component>` element with Composition API and `<script setup>`. The code uses a ternary operator to conditionally render either Foo or Bar component definitions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Class to Object (Vue)\nDESCRIPTION: Dynamically toggles the 'active' class based on the truthiness of the 'isActive' data property. This demonstrates basic object binding for HTML classes in Vue.js.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"{ active: isActive }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Handling Input Event (Options API) in Vue.js\nDESCRIPTION: This JavaScript snippet shows how to handle the `input` event in Vue.js using the Options API. It updates the `text` property of the component instance with the value from the input element's event. The event handler receives the native DOM event as an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmethods: {\n  onInput(e) {\n    // a v-on handler receives the native DOM event\n    // as the argument.\n    this.text = e.target.value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use keyed v-for - Bad Example - HTML\nDESCRIPTION: Demonstrates the incorrect way of using `v-for` without a `key` attribute. This can lead to unpredictable behavior and performance issues when the list changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Component Name Option Type Definition\nDESCRIPTION: Defines the type for the `name` option in Vue.js component options. This option allows explicitly declaring a display name for the component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  name?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Refs Inside v-for (Composition API)\nDESCRIPTION: Illustrates using template refs inside a `v-for` loop with the Composition API using `useTemplateRef`.  It initializes `list` as a ref containing an array.  It uses `useTemplateRef` to bind to `itemRefs`.  The `onMounted` hook logs `itemRefs.value` to the console, which will contain an array of the `li` elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\n  /* ... */\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running a Vue Project with Bun\nDESCRIPTION: These commands navigate to the project directory and then install dependencies and start the development server using Bun. The template syntax `{{'<your-project-name>'}}` will need to be replaced with the actual project name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ cd {{'<your-project-name>'}}\n$ bun install\n$ bun run dev\n```\n\n----------------------------------------\n\nTITLE: Directive Hook Definitions JavaScript\nDESCRIPTION: Illustrates the different lifecycle hooks available when defining a custom directive, including `created`, `beforeMount`, `mounted`, `beforeUpdate`, `updated`, `beforeUnmount`, and `unmounted`.  The example shows an empty implementation of each hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using `aria-labelledby` for Accessible Name\nDESCRIPTION: This code demonstrates how to use the `aria-labelledby` attribute to provide an accessible name for an input field. The `aria-labelledby` attribute references the `id` of another element (usually a heading) to use its content as the accessible name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <h1 id=\"billing\">Billing</h1>\n  <div class=\"form-item\">\n    <label for=\"name\">Name: </label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id=\"name\"\n      v-model=\"name\"\n      aria-labelledby=\"billing name\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Exposing ref to Template - Composition API - HTML\nDESCRIPTION: Example of how the ref exposed in the Javascript file above is used in the HTML template. The .value does not need to be appended to the ref when declaring it in the HTML template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\n<div>{{ count }}</div>\n```\n\n----------------------------------------\n\nTITLE: Shallow Ref Usage\nDESCRIPTION: Demonstrates how to use `shallowRef` to create a ref that only tracks changes to the `.value` property, not deep mutations.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = shallowRef({ count: 1 })\n\n// does NOT trigger change\nstate.value.count = 2\n\n// does trigger change\nstate.value = { count: 2 }\n```\n\n----------------------------------------\n\nTITLE: Register Custom Element Type Definition in Vue\nDESCRIPTION: Adds the custom element type to Vue's `GlobalComponents` type, enabling type checking within Vue templates. It imports the `SomeElement`, `SomeElementAttributes`, and `SomeElementEvents` types from the custom element definition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// file: some-lib/src/SomeElement.vue.ts\n\nimport {\n  SomeElement,\n  SomeElementAttributes,\n  SomeElementEvents\n} from './SomeElement.js'\nimport type { Component } from 'vue'\nimport type { DefineCustomElement } from './DefineCustomElement'\n\n// Add the new element type to Vue's GlobalComponents type.\ndeclare module 'vue' {\n  interface GlobalComponents {\n    'some-element': DefineCustomElement<\n      SomeElement,\n      SomeElementAttributes,\n      SomeElementEvents\n    >\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Template Refs (Vue < 3.5)\nDESCRIPTION: This code shows how to type template refs in Vue.js before version 3.5. It initializes the ref with `null` and uses a union type to allow for `null` or the desired DOM element.  Optional chaining is used to safely access the element's properties since it might be null before the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\n\nconst el = ref<HTMLInputElement | null>(null)\n\nonMounted(() => {\n  el.value?.focus()\n})\n</script>\n\n<template>\n  <input ref=\"el\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: camelCase Component Definition in Vue (In-DOM)\nDESCRIPTION: Shows the javascript definition of the component with camelCase. When defining components in javascript it's common to use camelCase. In order to correctly use the component in the HTML it must be converted to kebab-case.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// camelCase in JavaScript\nconst BlogPost = {\n  props: ['postTitle'],\n  emits: ['updatePost'],\n  template: `\n    <h3>{{ postTitle }}</h3>\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Template\nDESCRIPTION: This code snippet demonstrates conditional rendering within a Vue.js template using the ternary operator.  It checks if the length of the `author.books` array is greater than 0 and displays 'Yes' if true, otherwise displays 'No'.  This is a basic example of dynamic content rendering based on the state of the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>Has published books:</p>\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Binding Multiple Attributes in Vue\nDESCRIPTION: This code snippet shows how to dynamically bind multiple attributes to an element using `v-bind` without an argument. The `objectOfAttrs` object contains key-value pairs representing attributes and their values. This allows you to bind multiple attributes at once from a single object.  It requires defining `objectOfAttrs` in the component's data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\n----------------------------------------\n\nTITLE: Self-Closing Tags in Vue (In-DOM)\nDESCRIPTION: Explains that when writing Vue templates directly in the DOM, explicit closing tags must be used for components.  HTML parsers do not treat custom elements as void elements, so self-closing tags are not reliably interpreted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_32\n\nLANGUAGE: vue-html\nCODE:\n```\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Attribute Binding Escaping in Vue.js - Escaped HTML\nDESCRIPTION: This is the escaped HTML string that vue renders to the page. Note that the onclick attribute has been converted into its HTML entity equivalents.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n&quot; onclick=&quot;alert('hi')\n```\n\n----------------------------------------\n\nTITLE: Object Literals Directive Definition JavaScript\nDESCRIPTION: Defines a custom directive that receives an object literal as its value.  The example shows how to access the properties of the object literal within the directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```\n\n----------------------------------------\n\nTITLE: Running a Vue Project with npm\nDESCRIPTION: These commands navigate to the project directory and then install dependencies and start the development server using npm.  The template syntax `{{'<your-project-name>'}}` will need to be replaced with the actual project name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cd {{'<your-project-name>'}}\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: CSS for Nested Transitions\nDESCRIPTION: This CSS targets nested elements within a transition to create staggered animations. The `transition` property is applied to the inner element, and a `transform` and `opacity` change is specified for the enter-from and leave-to states.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* rules that target nested elements */\n.nested-enter-active .inner,\n.nested-leave-active .inner {\n  transition: all 0.3s ease-in-out;\n}\n\n.nested-enter-from .inner,\n.nested-leave-to .inner {\n  transform: translateX(30px);\n  opacity: 0;\n}\n\n/* ... other necessary CSS omitted */\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue App to String with SSR\nDESCRIPTION: This snippet demonstrates how to render a Vue application to a string using the `renderToString` function from `vue/server-renderer`. It creates a simple Vue app and renders it to HTML, logging the resulting HTML string to the console. It showcases basic server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ msg: 'hello' }),\n  template: `<div>{{ msg }}</div>`\n})\n\n;(async () => {\n  const html = await renderToString(app)\n  console.log(html)\n})()\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Type Parameters in Vue SFC\nDESCRIPTION: This code snippet demonstrates how to declare a generic type parameter `T` within a Vue Single File Component (SFC) using the `generic` attribute on the `<script setup>` tag. It defines props for the component that utilize the generic type `T`. The props are `items`, which is an array of type `T`, and `selected`, which is a single value of type `T`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_29\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"T\">\ndefineProps<{ \n  items: T[]\n  selected: T\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing errorCaptured Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `errorCaptured` lifecycle hook, which is called when an error propagating from a descendant component has been captured. The hook receives the error, the component instance that triggered the error, and an information string specifying the error source type. It allows modifying component state to display an error state to the user.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  errorCaptured?(\n    this: ComponentPublicInstance,\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n  ): boolean | void\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue App to Web Stream\nDESCRIPTION: This snippet demonstrates rendering a Vue application to a Web ReadableStream, which is useful in environments that support the Streams API, such as browsers and serverless functions.  The function `renderToWebStream` from `vue/server-renderer` renders the Vue app into the stream, which is then used to create a Response object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// inside an environment with ReadableStream support\nreturn new Response(renderToWebStream(app))\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue App to Simple Stream\nDESCRIPTION: This snippet shows how to render a Vue application to a simple stream using the `renderToSimpleStream` function.  It defines a simple readable interface with `push` and `destroy` methods to handle chunks of data and errors respectively.  The code appends each chunk to a `res` variable and logs the complete rendered output when finished.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet res = ''\n\nrenderToSimpleStream(\n  app,\n  {},\n  {\n    push(chunk) {\n      if (chunk === null) {\n        // done\n        console(`render complete: ${res}`)\n      } else {\n        res += chunk\n      }\n    },\n    destroy(err) {\n      // error encountered\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Watcher Debugging (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to debug watchers using the `onTrack` and `onTrigger` options. The `onTrack` callback is triggered when a reactive property or ref is tracked as a dependency, and the `onTrigger` callback is triggered when a dependency is mutated. These options only work in development mode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(source, callback, {\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})\n\nwatchEffect(callback, {\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Increment Function in JavaScript\nDESCRIPTION: This JavaScript code defines an `increment` function that increases a number up to a specified maximum value. It takes two arguments: `current` (the number to increment) and `max` (the maximum value, defaulting to 10). If `current` is less than `max`, the function returns `current + 1`; otherwise, it returns `current`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// helpers.js\nexport function increment(current, max = 10) {\n  if (current < max) {\n    return current + 1\n  }\n  return current\n}\n```\n\n----------------------------------------\n\nTITLE: Increment Method in Vue Options API (SFC)\nDESCRIPTION: This code defines a Vue component using the Options API within a Single-File Component (SFC). It initializes a `count` data property to 0 and defines an `increment` method that increments the `count` property when called.  It highlights the `methods` option and the `increment` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      // update component state\n      this.count++\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with v-if in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the `v-if` directive in Vue.js to conditionally render an `<h1>` element. The element will only be rendered if the `awesome` property is truthy. No dependencies are required beyond Vue.js itself. Input is a boolean value for the 'awesome' property. Output is the rendered HTML element if 'awesome' is true.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: This code snippet imports the ApiIndex.vue component within a Vue setup script. This allows the ApiIndex component to be used within the current Vue component to render the API index.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/index.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport ApiIndex from './ApiIndex.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Content Escaping in Vue.js Templates - Escaped HTML\nDESCRIPTION: This is the escaped HTML string that vue renders to the page. Note that the script tag has been converted into its HTML entity equivalents.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\n```\n\n----------------------------------------\n\nTITLE: Trigger Ref Usage\nDESCRIPTION: Demonstrates how to use `triggerRef` to force trigger effects that depend on a shallow ref after deep mutations to its inner value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Self-closing in in-DOM templates\nDESCRIPTION: This vue-html snippet shows the incorrect way to use self-closing tags for Vue components that have no content when using in-DOM templates.  In in-DOM templates, components should not use self-closing, but instead require a closing tag.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In in-DOM templates -->\n<my-component/>\n```\n\n----------------------------------------\n\nTITLE: Component Template with Single Root Node HTML\nDESCRIPTION: Illustrates a component template with a single root node. The custom directive applied to the component will be applied to this root `div` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- template of MyComponent -->\n\n<div> <!-- v-demo directive will be applied here -->\n  <span>My component content</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Stopping a Watcher with watchEffect (Composition API)\nDESCRIPTION: This snippet shows how to manually stop a watcher created with `watchEffect` in the Composition API.  The `watchEffect` function returns a function, `unwatch`, that can be called to stop the watcher. This is necessary for watchers that are not automatically stopped (e.g., asynchronous watchers).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwatch = watchEffect(() => {})\n\n// ...later, when no longer needed\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Typing Provide/Inject with Default Values in Vue.js\nDESCRIPTION: This snippet demonstrates how to provide a default value to `inject` to ensure the injected value is never `undefined`. This eliminates the need for optional chaining or null checks when accessing the injected value, simplifying the code and improving type safety.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = inject<string>('foo', 'bar') // type: string\n```\n\n----------------------------------------\n\nTITLE: Rendering content with v-else-if\nDESCRIPTION: This snippet showcases how to use `v-else-if` directives to render different content based on multiple conditions. It uses the `type` variable to determine which div element to display.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\n----------------------------------------\n\nTITLE: v-on Directive with Argument in Vue\nDESCRIPTION: This code demonstrates the `v-on` directive with an argument in Vue. The `click` event on the `<a>` element is bound to the `doSomething` method of the component. The shorthand for `v-on:` is `@`. This is used for event handling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<a v-on:click=\"doSomething\"> ... </a>\n\n<!-- shorthand -->\n<a @click=\"doSomething\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Script with VitePress and JSON Data\nDESCRIPTION: This Vue setup script fetches developer data using VitePress's `useData` hook and a local JSON file. It uses `onMounted` to update the document title when the component is mounted. It finds a specific developer based on the `developerSlug` parameter in the route.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/developers/[developerSlug].md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\nimport { onMounted, ref } from 'vue'\nimport developersData from './developers.json'\nimport Page from './components/DeveloperPage.vue'\n\nconst { page } = useData()\nconst developer = ref(developersData.find(dev => dev.slug === page.value.params.developerSlug) || {})\n\nonMounted(() => {\n  if (developer.value) {\n    document.title = `${developer.value.name} - Vue Developer | Vue.js`\n  }\n})\n</script>\n\n<Page :developer=\"developer\" />\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Communication with Events (Options API) - Good\nDESCRIPTION: This code shows the preferred pattern for parent-child component communication in Vue using events. The child component emits an event to notify the parent of a change, and the parent handles the event and updates its own state. Uses `emits` to declare emitted events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  emits: ['input'],\n\n  template: `\n    <input\n      :value=\"todo.text\"\n      @input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  emits: ['delete'],\n\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"$emit('delete')\">\n        ×\n      </button>\n    </span>\n  `\n})\n\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Value: With Quotes (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of using quotes for HTML attribute values, enhancing readability and preventing potential issues with spaces in attribute values. This example shows the `type` attribute of an input element enclosed in double quotes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_43\n\nLANGUAGE: vue-html\nCODE:\n```\n<input type=\"text\">\n```\n\n----------------------------------------\n\nTITLE: Invalid HTML Nesting Example HTML\nDESCRIPTION: This HTML snippet demonstrates an invalid nesting structure where a `<div>` is placed inside a `<p>`.  Browsers will automatically correct this during parsing, leading to hydration mismatches in SSR applications.  It's crucial to maintain valid HTML structure when rendering server-side to prevent these mismatches.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<p><div>hi</div></p>\n```\n\n----------------------------------------\n\nTITLE: Testing Stepper Component with Cypress\nDESCRIPTION: This snippet tests a Stepper component using Cypress. It mounts the component, verifies the initial value's visibility and content, clicks the increment button, and asserts the updated value. Cypress is used for component testing in a browser environment.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst valueSelector = '[data-testid=stepper-value]'\nconst buttonSelector = '[data-testid=increment]'\n\nmount(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\ncy.get(valueSelector)\n  .should('be.visible')\n  .and('contain.text', '0')\n  .get(buttonSelector)\n  .click()\n  .get(valueSelector)\n  .should('contain.text', '1')\n```\n\n----------------------------------------\n\nTITLE: Component Root Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$root` property, which represents the root component instance of the current component tree. If the current instance has no parents, this value will be itself.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $root: ComponentPublicInstance\n}\n```\n\n----------------------------------------\n\nTITLE: Passing reactive variable as ref argument (corrected with $$())\nDESCRIPTION: This TypeScript code shows the corrected way to pass a reactive variable to a function expecting a `Ref`. The `$$()` macro is used as an escape hint to prevent `.value` from being appended when compiling.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = $ref(0)\ntrackChange($$(count))\n```\n\n----------------------------------------\n\nTITLE: Type Definition of markRaw() in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the `markRaw()` function, which takes an object of type `T` and returns the same object of type `T`. This prevents the object from being converted to a proxy by Vue's reactivity system.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction markRaw<T extends object>(value: T): T\n```\n\n----------------------------------------\n\nTITLE: Code Splitting with Dynamic Imports in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use dynamic imports for code splitting.  The `import()` function returns a promise that resolves with the module when it's loaded.  This allows for lazy loading of modules, improving initial page load performance. Dependencies are split into a separate chunk.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\n----------------------------------------\n\nTITLE: Define Select Options Data (Composition API) in Vue\nDESCRIPTION: This snippet demonstrates how to define the data (selected value and options array) for the dynamic select example using Vue's Composition API with `ref`. The `selected` ref holds the currently selected value, and `options` ref contains the array of option objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst selected = ref('A')\n\nconst options = ref([\n  { text: 'One', value: 'A' },\n  { text: 'Two', value: 'B' },\n  { text: 'Three', value: 'C' }\n])\n```\n\n----------------------------------------\n\nTITLE: TypeScript in SFC with Script Setup\nDESCRIPTION: Demonstrates using TypeScript with `<script setup>` in Vue Single-File Components (SFCs) by adding the `lang=\"ts\"` attribute to the `<script setup>` tag. This enables TypeScript support within the setup script and template, allowing for type-safe data binding and auto-completion. The example uses `ref` from Vue to create a reactive count variable.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Computed property (Composition API, HTML)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a computed ref `filteredTodos` within a Vue.js application using the Composition API in an HTML context. It uses `ref` to create reactive variables `hideCompleted` and `todos`, and `computed` to create `filteredTodos` which depends on these reactive values.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, ref, computed } from 'vue'\n\ncreateApp({\n  setup() {\n    const hideCompleted = ref(false)\n    const todos = ref([\n      /* ... */\n    ])\n\n    const filteredTodos = computed(() => {\n      // return filtered todos based on\n      // `todos.value` & `hideCompleted.value`\n    })\n\n    return {\n      // ...\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: State-Driven Animation (Composition API)\nDESCRIPTION: This snippet demonstrates state-driven animation in Vue.js using the Composition API.  It tracks the mouse's X position using `ref` and updates the `x` variable. This `x` variable is then used to dynamically change the background color of a div.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = ref(0)\n\nfunction onMousemove(e) {\n  x.value = e.clientX\n}\n```\n\n----------------------------------------\n\nTITLE: Watcher Source Types (Vue.js)\nDESCRIPTION: This code shows different types of reactive sources that can be used with the `watch` function in Vue.js Composition API.  It demonstrates watching a single ref, a getter function, and an array of multiple sources.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = ref(0)\nconst y = ref(0)\n\n// single ref\nwatch(x, (newX) => {\n  console.log(`x is ${newX}`)\n})\n\n// getter\nwatch(\n  () => x.value + y.value,\n  (sum) => {\n    console.log(`sum of x + y is: ${sum}`)\n  }\n)\n\n// array of multiple sources\nwatch([x, () => y.value], ([newX, newY]) => {\n  console.log(`x is ${newX} and y is ${newY}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Deep Selectors in Scoped CSS - Vue\nDESCRIPTION: Illustrates how to use the `:deep()` pseudo-class to target child components within scoped CSS. This allows styles to penetrate the component boundary and affect nested elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.a :deep(.b) {\n  /* ... */\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Options API (Simplified) in Vue.js\nDESCRIPTION: This snippet shows the basic way of declaring props using Options API. The `msg` prop is declared as a String type. Inside the component instance, `this.msg` gives access to the value passed from parent.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in child component\nexport default {\n  props: {\n    msg: String\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Transition Vue HTML\nDESCRIPTION: Example of using the `name` prop on the `<Transition>` component to create a named transition. This will prefix the transition classes with the specified name (e.g., `fade-enter-active` instead of `v-enter-active`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition name=\"fade\">\n  ...\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: DOM Update Timing with nextTick (Composition API)\nDESCRIPTION: This example demonstrates how to use `nextTick` in the Composition API to wait for the DOM to update after a state change. The `increment` function increments the `count` ref and uses `await nextTick()` to ensure the DOM is updated before proceeding.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'vue'\n\nasync function increment() {\n  count.value++\n  await nextTick()\n  // Now the DOM is updated\n}\n```\n\n----------------------------------------\n\nTITLE: Using $$() on destructured props\nDESCRIPTION: This Typescript code shows how `$$()` can be used on destructured props within a component.  It is converted to `toRef` for better efficiency.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { count } = defineProps<{ count: number }>()\n\npassAsRef($$(count))\n```\n\n----------------------------------------\n\nTITLE: Good Expression in Template (computed property)\nDESCRIPTION: Illustrates the recommended practice of using a simple expression in a Vue.js template, relying on a computed property to handle complex logic. This promotes readability and reusability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_34\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In a template -->\n{{ normalizedFullName }}\n```\n\n----------------------------------------\n\nTITLE: Accessing v-model Modifiers with defineModel (Composition API)\nDESCRIPTION: This Vue code demonstrates how to use `defineModel` to access both the bound value and the modifiers when using v-model with arguments and modifiers in the Composition API. It retrieves `firstNameModifiers` and `lastNameModifiers`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst [firstName, firstNameModifiers] = defineModel('firstName')\nconst [lastName, lastNameModifiers] = defineModel('lastName')\n\nconsole.log(firstNameModifiers) // { capitalize: true }\nconsole.log(lastNameModifiers) // { uppercase: true }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Child Component in SFC in Vue.js\nDESCRIPTION: Passes a dynamic prop named 'msg' to a child component named 'ChildComp' using the `v-bind` shorthand syntax (':'). The value of the 'msg' prop is bound to the 'greeting' variable in the parent component's scope.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<ChildComp :msg=\"greeting\" />\n```\n\n----------------------------------------\n\nTITLE: Typing Component Template Refs with ComponentPublicInstance in Vue.js\nDESCRIPTION: This snippet shows how to use `ComponentPublicInstance` when the exact type of the component is not available or important.  It provides a generic component interface that only includes properties shared by all components, such as `$el`. The code imports `useTemplateRef` and `ComponentPublicInstance` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTemplateRef } from 'vue'\nimport type { ComponentPublicInstance } from 'vue'\n\nconst child = useTemplateRef<ComponentPublicInstance>('child')\n```\n\n----------------------------------------\n\nTITLE: Good Component Registration (kebab-case)\nDESCRIPTION: Shows correct usage of kebab-case for component registration via `app.component`, suitable for simpler applications that use only global component registration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\napp.component('my-component', {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple v-model Bindings (Options API)\nDESCRIPTION: Illustrates how to create multiple `v-model` bindings using the Options API in Vue.js. It defines props for `firstName` and `lastName`, emits update events, and binds the values to input elements. Requires Vue.js framework.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  props: {\n    firstName: String,\n    lastName: String\n  },\n  emits: ['update:firstName', 'update:lastName']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Key Attribute with <template v-for>\nDESCRIPTION: This code shows how to properly place the `key` attribute when using `<template v-for>`. The `key` should be placed on the `<template>` container itself.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<template v-for=\"todo in todos\" :key=\"todo.name\">\n  <li>{{ todo.name }}</li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Options Example (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the `$options` property to access custom options defined on a component. It defines a `customOption` and accesses it within the `created` lifecycle hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({\n  customOption: 'foo',\n  created() {\n    console.log(this.$options.customOption) // => 'foo'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for v-bind\nDESCRIPTION: This snippet shows the shorthand syntax for the `v-bind` directive in Vue.js. Instead of `v-bind:attribute`, you can use `:attribute` to bind an attribute to a dynamic value. This example binds the `id` attribute to the `dynamicId` property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :id=\"dynamicId\"></div>\n```\n\n----------------------------------------\n\nTITLE: Good Component Tag in in-DOM template\nDESCRIPTION: Demonstrates the correct usage of kebab-case for a component tag within an in-DOM template in Vue.js. In-DOM templates are case-insensitive and require component names to be kebab-cased.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In in-DOM templates -->\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Vue Single-File Component (Options API)\nDESCRIPTION: This snippet demonstrates a Vue Single-File Component (SFC) using the Options API. It defines a component with a `count` data property, a template with a button to increment the count, and scoped CSS to style the button.\n\nDependencies: None\nInput: None\nOutput: A complete Vue component definition.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Injecting with Symbol Key (Composition API)\nDESCRIPTION: This snippet shows how to inject data using a Symbol injection key in Vue.js Composition API. It imports the Symbol key and injects the associated value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// in injector component\nimport { inject } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nconst injected = inject(myInjectionKey)\n```\n\n----------------------------------------\n\nTITLE: Stopping a Watcher - JavaScript\nDESCRIPTION: Illustrates how to stop a watcher created with the `watch` function in Vue.js. By invoking the returned stop function, the watcher is deactivated and no longer triggers callbacks.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst stop = watch(source, callback)\n\n// when the watcher is no longer needed:\nstop()\n```\n\n----------------------------------------\n\nTITLE: Styling a Skip Link with CSS\nDESCRIPTION: This CSS snippet styles the skip link, hiding it by default and making it visible when focused. It ensures the link is visually accessible when focused, with appropriate styling for background color, padding, and border.  It uses position fixed to keep the skip link in place.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Label with Explicit `for` and `id`\nDESCRIPTION: This code snippet demonstrates the use of labels with explicit `for` and `id` attributes. It provides a proper association between the label and the input field, enhancing accessibility. The `for` attribute of the `<label>` element corresponds to the `id` attribute of the `<input>` element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"name\">Name: </label>\n<input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots in Options API - JSX\nDESCRIPTION: This JSX code shows how to access and render slots using Options API. It accesses the default and named slots, passing props to the named slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_25\n\nLANGUAGE: JSX\nCODE:\n```\n// <div><slot /></div>\n<div>{this.$slots.default()}</div>\n\n// <div><slot name=\"footer\" :text=\"message\" /></div>\n<div>{this.$slots.footer({ text: this.message })}</div>\n```\n\n----------------------------------------\n\nTITLE: Vue Style Binding: With Quotes in Object (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of using quotes for keys within a style object bound using `:style`. This enhances readability. The value of the `width` property is dynamically set.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_44\n\nLANGUAGE: vue-html\nCODE:\n```\n<AppSidebar :style=\"{ width: sidebarWidth + 'px' }\">\n```\n\n----------------------------------------\n\nTITLE: Transforming v-model Value with Modifiers in Vue\nDESCRIPTION: This code shows how to transform the `v-model` value when a modifier is present by using the `get` and `set` transformer options of `defineModel()`.  It implements the trimming functionality based on `.trim` modifier.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst [modelValue, modelModifiers] = defineModel({\n  // get() omitted as it is not needed here\n  set(value) {\n    // if the .trim modifier is used, return trimmed value\n    if (modelModifiers.trim) {\n      return value.trim()\n    }\n    // otherwise, return the value as-is\n    return value\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Computed Property for Filtering (Composition API)\nDESCRIPTION: Shows how to use a computed property to filter an array in Vue.js using the Composition API. The `evenNumbers` computed property returns a new array containing only the even numbers from the `numbers` ref.  This avoids mutating the original data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with Icon Button\nDESCRIPTION: This Vue.js code demonstrates using an icon within a button, accompanied by visually hidden text for screen readers. This allows for a visually appealing button with accessible context.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_19\n\nLANGUAGE: vue-html\nCODE:\n```\n<form role=\"search\">\n  <label for=\"searchIcon\" class=\"hidden-visually\">Search: </label>\n  <input type=\"text\" name=\"searchIcon\" id=\"searchIcon\" v-model=\"searchIcon\" />\n  <button type=\"submit\">\n    <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n    <span class=\"hidden-visually\">Search</span>\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Definition with Async Loading\nDESCRIPTION: Defines a Vue component that imports 'ExampleRepl.vue' asynchronously using `defineAsyncComponent`. It also specifies a `loadingComponent` which is displayed while 'ExampleRepl.vue' is loading. The 'ReplLoading.vue' component is used as the loading indicator.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/examples/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent } from 'vue'\nimport ReplLoading from '@theme/components/ReplLoading.vue'\n\nexport default {\n  components: {\n    ExampleRepl: defineAsyncComponent({\n      loader: () => import('./ExampleRepl.vue'),\n      loadingComponent: ReplLoading\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Component Tag in SFC/String Template (camelCase)\nDESCRIPTION: Shows an incorrect usage of camelCase for a component tag within a Single-File Component (SFC) or string template. PascalCase is preferred for better distinction from HTML elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In Single-File Components and string templates -->\n<myComponent/>\n```\n\n----------------------------------------\n\nTITLE: Accessing v-model Modifiers (Options API)\nDESCRIPTION: This Vue code demonstrates accessing v-model modifiers within the Options API. It defines props for both the base value and the modifiers, and includes the `update` emits. It shows how to log the modifiers in the `created` hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  props: {\n    firstName: String,\n    lastName: String,\n    firstNameModifiers: {\n      default: () => ({})\n    },\n    lastNameModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:firstName', 'update:lastName'],\n  created() {\n    console.log(this.firstNameModifiers) // { capitalize: true }\n    console.log(this.lastNameModifiers) // { uppercase: true }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Reactive Data in Vue.js Template\nDESCRIPTION: This code snippet shows how to display reactive data from a composable within a Vue.js template. The `mouse.x` and `mouse.y` properties, which are linked to the original refs in the composable, are displayed in the template and will update automatically when their values change.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\nMouse position is at: {{ mouse.x }}, {{ mouse.y }}\n```\n\n----------------------------------------\n\nTITLE: Define Select Options Data (Options API) in Vue\nDESCRIPTION: This snippet shows how to define the data for the dynamic select example using Vue's Options API. The `data` function returns an object containing the `selected` property (initial value) and the `options` array.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      selected: 'A',\n      options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Reactive Computed Property (Options API)\nDESCRIPTION: This code defines a computed property `now` within the Options API, but it uses `Date.now()` which is not reactive. This means the computed property will not update automatically, as it doesn't depend on any reactive data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n  now() {\n    return Date.now()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping in Reactive Objects\nDESCRIPTION: Demonstrates how refs are automatically unwrapped when accessed or mutated as properties of a reactive object. This simplifies working with refs in reactive contexts.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Testing Vue Composables with Lifecycle Hooks\nDESCRIPTION: Defines a helper function `withSetup` that allows testing composables which rely on lifecycle hooks or provide/inject functionality. It creates a Vue app instance, mounts it, and returns the composable's result and the app instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// test-utils.js\nimport { createApp } from 'vue'\n\nexport function withSetup(composable) {\n  let result\n  const app = createApp({\n    setup() {\n      result = composable()\n      // suppress missing template warning\n      return () => {}\n    }\n  })\n  app.mount(document.createElement('div'))\n  // return the result and the app instance\n  // for testing provide/unmount\n  return [result, app]\n}\n```\n\n----------------------------------------\n\nTITLE: Component Render Function Definition - Vue.js\nDESCRIPTION: Describes the structure of the `render` option within a Vue component. The render function, programmatically generates the component's virtual DOM tree using JavaScript. This provides maximum flexibility but needs more code compared to the template approach. If both render and template options are specified, `render` takes precedence.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  render?(this: ComponentPublicInstance) => VNodeChild\n}\n\ntype VNodeChild = VNodeChildAtom | VNodeArrayChildren\n\ntype VNodeChildAtom =\n  | VNode\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | void\n\ntype VNodeArrayChildren = (VNodeArrayChildren | VNodeChildAtom)[]\n```\n\n----------------------------------------\n\nTITLE: Bad Import Statement (camelCase)\nDESCRIPTION: Shows bad practice of importing a component using camelCase. Component imports should use PascalCase to follow JavaScript class naming conventions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport myComponent from './MyComponent.vue'\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State with ref() in Vue.js\nDESCRIPTION: This code snippet demonstrates how to declare reactive state using Vue's `ref()` API. It creates a ref object `message` that holds a string value. The inner value is accessed via the `.value` property.  `ref()` can hold any value type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst message = ref('Hello World!')\n\nconsole.log(message.value) // \"Hello World!\"\nmessage.value = 'Changed'\n```\n\n----------------------------------------\n\nTITLE: Teleport with Conditional Disable - Vue HTML\nDESCRIPTION: This example shows the usage of the `disabled` prop of the `<Teleport>` component. When `disabled` is `true`, the content will remain in its original location instead of being moved to the target container. This provides a way to conditionally disable the teleportation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport to=\"#popup\" :disabled=\"displayVideoInline\">\n  <video src=\"./my-movie.mp4\">\n  </video>\n</Teleport>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Uppercase Dynamic Argument in DOM\nDESCRIPTION: Illustrates a potential issue when using dynamic arguments with uppercase characters in in-DOM templates. Browsers will coerce attribute names to lowercase, which can cause issues if the component property has a different case. This is not a concern in Single-File Components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<a :[someAttr]=\"value\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Initializing renderTriggered Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `renderTriggered` lifecycle hook, which is called when a reactive dependency triggers the component's render effect to be re-run. This hook is development-mode-only and not called during server-side rendering. It provides debugging information about what triggered the re-render.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  renderTriggered?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}\n```\n\n----------------------------------------\n\nTITLE: v-for Equivalent JSX - JSX (Options API)\nDESCRIPTION: Demonstrates the equivalent of the `v-for` directive using JSX with Options API. Uses `map` to iterate over an array and generate a list of JSX elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  {this.items.map(({ id, text }) => {\n    return <li key={id}>{text}</li>\n  })}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Component Template with Single Root Element Vue HTML\nDESCRIPTION: This example demonstrates a simple Vue component template with a single root element (button).  Fallthrough attributes applied to the component instance will automatically be applied to this button element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Resolving Component with resolveComponent() in Vue.js Composition API\nDESCRIPTION: This snippet demonstrates resolving a registered component by name using `resolveComponent()` within the composition API setup function. It shows how to render the resolved component using the `h` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, resolveComponent } from 'vue'\n\nexport default {\n  setup() {\n    const ButtonCounter = resolveComponent('ButtonCounter')\n\n    return () => {\n      return h(ButtonCounter)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing beforeMount Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `beforeMount` lifecycle hook, which is called right before a Vue.js component is about to be mounted. At this point, the reactive state is set up, but no DOM nodes have been created yet. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  beforeMount?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Components Globally in Vue.js\nDESCRIPTION: This JavaScript snippet demonstrates how to register base components globally in a Vue.js application using Webpack's `require.context`. It iterates through files matching a specified pattern (e.g., `Base[A-Z]\\w+\\.(vue|js)$`), extracts the component configuration, and registers each component globally using `app.component`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst requireComponent = require.context(\n    './src',\n    true,\n    /Base[A-Z]\\w+\\.(vue|js)$/\n  )\n  requireComponent.keys().forEach(function (fileName) {\n    let baseComponentConfig = requireComponent(fileName)\n    baseComponentConfig =\n      baseComponentConfig.default || baseComponentConfig\n    const baseComponentName =\n      baseComponentConfig.name ||\n      fileName.replace(/^.+//, '').replace(/\\.\\w+$/, '')\n    app.component(baseComponentName, baseComponentConfig)\n  })\n```\n\n----------------------------------------\n\nTITLE: v-model with Arguments Pre 3.4\nDESCRIPTION: Pre 3.4 syntax for using a v-model with arguments in a component using defineProps and defineEmits.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<!-- MyComponent.vue -->\n<script setup>\ndefineProps({\n  title: {\n    required: true\n  }\n})\ndefineEmits(['update:title'])\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avoid v-if with v-for - Good Example 1 - HTML\nDESCRIPTION: Demonstrates the correct way of using a computed property with `v-for` to filter a list, avoiding the use of `v-if` on the same element as `v-for`. This ensures correct data rendering and avoids potential errors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Example Binding Object JavaScript\nDESCRIPTION: Provides an example of the `binding` object structure passed to directive hooks. It shows how to access the argument, modifiers, and value passed to the directive.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  arg: 'foo',\n  modifiers: { bar: true },\n  value: /* value of `baz` */,\n  oldValue: /* value of `baz` from previous update */\n}\n```\n\n----------------------------------------\n\nTITLE: Component Next Tick Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the `$nextTick` method, an instance-bound version of the global `nextTick()` function. The callback passed to `$nextTick()` will have its `this` context bound to the current component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $nextTick(callback?: (this: ComponentPublicInstance) => void): Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots in Composition API - JavaScript\nDESCRIPTION: This code demonstrates how to access and render slots within a component's `setup()` function using the Composition API. It accesses the default and named slots and renders them within `div` elements, passing props to the named slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  props: ['message'],\n  setup(props, { slots }) {\n    return () => [\n      // default slot:\n      // <div><slot /></div>\n      h('div', slots.default()),\n\n      // named slot:\n      // <div><slot name=\"footer\" :text=\"message\" /></div>\n      h(\n        'div',\n        slots.footer({\n          text: props.message\n        })\n      )\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use detailed prop definitions - Bad Example - Javascript\nDESCRIPTION: Shows an example of a poor practice with prop definitions, suitable only for prototyping. It lacks type and validation which can lead to runtime errors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This is only OK when prototyping\nprops: ['status']\n```\n\n----------------------------------------\n\nTITLE: Avoid v-if with v-for - Bad Example - HTML\nDESCRIPTION: Illustrates the incorrect way of using `v-if` on the same element as `v-for`. This can lead to errors because `v-if` is evaluated before `v-for`, so the iteration variable might not be available.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Specifying Complex Types with ref() in Vue\nDESCRIPTION: This snippet shows how to specify complex types for a ref's inner value using the `Ref` type. In this example, `year` is explicitly typed as a `Ref<string | number>`, allowing it to hold either a string or a number.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport type { Ref } from 'vue'\n\nconst year: Ref<string | number> = ref('2020')\n\nyear.value = 2020 // ok!\n```\n\n----------------------------------------\n\nTITLE: Method Definition (Options API)\nDESCRIPTION: This snippet defines a method called `calculateBooksMessage` within the Options API. The method checks if the author has books and returns 'Yes' or 'No' accordingly.  Unlike computed properties, methods are invoked on every re-render and are not cached.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Track Function for Dependency Tracking\nDESCRIPTION: Demonstrates the `track()` function, which is responsible for registering the currently active effect as a subscriber to a specific property of an object. This function is invoked during property access within a reactive context, establishing the dependency relationship.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This will be set right before an effect is about\n// to be run. We'll deal with this later.\nlet activeEffect\n\nfunction track(target, key) {\n  if (activeEffect) {\n    const effects = getSubscribersForProperty(target, key)\n    effects.add(activeEffect)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Component Tag in in-DOM template\nDESCRIPTION: Demonstrates the incorrect usage of PascalCase for a component tag within an in-DOM template in Vue.js. In-DOM templates are case-insensitive and require component names to be kebab-cased.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In in-DOM templates -->\n<MyComponent></MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Using `is` attribute as a workaround in Vue\nDESCRIPTION: Demonstrates using the `is` attribute as a workaround for element placement restrictions.  By placing a custom component on a valid HTML element (e.g., `<tr>`) and setting `is` to the component name (prefixed with `vue:`), you can ensure the component is correctly rendered within the restricted element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_35\n\nLANGUAGE: vue-html\nCODE:\n```\n<table>\n  <tr is=\"vue:blog-post-row\"></tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Component with v-on Listener Vue HTML\nDESCRIPTION: This snippet shows how to pass a `v-on` listener to a component. If the component's root element is a native element, the listener will be bound to that element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyButton @click=\"onClick\" />\n```\n\n----------------------------------------\n\nTITLE: Event Modifiers - JSX\nDESCRIPTION: Shows how to use event modifiers like `.capture`, `.once` and `.passive` within JSX. Modifiers are concatenated to the event name in camelCase.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<input\n  onClickCapture={() => {}}\n  onKeyupOnce={() => {}}\n  onMouseoverOnceCapture={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using pnpm\nDESCRIPTION: This command installs the necessary dependencies for the VueJS documentation website using pnpm, a package manager. It's a prerequisite for running the website locally.\nSOURCE: https://github.com/vuejs/docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Using Components in DOM Vue-HTML\nDESCRIPTION: Illustrates how to use components when templates are authored directly in the DOM (e.g., inside a native `<template>` element).  Requires using `kebab-case` for component tag names and explicit closing tags due to the browser's HTML parsing behavior.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>\n```\n\n----------------------------------------\n\nTITLE: Disable attribute inheritance (Options API)\nDESCRIPTION: This code demonstrates how to disable attribute inheritance for a Vue component using the Options API. It defines props and emits, and uses `inheritAttrs: false` to prevent automatic attribute fallthrough.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  inheritAttrs: false,\n  props: ['label', 'value'],\n  emits: ['input']\n}\n</script>\n\n<template>\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    />\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Readonly Proxy with readonly() in Vue.js\nDESCRIPTION: Creates a readonly proxy to the original object using the `readonly()` function. The proxy is deep, meaning nested properties are also readonly. Mutating the copy will fail and result in a warning.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst original = reactive({ count: 0 })\n\nconst copy = readonly(original)\n\nwatchEffect(() => {\n  // works for reactivity tracking\n  console.log(copy.count)\n})\n\n// mutating original will trigger watchers relying on the copy\noriginal.count++\n\n// mutating the copy will fail and result in a warning\ncopy.count++ // warning!\n```\n\n----------------------------------------\n\nTITLE: Destructuring v-for Item Alias in Vue Template\nDESCRIPTION: This demonstrates destructuring the `item` alias within the `v-for` directive to directly access its `message` property. The second example shows destructuring with the index alias as well.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"{ message } in items\">\n  {{ message }}\n</li>\n\n<!-- with index alias -->\n<li v-for=\"({ message }, index) in items\">\n  {{ message }} {{ index }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Checking if a value is a Ref in Vue.js (isRef)\nDESCRIPTION: The `isRef` function checks if a given value is a ref object in Vue.js. It utilizes a type predicate to narrow the type of the input if it is indeed a ref, allowing for type-safe access to the ref's value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isRef<T>(r: Ref<T> | unknown): r is Ref<T>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: unknown\nif (isRef(foo)) {\n  // foo's type is narrowed to Ref<unknown>\n  foo.value\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App (Composition API)\nDESCRIPTION: This snippet demonstrates how to initialize a Vue application using the Composition API. It creates a new Vue app instance, defines a reactive `count` ref, and mounts the app to an HTML element with the ID 'app'.\n\nDependencies: vue\nInput: None\nOutput: A Vue application instance mounted to the DOM.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Accessing Fallthrough Attributes in Setup Function Javascript\nDESCRIPTION: This code demonstrates how to access fallthrough attributes within a component's `setup()` function.  Fallthrough attributes are available in the `ctx.attrs` object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Props Definition with Empty Lines - Composition API - JavaScript\nDESCRIPTION: Shows how to define component props using the Composition API in Vue.js, with empty lines for better readability. The code uses `defineProps` and `computed` with spaces between properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps({\n  value: {\n    type: String,\n    required: true\n  },\n\n  focused: {\n    type: Boolean,\n    default: false\n  },\n\n  label: String,\n  icon: String\n})\n\nconst formattedValue = computed(() => {\n  // ...\n})\n\nconst inputClasses = computed(() => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Child Component (Options API)\nDESCRIPTION: This snippet showcases how to import and register a child component using the Options API within a Vue.js SFC. It imports the component and then registers it within the `components` option of the default export, making it available for use in the template. The object property shorthand is used for concise registration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ChildComp from './ChildComp.vue'\n\nexport default {\n  components: {\n    ChildComp\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Component with Hydrate on Media Query\nDESCRIPTION: This snippet demonstrates how to use `hydrateOnMediaQuery` with an async component for lazy hydration, hydrating when the specified media query matches.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent, hydrateOnMediaQuery } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n```\n\n----------------------------------------\n\nTITLE: Deactivated Hook Type Definition - TypeScript\nDESCRIPTION: Defines the type signature for the 'deactivated' lifecycle hook in Vue.js components. This hook is called when a component instance is removed from the DOM as part of a tree cached by `<KeepAlive>`. It provides a method to execute code when the component is deactivated.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ComponentOptions {\n  deactivated?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Class as Prop Type (Options API)\nDESCRIPTION: This snippet demonstrates how to use a custom class `Person` as the type for a prop named `author` within Options API. Vue will validate whether the prop's value is an instance of the class.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  props: {\n    author: Person\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Props Definition with Empty Lines - Options API - JavaScript\nDESCRIPTION: Shows how to define component props using the Options API in Vue.js, with empty lines for improved readability.  Empty lines between multi-line properties can make components easier to skim and navigate.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n\n  focused: {\n    type: Boolean,\n    default: false\n  },\n\n  label: String,\n  icon: String\n},\n\ncomputed: {\n  formattedValue() {\n    // ...\n  },\n\n  inputClasses() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-bind Directive with Argument in Vue\nDESCRIPTION: This code demonstrates the `v-bind` directive with an argument in Vue. The `href` attribute of the `<a>` element is bound to the `url` property of the component. The shorthand for `v-bind:` is `:`. This is used to reactively update HTML attributes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<a v-bind:href=\"url\"> ... </a>\n\n<!-- shorthand -->\n<a :href=\"url\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Definition with Async Loading\nDESCRIPTION: This code defines a Vue component that uses `defineAsyncComponent` to load `TutorialRepl.vue` asynchronously.  It also specifies a `loadingComponent` to display while the asynchronous component is loading.  This improves initial page load performance by deferring the loading of the `TutorialRepl` component.  The component is imported from `./TutorialRepl.vue`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAsyncComponent } from 'vue'\nimport ReplLoading from '@theme/components/ReplLoading.vue'\n\nexport default {\n  components: {\n    TutorialRepl: defineAsyncComponent({\n      loader: () => import('./TutorialRepl.vue'),\n      loadingComponent: ReplLoading\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Distribution with Slots in Vue\nDESCRIPTION: Demonstrates how to use Vue's `<slot>` element to pass content to a component.  The `<slot>` acts as a placeholder where the passed content will be rendered within the component's template. This allows for flexible content injection and customization of components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n<AlertBox>\n  Something bad happened.\n</AlertBox>\n```\n\n----------------------------------------\n\nTITLE: Deep Watcher in Options API (Vue.js)\nDESCRIPTION: This code demonstrates how to create a deep watcher in Vue.js using the Options API.  The `deep: true` option ensures that the callback is triggered on all nested mutations of the watched object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  watch: {\n    someObject: {\n      handler(newValue, oldValue) {\n        // Note: `newValue` will be equal to `oldValue` here\n        // on nested mutations as long as the object itself\n        // hasn't been replaced.\n      },\n      deep: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Teleport with Defer - Vue HTML\nDESCRIPTION: This example demonstrates using the `defer` prop in the `<Teleport>` component. When `defer` is set to `true`, the Teleport component will defer resolving its target until after other parts of the application have been mounted. This is useful for cases where the target element might not be immediately available in the DOM.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Bun\nDESCRIPTION: This command uses bun to install and execute create-vue, the official Vue project scaffolding tool. It guides you through setting up a new Vue project with optional features like TypeScript and testing support.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ bun create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Scoped Slots - JSX\nDESCRIPTION: This code shows how to render a scoped slot with JSX in the parent component. It passes a function to the child component as a slot, which receives data from the child.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_30\n\nLANGUAGE: JSX\nCODE:\n```\n<MyComponent>{{\n  default: ({ text }) => <p>{ text }</p>  \n}}</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Block\nDESCRIPTION: This code snippet shows the script setup block in a Vue component.  It imports the 'PartnerAll.vue' component and makes it available for use in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport PartnerAll from './components/PartnerAll.vue'\n</script>\n\n<PartnerAll />\n```\n\n----------------------------------------\n\nTITLE: Transition with Key Attribute - Vue HTML\nDESCRIPTION: This snippet demonstrates forcing a transition by changing the `key` attribute of the element wrapped within the `<Transition>` component.  The transition is triggered whenever the `text` variable changes, as Vue tracks changes to the `key` attribute for efficient updates.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition>\n  <div :key=\"text\">{{ text }}</div>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Vue v-slot Directive: Shorthand (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of exclusively using the shorthand notation (#) for the `v-slot` directive, ensuring consistency throughout the codebase. This approach promotes improved readability and maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_53\n\nLANGUAGE: vue-html\nCODE:\n```\n<template #header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template #footer>\n  <p>Here's some contact info</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type signature for inject() in TypeScript\nDESCRIPTION: Presents the TypeScript type signatures for the `inject()` function in Vue.js Composition API, including versions with and without default values, and with a factory function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// without default value\nfunction inject<T>(key: InjectionKey<T> | string): T | undefined\n\n// with default value\nfunction inject<T>(key: InjectionKey<T> | string, defaultValue: T): T\n\n// with factory\nfunction inject<T>(\n  key: InjectionKey<T> | string,\n  defaultValue: () => T,\n  treatDefaultAsFactory: true\n): T\n```\n\n----------------------------------------\n\nTITLE: Vue Transition Component with Explicit Duration in HTML\nDESCRIPTION: This Vue.js transition component specifies an explicit transition duration of 550 milliseconds using the `duration` prop.  This is useful when dealing with nested transitions or when the transitionend event is not being detected correctly.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition :duration=\"550\">...</Transition>\n```\n\n----------------------------------------\n\nTITLE: Listening for Emitted Events in Parent Component (SFC)\nDESCRIPTION: This snippet demonstrates how a parent component listens for the 'response' event emitted by a child component using the `v-on` directive (shorthand `@`).  The handler function receives the argument passed from the child and assigns it to a local state variable `childMsg`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<ChildComp @response=\"(msg) => childMsg = msg\" />\n```\n\n----------------------------------------\n\nTITLE: Watching Template Ref Changes\nDESCRIPTION: Illustrates how to watch for changes in a template ref using `watchEffect` from Vue's Composition API, accounting for the possibility of the ref being null. The watcher checks if the `input.value` is not null before focusing the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // not mounted yet, or the element was unmounted (e.g. by v-if)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue.js Invalid Dynamic Argument\nDESCRIPTION: Shows an invalid example of a dynamic argument expression due to the presence of spaces and quotes within the expression. This will trigger a compiler warning. Suggests using a computed property for complex dynamic arguments.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- This will trigger a compiler warning. -->\n<a :['foo' + bar]=\"value\"> ... </a>\n```\n\n----------------------------------------\n\nTITLE: Rendering User-Provided HTML with v-html\nDESCRIPTION: This example shows how to render user-provided HTML using the `v-html` directive. Use this with caution, as it can introduce security vulnerabilities if the HTML is not sanitized properly. Only use when you know the HTML is safe.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div v-html=\"userProvidedHtml\"></div>\n```\n\n----------------------------------------\n\nTITLE: Vue Transition Component with Animation Type in HTML\nDESCRIPTION: This Vue.js transition component specifies the `type` prop as \"animation\". This is used when both CSS transitions and animations are applied to the same element to tell Vue to listen for animationend events.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition type=\"animation\">...</Transition>\n```\n\n----------------------------------------\n\nTITLE: Regular style attribute (Vue)\nDESCRIPTION: Illustrates how the v-bind `:style` directive coexists with regular style attributes, where `:style` takes precedence, overriding the inline style.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\n```\n\n----------------------------------------\n\nTITLE: Advanced Transition CSS\nDESCRIPTION: CSS styles for a slide-fade transition, using different durations and easing curves for enter and leave animations. It transitions both `opacity` and `transform: translateX(20px)`. \nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/*\n  Enter and leave animations can use different\n  durations and timing functions.\n*/\n.slide-fade-enter-active {\n  transition: all 0.3s ease-out;\n}\n\n.slide-fade-leave-active {\n  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\n}\n\n.slide-fade-enter-from,\n.slide-fade-leave-to {\n  transform: translateX(20px);\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Application with Single-File Component in JavaScript\nDESCRIPTION: This snippet shows how to create a Vue application instance with a root component imported from a Single-File Component (SFC).  It imports `createApp` from 'vue' and a component from a `.vue` file, then uses the component as the argument to `createApp`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n----------------------------------------\n\nTITLE: Vue Global Build Example - Composition API\nDESCRIPTION: This example demonstrates how to use the global build of Vue with the Composition API. It creates a simple Vue application that displays a message in a div element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Injecting with Symbol Key (Options API)\nDESCRIPTION: This snippet shows how to inject data using a Symbol injection key in Vue.js Options API. It uses the `inject` option to specify the Symbol key and maps it to a local property called `injected`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// in injector component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  inject: {\n    injected: { from: myInjectionKey }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Transition Example - Vue HTML\nDESCRIPTION: This example shows a basic usage of the `<Transition>` component in a Vue template. It wraps a `div` element that is conditionally rendered based on the `ok` variable, providing a transition effect when the element is toggled.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition>\n  <div v-if=\"ok\">toggled content</div>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Install Testing Dependencies for Vue Project (Vitest)\nDESCRIPTION: This command installs Vitest, happy-dom, and @testing-library/vue as development dependencies in a Vite-based Vue project. These libraries are used for unit testing Vue components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D vitest happy-dom @testing-library/vue\n```\n\n----------------------------------------\n\nTITLE: classObject data property (Options API)\nDESCRIPTION: Defines a data property within Vue's Options API that holds an object representing class bindings. This allows for dynamic class application based on the properties within the object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Result of Multiple Teleports\nDESCRIPTION: This snippet shows the resulting HTML when multiple `<Teleport>` components target the same element. The content is appended in the order the `<Teleport>` components are defined.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"modals\">\n  <div>A</div>\n  <div>B</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complex Prop Types with Runtime Declaration in Vue\nDESCRIPTION: This snippet shows how to define a complex prop type using runtime declaration with the `PropType` utility type. This is useful when you need to specify a more complex type for a prop at runtime.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\n\nconst props = defineProps({\n  book: Object as PropType<Book>\n})\n```\n\n----------------------------------------\n\nTITLE: Inject value using Options API in Vue.js\nDESCRIPTION: This code shows how to inject a value using the `inject` option in Vue.js' Options API. The `inject` option is an array of injection keys.  The injected values become available on the component instance (e.g., `this.message`).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // injected value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-processors in Vue SFC\nDESCRIPTION: This snippet demonstrates the usage of pre-processors like Pug and SCSS within a Vue Single-File Component. The `lang` attribute in the `<template>` and `<style>` blocks specifies the pre-processor to use. Requires appropriate loaders or plugins configured in your build toolchain (e.g., Vite, Vue CLI).\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template lang=\"pug\">\np {{ msg }}\n</template>\n\n<style lang=\"scss\">\n  $primary-color: #333;\n  body {\n    color: $primary-color;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Property with Arrow Function in Vue.js\nDESCRIPTION: This snippet illustrates how to define a computed property using an arrow function in Vue.js. As with data functions, arrow functions do not bind `this`. The component instance is passed as the first argument (vm), allowing access to component data within the computed property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    aDouble: (vm) => vm.a * 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Modules Inject Name - Vue\nDESCRIPTION: Demonstrates how to customize the property key used to inject CSS Modules classes by providing a value to the `module` attribute.  This allows for a more descriptive or project-specific name for the injected object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module=\"classes\">\n.red {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Transition Hooks in Options API JavaScript\nDESCRIPTION: This snippet demonstrates how to define JavaScript transition hooks within Vue's Options API. It presents a `methods` object containing functions that correspond to different stages in the transition lifecycle.  Similar to the Composition API example, the `done` callback is vital for JavaScript-only transitions to signal completion.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  methods: {\n    // called before the element is inserted into the DOM.\n    // use this to set the \"enter-from\" state of the element\n    onBeforeEnter(el) {},\n\n    // called one frame after the element is inserted.\n    // use this to start the animation.\n    onEnter(el, done) {\n      // call the done callback to indicate transition end\n      // optional if used in combination with CSS\n      done()\n    },\n\n    // called when the enter transition has finished.\n    onAfterEnter(el) {},\n\n    // called when the enter transition is cancelled before completion.\n    onEnterCancelled(el) {},\n\n    // called before the leave hook.\n    // Most of the time, you should just use the leave hook.\n    onBeforeLeave(el) {},\n\n    // called when the leave transition starts.\n    // use this to start the leaving animation.\n    onLeave(el, done) {\n      // call the done callback to indicate transition end\n      // optional if used in combination with CSS\n      done()\n    },\n\n    // called when the leave transition has finished and the\n    // element has been removed from the DOM.\n    onAfterLeave(el) {},\n\n    // only available with v-show transitions\n    onLeaveCancelled(el) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Vue App to Web Writable Stream\nDESCRIPTION: This snippet demonstrates how to pipe the output of a Vue application rendered server-side to a Web WritableStream. It uses the `pipeToWebWritable` function in conjunction with a `TransformStream` to create a `ReadableStream` that can be used as the body of a `Response`. It is useful in environments such as CloudFlare workers.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// TransformStream is available in environments such as CloudFlare workers.\n// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'\nconst { readable, writable } = new TransformStream()\npipeToWebWritable(app, {}, writable)\n\nreturn new Response(readable)\n```\n\n----------------------------------------\n\nTITLE: Good Prop Declaration (camelCase Options API)\nDESCRIPTION: Illustrates the correct usage of camelCase for prop declaration inside a Vue component's options API. Prop names should always be camelCase when declared in JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nprops: {\n  greetingText: String\n}\n```\n\n----------------------------------------\n\nTITLE: Injection Default Value with Factory (Composition API)\nDESCRIPTION: This shows how to use a factory function to provide a default value for an injected property using Vue.js Composition API. If the key is not provided, the factory function is called to create the default value, avoiding unnecessary computation. The third argument to `inject` set to `true` indicates that the second argument is a factory function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = inject('key', () => new ExpensiveClass(), true)\n```\n\n----------------------------------------\n\nTITLE: Define Custom Element with TypeScript\nDESCRIPTION: Defines a TypeScript class for a custom element, including properties, methods, and event definitions. It also exports a type `SomeElementAttributes` to specify which properties should be exposed for type checking in framework templates and `SomeElementEvents` to define the event types the element dispatches.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// file: some-lib/src/SomeElement.ts\n\n// Define a class with typed JS properties.\nexport class SomeElement extends HTMLElement {\n  foo: number = 123\n  bar: string = 'blah'\n\n  lorem: boolean = false\n\n  // This method should not be exposed to template types.\n  someMethod() {\n    /* ... */\n  }\n\n  // ... implementation details omitted ...\n  // ... assume the element dispatches events named \"apple-fell\" ...\n}\n\ncustomElements.define('some-element', SomeElement)\n\n// This is a list of properties of SomeElement that will be selected for type\n// checking in framework templates (f.e. Vue SFC templates). Any other\n// properties will not be exposed.\nexport type SomeElementAttributes = 'foo' | 'bar'\n\n// Define the event types that SomeElement dispatches.\nexport type SomeElementEvents = {\n  'apple-fell': AppleFellEvent\n}\n\nexport class AppleFellEvent extends Event {\n  /* ... details omitted ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering content with v-if\nDESCRIPTION: This snippet demonstrates the use of the `v-if` directive to conditionally render an h1 element. The element is displayed only when the `awesome` variable is truthy.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Directives Vue\nDESCRIPTION: Demonstrates how to use globally and locally registered custom directives within `<script setup>`.  Local directives must follow the naming scheme `vNameOfDirective`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst vMyDirective = {\n  beforeMount: (el) => {\n    // do something with the element\n  }\n}\n</script>\n<template>\n  <h1 v-my-directive>This is a Heading</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Provide Option: Per-Component State (Vue.js)\nDESCRIPTION: Shows how to use a function with the `provide` option in Vue.js to provide per-component state. This allows components to provide reactive data to their descendants, although the initial provided value is not reactive itself.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      msg: 'foo'\n    }\n  },\n  provide() {\n    return {\n      msg: this.msg\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Debugging Hooks (Composition API)\nDESCRIPTION: This snippet demonstrates how to use `onRenderTracked` and `onRenderTriggered` lifecycle hooks in Vue's Composition API to debug component re-renders. A debugger statement is placed within the callbacks to interactively inspect the dependencies being tracked and triggering updates. This only works in development mode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onRenderTracked, onRenderTriggered } from 'vue'\n\nonRenderTracked((event) => {\n  debugger\n})\n\nonRenderTriggered((event) => {\n  debugger\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering mounted Hook (Options API, JavaScript)\nDESCRIPTION: Demonstrates registering the `mounted` lifecycle hook in a Vue component using the Options API. This hook is called after the component has been mounted to the DOM. The `this` context points to the current active instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watcher Options in Vue.js\nDESCRIPTION: Shows how to use the `flush`, `onTrack`, and `onTrigger` options with `watchEffect()`. `flush` controls when the watcher is triggered, while `onTrack` and `onTrigger` allow debugging dependencies.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwatchEffect(() => {}, {\n  flush: 'post',\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering onMounted Hook (Composition API, Vue)\nDESCRIPTION: Demonstrates registering the `onMounted` lifecycle hook in a Vue component using the Composition API. This hook is called after the component has been mounted to the DOM. Requires importing `onMounted` from 'vue'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Slot Content in Child Component (SFC)\nDESCRIPTION: This code snippet shows how to define a slot in a child component using Vue.js single-file components (SFC). The `<slot/>` element acts as a placeholder where the parent component's slot content will be rendered.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in child template -->\n<slot/>\n```\n\n----------------------------------------\n\nTITLE: Component Data Option in Vue.js\nDESCRIPTION: This code shows how to declare reactive state using the `data` component option in Vue. The `data` option should be a function that returns an object containing the reactive properties. This is for Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      message: 'Hello World!'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-root Component Template Vue HTML\nDESCRIPTION: This code shows a template with multiple root nodes.  Without explicitly binding `$attrs`, Vue will issue a warning because it cannot determine where to apply fallthrough attributes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Rendering using :is in Vue\nDESCRIPTION: Illustrates how to dynamically render different components using the `<component>` element and the `:is` attribute. The value of `:is` determines which component is rendered. The rendered component is determined by the value of `currentTab`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Component changes when currentTab changes -->\n<component :is=\"currentTab\"></component>\n```\n\n----------------------------------------\n\nTITLE: Binding Style to Object (Vue)\nDESCRIPTION: Binds the `style` attribute to a JavaScript object, allowing dynamic styling based on data properties.  This demonstrates basic object binding for inline styles in Vue.js.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Good Multi-Attribute Component (multi-line)\nDESCRIPTION: Demonstrates the recommended practice of defining a component with multiple attributes on separate lines for improved readability. Each attribute should have its own line.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_32\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent\n  foo=\"a\"\n  bar=\"b\"\n  baz=\"c\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering a Component in JavaScript\nDESCRIPTION: This code demonstrates how to register a component globally with a Vue application. The `app.component()` function is called with the component's name and its definition, making it available for use in any component within the application.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.component('TodoDeleteButton', TodoDeleteButton)\n```\n\n----------------------------------------\n\nTITLE: Vue Transition Component with Separate Enter/Leave Durations in HTML\nDESCRIPTION: This Vue.js transition component specifies separate durations for the enter and leave transitions using an object passed to the `duration` prop.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition :duration=\"{ enter: 500, leave: 800 }\">...</Transition>\n```\n\n----------------------------------------\n\nTITLE: Binding Style with kebab-case (Vue)\nDESCRIPTION: Demonstrates that kebab-cased CSS property keys are also supported with style binding in Vue.js.  This is useful when copy-pasting style rules directly from CSS.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_23\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Components Vue\nDESCRIPTION: Illustrates how components can be directly used as custom component tag names within the template.  The component is imported and then used directly in the template. PascalCase component tags are recommended.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <MyComponent />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Data Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$data` property on a Vue component instance. It represents the reactive data object managed by the component. The component instance proxies access to properties on this data object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $data: object\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw HTML using v-html Directive in Vue\nDESCRIPTION: This code snippet demonstrates rendering raw HTML using the `v-html` directive in a Vue template.  The `rawHtml` property from the component instance is interpreted as HTML and rendered within the `<span>` element. This allows dynamic insertion of HTML content, but it's crucial to use it carefully to avoid XSS vulnerabilities.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n----------------------------------------\n\nTITLE: Increment Method in Vue Options API (HTML)\nDESCRIPTION: This code defines a Vue component using the Options API. It initializes a `count` data property to 0 and defines an `increment` method that increments the `count` property when called.  It highlights the `methods` option and the `increment` function.  This version is typically used when not utilizing Single File Components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      // update component state\n      this.count++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Input Event (Composition API) in Vue.js\nDESCRIPTION: This JavaScript snippet shows how to handle the `input` event in Vue.js using the Composition API.  It updates the `text.value` with the value from the input element's event. The event handler receives the native DOM event as an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction onInput(e) {\n  // a v-on handler receives the native DOM event\n  // as the argument.\n  text.value = e.target.value\n}\n```\n\n----------------------------------------\n\nTITLE: Use detailed prop definitions - Bad Example - Javascript - Composition API\nDESCRIPTION: Shows an example of a poor practice with prop definitions in Composition API, suitable only for prototyping. It lacks type and validation which can lead to runtime errors.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// This is only OK when prototyping\nconst props = defineProps(['status'])\n```\n\n----------------------------------------\n\nTITLE: Checked Names Data (Options API - Javascript)\nDESCRIPTION: Defines a 'checkedNames' data property within a Vue component using the Options API. This array will hold the values of multiple checked checkboxes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      checkedNames: []\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Yarn\nDESCRIPTION: These commands use Yarn to install and execute create-vue, the official Vue project scaffolding tool.  It guides you through setting up a new Vue project with optional features like TypeScript and testing support.  Different commands are provided to cover different versions of Yarn.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\n----------------------------------------\n\nTITLE: Virtual DOM Example in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a simple virtual DOM (VDOM) node, representing a `<div>` element with an `id` property and potentially child nodes.  It shows the basic structure of a VDOM node as a plain JavaScript object with `type`, `props`, and `children` properties. This is a simplified representation of how Vue internally represents DOM elements before rendering them.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Component Attributes Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$attrs` property, which contains the component's fallthrough attributes.  Fallthrough Attributes are attributes and event handlers passed by the parent component, but not declared as a prop or an emitted event by the child.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $attrs: object\n}\n```\n\n----------------------------------------\n\nTITLE: Select Options Value Bindings in Vue\nDESCRIPTION: This snippet demonstrates binding an object literal as the value of a select option. When this option is selected, the `selected` variable will contain the object `{ number: 123 }`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_19\n\nLANGUAGE: vue-html\nCODE:\n```\n<select v-model=\"selected\">\n  <!-- inline object literal -->\n  <option :value=\"{ number: 123 }\">123</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Bad Component Registration (camelCase)\nDESCRIPTION: Illustrates incorrect usage of camelCase for component registration using `app.component` in Vue.js. Component names should be PascalCase in JS/JSX or kebab-case for simpler applications with global component registration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\napp.component('myComponent', {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Method Definition (Composition API)\nDESCRIPTION: This snippet defines a function called `calculateBooksMessage` using the Composition API. The function checks if the author has books and returns 'Yes' or 'No' accordingly. Like methods in the Options API, this function will be executed on every re-render, lacking the caching benefits of computed properties.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// in component\nfunction calculateBooksMessage() {\n  return author.books.length > 0 ? 'Yes' : 'No'\n}\n```\n\n----------------------------------------\n\nTITLE: Checked Names Ref (Composition API - Javascript)\nDESCRIPTION: Defines a reactive variable 'checkedNames' using `ref([])` from Vue's Composition API. This array will be used to store the values of multiple checked checkboxes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkedNames = ref([])\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with v-for and Props\nDESCRIPTION: This snippet shows how to render a component for each item in an array using `v-for`, and how to pass dynamic prop values using `v-bind`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<BlogPost\n  v-for=\"post in posts\"\n  :key=\"post.id\"\n  :title=\"post.title\"\n />\n```\n\n----------------------------------------\n\nTITLE: Reactive Style Object (Composition API)\nDESCRIPTION: Defines a reactive object using Vue's Composition API to represent a style object. This allows for dynamic styling based on the properties within the object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})\n```\n\n----------------------------------------\n\nTITLE: Bad Multi-Attribute Element (single line)\nDESCRIPTION: Illustrates the bad practice of defining an element with multiple attributes on a single line. Elements with multiple attributes should span multiple lines for better readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_29\n\nLANGUAGE: vue-html\nCODE:\n```\n<img src=\"https://vuejs.org/images/logo.png\" alt=\"Vue Logo\">\n```\n\n----------------------------------------\n\nTITLE: ES2015 Shorthand for Local Component Registration in Vue.js\nDESCRIPTION: Shows the ES2015 property shorthand syntax for registering a component locally. This is equivalent to `ComponentA: ComponentA` but more concise.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Component Tag in SFC/String Template\nDESCRIPTION: Illustrates incorrect usage of kebab-case for a component tag within a Single-File Component (SFC) or a string template in Vue.js. The recommended casing for component tags in these contexts is PascalCase for consistency with JavaScript class naming conventions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In Single-File Components and string templates -->\n<mycomponent/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Options API Vue Component\nDESCRIPTION: This snippet demonstrates how to declare props in a Vue component using the Options API. It defines a 'title' prop and renders it within the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Ref Usage in Vue Component\nDESCRIPTION: Demonstrates how to use the custom debounced ref within a Vue component using the Composition API with `<script setup>` syntax.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useDebouncedRef } from './debouncedRef'\nconst text = useDebouncedRef('hello')\n</script>\n\n<template>\n  <input v-model=\"text\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Method Definition with Argument (Composition API)\nDESCRIPTION: Defines a `say` method that takes a `message` argument using Vue's Composition API. When called, the method displays an alert containing the provided message. This method is designed to be called from an inline handler in the template, passing a custom message as an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction say(message) {\n  alert(message)\n}\n```\n\n----------------------------------------\n\nTITLE: TransitionGroup Example - Vue HTML\nDESCRIPTION: This code shows the usage of `<TransitionGroup>` to animate a list of items. The `tag` prop specifies the container element (`ul`), and the `name` prop provides a base name for the CSS transition classes. Each child element must have a unique `key`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<TransitionGroup tag=\"ul\" name=\"slide\">\n  <li v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </li>\n</TransitionGroup>\n```\n\n----------------------------------------\n\nTITLE: Side Effect Cleanup with Callback Argument (Options API) - JavaScript\nDESCRIPTION: This demonstrates passing the cleanup function as the 3rd argument in `watch` within the Options API, which works in Vue versions before 3.5.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  watch: {\n    id(newId, oldId, onCleanup) {\n      // ...\n      onCleanup(() => {\n        // cleanup logic\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Proxy vs. Original - Options API - JavaScript\nDESCRIPTION: Illustrates the difference between the reactive proxy and the original object when assigning a new object to a reactive property in Vue 3 using the Options API.  The original object is left intact and not made reactive, emphasizing the importance of accessing reactive state via `this`.  Dependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      someObject: {}\n    }\n  },\n  mounted() {\n    const newObject = {}\n    this.someObject = newObject\n\n    console.log(newObject === this.someObject) // false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kebab-case Component Names in Vue (In-DOM)\nDESCRIPTION: Demonstrates the need to use kebab-case component names when writing templates directly in the DOM. Due to HTML's case-insensitive nature, PascalCase component names must be converted to kebab-case for the browser to correctly interpret them.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_30\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- kebab-case in HTML -->\n<blog-post post-title=\"hello!\" @update-post=\"onUpdatePost\"></blog-post>\n```\n\n----------------------------------------\n\nTITLE: Running a Vue Project with Yarn\nDESCRIPTION: These commands navigate to the project directory and then install dependencies and start the development server using Yarn. The template syntax `{{'<your-project-name>'}}` will need to be replaced with the actual project name.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ cd {{'<your-project-name>'}}\n$ yarn\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Providing Options in a Plugin - Vue.js\nDESCRIPTION: Demonstrates how to use `app.provide` within a Vue plugin to make the plugin's options available for injection in components. This code snippet shows that `options`, representing the translation object, is provided with the key 'i18n'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Modules with Composition API Example - Vue\nDESCRIPTION: Complete example showcasing the usage of CSS Modules with the Composition API in a Vue.js component.  It demonstrates importing `useCssModule`, accessing the generated class names, and binding them to the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCssModule } from 'vue'\n\nconst classes = useCssModule()\n</script>\n\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing Refs with Composition API (ref before 3.5)\nDESCRIPTION: Demonstrates how to access template refs in Vue versions before 3.5 using the Composition API. It initializes a ref with `null`, assigns it to the element using the `ref` attribute in the template, and then accesses the element in the `onMounted` lifecycle hook to focus the input element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multiple v-model Bindings (HTML)\nDESCRIPTION: Demonstrates how to use multiple `v-model` bindings on a single component instance, targeting different props. Each `v-model` syncs to a different prop without extra component options. Requires Vue.js framework.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Bad Component Folder/File Names (abbreviations)\nDESCRIPTION: Illustrates the bad practice of using abbreviations in component folder and file names. Full words should be preferred for clarity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_20\n\nLANGUAGE: null\nCODE:\n```\ncomponents/\n|- SdSettings.vue\n|- UProfOpts.vue\n```\n\n----------------------------------------\n\nTITLE: Compiled output of $$() on destructured props\nDESCRIPTION: This Javascript code demonstrates the compiled output where `$$()` is used on destructured props. The prop is converted to ref via `toRef` function.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsetup(props) {\n  const __props_count = toRef(props, 'count')\n  passAsRef(__props_count)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Props in Composition API with defineProps\nDESCRIPTION: This snippet demonstrates how to access props declared with `defineProps` in the Composition API. It showcases how `defineProps` returns an object containing all the props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst props = defineProps(['title'])\nconsole.log(props.title)\n```\n\n----------------------------------------\n\nTITLE: Extends Option: Basic Usage (Vue.js)\nDESCRIPTION: Illustrates how to use the `extends` option to extend a base component in Vue.js. The extended component inherits the options of the base component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst CompA = { ... }\n\nconst CompB = {\n  extends: CompA,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Component Template (Vue)\nDESCRIPTION: A simple Vue component template defining a paragraph element with pre-defined classes. This showcases the structure of a basic Vue component template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>\n```\n\n----------------------------------------\n\nTITLE: Component Data Option in Vue.js with createApp\nDESCRIPTION: This code shows how to declare reactive state using the `data` component option in Vue within the `createApp` function. The `data` option should be a function that returns an object containing the reactive properties. This is for Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreateApp({\n  data() {\n    return {\n      message: 'Hello World!'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Bad Prop Declaration (kebab-case)\nDESCRIPTION: Illustrates the incorrect usage of kebab-case for prop declaration inside a Vue component's options API. Prop names should always be camelCase when declared in JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nprops: {\n  'greeting-text': String\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with defineEmits in Composition API\nDESCRIPTION: Illustrates emitting a custom event using the `emit` function returned by `defineEmits` within the Composition API with script setup.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst emit = defineEmits(['enlarge-text'])\n\nemit('enlarge-text')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: This script imports VTCodeGroup and VTCodeGroupTab components from the @vue/theme library, likely for use within a Vue component setup.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VTCodeGroup, VTCodeGroupTab } from '@vue/theme'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events (Composition API)\nDESCRIPTION: Shows how to declare emitted events using the `defineEmits` macro within the Composition API with script setup.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\ndefineEmits(['enlarge-text'])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Delimiters for Text Interpolation in Vue.js\nDESCRIPTION: This example demonstrates adjusting the delimiters used for text interpolation within the template using the `delimiters` compiler option.  It's typically used to avoid conflicting with server-side frameworks that also use mustache syntax. The example changes the delimiters to ES6 template string style.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Delimiters changed to ES6 template string style\napp.config.compilerOptions.delimiters = ['${', '}']\n```\n\n----------------------------------------\n\nTITLE: Custom Element HTML Usage with Props\nDESCRIPTION: This shows how boolean and number props are passed as attributes to the custom element defined with Vue. Vue automatically converts these attributes (which are strings in HTML) to the correct JavaScript types within the component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_7\n\nLANGUAGE: Vue HTML\nCODE:\n```\n<my-element selected index=\"1\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Renderless Component: MouseTracker with Scoped Slots\nDESCRIPTION: This code illustrates a renderless component called `MouseTracker`. It leverages a scoped slot to provide mouse coordinates (x, y) to the parent component, which then renders the information.  The `v-slot` directive is used to receive the slot props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n<MouseTracker v-slot=\"{ x, y }\">\n  Mouse is at: {{ x }}, {{ y }}\n</MouseTracker>\n```\n\n----------------------------------------\n\nTITLE: State-Driven Animation (Options API)\nDESCRIPTION: This snippet demonstrates state-driven animation in Vue.js using the Options API. It tracks the mouse's X position and updates the `x` variable. This `x` variable is then used to dynamically change the background color of a div.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      x: 0\n    }\n  },\n  methods: {\n    onMousemove(e) {\n      this.x = e.clientX\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue v-bind Directive: Longhand (Preferred)\nDESCRIPTION: Demonstrates the alternative preferred practice of using only the longhand notation (`v-bind:`) for the `v-bind` directive. This also ensures consistency and improves code readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_49\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  v-bind:value=\"newTodoText\"\n  v-bind:placeholder=\"newTodoInstructions\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using Vue from CDN\nDESCRIPTION: This script tag includes the Vue.js library directly from a CDN. This approach is suitable for simpler projects or enhancing existing HTML without a build step.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Compiled code with $$() on reactive variable\nDESCRIPTION: This JavaScript code shows the compiled output of the previous TypeScript code. Using `$$()` around the reactive variable count ensures that the ref itself is passed to the trackChange function, instead of its value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nlet count = ref(0)\ntrackChange(count)\n```\n\n----------------------------------------\n\nTITLE: Shallow Reactive Usage\nDESCRIPTION: Illustrates how to use `shallowReactive` to create an object where only root-level properties are reactive, not nested objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// mutating state's own properties is reactive\nstate.foo++\n\n// ...but does not convert nested objects\nisReactive(state.nested) // false\n\n// NOT reactive\nstate.nested.bar++\n```\n\n----------------------------------------\n\nTITLE: watch() with Side Effect Cleanup (Options API) - JavaScript\nDESCRIPTION: This code demonstrates side effect cleanup in a `watch` callback using the Options API. Similar to the Composition API example, it uses `AbortController` to abort a stale fetch request using `onWatcherCleanup`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onWatcherCleanup } from 'vue'\n\nexport default {\n  watch: {\n    id(newId) {\n      const controller = new AbortController()\n\n      fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n        // callback logic\n      })\n\n      onWatcherCleanup(() => {\n        // abort stale request\n        controller.abort()\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Way Data Binding with v-bind and v-on in Vue.js\nDESCRIPTION: This snippet demonstrates how to create a two-way data binding on an input element using `v-bind` to bind the value and `v-on` to listen for the `input` event. This example is within the context of Vue.js.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<input :value=\"text\" @input=\"onInput\">\n```\n\n----------------------------------------\n\nTITLE: Functional Component Definition - Composition API - JavaScript\nDESCRIPTION: This code shows how to define a functional component using the Composition API. The function signature is similar to the `setup()` hook, receiving `props` and a context object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction MyComponent(props, { slots, emit, attrs }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Text with Expression in Vue.js Template\nDESCRIPTION: This snippet demonstrates rendering dynamic text in a Vue.js template using a JavaScript expression within the mustache syntax. It reverses the `message` string.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1>{{ message.split('').reverse().join('') }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Building a Vue Project with pnpm\nDESCRIPTION: This command builds a production-ready version of the Vue application using pnpm.  The output is typically placed in a `./dist` directory.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm run build\n```\n\n----------------------------------------\n\nTITLE: Avoid Mutation in Computed Properties\nDESCRIPTION: Highlights the importance of avoiding mutation of the original array in computed properties, especially when using `reverse()` or `sort()`.  The correct approach is to create a copy of the array before calling these methods to ensure immutability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n- return numbers.reverse()\n+ return [...numbers].reverse()\n```\n\n----------------------------------------\n\nTITLE: Component B - Options API - Vue\nDESCRIPTION: This Vue component (ComponentB.vue) imports the shared `store` and makes it available as a data property.  It utilizes the Options API to achieve this. The template displays the `count` property from the store, mirroring ComponentA.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_6\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- ComponentB.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Emitted Events (Options API)\nDESCRIPTION: Shows how to declare emitted events using the `emits` option within the Options API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['enlarge-text']\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: v-model with Custom Modifier (HTML)\nDESCRIPTION: Example of using a custom modifier named `capitalize` on a `v-model` binding in the template. It modifies the behavior of the v-model.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\n----------------------------------------\n\nTITLE: useSlots() Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type for the `useSlots()` function, which returns the slots object from the Setup Context, including parent-passed slots as callable functions. It's intended for use in `<script setup>` where the setup context object is not available. `defineSlots()` is preferred when using TypeScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSlots(): Record<string, (...args: any[]) => VNode[]>\n```\n\n----------------------------------------\n\nTITLE: Emitting Event with Arguments Vue HTML\nDESCRIPTION: This snippet shows how to emit an event with an argument from a Vue.js template. Clicking the button emits the 'increaseBy' event along with the value `1` as an argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_5\n\nLANGUAGE: Vue-HTML\nCODE:\n```\n<button @click=\"$emit('increaseBy', 1)\">\n  Increase by 1\n</button>\n```\n\n----------------------------------------\n\nTITLE: Reactive props destructure in Vue component\nDESCRIPTION: This TypeScript code demonstrates destructuring props in a `<script setup>` block using `defineProps` with Reactivity Transform. Default values and local aliasing are automatically handled.  The example uses a type-only props declaration and demonstrates default value setting and aliasing.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n  interface Props {\n    msg: string\n    count?: number\n    foo?: string\n  }\n\n  const {\n    msg,\n    // default value just works\n    count = 1,\n    // local aliasing also just works\n    // here we are aliasing `props.foo` to `bar`\n    foo: bar\n  } = defineProps<Props>()\n\n  watchEffect(() => {\n    // will log whenever the props change\n    console.log(msg, count, bar)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using `aria-label` for Accessible Name\nDESCRIPTION: This code demonstrates how to use the `aria-label` attribute to provide an accessible name for an input field.  The `aria-label` attribute overrides the default label and provides a custom accessible name that assistive technologies can use.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"name\">Name: </label>\n<input\n  type=\"text\"\n  name=\"name\"\n  id=\"name\"\n  v-model=\"name\"\n  :aria-label=\"nameLabel\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Emits Option Interface Definition TypeScript\nDESCRIPTION: Defines the TypeScript interface for the `emits` option in Vue.js component options, including array and object syntax, and the `EmitValidator` type.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  emits?: ArrayEmitsOptions | ObjectEmitsOptions\n}\n\ntype ArrayEmitsOptions = string[]\n\ntype ObjectEmitsOptions = { [key: string]: EmitValidator | null }\n\ntype EmitValidator = (...args: unknown[]) => boolean\n```\n\n----------------------------------------\n\nTITLE: Initializing beforeCreate Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `beforeCreate` lifecycle hook, which is called when a Vue.js component instance is initialized. This hook is executed immediately after the instance is created and before properties are defined as reactive. The `this` context is bound to the ComponentPublicInstance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  beforeCreate?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Public Properties with expose()\nDESCRIPTION: Illustrates how to use the `expose()` function to limit the properties exposed to a parent component via template refs. This allows selective exposure of local state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup(props, { expose }) {\n    // make the instance \"closed\" -\n    // i.e. do not expose anything to the parent\n    expose()\n\n    const publicCount = ref(0)\n    const privateCount = ref(0)\n    // selectively expose local state\n    expose({ count: publicCount })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Store Directly in Template - Vue\nDESCRIPTION: This Vue template demonstrates directly mutating the shared store's `count` property within a component's template using a button's `click` handler.  While functional, this is generally discouraged for maintainability reasons.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_7\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n  <button @click=\"store.count++\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building a Vue Project with Bun\nDESCRIPTION: This command builds a production-ready version of the Vue application using Bun. The output is typically placed in a `./dist` directory.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ bun run build\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for Updating A2\nDESCRIPTION: Introduces a function `update` to encapsulate the calculation of `A2` based on `A0` and `A1`.  This demonstrates the concept of a side effect and sets the stage for creating a reactive system that automatically calls this function when `A0` or `A1` changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet A2\n\nfunction update() {\n  A2 = A0 + A1\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Custom Event\nDESCRIPTION: Demonstrates how to listen to a custom event ('enlarge-text') emitted by the BlogPost component using `v-on` or `@`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />\n```\n\n----------------------------------------\n\nTITLE: Binding Style with postFontSize\nDESCRIPTION: Demonstrates how to bind a style attribute to a div using the `postFontSize` to dynamically control the font size.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Parent Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$parent` property, which represents the parent instance of the current component, if it has one. It will be `null` for the root instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $parent: ComponentPublicInstance | null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing activated Lifecycle Hook in Vue.js\nDESCRIPTION: Defines the `activated` lifecycle hook, which is called after the component instance is inserted into the DOM as part of a tree cached by `<KeepAlive>`. This hook is not called during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  activated?(this: ComponentPublicInstance): void\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Accessible Placeholders\nDESCRIPTION: This CSS snippet provides styles to ensure that placeholder text meets color contrast requirements for accessibility. It targets different browsers to override default placeholder styles.  Specifically, it addresses Firefox's opacity setting.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* https://www.w3schools.com/howto/howto_css_placeholder.asp */\n\n#lastName::placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: black;\n  opacity: 1; /* Firefox */\n}\n\n#lastName:-ms-input-placeholder {\n  /* Internet Explorer 10-11 */\n  color: black;\n}\n\n#lastName::-ms-input-placeholder {\n  /* Microsoft Edge */\n  color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Prop Types with Type-Based Declaration in Vue\nDESCRIPTION: Demonstrates using a complex type for a prop using type-based declaration with an interface.  The `book` prop is typed as the `Book` interface.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nconst props = defineProps<{  book: Book\n}>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Transition Event Hooks in Vue HTML\nDESCRIPTION: This snippet demonstrates how to bind JavaScript hooks to events on the `<Transition>` component in Vue. These hooks allow you to control the transition process at various stages, such as before entering, during entering, after entering, before leaving, during leaving, and after leaving.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @after-enter=\"onAfterEnter\"\n  @enter-cancelled=\"onEnterCancelled\"\n  @before-leave=\"onBeforeLeave\"\n  @leave=\"onLeave\"\n  @after-leave=\"onAfterLeave\"\n  @leave-cancelled=\"onLeaveCancelled\"\n>\n  <!-- ... -->\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Use multi-word component names - Good Example - HTML\nDESCRIPTION: Demonstrates the correct way of naming components, using multi-word names to avoid conflicts with existing and future HTML elements. This snippet shows both pre-compiled and in-DOM template examples.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in pre-compiled templates -->\n<TodoItem />\n\n<!-- in in-DOM templates -->\n<todo-item></todo-item>\n```\n\n----------------------------------------\n\nTITLE: Expose Option Interface Definition TypeScript\nDESCRIPTION: Defines the TypeScript interface for the `expose` option in Vue.js component options, specifying the properties to be exposed to the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  expose?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Component Slots Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$slots` property, which represents the slots passed by the parent component.  `Slot` is defined as a function that returns an array of VNodes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $slots: { [name: string]: Slot }\n}\n\ntype Slot = (...args: any[]) => VNode[]\n```\n\n----------------------------------------\n\nTITLE: v-if Equivalent JSX - JSX (Composition API)\nDESCRIPTION: Shows the equivalent of the `v-if` directive using JSX with Composition API.  Uses a ternary operator to conditionally render different elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div>{ok.value ? <div>yes</div> : <span>no</span>}</div>\n```\n\n----------------------------------------\n\nTITLE: Transition CSS for Background Color\nDESCRIPTION: This CSS snippet applies a transition effect to the background color property of the `movearea` class, making the color change smoother.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.movearea {\n  transition: 0.3s background-color ease;\n}\n```\n\n----------------------------------------\n\nTITLE: Never Use Non-trusted Templates in Vue.js\nDESCRIPTION: This example demonstrates the dangerous practice of using user-provided content directly as a Vue component template. This is equivalent to allowing arbitrary JavaScript execution and can lead to security vulnerabilities.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Cloning VNodes with cloneVNode() in Vue.js\nDESCRIPTION: This snippet demonstrates the usage of the `cloneVNode()` function in Vue.js. It shows how to clone a VNode and merge extra props with the original VNode.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, cloneVNode } from 'vue'\n\nconst original = h('div')\nconst cloned = cloneVNode(original, { id: 'foo' })\n```\n\n----------------------------------------\n\nTITLE: Debouncing Method with Lodash in Vue\nDESCRIPTION: This code snippet demonstrates how to use Lodash's debounce function within a Vue component's methods. However, it highlights the problem of shared state when the component is reused, leading to potential interference between instances. The debounced function is defined directly in the `methods` object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { debounce } from 'lodash-es'\n\nexport default {\n  methods: {\n    // Debouncing with Lodash\n    click: debounce(function () {\n      // ... respond to click ...\n    }, 500)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition of onScopeDispose() in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the `onScopeDispose()` function.  It registers a dispose callback on the current active [effect scope]. The callback will be invoked when the associated effect scope is stopped.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onScopeDispose(fn: () => void, failSilently?: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Vue v-slot Directive: Longhand (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of exclusively using the longhand notation (v-slot:) for the `v-slot` directive, ensuring consistency throughout the codebase. This approach promotes improved readability and maintainability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_52\n\nLANGUAGE: vue-html\nCODE:\n```\n<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template v-slot:footer>\n  <p>Here's some contact info</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding Ctrl + Click Mouse Event in Vue.js\nDESCRIPTION: This code snippet shows how to bind a Vue.js method to the `click` event of a div element, triggering the method only when the Ctrl key is pressed during the click. The `doSomething` method will be executed when the user clicks the div while holding down the Ctrl key.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n----------------------------------------\n\nTITLE: MyModal Component (Options API)\nDESCRIPTION: This snippet shows the implementation of the <MyModal> component using the Options API. It uses the data option to manage the open/close state of the modal and includes the modal's template and styles. The modal is styled with fixed positioning and a z-index.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      open: false\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots in Options API - JavaScript\nDESCRIPTION: This code demonstrates how to access and render slots within a component's `render()` function using the Options API. It accesses the default and named slots from `this.$slots` and renders them within `div` elements, passing props to the named slot.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  props: ['message'],\n  render() {\n    return [\n      // <div><slot /></div>\n      h('div', this.$slots.default()),\n\n      // <div><slot name=\"footer\" :text=\"message\" /></div>\n      h(\n        'div',\n        this.$slots.footer({\n          text: this.message\n        })\n      )\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component\nDESCRIPTION: This script block imports the DeveloperLanding.vue component for use within the page. The 'setup' attribute indicates that the script uses the Composition API.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/developers/index.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport DeveloperLanding from './components/DeveloperLanding.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Augmenting Component Instance Properties in Vue.js\nDESCRIPTION: Demonstrates how to use declaration merging to augment the `ComponentCustomProperties` interface, allowing you to add custom global properties to the Vue component instance. This is useful for injecting dependencies or providing custom utility functions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Element Type Definition (TypeScript)\nDESCRIPTION: This TypeScript interface defines the type for the `$el` property, which represents the root DOM node managed by the component instance.  It will be `undefined` until the component is mounted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentPublicInstance {\n  $el: any\n}\n```\n\n----------------------------------------\n\nTITLE: Vue v-on Directive: Shorthand (Preferred)\nDESCRIPTION: Demonstrates the preferred practice of using only the shorthand notation (`@`) for the `v-on` directive. This ensures consistency and enhances code readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_50\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  @input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n\n----------------------------------------\n\nTITLE: Vue Reactive Rendering with watchEffect\nDESCRIPTION: Illustrates how to use `watchEffect` to reactively update the DOM.  The `document.body.innerHTML` is updated whenever `count.value` changes.  This demonstrates the core principle of Vue's reactive rendering, though Vue components use more efficient DOM update mechanisms.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watchEffect } from 'vue'\n\nconst count = ref(0)\n\nwatchEffect(() => {\n  document.body.innerHTML = `Count is: ${count.value}`\n})\n\n// updates the DOM\ncount.value++\n```\n\n----------------------------------------\n\nTITLE: Vue CLI configuration for Reactivity Transform\nDESCRIPTION: This JavaScript code shows how to configure Reactivity Transform in a Vue CLI project.  The `reactivityTransform` option is added to the `vue-loader` options using `chainWebpack`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => {\n        return {\n          ...options,\n          reactivityTransform: true\n        }\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Template with Existing Class Attribute Vue HTML\nDESCRIPTION: This template shows a Vue component's root element already having a class attribute.  Inherited classes from the parent will be merged with this existing class.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Transitions in Vue HTML\nDESCRIPTION: This snippet shows how to disable automatic CSS transition detection by setting the `:css` prop to `false` on the `<Transition>` component. This is recommended when using JavaScript-only transitions to prevent CSS rules from accidentally interfering with the animation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<Transition\n  ...\n  :css=\"false\"\n>\n  ...\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of Reactivity\nDESCRIPTION: Demonstrates the lack of reactivity in plain JavaScript when updating variables. It illustrates that changing a variable does not automatically update other variables that depend on it. This serves as a contrast to Vue's reactivity system.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet A0 = 1\nlet A1 = 2\nlet A2 = A0 + A1\n\nconsole.log(A2) // 3\n\nA0 = 2\nconsole.log(A2) // Still 3\n```\n\n----------------------------------------\n\nTITLE: Watching a Property with Options API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to use the `watch` option in the Vue.js Options API to watch a data property and execute a callback function whenever the property's value changes. The `count` data property is initialized to 0, and the `watch` option is used to log the new count value to the console whenever it changes. The callback function receives the new value as an argument, allowing for reactive side effects based on changes in component data.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-10/description.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  watch: {\n    count(newCount) {\n      // yes, console.log() is a side effect\n      console.log(`new count is: ${newCount}`)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: inheritAttrs Option Type Definition\nDESCRIPTION: Defines the type for the `inheritAttrs` option in Vue.js component options. This option controls whether the default component attribute fallthrough behavior should be enabled.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  inheritAttrs?: boolean // default: true\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Basic Usage (Vue.js)\nDESCRIPTION: Illustrates the basic usage of the `inject` option in Vue.js to inject properties from ancestor providers into the current component. It demonstrates injecting a single property named 'foo'.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: ['foo'],\n  created() {\n    console.log(this.foo)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Data Fetching\nDESCRIPTION: This code snippet demonstrates the setup of a Vue component using the composition API within a VuePress environment. It imports 'useData' from 'vitepress' to retrieve the current page's data. Specifically, it accesses the 'partnerId' from the 'page.params' object and passes it as a prop to the 'Page' component (assumed to be 'PartnerPage.vue').\nSOURCE: https://github.com/vuejs/docs/blob/main/src/partners/[partnerId].md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\nimport Page from './components/PartnerPage.vue'\n\nconst { page } = useData()\n</script>\n\n<Page :partner=\"page.params.partnerId\" />\n```\n\n----------------------------------------\n\nTITLE: withModifiers Helper - JSX\nDESCRIPTION: Demonstrates how to use the `withModifiers` helper function to apply event modifiers like `.self` within JSX.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<div onClick={withModifiers(() => {}, ['self'])} />\n```\n\n----------------------------------------\n\nTITLE: createRenderer Usage Example in JavaScript\nDESCRIPTION: Demonstrates how to use the `createRenderer` function from `@vue/runtime-core` to create a custom renderer. It shows how to pass in platform-specific implementations for manipulating host nodes and elements via the `RendererOptions`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/custom-renderer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRenderer } from '@vue/runtime-core'\n\n  const { render, createApp } = createRenderer({\n    patchProp,\n    insert,\n    remove,\n    createElement\n    // ...\n  })\n\n  // `render` is the low-level API\n  // `createApp` returns an app instance\n  export { render, createApp }\n\n  // re-export Vue core APIs\n  export * from '@vue/runtime-core'\n```\n\n----------------------------------------\n\nTITLE: Destructuring to Enable Ref Unwrapping in Templates\nDESCRIPTION: Shows how destructuring a ref property into a top-level property in the template render context allows for ref unwrapping to occur.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { id } = object\n```\n\n----------------------------------------\n\nTITLE: Version Check Inside a Plugin\nDESCRIPTION: Demonstrates how to perform a version check within a plugin to ensure compatibility.  It accesses the application's version using app.version, parses the major version number, and issues a warning if the version is below 3.  This ensures that the plugin functions correctly with the target Vue version.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  install(app) {\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      console.warn('This plugin requires Vue 3')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Good Multi-Attribute Element (multi-line)\nDESCRIPTION: Demonstrates the recommended practice of defining an element with multiple attributes on separate lines for improved readability.  Each attribute should have its own line.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_31\n\nLANGUAGE: vue-html\nCODE:\n```\n<img\n  src=\"https://vuejs.org/images/logo.png\"\n  alt=\"Vue Logo\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using v-html Directive in Vue.js\nDESCRIPTION: This snippet showcases the `v-html` directive in Vue.js for updating the `innerHTML` of an element. It's important to note that the content provided to `v-html` is rendered as plain HTML and Vue template syntax is not processed. Avoid using it with user-provided content due to potential XSS vulnerabilities.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-html=\"html\"></div>\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Class to Array (Vue)\nDESCRIPTION: Binds the `class` attribute to an array of class names.  This applies all classes listed in the array to the element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\n----------------------------------------\n\nTITLE: Non-Reactive Computed Property (Composition API)\nDESCRIPTION: This code defines a computed property `now` using the Composition API that returns the current timestamp using `Date.now()`. Because `Date.now()` is not a reactive dependency, the computed property will not update automatically.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = computed(() => Date.now())\n```\n\n----------------------------------------\n\nTITLE: Type signature for hasInjectionContext() in TypeScript\nDESCRIPTION: Displays the TypeScript type signature for the `hasInjectionContext()` function in Vue.js Composition API. It takes no arguments and returns a boolean value.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasInjectionContext(): boolean\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hydration Mismatch Warning\nDESCRIPTION: This HTML snippet demonstrates using the `data-allow-mismatch` attribute to suppress hydration mismatch warnings during server-side rendering (SSR).  The attribute is added to an element whose content is dynamically generated, such as a date formatted using `toLocaleString()`.  This can be useful when the client-side and server-side renderings might produce slightly different outputs.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Object with Key, Value and Index in Vue\nDESCRIPTION: This demonstrates iterating through an object's properties with `v-for`, accessing the value, key, and index of each property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with pnpm\nDESCRIPTION: This command uses pnpm to install and execute create-vue, the official Vue project scaffolding tool, guiding you through setting up a new Vue project with optional features.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Inject value and use in data() Options API\nDESCRIPTION: This code demonstrates injecting a value and utilizing it within the `data()` option of a Vue.js component using the Options API. This allows you to initialize component data based on injected values. The injection happens before the component's own state is initialized.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  inject: ['message'],\n  data() {\n    return {\n      // initial data based on injected value\n      fullMessage: this.message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue App to Node.js Stream\nDESCRIPTION: This snippet demonstrates how to render a Vue application to a Node.js Readable stream using the `renderToNodeStream` function from `vue/server-renderer`. The rendered stream is then piped to the HTTP response object, making it suitable for server-side rendering in Node.js environments. This assumes that `app` is a valid Vue app instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)\n```\n\n----------------------------------------\n\nTITLE: Locally Registering Async Component (Options API)\nDESCRIPTION: This snippet demonstrates how to register an async component locally using the options API. The component is only available within the scope of the parent component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Analogy for Scoped Slots\nDESCRIPTION: This JavaScript code provides an analogy to explain scoped slots. It shows how the default slot is passed as a function, and the child component calls this function with props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nMyComponent({\n  // passing the default slot, but as a function\n  default: (slotProps) => {\n    return `${slotProps.text} ${slotProps.count}`\n  }\n})\n\nfunction MyComponent(slots) {\n  const greetingMessage = 'hello'\n  return `<div>${\n    // call the slot function with props!\n    slots.default({ text: greetingMessage, count: 1 })\n  }</div>`\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Event\nDESCRIPTION: Shows how to emit a custom event ('enlarge-text') from a Vue component using the `$emit` method within a button's click handler.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Good Import Statement (PascalCase)\nDESCRIPTION: Shows proper import statement with PascalCase. Component imports should use PascalCase to follow JavaScript class naming conventions.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport MyComponent from './MyComponent.vue'\n```\n\n----------------------------------------\n\nTITLE: Creating Template Refs - Options API - JavaScript\nDESCRIPTION: This code shows how to create a template ref using the Options API.  The ref name is passed as a string in the vnode props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  render() {\n    // <div ref=\"divEl\">\n    return h('div', { ref: 'divEl' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Block with src import in Vue SFC\nDESCRIPTION: Demonstrates importing external resources into custom blocks within a Vue SFC. The `src` attribute allows importing content, useful for project-specific needs such as unit tests or documentation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<unit-test src=\"./unit-test.js\">\n</unit-test>\n```\n\n----------------------------------------\n\nTITLE: Directives Option Type Definition\nDESCRIPTION: Defines the type for the `directives` option in Vue.js component options. This option allows registering directives to be made available to the component instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ComponentOptions {\n  directives?: { [key: string]: Directive }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Injection in Vue.js Templates\nDESCRIPTION: This example demonstrates a potential URL injection vulnerability in Vue templates.  It is important to sanitize URLs server side to prevent JavaScript execution using the javascript: protocol.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\n----------------------------------------\n\nTITLE: Vue HTML Template Example with Dynamic Bindings\nDESCRIPTION: This Vue HTML template shows examples of dynamic bindings with classes, ids, values, and text content.  The compiler infers the type of updates needed for each element based on the bindings, allowing for optimized patching using patch flags. The examples show bindings for class, id, value, and text content within a div and input element.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Options API in Vue.js\nDESCRIPTION: This code snippet demonstrates how to declare and emit a custom event named 'response' from a Vue.js component using the Options API. It defines the `emits` option to declare the event and uses `this.$emit` within the `created` lifecycle hook to trigger the event, passing a string argument.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // declare emitted events\n  emits: ['response'],\n  created() {\n    // emit with argument\n    this.$emit('response', 'hello from child')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watcher with Nested Key in Options API (Vue.js)\nDESCRIPTION: This code demonstrates how to watch a nested key within an object using the Options API in Vue.js.  It specifies a dot-delimited path as the key to watch for changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  watch: {\n    // Note: only simple paths. Expressions are not supported.\n    'some.nested.key'(newValue) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable corepack\nDESCRIPTION: This command enables corepack, a tool for managing package managers like pnpm. It ensures the correct version of pnpm is used for the project.\nSOURCE: https://github.com/vuejs/docs/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Communication with Prop Mutation (Composition API) - Bad\nDESCRIPTION: This code demonstrates the discouraged pattern of directly mutating a prop passed down from a parent component, within Composition API.  It uses `getCurrentInstance` to access the parent and modify the parent's props. This is an anti-pattern that makes it harder to track state changes.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n</script>\n\n<template>\n  <input v-model=\"todo.text\" />\n</template>\n\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getCurrentInstance } from 'vue'\n\nconst props = defineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst instance = getCurrentInstance()\n\nfunction removeTodo() {\n  const parent = instance.parent\n  if (!parent) return\n\n  parent.props.todos = parent.props.todos.filter((todo) => {\n    return todo.id !== props.todo.id\n  })\n}\n</script>\n\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"removeTodo\">×</button>\n  </span>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Ref Unwrapping in Templates (Top-Level Property)\nDESCRIPTION: This example showcases ref unwrapping in Vue templates when the ref is a top-level property in the template render context. `count` is unwrapped automatically.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_25\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ count + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Reactive with same object\nDESCRIPTION: Demonstrates how calling `reactive()` on the same object returns the same proxy. This ensures consistent access to the reactive state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// calling reactive() on the same object returns the same proxy\nconsole.log(reactive(raw) === proxy) // true\n\n// calling reactive() on a proxy returns itself\nconsole.log(reactive(proxy) === proxy) // true\n```\n\n----------------------------------------\n\nTITLE: Conditional Watch Logic (Composition API)\nDESCRIPTION: This code demonstrates a pattern for handling asynchronous data loading within a `watchEffect` watcher.  Instead of creating the watcher asynchronously, the logic within the watcher is made conditional, so it only executes when the asynchronous data has been loaded. This avoids the need to manually stop the watcher.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// data to be loaded asynchronously\nconst data = ref(null)\n\nwatchEffect(() => {\n  if (data.value) {\n    // do something when data is loaded\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Array with Options API in Vue\nDESCRIPTION: This code snippet demonstrates how to initialize an array of objects within the `data` option when using the Options API in Vue.  This makes the `items` array available to the Vue component.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript onServerPrefetch() Type Definition\nDESCRIPTION: Defines the type signature for the onServerPrefetch function in Vue.js. It accepts a callback function that returns a Promise. The callback is executed during server-side rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onServerPrefetch(callback: () => Promise<any>): void\n```\n\n----------------------------------------\n\nTITLE: CSS Transitions for Enter/Leave Animations\nDESCRIPTION: This CSS snippet defines the transition properties for enter and leave animations applied to list items within the `<TransitionGroup>`. It uses `opacity` and `translateX` to create a fade-in and slide-in effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n```\n\n----------------------------------------\n\nTITLE: Template for Options API Watcher Example\nDESCRIPTION: This code snippet provides the Vue.js template corresponding to the Options API watcher example. It includes an input field bound to the 'question' property and displays the 'answer' property.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<p>\n  Ask a yes/no question:\n  <input v-model=\"question\" :disabled=\"loading\" />\n</p>\n<p>{{ answer }}</p>\n```\n\n----------------------------------------\n\nTITLE: Building a Vue Project with npm\nDESCRIPTION: This command builds a production-ready version of the Vue application using npm.  The output is typically placed in a `./dist` directory.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Good Prop Use in in-DOM Template (kebab-case)\nDESCRIPTION: Illustrates the correct usage of kebab-case for props within an in-DOM template in Vue.js. In-DOM templates require props to be kebab-cased due to HTML's case insensitivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n// for in-DOM templates\n<welcome-message greeting-text=\"hi\"></welcome-message>\n```\n\n----------------------------------------\n\nTITLE: onWatcherCleanup Type Definition - TypeScript\nDESCRIPTION: Defines the type signature for the `onWatcherCleanup` function in Vue.js.  This TypeScript code specifies the structure for registering cleanup functions within a watcher.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onWatcherCleanup(\n  cleanupFn: () => void,\n  failSilently?: boolean\n): void\n```\n\n----------------------------------------\n\nTITLE: Recursive Components JavaScript\nDESCRIPTION: Shows how an SFC can implicitly refer to itself via its filename. This has lower priority than imported components, so if there is a conflict, the import should be aliased.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FooBar as FooBarChild } from './components'\n```\n\n----------------------------------------\n\nTITLE: Importing Home Component in Vue.js\nDESCRIPTION: This code snippet imports the `Home` component from the `@theme/components/Home.vue` path. It utilizes Vue's `<script setup>` syntax for component setup, providing a concise way to define component logic and dependencies.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/index.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script setup>\nimport Home from '@theme/components/Home.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested v-for Loops in Vue Template\nDESCRIPTION: This code illustrates nested `v-for` loops in a Vue template.  The outer loop iterates over `items`, and the inner loop iterates over `item.children`. Each inner loop has access to the current `item` from the outer loop.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\n----------------------------------------\n\nTITLE: DOM Update Timing with nextTick (Options API)\nDESCRIPTION: This snippet shows the usage of `nextTick` within the Options API to ensure that the DOM has been updated after a state change. The `increment` method increments the `count` property and then awaits `nextTick` before proceeding, ensuring the DOM is up-to-date.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'vue'\n\nexport default {\n  methods: {\n    async increment() {\n      this.count++\n      await nextTick()\n      // Now the DOM is updated\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: v-for on <template> in Vue\nDESCRIPTION: This code snippet demonstrates using `v-for` on a `<template>` tag to render multiple elements for each item in the `items` array.  It renders a list item with a message and a divider for each item.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Forcing Component Replacement with Key Attribute in Vue\nDESCRIPTION: This code showcases how the `key` attribute can be used to force the replacement of a component, triggering lifecycle hooks and transitions in Vue.js. When the `text` prop changes, Vue replaces the `<span>` element instead of patching it.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<transition>\n  <span :key=\"text\">{{ text }}</span>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Styling Vue Components with Scoped CSS - Bad Example\nDESCRIPTION: This code demonstrates an anti-pattern: using element selectors directly within a `<style scoped>` block in a Vue component. This is inefficient because Vue has to add attributes to all of these elements in order for the scoping to work correctly, which negatively impacts performance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button>×</button>\n</template>\n\n<style scoped>\nbutton {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Increment Function in Vue Composition API (HTML)\nDESCRIPTION: This code demonstrates the Composition API `setup` function, creating a reactive `count` variable using `ref` and an `increment` function.  The `increment` function updates the component state by incrementing `count.value`. The `setup` function returns the `count` and `increment` function, making them available in the template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsetup() {\n  const count = ref(0)\n\n  function increment(e) {\n    // update component state\n    count.value++\n  }\n\n  return {\n    count,\n    increment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render PartnerLanding Component Vue\nDESCRIPTION: This snippet imports the PartnerLanding component from its relative path and then renders it within the Vue template. It sets up the Vue component's structure and includes the required dependency for displaying partner information.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/partners/index.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport PartnerLanding from './components/PartnerLanding.vue'\n</script>\n\n<PartnerLanding />\n```\n\n----------------------------------------\n\nTITLE: Vue v-on Directive: Mixed Shorthand (Discouraged)\nDESCRIPTION: Demonstrates the discouraged practice of mixing shorthand and longhand notations for the `v-on` directive within the same element.  Consistency is preferred for readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_46\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  v-on:input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n\n----------------------------------------\n\nTITLE: HTML Content Escaping in Vue.js Templates - Example String\nDESCRIPTION: This is example of the user provided string that contains a script tag, which will be escaped to HTML entities by Vue to prevent XSS attacks.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n'<script>alert(\"hi\")</script>'\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State with reactive() in Vue.js\nDESCRIPTION: This code snippet demonstrates how to declare reactive state using Vue's `reactive()` API. It creates a reactive object `counter` with a `count` property.  Changes to `counter.count` will trigger updates in the template where it's used.  `reactive()` only works on objects.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { reactive } from 'vue'\n\nconst counter = reactive({\n  count: 0\n})\n\nconsole.log(counter.count) // 0\ncounter.count++\n```\n\n----------------------------------------\n\nTITLE: Component Emit Examples (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the `$emit` method to trigger custom events with and without additional arguments within a component's `created` lifecycle hook.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  created() {\n    // only event\n    this.$emit('foo')\n    // with additional arguments\n    this.$emit('bar', 1, 2, 3)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Vue in HTML Mode\nDESCRIPTION: This code snippet demonstrates how to import Vue.js in HTML mode when you're not using a build step. It's crucial to use the correct distribution file (`vue/dist/vue.esm-bundler.js`) to enable in-browser template compilation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-1/description.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ... } from 'vue/dist/vue.esm-bundler.js'\n```\n\n----------------------------------------\n\nTITLE: Returning reactive variables from function scope (corrected with $$())\nDESCRIPTION: This TypeScript code presents the corrected way to return reactive variables from a function. By wrapping the returned object with `$$()`, the references to the underlying refs are retained, preserving reactivity.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // fixed\n  return $${\n    x,\n    y\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Function with Stable Fragment in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a render function returning a fragment with a `STABLE_FRAGMENT` patch flag. The `STABLE_FRAGMENT` flag indicates that the order of child nodes within the fragment will not change. This allows the runtime to skip child-order reconciliation improving patching performance. It uses helper functions `_openBlock` and `_createElementBlock`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Vue Project with pnpm\nDESCRIPTION: This command uses pnpm to execute the create-vue scaffolding tool. It allows for creating a new Vue project using pnpm as the package manager, providing an alternative to npm or yarn with potential performance benefits.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Defining postFontSize Data Property (Options API)\nDESCRIPTION: Shows how to define a `postFontSize` data property within the Options API, used to control font size.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ndata() {\n  return {\n    posts: [\n      /* ... */\n    ],\n    postFontSize: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue CLI Config for Custom Elements in Vue\nDESCRIPTION: This snippet illustrates how to configure Vue CLI to treat HTML tags starting with 'ion-' as custom elements.  This configuration modifies the webpack chain to customize the vue-loader options.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Good Component Tag in SFC/String Template\nDESCRIPTION: Illustrates the correct usage of PascalCase for a component tag within a Single-File Component (SFC) or a string template in Vue.js.  PascalCase is recommended for better distinction from HTML elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In Single-File Components and string templates -->\n<MyComponent/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of v-slot on Component\nDESCRIPTION: This code shows an example of incorrect usage of the `v-slot` directive directly on a component when mixing named and default scoped slots.  This will result in a compilation error due to ambiguity about the scope of the default slot's props.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_24\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- This template won't compile -->\n<MyComponent v-slot=\"{ message }\">\n  <p>{{ message }}</p>\n  <template #footer>\n    <!-- message belongs to the default slot, and is not available here -->\n    <p>{{ message }}</p>\n  </template>\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Communication with Prop Mutation (Options API) - Bad\nDESCRIPTION: This code demonstrates a discouraged pattern of directly mutating a prop passed down from a parent component.  This makes it harder to track state changes and can lead to unexpected behavior. It also shows using `$parent` to directly modify parent state.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  template: '<input v-model=\"todo.text\">'\n})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  methods: {\n    removeTodo() {\n      this.$parent.todos = this.$parent.todos.filter(\n        (todo) => todo.id !== vm.todo.id\n      )\n    }\n  },\n\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"removeTodo\">\n        ×\n      </button>\n    </span>\n  `\n})\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic i18n Plugin - Vue.js\nDESCRIPTION: Shows the basic structure of a Vue.js plugin for internationalization (i18n). It exports an object with an `install` method, which takes the application instance and options as arguments.  Placeholder comment indicates where the plugin code should be implemented.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Delay for Nested Transition\nDESCRIPTION: This CSS adds a delay to the enter transition of a nested element to create a staggered animation effect.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* delay enter of nested element for staggered effect */\n.nested-enter-active .inner {\n  transition-delay: 0.25s;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Rendering\nDESCRIPTION: This snippet renders the imported ApiIndex Vue component. This will display the API index, which is presumably defined within the ApiIndex.vue file, on the page.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/index.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<ApiIndex />\n```\n\n----------------------------------------\n\nTITLE: Checking if Object is Proxy in Vue.js (isProxy)\nDESCRIPTION: The `isProxy` function checks if a given value is a proxy created by `reactive()`, `readonly()`, `shallowReactive()`, or `shallowReadonly()`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isProxy(value: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Adding Button to BlogPost Template\nDESCRIPTION: Shows the addition of a button element to the BlogPost component's template, setting the stage for event emission.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Bad Component Name (kebab-case)\nDESCRIPTION: Shows bad practice of defining a component's name using kebab-case when PascalCase is preferred for JS/JSX, unless using only global component registration.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'my-component'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Function Shorthand Directive Usage HTML\nDESCRIPTION: Shows the HTML usage of a custom directive defined using the function shorthand notation.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-color=\"color\"></div>\n```\n\n----------------------------------------\n\nTITLE: Element Placement Restriction issue\nDESCRIPTION: Shows how certain HTML elements, such as `<table>`, can cause issues when used with custom components due to element placement restrictions. The browser may hoist the custom component out, resulting in incorrect rendering.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_34\n\nLANGUAGE: vue-html\nCODE:\n```\n<table>\n  <blog-post-row></blog-post-row>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Form with Functional Image Input\nDESCRIPTION: This Vue.js code demonstrates how to use an image as a submit button within a form. The `type=\"image\"` attribute on the input element makes the image clickable and submits the form.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<form role=\"search\">\n    <label for=\"search\" class=\"hidden-visually\">Search: </label>\n    <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\n    <input\n      type=\"image\"\n      class=\"btnImg\"\n      src=\"https://img.icons8.com/search\"\n      alt=\"Search\"\n    />\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Vue v-bind Directive: Mixed Shorthand (Discouraged)\nDESCRIPTION: Demonstrates the discouraged practice of mixing shorthand and longhand notations for the `v-bind` directive within the same element. Consistency is preferred for readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_45\n\nLANGUAGE: vue-html\nCODE:\n```\n<input\n  v-bind:value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n----------------------------------------\n\nTITLE: Multiline Text Input - Incorrect Interpolation (Vue HTML)\nDESCRIPTION: Demonstrates the incorrect way to display a text value inside a textarea.  Interpolation `{{ text }}` will not work; v-model should be used instead.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- bad -->\n<textarea>{{ text }}</textarea>\n\n```\n\n----------------------------------------\n\nTITLE: Once Watcher in Options API (Vue.js)\nDESCRIPTION: This code shows how to create a watcher that triggers only once using the Options API in Vue.js with the `once: true` option.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  watch: {\n    source: {\n      handler(newValue, oldValue) {\n        // when `source` changes, triggers only once\n      },\n      once: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Refs in Reactive Objects\nDESCRIPTION: Shows how assigning a new ref to a property linked to an existing ref replaces the old ref, disconnecting it from the reactive object.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst otherCount = ref(2)\n\nstate.count = otherCount\nconsole.log(state.count) // 2\n// original ref is now disconnected from state.count\nconsole.log(count.value) // 1\n```\n\n----------------------------------------\n\nTITLE: Defining postFontSize Ref (Composition API)\nDESCRIPTION: Shows how to define a `postFontSize` ref using the Composition API, used to control font size.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst posts = ref([\n  /* ... */\n])\n\nconst postFontSize = ref(1)\n```\n\n----------------------------------------\n\nTITLE: v-if Equivalent JSX - JSX (Options API)\nDESCRIPTION: Shows the equivalent of the `v-if` directive using JSX with Options API.  Uses a ternary operator to conditionally render different elements.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div>{this.ok ? <div>yes</div> : <span>no</span>}</div>\n```\n\n----------------------------------------\n\nTITLE: HTML structure example\nDESCRIPTION: This snippet demonstrates a basic HTML structure where the <MyModal> component is nested within other elements. This nesting can cause issues with fixed positioning and z-index when displaying the modal. The outer div can also cause issues if animations are added.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"outer\">\n  <h3>Vue Teleport Example</h3>\n  <div>\n    <MyModal />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Render Filtered Array with Method\nDESCRIPTION: Illustrates how to render a filtered array using a method and `v-for` in the template. This example displays a list of numbers filtered by the `even` method, demonstrating dynamic updates within nested loops.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_30\n\nLANGUAGE: vue-html\nCODE:\n```\n<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Refs Inside v-for (Composition API before 3.5)\nDESCRIPTION: Demonstrates using template refs inside a `v-for` loop with the Composition API in versions before 3.5.  It initializes `list` and `itemRefs` as refs containing an array.  The `ref` attribute of the `li` element is set to `itemRefs`, allowing to access the list of the `li` elements inside of `itemRefs.value`.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst list = ref([\n  /* ... */\n])\n\nconst itemRefs = ref([])\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"itemRefs\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Use component-scoped styling - Bad Example - HTML/CSS\nDESCRIPTION: Illustrates the incorrect way of styling components using global styles without scoping. This can lead to style conflicts and unintended side effects on other components.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n\n<style>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Equivalent of Slots\nDESCRIPTION: This snippet provides an analogy between Vue.js slots and JavaScript functions.  The `FancyButton` function takes `slotContent` as an argument and returns an HTML string with that content inserted into a button.  It's a conceptual representation of how slots work.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// parent component passing slot content\nFancyButton('Click me!')\n\n// FancyButton renders slot content in its own template\nfunction FancyButton(slotContent) {\n  return `<button class=\"fancy-btn\">\n      ${slotContent}\n    </button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Prop (Composition API)\nDESCRIPTION: This snippet demonstrates the incorrect way to attempt mutating a prop directly within a component using Composition API. Vue will issue a warning when this is attempted.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps(['foo'])\n\n// ❌ warning, props are readonly!\nprops.foo = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Good Component Folder/File Names (full words)\nDESCRIPTION: Demonstrates the recommended practice of using full words in component folder and file names. This enhances clarity and readability.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_21\n\nLANGUAGE: null\nCODE:\n```\ncomponents/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n```\n\n----------------------------------------\n\nTITLE: Inject Option: Default Prop Value (Vue.js)\nDESCRIPTION: Demonstrates how to use an injected value as the default value for a prop in a Vue.js component. This allows a component to fallback to an injected value if a prop is not explicitly provided.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = {\n  inject: ['foo'],\n  props: {\n    bar: {\n      default() {\n        return this.foo\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Prop Declaration (kebab-case Composition API)\nDESCRIPTION: Illustrates the incorrect usage of kebab-case for prop declaration inside a Vue component's composition API. Prop names should always be camelCase when declared in JavaScript.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst props = defineProps({\n  'greeting-text': String\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Child Component (HTML)\nDESCRIPTION: This snippet demonstrates importing and registering a child component when using HTML templates.  It imports the component from a JavaScript file and then registers it within the `components` option when creating the Vue application instance. This makes the component available for use in the HTML template.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ChildComp from './ChildComp.js'\n\ncreateApp({\n  components: {\n    ChildComp\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Methods in Template - Options API - HTML\nDESCRIPTION: Example of how to use method exposed in Options API javascript in an HTML Vue Template.\nDependencies: Vue.js\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_12\n\nLANGUAGE: Vue\nCODE:\n```\n<button @click=\"increment\">{{ count }}</button>\n```\n\n----------------------------------------\n\nTITLE: Using Child Component in Template (HTML)\nDESCRIPTION: This snippet shows how to use a registered child component within an HTML template. Due to browser parsing rules for DOM templates, the component tag must be kebab-cased. It assumes the child component has been imported and registered within the Vue instance.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<child-comp></child-comp>\n```\n\n----------------------------------------\n\nTITLE: Styling for LambdaTest component\nDESCRIPTION: This CSS styles a component with the class 'lambdatest', setting its background color, border radius, padding, and font size. It also styles the anchor tags and images within the component, adjusting their appearance and layout.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.lambdatest {\n  background-color: var(--vt-c-bg-soft);\n  border-radius: 8px;\n  padding: 12px 16px 12px 12px;\n  font-size: 13px;\n  a {\n    display: flex;\n    color: var(--vt-c-text-2);\n  }\n  img {\n    background-color: #fff;\n    padding: 12px 16px;\n    border-radius: 6px;\n    margin-right: 24px;\n  }\n  .testing-partner {\n    color: var(--vt-c-text-1);\n    font-size: 15px;\n    font-weight: 600;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning reactive variables from function scope (incorrect)\nDESCRIPTION: This TypeScript code demonstrates a case where reactivity is lost when reactive variables (created with `$ref`) are returned directly from a function.  The returned object contains the values of the refs at the time of return, not the refs themselves.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // doesn't work!\n  return {\n    x,\n    y\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Complex Computed Property (options API)\nDESCRIPTION: Shows bad practice of creating complex computed properties instead of breaking them into simpler ones.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_37\n\nLANGUAGE: js\nCODE:\n```\ncomputed: {\n  price() {\n    const basePrice = this.manufactureCost / (1 - this.profitMargin)\n    return (\n      basePrice -\n      basePrice * (this.discountPercent || 0)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Props Definition without Empty Lines - Options API - JavaScript\nDESCRIPTION: Demonstrates how to define component props using the Options API in Vue.js without empty lines.  This is an acceptable style as long as the component remains easy to read and navigate.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n},\ncomputed: {\n  formattedValue() {\n    // ...\n  },\n  inputClasses() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Self-closing in SFC/JSX\nDESCRIPTION: This vue-html snippet illustrates the incorrect way to use self-closing tags for Vue components that have no content within Single-File Components (SFCs), string templates, and JSX.  In these environments, a closing tag is redundant, and should use the self-closing tag syntax `/>`\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- In Single-File Components, string templates, and JSX -->\n<MyComponent></MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Final value of text interpolation\nDESCRIPTION: Illustrates that a ref does get unwrapped if it is the final evaluated value of a text interpolation (i.e. a <code v-pre>{{ }}</code> tag)\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_29\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ object.id }}\n```\n\n----------------------------------------\n\nTITLE: Post-Flush Watcher (Composition API) - JavaScript\nDESCRIPTION: This example defines a post-flush watcher using the Composition API.  `flush: 'post'` makes the callback run after DOM updates. It also demonstrates using the `watchPostEffect()` alias for convenience.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(source, callback, {\n  flush: 'post'\n})\n\nwatchEffect(callback, {\n  flush: 'post'\n})\n\nimport { watchPostEffect } from 'vue'\n\nwatchPostEffect(() => {\n  /* executed after Vue updates */\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Components inline\nDESCRIPTION: This Javascript snippet shows a bad practice of defining components inline, it's better to keep each component in it's own file for better organization.\nSOURCE: https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.component('TodoList', {\n  // ...\n})\n\napp.component('TodoItem', {\n  // ...\n})\n```"
  }
]