[
  {
    "owner": "rjsf-team",
    "repo": "react-jsonschema-form",
    "content": "TITLE: Customizing ObjectFieldTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This example customizes the rendering of object fields within a form using ObjectFieldTemplate.  It provides control over the display of the object's title, description, and properties. The required dependency is @rjsf/utils and @rjsf/validator-ajv8. The output of this function is a custom display of the object with customized presentation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ObjectFieldTemplateProps, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  title: 'Object title',\n  description: 'Object description',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nfunction ObjectFieldTemplate(props: ObjectFieldTemplateProps) {\n  return (\n    <div>\n      {props.title}\n      {props.description}\n      {props.properties.map((element) => (\n        <div className='property-wrapper'>{element.content}</div>\n      ))}\n    </div>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ObjectFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing TitleFieldTemplate in react-jsonschema-form\nDESCRIPTION: This code snippet demonstrates how to customize the TitleFieldTemplate in react-jsonschema-form. It imports necessary components from `@rjsf/utils` and defines a custom TitleFieldTemplate function that renders the title and a required indicator.  It then renders a Form component using the custom template.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, TitleFieldProps } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction TitleFieldTemplate(props: TitleFieldProps) {\n  const { id, required, title } = props;\n  return (\n    <header id={id}>\n      {title}\n      {required && <mark>*</mark>}\n    </header>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ TitleFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Importing react-jsonschema-form dependencies\nDESCRIPTION: These import statements bring in the necessary modules from the installed react-jsonschema-form packages into your TypeScript file.  `Form` is the main component for rendering forms, and `validator` is the validator implementation. These imports are necessary to use the library's functionalities.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/00-introduction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Schema Dependency in React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet demonstrates defining a conditional schema dependency in react-jsonschema-form. The `billing_address` field will be displayed if the `credit_card` field is present. The schema defines types for `name` and `credit_card`, marks `name` as required, and then uses the `dependencies` keyword to define a subschema that includes `billing_address` when `credit_card` is present. The Form component renders the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/dependencies.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": {\n      \"properties\": {\n        \"billing_address\": { \"type\": \"string\" }\n      },\n      \"required\": [\"billing_address\"]\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayFieldItemTemplate in React-jsonschema-form\nDESCRIPTION: This code demonstrates how to implement a custom `ArrayFieldItemTemplate` in react-jsonschema-form. It uses the `ArrayFieldTemplateItemType` from `@rjsf/utils`. The template renders a div element containing the children of the array item. This template allows for customization of individual array items.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldTemplateItemType, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nfunction ArrayFieldItemTemplate(props: ArrayFieldTemplateItemType) {\n  const { children, className } = props;\n  return <div className={className}>{children}</div>;\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ArrayFieldItemTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining and Referencing Schemas in react-jsonschema-form (JSX)\nDESCRIPTION: This code snippet demonstrates how to define a reusable schema for an address and then reference it in other parts of the main schema using the `$ref` keyword. It utilizes the `definitions` property to store the address schema and then references it for both billing and shipping addresses. This helps avoid code duplication and promotes maintainability. The snippet also includes rendering the form using the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/definitions.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"definitions\": {\n    \"address\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": { \"type\": \"string\" },\n        \"city\":           { \"type\": \"string\" },\n        \"state\":          { \"type\": \"string\" }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"]\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"billing_address\": { \"$ref\": \"#/definitions/address\" },\n    \"shipping_address\": { \"$ref\": \"#/definitions/address\" }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing ArrayFieldTitleTemplate in RJSF (TSX)\nDESCRIPTION: This example demonstrates how to customize the ArrayFieldTitleTemplate in react-jsonschema-form. It defines a custom component that renders the title of an array field within an <h1> tag. The component receives the title and idSchema as props and uses the titleId utility to generate a unique ID.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldTitleTemplateProps, RJSFSchema, titleId } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nfunction ArrayFieldTitleTemplate(props: ArrayFieldTitleProps) {\n  const { title, idSchema } = props;\n  const id = titleId(idSchema);\n  return <h1 id={id}>{title}</h1>;\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ArrayFieldTitleTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Templates for React JSON Schema Form\nDESCRIPTION: This code snippet demonstrates how to define custom templates for an `ArrayField` and an `ErrorList` within react-jsonschema-form.  It defines `MyArrayFieldTemplate` to customize the array field rendering, including adding and removing items. It also defines `MyErrorListTemplate` to render form errors in a custom unordered list.  It exports a `ThemeObject` including these templates and the widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-themes.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type=\"button\" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nfunction MyErrorListTemplate(props) {\n  const {errors} = props;\n  return (\n    <ul>\n      {errors.map(error => (\n          <li key={error.stack}>\n            {error.stack}\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nconst ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    ErrorList: MyErrorListTemplate,\n    widgets: myWidgets\n};\n\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Focus On First Error\nDESCRIPTION: Demonstrates how to use the `focusOnFirstError` prop to focus on the first field with an error after form submission. It also shows how to provide a custom callback function to handle the focusing logic. The example shows importing Form, RJSFSchema, RJSFValidationError, validator, defining a simple schema and a custom focus function, then rendering the Form component with the `focusOnFirstError` prop set to this function.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, RJSFValidationError } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst focusOnError = (error: RJSFValidationError) => {\n  console.log('I need to handle focusing this error');\n};\n\nrender(<Form schema={schema} validator={validator} focusOnFirstError={focusOnError} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using react-jsonschema-form to render a form\nDESCRIPTION: This code demonstrates how to use the react-jsonschema-form component to render a form based on a JSON schema.  It defines a schema for a 'Todo' object, specifies a validator, and configures event handlers for changes, submissions, and errors.  The form is then rendered into the DOM element with the ID 'app'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/00-introduction.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Todo',\n  type: 'object',\n  required: ['title'],\n  properties: {\n    title: { type: 'string', title: 'Title', default: 'A new task' },\n    done: { type: 'boolean', title: 'Done?', default: false },\n  },\n};\n\nconst log = (type) => console.log.bind(console, type);\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    onChange={log('changed')}\n    onSubmit={log('submitted')}\n    onError={log('errors')}\n  />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing AddButton in react-jsonschema-form\nDESCRIPTION: This snippet shows how to customize the AddButton template in react-jsonschema-form. It imports necessary components, defines a custom AddButton function that renders a button with an icon and the text 'Add' from `react-intl`.  It then renders a Form component using the custom AddButton as part of the ButtonTemplates.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { IconButtonProps, RJSFSchema } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction AddButton(props: IconButtonProps) {\n  const { icon, iconType, ...btnProps } = props;\n  return (\n    <button {...btnProps}>\n      {icon} <FormattedMessage defaultMessage='Add' />\n    </button>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ButtonTemplates: { AddButton } }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Disable the Form\nDESCRIPTION: Illustrates how to disable the entire form using the `disabled` prop. This prop is then passed down to each field within the form, effectively preventing user interaction. The example shows importing Form, RJSFSchema, validator, defining a simple schema, and then rendering the Form component with the `disabled` prop set to `true`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} disabled />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Unidirectional Property Dependency in react-jsonschema-form (TSX)\nDESCRIPTION: This code snippet demonstrates how to define a unidirectional property dependency in react-jsonschema-form. If the `credit_card` field is defined, the `billing_address` field becomes required. The code imports necessary modules, defines a schema, and renders the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/dependencies.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n\n  properties: {\n    name: { type: 'string' },\n    credit_card: { type: 'number' },\n    billing_address: { type: 'string' },\n  },\n\n  required: ['name'],\n\n  dependencies: {\n    credit_card: ['billing_address'],\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rules to React JSONSchema Form (JSX)\nDESCRIPTION: This snippet shows how to define custom validation rules using the `validate` prop. The `validate` function receives the form data and an `errors` object, and it must return the `errors` object after adding any custom validation errors. This example checks if two password fields match.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction validate(formData, errors) {\n  if (formData.pass1 !== formData.pass2) {\n    errors.pass2.addError(\"Passwords don't match\");\n  }\n  return errors;\n}\n\nconst schema = {\n  type: \"object\",\n  properties: {\n    pass1: {type: \"string\", minLength: 3},\n    pass2: {type: \"string\", minLength: 3},\n  }\n};\n\nrender((\n  <Form schema={schema}\n        validate={validate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Applying ArrayFieldTemplate through uiSchema in React-jsonschema-form\nDESCRIPTION: This code shows how to apply a custom `ArrayFieldTemplate` through the `uiSchema` in react-jsonschema-form. The `ui:ArrayFieldTemplate` property within the `uiSchema` is set to the custom `ArrayFieldTemplate` function. This allows for a more declarative way of specifying the template.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:ArrayFieldTemplate': ArrayFieldTemplate,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rules (JSX)\nDESCRIPTION: This example shows how to add custom validation rules to a React JSONSchema Form.  It defines a `validate` function that receives form data and an error object, then adds errors to the object based on custom logic before returning it.  This is useful for interdependent fields.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction validate(formData, errors) {\n  if (formData.pass1 !== formData.pass2) {\n    errors.pass2.addError(\"Passwords don't match\");\n  }\n  return errors;\n}\n\nconst schema = {\n  type: \"object\",\n  properties: {\n    pass1: {type: \"string\", minLength: 3},\n    pass2: {type: \"string\", minLength: 3},\n  }\n};\n\nrender((\n  <Form schema={schema}\n        validate={validate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing Validator with AJV Format Options\nDESCRIPTION: Shows how to customize the AJV8 validator using `ajv-formats` with custom format options. It enables keywords and specifies the `date` and `time` formats.  The custom validator is then used in a form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst validator = customizeValidator({\n  ajvFormatOptions: {\n    keywords: true,\n    formats: ['date', 'time'],\n  },\n});\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Globally Hiding Field Labels in RJSF\nDESCRIPTION: This code snippet demonstrates how to globally hide field labels in react-jsonschema-form (RJSF) by setting the `label` option to `false` within the `ui:globalOptions` directive in the uiSchema. It imports necessary components from `@rjsf/core` and `@rjsf/utils` and defines a simple string schema. The `validator` from `@rjsf/validator-ajv8` is used for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:globalOptions': {\n    label: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rules in TSX\nDESCRIPTION: This snippet shows how to define custom validation rules using the `customValidate` prop on the `Form` component. The `customValidate` function receives the form data, errors object, and uiSchema, and can add custom error messages to the errors object based on complex validation logic. The errors object is then returned. This validation occurs in addition to the schema validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nfunction customValidate(formData, errors, uiSchema) {\n  if (formData.pass1 !== formData.pass2) {\n    errors.pass2.addError(\"Passwords don't match\");\n  }\n  return errors;\n}\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    pass1: { type: 'string', minLength: 3 },\n    pass2: { type: 'string', minLength: 3 },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} customValidate={customValidate} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Initializing a form with formData\nDESCRIPTION: This snippet demonstrates how to pre-fill a form with existing data using the `formData` prop. The `formData` object should match the schema's structure.  The form component is rendered with the defined schema and initial data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    title: {\n      type: \"string\"\n    },\n    done: {\n      type: \"boolean\"\n    }\n  }\n};\n\nconst formData = {\n  title: \"First task\",\n  done: true\n};\n\nrender((\n  <Form schema={schema}\n        formData={formData} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayFieldDescriptionTemplate in React-jsonschema-form\nDESCRIPTION: This code demonstrates how to implement a custom `ArrayFieldDescriptionTemplate` in react-jsonschema-form. It utilizes `ArrayFieldDescriptionProps` from `@rjsf/utils`. The template renders a details element containing a summary \"Description\" and the description of the array field. It uses `descriptionId` helper to generate the id of the element.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldDescriptionProps, RJSFSchema, descriptionId } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nfunction ArrayFieldDescriptionTemplate(props: ArrayFieldDescriptionProps) {\n  const { description, idSchema } = props;\n  const id = descriptionId(idSchema);\n  return (\n    <details id={id}>\n      <summary>Description</summary>\n      {description}\n    </details>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ArrayFieldDescriptionTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Validation in TSX\nDESCRIPTION: This snippet demonstrates how to enable live validation in a `Form` component by passing the `liveValidate` prop set to `true`. This triggers validation on every change within the form data, providing real-time feedback to the user. The example also specifies the schema, form data, and the validator being used.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: ['string'],\n  const: 'test',\n};\n\nconst formData = 'a';\n\nrender(<Form schema={schema} formData={formData} validator={validator} liveValidate />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Unidirectional Property Dependencies in react-jsonschema-form\nDESCRIPTION: This code snippet demonstrates how to define a unidirectional property dependency in react-jsonschema-form. The `billing_address` field becomes required if the `credit_card` field is present. The snippet utilizes the `dependencies` keyword within the schema definition. Requires react-jsonschema-form and react for rendering the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/dependencies.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" },\n    \"billing_address\": { \"type\": \"string\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": [\"billing_address\"]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Wrapping ObjectField to Customize onChange Handler in TypeScript\nDESCRIPTION: This code snippet demonstrates how to wrap the `ObjectField` component from `@rjsf/core` to customize its `onChange` handler.  It utilizes `useCallback` to create a memoized `onChangeHandler` that performs additional data validation using a `checkBadData` function. If bad data is detected, the handler can format the error and fix the data before calling the original `onChange` handler provided by the `FieldProps`. This allows for custom data processing and validation logic to be integrated into the form's data handling pipeline. Dependencies include `@rjsf/utils`, `@rjsf/core` and the custom `checkBadData` function.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCallback } from 'react';\nimport { FieldProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\n\nimport checkBadData from './checkBadData';\n\nconst {\n  fields: { ObjectField },\n} = getDefaultRegistry();\n\nfunction MyObjectField(props: FieldProps) {\n  const { onChange } = props;\n  const onChangeHandler = useCallback(\n    (newFormData: T | undefined, es?: ErrorSchema<T>, id?: string) => {\n      let data = newFormData;\n      let error = es;\n      if (checkBadData(newFormData)) {\n        // Format the `error` and fix the `data` here\n      }\n      onChange(data, error, id);\n    },\n    [onChange]\n  );\n  return <ObjectField {...props} onChange={onChangeHandler} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying uiSchema to array items in React JSONSchema Form\nDESCRIPTION: This snippet demonstrates how to apply a uiSchema to array items. It sets the `ui:widget` property to \"textarea\" for each item in the array using `uiSchema: { items: { \"ui:widget\": \"textarea\" } }`. This will render each string array item as a textarea input.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  items: {\n    \"ui:widget\": \"textarea\"\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Transforming Validation Errors in React JSON Schema Form (TSX)\nDESCRIPTION: This code snippet demonstrates how to customize validation error messages in React JSON Schema Form by defining a `transformErrors` function. The function receives a list of JSON Schema errors and returns a new list with modified error messages. It specifically targets 'pattern' errors and changes the message to 'Only digits are allowed'. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nfunction transformErrors(errors, uiSchema) {\n  return errors.map((error) => {\n    if (error.name === 'pattern') {\n      error.message = 'Only digits are allowed';\n    }\n    return error;\n  });\n}\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    onlyNumbersString: { type: 'string', pattern: '^\\\\d*$' },\n  },\n};\n\nrender(\n  <Form schema={schema} validator={validator} transformErrors={transformErrors} />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Custom Formats Validation in React JSON Schema Form (TSX)\nDESCRIPTION: This code demonstrates how to add custom formats for validation in React JSON Schema Form. It defines a `customFormats` object with a regular expression for a 'phone-us' format and configures the validator using `customizeValidator`. The schema specifies that the string should match the 'phone-us' format. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'phone-us',\n};\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/,\n};\n\nconst validator = customizeValidator({ customFormats });\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Schema Dependency in react-jsonschema-form (TSX)\nDESCRIPTION: This code snippet shows how to define a conditional schema dependency in react-jsonschema-form. If the `credit_card` field is defined, the `billing_address` field is displayed and becomes required. The code imports necessary modules, defines a schema, and renders the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/dependencies.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n\n  properties: {\n    name: { type: 'string' },\n    credit_card: { type: 'number' },\n  },\n\n  required: ['name'],\n\n  dependencies: {\n    credit_card: {\n      properties: {\n        billing_address: { type: 'string' },\n      },\n      required: ['billing_address'],\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayFieldTemplate in React-jsonschema-form\nDESCRIPTION: This code demonstrates how to implement a custom `ArrayFieldTemplate` in react-jsonschema-form. It utilizes the `ArrayFieldTemplateProps` type and the `RJSFSchema` type from `@rjsf/utils`. The template maps through the array items, rendering their children, and includes a button to add new items to the array. This template can be passed to the Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldTemplateProps, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nfunction ArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n  return (\n    <div>\n      {props.items.map((element) => element.children)}\n      {props.canAdd && <button type='button' onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ArrayFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional Properties with Schema in ReactJS\nDESCRIPTION: This code snippet demonstrates how to allow users to add additional properties to an object.  The `additionalProperties` keyword is set to a schema that defines the type and constraints of the additional properties.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": {\n    \"type\": \"number\",\n    \"enum\": [1, 2, 3]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Unidirectional Property Dependency in React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet demonstrates how to define a unidirectional property dependency in react-jsonschema-form. The `billing_address` field becomes required if the `credit_card` field is present. The schema defines the types for `name`, `credit_card`, and `billing_address`, marks `name` as required, and then uses the `dependencies` keyword to link the presence of `credit_card` to the requirement of `billing_address`. A Form component then renders the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/dependencies.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" },\n    \"billing_address\": { \"type\": \"string\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": [\"billing_address\"]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Schema Dependency with oneOf in React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet demonstrates a dynamic schema dependency using `oneOf` in react-jsonschema-form. Based on the user's answer to \"Do you have any pets?\", different questions are dynamically displayed. The `dependencies` keyword, coupled with `oneOf`, allows for defining multiple schema variations. The Form component renders the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/dependencies.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Do you have any pets?\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"No\",\n        \"Yes: One\",\n        \"Yes: More than one\"\n      ],\n      \"default\": \"No\"\n    }\n  },\n  \"required\": [\n    \"Do you have any pets?\"\n  ],\n  \"dependencies\": {\n    \"Do you have any pets?\": {\n      \"oneOf\": [\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"No\"\n              ]\n            }\n          }\n        },\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"Yes: One\"\n              ]\n            },\n            \"How old is your pet?\": {\n              \"type\": \"number\"\n            }\n          },\n          \"required\": [\n            \"How old is your pet?\"\n          ]\n        },\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"Yes: More than one\"\n              ]\n            },\n            \"Do you want to get rid of any?\": {\n              \"type\": \"boolean\"\n            }\n          },\n          \"required\": [\n            \"Do you want to get rid of any?\"\n          ]\n        }\n      ]\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing FieldErrorTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the rendering of field errors in react-jsonschema-form using the FieldErrorTemplate.  It overrides the default error display with a details/summary element. It depends on @rjsf/utils and @rjsf/validator-ajv8.  The output is a custom error display.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldErrorProps, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction FieldErrorTemplate(props: FieldErrorProps) {\n  const { errors } = props;\n  return (\n    <details id={id}>\n      <summary>Errors</summary>\n      <ul>\n        {errors.map((error: string, i: number) => {\n          return (\n            <li key={i} className='error'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </details>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ FieldErrorTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Schema Dependency with `oneOf` in react-jsonschema-form (TSX)\nDESCRIPTION: This code snippet demonstrates how to create dynamic questions in react-jsonschema-form based on the answer to a previous question using the `oneOf` keyword in the `dependencies` section. It presents follow-up questions based on the user's answer to the question, 'Do you have any pets?'. The code imports necessary modules, defines a schema, and renders the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/dependencies.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Person',\n  type: 'object',\n  properties: {\n    'Do you have any pets?': {\n      type: 'string',\n      enum: ['No', 'Yes: One', 'Yes: More than one'],\n      default: 'No',\n    },\n  },\n  required: ['Do you have any pets?'],\n  dependencies: {\n    'Do you have any pets?': {\n      oneOf: [\n        {\n          properties: {\n            'Do you have any pets?': {\n              enum: ['No'],\n            },\n          },\n        },\n        {\n          properties: {\n            'Do you have any pets?': {\n              enum: ['Yes: One'],\n            },\n            'How old is your pet?': {\n              type: 'number',\n            },\n          },\n          required: ['How old is your pet?'],\n        },\n        {\n          properties: {\n            'Do you have any pets?': {\n              enum: ['Yes: More than one'],\n            },\n            'Do you want to get rid of any?': {\n              type: 'boolean',\n            },\n          },\n          required: ['Do you want to get rid of any?'],\n        },\n      ],\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Setting Field Title in RJSF\nDESCRIPTION: This code snippet demonstrates how to change a field's title in react-jsonschema-form (RJSF) using the `ui:title` directive in the uiSchema.  The `ui:widget` is set to password, and the title is customized to \"Your password\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:title': 'Your password',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Form Component with Custom Fields/Widgets - TSX\nDESCRIPTION: This code shows how to create a reusable form component in React JSON Schema Form (RJSF) with custom fields and widgets. It defines a `MyForm` component that accepts `FormProps` and renders an RJSF `Form` component. The custom fields and widgets (`customFields` and `customWidgets` respectively) are passed to the `fields` and `widgets` props of the `Form` component, allowing for consistent use of these custom components across multiple forms.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RegistryFieldsType, RegistryWidgetsType } from '@rjsf/utils';\nimport { FormProps } from '@rjsf/core';\n\nconst customFields: RegistryFieldsType = { StringField: CustomString };\nconst customWidgets: RegistryWidgetsType = { CheckboxWidget: CustomCheckbox };\n\nfunction MyForm(props: FormProps) {\n  return <Form fields={customFields} widgets={customWidgets} {...props} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Object Properties in ReactJS\nDESCRIPTION: This code snippet extends the previous example by specifying the \"name\" property as required.  This will cause the React JSON Schema Form to enforce that the \"name\" field is filled out before the form can be submitted.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"My title\",\n  \"description\": \"My description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\"name\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Templates Per-Field in RJSF\nDESCRIPTION: This example demonstrates how to override a template, specifically the `ArrayFieldTemplate`, on a per-field basis in react-jsonschema-form using the `uiSchema`. The `ui:ArrayFieldTemplate` property is used to specify the custom template. `MyArrayTemplate` is a placeholder for the custom template implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"ui:ArrayFieldTemplate\": MyArrayTemplate\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Localizer in TSX\nDESCRIPTION: This code snippet illustrates how to implement a custom `Localizer` function to translate error messages. The `localize_ru` function takes an array of `ErrorObject` and modifies the `message` property of each error based on the `keyword`.  It then passes the custom localizer to `customizeValidator`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { ErrorObject } from 'ajv';\n\nfunction localize_ru(errors: null | ErrorObject[] = []) {\n  if (!(errors && errors.length)) return;\n  errors.forEach(function (error) {\n    let outMessage = '';\n\n    switch (error.keyword) {\n      case 'pattern': {\n        outMessage = 'должно соответствовать образцу \"' + error.params.pattern + '\"';\n        break;\n      }\n      case 'required': {\n        outMessage = 'поле обязательно для заполнения';\n        break;\n      }\n      default:\n        outMessage = error.message;\n    }\n\n    error.message = outMessage;\n  });\n}\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst validator = customizeValidator({}, localize_ru);\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Custom labels for enum fields using ui:enumNames in RJSF\nDESCRIPTION: This example demonstrates the recommended way to specify custom labels for enum values using the `ui:enumNames` property in the `uiSchema`. This approach separates the label configuration from the schema itself, improving maintainability and organization. It imports the required modules, defines the schema with `enum`, defines the `uiSchema` with `ui:enumNames`, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  enum: [1, 2, 3],\n};\nconst uiSchema: UiSchema = {\n  'ui:enumNames': ['one', 'two', 'three'],\n};\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Widget Directly in uiSchema - TSX\nDESCRIPTION: This code demonstrates how to add a custom widget directly within the `uiSchema` of a React JSON Schema Form (RJSF).  The `ui:widget` property is assigned a function that returns a custom input element. This function receives `WidgetProps` and renders a text input with custom class, value, required status, and `onChange` handler, providing basic functional overrides. The schema defines the type as string.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema, WidgetProps } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: Schema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': (props: WidgetProps) => {\n    return (\n      <input\n        type='text'\n        className='custom'\n        value={props.value}\n        required={props.required}\n        onChange={(event) => props.onChange(event.target.value)}\n      />\n    );\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n\n```\n\n----------------------------------------\n\nTITLE: Defining a single field array in React JSONSchema Form (JSX)\nDESCRIPTION: This snippet demonstrates how to define an array of strings using the schema property in React JSONSchema Form. The schema specifies the type as \"array\" and the items' type as \"string\". The Form component then renders the array input field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Example for @rjsf/material-ui in JSX\nDESCRIPTION: This code defines a custom widget, `MyCustomWidget`, for the `react-jsonschema-form` with the `material-ui` theme. It utilizes the `useMuiComponent` hook to access the `TextInput` component from Material UI. The widget receives `color` and `backgroundColor` options from the schema and applies them to the `TextInput` component's style.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nimport { useMuiComponent } from '@rjsf/material-ui/v4';\n\nfunction MyCustomWidget(props) {\n  const { options, ...otherProps } = props;\n  const { color, backgroundColor } = options;\n  const { TextInput } = useMuiComponent();\n  return <TextInput {...otherProps} style={{ color, backgroundColor }} />;\n}\n\nMyCustomWidget.defaultProps = {\n  options: {\n    color: \"red\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:widget\": MyCustomWidget,\n  \"ui:options\": {\n    backgroundColor: \"yellow\"\n  }\n};\n\n// renders red on yellow input\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining and Referencing Schemas in React JSON Schema Form (TSX)\nDESCRIPTION: This code snippet demonstrates how to define a schema with reusable definitions (e.g., 'address') and reference them within the main schema using the `$ref` keyword. It imports necessary modules from '@rjsf/utils' and uses '@rjsf/validator-ajv8' for validation. The schema defines properties like 'billing_address' and 'shipping_address' by referencing the 'address' definition. This is then rendered using the Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/definitions.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  definitions: {\n    address: {\n      type: 'object',\n      properties: {\n        street_address: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n      },\n      required: ['street_address', 'city', 'state'],\n    },\n  },\n  type: 'object',\n  properties: {\n    billing_address: { $ref: '#/definitions/address' },\n    shipping_address: { $ref: '#/definitions/address' },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fields Per-Field in RJSF\nDESCRIPTION: This example shows how to override a field on a per-field basis in react-jsonschema-form using the `uiSchema`. The `ui:field` property is used to specify the custom field. `MyCustomField` is a placeholder for the custom field implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"ui:field\": MyCustomField\n```\n\n----------------------------------------\n\nTITLE: Defining array of objects schema in RJSF\nDESCRIPTION: This code snippet defines a schema for an array of objects using RJSFSchema. The `type` is set to 'array' and the `items` property specifies that each item in the array should be an object with a `name` property of type `string`.  It shows how to render the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Setting autofocus attribute using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to automatically focus on a text input or textarea field when the form loads using the `ui:autofocus` property in the uiSchema. `ui:widget` is also used to render a textarea.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'textarea',\n  'ui:autofocus': true,\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Theme Example - TSX\nDESCRIPTION: This code defines a custom widget for use within a react-jsonschema-form theme. It imports necessary types from `@rjsf/utils` and `@rjsf/core`. It defines a functional component `MyCustomWidget` that renders an input field.  It then creates a `myWidgets` object that maps a name to the custom widget, and creates the `ThemeObject` by assigning the `widgets` property to `myWidgets`. The `ThemeObject` is then exported as the default export.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-themes.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WidgetProps, RegistryWidgetsType } from '@rjsf/utils';\nimport { ThemeProps } from '@rjsf/core';\n\nconst MyCustomWidget = (props: WidgetProps) => {\n  return (\n    <input\n      type='text'\n      className='custom'\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)}\n    />\n  );\n};\n\nconst myWidgets: RegistryWidgetsType = {\n  myCustomWidget: MyCustomWidget,\n};\n\nconst ThemeObject: ThemeProps = { widgets: myWidgets };\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Generics with generateTheme (rjsf/mui)\nDESCRIPTION: This example shows how to override the default generics when customizing themes like `@rjsf/mui`. It uses `generateTheme` to create a typed theme with custom interfaces for `FormData`, `MySchema`, and `FormContext`, and then extends the theme's `BaseInputTemplate` while maintaining type safety.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { WidgetProps } from '@rjsf/utils';\nimport { ThemeProps, withTheme } from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { generateTheme } from '@rjsf/mui';\n\ninterface FormData {\n  foo?: string;\n  bar?: number;\n}\n\ntype MySchema = JSONSchemaType<FormData>;\n\nconst schema: MySchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'number' },\n  },\n};\n\ninterface FormContext {\n  myCustomWidgetData: object;\n}\n\nconst Theme: ThemeProps<FormData, MySchema, FormContext> = generateTheme<FormData, MySchema, FormContext>();\n\nconst OldBaseInputTemplate = Theme.templates.BaseInputTemplate;\n\n// Force the underlying `TextField` component to always use size=\"small\"\nfunction MyBaseInputTemplate(props: WidgetProps<FormData, MySchema, FormContext>) {\n  return <OldBaseInputTemplate {...props} size='small' />;\n}\n\nconst myTheme: ThemeProps<FormData, MySchema, FormContext> = {\n  ...Theme,\n  templates: {\n    ...Theme.templates,\n    BaseInputTemplate: MyBaseInputTemplate,\n  },\n};\n\nconst ThemedForm = withTheme<FormData, MySchema, FormContext>(myTheme);\n\nconst validator = customizeValidator<FormData, MySchema, FormContext>();\n\n// You could also do since they are effectively the same:\n// const ThemedForm = generateForm<FormData, MySchema, FormContext>(myTheme);\n\nconst Demo = () => <ThemedForm schema={schema} uiSchema={uiSchema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering a simple string form\nDESCRIPTION: This code snippet demonstrates rendering a simple form with a single string field using React JSONSchema Form.  It defines a JSON schema with a \"string\" type and renders a <Form> component using this schema. It uses the `render` function to mount the form into the DOM element with id 'app'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Submit Button Options - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the submit button of the form using the `ui:submitButtonOptions` uiSchema directive. It includes options for disabling the button, setting a class name, hiding the button completely (`norender`), and changing the submit text.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n \"ui:submitButtonOptions\": {\n   \"props\": {\n      \"disabled\": false,\n      \"className\": \"btn btn-info\",\n   },\n    \"norender\": false,\n    \"submitText\": \"Submit\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Validator with AjvDraft04 (TSX)\nDESCRIPTION: This snippet shows how to validate the form data against ONLY JSON Schema draft-04 when using `@rjsf/validator-ajv8`. It imports `AjvDraft04` and uses `customizeValidator` to configure the validator class. Requires `@rjsf/core`, `@rjsf/utils`, `@rjsf/validator-ajv8` and `ajv-draft-04`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport AjvDraft04 from 'ajv-draft-04';\n\nconst validator = customizeValidator({ AjvClass: AjvDraft04 });\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  type: 'string',\n};\n\nreturn <Form schema={schema} validator={validator} />;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a controlled form component\nDESCRIPTION: This snippet demonstrates how to create a controlled form component using the `onChange` and `formData` props. The form's data is managed by the component's state, and updates to the form trigger state updates, ensuring that the form is always in sync with the component's data.  React's `useState` hook is used to manage the form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (<Form\n    schema={{type: \"string\"}}\n    formData={formData}\n    onChange={e => setFormData(e.formData)}\n  />);\n};\n\nrender((\n  <App />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Form Context Semantic-UI Styling in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the `formContext` to apply semantic styling to a React JSON Schema Form. It utilizes the `wrapContent` and `wrapLabel` properties to wrap all input field content and labels in divs, respectively. This allows for custom styling via CSS, providing greater control over the form's appearance.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/themes/semantic-ui/uiSchema.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Form\n  formContext={{\n    \"semantic\" : {\n      \"wrapLabel\": true,\n      \"wrapContent\": true\n    }\n  // other props...\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a custom field component in react-jsonschema-form (Typescript)\nDESCRIPTION: This code creates a custom field component, `GeoPosition`, to handle latitude and longitude inputs. It uses `RJSFSchema`, `UiSchema`, `FieldProps`, and `RegistryFieldsType` from `@rjsf/utils` and `validator` from `@rjsf/validator-ajv8`. The component manages its own state for latitude and longitude and updates the form data via the `onChange` prop. The `uiSchema` and `fields` constants are used to register the custom field with the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema, FieldProps, RegistryFieldsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  required: ['lat', 'lon'],\n  properties: {\n    lat: { type: 'number' },\n    lon: { type: 'number' },\n  },\n};\n\n// Define a custom component for handling the root position object\nclass GeoPosition extends React.Component<FieldProps> {\n  constructor(props: FieldProps) {\n    super(props);\n    this.state = { ...props.formData };\n  }\n\n  onChange(name) {\n    return (event) => {\n      this.setState(\n        {\n          [name]: parseFloat(event.target.value),\n        },\n        () => this.props.onChange(this.state)\n      );\n    };\n  }\n\n  render() {\n    const { lat, lon } = this.state;\n    return (\n      <div>\n        <input type='number' value={lat} onChange={this.onChange('lat')} />\n        <input type='number' value={lon} onChange={this.onChange('lon')} />\n      </div>\n    );\n  }\n}\n\n// Define the custom field component to use for the root object\nconst uiSchema: UiSchema = { 'ui:field': 'geo' };\n\n// Define the custom field components to register; here our \"geo\"\n// custom field component\nconst fields: RegistryFieldsType = { geo: GeoPosition };\n\n// Render the form with all the properties we just defined passed\n// as props\nrender(\n  <Form schema={schema} uiSchema={uiSchema} validator={validator} fields={fields} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining and Referencing JSON Schema in React JSONSchema Form (JSX)\nDESCRIPTION: This code snippet defines a JSON schema with a reusable \"address\" definition under the \"definitions\" property. It then references this definition in the \"billing_address\" and \"shipping_address\" properties using the \"$ref\" keyword with a JSON Pointer. The Form component from react-jsonschema-form is used to render a form based on the schema. Dependencies include react and react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/definitions.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"definitions\": {\n    \"address\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": { \"type\": \"string\" },\n        \"city\":           { \"type\": \"string\" },\n        \"state\":          { \"type\": \"string\" }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"]\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"billing_address\": { \"$ref\": \"#/definitions/address\" },\n    \"shipping_address\": { \"$ref\": \"#/definitions/address\" }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing RemoveButton in react-jsonschema-form\nDESCRIPTION: This example customizes the RemoveButton template in react-jsonschema-form. It defines a custom RemoveButton function that renders a button with an icon and the text 'Remove'. This custom template is then used to render a Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { IconButtonProps, RJSFSchema } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction RemoveButton(props: IconButtonProps) {\n  const { icon, iconType, ...btnProps } = props;\n  return (\n    <button {...btnProps}>\n      {icon} <FormattedMessage defaultMessage='Remove' />\n    </button>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ButtonTemplates: { RemoveButton } }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Object Fields with uiSchema\nDESCRIPTION: This code snippet shows how to customize individual object fields using the uiSchema. It adds custom CSS class names to the 'name' and 'age' fields within the form.  The `ui:classNames` attribute is used within the uiSchema object for each field to apply specific styling.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  name: {\n    'ui:classNames': 'custom-class-name',\n  },\n  age: {\n    'ui:classNames': 'custom-class-age',\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Disabling Enum Options in React JSON Schema Form\nDESCRIPTION: This code snippet showcases how to disable specific enum options using the `ui:enumDisabled` property in the `uiSchema`. In this case, the first boolean option (true) is disabled. It renders a form using the defined schema and uiSchema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"boolean\",\n  enum: [true, false]\n};\n\nconst uiSchema={\n  \"ui:enumDisabled\": [true],\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Enumerated values for a field in RJSF\nDESCRIPTION: This example demonstrates how to restrict a field's values to a predefined set using the `enum` property.  The user can only select from the values specified in the `enum` array. It imports the required modules, defines the schema with the `enum` property, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  enum: ['one', 'two', 'three'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Async Validation with extraErrors in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet showcases the use of `extraErrors` prop to display asynchronous validation errors in React JSON Schema Form. The `extraErrors` object contains error messages associated with specific fields in the schema. These errors are displayed but do not block form submission. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, ErrorSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: {\n      type: 'string',\n    },\n    candy: {\n      type: 'object',\n      properties: {\n        bar: {\n          type: 'string',\n        },\n      },\n    },\n  },\n};\n\nconst extraErrors: ErrorSchema = {\n  foo: {\n    __errors: ['some error that got added as a prop'],\n  },\n  candy: {\n    bar: {\n      __errors: ['some error that got added as a prop'],\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} extraErrors={extraErrors} />, document.getElementById('app'));\n\n```\n\n----------------------------------------\n\nTITLE: Applying inline styles to a field using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to apply inline styles to a specific field (the `title` field) using the `ui:style` property in the uiSchema. The specified style (in this case, `color: 'red'`) will be applied as an inline style to the div containing the field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  title: {\n    'ui:style': { color: 'red' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing form look and feel with uiSchema\nDESCRIPTION: This snippet demonstrates how to use the `uiSchema` to add a custom CSS class to the form. The uiSchema specifies the `classNames` attribute for the form, allowing for custom styling using CSS. It renders the schema and uiSchema using the `<Form>` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"string\"\n};\n\nconst uiSchema = {\n  classNames: \"custom-css-class\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Overriding Generics in withTheme (rjsf/core)\nDESCRIPTION: This snippet demonstrates how to override the generics of the `withTheme` function, allowing you to create a themed form with custom types for formData, schema, and formContext.  It defines interfaces for `FormData`, `MySchema`, and `FormContext` and applies them to the `withTheme` function call.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { withTheme, ThemeProps } from '@rjsf/core';\n\ninterface FormData {\n  foo?: string;\n  bar?: number;\n}\n\ntype MySchema = JSONSchemaType<FormData>;\n\nconst schema: MySchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'number' },\n  },\n};\n\ninterface FormContext {\n  myCustomWidgetData: object;\n}\n\nconst theme: ThemeProps<FormData, MySchema, FormContext> = {\n  widgets: { test: () => <div>test</div> },\n};\n\nconst ThemedForm = withTheme<FormData, MySchema, FormContext>(theme);\n\nconst validator = customizeValidator<FormData, MySchema, FormContext>();\n\nconst Demo = () => <ThemedForm schema={schema} uiSchema={uiSchema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Title, Description, Submit Button - JSON\nDESCRIPTION: This JSON snippet demonstrates two equivalent ways of defining a uiSchema. It sets the title and description of the form, and customizes the submit button with props, rendering behavior, and text.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:title\": \"Title\",\n  \"ui:description\": \"Description\",\n  \"ui:submitButtonOptions\": {\n    \"props\": {\n      \"disabled\": false,\n      \"className\": \"btn btn-info\",\n    },\n      \"norender\": false,\n      \"submitText\": \"Submit\"\n    },\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"title\": \"Title\",\n    \"description\": \"Description\",\n    \"submitButtonOptions\": {\n      \"props\": {\n        \"disabled\": false,\n        \"className\": \"btn btn-info\",\n      },\n      \"norender\": false,\n      \"submitText\": \"Submit\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom labels for enum fields using anyOf in RJSF\nDESCRIPTION: This snippet uses `anyOf` to provide custom labels for enum values. Each object in the `anyOf` array defines a specific enum value along with its corresponding title. This allows for more descriptive labels than simply using the enum values themselves. It imports the required modules, defines the schema with `anyOf`, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  anyOf: [\n    {\n      type: 'number',\n      title: 'one',\n      enum: [1],\n    },\n    {\n      type: 'number',\n      title: 'two',\n      enum: [2],\n    },\n    {\n      type: 'number',\n      title: 'three',\n      enum: [3],\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing FieldHelpTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet shows how to customize the rendering of field help texts in react-jsonschema-form using the FieldHelpTemplate. It replaces the default help display with an aside element. It depends on @rjsf/utils and @rjsf/validator-ajv8. The expected input is the help text and the idSchema; the output is a customized help text display.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldHelpProps, RJSFSchema, helpId } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction FieldHelpTemplate(props: FieldHelpProps) {\n  const { help, idSchema } = props;\n  const id = helpId(idSchema);\n  return <aside id={id}>{help}</aside>;\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ FieldHelpTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Form with uiSchema\nDESCRIPTION: This code snippet demonstrates how to customize the form's appearance using the uiSchema. It adds a custom CSS class name to the form using the `ui:classNames` attribute in the uiSchema. The Form component is rendered with both the schema and the uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:classNames': 'custom-css-class',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Disabling adding new array items in React JSONSchema Form\nDESCRIPTION: This snippet disables the add button for new array items by setting the `addable` option to `false` in the uiSchema. The uiSchema option is `\"ui:options\": { addable: false }`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    addable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Themed Form with Custom Widget - JSX\nDESCRIPTION: This snippet demonstrates how to create a themed form component using `withTheme` from `@rjsf/core`.  It defines a simple theme object with a custom widget, and then creates a `ThemedForm` component using the HOC. The `ThemedForm` can then be used like the standard `Form` component, passing in schema and uiSchema properties. The custom widget will be available within this form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { withTheme } from '@rjsf/core';\n\nconst theme = { widgets: {test: () => (<div>test</div>) } };\n\nconst ThemedForm = withTheme(theme); \n\nconst Demo = () => (\n  <ThemedForm schema={schema} uiSchema={uiSchema} />\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying minimum number of items in React JSONSchema Form\nDESCRIPTION: This snippet specifies the minimum number of items required in an array using the `minItems` property.  In this case, the array must have at least 2 items, as set by `minItems: 2`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  minItems: 2,\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text in RJSF\nDESCRIPTION: This code snippet demonstrates how to add placeholder text to an input field in react-jsonschema-form (RJSF) using the `ui:placeholder` directive in the uiSchema.  It defines a schema for a URI and sets the placeholder text to \"http://\". The `validator` from `@rjsf/validator-ajv8` is used for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', format: 'uri' };\nconst uiSchema: UiSchema = {\n  'ui:placeholder': 'http://',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema Validators Code in Typescript\nDESCRIPTION: This snippet demonstrates how to use `compileSchemaValidatorsCode` from `@rjsf/validator-ajv8` to generate validation code from a JSON schema and associated options. The generated code can then be used for client-side validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compileSchemaValidatorsCode } from '@rjsf/validator-ajv8/dist/compileSchemaValidators';\n\nconst code = compileSchemaValidatorsCode(schema, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SchemaField in JSX\nDESCRIPTION: This code snippet demonstrates how to create a custom `SchemaField` component in JSX. It defines a `CustomSchemaField` function that renders a div with a paragraph and displays the component's props as a JSON string. This component is then passed to the `Form` component via the `fields` prop, overriding the default `SchemaField` implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-widgets-fields.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomSchemaField = function(props) {\n  return (\n    <div id=\"custom\">\n      <p>Yeah, I'm pretty dumb.</p>\n      <div>My props are: {JSON.stringify(props)}</div>\n    </div>\n  );\n};\n\nconst fields = {\n  SchemaField: CustomSchemaField\n};\n\nconst schema = {\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema}\n        fields={fields} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with onSubmit - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `onSubmit` handler in the React JSONSchema Form to process form data when the form is submitted and valid. It imports necessary modules from `@rjsf/core` and `@rjsf/utils`, defines a simple schema, and implements an `onSubmit` function that logs the form data. The `onSubmit` handler is then passed to the `Form` component along with the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\nconst onSubmit = ({ formData }, e) => console.log('Data submitted: ', formData);\n\nrender(<Form schema={schema} validator={validator} onSubmit={onSubmit} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Widgets Globally in RJSF\nDESCRIPTION: This example illustrates how to globally override a widget in react-jsonschema-form using the `widgets` prop of the `Form` component. `MyCustomWidget` represents the custom widget implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Form widgets={{ MyCustomWidget }} />\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML5 Validation in TSX\nDESCRIPTION: This snippet demonstrates how to disable HTML5 validation by setting the `noHtml5Validate` prop to `true` on the `Form` component. This prevents the browser's default validation from interfering with react-jsonschema-form's validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      required: true,\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} noHtml5Validate />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Alternative JSON-Schema Compliant Enum Approach in React JSON Schema Form\nDESCRIPTION: This code demonstrates an alternative JSON-Schema compliant approach to enums using the `anyOf` property.  Each entry in the `anyOf` array represents an option with a `title` (label) and an `enum` containing a single value. It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"number\",\n  \"anyOf\": [\n    {\n      \"type\": \"number\",\n      \"title\": \"one\",\n      \"enum\": [\n        1\n      ]\n    },\n    {\n      \"type\": \"number\",\n      \"title\": \"two\",\n      \"enum\": [\n        2\n      ]\n    },\n    {\n      \"type\": \"number\",\n      \"title\": \"three\",\n      \"enum\": [\n        3\n      ]\n    }\n  ]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Localizing with Specific Ajv-i18n Locale in TSX\nDESCRIPTION: This code shows how to localize error messages using a specific locale minimizing the bundle size, it imports the specific localization file `ajv-i18n/localize/es` and passes it as the second argument to `customizeValidator`.  This will translate the error messages to Spanish.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport spanishLocalizer from 'ajv-i18n/localize/es';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst validator = customizeValidator({}, spanishLocalizer);\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Changing field description using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to change the description of a field using the `ui:description` property in the uiSchema. This is helpful for providing more context or instructions to the user. `ui:widget` is used to specify a password field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:description': 'The best password',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with Schema in ReactJS\nDESCRIPTION: This code snippet defines a simple object schema with two properties, name (string) and age (number), using the JSON schema format. It then renders the schema using the React JSON Schema Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"My title\",\n  \"description\": \"My description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"type\": \"number\"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Adding help text using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to add help text next to a field using the `ui:help` property in the uiSchema. This provides additional guidance to the user when filling out the form.  `ui:widget` is used to specify a password field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:help': 'Hint: Make it strong!',\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Submit Button in RJSF\nDESCRIPTION: This code snippet demonstrates how to customize the submit button in react-jsonschema-form (RJSF) using the `ui:submitButtonOptions` directive.  It shows how to disable the button, add a CSS class, and change the submit text. It showcases the `props`, `norender` and `submitText` options.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:submitButtonOptions': {\n    props: {\n      disabled: false,\n      className: 'btn btn-info',\n    },\n    norender: false,\n    submitText: 'Submit',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Changing the input type using ui:options - JSX\nDESCRIPTION: This JSX snippet demonstrates how to change the input type of a field (e.g., to 'tel' or 'email') using the `inputType` property within the `ui:options` uiSchema directive in a react-jsonschema-form. This allows for specifying the appropriate input type for different data types.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:options\": {\n    inputType: 'tel'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Form Errors with onError - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `onError` handler in the React JSONSchema Form to react to form validation errors. It imports necessary modules from `@rjsf/core` and `@rjsf/utils`, defines a simple schema, and implements an `onError` function that logs the number of errors. The `onError` handler is then passed to the `Form` component along with the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\nconst onError = (errors) => console.log('I have', errors.length, 'errors to fix');\n\nrender(<Form schema={schema} validator={validator} onError={onError} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML structure with custom classNames - HTML\nDESCRIPTION: This HTML snippet shows the rendered structure of a field in react-jsonschema-form after applying custom classNames using the uiSchema. The `field` div now contains the specified CSS classes alongside the default classes.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"field field-string task-title foo-bar\" >\n  <label>\n    <span>Title*</span>\n    <input value=\"My task\" required=\"\" type=\"text\">\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a form with multiple fields\nDESCRIPTION: This code snippet renders a form with multiple fields (name and age) using react-jsonschema-form. It defines a JSON schema with an object type and properties for name (string) and age (number). The Form component is then rendered with this schema and a validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties - React JSONSchema Form (TSX)\nDESCRIPTION: This code defines a simple object schema with `name` (string) and `age` (number) properties using the `properties` keyword within a JSON schema. It renders the form using the schema and the AJV8 validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My title',\n  description: 'My description',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Controlling AllOf Schema Defaults in React\nDESCRIPTION: This example demonstrates how to use the `allOf` option within the `experimental_defaultFormStateBehavior` prop to control how defaults are populated when `allOf` schemas are present. It defines a schema with `allOf` containing an `if-then` condition, and then sets the `allOf` option to `'populateDefaults'` to generate default values for properties within the `allOf` schema. The validator needs to be configured and passed as a prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Example',\n  type: 'object',\n  properties: {\n    animalInfo: {\n      properties: {\n        animal: {\n          type: 'string',\n          default: 'Cat',\n          enum: ['Cat', 'Fish'],\n        },\n      },\n      allOf: [\n        {\n          if: {\n            properties: {\n              animal: {\n                const: 'Cat',\n              },\n            },\n          },\n          then: {\n            properties: {\n              food: {\n                type: 'string',\n                default: 'meat',\n                enum: ['meat', 'grass', 'fish'],\n              },\n            },\n            required: ['food'],\n          },\n        },\n      ],\n    },\n  },\n};\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      allOf: 'populateDefaults',\n    }}\n  />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Property Order using uiSchema - JSX\nDESCRIPTION: This snippet demonstrates how to define the order in which object properties are rendered using the `ui:order` property within the `uiSchema` object. The `uiSchema` is passed to the `<Form>` component along with the schema. It allows customization of the form layout without modifying the schema itself.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {type: \"string\"},\n    bar: {type: \"string\"}\n  }\n};\n\nconst uiSchema = {\n  \"ui:order\": [\"bar\", \"foo\"]\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in ui:order for Property Order - JavaScript\nDESCRIPTION: This snippet illustrates how to use a wildcard character '*' in the `ui:order` array within the `uiSchema` to specify that properties not explicitly listed should be rendered at a certain point in the form. This allows you to define a partial order while letting the remaining fields be displayed automatically.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:order\": [\"bar\", \"*\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Checkbox Widget - React JSX\nDESCRIPTION: This snippet demonstrates how to override the default CheckboxWidget in react-jsonschema-form with a custom component. It defines a CustomCheckbox component and registers it in the widgets prop of the Form component. The uiSchema is used to specify that the checkbox widget should be used for the boolean field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"boolean\",\n  default: true\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"checkbox\"\n};\n\nconst CustomCheckbox = function(props) {\n  return (\n    <button id=\"custom\" className={props.value ? \"checked\" : \"unchecked\"} onClick={() => props.onChange(!props.value)}>\n    \t{String(props.value)}\n    </button>\n  );\n};\n\nconst widgets = {\n  CheckboxWidget: CustomCheckbox\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema}\n        widgets={widgets} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling array item ordering in React JSONSchema Form\nDESCRIPTION: This snippet disables the default ordering functionality for array items by setting the `orderable` option to `false` within the uiSchema using `\"ui:options\": { orderable: false }`. This removes the move up/down buttons next to array items.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    orderable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Properties - React JSONSchema Form (TSX)\nDESCRIPTION: This code defines a schema that allows adding additional properties of type number with specified enum values (1, 2, 3).  The `additionalProperties` keyword enables adding dynamic key-value pairs to the object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n  },\n  additionalProperties: {\n    type: 'number',\n    enum: [1, 2, 3],\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Widget in React JSON Schema Form (RJSF) - TSX\nDESCRIPTION: This snippet demonstrates how to override the default `CheckboxWidget` in React JSON Schema Form (RJSF) with a custom implementation.  It defines a `CustomCheckbox` component that renders a button instead of a standard checkbox. The `widgets` prop of the `Form` component is then used to map the `CheckboxWidget` key to this custom component, replacing the default checkbox with the custom button. The schema defines a boolean type with a default value of true. The uiSchema specifies that the 'checkbox' widget should be used.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema, WidgetProps, RegistryWidgetsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'boolean',\n  default: true,\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'checkbox',\n};\n\nconst CustomCheckbox = function (props: WidgetProps) {\n  return (\n    <button id='custom' className={props.value ? 'checked' : 'unchecked'} onClick={() => props.onChange(!props.value)}>\n      {String(props.value)}\n    </button>\n  );\n};\n\nconst widgets: RegistryWidgetsType = {\n  CheckboxWidget: CustomCheckbox,\n};\n\nrender(\n  <Form schema={schema} uiSchema={uiSchema} validator={validator} widgets={widgets} />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining uiSchema properties using the shorthand method in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define UI schema properties directly using the \"ui:\" prefix. It showcases setting the title, description, CSS class names, and submit button options for a form. The submit button options include disabling the button, setting CSS classes, and customizing the submit text.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:title\": \"Title\",\n  \"ui:description\": \"Description\",\n  \"ui:classNames\": \"my-class\",\n  \"ui:submitButtonOptions\": {\n    \"props\": {\n      \"disabled\": false,\n      \"className\": \"btn btn-info\"\n    },\n    \"norender\": false,\n    \"submitText\": \"Submit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining oneOf Schema in react-jsonschema-form (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a schema with the `oneOf` property in react-jsonschema-form. The `oneOf` property specifies an array of subschemas, where exactly one of them must be valid for the entire schema to be considered valid. The example uses `@rjsf/utils` for schema definitions and `@rjsf/validator-ajv8` for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/oneof.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  oneOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        ipsum: {\n          type: 'string',\n        },\n      },\n      required: ['ipsum'],\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using additionalItems in React JSONSchema Form\nDESCRIPTION: This snippet demonstrates the use of the `additionalItems` keyword to allow the user to add items with a different schema. In this case, the initial items are strings, while the additional items are booleans, defined by `additionalItems: { type: \"boolean\" }`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  },\n  additionalItems: {\n    type: \"boolean\"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using custom widgets for array in RJSF\nDESCRIPTION: This code snippet demonstrates how to use a custom widget for an array field. It defines a custom `CustomSelectComponent` which is a simple select element, then it is assigned to the uiSchema with the `ui:widget` property, and finally is passed to the form with the `widgets` prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst CustomSelectComponent = (props) => {\n  return (\n    <select>\n      {props.value.map((item, index) => (\n        <option key={index} id='custom-select'>\n          {item}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'CustomSelect',\n};\n\nconst widgets = {\n  CustomSelect: CustomSelectComponent,\n};\n\nrender(\n  <Form schema={schema} uiSchema={uiSchema} widgets={widgets} validator={validator} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Using a custom widget with ui:widget in React JSONSchema Form\nDESCRIPTION: This snippet demonstrates how to use a custom widget with the uiSchema using the `ui:widget` property. It defines a custom select component and uses it in the form. The custom widget is then passed via the widgets prop to the Form component. It assumes that the custom component takes a `value` prop which is an array, and iterates through the array to create options.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomSelectComponent = props => {\n  return (\n    <select>\n      {props.value.map((item, index) => (\n        <option key={index} id=\"custom-select\">\n          {item}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nconst schema = {\n  type: \"array\",\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n  },\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"CustomSelect\"\n};\n\nconst widgets = {\n  CustomSelect: CustomSelectComponent,\n},\n\nrender((<Form schema={schema} uiSchema={uiSchema} widgets={widgets} />), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Label Option - JSX\nDESCRIPTION: This JSX snippet demonstrates how to hide the label of a field using the `label: false` option within the `ui:options` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:options\": {\n    label: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Object Properties - JSX\nDESCRIPTION: This snippet shows how to specify required properties within an object schema using the `required` attribute in react-jsonschema-form. In this case, the 'name' property is marked as required. The schema is then used to render a `<Form>` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"My title\",\n  \"description\": \"My description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\"name\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Transforming validation errors to ErrorSchema in Typescript\nDESCRIPTION: This function transforms a list of RJSF validation errors into an `ErrorSchema`. It processes the errors, grouping them by property and creating a hierarchical structure representing the error locations within the form data. It takes an array of `RJSFValidationError` objects as input and returns an `ErrorSchema` object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/utility-functions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst changesThis = [\n  { property: '.level1.level2[2].level3', message: 'err a', stack: '.level1.level2[2].level3 err a' },\n  { property: '.level1.level2[2].level3', message: 'err b', stack: '.level1.level2[2].level3 err b' },\n  { property: '.level1.level2[4].level3', message: 'err b', stack: '.level1.level2[4].level3 err b' },\n];\nconst intoThis = {\n  level1: {\n    level2: {\n      2: { level3: { errors: ['err a', 'err b'] } },\n      4: { level3: { errors: ['err b'] } },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a themed form component with `withTheme` in React\nDESCRIPTION: This code snippet shows how to import the `withTheme` function and use it to create a themed form component.  It defines a simple theme with a custom widget and then creates a `ThemedForm` component using `withTheme`. The `ThemedForm` component is then used to render a form with the provided schema and uiSchema. Requires `@rjsf/core` package.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-themes.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { withTheme } from '@rjsf/core';\n\nconst theme = { widgets: {test: () => (<div>test</div>) } };\n\nconst ThemedForm = withTheme(theme); \n\nconst Demo = () => (\n  <ThemedForm schema={schema} uiSchema={uiSchema} />\n);\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Class Names - JSX\nDESCRIPTION: This JSX snippet demonstrates how to add custom class names to a form field using the `classNames` property in the uiSchema.  This allows you to style individual fields more easily using CSS.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst uiSchema = {\n  title: {\n    classNames: \"task-title foo-bar\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Enumerating String Values in React JSON Schema Form\nDESCRIPTION: This code demonstrates how to restrict user input to a set of enumerated string values using the `enum` property in the JSON schema. The form renders a select box with the provided enum values.  It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  enum: [\"one\", \"two\", \"three\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Multiple-choice list array in RJSF\nDESCRIPTION: This code snippet demonstrates how to create a multiple-choice list for an array field. It defines a schema with an `enum` list for the `items` property and `uniqueItems` set to `true`.  This will render a multiple select box by default.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining oneOf Schema for React JSON Schema Form (JSX)\nDESCRIPTION: This snippet defines a JSON schema using the `oneOf` keyword, requiring that exactly one of the subschemas is valid. The schema defines an object with either a 'lorem' property or an 'ipsum' property, both of which are required strings. The `Form` component from `react-jsonschema-form` is used to render a form based on this schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/oneof.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n    type: \"object\",\n    oneOf: [\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n        },\n        required: [\"lorem\"],\n      },\n      {\n        properties: {\n          ipsum: {\n            type: \"string\",\n          },\n        },\n        required: [\"ipsum\"],\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling removing array items in RJSF\nDESCRIPTION: This code snippet shows how to disable the remove button for array items using the `removable` option in the uiSchema. Setting `removable` to `false` within `'ui:options'` prevents users from deleting existing items in the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    removable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Adding CSS classes to a field using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to add CSS classes to a specific field (in this case, the `title` field) using the `ui:classNames` property in the uiSchema. The specified CSS classes (`task-title foo-bar`) will be applied to the div containing the field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  title: {\n    'ui:classNames': 'task-title foo-bar',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Field Labels in RJSF\nDESCRIPTION: This code snippet demonstrates how to hide field labels in react-jsonschema-form (RJSF) by setting the `label` option to `false` within the `ui:options` directive in the uiSchema. It imports necessary components from `@rjsf/core` and `@rjsf/utils` and defines a simple string schema. The `validator` from `@rjsf/validator-ajv8` is used for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    label: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Description - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to change the description of a field using the `ui:description` uiSchema directive. In this example the widget is set to a password input.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:description\": \"The best password\"\n};\n```\n\n----------------------------------------\n\nTITLE: Hidden Widget - TSX\nDESCRIPTION: This snippet demonstrates how to use a hidden widget for a boolean field in `react-jsonschema-form`. The `ui:widget` property in the `uiSchema` is set to `hidden` for the `foo` property.  This hides the widget from the user interface, but its value is still managed within the form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'boolean' },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  foo: { 'ui:widget': 'hidden' },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Specifying Property Order with Wildcard - React JSONSchema Form (TS)\nDESCRIPTION: This example demonstrates using the wildcard character '*' in the `ui:order` array. All properties not explicitly listed will be rendered at the wildcard's position.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:order': ['bar', '*'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding Title and Description to a String Field in React JSON Schema Form\nDESCRIPTION: This code shows how to add a title and description to a string field using the `title` and `description` properties in the JSON schema, respectively. The form uses this schema to display the field with the provided title and description.  It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"My form\",\n  description: \"My description\",\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Validation in React JSONSchema Form (JSX)\nDESCRIPTION: This code snippet demonstrates how to enable live validation in a React JSONSchema Form by passing the `liveValidate` prop set to `true` to the `Form` component. This triggers validation on every value change, reflecting results in the form state.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: [\"string\"],\n  const: \"test\"\n};\n\nconst formData = \"a\";\n\nrender((\n  <Form schema={schema} formData={formData} liveValidate />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget in React\nDESCRIPTION: This code snippet demonstrates how to create a custom widget for react-jsonschema-form. It defines a functional component `MyCustomWidget` that renders a text input field. The component accepts standard props like `value`, `required`, and `onChange`, allowing it to integrate seamlessly with the form.  It exports a `ThemeObject` with the custom widget.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-themes.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyCustomWidget = (props) => {\n  return (\n    <input type=\"text\"\n      className=\"custom\"\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)} />\n  );\n};\n\nconst myWidgets = {\n  myCustomWidget: MyCustomWidget\n};\n\nconst ThemeObject = {widgets: myWidgets};\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Evaluate Precompiled Validator in Browser using script tag in TSX\nDESCRIPTION: This code snippet shows how to evaluate a precompiled validator in the browser using a script tag. It defines a function `evaluateValidator` that dynamically creates a script element, sets its text content to the precompiled validator code wrapped in a specific function, and appends it to the document body. This enables the use of server-side compiled validators on the client-side.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ValidatorFunctions } from '@rjsf/validator-ajv8';\n\nimport ajvRuntimeEqual from 'ajv/dist/runtime/equal';\nimport {\n  parseJson as ajvRuntimeparseJson,\n  parseJsonNumber as ajvRuntimeparseJsonNumber,\n  parseJsonString as ajvRuntimeparseJsonString,\n} from 'ajv/dist/runtime/parseJson';\nimport ajvRuntimeQuote from 'ajv/dist/runtime/quote';\n// import ajvRuntimeRe2 from 'ajv/dist/runtime/re2';\nimport ajvRuntimeTimestamp from 'ajv/dist/runtime/timestamp';\nimport ajvRuntimeUcs2length from 'ajv/dist/runtime/ucs2length';\nimport ajvRuntimeUri from 'ajv/dist/runtime/uri';\nimport * as ajvFormats from 'ajv-formats/dist/formats';\n\n// dependencies to replace in generated code, to be provided by at runtime\nconst validatorsBundleReplacements: Record<string, [string, unknown]> = {\n  // '<code to be replaced>': ['<variable name to use as replacement>', <runtime dependency>],\n  'require(\"ajv/dist/runtime/equal\").default': ['ajvRuntimeEqual', ajvRuntimeEqual],\n  'require(\"ajv/dist/runtime/parseJson\").parseJson': ['ajvRuntimeparseJson', ajvRuntimeparseJson],\n  'require(\"ajv/dist/runtime/parseJson\").parseJsonNumber': ['ajvRuntimeparseJsonNumber', ajvRuntimeparseJsonNumber],\n  'require(\"ajv/dist/runtime/parseJson\").parseJsonString': ['ajvRuntimeparseJsonString', ajvRuntimeparseJsonString],\n  'require(\"ajv/dist/runtime/quote\").default': ['ajvRuntimeQuote', ajvRuntimeQuote],\n  // re2 by default is not in dependencies for ajv and so is likely not normally used\n  // 'require(\"ajv/dist/runtime/re2\").default': ['ajvRuntimeRe2', ajvRuntimeRe2],\n  'require(\"ajv/dist/runtime/timestamp\").default': ['ajvRuntimeTimestamp', ajvRuntimeTimestamp],\n  'require(\"ajv/dist/runtime/ucs2length\").default': ['ajvRuntimeUcs2length', ajvRuntimeUcs2length],\n  'require(\"ajv/dist/runtime/uri\").default': ['ajvRuntimeUri', ajvRuntimeUri],\n  // formats\n  'require(\"ajv-formats/dist/formats\")': ['ajvFormats', ajvFormats],\n};\n\nconst regexp = new RegExp(\n  Object.keys(validatorsBundleReplacements)\n    .map((key) => key.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'))\n    .join('|'),\n  'g'\n);\n\nfunction wrapAjvBundle(code: string) {\n  return `function(${Object.values(validatorsBundleReplacements)\n    .map(([name]) => name)\n    .join(', ')}){\\nvar exports = {};\\n${code.replace(\n    regexp,\n    (req) => validatorsBundleReplacements[req][0]\n  )};\\nreturn exports;\\n}`;\n}\n\nconst windowValidatorOnLoad = '__rjsf_validatorOnLoad';\nconst schemas = new Map<\n  string,\n  { promise: Promise<ValidatorFunctions>; resolve: (result: ValidatorFunctions) => void }\n>();\nif (typeof window !== 'undefined') {\n  // @ts-ignore\n  window[windowValidatorOnLoad] = (loadedId: string, fn: (...args: unknown[]) => ValidatorFunctions) => {\n    const validator = fn(...Object.values(validatorsBundleReplacements).map(([, dep]) => dep));\n    let validatorLoader = schemas.get(loadedId);\n    if (validatorLoader) {\n      validatorLoader.resolve(validator);\n    } else {\n      throw new Error(`Unknown validator loaded id=\"${loadedId}\"`);\n    }\n  };\n}\n\n/**\n * Evaluate precompiled validator in browser using script tag\n * @param id Identifier to avoid evaluating the same code multiple times\n * @param code Code generated server side using `compileSchemaValidatorsCode`\n * @param nonce nonce attribute to be added to script tag (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce#using_nonce_to_allowlist_a_script_element)\n */\nexport function evaluateValidator(id: string, code: string, nonce: string): Promise<ValidatorFunctions> {\n  let maybeValidator = schemas.get(id);\n  if (maybeValidator) return maybeValidator.promise;\n  let resolveValidator: (result: ValidatorFunctions) => void;\n  const validatorPromise = new Promise<ValidatorFunctions>((resolve) => {\n    resolveValidator = resolve;\n  });\n  schemas.set(id, {\n    promise: validatorPromise,\n    resolve: resolveValidator!,\n  });\n\n  const scriptElement = document.createElement('script');\n\n  scriptElement.setAttribute('nonce', nonce);\n  scriptElement.text = `window[\"${windowValidatorOnLoad}\"](\"${id}\", ${wrapAjvBundle(code)})`;\n\n  document.body.appendChild(scriptElement);\n  return validatorPromise;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining array of strings schema in RJSF\nDESCRIPTION: This code snippet defines a schema for an array of strings using RJSFSchema. The `type` is set to 'array' and the `items` property specifies that each item in the array should be of type 'string'. It also shows how to render the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Form Component\nDESCRIPTION: This code snippet demonstrates how to create a controlled form component using the `onChange` and `formData` props.  It uses the `useState` hook to manage the form data and updates it whenever the form changes. The `onChange` event handler is used to update the `formData` state with the new form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n\nconst App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (\n    <Form\n      schema={{ type: 'string' }}\n      formData={formData}\n      onChange={(e) => setFormData(e.formData)}\n      validator={validator}\n    />\n  );\n};\n\nrender(<App />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Creating a multiple-choice list in React JSONSchema Form\nDESCRIPTION: This snippet creates a multiple-choice list using an array with an `enum` list for the `items` property and `uniqueItems` set to `true`. This renders a multiple select box by default.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/fluent-ui\nDESCRIPTION: Installs the @rjsf/fluent-ui package using yarn, adding it as a project dependency. This command should be executed in the project's root directory after the prerequisites are installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluent-ui/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/fluent-ui\n```\n\n----------------------------------------\n\nTITLE: Customizing formContext in AntD theme (rjsf) - Typescript\nDESCRIPTION: This code snippet demonstrates how to customize the Ant Design theme in React JSON Schema Form using the formContext prop.  It sets the descriptionLocation to 'tooltip' and readonlyAsDisabled to false, enabling tooltip descriptions and preventing readOnly fields from being treated as disabled. It requires the antd library and `@rjsf/antd`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/antd/uiSchema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Form\n  formContext={{\n    descriptionLocation: 'tooltip',\n    readonlyAsDisabled: false,\n    // other props...\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Property Order with uiSchema in ReactJS\nDESCRIPTION: This code snippet demonstrates how to control the order in which object properties are rendered using the `ui:order` property in the `uiSchema`.  It swaps the default order of \"foo\" and \"bar\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {type: \"string\"},\n    bar: {type: \"string\"}\n  }\n};\n\nconst uiSchema = {\n  \"ui:order\": [\"bar\", \"foo\"]\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Title - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to change a field's title using the `ui:title` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:title\": \"Your password\"\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Property Order - React JSONSchema Form (TSX)\nDESCRIPTION: This snippet shows how to control the order in which properties are displayed in the form using the `ui:order` property in the `uiSchema`. Here, the `bar` property will be rendered before the `foo` property.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'string' },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:order': ['bar', 'foo'],\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites using npm\nDESCRIPTION: Installs the necessary prerequisites for using @rjsf/antd, including antd, @ant-design/icons, dayjs, and @rjsf/core. These dependencies are required for the Ant Design theme and its associated components to function correctly with react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/antd/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install antd @ant-design/icons dayjs @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Rendering a multiple-choice list as checkboxes (JS)\nDESCRIPTION: This snippet demonstrates how to render a multiple-choice list as a list of checkboxes instead of the default multiple select box. This is achieved by setting the `ui:widget` directive to `checkboxes` in the uiSchema for the array field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"checkboxes\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Alt-Datetime Widget with Options in React JSONSchema Form\nDESCRIPTION: This code snippet demonstrates how to use the `alt-datetime` widget with custom options in react-jsonschema-form. It defines a schema with a string type, and a uiSchema that specifies the `alt-datetime` widget, along with options to customize the year range and hide the Now and Clear buttons. The Form component is then rendered with the defined schema and uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"alt-datetime\",\n  \"ui:options\": {\n    yearsRange: [1980, 2030],\n    hideNowButton: true,\n    hideClearButton: true,\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling enum options using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to disable specific options within an enum using the `ui:enumDisabled` property in the uiSchema. In this example, the 'two' option will be disabled and unavailable for selection.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  enum: ['one', 'two', 'three'],\n};\n\nconst uiSchema: UiSchema = {\n  'ui:enumDisabled': ['two'],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with formData\nDESCRIPTION: This code snippet demonstrates how to prefill a form with existing data using the formData prop. It defines a schema with title (string) and done (boolean) properties and provides initial values for these fields in the formData object.  The Form component is rendered with this schema, formData and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string',\n    },\n    done: {\n      type: 'boolean',\n    },\n  },\n};\n\nconst formData = {\n  title: 'First task',\n  done: true,\n};\n\nrender(<Form schema={schema} formData={formData} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining anyOf Schema in react-jsonschema-form (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a schema with the `anyOf` property in react-jsonschema-form. The `anyOf` property specifies an array of subschemas, where at least one of them must be valid for the entire schema to be considered valid. The example uses `@rjsf/utils` for schema definitions and `@rjsf/validator-ajv8` for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/oneof.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  anyOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n        ipsum: {\n          type: 'string',\n        },\n      },\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Importing Form from @rjsf/material-ui\nDESCRIPTION: Imports the Form component directly from the @rjsf/material-ui package. This is the simplest way to use the Material UI theme with react-jsonschema-form. No additional configuration is needed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/material-ui/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/material-ui';\n```\n\n----------------------------------------\n\nTITLE: Setting FieldTemplate in uiSchema (JavaScript)\nDESCRIPTION: This snippet shows how to specify a custom FieldTemplate within the uiSchema. The `CustomFieldTemplate` component is assigned to the `ui:FieldTemplate` property, allowing for customized rendering of individual fields. It uses standard JavaScript syntax.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst uiSchema = {\n  \"ui:FieldTemplate\": CustomFieldTemplate\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean Labels - JSON Schema\nDESCRIPTION: This JSON schema shows how to customize labels for boolean fields using `oneOf` with `const` values for `true` and `false`.  Each `const` value is associated with a custom label in the `title` field. This allows for more descriptive labels than the default `true` and `false` values.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"booleanWithCustomLabels\": {\n      \"type\": \"boolean\",\n      \"oneOf\": [\n        { \"const\": true, \"title\": \"Custom label for true\" },\n        { \"const\": false, \"title\": \"Custom label for false\" }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Textarea Rows - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the initial height of a textarea using the `rows` option within the `ui:options` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"textarea\",\n  \"ui:options\": {\n    rows: 15\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: UiSchema with AnyOf in RJSF\nDESCRIPTION: This code snippet demonstrates how to use uiSchema with elements inside an `anyOf` array in react-jsonschema-form (RJSF). It overrides the titles of the first two elements within the `anyOf` list. The `anyOf` key must be defined at the same level in both `schema` and `uiSchema`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  anyOf: [\n    {\n      title: 'Strings',\n      type: 'string',\n    },\n    {\n      title: 'Numbers',\n      type: 'number',\n    },\n    {\n      title: 'Booleans',\n      type: 'boolean',\n    },\n  ],\n};\n\nconst uiSchema: UiSchema = {\n  anyOf: [\n    {\n      'ui:title': 'Custom String Title',\n    },\n    {\n      'ui:title': 'Custom Number Title',\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: withTheme Function Definition with Generics (rjsf/core)\nDESCRIPTION: This code snippet shows the `withTheme` function in `@rjsf/core` that uses generics `T`, `S`, and `F` for `formData`, `schema`, and `formContext`. It demonstrates how to create a themed form component with custom types.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n) {\n  // ... function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Options to a Custom Widget via ui:options - TSX\nDESCRIPTION: This example demonstrates how to pass options to a custom widget in React JSON Schema Form (RJSF) using the `ui:options` property in the `uiSchema`. The `MyCustomWidget` component receives these options via the `props.options` object. The example shows how to merge the `defaultProps` of the widget with the options provided in the `uiSchema`. In this case, the `color` option is defined in `defaultProps` and the `backgroundColor` option is defined in `ui:options`. The schema defines the type as string.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema, WidgetProps } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction MyCustomWidget(props: WidgetProps) {\n  const { options } = props;\n  const { color, backgroundColor } = options;\n  return <input style={{ color, backgroundColor }} />;\n}\n\nMyCustomWidget.defaultProps = {\n  options: {\n    color: 'red',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': MyCustomWidget,\n  'ui:options': {\n    backgroundColor: 'yellow',\n  },\n};\n\n// renders red on yellow input\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n\n```\n\n----------------------------------------\n\nTITLE: Disabling an enum option - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to disable a specific option within an enum using the `ui:enumDisabled` uiSchema directive in a react-jsonschema-form. The disabled option will be unselectable.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  enum: [\"one\", \"two\", \"three\"],\n};\n\nconst uiSchema= {\n  \"ui:enumDisabled\": ['two'],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SchemaField in react-jsonschema-form (Typescript)\nDESCRIPTION: This snippet demonstrates how to override the default `SchemaField` component in react-jsonschema-form to customize the rendering of any JSONSchema field type. It uses `RJSFSchema`, `FieldProps`, and `RegistryFieldsType` from `@rjsf/utils` and `validator` from `@rjsf/validator-ajv8`. The `CustomSchemaField` function component simply renders a `div` with some text and the stringified props. The `fields` constant is used to register the custom `SchemaField`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, FieldProps, RegistryFieldsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst CustomSchemaField = function (props: FieldProps) {\n  return (\n    <div id='custom'>\n      <p>Yeah, I'm pretty dumb.</p>\n      <div>My props are: {JSON.stringify(props)}</div>\n    </div>\n  );\n};\n\nconst fields: RegistryFieldsType = {\n  SchemaField: CustomSchemaField,\n};\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} fields={fields} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Initializing form with existing data (formData)\nDESCRIPTION: This code shows how to pre-fill a form with data using the `formData` prop. It defines a schema with `title` (string) and `done` (boolean) fields and then creates a `formData` object with corresponding values. This `formData` is passed to the `<Form>` component. It uses the `render` function to mount the form into the DOM element with id 'app'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    title: {\n      type: \"string\"\n    },\n    done: {\n      type: \"boolean\"\n    }\n  }\n};\n\nconst formData = {\n  title: \"First task\",\n  done: true\n};\n\nrender((\n  <Form schema={schema}\n        formData={formData} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing object fields with uiSchema\nDESCRIPTION: This snippet demonstrates how to customize individual object fields using the `uiSchema`. It adds custom CSS classes to the \"name\" and \"age\" fields within the object, allowing for specific styling of each field. The schema and uiSchema is used to render the form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nconst uiSchema = {\n  name: {\n    classNames: \"custom-class-name\"\n  },\n  age: {\n    classNames: \"custom-class-age\"\n  }\n}\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing MoveUpButton in react-jsonschema-form\nDESCRIPTION: This snippet customizes the MoveUpButton template in react-jsonschema-form. It defines a custom MoveUpButton function that renders a button with an icon and the text 'Move Up', which is then used in a Form component through the templates prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { IconButtonProps, RJSFSchema } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction MoveUpButton(props: IconButtonProps) {\n  const { icon, iconType, ...btnProps } = props;\n  return (\n    <button {...btnProps}>\n      {icon} <FormattedMessage defaultMessage='Move Up' />\n    </button>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ButtonTemplates: { MoveUpButton } }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Using Multiple File Upload with Array of Data-URLs\nDESCRIPTION: This code shows how to set up the schema to handle multiple file uploads. It uses an array of strings with the `data-url` format to allow multiple file selections.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\",\n    format: \"data-url\",\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining allOf Schema in react-jsonschema-form (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a schema with the `allOf` property in react-jsonschema-form. The `allOf` property specifies an array of subschemas, where all of them must be valid for the entire schema to be considered valid.  `json-schema-merge-allof` library is used to merge the specified subschemas to create a combined subschema. The example uses `@rjsf/utils` for schema definitions and `@rjsf/validator-ajv8` for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/oneof.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Field',\n  allOf: [\n    {\n      type: ['string', 'boolean'],\n    },\n    {\n      type: 'boolean',\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Help Text - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to add help text to a field using the `ui:help` uiSchema directive. The text appears below the input field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:help\": \"Hint: Make it strong!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring formContext with Semantic UI options in JSX\nDESCRIPTION: This snippet shows how to configure Semantic UI options using the `formContext` prop in a React JSONSchema Form component. It sets `wrapLabel` and `wrapContent` to `true`, which allows for custom styling of labels and field content using CSS. This provides flexibility in customizing the appearance of the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/semantic-ui/uiSchema.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Form\n  formContext={{\n    semantic: {\n      wrapLabel: true,\n      wrapContent: true,\n    },\n    // other props...\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Alternative Datetime Widget - TSX\nDESCRIPTION: This code demonstrates how to use the `alt-datetime` widget for date and time input using `react-jsonschema-form`. It imports necessary modules, defines a schema with a string type, and sets the widget to `alt-datetime` in the `uiSchema`. Options are provided to customize the years range, date format, and hide the Now and Clear buttons. The `Form` component is rendered with the defined schema, uiSchema, and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'alt-datetime',\n  'ui:options': {\n    yearsRange: [1980, 2030],\n    format: 'MDY',\n    hideNowButton: true,\n    hideClearButton: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing MoveDownButton in react-jsonschema-form\nDESCRIPTION: This code demonstrates customizing the MoveDownButton in react-jsonschema-form. It imports required components, defines a custom MoveDownButton function that renders a button with an icon and the text 'Move Down', and then renders the Form component utilizing the custom template.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { IconButtonProps, RJSFSchema } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction MoveDownButton(props: IconButtonProps) {\n  const { icon, iconType, ...btnProps } = props;\n  return (\n    <button {...btnProps}>\n      {icon} <FormattedMessage defaultMessage='Move Down' />\n    </button>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ButtonTemplates: { MoveDownButton } }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widget Component with React JSON Schema Form - TSX\nDESCRIPTION: This snippet showcases how to register a custom widget component with React JSON Schema Form (RJSF) using the `widgets` prop of the `Form` component.  A `MyCustomWidget` component is defined, which renders a custom input element. The `widgets` object maps the key `myCustomWidget` to this component. The `uiSchema` then references this widget by setting `ui:widget` to `myCustomWidget`. This approach is beneficial when the `uiSchema` is exposed as pure JSON and cannot directly contain functions.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema, WidgetProps, RegistryWidgetsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst MyCustomWidget = (props: WidgetProps) => {\n  return (\n    <input\n      type='text'\n      className='custom'\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)}\n    />\n  );\n};\n\nconst widgets: RegistryWidgetsType = {\n  myCustomWidget: MyCustomWidget,\n};\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'myCustomWidget',\n};\n\nrender(\n  <Form schema={schema} uiSchema={uiSchema} validator={validator} widgets={widgets} />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Array Field Buttons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to customize the icons and text of the array field buttons (Add, Copy, Remove, Move Up, Move Down) in the `@rjsf/core` theme. It hides the default Bootstrap glyphicons and replaces them with custom text using the `content` property.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/internals.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ni.glyphicon {\n  display: none;\n}\n.btn-add::after {\n  content: 'Add';\n}\n.array-item-copy::after {\n  content: 'Copy';\n}\n.array-item-move-up::after {\n  content: 'Move Up';\n}\n.array-item-move-down::after {\n  content: 'Move Down';\n}\n.array-item-remove::after {\n  content: 'Remove';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fields Globally in RJSF\nDESCRIPTION: This example shows how to globally override a field in react-jsonschema-form using the `fields` prop of the `Form` component.  `MyCustomField` is a placeholder for the custom field implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Form fields={{ MyCustomField }} />\n```\n\n----------------------------------------\n\nTITLE: Styling form widgets with Chakra-UI in uiSchema (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to customize the styling of form widgets in a React JSON Schema Form using the @rjsf/chakra-ui library. It leverages the 'chakra' ui:option within the uiSchema to apply Chakra-UI's style props to individual widgets, allowing for granular control over their appearance. The 'sx' property allows styling inner components.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/chakra-ui/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"yourField\": {\n    \"ui:options\": {\n      \"chakra\": {\n        \"p\": \"1rem\",\n        \"color\": \"blue.200\",\n        \"sx\": {\n          \"margin\": \"0 auto\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Async Errors (JSX)\nDESCRIPTION: This code snippet demonstrates handling asynchronous errors in a React JSONSchema Form using the `extraErrors` prop. This prop allows display of backend-generated errors, formatted to match the schema structure, without blocking form submission.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {\n      type: \"string\",\n    },\n    candy: {\n      type: \"object\",\n      properties: {\n        bar: {\n          type: \"string\",\n        }\n      }\n    }\n  }\n};\n\nconst extraErrors = {\n  foo: {\n    __errors: [\"some error that got added as a prop\"],\n  },\n  candy: {\n    bar: {\n    __errors: [\"some error that got added as a prop\"],\n    }\n  }\n};\n\nrender((\n  <Form schema={schema}\n        extraErrors={extraErrors} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Applying uiSchema to array items in RJSF\nDESCRIPTION: This code snippet demonstrates how to apply a uiSchema to array items. It defines a schema for an array of strings and then applies a uiSchema that sets the `ui:widget` to 'textarea' for each item in the array. It shows how to render the form using the schema, uiSchema, and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema = {\n  items: {\n    'ui:widget': 'textarea',\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: File Widget with Accept Option - React JSONSchema Form (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `accept` attribute to specify a filter for allowed file types in a file widget. The uiSchema's `ui:options` object includes an `accept` property set to \".pdf\", restricting the user to only upload PDF files.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  format: \"data-url\"\n};\n\nconst uiSchema = {\n  \"ui:options\": { accept: \".pdf\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Using inline checkboxes for multiple-choice list in RJSF\nDESCRIPTION: This code snippet demonstrates how to render checkboxes for a multiple-choice list inline instead of stacked. It sets the `inline` property to `true` within the `ui:options` of the uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  minItems: 2,\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'checkboxes',\n  'ui:options': {\n    inline: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Disabling Additional Properties with uiSchema in ReactJS\nDESCRIPTION: This code snippet shows how to disable the ability to add additional properties to an object using the `expandable` option in the `uiSchema`. This prevents the \"add\" button from appearing.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst uiSchema = {\n  \"ui:options\":  {\n    expandable: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Form (again) - JavaScript\nDESCRIPTION: Imports the Form component from the `@rjsf/material-ui` package to use the Material UI theme.  This snippet requires the `@rjsf/core` and `@rjsf/material-ui` packages to be installed. It demonstrates how to replace the default Bootstrap theme with Material UI.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/themes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from \"@rjsf/material-ui\";\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Schema Dependencies with oneOf in react-jsonschema-form\nDESCRIPTION: This snippet utilizes `oneOf` within the `dependencies` to create dynamic schema changes based on the value of the \"Do you have any pets?\" field.  Different schema fragments are merged depending on whether the user answers \"No\", \"Yes: One\", or \"Yes: More than one\". Requires react-jsonschema-form and react.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/dependencies.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Do you have any pets?\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"No\",\n        \"Yes: One\",\n        \"Yes: More than one\"\n      ],\n      \"default\": \"No\"\n    }\n  },\n  \"required\": [\n    \"Do you have any pets?\"\n  ],\n  \"dependencies\": {\n    \"Do you have any pets?\": {\n      \"oneOf\": [\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"No\"\n              ]\n            }\n          }\n        },\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"Yes: One\"\n              ]\n            },\n            \"How old is your pet?\": {\n              \"type\": \"number\"\n            }\n          },\n          \"required\": [\n            \"How old is your pet?\"\n          ]\n        },\n        {\n          \"properties\": {\n            \"Do you have any pets?\": {\n              \"enum\": [\n                \"Yes: More than one\"\n              ]\n            },\n            \"Do you want to get rid of any?\": {\n              \"type\": \"boolean\"\n            }\n          },\n          \"required\": [\n            \"Do you want to get rid of any?\"\n          ]\n        }\n      ]\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining a simple string form schema\nDESCRIPTION: This snippet defines a JSON schema for a simple form with a single string field.  It uses the `title` and `type` properties to define the form's appearance and data type. It then renders a `<Form>` component with the defined schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom SubmitButton Component in react-jsonschema-form (TypeScript/JSX)\nDESCRIPTION: This code defines a custom `SubmitButton` component for `react-jsonschema-form`. It checks for the `norender` option in the `uiSchema` to conditionally render the button. If `norender` is false or absent, it renders a submit button with a default message. It imports necessary modules from `@rjsf/utils`, `react-intl`, and `@rjsf/validator-ajv8`. The code also includes a simple schema and renders the form with the custom button.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { getSubmitButtonOptions, RJSFSchema, SubmitButtonProps } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction SubmitButton(props: SubmitButtonProps) {\n  const { uiSchema } = props;\n  const { norender } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <button type='submit'>\n      <FormattedMessage defaultMessage='Okay' />\n    </button>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ButtonTemplates: { SubmitButton } }} />, \n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining uiSchema properties using ui:options in JSON\nDESCRIPTION: This JSON snippet shows an alternative way to define UI schema properties using the \"ui:options\" object. It demonstrates setting the same properties as the previous example (title, description, CSS class names, and submit button options) but within the \"ui:options\" object. The submit button options are configured similarly, with props, rendering control, and text customization.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"title\": \"Title\",\n    \"description\": \"Description\",\n    \"classNames\": \"my-class\",\n    \"submitButtonOptions\": {\n      \"props\": {\n        \"disabled\": false,\n        \"className\": \"btn btn-info\"\n      },\n      \"norender\": false,\n      \"submitText\": \"Submit\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Form component from @rjsf/core in JavaScript\nDESCRIPTION: This code snippet shows how to import the Form component from the @rjsf/core package in JavaScript. This allows you to use the react-jsonschema-form component in your React application with the core logic and Bootstrap 3 theme. It assumes you have already installed @rjsf/core.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from '@rjsf/core';\n```\n\n----------------------------------------\n\nTITLE: HTML Output with custom CSS classes\nDESCRIPTION: This HTML snippet demonstrates the expected output HTML when using custom CSS classes from the previous example. The div wrapping the field will have the specified classes included in its class attribute.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"field field-string task-title foo-bar\">\n  <label>\n    <span>Title*</span>\n    <input value=\"My task\" required=\"\" type=\"text\" />\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining an array of objects in React JSONSchema Form (JSX)\nDESCRIPTION: This snippet demonstrates how to define an array of objects using the schema property in React JSONSchema Form. The schema specifies the type as \"array\" and the items as an object with a property named \"name\" of type \"string\". The Form component then renders the array of object input fields.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"object\",\n    properties: {\n        name: {\n            type: \"string\"\n        }\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: File Widget with Data URL Format - React JSONSchema Form (JSX)\nDESCRIPTION: This snippet shows how to use the file widget by defining a string schema type with the `data-url` format. The schema specifies that the field should accept a string in data URL format, which triggers the file widget to be used.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  format: \"data-url\",\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Boolean Field with Radio Widget - React JSONSchema Form (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `radio` widget for a boolean field using the `ui:widget` property in the `uiSchema`. The `schema` defines a boolean property named `done`, and the `uiSchema` specifies that it should be rendered as a radio button group.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    done: {\n      type: \"boolean\"\n    }\n  }\n};\n\nconst uiSchema =  {\n  done: {\n    \"ui:widget\": \"radio\" // could also be \"select\"\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Nullable types for a field in RJSF\nDESCRIPTION: This snippet shows how to define a nullable field, which can be either a specific type or `null`. The `type` property is an array containing the base type (e.g., 'string') and 'null'. This allows the field to accept either a string or a null value. It imports the necessary modules, defines the schema with a nullable type, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: ['string', 'null'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Form Component Definition with Generics (rjsf/core)\nDESCRIPTION: This code snippet showcases the definition of the `Form` component in the `@rjsf/core` library, demonstrating the use of generics `T`, `S`, and `F` for `formData`, `schema`, and `formContext` respectively. It highlights how these generics are used to provide type safety and customization options for the form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  // ... class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Widgets Per-Field in RJSF\nDESCRIPTION: This example illustrates how to override a widget on a per-field basis in react-jsonschema-form using the `uiSchema`. The `ui:widget` property is used to specify the custom widget. `MyCustomWidget` represents the custom widget implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ui:widget\":MyCustomWidget\n```\n\n----------------------------------------\n\nTITLE: Importing Form from @rjsf/semantic-ui\nDESCRIPTION: This JavaScript code imports the Form component from the @rjsf/semantic-ui package. This allows you to directly use the Semantic UI themed form component in your React application.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/semantic-ui/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/semantic-ui';\n```\n\n----------------------------------------\n\nTITLE: Adding title and description to a field in RJSF\nDESCRIPTION: This code shows how to add a title and description to a string field using the `title` and `description` properties within the schema. The title will be displayed as the field's label, and the description will provide additional context. It imports the necessary modules, defines a schema, and renders the form with the title and description.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My form',\n  description: 'My description',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing ErrorListTemplate in RJSF (TSX)\nDESCRIPTION: This example showcases how to customize the ErrorListTemplate in react-jsonschema-form. It defines a custom component that renders a list of errors within a <details> and <ul> element. The component iterates through the errors array, displaying each error's stack property in a <li> element.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ErrorListProps, RJSFValidationError, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction ErrorListTemplate(props: ErrorListProps) {\n  const { errors } = props;\n  return (\n    <details id={id}>\n      <summary>Errors</summary>\n      <ul>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='error'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </details>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ ErrorListTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Async Validation with extraErrors in React JSONSchema Form (JSX)\nDESCRIPTION: Shows how to add asynchronous validation errors using the `extraErrors` prop. These errors are display-only and will not block form submission. The errors are structured to match the schema properties.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {\n      type: \"string\",\n    },\n    candy: {\n      type: \"object\",\n      properties: {\n        bar: {\n          type: \"string\",\n        }\n      }\n    }\n  }\n};\n\nconst extraErrors = {\n  foo: {\n    __errors: [\"some error that got added as a prop\"],\n  },\n  candy: {\n    bar: {\n    __errors: [\"some error that got added as a prop\"],\n    }\n  }\n};\n\nrender((\n  <Form schema={schema}\n        extraErrors={extraErrors} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Title and Description to a Field (JSX)\nDESCRIPTION: This code snippet demonstrates how to add a title and description to a field in react-jsonschema-form using JSON Schema. It defines a schema with the title and description properties. The Form component renders these properties as labels or helper text associated with the input field. Overriding title and description is possible using uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"My form\",\n  description: \"My description\",\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Chakra uiSchema Chakra Property\nDESCRIPTION: This JSON snippet shows how to customize Chakra UI widgets within react-jsonschema-form using the `uiSchema` and the `chakra` option. This allows specifying Chakra style props directly on form elements.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/chakra-ui/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"chakra\": {\n      \"p\": \"1rem\",\n      \"color\": \"blue.200\",\n      \"sx\": {\n        \"margin\": \"0 auto\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Widget with ui:widget - TS\nDESCRIPTION: This snippet shows how to use a file widget by setting the `ui:widget` property to `file` in the `uiSchema`. This is another way to specify that a file input should be rendered for a string field.  The file content will be stored as a data URL.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'file',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Form with withTheme\nDESCRIPTION: This JavaScript code snippet shows how to create a custom form component using the withTheme function from @rjsf/core and the Theme from @rjsf/fluentui-rc. This allows for customization of the theme by modifying fields and widgets.  The resulting Form can then be used to render JSON Schema forms with the custom theme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluentui-rc/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as FluentUIRCTheme } from '@rjsf/fluentui-rc';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(FluentUIRCTheme);\n```\n\n----------------------------------------\n\nTITLE: Customizing Duplicate Key Separator Globally\nDESCRIPTION: This code snippet demonstrates how to customize the separator used when dealing with duplicate keys in `additionalProperties` within react-jsonschema-form (RJSF).  It sets the `duplicateKeySuffixSeparator` option in `ui:globalOptions` to '_'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  'ui:globalOptions': {\n    duplicateKeySuffixSeparator: '_',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Basic Form rendering with @rjsf/validator-ajv6\nDESCRIPTION: This example demonstrates the basic usage of the @rjsf/validator-ajv6 validator with a simple schema and the React JSON Schema Form component. It imports necessary modules, defines a schema, and renders a form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv6';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Generic T (formData) in RJSF\nDESCRIPTION: This code demonstrates how to override the `T` generic, representing `formData`, in the `<Form>` component. It defines a custom `FormData` interface and uses it to type the `formData` prop, ensuring type safety when working with the form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { Form } from '@rjsf/core';\n\ninterface FormData {\n  foo?: string;\n  bar?: number;\n}\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'number' },\n  },\n};\n\nconst formData: FormData = {};\n\nconst validator = customizeValidator<FormData>();\n\nrender(<Form<FormData> schema={schema} validator={validator} formData={formData} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent UI CSS to HTML\nDESCRIPTION: Adds a CSS link tag to the main HTML page to enable the Fluent UI grid. This stylesheet is required for proper rendering of the Fluent UI components within the react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluent-ui/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"//static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using additionalItems keyword in RJSF\nDESCRIPTION: This code snippet demonstrates the use of the `additionalItems` keyword. It defines a schema for an array of strings, but allows for additional items of type boolean. It shows how to render the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n  additionalItems: {\n    type: 'boolean',\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Wrapping BaseInputTemplate in RJSF (TSX)\nDESCRIPTION: This snippet shows how to wrap the existing `BaseInputTemplate` to customize it by passing additional properties.  It retrieves the default `BaseInputTemplate` from either `@rjsf/core` or a theme (like `@rjsf/mui`).  A new component, `MyBaseInputTemplate`, is created, taking `BaseInputTemplateProps` and merging custom properties with the existing props before rendering the original `BaseInputTemplate`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaseInputTemplateProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\nimport { Templates } from '@rjsf/mui';\n\nconst {\n  templates: { BaseInputTemplate },\n} = getDefaultRegistry(); // To get templates from core\n// const { BaseInputTemplate } = Templates; // To get templates from a theme do this\n\nfunction MyBaseInputTemplate(props: BaseInputTemplateProps) {\n  const customProps = {};\n  // get your custom props from where you need to\n  return <BaseInputTemplate {...props} {...customProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Files Widget with Data URL Format - React JSONSchema Form (JS)\nDESCRIPTION: This snippet demonstrates how to handle multiple file uploads by defining an array of strings with the `data-url` format as an item in the schema.  This configures the widget to allow the user to select multiple files, which will be stored as an array of data URLs.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\",\n    format: \"data-url\",\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Schema Validation (JSON Schema) \nDESCRIPTION: Shows how to specify a meta-schema other than the default draft-07 in a JSON schema. The `$schema` property indicates which JSON Schema specification the schema adheres to.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying AntD Theme\nDESCRIPTION: Imports the AntDTheme and withTheme function from @rjsf/core and @rjsf/antd respectively. This allows for more customization by applying the AntDTheme to a base form component. This approach lets developers modify the theme by adding or replacing fields and widgets, allowing for a more customized form experience. The resulting theme is then used to create a Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/antd/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as AntDTheme } from '@rjsf/antd';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(AntDTheme);\n```\n\n----------------------------------------\n\nTITLE: Custom Error List Display in React JSON Schema Form (TSX)\nDESCRIPTION: This code snippet shows how to take control over the display of form errors by defining a custom error list template. It creates a `ErrorListTemplate` React component that receives errors as props and renders them within a custom HTML structure. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8` and the `showErrorList` prop set to `top` or `bottom`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, ErrorListProps } from \"@rjsf/utils\";\nimport validator from \"@rjsf/validator-ajv8\";\n\nfunction ErrorListTemplate(props: ErrorListProps) {\n  const { errors } = props;\n  return (\n    <div>\n      <h2>Custom error list</h2>\n      <ul>\n        {errors.map(error => (\n            <li key={error.stack}>\n              {error.stack}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nconst schema: RJSFSchema = {\n  type: \"string\",\n  const: \"test\"\n};\n\nrender((\n  <Form schema={schema}\n        validator={validator}\n        showErrorList='top'\n        formData={\"\"}\n        liveValidate\n        templates: {{ ErrorListTemplate }} />\n), document.getElementById(\"app\"));\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a string field in RJSF\nDESCRIPTION: This code snippet demonstrates how to define a simple string field using the RJSFSchema interface. It imports necessary modules from `@rjsf/utils` and `@rjsf/validator-ajv8`, defines a schema with `type: 'string'`, and renders a form using the defined schema and validator. This configures the field to accept string inputs.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using withTheme to Apply FluentUITheme\nDESCRIPTION: Imports the `withTheme` function from `@rjsf/core` and the `FluentUITheme` from `@rjsf/fluent-ui`. It then creates a Form component with the Fluent UI theme applied using the `withTheme` higher-order component, which allows for customizations of the theme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluent-ui/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as FluentUITheme } from '@rjsf/fluent-ui';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(FluentUITheme);\n```\n\n----------------------------------------\n\nTITLE: Custom labels for enum fields using oneOf in RJSF\nDESCRIPTION: This example uses `oneOf` to provide custom labels for enum values, similar to `anyOf`.  Each option in the `oneOf` array includes a `const` field specifying the value and a `title` field for the label. This configures the field to display the titles associated with each enum value.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  oneOf: [\n    { const: 1, title: 'one' },\n    { const: 2, title: 'two' },\n    { const: 3, title: 'three' },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Rendering a simple string field form\nDESCRIPTION: This code snippet demonstrates how to render a simple form with a single string field using react-jsonschema-form. It imports the necessary components from `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8`. It defines a JSON schema with a title and a type of 'string', and then renders the Form component with the schema and a validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/01-quickstart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Object Fields in React\nDESCRIPTION: This example demonstrates how to use the `emptyObjectFields` option within the `experimental_defaultFormStateBehavior` prop to control how empty object fields are populated with default values.  It sets the `emptyObjectFields` option to `'populateRequiredDefaults'`, which only sets default values for object fields that are required. The validator needs to be configured and passed as a prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: { type: 'string' },\n  minItems: 3,\n};\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      emptyObjectFields: 'populateRequiredDefaults',\n    }}\n  />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Meta Schema (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to specify a JSON Schema meta-schema using the `$schema` attribute. This enables validation against a specific JSON Schema version (e.g., draft-04).\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Geo Field - React JSX\nDESCRIPTION: This snippet demonstrates how to create and register a custom field component. It defines a GeoPosition component that handles latitude and longitude inputs. The uiSchema specifies that the geo field should be used for the root object. The fields prop of the Form component is used to register the custom field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  required: [\"lat\", \"lon\"],\n  properties: {\n    lat: {type: \"number\"},\n    lon: {type: \"number\"}\n  }\n};\n\n// Define a custom component for handling the root position object\nclass GeoPosition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {...props.formData};\n  }\n\n  onChange(name) {\n    return (event) => {\n      this.setState({\n        [name]: parseFloat(event.target.value)\n      }, () => this.props.onChange(this.state));\n    };\n  }\n\n  render() {\n    const {lat, lon} = this.state;\n    return (\n      <div>\n        <input type=\"number\" value={lat} onChange={this.onChange(\"lat\")} />\n        <input type=\"number\" value={lon} onChange={this.onChange(\"lon\")} />\n      </div>\n    );\n  }\n}\n\n// Define the custom field component to use for the root object\nconst uiSchema = {\"ui:field\": \"geo\"};\n\n// Define the custom field components to register; here our \"geo\"\n// custom field component\nconst fields = {geo: GeoPosition};\n\n// Render the form with all the properties we just defined passed\n// as props\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    fields={fields} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling adding array items in RJSF\nDESCRIPTION: This code snippet demonstrates how to disable the add button for array items using the `addable` option in the uiSchema. Setting `addable` to `false` within `'ui:options'` prevents users from adding new items to the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    addable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Object Schema and Custom ObjectFieldTemplate (JSX)\nDESCRIPTION: Defines a JSON schema for an object with string and number properties, and a custom ObjectFieldTemplate component in JSX.  The ObjectFieldTemplate renders the object's title, description, and properties within a div structure.  It uses react-jsonschema-form's Form component to render the form using the schema and custom template. Requires the Form component and render function from react-dom.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  title: \"Object title\",\n  description: \"Object description\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nfunction ObjectFieldTemplate(props) {\n  return (\n    <div>\n      {props.title}\n      {props.description}\n      {props.properties.map(element => <div className=\"property-wrapper\">{element.content}</div>)}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ObjectFieldTemplate={ObjectFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling Additional Properties with expandable Option - JavaScript\nDESCRIPTION: This snippet demonstrates how to disable the ability to add additional properties to an object by setting the `expandable` option to `false` within the `ui:options` of the `uiSchema`. This prevents the 'add' button from being displayed in the form, effectively restricting the user to only the properties defined in the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:options\":  {\n    expandable: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Ajv Formats in TSX\nDESCRIPTION: This code shows how to configure specific formats when customizing the Ajv validator. It uses the `ajvFormatOptions` to specify only the 'date' format. The `ajvFormatOptions` can either be an array of format names or an object for more granular control.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'date',\n};\n\nconst validator = customizeValidator({ ajvFormatOptions: ['date'] });\n// or\n// const validator = customizeValidator({ ajvFormatOptions: { mode: \"fast\", formats: [\"date\"], keywords: true } });\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn\nDESCRIPTION: This command installs the necessary dependencies for using Chakra UI with React.  It includes @chakra-ui/react, @emotion/react, @emotion/styled, and framer-motion. It is a prerequisite to using the @rjsf/chakra-ui package.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/chakra-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @chakra-ui/react@^1.7 @emotion/react@^11 @emotion/styled@^11 framer-motion@^5\n```\n\n----------------------------------------\n\nTITLE: Setting Textarea Rows in RJSF\nDESCRIPTION: This code snippet shows how to set the initial height of a textarea widget in react-jsonschema-form (RJSF) using the `rows` option within the `ui:options` directive. It imports required modules and defines a schema and uiSchema accordingly. The `widget` property is set to 'textarea' to explicitly use a textarea.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    widget: 'textarea',\n    rows: 15,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Initializing String Field Schema in React JSON Schema Form\nDESCRIPTION: This code snippet demonstrates how to define a simple JSON schema for a string field using `react-jsonschema-form`.  The `type` property is set to \"string\". It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable String Field (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a nullable string field in react-jsonschema-form. The type property is an array containing \"string\" and \"null\". This indicates that the field can accept either a string value or a null value.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: [\"string\", \"null\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Field Example for @rjsf/material-ui in JSX\nDESCRIPTION: This code defines a custom field, `GeoPosition`, for the `react-jsonschema-form` using the `material-ui` theme. It uses the `useMuiComponent` hook to access Material-UI components like `Box` and `TextInput`. The field manages latitude and longitude inputs, updating the form data through the `onChange` prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  required: [\"lat\", \"lon\"],\n  properties: {\n    lat: { type: \"number\"},\n    lon: { type: \"number\" }\n  }\n};\n\nimport { useMuiComponent } from '@rjsf/material-ui/v4';\n\n// Define a custom component for handling the root position object\nfunction GeoPosition(props) {\n  const { lat, lon } = props.formData;\n  const { Box, TextInput } = useMuiComponent();\n\n  const onChangeLat = (event) => {\n    const { target: { value } } = event;\n    const newData = { ...props.formData, lat: value };\n    props.onChange(newData);\n  };\n\n  const onChangeLon = (event) => {\n    const { target: { value } } = event;\n    const newData = { ...props.formData, lon: value };\n    props.onChange(newData);\n  };\n\n  return (\n    <Box>\n      <TextInput type=\"number\" value={lat} onChange={onChangeLat} />\n      <TextInput type=\"number\" value={lon} onChange={onChangeLon} />\n    </Box>\n  );\n}\n\n// Define the custom field component to use for the root object\nconst uiSchema = { \"ui:field\": \"geo\" };\n\n// Define the custom field components to register; here our \"geo\"\n// custom field component\nconst fields = { geo: GeoPosition };\n\n// Render the form with all the properties we just defined passed\n// as props\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    fields={fields} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Transformation (JSX)\nDESCRIPTION: This snippet demonstrates how to transform JSON Schema validation errors in a React JSONSchema Form using a `transformErrors` function. This function receives a list of errors, modifies the messages of specific errors, and returns the updated list.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction transformErrors(errors) {\n  return errors.map(error => {\n    if (error.name === \"pattern\") {\n      error.message = \"Only digits are allowed\"\n    }\n    return error;\n  });\n}\n\nconst schema = {\n  type: \"object\",\n  properties: {\n    onlyNumbersString: {type: \"string\", pattern: \"^\\\\d*$\"},\n  }\n};\n\nrender((\n  <Form schema={schema}\n        transformErrors={transformErrors} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing FieldTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the overall structure of a form field row in react-jsonschema-form using the FieldTemplate. It allows control over the placement of labels, descriptions, widgets, errors, and help texts.  It depends on @rjsf/utils and @rjsf/validator-ajv8. It customizes how each field is rendered, including label, description, children (widget), errors and help.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldTemplateProps, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nfunction CustomFieldTemplate(props: FieldTemplateProps) {\n  const { id, classNames, style, label, help, required, description, errors, children } = props;\n  return (\n    <div className={classNames} style={style}>\n      <label htmlFor={id}>\n        {label}\n        {required ? '*' : null}\n      </label>\n      {description}\n      {children}\n      {errors}\n      {help}\n    </div>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ FieldTemplate: CustomFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies\nDESCRIPTION: Installs the project dependencies using npm.  This is a prerequisite for running the project locally or building it. It reads package.json to determine the necessary packages.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Combining All Customization Options\nDESCRIPTION: A comprehensive example demonstrating how to combine all customization options for the AJV8 validator: additional meta schemas, custom formats, AJV options overrides, and AJV format options.  The custom validator is then used in a form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst metaSchemaDraft06 = require('ajv/lib/refs/json-schema-draft-06.json');\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]\\d{3}[\\s-]\\d{4}$/,\n};\n\nconst validator = customizeValidator({\n  additionalMetaSchemas: [metaSchemaDraft06],\n  customFormats,\n  ajvOptionsOverrides: {\n    $data: true,\n    verbose: true,\n  },\n  ajvFormatOptions: {\n    keywords: true,\n    formats: ['date', 'time'],\n  },\n});\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-06/schema#',\n  type: 'string',\n  format: 'phone-us',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Defining uiSchema with title and description - JSON\nDESCRIPTION: These JSON snippets demonstrate two equivalent ways of defining a uiSchema with title and description properties using the react-jsonschema-form library. The first uses \"ui:title\" and \"ui:description\" directly, while the second encapsulates them within the \"ui:options\" object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:title\": \"Title\",\n  \"ui:description\": \"Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `additionalItems` keyword (JSX)\nDESCRIPTION: This snippet demonstrates the use of the `additionalItems` keyword in React JSONSchema Form to allow additional items of a specific schema to be added to an array. The example shows an array of strings with additional items of type boolean. This means the array will initially contain string fields, but boolean fields can be added using the add button.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  },\n  additionalItems: {\n    type: \"boolean\"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: HTML Output with inline styles\nDESCRIPTION: This HTML snippet demonstrates the expected output HTML when applying inline styles. The wrapping div will have a `style` attribute with the given styles.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"field field-string task-title\" style={{ color: \"red\" }}>\n  <label>\n    <span>Title*</span>\n    <input value=\"My task\" required=\"\" type=\"text\">\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a multiple-choice list as checkboxes in React JSONSchema Form\nDESCRIPTION: This snippet renders a multiple-choice list as a list of checkboxes by setting the `ui:widget` directive to `checkboxes` in the uiSchema, using `const uiSchema = { \"ui:widget\": \"checkboxes\" };`\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"checkboxes\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Rendering a form with multiple fields\nDESCRIPTION: This code snippet shows how to render a form with multiple fields, specifically a name (string) and age (number).  It defines a JSON schema with an \"object\" type and properties for \"name\" and \"age\".  It uses the `render` function to mount the form into the DOM element with id 'app'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining a root field ID in UiSchema using TypeScript\nDESCRIPTION: This TypeScript snippet shows how to define a root field ID for the UI schema using the `ui:rootFieldId` property. This is useful when using multiple instances of the form component on the same page, as it prefixes all widget IDs with the specified value (`myform` in this case), ensuring uniqueness.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:rootFieldId': 'myform',\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Templates Globally in RJSF\nDESCRIPTION: This example demonstrates how to globally override a template, specifically the `ArrayFieldTemplate`, in react-jsonschema-form using the `templates` prop of the `Form` component. `MyArrayTemplate` is a placeholder for the custom template implementation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Form templates={{ ArrayFieldTemplate: MyArrayTemplate }} />\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/core with yarn\nDESCRIPTION: Installs the @rjsf/core package using yarn. This is a prerequisite for using the validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Custom Field by ID in react-jsonschema-form (Typescript)\nDESCRIPTION: This example shows how to provide a custom field component based on the schema's `$id` value. It imports types from `@rjsf/utils` and `validator` from `@rjsf/validator-ajv8`. The `CustomIdField` component is a simple function component that renders a div with a message and the stringified props. The `fields` object maps the schema's `$id` to the `CustomIdField` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, FieldProps, RegistryFieldsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst CustomIdField = function (props: FieldProps) {\n  return (\n    <div id='custom'>\n      <p>Yeah, I'm pretty dumb.</p>\n      <div>My props are: {JSON.stringify(props)}</div>\n    </div>\n  );\n};\n\nconst fields: RegistryFieldsType = {\n  '/schemas/my-id': CustomIdField,\n};\n\nconst schema: RJSFSchema = {\n  $id: '/schemas/my-id',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} fields={fields} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Overriding Templates via Templates Prop\nDESCRIPTION: This snippet shows how to override the `ArrayFieldTemplate`, `FieldTemplate`, `ObjectFieldTemplate`, and `ErrorList` templates in react-jsonschema-form version 5.  These templates are now consolidated into the `templates` prop.  Custom implementations are passed to the `templates` object, keyed by their respective template names.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldTemplateProps, ErrorListProps, FieldTemplateProps, ObjectFieldTemplateProps, RJSFSchema } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport validator from \"@rjsf/validator-ajv8\";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom templates\nconst CustomArrayFieldTemplate = (props: ArrayFieldTemplateProps) => { ... };\nconst CustomFieldTemplate = (props: FieldTemplateProps) => { ... };\nconst CustomObjectFieldTemplate = (props: ObjectFieldTemplateProps) => { ... };\nconst CustomErrorField = (props: ErrorListProps) => { ... };\n\nconst templates: Partial<TemplatesType> = {\n  ArrayFieldTemplate: CustomArrayFieldTemplate,\n  FieldTemplate: CustomFieldTemplate,\n  ObjectFieldTemplate: CustomObjectFieldTemplate,\n  ErrorFieldTemplate: CustomErrorField,\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Validator with combined options\nDESCRIPTION: This example combines custom formats, additional meta schemas, and AJV options overrides to customize the validator. It loads a draft-04 meta schema, defines a custom format for a phone number, creates a validator with these customizations using `customizeValidator`, defines a schema using the custom format and schema reference, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv6';\n\nconst metaSchemaDraft04 = require('ajv/lib/refs/json-schema-draft-04.json');\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/,\n};\n\nconst validator = customizeValidator({\n  additionalMetaSchemas: [metaSchemaDraft04],\n  customFormats,\n  ajvOptionsOverrides: {\n    $data: true,\n    verbose: true,\n  },\n});\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  type: 'string',\n  format: 'phone-us',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component from @rjsf/fluent-ui\nDESCRIPTION: Imports the Form component directly from the @rjsf/fluent-ui package. This is the simplest way to use the Fluent UI theme with react-jsonschema-form.  The Form component renders a form based on a JSON schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluent-ui/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/fluent-ui';\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Root Field ID - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set a root prefix for all generated widget IDs using the `ui:rootFieldId` uiSchema directive.  This is helpful when using multiple forms on the same page.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:rootFieldId\": \"myform\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a controlled form component\nDESCRIPTION: This snippet demonstrates how to create a controlled component using React JSONSchema Form.  It uses the `useState` hook to manage the form data. The `onChange` event updates the state with the new form data. The `render` function mounts the form into the DOM element with id 'app'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (<Form\n    schema={{type: \"string\"}}\n    formData={formData}\n    onChange={e => setFormData(e.formData)}\n  />);\n};\n\nrender((\n  <App />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Generic F (formContext) in RJSF\nDESCRIPTION: This code illustrates overriding the `F` generic, representing `formContext`, in the `<Form>` component. It defines a custom `FormContext` interface and passes a typed `formContext` prop to the `<Form>` component, allowing for strongly typed context data within the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { Form } from '@rjsf/core';\n\ninterface FormContext {\n  myCustomWidgetData: object;\n}\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'number' },\n  },\n};\n\nconst formContext: FormContext = {\n  myCustomWidgetData: {\n    enableCustomFeature: true,\n  },\n};\n\nconst validator = customizeValidator<any, RJSFSchema, FormContext>();\n\nrender(\n  <Form<any, RJSFSchema, FormContext> schema={schema} validator={validator} formContext={formContext} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an allOf Schema in JSX\nDESCRIPTION: This code defines a JSON schema using the allOf keyword. react-jsonschema-form merges the subschemas to create a combined subschema that must be valid. In this example, the subschemas merge to {type: \"boolean\"}, meaning the form field must be a boolean value.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/oneof.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Field\",\n  allOf: [\n    {\n      type: [\"string\", \"boolean\"]\n    },\n    {\n      type: \"boolean\"\n    },\n  ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Property Dependency in React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet demonstrates how to define a bidirectional property dependency in react-jsonschema-form. If either `credit_card` or `billing_address` is present, the other becomes required. The schema defines types for `name`, `credit_card`, and `billing_address`, marks `name` as required, and then uses the `dependencies` keyword to mutually link the presence of `credit_card` and `billing_address`. The Form component renders the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/dependencies.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" },\n    \"billing_address\": { \"type\": \"string\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": [\"billing_address\"],\n    \"billing_address\": [\"credit_card\"]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Placeholder - JSX\nDESCRIPTION: This JSX snippet demonstrates how to add placeholder text to an input field using the `ui:placeholder` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\", format: \"uri\"};\nconst uiSchema = {\n  \"ui:placeholder\": \"http://\"\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\", enum: [\"First\", \"Second\"]};\nconst uiSchema = {\n  \"ui:placeholder\": \"Choose an option\"\n};\n```\n\n----------------------------------------\n\nTITLE: Translating Strings with translateString - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `translateString` prop to customize the translation of internal strings in the React JSONSchema Form. It imports necessary modules from `@rjsf/utils` and provides an example function `fixupSomeEnglishStrings` that modifies the translation for specific string identifiers. The `replaceStringParameters` function is used to handle strings with replaceable parameters.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TranslatableString, englishStringTranslator, replaceStringParameters } from '@rjsf/utils';\n\nfunction fixupSomeEnglishStrings(stringToTranslate: TranslatableString, params?: string[]): string {\n  switch (stringToTranslate) {\n    case TranslatableString.NewStringDefault:\n      return ''; // Use an empty string for the new additionalProperties string default value\n    case TranslatableString.KeyLabel:\n      return replaceStringParameters('%1 Key Name', params); // Add \"Name\" onto the end of the WrapIfAdditionalTemplate key label\n    default:\n      return englishStringTranslator(stringToTranslate, params); // Fallback to the default english\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing BaseInputTemplate in RJSF (TSX)\nDESCRIPTION: This example showcases how to customize the BaseInputTemplate in react-jsonschema-form. It defines a custom component that wraps a CustomTextInput component.  It receives various props, including schema, id, options, label, value, type, placeholder, and event handlers. It overrides the onChange, onBlur, and onFocus handlers to integrate with the CustomTextInput component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChangeEvent, FocusEvent } from 'react';\nimport { getInputProps, RJSFSchema, BaseInputTemplateProps } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nimport CustomTextInput from '../CustomTextInput';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction BaseInputTemplate(props: BaseInputTemplateProps) {\n  const {\n    schema,\n    id,\n    options,\n    label,\n    value,\n    type,\n    placeholder,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onChangeOverride,\n    onBlur,\n    onFocus,\n    rawErrors,\n    hideError,\n    uiSchema,\n    registry,\n    formContext,\n    ...rest\n  } = props;\n  const onTextChange = ({ target: { value: val } }: ChangeEvent<HTMLInputElement>) => {\n    // Use the options.emptyValue if it is specified and newVal is also an empty string\n    onChange(val === '' ? options.emptyValue || '' : val);\n  };\n  const onTextBlur = ({ target: { value: val } }: FocusEvent<HTMLInputElement>) => onBlur(id, val);\n  const onTextFocus = ({ target: { value: val } }: FocusEvent<HTMLInputElement>) => onFocus(id, val);\n\n  const inputProps = { ...rest, ...getInputProps(schema, type, options) };\n  const hasError = rawErrors.length > 0 && !hideError;\n\n  return (\n    <CustomTextInput\n      id={id}\n      label={label}\n      value={value}\n      placeholder={placeholder}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      error={hasError}\n      errors={hasError ? rawErrors : undefined}\n      onChange={onChangeOverride || onTextChange}\n      onBlur={onTextBlur}\n      onFocus={onTextFocus}\n      {...inputProps}\n    />\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ BaseInputTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using yarn\nDESCRIPTION: Installs required dependencies including @material-ui/core, @material-ui/icons, @rjsf/core, @rjsf/utils, and @rjsf/validator-ajv6 using yarn. These dependencies are prerequisites for using the @rjsf/material-ui package. Ensure yarn is installed before running this command.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/material-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @material-ui/core @material-ui/icons @rjsf/core @rjsf/utils @rjsf/validator-ajv6\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Enum Disabled - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to disable an option in an enum (select) field using the `ui:enumDisabled` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  enum: [\"one\", \"two\", \"three\"],\n};\n\nconst uiSchema={\n  \"ui:enumDisabled\": ['two'],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Form from @rjsf/bootstrap-4 in Javascript\nDESCRIPTION: This code snippet demonstrates how to import the Form component directly from the @rjsf/bootstrap-4 package. This is a simple way to use the Bootstrap 4 themed form component in a React application.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/bootstrap-4/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/bootstrap-4';\n```\n\n----------------------------------------\n\nTITLE: Custom Validator with additional meta schema\nDESCRIPTION: This example demonstrates how to customize the validator by adding an additional meta schema.  It imports the necessary modules, loads a draft-04 meta schema, creates a validator with the additional meta schema using `customizeValidator`, defines a schema referencing the draft-04 schema, and then renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv6';\n\nconst metaSchemaDraft04 = require('ajv/lib/refs/json-schema-draft-04.json');\n\nconst validator = customizeValidator({\n  additionalMetaSchemas: [metaSchemaDraft04],\n});\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Enum in RJSF\nDESCRIPTION: This code snippet demonstrates how to use `ui:placeholder` with an `enum` field in react-jsonschema-form (RJSF). The placeholder will be displayed as the empty option text in the select widget. The `validator` from `@rjsf/validator-ajv8` is used for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', enum: ['First', 'Second'] };\nconst uiSchema: UiSchema = {\n  'ui:placeholder': 'Choose an option',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing UnsupportedFieldTemplate in react-jsonschema-form\nDESCRIPTION: This code snippet illustrates how to customize the UnsupportedFieldTemplate in react-jsonschema-form. It imports necessary components from `@rjsf/utils` and `react-intl`, then defines a custom UnsupportedFieldTemplate function to render a message indicating that a field is unsupported. It renders the schema as a JSON string.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UnsupportedFieldProps } from '@rjsf/utils';\nimport { FormattedMessage } from 'react-intl';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'invalid',\n};\n\nfunction UnsupportedFieldTemplate(props: UnsupportedFieldProps) {\n  const { schema, reason } = props;\n  return (\n    <div>\n      <FormattedMessage defaultMessage='Unsupported field schema, reason = {reason}' value={{ reason }} />\n      <pre>{JSON.stringify(schema, null, 2)}</pre>\n    </div>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ UnsupportedFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Applying ArrayFieldDescriptionTemplate via uiSchema\nDESCRIPTION: This code shows how to apply a custom `ArrayFieldDescriptionTemplate` through the `uiSchema` in react-jsonschema-form. Setting the `ui:ArrayFieldDescriptionTemplate` property to the custom template in the `uiSchema` allows for customization of array field descriptions.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:ArrayFieldDescriptionTemplate': ArrayFieldDescriptionTemplate,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing object fields in uiSchema\nDESCRIPTION: This example customizes the `uiSchema` for individual fields within an object.  It defines class names for the \"name\" and \"age\" fields. The code utilizes the `render` function to mount the form into the DOM element with id 'app'. Note that `uiSchema` configurations are specified for each field's key within the properties of the JSON schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nconst uiSchema = {\n  name: {\n    classNames: \"custom-class-name\"\n  },\n  age: {\n    classNames: \"custom-class-age\"\n  }\n}\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Custom labels for enum fields using enumNames in RJSF\nDESCRIPTION: This demonstrates the deprecated `enumNames` approach to customize labels for enum fields. While still functional, the documentation recommends using the `ui:enumNames` property in the `uiSchema` instead, as this method will be removed in a future major release. It imports the necessary modules, defines the schema with `enum` and `enumNames`, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  enum: [1, 2, 3],\n  enumNames: ['one', 'two', 'three'],\n};\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Submitting React JSON Schema Form Programmatically - Typescript\nDESCRIPTION: This TypeScript code demonstrates how to submit a `react-jsonschema-form` form programmatically using a reference to the Form component.  It utilizes `createRef` from `react` to get a reference to the `Form` component, and calls the `submit()` method on that reference to trigger the form submission. This will in turn trigger the `onSubmit` handler.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/internals.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRef } from 'react';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport { Form } from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n\nconst onSubmit = ({ formData }) => console.log('Data submitted: ', formData);\nlet yourForm;\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst formRef = createRef<Form>();\n\nrender(\n  <Form schema={schema} validator={validator} onSubmit={onSubmit} ref={formRef} />,\n  document.getElementById('app')\n);\n\nformRef.current.submit();\n```\n\n----------------------------------------\n\nTITLE: Customize ID Prefix\nDESCRIPTION: Explains how to customize the prefix used for generated IDs using the `idPrefix` prop, preventing potential conflicts with existing DOM IDs. The example imports Form, RJSFSchema, validator, defines a simple schema, and renders the Form component with the `idPrefix` prop set to `'rjsf_prefix'`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} idPrefix={'rjsf_prefix'} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Setting the initial height of a textarea - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the initial height of a textarea widget by specifying the `rows` option within the `ui:options` uiSchema directive in a react-jsonschema-form. This controls the number of visible text lines.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"textarea\",\n  \"ui:options\": {\n    rows: 15\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Widget - JSX\nDESCRIPTION: This snippet defines a custom widget component `MyCustomWidget` for react-jsonschema-form. The widget takes `props` like `value`, `required`, and `onChange` to manage input. It returns a simple text input field. This example creates a widget that can be registered within a theme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyCustomWidget = (props) => {\n  return (\n    <input type=\"text\"\n      className=\"custom\"\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)} />\n  );\n};\n\nconst myWidgets = {\n  myCustomWidget: MyCustomWidget\n};\n\nconst ThemeObject = {widgets: myWidgets};\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Defining anyOf Schema for React JSON Schema Form (JSX)\nDESCRIPTION: This snippet defines a JSON schema using the `anyOf` keyword, requiring that at least one of the subschemas is valid.  The schema defines an object that either has a 'lorem' property or both 'lorem' and 'ipsum' properties. The `Form` component from `react-jsonschema-form` renders a form based on this schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/oneof.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n    type: \"object\",\n    anyOf: [\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n        },\n        required: [\"lorem\"],\n      },\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n          ipsum: {\n            type: \"string\",\n          },\n        }\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing a multiple-choice list (JSX)\nDESCRIPTION: This snippet demonstrates how to create a multiple-choice list using an array schema with an `enum` list for the `items` property and `uniqueItems` set to `true`. This will render a multiple select box by default, allowing the user to select multiple options from the enum list.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Omitting a field label - JSX\nDESCRIPTION: This JSX snippet demonstrates how to omit a field label by setting the `label` option to `false` within the `ui:options` uiSchema directive in a react-jsonschema-form. This is useful when a label is not necessary or is provided elsewhere in the UI.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:options\": {\n    label: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom ArrayFieldTitleTemplate via uiSchema (TSX)\nDESCRIPTION: This snippet illustrates how to assign the custom `ArrayFieldTitleTemplate` to a specific array field within the `uiSchema`. This allows for targeted customization of the array field title rendering without affecting other parts of the form.  The custom template is associated with the ui:ArrayFieldTitleTemplate property within the uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:ArrayFieldTitleTemplate': ArrayFieldTitleTemplate,\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled attribute for enum fields using ui:enumDisabled in RJSF\nDESCRIPTION: This code demonstrates how to disable specific options in an enum field using the `ui:enumDisabled` property in the `uiSchema`. The `ui:enumDisabled` array specifies the indices of the enum values that should be disabled. It imports the necessary modules, defines the schema with `enum`, defines the `uiSchema` with `ui:enumDisabled`, and renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/single.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'boolean',\n  enum: [true, false],\n};\n\nconst uiSchema: UiSchema = {\n  'ui:enumDisabled': [true],\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using the Precompiled Validator\nDESCRIPTION: This code snippet demonstrates how to integrate a precompiled validator with a React Json Schema Form. It imports the `createPrecompiledValidator` function and `ValidatorFunctions` type from `@rjsf/validator-ajv8`, the Form component from `@rjsf/core`, and the precompiled validator functions from a generated file. It then creates a `ValidatorType` implementation and passes it to the `Form` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPrecompiledValidator, ValidatorFunctions } from '@rjsf/validator-ajv8';\nimport Form from '@rjsf/core'; // Or whatever theme you use\n\nimport yourSchema from 'path_to/yourSchema'; // This needs to be the same file that was precompiled\nimport * as precompiledValidator from 'path_to/yourCompiledSchema';\n\nconst validator = createPrecompiledValidator(precompiledValidator as ValidatorFunctions);\n\nrender(<Form schema={yourSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Custom SchemaField Implementation in JSX\nDESCRIPTION: This snippet demonstrates how to create a custom SchemaField component in react-jsonschema-form. It defines a `CustomSchemaField` React component that renders a simple div with a message and the stringified props. The `fields` object is then used to pass this custom component to the `Form` component, overriding the default SchemaField implementation. The schema is defined to be a string type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomSchemaField = function(props) {\n  return (\n    <div id=\"custom\">\n      <p>Yeah, I'm pretty dumb.</p>\n      <div>My props are: {JSON.stringify(props)}</div>\n    </div>\n  );\n};\n\nconst fields = {\n  SchemaField: CustomSchemaField\n};\n\nconst schema = {\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema}\n        fields={fields} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Rendering Form with Custom Buttons in React\nDESCRIPTION: This example demonstrates how to render a react-jsonschema-form with custom submit and cancel buttons using the `children` prop.  It imports the Form component, RJSFSchema type, and a validator, defines a simple schema, and then renders the form with custom buttons within a div. The validator needs to be configured and passed as a prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(\n  <Form schema={schema} validator={validator}>\n    <div>\n      <button type='submit'>Submit</button>\n      <button type='button'>Cancel</button>\n    </div>\n  </Form>,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: ComputeSkipPopulate Function Example in React\nDESCRIPTION: This example shows how to use the `computeSkipPopulate` function within the `experimental_defaultFormStateBehavior` prop to conditionally skip populating an array with default values. It imports necessary modules, defines a schema with number and string arrays, and implements a `computeSkipPopulate` function that skips populating number arrays. The validator needs to be configured and passed as a prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    stringArray: {\n      type: 'array',\n      items: { type: 'string' },\n      minItems: 1,\n    },\n    numberArray: {\n      type: 'array',\n      items: { type: 'number' },\n      minItems: 1,\n    },\n  },\n  required: ['stringArray', 'numberArray'],\n};\n\nconst computeSkipPopulateNumberArrays = (validator, schema, rootSchema) =>\n  // These conditions are needed to narrow down the type of the schema.items\n  !Array.isArray(schema?.items) &&\n  typeof schema?.items !== 'boolean' &&\n  schema?.items?.type === 'number',\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    experimental_defaultFormStateBehavior={{\n      arrayMinItems: {\n        computeSkipPopulate: computeSkipPopulateNumberArrays,\n      },\n    }}\n  />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites with yarn\nDESCRIPTION: This command installs the required prerequisites for using @rjsf/fluentui-rc, including @fluentui/react-components, @rjsf/core, @rjsf/utils and @rjsf/validator-ajv6. The minimum version for @fluentui/react-components is >= 9.35.0 and for @rjsf/core is >= 2.0.0.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluentui-rc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/react-components @rjsf/core @rjsf/utils @rjsf/validator-ajv6\n```\n\n----------------------------------------\n\nTITLE: Defining schema and ObjectFieldTemplate in react-jsonschema-form (JSX)\nDESCRIPTION: This snippet defines a JSON schema for an object with 'name' and 'age' properties, and a custom ObjectFieldTemplate component that renders the object's title, description, and properties. It then renders a Form component using the defined schema and template.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  title: \"Object title\",\n  description: \"Object description\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nfunction ObjectFieldTemplate(props) {\n  return (\n    <div>\n      {props.title}\n      {props.description}\n      {props.properties.map(element => <div className=\"property-wrapper\">{element.content}</div>)}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ObjectFieldTemplate={ObjectFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling the add button for array items (JSX)\nDESCRIPTION: This snippet demonstrates how to disable the add button for new array items using the `addable` option in the uiSchema. Setting `addable` to `false` in `ui:options` will remove the add button, preventing the user from adding new items to the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    addable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Schema with arrays inside anyOf/oneOf\nDESCRIPTION: Shows a JSON schema example with an array nested within `anyOf`, used to demonstrate the ID generation issue in v4 and the fix in v5.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"anyOf\": [\n          {\n            \"properties\": {\n              \"foo\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"properties\": {\n              \"bar\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DescriptionFieldTemplate in RJSF (TSX)\nDESCRIPTION: This example demonstrates how to customize the DescriptionFieldTemplate in react-jsonschema-form. It defines a custom component that renders the description of a field within a <details> and <summary> element. The component receives the description and id as props.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DescriptionFieldProps, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  title: 'My input',\n  description: 'input description',\n};\n\nfunction DescriptionFieldTemplate(props: DescriptionFieldProps) {\n  const { description, id } = props;\n  return (\n    <details id={id}>\n      <summary>Description</summary>\n      {description}\n    </details>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ DescriptionFieldTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: String Field with Alt-Datetime Widget and Options - React JSONSchema Form (JSX)\nDESCRIPTION: This snippet shows how to use the `alt-datetime` widget for a string field and customize it using the `ui:options` property in the `uiSchema`. The `schema` defines a string type. The `uiSchema` specifies the `alt-datetime` widget and sets options such as `yearsRange`, `hideNowButton`, and `hideClearButton` to customize the year dropdown and remove buttons.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"alt-datetime\",\n  \"ui:options\": {\n    yearsRange: [1980, 2030],\n    hideNowButton: true,\n    hideClearButton: true,\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customize ID Separator\nDESCRIPTION: Illustrates how to customize the separator used in generated IDs using the `idSeparator` prop, particularly useful when field names contain the default separator. The example imports Form, RJSFSchema, validator, defines a simple schema with nested properties, and renders the Form component with the `idSeparator` prop set to `'/'`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    first: {\n      type: 'string',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} idSeparator={'/'} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Templates - JSX\nDESCRIPTION: This snippet demonstrates how to create custom templates for react-jsonschema-form, specifically an `ArrayFieldTemplate` and an `ErrorListTemplate`. These templates override the default rendering of array fields and error lists, respectively. These can be defined in a theme and passed to a `withTheme` wrapped form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type=\"button\" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nfunction MyErrorListTemplate(props) {\n  const {errors} = props;\n  return (\n    <ul>\n      {errors.map(error => (\n          <li key={error.stack}>\n            {error.stack}\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nconst ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    ErrorList: MyErrorListTemplate,\n    widgets: myWidgets\n};\n\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server using Vite\nDESCRIPTION: Starts the live development server using Vite for the `playground` package.  It assumes the project has been cloned and dependencies installed. The server showcases components at localhost:8080.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\ncd packages/playground\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Handle Errors\nDESCRIPTION: Illustrates how to use the `onError` prop to handle validation errors.  The `onError` function receives an array of error objects and logs the number of errors to the console. The schema defines a simple string type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\nconst onError = (errors) => console.log(\"I have\", errors.length, \"errors to fix\");\n\nrender((<Form schema={schema}\n        onError={onError} />), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining allOf Schema for React JSON Schema Form (JSX)\nDESCRIPTION: This snippet defines a JSON schema using the `allOf` keyword. `react-jsonschema-form` uses `json-schema-merge-allof` to merge the subschemas. In this example, the schema specifies that the type must be both a string/boolean and a boolean, effectively resulting in a combined subschema of `{type: \"boolean\"}`. The `Form` component renders a form based on this combined schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/oneof.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Field\",\n  allOf: [\n    {\n      type: [\"string\", \"boolean\"]\n    },\n    {\n      type: \"boolean\"\n    },\n  ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: UiSchema with OneOf in RJSF\nDESCRIPTION: This code snippet demonstrates how to use uiSchema with elements inside an `oneOf` array in react-jsonschema-form (RJSF). It overrides the titles of the first two elements within the `oneOf` list. The `oneOf` key must be defined at the same level in both `schema` and `uiSchema`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  oneOf: [\n    {\n      title: 'Strings',\n      type: 'string',\n    },\n    {\n      title: 'Numbers',\n      type: 'number',\n    },\n    {\n      title: 'Booleans',\n      type: 'boolean',\n    },\n  ],\n};\n\nconst uiSchema: UiSchema = {\n  oneOf: [\n    {\n      'ui:title': 'Custom String Title',\n    },\n    {\n      'ui:title': 'Custom Number Title',\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form with Email Validation in TSX\nDESCRIPTION: This code snippet shows how to render a React JSON Schema Form with a schema that includes email validation using the default `@rjsf/validator-ajv8`. It imports necessary components and types from `@rjsf/core` and `@rjsf/utils`. The schema defines a string type with the 'email' format, and the validator is passed to the `Form` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'email',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Array Field Buttons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to customize the appearance of the add, move up, move down, and remove buttons in the ArrayField component by hiding the default glyphicons and replacing them with custom text labels.  This allows developers to use their own icons or text for these buttons when Bootstrap glyphicons are not desired.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/internals.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ni.glyphicon { display: none; }\n.btn-add::after { content: 'Add'; }\n.array-item-move-up::after { content: 'Move Up'; }\n.array-item-move-down::after { content: 'Move Down'; }\n.array-item-remove::after { content: 'Remove'; }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widget - React JSX\nDESCRIPTION: This snippet demonstrates how to register a custom widget using the widgets prop of the Form component. It defines a MyCustomWidget component and registers it in the widgets object. The uiSchema then references the widget by its registered name using the ui:widget property. This allows the uiSchema to be a pure JSON object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyCustomWidget = (props) => {\n  return (\n    <input type=\"text\"\n      className=\"custom\"\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)} />\n  );\n};\n\nconst widgets = {\n  myCustomWidget: MyCustomWidget\n};\n\nconst schema = {\n  type: \"string\"\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"myCustomWidget\"\n}\n\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    widgets={widgets} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Styling Array Items with Semantic-UI in JSX\nDESCRIPTION: This JSX snippet demonstrates how to style array items within a React JSON Schema Form using Semantic-UI options in the uiSchema. It utilizes the `wrapItem` and `horizontalButtons` properties within the `semantic` object to wrap each array item in a Segment and display the buttons horizontally instead of vertically. This configuration is applied to an array of strings.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/themes/semantic-ui/uiSchema.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n   \"ui:options\": {\n      \"semantic\": {\n        \"wrapItem\": true,\n        \"horizontalButtons\": true\n      }\n    }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using the precompiled validator in a React component in TSX\nDESCRIPTION: This snippet shows how to integrate a precompiled validator into a React component using `React.useState` and `React.useEffect`. It fetches the validator using `evaluateValidator` (assumed to be defined elsewhere) and stores it in the component's state. Once the validator is loaded, it is used to create a precompiled validator for form validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet [precompiledValidator, setPrecompiledValidator] = React.useState<ValidatorFunctions>();\nReact.useEffect(() => {\n  evaluateValidator(\n    schemaId, // some schema id to avoid evaluating it multiple times\n    code, // result of compileSchemaValidatorsCode returned from the server\n    nonce // nonce script tag attribute to allow this ib content security policy for the page\n  ).then(setPrecompiledValidator);\n}, [entityType.id]);\n\nif (!precompiledValidator) {\n  // render loading screen\n}\nconst validator = createPrecompiledValidator(precompiledValidator, schema);\n```\n\n----------------------------------------\n\nTITLE: Importing Theme and withTheme from @rjsf/core and @rjsf/material-ui\nDESCRIPTION: Imports the Theme from @rjsf/material-ui and withTheme from @rjsf/core to create a customized Form component. This allows modifications to the default Material UI theme by adding custom fields and widgets before wrapping it with withTheme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/material-ui/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/material-ui';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(Theme);\n```\n\n----------------------------------------\n\nTITLE: Customizing WrapIfAdditionalTemplate in react-jsonschema-form\nDESCRIPTION: This example demonstrates customizing the WrapIfAdditionalTemplate in react-jsonschema-form. It imports components from `@rjsf/utils`, defines a custom WrapIfAdditionalTemplate function to render additional properties with a key input and a remove button.  It utilizes the RemoveButton from the registry.  The example shows conditional rendering based on `additionalProperties` being present in the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, WrapIfAdditionalTemplateProps } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  additionalProperties: true,\n};\n\nfunction WrapIfAdditionalTemplate(props: WrapIfAdditionalTemplateProps) {\n  const { id, label, onKeyChange, onDropPropertyClick, schema, children, uiSchema, registry, classNames, style } = props;\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div>{children}</div>;\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <label label={keyLabel} id={`${id}-key`}>\n        Custom Field Key\n      </label>\n      <input\n        className='form-control'\n        type='text'\n        id={`${id}-key`}\n        onBlur={function (event) {\n          onKeyChange(event.target.value);\n        }}\n        defaultValue={label}\n      />\n      <div>{children}</div>\n      <RemoveButton onClick={onDropPropertyClick(label)} uiSchema={uiSchema} />\n    </div>\n  );\n}\n\nrender(\n  <Form schema={schema} validator={validator} templates={{ WrapIfAdditionalTemplate }} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding AJV Options in React JSON Schema Form (TSX)\nDESCRIPTION: This code demonstrates how to override the options passed to the AJV instance used by `@rjsf/validator-ajv8`.  The `ajvOptionsOverrides` object can contain any valid AJV options, such as `verbose`. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'phone-us',\n};\n\nconst ajvOptionsOverrides = {\n  verbose: true,\n};\n\nconst validator = customizeValidator({ ajvOptionsOverrides });\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Property Dependency in react-jsonschema-form (TSX)\nDESCRIPTION: This code snippet demonstrates how to define a bidirectional property dependency in react-jsonschema-form. If either `credit_card` or `billing_address` is defined, the other becomes required. The code imports necessary modules, defines a schema, and renders the form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/dependencies.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n\n  properties: {\n    name: { type: 'string' },\n    credit_card: { type: 'number' },\n    billing_address: { type: 'string' },\n  },\n\n  required: ['name'],\n\n  dependencies: {\n    credit_card: ['billing_address'],\n    billing_address: ['credit_card'],\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Validating Form Programmatically in TSX\nDESCRIPTION: This snippet shows how to programmatically validate a `Form` component using the `validateForm()` method. A `ref` is attached to the `Form` component, and the `validateForm()` method is called to trigger validation. The `onError` callback handles any validation errors that occur.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRef } from 'react';\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst formRef = createRef();\nconst onError = (errors) => alert(errors);\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} onError={onError} ref={formRef} />, document.getElementById('app'));\n\nif (formRef.current.validateForm()) {\n  alert('Form is valid');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-jsonschema-form dependencies\nDESCRIPTION: This command installs the core react-jsonschema-form package, utilities, and a validator implementation (e.g., @rjsf/validator-ajv8) using npm.  The `--save` flag adds the packages to the project's package.json file as a dependency. This command must be executed in a terminal within your project directory.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/00-introduction.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @rjsf/core @rjsf/utils @rjsf/validator-ajv8 --save\n```\n\n----------------------------------------\n\nTITLE: ErrorSchema Getter Usage TypeScript\nDESCRIPTION: Demonstrates how to retrieve the updated ErrorSchema from an ErrorSchemaBuilder instance after modifications. The code snippet shows the instantiation of the ErrorSchemaBuilder and the subsequent retrieval of the updated ErrorSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/utility-functions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ErrorSchemaBuilder, ErrorSchema } from \"@rjsf/utils\";\n\nconst builder = new ErrorSchemaBuilder();\n\n// Do some work using the builder\n...\n\nconst errorSchema: ErrorSchema = builder.ErrorSchema;\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/snapshot-tests using npm\nDESCRIPTION: This command installs the @rjsf/snapshot-tests package using npm. This package provides snapshot tests for themes used with react-jsonschema-form. It should be executed in a terminal.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/snapshot-tests/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rjsf/snapshot-tests\n```\n\n----------------------------------------\n\nTITLE: Custom Labels for Enum Fields in React JSON Schema Form\nDESCRIPTION: This code shows how to define custom labels for enumerated number values using the `enumNames` property. Note that `enumNames` is not JSON Schema compliant. The `enumNames` array provides labels corresponding to each value in the `enum` array. It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"number\",\n  enum: [1, 2, 3],\n  enumNames: [\"one\", \"two\", \"three\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing Ajv with Keywords in Typescript\nDESCRIPTION: This code snippet demonstrates how to customize the Ajv validator by adding keywords using the `ajv-keywords` library. It imports the `customizeValidator` function from `@rjsf/validator-ajv6` and the `ajvKeywords` library. It then creates a validator instance and adds a custom keyword to it.  The updated validator can then be used with a Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customizeValidator } from '@rjsf/validator-ajv6';\nimport ajvKeywords from 'ajv-keywords';\n\nconst validator = customizeValidator();\najvKeywords(validator.ajv, ['your-keyword']);\n\n// use your update validator with a `Form`\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic-UI Styling Options in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define Semantic-UI styling options within the uiSchema of a React JSON Schema Form. It showcases the use of `fluid` and `inverted` properties for general styling, as well as the `errorOptions` property for customizing error message appearance. This configuration allows for adapting the form's appearance to match the desired aesthetic.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/themes/semantic-ui/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"semantic\" : {\n      \"fluid\": true,\n      \"inverted\": false,\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\",\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hidden Widget for Boolean Field - React JSONSchema Form (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `hidden` widget for a boolean field.  The `schema` defines a boolean property named `foo`, and the `uiSchema` sets `ui:widget` to `hidden` for that property. This hides the field from the user interface, and its value is sourced from the `formData` prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {type: \"boolean\"}\n  }\n};\n\nconst uiSchema = {\n  foo: {\"ui:widget\": \"hidden\"}\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Overriding Submit Button Widget via Templates\nDESCRIPTION: This snippet demonstrates how to override the `SubmitButton` widget in react-jsonschema-form version 5. The `SubmitButton` widget is now part of the `ButtonTemplates` dictionary within the `templates` prop.  Custom implementations are passed to the `templates.ButtonTemplates` object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, SubmitButtonProps } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport validator from \"@rjsf/validator-ajv8\";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom button\nconst CustomSubmitButton = (props: SubmitButtonProps) => { ...\n};\n\nconst templates: Partial<TemplatesType> = {\n  ButtonTemplates: {\n    SubmitButton: CustomSubmitButton,\n  }\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates}/>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Styling with Chakra UI `ui:options` in JSON Schema\nDESCRIPTION: This JSON snippet demonstrates how to use the `ui:options` and the `chakra` option within a JSON schema to customize the styling of a form widget using Chakra UI. It applies style props such as padding (`p`), color, and a custom `sx` object for margin customization, leveraging Chakra's theme-accessible style props.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/themes/chakra-ui/uiSchema.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ui:options\": {\n    \"chakra\": {\n      \"p\": \"1rem\",\n      \"color\": \"blue.200\",\n      \"sx\": {\n        \"margin\": \"0 auto\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @rjsf/utils in React component\nDESCRIPTION: This code imports all exports from the `@rjsf/utils` package into a single object named `Utils`. This allows access to the utility functions for `react-jsonschema-form` within a React component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/utils/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Utils from '@rjsf/utils';\n```\n\n----------------------------------------\n\nTITLE: Compiling schema validators with @rjsf/validator-ajv8\nDESCRIPTION: This code snippet demonstrates how to compile a JSON schema into a set of validator functions using the `compileSchemaValidators()` function from the `@rjsf/validator-ajv8` package. It takes the schema and output file path as arguments, precompiling the schema into a commonJS Javascript file. It assumes the existence of a schema file.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_0\n\nLANGUAGE: cjs\nCODE:\n```\nconst compileSchemaValidators = require('@rjsf/validator-ajv8/dist/compileSchemaValidators').default;\nconst yourSchema = require('path_to/yourSchema'); // If your schema is a js file\n\ncompileSchemaValidators(yourSchema, 'path_to/yourCompiledSchema.js');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Widget - React JSX\nDESCRIPTION: This snippet demonstrates how to add a custom widget to a uiSchema for a string data type. It defines an inline function component as the widget and specifies it in the ui:widget property of the uiSchema. The custom widget is a text input field with a custom class name.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nconst uiSchema = {\n  \"ui:widget\": (props) => {\n    return (\n      <input type=\"text\"\n        className=\"custom\"\n        value={props.value}\n        required={props.required}\n        onChange={(event) => props.onChange(event.target.value)} />\n    );\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot Test\nDESCRIPTION: Shows an example of a theme-specific snapshot test for react-jsonschema-form.  It imports `Form` from the theme implementation and uses `react-test-renderer` to create a snapshot.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport { arrayTests } from '@rjsf/snapshot-tests';\n\nimport Form from '../src';\n\nformTests(Form);\n\ndescribe('Theme specific tests', () => {\n  it('test a theme-specific option', () => {\n    const schema: RJSFSchema = {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n      },\n    };\n    const uiSchema: UiSchema = {\n      // Enable the theme specific feature\n    };\n    const tree = renderer.create(<Form schema={schema} uiSchema={uiSchema} validator={validator} />).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Raising Custom Validation Errors from a Custom Widget - TSX\nDESCRIPTION: This example demonstrates how to raise custom \"live validation\" errors from within a custom widget in React JSON Schema Form (RJSF). The `CustomTextWidget` checks if the input value is equal to 'test'. If it's not, it raises an error by calling `props.onChange` with the new value, an `ErrorSchema` object containing the error message, and the widget's ID. This provides immediate feedback to the user while they are typing. Note that this only occurs during the onChange event and doesn't provide validation on form submission. Schema defines a text type with default value of hello. uiSchema defines the text widget.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ErrorSchema, RJSFSchema, UiSchema, WidgetProps, RegistryWidgetsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'text',\n  default: 'hello',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'text',\n};\n\nconst CustomTextWidget = function (props: WidgetProps) {\n  const { id, value } = props;\n  const raiseErrorOnChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n    let raiseError: ErrorSchema | undefined;\n    if (value !== 'test') {\n      raiseError = {\n        __errors: ['Value must be \"test\"'],\n      };\n    }\n    props.onChange(value, raiseError, id);\n  };\n\n  return <input id={id} onChange={raiseErrorOnChange} value={value || ''} />;\n};\n\nconst widgets: RegistryWidgetsType = {\n  TextWidget: CustomTextWidget,\n};\n\nrender(\n  <Form schema={schema} uiSchema={uiSchema} validator={validator} widgets={widgets} />,\n  document.getElementById('app')\n);\n\n```\n\n----------------------------------------\n\nTITLE: Multiple-choice checkboxes array in RJSF\nDESCRIPTION: This code snippet renders a multiple-choice list as checkboxes. It defines a schema with an `enum` list for the `items` property and `uniqueItems` set to `true`, and sets the uiSchema `ui:widget` directive to `checkboxes`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'checkboxes',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayFieldTemplate in React JSX\nDESCRIPTION: This snippet defines a custom ArrayFieldTemplate to customize how arrays are rendered within the form. It iterates through the items and renders each element's children. It also includes a button to add new elements to the array. It uses React JSX syntax.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nfunction ArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type=\"button\" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ArrayFieldTemplate={ArrayFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with JSON Schema - JSX\nDESCRIPTION: This snippet demonstrates how to define an object schema with properties such as name (string) and age (number) using JSON schema in a React JSONSchema Form. It renders the form based on the defined schema. The `render` function mounts the `<Form>` component to the DOM element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"title\": \"My title\",\n  \"description\": \"My description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"type\": \"number\"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining errorOptions in uiSchema with TypeScript\nDESCRIPTION: This snippet shows how to define `errorOptions` within the `uiSchema` using TypeScript for a React JSONSchema Form. It configures the size and pointing direction of error message dialogs, customizing their appearance within the Semantic UI theme. The `UiSchema` type from `@rjsf/utils` is used for type safety.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/semantic-ui/uiSchema.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    semantic: {\n      errorOptions: {\n        size: 'small',\n        pointing: 'above',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Props in Theme - TSX\nDESCRIPTION: This code demonstrates how to override other form properties (like `showErrorList`) along with templates, fields, and widgets within a react-jsonschema-form theme. It imports `ThemeProps` from `@rjsf/core`.  The `ThemeObject` assigns custom templates and fields, sets `showErrorList` to `false`, and uses existing custom widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-themes.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProps } from '@rjsf/core';\n\nconst ThemeObject: ThemeProps = {\n  templates: {\n    ArrayFieldTemplate: MyArrayFieldTemplate,\n  },\n  fields: myFields,\n  showErrorList: false,\n  widgets: myWidgets,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Form with `withTheme` in rjsf - TSX\nDESCRIPTION: This code demonstrates how to create a themed form component using the `withTheme` higher-order component from `@rjsf/core`. It imports necessary modules from react and `@rjsf/*` and defines a simple theme with a custom widget. The themed form is then created and used in a demo component. The validator prop is set to `validator` from `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-themes.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport validator from '@rjsf/validator-ajv8';\nimport { withTheme, ThemeProps } from '@rjsf/core';\n\nconst theme: ThemeProps = { widgets: { test: () => <div>test</div> } };\n\nconst ThemedForm = withTheme(theme);\n\nconst Demo = () => <ThemedForm schema={schema} uiSchema={uiSchema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering checkboxes inline in React JSONSchema Form\nDESCRIPTION: This snippet renders checkboxes inline instead of stacked by setting the `inline` property to `true` within the `ui:options` of the uiSchema using `\"ui:options\": { inline: true }`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  minItems: 2,\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"checkboxes\",\n  \"ui:options\": {\n    inline: true\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Comparing objects and returning changed fields\nDESCRIPTION: This code snippet compares two objects and returns an array of field names that have changed between the two objects. It uses `_.isEqual` to compare the values of each field. The function iterates through the fields of the first object and checks if the values are different in the second object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/utility-functions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = { name: 'John', age: 30 };\nconst b = { name: 'John', age: 31 };\nconst changedFields = getChangedFields(a, b);\nconsole.log(changedFields); // Output: ['age']\n```\n\n----------------------------------------\n\nTITLE: Custom Validator with config override options\nDESCRIPTION: This example showcases how to customize the validator by overriding the default AJV options. It imports necessary modules, creates a validator with custom AJV options using `customizeValidator`, defines a simple schema, and renders a form using the customized validator and schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv6';\n\nconst validator = customizeValidator({\n  ajvOptionsOverrides: {\n    $data: true,\n    verbose: true,\n  },\n});\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Multiple Files with Data URL Format - TS\nDESCRIPTION: This code demonstrates how to handle multiple file uploads by defining an array of strings with the `data-url` format. The schema specifies an array type, where each item in the array is a string with the `data-url` format. This allows the user to select multiple files, and their content will be stored as data URLs in an array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n    format: 'data-url',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom FieldTemplate - React JSONSchema Form (JSX)\nDESCRIPTION: This code defines a custom FieldTemplate component for react-jsonschema-form. It takes props such as id, classNames, label, help, required, description, errors, and children, and renders them in a custom layout. It depends on the Form component and schema definition.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nfunction CustomFieldTemplate(props) {\n  const {id, classNames, label, help, required, description, errors, children} = props;\n  return (\n    <div className={classNames}>\n      <label htmlFor={id}>{label}{required ? \"*\" : null}</label>\n      {description}\n      {children}\n      {errors}\n      {help}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        FieldTemplate={CustomFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining an array of objects in React JSONSchema Form\nDESCRIPTION: This snippet shows how to define an array of objects, where each object has a `name` property of type string. The schema uses `type: \"array\"` and `items: { type: \"object\", properties: { name: { type: \"string\" } } }`. It renders the form using the created schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"object\",\n    properties: {\n        name: {\n            type: \"string\"\n        }\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling copying array items in RJSF\nDESCRIPTION: This code snippet shows how to enable the copy button for array items using the `copyable` option in the uiSchema. Setting `copyable` to `true` within `'ui:options'` allows users to duplicate existing items in the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    copyable: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic UI Options using JSON\nDESCRIPTION: This snippet demonstrates how to define Semantic UI options for a field using the uiSchema in JSON format. It sets 'fluid' to true, 'inverted' to false, and configures 'errorOptions' with a specific size and pointing direction. These options are applied to the associated field in the React JSONSchema Form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/semantic-ui/uiSchema.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ui:options\": {\n    \"semantic\": {\n      \"fluid\": true,\n      \"inverted\": false,\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validator with custom formats\nDESCRIPTION: This example shows how to customize the validator with custom formats for use within the React JSON Schema Form. It imports the necessary modules, defines a custom format for a phone number, creates a validator with the custom format using `customizeValidator`, defines a schema using the custom format, and then renders the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv6';\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/,\n};\n\nconst validator = customizeValidator({\n  customFormats,\n});\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'phone-us',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Schema Validation (JSX)\nDESCRIPTION: This example shows how to add a meta schema for validation in a React JSONSchema form. It requires the draft-04 meta schema, imports it, and then passes it to the form through the `additionalMetaSchemas` prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst metaSchemaDraft04 = require(\"ajv/lib/refs/json-schema-draft-04.json\");\n\nconst schema = {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  type: \"string\"\n};\n\nreturn (<Form schema={schema} \n  additionalMetaSchemas={[metaSchemaDraft04]} />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic-UI uiSchema options (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure semantic UI options within the uiSchema for react-jsonschema-form. It sets the 'fluid' property to true to make the component take the size of its container and 'inverted' to false, formatting it for light backgrounds. It also sets error options for size and pointing direction.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"semantic\" : {\n      \"fluid\": true,\n      \"inverted\": false,\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\",\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Properties - React JSONSchema Form (TSX)\nDESCRIPTION: This example demonstrates how to specify required properties using the `required` keyword in the JSON schema. The `name` property is marked as required, which will enforce its presence in the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My title',\n  description: 'My description',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n  required: ['name'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Validator with AJV Options Overrides\nDESCRIPTION: Demonstrates how to customize the AJV8 validator by overriding AJV options. It sets the `$data` and `verbose` options to true.  The custom validator is then used in a form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst validator = customizeValidator({\n  ajvOptionsOverrides: {\n    $data: true,\n    verbose: true,\n  },\n});\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Options - React JSX\nDESCRIPTION: This snippet demonstrates how to pass options to a custom widget using the ui:options property in the uiSchema. It defines a MyCustomWidget component that receives color and backgroundColor options through the props.options object. Default options are defined in the component's defaultProps.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nfunction MyCustomWidget(props) {\n  const {options} = props;\n  const {color, backgroundColor} = options;\n  return <input style={{color, backgroundColor}} />;\n}\n\nMyCustomWidget.defaultProps = {\n  options: {\n    color: \"red\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:widget\": MyCustomWidget,\n  \"ui:options\": {\n    backgroundColor: \"yellow\"\n  }\n};\n\n// renders red on yellow input\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom ArrayFieldTemplate - React JSONSchema Form (JSX)\nDESCRIPTION: This code defines a custom ArrayFieldTemplate component for react-jsonschema-form. It iterates through the items in the array and renders their children. It also includes a button to add new items to the array. It depends on the Form component and the schema definition.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nfunction ArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type=\"button\" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ArrayFieldTemplate={ArrayFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Transforming Error Messages in React JSONSchema Form (JSX)\nDESCRIPTION: This example demonstrates how to transform error messages using the `transformErrors` prop. The `transformErrors` function receives a list of errors and returns a new list with modified error messages.  Here, it replaces the default pattern error message.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction transformErrors(errors) {\n  return errors.map(error => {\n    if (error.name === \"pattern\") {\n      error.message = \"Only digits are allowed\"\n    }\n    return error;\n  });\n}\n\nconst schema = {\n  type: \"object\",\n  properties: {\n    onlyNumbersString: {type: \"string\", pattern: \"^\\\\d*$\"},\n  }\n};\n\nrender((\n  <Form schema={schema}\n        transformErrors={transformErrors} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling Additional Properties - React JSONSchema Form (TS)\nDESCRIPTION: This code snippet demonstrates how to disable the `additionalProperties` feature using the `expandable` option in the `ui:options` of the `uiSchema`. Setting `expandable` to `false` will remove the \"Add\" button for adding new properties.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/objects.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    expandable: false,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting errorOptions in Semantic-UI uiSchema (JSX)\nDESCRIPTION: This JSX snippet shows how to configure the errorOptions within the uiSchema's semantic object. It sets the 'size' of the error message to 'small' and the 'pointing' direction to 'above'. This configuration affects how error messages are displayed for a field in react-jsonschema-form with Semantic-UI.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:options\": {\n    \"semantic\" : {\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\",\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Different Ajv Class in TSX\nDESCRIPTION: This snippet shows how to use a different JSON Schema version (e.g., draft-2019-09) by providing a different Ajv class to the `customizeValidator` function.  This allows you to specify which Ajv version to use.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport Ajv2019 from 'ajv/dist/2019';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'date',\n};\n\nconst validator = customizeValidator({ AjvClass: Ajv2019 });\n// or\n// const validator = customizeValidator({ AjvClass: Ajv2020 });\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Migrating from registry.definitions to rootSchema\nDESCRIPTION: This snippet shows how to update custom fields or widgets that previously accessed `registry.definitions` in react-jsonschema-form version 4. In version 5, `registry.definitions` is replaced by `registry.rootSchema.definitions`. This ensures compatibility with the new schema management approach.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, FieldProps } from '@rjsf/utils';\n\nfunction YourField(props: FieldProps) {\n  const { registry } = props;\n// Change `registry.definitions` to `registry.rootSchema.definitions`\n// const { definitions } = registry; <- version 4\n  const { rootSchema } = registry;\n  const { definitions } = rootSchema;\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Buttons\nDESCRIPTION: Demonstrates how to add custom buttons to a react-jsonschema-form.  It overrides the default submit button with custom \"Submit\" and \"Cancel\" buttons within the form. The schema defines a simple string type.  A submit button (or an input with type=\"submit\") is necessary to trigger form submission.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema}>\n    <div>\n      <button type=\"submit\">Submit</button>\n      <button type=\"button\">Cancel</button>\n    </div>\n  </Form>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Hidden Widget in React JSONSchema Form\nDESCRIPTION: This code snippet demonstrates how to use the `hidden` widget in react-jsonschema-form. It defines a schema with a boolean property named `foo`, and a uiSchema that specifies the `hidden` widget for the `foo` field.  The Form component is rendered with the defined schema and uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    foo: {type: \"boolean\"}\n  }\n};\n\nconst uiSchema = {\n  foo: {\"ui:widget\": \"hidden\"}\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing Validator with Additional Meta Schema\nDESCRIPTION: Shows how to customize the AJV8 validator with additional meta schemas. It imports a Draft-06 meta schema and passes it to the `customizeValidator` function. The custom validator is then used in a form with a schema that references the Draft-06 meta schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst metaSchemaDraft06 = require('ajv/lib/refs/json-schema-draft-06.json');\n\nconst validator = customizeValidator({\n  additionalMetaSchemas: [metaSchemaDraft06],\n});\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-06/schema#',\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Custom ArraySchemaField in react-jsonschema-form (Typescript)\nDESCRIPTION: This snippet demonstrates how to provide a custom implementation of `ArraySchemaField`. This is only used to render the Array item `children` that are then passed to the `ArrayFieldItemTemplate`. It utilizes `RJSFSchema`, `UiSchema`, `FieldProps`, and `RegistryFieldsType` from `@rjsf/utils` along with `validator` from `@rjsf/validator-ajv8`. The `CustomArraySchemaField` function receives props, extracts the `index` and `registry`, and renders a standard `SchemaField` with a modified `name` prop.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema, FieldProps, RegistryFieldsType } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst CustomArraySchemaField = function (props: FieldProps) {\n  const { index, registry } = props;\n  const { SchemaField } = registry.fields;\n  const name = `Index ${index}`;\n  return <SchemaField {...props} name={name} />;\n};\n\nconst fields: RegistryFieldsType = {\n  ArraySchemaField: CustomArraySchemaField,\n};\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} fields={fields} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Customizing form look and feel with uiSchema\nDESCRIPTION: This snippet demonstrates using `uiSchema` to customize the form's appearance by adding a custom CSS class. It defines a basic schema and a `uiSchema` object with `classNames` property. The `render` function mounts the form with both schema and uiSchema to the DOM.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"string\"\n};\n\nconst uiSchema = {\n  classNames: \"custom-css-class\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling the remove button for array items (JSX)\nDESCRIPTION: This snippet demonstrates how to disable the remove button for array items using the `removable` option in the uiSchema. Setting `removable` to `false` in `ui:options` will remove the remove button from each item in the array, preventing the user from deleting items.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    removable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Reusable Custom Form Component - React JSX\nDESCRIPTION: This snippet demonstrates how to create a reusable form component with custom fields and widgets. It defines customFields and customWidgets objects, which map field/widget names to custom React components. The MyForm component then uses these custom components when rendering the Form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-widgets-fields.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst customFields = {StringField: CustomString};\nconst customWidgets = {CheckboxWidget: CustomCheckbox};\n\nfunction MyForm(props) {\n  return <Form fields={customFields} widgets={customWidgets} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting errors list version 5\nDESCRIPTION: Demonstrates the `errors` list structure in version 5 when combining custom validation and AJV errors. The error information is maintained and errors are appended to the end of the list.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// version 5\n[\n  {\n    message: 'should NOT be shorter than 3 characters',\n    name: 'minLength',\n    params: { limit: 3 },\n    property: '.password2',\n    schemaPath: '#/properties/password2/minLength',\n    stack: '.password2 should NOT be shorter than 3 characters',\n  },\n  {\n    property: '.',\n    message: 'Please correct your password',\n    stack: '. Please correct your password',\n  },\n  {\n    property: '.',\n    message: 'passwords do not match',\n    stack: '.password2 passwords do not match',\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering checkboxes inline (JS)\nDESCRIPTION: This snippet demonstrates how to render checkboxes inline instead of the default stacked layout.  Setting the `inline` property to `true` within the `ui:options` object of the uiSchema will display the checkboxes horizontally.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  minItems: 2,\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"checkboxes\",\n  \"ui:options\": {\n    inline: true\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Applying uiSchema to array items (JSX)\nDESCRIPTION: This snippet demonstrates how to apply a uiSchema to array items in React JSONSchema Form. It defines a schema for an array of strings and a uiSchema that specifies the \"ui:widget\" as \"textarea\" for each item in the array. This renders each string input as a textarea.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  items: {\n    \"ui:widget\": \"textarea\"\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Specifying the minimum number of array items (JSX)\nDESCRIPTION: This snippet demonstrates how to specify the minimum number of items required in an array using the `minItems` property in the schema. When an array property is marked as `required`, an empty array is considered valid; using `minItems` enforces a minimum number of items within the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  minItems: 2,\n  title: \"A multiple-choice list\",\n  items: {\n    type: \"string\",\n    enum: [\"foo\", \"bar\", \"fuzz\", \"qux\"],\n  },\n  uniqueItems: true\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling array item ordering in RJSF\nDESCRIPTION: This code snippet shows how to disable the default ordering of array items using the `orderable` option in the uiSchema. Setting `orderable` to `false` within `'ui:options'` removes the move up/down buttons.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    orderable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Alternative Enum with AnyOf (JSX)\nDESCRIPTION: This code provides a JSON-Schema compliant alternative to `enumNames` using the `anyOf` property.  Each option in the `anyOf` array defines a specific enum value with a corresponding title. This is interpreted by react-jsonschema-form to render a select dropdown or radio button group.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"number\",\n  \"anyOf\": [\n    {\n      \"type\": \"number\",\n      \"title\": \"one\",\n      \"enum\": [\n        1\n      ]\n    },\n    {\n      \"type\": \"number\",\n      \"title\": \"two\",\n      \"enum\": [\n        2\n      ]\n    },\n    {\n      \"type\": \"number\",\n      \"title\": \"three\",\n      \"enum\": [\n        3\n      ]\n    }\n  ]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting input type using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set the input type attribute using the `ui:options` and `inputType` properties in the uiSchema. This is especially useful for specifying the input type for fields like telephone numbers (`tel`).\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    inputType: 'tel',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Props with a Custom Theme\nDESCRIPTION: This code snippet shows how to override form properties such as `showErrorList`, `fields`, and templates using a custom theme object. It demonstrates that properties defined in the theme will take precedence over the default form properties, but will be overridden by user-provided values.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-themes.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    fields: myFields,\n    showErrorList: false,\n    widgets: myWidgets\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing String Field with React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet demonstrates how to define a simple string field in a react-jsonschema-form using JSON Schema. It creates a schema object with the type property set to \"string\".  The Form component from react-jsonschema-form is then rendered with this schema. The output is a text input field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining an object form schema with properties\nDESCRIPTION: This snippet defines a JSON schema for a form with an object containing multiple fields (name and age). It uses the `type` and `properties` properties to define the form structure. It then renders the schema using the `<Form>` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  title: \"Test form\",\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\"\n    },\n    age: {\n      type: \"number\"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disable the Form\nDESCRIPTION: Shows how to disable the entire react-jsonschema-form using the `disabled` prop.  When set, all fields within the form will be disabled. The schema defines a simple string type.  If only specific fields need to be disabled, use the `ui:disabled` parameter within the `uiSchema`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((<Form schema={schema}\n        disabled />), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Make the Form Read-Only\nDESCRIPTION: Illustrates how to make the entire react-jsonschema-form read-only using the `readonly` prop. When set, all fields within the form will become read-only. The schema defines a simple string type. To make specific fields read-only, use the `ui:readonly` parameter in the `uiSchema`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((<Form schema={schema}\n        readonly />), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/material-ui using yarn\nDESCRIPTION: Installs the @rjsf/material-ui package using yarn. This command adds the material-ui theme, fields, and widgets for react-jsonschema-form to the project. Requires yarn to be installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/material-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/material-ui\n```\n\n----------------------------------------\n\nTITLE: Enabling file preview using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to enable a file preview for the `FileWidget` using the `ui:options` property in the uiSchema.  The `filePreview` option is set to `true`, which will display a preview of an image or a download link for non-image files.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    filePreview: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Merge AllOf Implementation\nDESCRIPTION: Demonstrates how to provide a custom implementation for merging `allOf` schemas using the `experimental_customMergeAllOf` prop. This allows for tailored merging strategies for performance optimization or specific requirements, but requires careful handling of potential edge cases to avoid unexpected behavior or validation errors. It imports Form and validator from rjsf and defines a custom function that processes the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n\nconst customMergeAllOf = (schema: RJSFSchema): RJSFSchema => {\n  // Your custom implementation here\n};\n\nrender(\n  <Form schema={schema} validator={validator} experimental_customMergeAllOf={customMergeAllOf} />,\n  document.getElementById('app')\n);\n```\n\n----------------------------------------\n\nTITLE: Styling ArrayField Buttons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to customize the appearance of ArrayField buttons in react-jsonschema-form by hiding glyphicons and replacing them with custom text labels. It targets specific CSS classes associated with the add, move up, move down, and remove buttons.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/internals.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ni.glyphicon { display: none; }\n.btn-add::after { content: 'Add'; }\n.array-item-move-up::after { content: 'Move Up'; }\n.array-item-move-down::after { content: 'Move Down'; }\n.array-item-remove::after { content: 'Remove'; }\n```\n\n----------------------------------------\n\nTITLE: Setting global options for UiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set global options for the UI schema using the `ui:globalOptions` property. In this example, it sets the `copyable` option to `true`, which could enable a feature to copy the field's content. This option applies globally across the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:globalOptions': { copyable: true },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting enum names using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to provide custom labels for enum values using the `ui:enumNames` property in the uiSchema.  It maps the numerical enum values 1, 2, and 3 to the string labels 'one', 'two', and 'three', respectively.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  enum: [1, 2, 3],\n};\nconst uiSchema: UiSchema = {\n  'ui:enumNames': ['one', 'two', 'three'],\n};\n```\n\n----------------------------------------\n\nTITLE: Handle Form Submission\nDESCRIPTION: Demonstrates how to use the `onSubmit` prop to handle form submissions. The `onSubmit` function receives an object containing the `formData` and the original event.  The function logs the form data to the console. The schema defines a simple string type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\nconst onSubmit = ({formData}, e) => console.log(\"Data submitted: \",  formData);\n\nrender((<Form schema={schema}\n        onSubmit={onSubmit} />), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Nullable Types in React JSON Schema Form\nDESCRIPTION: This code demonstrates how to define a nullable type using an array of types within the `type` property.  This schema specifies that the field can be either a string or null. It renders a form using the defined schema into the element with id \"app\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/single.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: [\"string\", \"null\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Deprecating uiSchema.classNames\nDESCRIPTION: Demonstrates how `uiSchema.classNames` was used prior to version 5 and how to update it to use the `ui:` prefix to avoid deprecation warnings.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\n// This uiSchema will log a deprecation warning to the console\nconst uiSchemaLog: UiSchema = {\n  title: {\n    classNames: 'myClass',\n  },\n};\n// This uiSchema will not\nconst uiSchemaNoLog: UiSchema = {\n  title: {\n    'ui:classNames': 'myClass',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Labels for Enum Fields (JSX)\nDESCRIPTION: This code snippet illustrates the use of the `enumNames` property (non JSON-Schema compliant) to customize the labels displayed for enum options in react-jsonschema-form.  The schema includes an enum with numeric values and corresponding enumNames to provide descriptive labels for each number.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"number\",\n  enum: [1, 2, 3],\n  enumNames: [\"one\", \"two\", \"three\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining uiSchema with title and description using ui:options - JSON\nDESCRIPTION: These JSON snippets demonstrate two equivalent ways of defining a uiSchema with title and description properties using the react-jsonschema-form library. The first uses \"ui:title\" and \"ui:description\" directly, while the second encapsulates them within the \"ui:options\" object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"title\": \"Title\",\n    \"description\": \"Description\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean Labels - uiSchema - JSON\nDESCRIPTION: This JSON uiSchema sets the widget for the `booleanWithCustomLabels` field to `radio`. This is required when using custom labels for boolean fields defined with `oneOf` in the schema. The `ui:widget` property specifies the desired widget type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"booleanWithCustomLabels\": {\n    \"ui:widget\": \"radio\" // or \"select\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Schema Dependencies in react-jsonschema-form\nDESCRIPTION: This example shows how to conditionally add a field based on another field's presence.  If `credit_card` is defined, the `billing_address` field is displayed. Requires react-jsonschema-form and react.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/dependencies.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": {\n      \"properties\": {\n        \"billing_address\": { \"type\": \"string\" }\n      },\n      \"required\": [\"billing_address\"]\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting ui:FieldTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet shows how to set the FieldTemplate within the uiSchema, allowing for property-specific customization. It shows how to apply a custom template to individual properties within the form using the uiSchema. Requires a pre-defined `CustomFieldTemplate`\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:FieldTemplate': CustomFieldTemplate,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI and Core Dependencies\nDESCRIPTION: Installs the necessary Fluent UI React components and the core react-jsonschema-form package using yarn.  These packages are prerequisites for using the @rjsf/fluent-ui theme. This command should be executed in the project's root directory.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluent-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/react @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Validation in React JSONSchema Form (JSX)\nDESCRIPTION: This snippet demonstrates how to enable live validation by passing the `liveValidate` prop to the `Form` component. When enabled, the form data is validated on every value change.  It includes a simple schema with a const validation rule.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: [\"string\"],\n  const: \"test\"\n};\n\nconst formData = \"a\";\n\nrender((\n  <Form schema={schema} formData={formData} liveValidate />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Make the Form Read-Only\nDESCRIPTION: Shows how to make the entire form read-only by setting the `readonly` prop. Similar to the `disabled` prop, the `readonly` prop is forwarded to each field within the form. The example imports Form, RJSFSchema, validator, defines a simple schema, and renders the Form component with the `readonly` prop set to `true`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} readonly />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Setting a root field ID - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to declare a root prefix for all rendered widgets in a react-jsonschema-form using the `ui:rootFieldId` uiSchema directive. This is useful when using multiple instances of the Form component on the same page to ensure unique IDs.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:rootFieldId\": \"myform\"\n};\n```\n\n----------------------------------------\n\nTITLE: Adding classNames to a field using uiSchema - JSX\nDESCRIPTION: This JSX snippet shows how to add custom CSS classes to a specific field in a react-jsonschema-form using the `classNames` property within the uiSchema.  The classes defined in the uiSchema will be applied to the container div element of the corresponding field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst uiSchema = {\n  title: {\n    classNames: \"task-title foo-bar\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML5 Validation in React JSONSchema Form (JSX)\nDESCRIPTION: This code snippet shows how to disable HTML5 validation in a React JSONSchema Form by setting the `noHtml5Validate` prop to `true`. This prevents default browser validation messages from appearing and ensures consistent error handling.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\",\n      required: true\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} noHtml5Validate />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Name\nDESCRIPTION: Shows how to change the default form tag to a different HTML tag using the tagName property. This can also take a custom component. In the first example the form tag is changed to a div. In the second example a custom component is used as the form tag.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Form\n  tagName=\"div\"\n/>\n```\n\nLANGUAGE: JSX\nCODE:\n```\nconst CustomForm = props => <form {...props} style={...} className={...} />\n// ...\n<Form\n  tagName={CustomForm}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Field with React JSON Schema Form (JSX)\nDESCRIPTION: This code snippet shows how to create an enum field in react-jsonschema-form. It defines a schema with the type \"string\" and an enum property that lists the allowed values. The Form component renders this as a select dropdown or radio button group.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  enum: [\"one\", \"two\", \"three\"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using uiSchema to specify ObjectFieldTemplate (JavaScript)\nDESCRIPTION: Shows how to specify a custom ObjectFieldTemplate within a uiSchema.  By setting the 'ui:ObjectFieldTemplate' property in the uiSchema to the custom template component, the form will use the specified template to render object fields. This allows for more flexible and configurable form rendering.  Requires the ObjectFieldTemplate to be defined beforehand.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:ObjectFieldTemplate\": ObjectFieldTemplate\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a placeholder to an enum field - JSX\nDESCRIPTION: This JSX snippet shows how to add a placeholder to a select (enum) field using the `ui:placeholder` uiSchema directive in react-jsonschema-form.  The placeholder text is displayed as the default unselected option in the dropdown.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\", enum: [\"First\", \"Second\"]};\nconst uiSchema = {\n  \"ui:placeholder\": \"Choose an option\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies using Yarn\nDESCRIPTION: This command installs the necessary dependencies for Material UI 5 to work with react-jsonschema-form. It includes Material UI core, icons, styling libraries, and core react-jsonschema-form libraries and a validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/mui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @mui/icons-material @emotion/react @emotion/styled @rjsf/core @rjsf/utils @rjsf/validator-ajv6\n```\n\n----------------------------------------\n\nTITLE: Disabling Enum Option (JSX)\nDESCRIPTION: This code snippet shows how to disable an option in an enum field using the `ui:enumDisabled` property within the uiSchema.  In this case, the option with value `true` is disabled.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"boolean\",\n  enum: [true, false]\n};\n\nconst uiSchema={\n  \"ui:enumDisabled\": [true],\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Form Component (rjsf)\nDESCRIPTION: This code snippet demonstrates how to import the Form component from the `@rjsf/material-ui` package to use the Material UI theme with React JSON Schema Form. It assumes that both `@rjsf/core` and `@rjsf/material-ui` are already installed as dependencies.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/themes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from \"@rjsf/material-ui\";\n```\n\n----------------------------------------\n\nTITLE: Setting ui:ObjectFieldTemplate in React JSON Schema Form (TSX)\nDESCRIPTION: This snippet shows how to set a custom ObjectFieldTemplate using the uiSchema. This allows specific object fields within the form to have customized rendering. Requires a pre-defined `ObjectFieldTemplate`\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-templates.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:ObjectFieldTemplate': ObjectFieldTemplate,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Property Dependencies in react-jsonschema-form\nDESCRIPTION: This code demonstrates how to define a bidirectional property dependency. If `credit_card` is defined, `billing_address` is required and vice-versa. Requires react-jsonschema-form and react for rendering.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/dependencies.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"credit_card\": { \"type\": \"number\" },\n    \"billing_address\": { \"type\": \"string\" }\n  },\n\n  \"required\": [\"name\"],\n\n  \"dependencies\": {\n    \"credit_card\": [\"billing_address\"],\n    \"billing_address\": [\"credit_card\"]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/fluentui-rc with yarn\nDESCRIPTION: This command installs the @rjsf/fluentui-rc package using yarn. This package provides the Fluent UI React Components (v9) theme, fields, and widgets for use with react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluentui-rc/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/fluentui-rc\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Formats for Validation in React JSONSchema Form (JSX)\nDESCRIPTION: Demonstrates how to add custom formats to the validator using the `customFormats` prop. This example adds a `phone-us` format using a regular expression for validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: 'string',\n  format: 'phone-us'\n};\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/\n};\n\nrender((\n  <Form schema={schema} \n        customFormats={customFormats}/>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Form Component with @rjsf/core and @rjsf/mui\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a themed form component using `withTheme` from `@rjsf/core` and the `Theme` object from `@rjsf/mui`.  This allows you to customize the theme with your own fields and widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/mui/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/mui';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(Theme);\n```\n\n----------------------------------------\n\nTITLE: Using ui:ObjectFieldTemplate in react-jsonschema-form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to specify a custom ObjectFieldTemplate component in the uiSchema.  The 'ui:ObjectFieldTemplate' property is set to the ObjectFieldTemplate function, which will then be used to render the object field within the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:ObjectFieldTemplate\": ObjectFieldTemplate\n};\n```\n\n----------------------------------------\n\nTITLE: getDefaultRegistry Function Definition with Generics (rjsf/core)\nDESCRIPTION: This code snippet presents the `getDefaultRegistry` function in `@rjsf/core`, utilizing generics `T`, `S`, and `F` for `formData`, `schema`, and `formContext`. It illustrates how to obtain the default registry with specified types.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  // ... function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a placeholder to an input field - JSX\nDESCRIPTION: This JSX snippet demonstrates how to add placeholder text to an input field using the `ui:placeholder` uiSchema directive in a react-jsonschema-form. The placeholder text provides a hint to the user about the expected input format.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\", format: \"uri\"};\nconst uiSchema = {\n  \"ui:placeholder\": \"http://\"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting accept option for File Widget\nDESCRIPTION: This snippet shows how to use the `accept` option within the `ui:options` to filter file types allowed in the file widget. This example restricts uploads to only PDF files.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  format: \"data-url\"\n};\n\nconst uiSchema = {\n  \"ui:options\": { accept: \".pdf\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Changing a field's title - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to change a field's title using the `ui:title` uiSchema directive in a react-jsonschema-form. The specified title will override the title defined in the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:title\": \"Your password\"\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML5 Validation in React JSONSchema Form (JSX)\nDESCRIPTION: This code shows how to disable HTML5 validation by setting the `noHtml5Validate` prop to `true` on the `Form` component. This prevents HTML5 validation errors from being displayed before react-jsonschema-form's validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\",\n      required: true\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} noHtml5Validate />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Form Implementation with AJV8 Validator\nDESCRIPTION: A basic example showing how to integrate the AJV8 validator into a react-jsonschema-form. It imports the necessary modules, defines a simple schema, and renders a form using the schema and validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from 'packages/utils/dist/index';\nimport Form from 'packages/core/dist/index';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in ui:order for ReactJS Schema Form\nDESCRIPTION: This JavaScript snippet shows how to use a wildcard character (*) in the ui:order array to render unspecified properties after the explicitly ordered ones. This allows for a partially customized order.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/objects.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst uiSchema = {\n  \"ui:order\": [\"bar\", \"*\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an array of strings in React JSONSchema Form\nDESCRIPTION: This snippet demonstrates how to define an array of strings using the `type: \"array\"` and `items: { type: \"string\" }` schema properties in react-jsonschema-form. It shows how to render a form using this schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting autofocus on a textarea input - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set autofocus on a textarea input in a react-jsonschema-form using the `ui:autofocus` uiSchema directive. When the form is rendered, the specified textarea will automatically receive focus.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"textarea\",\n  \"ui:autofocus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: File Widget with ui:widget property set to \"file\" - React JSONSchema Form (JS)\nDESCRIPTION: This snippet shows how to use the file widget by specifying `ui:widget` as `file` in `uiSchema`. This allows the file widget to be used for a string schema type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/widgets.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst schema = {\n  type: \"string\",\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"file\",\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Components via Templates\nDESCRIPTION: This snippet demonstrates how to override the `DescriptionField`, `TitleField`, and `UnsupportedField` components in react-jsonschema-form version 5.  These components are now overridden via the `templates` prop instead of the `fields` prop.  Custom implementations are passed to the `templates` object, keyed by their respective template names.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DescriptionFieldProps, RJSFSchema, TitleFieldProps } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport validator from \"@rjsf/validator-ajv8\";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom fields\nconst CustomDescriptionField = (props: DescriptionFieldProps) => { ... };\nconst CustomTitleField = (props: TitleFieldProps) => { ... };\nconst CustomUnsupportedField = (props: ObjectFieldTemplateProps) => { ...\n};\n\nconst templates: Partial<TemplatesType> = {\n  DescriptionFieldTemplate: CustomDescriptionField,\n  TitleFieldTemplate: CustomTitleField,\n  UnsupportedFieldTemplate: CustomUnsupportedField,\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates}/>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Template Theme Example - TSX\nDESCRIPTION: This example demonstrates how to define custom templates (ArrayFieldTemplate and ErrorListTemplate) for use in a react-jsonschema-form theme. It imports necessary types from `@rjsf/utils` and `@rjsf/core`. It defines functional components for the custom templates. The `ThemeObject` is then created, assigning the `templates` property to include the custom templates and also includes the custom widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-themes.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ArrayFieldTemplateProps, ErrorListProps } from '@rjsf/utils';\nimport { ThemeProps } from '@rjsf/core';\n\nfunction MyArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n  return (\n    <div>\n      {props.items.map((element) => element.children)}\n      {props.canAdd && <button type='button' onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nfunction MyErrorListTemplate(props: ErrorListProps) {\n  const { errors } = props;\n  return (\n    <ul>\n      {errors.map((error) => (\n        <li key={error.stack}>{error.stack}</li>\n      ))}\n    </ul>\n  );\n}\n\nconst ThemeObject: ThemeProps = {\n  templates: {\n    ArrayFieldTemplate: MyArrayFieldTemplate,\n    ErrorListTemplate: MyErrorListTemplate,\n  },\n  widgets: myWidgets,\n};\n\nexport default ThemeObject;\n```\n\n----------------------------------------\n\nTITLE: Custom Semantic UI Widget Options\nDESCRIPTION: This JSON configuration defines default options for Semantic UI widgets. It sets `fluid` to true, `inverted` to false, and configures error message options for size and pointing direction.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/semantic-ui/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:options\": {\n    \"semantic\": {\n      \"fluid\": true,\n      \"inverted\": false,\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Form Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `<Form />` component from the `@rjsf/material-ui` package to use the Material UI theme in react-jsonschema-form. It requires the installation of both `@rjsf/core` and `@rjsf/material-ui`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/themes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/material-ui';\n```\n\n----------------------------------------\n\nTITLE: Custom ArrayFieldTemplate in uiSchema - React JSONSchema Form (JavaScript)\nDESCRIPTION: This code shows how to specify a custom ArrayFieldTemplate in the uiSchema for react-jsonschema-form.  It assigns the ArrayFieldTemplate component to the `ui:ArrayFieldTemplate` property in the uiSchema. It depends on the previously defined `ArrayFieldTemplate` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:ArrayFieldTemplate\": ArrayFieldTemplate\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ArrayFieldTemplate in uiSchema (JavaScript)\nDESCRIPTION: This snippet demonstrates how to specify a custom ArrayFieldTemplate using the uiSchema. It assigns the `ArrayFieldTemplate` component to the `ui:ArrayFieldTemplate` property within the uiSchema. It uses standard JavaScript syntax.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst uiSchema = {\n  \"ui:ArrayFieldTemplate\": ArrayFieldTemplate\n}\n```\n\n----------------------------------------\n\nTITLE: Custom FieldTemplate in uiSchema - React JSONSchema Form (JavaScript)\nDESCRIPTION: This code demonstrates how to specify a custom FieldTemplate in the uiSchema for react-jsonschema-form. It assigns the CustomFieldTemplate component to the `ui:FieldTemplate` property in the uiSchema. It relies on a pre-existing `CustomFieldTemplate` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst uiSchema = {\n  \"ui:FieldTemplate\": CustomFieldTemplate\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bootstrap 3 CSS to HTML\nDESCRIPTION: This code snippet demonstrates how to add Bootstrap 3 CSS to your HTML page. This is a prerequisite for using the default Bootstrap 3 theme provided by @rjsf/core. It links to the Bootstrap 3 CSS file hosted on a CDN.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/validator-ajv6 dependency\nDESCRIPTION: This command installs the @rjsf/validator-ajv6 package, which provides the AJV-6 based validator for react-jsonschema-form. It uses yarn package manager to add the validator package to the project.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/validator-ajv6\n```\n\n----------------------------------------\n\nTITLE: Defining FieldTemplate in React JSX\nDESCRIPTION: This snippet defines a custom FieldTemplate component to customize the rendering of individual fields within the form. It receives props such as id, classNames, label, help, errors, and children, and structures the field layout accordingly. It uses React JSX syntax.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-templates.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nfunction CustomFieldTemplate(props) {\n  const {id, classNames, label, help, required, description, errors, children} = props;\n  return (\n    <div className={classNames}>\n      <label htmlFor={id}>{label}{required ? \"*\" : null}</label>\n      {description}\n      {children}\n      {errors}\n      {help}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        FieldTemplate={CustomFieldTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Error List Template (JSX)\nDESCRIPTION: This example defines a custom error list template in a React JSONSchema Form. It's a React component (`ErrorListTemplate`) that receives errors as props and renders them within an unordered list. The `showErrorList` prop must be set to `true` to use custom error list.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ErrorListTemplate(props) {\n  const { errors } = props;\n  return (\n    <div>\n      <h2>Custom error list</h2>\n      <ul>\n        {errors.map(error => (\n            <li key={error.stack}>\n              {error.stack}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nconst schema = {\n  type: \"string\",\n  const: \"test\"\n};\n\nrender((\n  <Form schema={schema}\n        showErrorList={true}\n        formData={\"\"]}\n        liveValidate\n        ErrorList={ErrorListTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting a description for a field - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to change the description of a field using the `ui:description` uiSchema directive in a react-jsonschema-form. The specified description will be displayed below the input field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:description\": \"The best password\"\n};\n```\n\n----------------------------------------\n\nTITLE: Custom ID Prefix\nDESCRIPTION: Demonstrates how to customize the ID prefix used for form input elements. This is useful for avoiding ID collisions when integrating with existing DOM structures.  The example sets the `idPrefix` to \"rjsf_prefix\", resulting in input IDs like `rjsf_prefix_key`. The schema defines a simple string type.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst schema = {\n  type: \"string\"\n};\n\nrender((<Form schema={schema}\n        idPrefix={\"rjsf_prefix\"}/>), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Resulting errors list version 4\nDESCRIPTION: Demonstrates the `errors` list structure in version 4 when combining custom validation and AJV errors. Notice the format of the `stack` property.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// version 4\n[\n  { stack: 'root: Please correct your password' },\n  { stack: 'password2: passwords do not match' },\n  { stack: 'password2: should NOT be shorter than 3 characters' },\n]\n```\n\n----------------------------------------\n\nTITLE: Building static content\nDESCRIPTION: Builds the project and generates static content into the `build` directory using npm. This is typically done before deploying the project to a hosting service. The generated files are optimized for production.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm build\n```\n\n----------------------------------------\n\nTITLE: Migrating Material UI v5 - After\nDESCRIPTION: Examples of how to import `Form` and `Theme` components from `@rjsf/mui` after migrating.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/mui';\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/mui';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme);\n```\n\n----------------------------------------\n\nTITLE: Setting autocomplete attribute using uiSchema in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set the `autocomplete` attribute for a text input or textarea using the `ui:autocomplete` property in the uiSchema. This allows leveraging the HTML autocomplete feature for the input field. `ui:widget` is used to render a textarea.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/uiSchema.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'textarea',\n  'ui:autocomplete': 'on',\n};\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Input Type - JSX\nDESCRIPTION: This JSX snippet demonstrates how to change the input type of a field (e.g., to 'tel' for telephone number input) using the `ui:options` uiSchema directive.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:options\": {\n    inputType: 'tel'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Compiling schema validators with options\nDESCRIPTION: This code snippet shows how to compile a JSON schema into precompiled validator functions using `compileSchemaValidators()` and providing additional options such as `additionalMetaSchemas`, `customFormats`, `ajvOptionsOverrides`, and `ajvFormatOptions`. These options are useful for customizing the AJV validator behavior. It assumes the schema is in a JSON file.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_1\n\nLANGUAGE: cjs\nCODE:\n```\nconst { compileSchemaValidators } = require('@rjsf/validator-ajv8');\nconst yourSchema = require('path_to/yourSchema.json'); // If your schema is a json file\n\nconst options = {\n  additionalMetaSchemas: [require('ajv/lib/refs/json-schema-draft-06.json')],\n  customFormats: { 'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/, 'area-code': /\\d{3}/ },\n  ajvOptionsOverrides: {\n    $data: true,\n    verbose: true,\n  },\n  ajvFormatOptions: {\n    mode: 'fast',\n  },\n};\n\ncompileSchemaValidators(yourSchema, 'path_to/yourCompiledSchema.js', options);\n```\n\n----------------------------------------\n\nTITLE: JSON Schema with $schema Attribute (JSON)\nDESCRIPTION: This code snippet demonstrates how to specify a meta schema (e.g., draft-04) for validating a JSON schema using the `$schema` attribute.  This attribute informs the validator which meta schema to use for validation. The example uses draft-04.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI 5 Form Component in TypeScript\nDESCRIPTION: This snippet imports the `<Form />` component from `@rjsf/mui` for using Material UI 5 theme. It depends on having both `@rjsf/core` and `@rjsf/mui` installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/themes.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/mui';\n```\n\n----------------------------------------\n\nTITLE: uiSchema Example: Autofocus - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the autofocus attribute on a text area using the `ui:autofocus` uiSchema directive.  The `ui:widget` is set to \"textarea\".\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"textarea\",\n  \"ui:autofocus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding dependencies using yarn\nDESCRIPTION: This command adds semantic-ui-css, semantic-ui-react, and @rjsf/core as dependencies to your project using yarn. These are required peer dependencies for @rjsf/semantic-ui to work correctly.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/semantic-ui/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add semantic-ui-css semantic-ui-react @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/mui using Yarn\nDESCRIPTION: This command installs the @rjsf/mui package, which provides Material UI 5 themes, fields, and widgets for react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/mui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/mui\n```\n\n----------------------------------------\n\nTITLE: HTML Output: Class Names Example - HTML\nDESCRIPTION: This HTML snippet is the rendered output demonstrating the effects of using `classNames` in the uiSchema to add CSS classes to the form field's div element.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/uiSchema.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"field field-string task-title foo-bar\" >\n  <label>\n    <span>Title*</span>\n    <input value=\"My task\" required=\"\" type=\"text\">\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Form from @rjsf/fluentui-rc\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the Form component directly from the @rjsf/fluentui-rc package. This provides a pre-configured form component using the Fluent UI React Components theme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/fluentui-rc/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/fluentui-rc';\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/bootstrap-4 with yarn\nDESCRIPTION: This command installs the @rjsf/bootstrap-4 package using yarn. This package provides the Bootstrap 4 theme, fields, and widgets that can be used with react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/bootstrap-4/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/bootstrap-4\n```\n\n----------------------------------------\n\nTITLE: Importing Core Form (Bootstrap 3) - JavaScript\nDESCRIPTION: Imports the Form component from the `@rjsf/core` package to use the default Bootstrap 3 theme. This is needed when you want to explicitly use the Bootstrap 3 theme, or as a prerequisite for other themes. It serves as a base import for many setups.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/themes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from \"@rjsf/core\";\n```\n\n----------------------------------------\n\nTITLE: Disabling removing array items in React JSONSchema Form\nDESCRIPTION: This snippet disables the remove button for array items by setting the `removable` option to `false` in the uiSchema using `\"ui:options\": { removable: false }`. This prevents users from removing existing items in the array.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/arrays.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    removable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Props in Theme - JSX\nDESCRIPTION: This snippet shows how to override other `Form` properties directly within the theme object using `withTheme`. This can set default values for properties like `showErrorList`. The defined theme will have higher priority than the default values of the rjsf `Form` component but lower priority than properties passed directly to the Form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    fields: myFields,\n    showErrorList: false,\n    widgets: myWidgets\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Runs all tests from either the root directory or the `packages` subdirectory. Assumes that all dependencies have been installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Specifying minimum number of items in RJSF\nDESCRIPTION: This code snippet shows how to specify the minimum number of items required in an array using the `minItems` property in the schema. In this case, the array must have at least 2 items.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/json-schema/arrays.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  minItems: 2,\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using AntD v5 theme in React - Typescript\nDESCRIPTION: This code snippet illustrates how to apply AntD v5 styling to React JSON Schema Form components.  It wraps the form components with the `StyleProvider` component from `@ant-design/cssinjs`. This ensures that the components are styled using AntD v5 instead of the default v4 styling. It requires the `@ant-design/cssinjs` library.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/antd/uiSchema.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\n\nconst Component = () => {\n  return (\n    <StyleProvider>\n      <YourFormComponents />\n    </StyleProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Validation ErrorSchema\nDESCRIPTION: Shows an ErrorSchema produced by custom validation or `extraErrors`. This illustrates the structure of validation errors before AJV validation.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  __errors: [ \"Please correct your password\"],\n  password2: { __errors: \"passwords do not match\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Material UI v5 - Before\nDESCRIPTION: Examples of how to import `Form` and `Theme` components from `@rjsf/material-ui` and `@rjsf/material-ui/v5` before migrating to `@rjsf/mui`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form5 from '@rjsf/material-ui';\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/material-ui/v5';\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/material-ui/v5';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as Theme5 } from '@rjsf/material-ui';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme5);\n```\n\n----------------------------------------\n\nTITLE: Customizing Validator with Custom Formats\nDESCRIPTION: Demonstrates how to customize the AJV8 validator with custom formats. It defines a custom format for US phone numbers and passes it to the `customizeValidator` function. This custom validator is then used in a form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from '@rjsf/utils';\nimport Form from '@rjsf/core';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]\\d{3}[\\s-]\\d{4}$/,\n};\n\nconst validator = customizeValidator({\n  customFormats,\n});\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'phone-us',\n};\n\n<Form schema={schema} validator={validator} />;\n```\n\n----------------------------------------\n\nTITLE: Using File Widget with ui:widget directive in React JSONSchema Form\nDESCRIPTION: This snippet demonstrates how to use the file widget by specifying `ui:widget` as `file` in the uiSchema. This also renders a file input. This allows file selection and stores file content as data URL.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"string\",\n};\n\nconst uiSchema = {\n  \"ui:widget\": \"file\",\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Error List Template in React JSONSchema Form (JSX)\nDESCRIPTION: This snippet defines a custom error list template using the `ErrorList` prop. The custom component receives errors as props and renders them in a desired format. The `showErrorList` prop must be set to `true` for the custom template to render.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ErrorListTemplate(props) {\n  const { errors } = props;\n  return (\n    <div>\n      <h2>Custom error list</h2>\n      <ul>\n        {errors.map(error => (\n            <li key={error.stack}>\n              {error.stack}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nconst schema = {\n  type: \"string\",\n  const: \"test\"\n};\n\nrender((\n  <Form schema={schema}\n        showErrorList={true}\n        formData={\"\"}\n        liveValidate\n        ErrorList={ErrorListTemplate} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/semantic-ui using yarn\nDESCRIPTION: This command installs the @rjsf/semantic-ui package into your project using yarn. This package provides the Semantic UI theme for react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/semantic-ui/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @rjsf/semantic-ui\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Snapshot Tests in React\nDESCRIPTION: This code demonstrates how to import snapshot tests from the @rjsf/snapshot-tests package and use them to test a React form component.  The `arrayTests` function is called with the `Form` component to perform the tests. Other test types like `formTests` and `objectTests` are also available.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/snapshot-tests/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { arrayTests } from '@rjsf/snapshot-tests'; // OR\n// import { formTests } from '@rjsf/snapshot-tests';\n// import { objectTests } from '@rjsf/snapshot-tests';\n\nimport Form from '../src';\n\narrayTests(Form); // OR\n// formTests(Form);\n// objectTests(Form);\n```\n\n----------------------------------------\n\nTITLE: Changing the Form Tag Name - TypeScript/HTML\nDESCRIPTION: This code snippet shows how to change the default `form` tag name to a different HTML tag, such as a `div`, in the React JSONSchema Form. It also demonstrates how to use a custom React component as the tag for the form. The snippet highlights the usage of the `tagName` prop in the `<Form>` component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/form-props.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Form\n  tagName=\"div\"\n  ...\n/>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst CustomForm = props => <form {...props} style={...} className={...} />\n// ...\n<Form\n  tagName={CustomForm}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/validator-ajv8 with yarn\nDESCRIPTION: Installs the @rjsf/validator-ajv8 package using yarn. This installs the validator plugin.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv8/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/validator-ajv8\n```\n\n----------------------------------------\n\nTITLE: File Widget Accept Option - TS\nDESCRIPTION: This example demonstrates how to use the `accept` option within the `ui:options` of a file widget to filter the types of files that a user can upload. The schema defines a string field with the `data-url` format, and the uiSchema specifies the `accept` option to only allow `.pdf` files.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': { accept: '.pdf' },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Radio Widget for Boolean Field in React JSONSchema Form\nDESCRIPTION: This code snippet demonstrates how to use the `radio` widget for a boolean field in react-jsonschema-form. It defines a schema with a boolean property named `done`, and a uiSchema that specifies the `radio` widget for the `done` field. The Form component is then rendered with the defined schema and uiSchema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"object\",\n  properties: {\n    done: {\n      type: \"boolean\"\n    }\n  }\n};\n\nconst uiSchema =  {\n  done: {\n    \"ui:widget\": \"radio\" // could also be \"select\"\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Validator (Basic)\nDESCRIPTION: This snippet demonstrates the simplest way to use the new `validator` prop in react-jsonschema-form version 5. It imports the default validator from `@rjsf/validator-ajv8` and passes it to the `Form` component.  This approach is suitable when no custom validation logic is needed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport validator from \"@rjsf/validator-ajv8\";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Allowing Additional Properties with additionalProperties - JSX\nDESCRIPTION: This snippet demonstrates how to allow users to add properties with arbitrary key names to an object by using the `additionalProperties` keyword in the schema.  The `additionalProperties` is set to a schema object defining the type and constraints of the additional properties. This enables an 'add' button for creating new properties in the form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/objects.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": {\n    \"type\": \"number\",\n    \"enum\": [1, 2, 3]\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: File Widget with Data URL Format - TSX\nDESCRIPTION: This code snippet shows how to use a file widget by declaring a string schema type with the `data-url` format in `react-jsonschema-form`. The schema defines a string type with the `format` set to `data-url`. This tells the form to render a file input, and the file content will be stored as a data URL.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Importing Core Form Component in TypeScript\nDESCRIPTION: This code snippet shows how to import the `<Form />` component from the `@rjsf/core` package, which provides the standard Bootstrap 3 theme. It requires the installation of the `@rjsf/core` package.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/themes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Form from '@rjsf/core';\n```\n\n----------------------------------------\n\nTITLE: Defining Widget with uiSchema - Boolean Type - TSX\nDESCRIPTION: This code snippet demonstrates how to define a boolean field with a specific widget (radio) using the `ui:widget` property in the `uiSchema`. It imports necessary modules from `@rjsf/core` and `@rjsf/utils`.  It defines a schema with a boolean property named 'done' and sets the widget for this field to 'radio' within the `uiSchema`. The `Form` component is then rendered with the defined schema and uiSchema, along with the validator.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/widgets.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    done: {\n      type: 'boolean',\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  done: {\n    'ui:widget': 'radio', // could also be \"select\"\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Semantic-UI uiSchema for array items (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to define a schema and uiSchema for an array of strings in react-jsonschema-form. It configures the semantic options within the uiSchema to wrap each array item in a Segment and display the buttons horizontally instead of vertically.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n   \"ui:options\": {\n      \"semantic\": {\n        \"wrapItem\": true,\n        \"horizontalButtons\": true\n      }\n    }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Adding metaSchemaDraft04\nDESCRIPTION: Adding metaSchemaDraft04 schema to Form props\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/validation.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  type: \"string\"\n};\n\nreturn (<Form schema={schema} \n  additionalMetaSchemas={[metaSchemaDraft04]} />);\n```\n\n----------------------------------------\n\nTITLE: Using File Widget with Data-URL Format in React JSONSchema Form\nDESCRIPTION: This code snippet demonstrates how to use the file widget by defining a string schema with the `data-url` format. The `data-url` format tells the form to use a file input widget. The file content will be stored as data URL.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"string\",\n  format: \"data-url\",\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Core Form Component (rjsf)\nDESCRIPTION: This snippet shows how to import the default Bootstrap 3 theme's Form component from the `@rjsf/core` package. This is the fallback when no specific theme is chosen. `@rjsf/core` needs to be installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/themes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from \"@rjsf/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Form Component (rjsf) - Redundant\nDESCRIPTION: This is a repeated snippet demonstrating how to import the Form component from the `@rjsf/material-ui` package, emphasizing its usage with the Material UI theme.  It implies the prerequisite installation of both `@rjsf/core` and `@rjsf/material-ui`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/usage/themes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from \"@rjsf/material-ui\";\n```\n\n----------------------------------------\n\nTITLE: Semantic UI options for array items in TypeScript\nDESCRIPTION: This snippet demonstrates how to specify Semantic UI options for array items within a React JSONSchema Form using TypeScript. It utilizes `wrapItem` and `horizontalButtons` options to customize the rendering of array elements. Imports include `RJSFSchema` and `UiSchema` from `@rjsf/utils`, and `validator` from `@rjsf/validator-ajv8`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/api-reference/themes/semantic-ui/uiSchema.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    semantic: {\n      wrapItem: true,\n      horizontalButtons: false,\n    },\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Disabling Ajv Formats in TSX\nDESCRIPTION: This code snippet demonstrates how to disable the default `ajv-formats` to reduce memory footprint.  The `customizeValidator` function is used with `ajvFormatOptions: false`. This configuration turns off all the default format validations provided by `ajv-formats`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst validator = customizeValidator({ ajvFormatOptions: false });\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Bootstrap4 Theme\nDESCRIPTION: This code snippet illustrates how to import the Bootstrap4Theme and apply it using the withTheme higher-order component from @rjsf/core. This approach allows for more customization and control over theme application in React applications.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/bootstrap-4/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as Bootstrap4Theme } from '@rjsf/bootstrap-4';\n\nconst Form = withTheme(Bootstrap4Theme);\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Customized Validator\nDESCRIPTION: This snippet demonstrates how to create a customized validator in react-jsonschema-form version 5. It uses the `customizeValidator` function from `@rjsf/validator-ajv8` to incorporate custom meta-schemas and formats.  This is necessary if you were previously using the `additionalMetaSchemas` or `customFormats` props.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport { customizeValidator, CustomValidatorOptionsType } from \"@rjsf/validator-ajv8\";\n\n// Your schema, additionalMetaSchemas and/or customFormats\nconst schema: RJSFSchema = { ... };\nconst additionalMetaSchemas: CustomValidatorOptionsType['additionalMetaSchemas'] = [{ ... }];\nconst customFormats: CustomValidatorOptionsType['customFormats'] = { ... };\n\nconst validator = customizeValidator({ additionalMetaSchemas, customFormats });\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Disabling array item ordering (JSX)\nDESCRIPTION: This snippet demonstrates how to disable the default ordering of array items using the `orderable` option in the uiSchema. Setting `orderable` to `false` in `ui:options` will remove the move up/down buttons from the array items.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/arrays.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  }\n};\n\nconst uiSchema = {\n  \"ui:options\":  {\n    orderable: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying SemanticUITheme\nDESCRIPTION: This JavaScript code imports `withTheme` from `@rjsf/core` and `SemanticUITheme` from `@rjsf/semantic-ui`. It then uses `withTheme` to create a customized `Form` component with the Semantic UI theme, allowing for modifications to fields and widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/semantic-ui/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as SemanticUITheme } from '@rjsf/semantic-ui';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(SemanticUITheme);\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Message Appearance with errorOptions in JSX\nDESCRIPTION: This JSX snippet illustrates how to customize the appearance of error messages in a React JSON Schema Form using the `errorOptions` property within the `semantic` object of the uiSchema.  The `size` and `pointing` options control the size and direction of the error message dialog. The code demonstrates how to specify that error messages should be small and point upwards.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/api-reference/themes/semantic-ui/uiSchema.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst uiSchema = {\n  \"ui:options\": {\n    \"semantic\" : {\n      \"errorOptions\": {\n        \"size\": \"small\",\n        \"pointing\": \"above\",\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping SelectWidget in react-jsonschema-form (Typescript)\nDESCRIPTION: This snippet demonstrates how to wrap an existing widget, specifically the `SelectWidget`, in react-jsonschema-form to customize its properties. It imports necessary components from `@rjsf/utils`, `@rjsf/core`, and `@rjsf/mui`. It reorders `enumOptions` using a custom function `myOptionsOrderFunction` before rendering the `SelectWidget` with the modified options. The `WidgetProps` interface is used to type the `props` object.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/custom-widgets-fields.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WidgetProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\nimport { Widgets } from '@rjsf/mui';\n\nimport myOptionsOrderFunction from './myOptionsOrderFunction';\n\nconst {\n  widgets: { SelectWidget },\n} = getDefaultRegistry(); // To get widgets from core\n// const { SelectWidget } = Widgets; // To get widgets from a theme do this\n\nfunction MySelectWidget(props: WidgetProps) {\n  const { options } = props;\n  let { enumOptions } = options;\n  // Reorder the `enumOptions` however you want\n  enumOptions = myOptionsOrderFunction(enumOptions);\n  return <SelectWidget {...props} options={{ ...options, enumOptions }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component from @rjsf/mui\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the Form component directly from the @rjsf/mui package. This allows you to use the default Material UI 5-themed form component.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/mui/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/mui';\n```\n\n----------------------------------------\n\nTITLE: Migrating to schemaUtils for Utility Functions\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `utils` object to the new `schemaUtils` object within the `registry` in react-jsonschema-form version 5. It also shows how to import utility functions directly from `@rjsf/utils` when possible.  This allows for using validator-based utility functions without needing a separate validator instance.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Change breaking-change function to schemaUtils instead, otherwise import from @rjsf/utils\n// import { utils } from '@rjsf/core'; <- version 4\n// const { isMultiSelect, resolveSchema, getUiOptions } = utils; <- version 4\nimport { RJSFSchema, WidgetProps, getUiOptions } from '@rjsf/utils';\n\nfunction YourWidget(props: WidgetProps) {\n  const { registry, uiSchema } = props;\n  const { schemaUtils } = registry;\n// const matchingOption = getMatchingOption({}, options, rootSchema); <- version 4\n// const isMultiSelect = isMultiSelect(schema, rootSchema); <- version 4\n// const newSchema = resolveSchema(schema, formData, rootSchema); <- version 4\n  const matchingOption = schemaUtils.getFirstMatchingOption({}, options);\n  const isMultiSelect = schemaUtils.isMultiSelect(schema);\n  const newSchema: RJSFSchema = schemaUtils.retrieveSchema(schema, formData);\n  const options = getUiOptions(uiSchema);\n\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Programmatically\nDESCRIPTION: This JSX code demonstrates how to submit a react-jsonschema-form programmatically by obtaining a reference to the Form component and calling its `submit` method. The `onSubmit` handler is defined to process the form data. This approach allows form submission without a standard submit button.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/internals.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst onSubmit = ({formData}) => console.log(\"Data submitted: \",  formData);\nlet yourForm;\n\nconst schema = {\n    type: \"string\"\n};\n\nrender((\n  <Form schema={schema}\n        onSubmit={onSubmit} ref={(form) => {yourForm = form;}}/>\n), document.getElementById(\"app\"));\n\nyourForm.submit();\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Form - JavaScript\nDESCRIPTION: Imports the Form component from the `@rjsf/material-ui` package to use the Material UI theme.  This snippet requires the `@rjsf/core` and `@rjsf/material-ui` packages to be installed. It demonstrates how to replace the default Bootstrap theme with Material UI.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/themes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Form from \"@rjsf/material-ui\";\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component from @rjsf/chakra-ui\nDESCRIPTION: This JavaScript snippet demonstrates how to import the Form component directly from the @rjsf/chakra-ui library.  This allows for the rendering of a form with the default Chakra UI theme.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/chakra-ui/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/chakra-ui';\n```\n\n----------------------------------------\n\nTITLE: Updating formElement RefObject Usage\nDESCRIPTION: This snippet illustrates the change in how the `formElement` ref is accessed in react-jsonschema-form version 5.  The `formElement` is now accessed through `formRef.current.formElement.current` instead of `formRef.current.formElement`. This is due to the conversion of the `formElement` ref to a `React.RefObject`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RJSFSchema } from \"@rjsf/utils\";\nimport Form from \"@rjsf/core\";\nimport validator from \"@rjsf/validator-ajv8\";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\nconst formRef = React.createRef();\n\nrender((\n  <Form ref={formRef} schema={schema} validator={validator} />\n), document.getElementById(\"app\"));\n\n...\n// Previously, to reset the form one would have called:\n//   formRef.current.formElement.reset();\n// Now one calls:\nformRef.current.formElement.current.reset();\n```\n\n----------------------------------------\n\nTITLE: toErrorList result version 4\nDESCRIPTION: Shows the result of calling `toErrorList(errorSchema)` in version 4.  The `stack` message is formatted using `fieldName` set to 'root'.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// version 4 result\n[{ stack: 'root: error message 1' }, { stack: 'password: passwords do not match' }]\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/core using npm\nDESCRIPTION: This command installs the @rjsf/core package using npm. This is the primary method for adding the core logic and Bootstrap 3 theme to your React project. It adds the package to your project's dependencies.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Adding a help text to a field - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add a help text next to a field using the `ui:help` uiSchema directive in a react-jsonschema-form. The help text provides guidance to the user filling out the form and will be displayed below the field.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {type: \"string\"};\nconst uiSchema = {\n  \"ui:widget\": \"password\",\n  \"ui:help\": \"Hint: Make it strong!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Submitting react-jsonschema-form Programmatically (JSX)\nDESCRIPTION: This JSX code demonstrates how to submit a react-jsonschema-form programmatically using a reference to the Form component.  It defines an onSubmit handler, a simple schema, and uses the ref prop to access the Form instance and call its submit method. This triggers the form's submit event and executes the onSubmit handler.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/internals.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst onSubmit = ({formData}) => console.log(\"Data submitted: \",  formData);\nlet yourForm;\n\nconst schema = {\n    type: \"string\"\n};\n\nrender((\n  <Form schema={schema}\n        onSubmit={onSubmit} ref={(form) => {yourForm = form;}}/>\n), document.getElementById(\"app\"));\n\nyourForm.submit();\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/utils with yarn\nDESCRIPTION: This command installs the `@rjsf/utils` package as a dependency in your project using yarn.  This package provides utility functions for `react-jsonschema-form`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/utils/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/utils\n```\n\n----------------------------------------\n\nTITLE: Importing Form component from @rjsf/antd\nDESCRIPTION: Imports the Form component directly from the @rjsf/antd package. This is the simplest way to use the Ant Design theme with react-jsonschema-form, providing a pre-configured form component with Ant Design styling.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/antd/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '@rjsf/antd';\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic-UI formContext options (JSX)\nDESCRIPTION: This JSX snippet illustrates how to use formContext to apply semantic UI options like 'wrapLabel' and 'wrapContent'. When set to true, these options wrap all input field content and labels in a div respectively, allowing for custom styling via CSS in react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Form\n  formContext={{\n    \"semantic\" : {\n      \"wrapLabel\": true,\n      \"wrapContent\": true\n    }\n  // other props...\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Generic S (schema) in RJSF\nDESCRIPTION: This code shows how to override the `S` generic, representing the schema, in the `<Form>` component. It uses `JSONSchemaType` from `ajv` to define a schema type `MySchema` based on the `FormData` interface, enforcing type safety for the schema.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/advanced-customization/typescript.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JSONSchemaType } from 'ajv';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport { Form } from '@rjsf/core';\n\ninterface FormData {\n  foo?: string;\n  bar?: number;\n}\n\ntype MySchema = JSONSchemaType<FormData>;\n\nconst schema: MySchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'number' },\n  },\n};\n\nconst validator = customizeValidator<any, MySchema>();\n\nrender(<Form<any, MySchema> schema={schema} validator={validator} />, document.getElementById('app'));\n\n// Alternatively since you have the type, you could also use this\n// const validator = customizeValidator<FormData, MySchema>();\n// render((\n//  <Form<FormData, MySchema> schema={schema} validator={validator} />\n//), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Locally\nDESCRIPTION: Runs the Docusaurus documentation locally.  Assumes the project has been cloned and dependencies installed. The documentation will be served on localhost:3000.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/docs\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/core dependency\nDESCRIPTION: This command installs the @rjsf/core package, which is a prerequisite for using @rjsf/validator-ajv6.  It uses yarn package manager to add the core dependencies to the project.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/validator-ajv6/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Form Component\nDESCRIPTION: This JavaScript code shows how to create a themed Form component using `withTheme` from `@rjsf/core` and `ChakraUITheme` from `@rjsf/chakra-ui`. This enables customization of the form's fields and widgets.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/chakra-ui/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withTheme } from '@rjsf/core';\nimport { Theme as ChakraUITheme } from '@rjsf/chakra-ui';\n\n// Make modifications to the theme with your own fields and widgets\n\nconst Form = withTheme(ChakraUITheme);\n```\n\n----------------------------------------\n\nTITLE: Ant Design Styling with StyleProvider\nDESCRIPTION: Demonstrates how to wrap application components with Ant Design's StyleProvider when using @rjsf/antd with Ant Design v5.  This allows users who want to use v5 styling to do so without causing a breaking change for existing users of @rjsf/antd with v4. StyleProvider is a transitive dependency of antd.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\n\nconst Component = () => {\n  return (\n    <StyleProvider>\n      <YourFormComponents />\n    </StyleProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: AJV Validation ErrorSchema\nDESCRIPTION: Shows an ErrorSchema produced by AJV validation, highlighting the structure of errors and the preservation of non-`stack` error information.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  __errors: [\n    {\n      message: 'should NOT be shorter than 3 characters',\n      name: 'minLength',\n      params: { limit: 3 },\n      property: '.password2',\n      schemaPath: '#/properties/password2/minLength',\n      stack: '.password2 should NOT be shorter than 3 characters',\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Format (JSX)\nDESCRIPTION: This example shows how to add custom formats to a React JSONSchema Form for validation purposes. It defines a schema with a custom format (`phone-us`) and an object `customFormats` that maps format names to regular expressions.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/validation.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n  type: 'string',\n  format: 'phone-us'\n};\n\nconst customFormats = {\n  'phone-us': /\\(?\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}$/\n};\n\nrender((\n  <Form schema={schema} \n        customFormats={customFormats}/>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites with yarn\nDESCRIPTION: This command installs the necessary prerequisites for using @rjsf/bootstrap-4, which includes react-bootstrap and @rjsf/core. These dependencies provide the core components and functionalities required for the Bootstrap 4 theme to work correctly with react-jsonschema-form.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/bootstrap-4/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-bootstrap @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Schema Validation with Draft-04 (TSX)\nDESCRIPTION: This snippet shows how to validate the form data against JSON Schema draft-04 in addition to the default draft-07. It imports the draft-04 meta schema and uses `customizeValidator` to configure the validator with the additional meta schema. Requires `@rjsf/core`, `@rjsf/utils`, and `@rjsf/validator-ajv6`.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst metaSchemaDraft04 = require('ajv/lib/refs/json-schema-draft-04.json');\n\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv6';\n\nconst validator = customizeValidator({\n  additionalMetaSchemas: [metaSchemaDraft04],\n});\n\nconst schema: RJSFSchema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  type: 'string',\n};\n\nreturn <Form schema={schema} validator={validator} />;\n\n```\n\n----------------------------------------\n\nTITLE: toErrorList result version 5\nDESCRIPTION: Shows the result of calling `toErrorList(errorSchema)` in version 5.  The `fieldPath` is now an array and each error now includes `property`, `message`, and `stack` fields.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// version 5 result\n[\n  ({ property: '.', message: 'error message 1', stack: '. error message 1' },\n  {\n    property: '.password',\n    message: 'passwords do not match',\n    stack: '.password passwords do not match',\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Releasing a new version\nDESCRIPTION: Commands to create a new release branch, update the version using lerna, and update peer dependencies. Requires git and lerna to be installed.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b rc5.100.10\ngit push\nnpx lerna version\nnpm run post-versioning\n```\n\n----------------------------------------\n\nTITLE: Localizing with Ajv-i18n in TSX\nDESCRIPTION: This code demonstrates how to localize error messages using the `ajv-i18n` library. It imports a locale (Italian in this example) and passes it as the second argument to `customizeValidator`.  This will translate the error messages.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/usage/validation.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport { customizeValidator } from '@rjsf/validator-ajv8';\nimport localizer from 'ajv-i18n';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst validator = customizeValidator({}, localizer.it);\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/antd package using npm\nDESCRIPTION: Installs the @rjsf/antd package using npm. This package provides the Ant Design theme, fields, and widgets for use with react-jsonschema-form, enabling the creation of forms with the Ant Design styling and components.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/antd/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rjsf/antd\n```\n\n----------------------------------------\n\nTITLE: ErrorSchema example version 4\nDESCRIPTION: Illustrates the structure of an ErrorSchema in version 4, used for custom validation errors. It shows how errors were formatted using the `fieldName` string.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/migration-guides/v5.x upgrade guide.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst errorSchema: ErrorSchema = {\n  __errors: ['error message 1'],\n  password: { __errors: 'passwords do not match' },\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing playground to GitHub Pages\nDESCRIPTION: Commands to publish the latest playground version to GitHub pages.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/docs/contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/playground\nnpm run publish-to-gh-pages\n```\n\n----------------------------------------\n\nTITLE: Installing @rjsf/chakra-ui and @rjsf/core\nDESCRIPTION: This command installs the core react-jsonschema-form library and the chakra-ui theme.  @rjsf/core provides the form rendering logic, and @rjsf/chakra-ui provides the Chakra UI-themed components.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/chakra-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rjsf/chakra-ui @rjsf/core\n```\n\n----------------------------------------\n\nTITLE: Defining an anyOf Schema in JSX\nDESCRIPTION: This code defines a JSON schema using the anyOf keyword. The schema is valid if at least one of the subschemas is valid. In this example, either 'lorem' must be present or both 'lorem' and 'ipsum' should be present as string properties in the form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/oneof.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n    type: \"object\",\n    anyOf: [\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n        },\n        required: [\"lorem\"],\n      },\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n          ipsum: {\n            type: \"string\",\n          },\n        }\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Starting local development server\nDESCRIPTION: Starts a local development server using npm.  This command allows developers to preview and test changes in real-time.  It typically watches for file changes and automatically reloads the browser.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Defining a oneOf Schema in JSX\nDESCRIPTION: This code defines a JSON schema using the oneOf keyword. The schema is valid if exactly one of the subschemas is valid. In this example, either 'lorem' or 'ipsum' must be present as a required string property in the form data.\nSOURCE: https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/docs/versioned_docs/version-3.2.1/usage/oneof.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst schema = {\n    type: \"object\",\n    oneOf: [\n      {\n        properties: {\n          lorem: {\n            type: \"string\",\n          },\n        },\n        required: [\"lorem\"],\n      },\n      {\n        properties: {\n          ipsum: {\n            type: \"string\",\n          },\n        },\n        required: [\"ipsum\"],\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById(\"app\"));\n```"
  }
]