[
  {
    "owner": "openwebinarsnet",
    "repo": "spring",
    "content": "TITLE: Adding a Custom Method with JPQL Query in Spring Data JPA\nDESCRIPTION: Example of defining a custom method with a JPQL query annotation to find employees by their department name, showcasing the @Query annotation usage.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface EmpleadoRepository extends JpaRepository<Empleado, Long> {\n    \n    public List<Empleado> findByNombre(String nombre);\n    \n    @Query(\"select e from Empleado e where e.departamento.nombre = ?1\")\n    public List<Empleado> findByNombreDepartamento(String nombre);\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Testing Secured Endpoint with User-Defined Roles\nDESCRIPTION: This test verifies access to a role-protected endpoint by using the @WithMockUser annotation with custom roles. It tests that a user with ROLE_ADMIN can access admin-only resources.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Test\n@WithMockUser(roles = \"ADMIN\")\npublic void testAdminPageWithAdminRole() throws Exception {\n\tmvc.perform(get(\"/admin\"))\n\t\t.andExpect(status().isOk());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Spring Boot Application\nDESCRIPTION: A Dockerfile that uses OpenJDK 8 as the base image and configures a Spring Boot application. It copies the JAR file into the container and sets up the entry point to run the application.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/070. Despliega tu aplicación Spring Boot con Docker/spring-docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nEXPOSE 8080\nADD target/spring-boot-0.0.1-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\", \"-Djava.security.egd=file:/dev/./urandom\", \"-jar\", \"/app.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Method for Finding Employees by Name in Spring Data JPA\nDESCRIPTION: Example of adding a finder method to the repository interface that allows searching for employees by name using Spring Data JPA's method naming convention.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface EmpleadoRepository extends JpaRepository<Empleado, Long> {\n    \n    public List<Empleado> findByNombre(String nombre);\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic DataSource Configuration in Spring with Java\nDESCRIPTION: Java configuration class demonstrating how to programmatically create and configure a DataSource bean using DriverManagerDataSource. This approach provides full control over DataSource properties in code rather than through external configuration.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/043. Configuración programática del origen de datos con Spring Data JPA/spring-data-jpa-datasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class ConfiguracionPorJava {\n\n\t@Bean\n\tpublic DataSource dataSource() {\n\t\tDriverManagerDataSource dataSource = new DriverManagerDataSource();\n\t\tdataSource.setDriverClassName(\"org.h2.Driver\");\n\t\tdataSource.setUrl(\"jdbc:h2:./openwebinars\");\n\t\tdataSource.setUsername(\"sa\");\n\t\tdataSource.setPassword(\"\");\n\t\treturn dataSource;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JPQL Queries with @Query Annotation in Spring Data JPA\nDESCRIPTION: This snippet demonstrates how to define custom JPQL queries using the @Query annotation in a Spring Data JPA repository. It includes examples of both SELECT and UPDATE queries with named parameters.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/037. Diferentes tipos de repositorios en Spring Data JPA/spring-data-jpa-repositories/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface StudentRepository extends JpaRepository<Student, Long> {\n\n    // JPQL queries\n    @Query(\"select s from Student s where s.firstName = ?1\")\n    List<Student> findByFirstNameJPQL(String firstName);\n    \n    @Query(\"select s from Student s where s.firstName = :firstName and s.lastName = :lastName\")\n    List<Student> findByFullNameJPQL(@Param(\"firstName\") String firstName, \n                                   @Param(\"lastName\") String lastName);\n    \n    @Query(\"select s from Student s where s.firstName like %:term% or s.lastName like %:term%\")\n    List<Student> findByAnyNameJPQL(@Param(\"term\") String term);\n    \n    @Query(\"select s from Student s where s.age >= :age\")\n    List<Student> findByAgeGreaterThanEqualJPQL(@Param(\"age\") int age);\n    \n    @Query(\"select s from Student s where s.firstName = :firstName order by s.id desc\")\n    List<Student> findByFirstNameOrderByIdDescJPQL(@Param(\"firstName\") String firstName);\n    \n    @Modifying\n    @Query(\"update Student s set s.firstName = :firstName where s.id = :id\")\n    int updateFirstNameById(@Param(\"firstName\") String firstName, @Param(\"id\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Services\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. Helps in scaffolding Angular application structure.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nng generate directive|pipe|service|class|guard|interface|enum|module\n```\n\n----------------------------------------\n\nTITLE: Adding QueryDSL Support in Spring Data JPA Repository\nDESCRIPTION: Example showing how to extend QuerydslPredicateExecutor to enable dynamic query creation using QueryDSL in a Spring Data JPA repository.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic interface EmpleadoRepository extends JpaRepository<Empleado, Long>,\n            CustomEmpleadoRepository, QuerydslPredicateExecutor<Empleado> {\n    \n    public List<Empleado> findByNombre(String nombre);\n    \n    @Query(\"select e from Empleado e where e.departamento.nombre = ?1\")\n    public List<Empleado> findByNombreDepartamento(String nombre);\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Spring Data JPA Entity with Named Stored Procedure Definitions\nDESCRIPTION: Java entity class that defines named stored procedures using the @NamedStoredProcedureQuery annotation. This demonstrates how to map entity-level stored procedure definitions that can be referenced from repository methods.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/040. Cómo invocar procedimientos almacenados con Spring Data JPA/spring-data-jpa-procedure/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage com.openwebinars.entidades;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.NamedStoredProcedureQueries;\nimport javax.persistence.NamedStoredProcedureQuery;\nimport javax.persistence.ParameterMode;\nimport javax.persistence.StoredProcedureParameter;\n\n@Entity\n@NamedStoredProcedureQueries({\n\t@NamedStoredProcedureQuery(\n\t\t\tname = \"Alumno.todosLosAlumnos\", \n\t\t\tprocedureName = \"TODOS_LOS_ALUMNOS\", \n\t\t\tresultClasses = Alumno.class),\n\t@NamedStoredProcedureQuery(\n\t\t\tname = \"Alumno.numAlumnosEnGrado\",\n\t\t\tprocedureName = \"NUM_ALUMNOS_EN_GRADO\",\n\t\t\tparameters = {\n\t\t\t\t\t@StoredProcedureParameter(mode = ParameterMode.IN, name = \"grado\", type=String.class)\n\t\t\t}\n\t)\n})\npublic class Alumno {\n\n\t@Id\n\tprivate String dni;\n\t\n\tprivate String firstName;\n\t\n\tprivate String lastName;\n\t\n\tprivate String email;\n\t\n\tprivate String gradoId;\n\n\tpublic Alumno() {\n\t\t\n\t}\n\n\tpublic Alumno(String dni, String firstName, String lastName, String email, String gradoId) {\n\t\tsuper();\n\t\tthis.dni = dni;\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t\tthis.email = email;\n\t\tthis.gradoId = gradoId;\n\t}\n\n\tpublic String getDni() {\n\t\treturn dni;\n\t}\n\n\tpublic void setDni(String dni) {\n\t\tthis.dni = dni;\n\t}\n\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\n\tpublic String getGradoId() {\n\t\treturn gradoId;\n\t}\n\n\tpublic void setGradoId(String gradoId) {\n\t\tthis.gradoId = gradoId;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((dni == null) ? 0 : dni.hashCode());\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tAlumno other = (Alumno) obj;\n\t\tif (dni == null) {\n\t\t\tif (other.dni != null)\n\t\t\t\treturn false;\n\t\t} else if (!dni.equals(other.dni))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Alumno [dni=\" + dni + \", firstName=\" + firstName + \", lastName=\" + lastName + \", email=\" + email\n\t\t\t\t+ \", gradoId=\" + gradoId + \"]\";\n\t}\n\t\n\t\n\t\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Container\nDESCRIPTION: Commands for building a Docker container from a Spring Boot application and pushing it to Docker Hub. This includes packaging the application, building the Docker image, and pushing it to a repository.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n\ndocker login\n\ndocker build -t alansastre/app1:1.0 .\n\ndocker push alansastre/app1:1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson JSON Views in Spring Boot Application\nDESCRIPTION: This snippet shows how to configure Jackson JSON Views in a Spring Boot application's main class. It sets up a custom ObjectMapper bean with Jackson2ObjectMapperBuilder to enable JSON View support.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/085. Cómo filtrar la salida de tu API REST según el rol de usuario de Spring Security/spring-security-jsonview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n    @Bean\n    public ObjectMapper objectMapper() {\n        return Jackson2ObjectMapperBuilder\n                .json()\n                .defaultViewInclusion(true)\n                .build();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using QueryDSL to Find Employees by Complex Criteria\nDESCRIPTION: Example of using QueryDSL predicates to create a complex query that finds employees by name and salary range, demonstrating the dynamic query building capabilities.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Buscar todos los empleados cuyo nombre sea \"Luis\" y cuyo sueldo\n// esté entre 20K y 40K\nQEmpleado empleado = QEmpleado.empleado;\nPredicate predicate = empleado.nombre.equalsIgnoreCase(\"Luis\")\n        .and(empleado.sueldo.between(20000.0, 40000.0));\n\nIterable<Empleado> result = empleadoRepo.findAll(predicate);\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Docker Container on EC2\nDESCRIPTION: Docker command to run a Spring Boot application container, mapping port 8080 to the host and setting it to always restart.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/073. Despliega tu aplicación Spring Boot en AWS EC2/spring-docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name spring-app -p 8080:8080 --restart always openwebinars/spring-app\n```\n\n----------------------------------------\n\nTITLE: Defining Jackson JSON View Classes for Role-Based Filtering\nDESCRIPTION: This code defines view interfaces for different user roles (User and Admin) to control property visibility in JSON serialization.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/085. Cómo filtrar la salida de tu API REST según el rol de usuario de Spring Security/spring-security-jsonview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class Views {\n    public interface User {}\n    public interface Admin extends User {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Query Methods in Spring Data JPA Repository\nDESCRIPTION: This example shows how to define derived query methods in a repository interface. Spring Data JPA will automatically generate query implementations based on the method names following specific naming conventions.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/037. Diferentes tipos de repositorios en Spring Data JPA/spring-data-jpa-repositories/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface StudentRepository extends JpaRepository<Student, Long> {\n\n    // Derived queries\n    List<Student> findByFirstName(String firstName);\n    \n    List<Student> findByFirstNameAndLastName(String firstName, String lastName);\n    \n    List<Student> findByFirstNameOrLastName(String term, String term2);\n    \n    List<Student> findByFirstNameContainingIgnoreCase(String term);\n    \n    List<Student> findByAgeGreaterThanEqual(int age);\n    \n    List<Student> findByFirstNameOrderByIdDesc(String firstName);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Cloud Config Server Properties in YAML\nDESCRIPTION: This YAML configuration sets up the server port, application name, and Git repository details for the Spring Cloud Config Server. It specifies the repository URI, username, and password for accessing configuration files.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/072. Externaliza la configuración de tu aplicación con Spring Boot/spring-cloud-config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 8888\n\nspring:\n  application:\n    name: config-server\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/openwebinars-net/curso-microservicios-config-repo\n          username: ${GITHUB_USER}\n          password: ${GITHUB_PASS}\n          default-label: master\n```\n\n----------------------------------------\n\nTITLE: Using JSR 250 Annotations for Method Security\nDESCRIPTION: Examples of using JSR 250 annotations (@RolesAllowed, @PermitAll, @DenyAll) to secure methods based on roles. Each annotation controls which users can access specific methods.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/065. Seguridad a nivel de método en tu aplicación con Spring Boot/spring-security-method/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class SecureService {\n\n    @RolesAllowed(\"ROLE_VIEWER\")\n    public String getHello() {\n        return \"Hello\";\n    }\n\n    @PermitAll\n    public String getHelloToEveryone() {\n        return \"Hello to everyone\";\n    }\n\n    @DenyAll\n    public String getSecretMessage() {\n        return \"Very secret message\";\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenBasedRememberMeServices in Spring Security\nDESCRIPTION: Implementation of the remember-me feature in Spring Security configuration using a simple token-based approach. This is the simplest implementation that uses cookies and requires setting a key for security.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/064. Implementa un mecanismo de Remember me en tu aplicación web con Spring Boot/spring-security-remember-me/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nhttp.rememberMe()\n    .key(\"openwebinars\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Configuration Server in Java\nDESCRIPTION: This snippet shows how to create the main class for a Spring Cloud Config Server. It uses the @EnableConfigServer annotation to enable the configuration server functionality.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/072. Externaliza la configuración de tu aplicación con Spring Boot/spring-cloud-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigServerApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(ConfigServerApplication.class, args);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple DataSource Profiles in Spring Boot YAML\nDESCRIPTION: YAML configuration demonstrating multiple environment profiles (dev and prod) for DataSource settings in Spring Boot. Shows how to specify different database connections based on active profile.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/043. Configuración programática del origen de datos con Spring Data JPA/spring-data-jpa-datasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  profiles:\n    active: dev\n\n---\n\nspring:\n  config:\n    activate:\n      on-profile: dev\n  datasource:\n    url: jdbc:h2:./openwebinars\n    username: sa\n    password: \n    driver-class-name: org.h2.Driver\n\n---\n\nspring:\n  config:\n    activate:\n      on-profile: prod\n  datasource:\n    url: jdbc:mysql://localhost:3306/openwebinars\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n```\n\n----------------------------------------\n\nTITLE: Testing Secured Endpoint Access with Authenticated User\nDESCRIPTION: This test verifies that an authenticated user can access a secured endpoint. It uses Spring Security's test support to simulate an authenticated user with specific authorities.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Test\n@WithMockUser\npublic void testSecuredPageAuthenticated() throws Exception {\n\tmvc.perform(get(\"/secured\"))\n\t\t.andExpect(status().isOk());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side TLS in Spring Application Properties\nDESCRIPTION: This snippet shows the server-side configuration for enabling TLS and mutual authentication in a Spring application. It specifies the server port, keystore details, and client authentication requirements.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nserver.port=8443\nserver.ssl.key-store=classpath:server.jks\nserver.ssl.key-store-password=password\nserver.ssl.key-alias=serverkey\nserver.ssl.key-password=password\nserver.ssl.enabled=true\nserver.ssl.client-auth=need\n```\n\n----------------------------------------\n\nTITLE: Spring Data JPA Repository with Stored Procedure Calls\nDESCRIPTION: Java interface that extends JpaRepository and defines methods to call stored procedures. It includes examples of using @Procedure annotation to map repository methods to database stored procedures.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/040. Cómo invocar procedimientos almacenados con Spring Data JPA/spring-data-jpa-procedure/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage com.openwebinars.repositorios;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.jpa.repository.query.Procedure;\nimport org.springframework.data.repository.query.Param;\n\nimport com.openwebinars.entidades.Alumno;\n\npublic interface AlumnoRepositorio extends JpaRepository<Alumno, String> {\n\n\t@Procedure(name = \"Alumno.todosLosAlumnos\")\n\tList<Alumno> findAllWithProcedure();\n\t\n\t@Procedure(name = \"Alumno.numAlumnosEnGrado\")\n\tint numAlumnosEnGrado(@Param(\"grado\") String grado);\n\t\n\t@Procedure(procedureName = \"PROCEDIMIENTO_ACTUALIZAR\")\n\tString actualizarAlumno(\n\t\t\t@Param(\"dni\") String dni, \n\t\t\t@Param(\"first\") String first, \n\t\t\t@Param(\"last\") String last, \n\t\t\t@Param(\"email\") String email, \n\t\t\t@Param(\"grado\") String grado);\n\t\n\t@Procedure\n\tString PROCEDIMIENTO_ACTUALIZAR(String dni, String first, String last, String email, String grado);\n\t\n\n\t\n\t@Query(value = \"SELECT TODOS_LOS_ALUMNOS()\", nativeQuery = true)\n\tList<Alumno> findAllWithFunction();\n\t\n\t@Query(value = \"SELECT NUM_ALUMNOS_EN_GRADO(?1)\", nativeQuery = true)\n\tint countWithFunction(String grado);\n\t\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resilience4j Timeout Properties in application.yml\nDESCRIPTION: This YAML configuration snippet sets up the timeout properties for resilience4j in a Spring Boot application. It defines a timeout of 2 seconds and enables the metrics for monitoring.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/018. Implementa timeout en las peticiones de tu API REST/spring-timeout/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresilience4j:\n  timelimiter:\n    instances:\n      timeout:\n        timeout-duration: 2s\n  circuitbreaker:\n    instances:\n      timeout:\n        sliding-window-size: 10\n        failure-rate-threshold: 50\n        wait-duration-in-open-state: 10s\n        permitted-number-of-calls-in-half-open-state: 3\n        automatic-transition-from-open-to-half-open-enabled: true\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: '*'\n  endpoint:\n    health:\n      show-details: always\n```\n\n----------------------------------------\n\nTITLE: Creating Stored Procedures in H2 Database\nDESCRIPTION: SQL script for creating basic stored procedures in H2 database. The procedures include simple count queries and operations with parameters.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/040. Cómo invocar procedimientos almacenados con Spring Data JPA/spring-data-jpa-procedure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE ALIAS TODOS_LOS_ALUMNOS FOR \"com.openwebinars.procedimientos.AlumnoProcedimiento.todosLosAlumnos\";\n\nCREATE ALIAS NUM_ALUMNOS_EN_GRADO FOR \"com.openwebinars.procedimientos.AlumnoProcedimiento.numAlumnosEnGrado\";\n\nCREATE ALIAS PROCEDIMIENTO_ACTUALIZAR FOR \"com.openwebinars.procedimientos.AlumnoProcedimiento.procedimientoActualizar\";\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller with Jackson JSON Views\nDESCRIPTION: This code shows a REST controller implementation using @JsonView annotations to specify which view should be used for serialization based on the user's role.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/085. Cómo filtrar la salida de tu API REST según el rol de usuario de Spring Security/spring-security-jsonview/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@RestController\npublic class ProductController {\n\n    @GetMapping(\"/product/{id}\")\n    @JsonView(Views.User.class)\n    public Product getForUser(@PathVariable long id) {\n        return findProduct(id);\n    }\n\n    @GetMapping(\"/admin/product/{id}\")\n    @JsonView(Views.Admin.class)\n    public Product getForAdmin(@PathVariable long id) {\n        return findProduct(id);\n    }\n\n    private Product findProduct(long id) {\n        // ... logic to find and return a product\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Repository Interface in Spring Data JPA\nDESCRIPTION: Example of creating a custom repository interface that extends JpaRepository to provide basic CRUD operations and pagination for an Employee entity.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface EmpleadoRepository extends JpaRepository<Empleado, Long> {\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Spring Boot Application\nDESCRIPTION: Command to build a Docker image for a Spring Boot application. It tags the image with the name 'openwebinars/spring-boot'.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/070. Despliega tu aplicación Spring Boot con Docker/spring-docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t openwebinars/spring-boot .\n```\n\n----------------------------------------\n\nTITLE: Testing Form-Based Authentication Success\nDESCRIPTION: This test verifies successful form-based authentication by performing a POST request to the login endpoint with valid credentials and checking for a successful redirect to the home page.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testLogin() throws Exception {\n\tmvc.perform(post(\"/login\")\n\t\t.param(\"username\", \"user\")\n\t\t.param(\"password\", \"password\")\n\t\t.with(csrf()))\n\t\t.andExpect(status().is3xxRedirection())\n\t\t.andExpect(redirectedUrl(\"/\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PersistentTokenBasedRememberMeServices in Spring Security\nDESCRIPTION: Advanced implementation of Spring Security's remember-me feature using persistent token storage with a database. This approach ensures higher security by storing tokens in a database and requiring a JdbcTokenRepository implementation.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/064. Implementa un mecanismo de Remember me en tu aplicación web con Spring Boot/spring-security-remember-me/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nhttp.rememberMe()\n    .tokenRepository(persistentTokenRepository())\n    .tokenValiditySeconds(securityProperties.getRememberMeTokenValiditySeconds());\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Kubernetes\nDESCRIPTION: Commands for deploying the application to Kubernetes using a deployment YAML file. It includes applying the deployment, checking the Minikube IP, getting pod information, and viewing pod logs.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n\nminikube ip\n\nkubectl get pods \n\nkubectl logs app1\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout with @TimeLimiter in Spring Boot Service\nDESCRIPTION: This snippet demonstrates how to use the @TimeLimiter annotation from resilience4j to implement a timeout in a Spring Boot service method. It sets a 2-second timeout for the method execution.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/018. Implementa timeout en las peticiones de tu API REST/spring-timeout/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class TimeoutService {\n\n    @TimeLimiter(name = \"timeout\", fallbackMethod = \"fallback\")\n    public CompletableFuture<String> timeout() {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"Hello World\";\n        });\n    }\n\n    private CompletableFuture<String> fallback(Throwable t) {\n        return CompletableFuture.supplyAsync(() -> \"Fallback\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Spring Data JPA Entity Association Annotations\nDESCRIPTION: This snippet lists the four main annotation types used in Spring Data JPA to define relationships between entities. These annotations allow developers to specify the cardinality and direction of associations in Java persistence models.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/013. Modelos de datos con asociaciones con Spring Data JPA/spring-data-jpa-asociaciones/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@OneToOne\n@OneToMany\n@ManyToOne\n@ManyToMany\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Environment\nDESCRIPTION: Commands to start and configure the Minikube environment. This includes checking the Minikube version, listing addons, starting Minikube with a specific Kubernetes version, and launching the Kubernetes dashboard.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube version\n\nminikube addons list \n\nminikube start \n\nminikube start --kubernetes-version=v1.24.3\n\nminikube dashboard\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JPA Repository Interface in Spring Data\nDESCRIPTION: This snippet demonstrates how to create a basic repository interface by extending JpaRepository. It provides built-in methods for CRUD operations on a Student entity with Long as the ID type.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/037. Diferentes tipos de repositorios en Spring Data JPA/spring-data-jpa-repositories/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface StudentRepository extends JpaRepository<Student, Long> {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Spring Boot Application\nDESCRIPTION: Command to run a Docker container from the Spring Boot image. It publishes port 8080 from the container to the host and runs in detached mode.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/070. Despliega tu aplicación Spring Boot con Docker/spring-docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 8080:8080 -d openwebinars/spring-boot\n```\n\n----------------------------------------\n\nTITLE: Generating Test Certificates for TLS Configuration\nDESCRIPTION: This bash script generates self-signed certificates for testing TLS configuration. It creates a root CA, server and client certificates, and packages them into keystores and truststores for use in the Spring application.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Generate Root CA\nopenssl req -x509 -sha256 -days 3650 -newkey rsa:4096 -keyout rootCA.key -out rootCA.crt\n\n# Generate Server Certificate\nopenssl req -new -newkey rsa:4096 -keyout server.key -out server.csr\nopenssl x509 -req -sha256 -days 365 -in server.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out server.crt\n\n# Generate Client Certificate\nopenssl req -new -newkey rsa:4096 -keyout client.key -out client.csr\nopenssl x509 -req -sha256 -days 365 -in client.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out client.crt\n\n# Create Java Keystores\nkeytool -import -trustcacerts -noprompt -alias ca -ext san=dns:localhost,ip:127.0.0.1 -file rootCA.crt -keystore truststore.jks\nkeytool -import -trustcacerts -noprompt -alias server -ext san=dns:localhost,ip:127.0.0.1 -file server.crt -keystore truststore.jks\nopenssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -name serverkey\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.jks -deststoretype JKS\n\n# Create Client Keystore\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.p12 -name clientkey\nkeytool -importkeystore -srckeystore client.p12 -srcstoretype pkcs12 -destkeystore client.jks -deststoretype JKS\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Repository in Spring Data JPA\nDESCRIPTION: Example implementation of a custom repository interface that uses EntityManager directly to perform a complex query for finding an employee with the maximum salary.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomEmpleadoRepositoryImpl implements CustomEmpleadoRepository {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n    \n    @Override\n    public Empleado findEmpleadoAndSueldoMax() {\n        return entityManager.createQuery(\n                \"select e from Empleado e where e.sueldo = (select max(e2.sueldo) from Empleado e2)\", \n                Empleado.class).getSingleResult();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource in application.yml for Spring Data JPA\nDESCRIPTION: YAML configuration for setting up a DataSource with connection parameters for H2 database in a Spring application. It includes settings for the JDBC URL, username, password, and driver class name.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/043. Configuración programática del origen de datos con Spring Data JPA/spring-data-jpa-datasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    url: jdbc:h2:./openwebinars\n    username: sa\n    password: \n    driver-class-name: org.h2.Driver\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Tools\nDESCRIPTION: Commands for installing essential Kubernetes tools like kubectl and Minikube. It also includes a command for upgrading Minikube on Windows using Chocolatey.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchoco upgrade minikube\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Repository Interfaces in Spring Data JPA\nDESCRIPTION: Example showing how to extend both JpaRepository and a custom repository interface to combine standard CRUD operations with custom functionality.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface EmpleadoRepository extends JpaRepository<Empleado, Long>,\n            CustomEmpleadoRepository {\n    \n    public List<Empleado> findByNombre(String nombre);\n    \n    @Query(\"select e from Empleado e where e.departamento.nombre = ?1\")\n    public List<Empleado> findByNombreDepartamento(String nombre);\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side TLS in Spring Application Properties\nDESCRIPTION: This snippet demonstrates the client-side configuration for TLS in a Spring application. It includes settings for the trust store and key store, enabling the client to authenticate with the server and verify the server's identity.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nserver.ssl.trust-store=classpath:client-truststore.jks\nserver.ssl.trust-store-password=password\n\nserver.ssl.key-store=classpath:client-keystore.jks\nserver.ssl.key-store-password=password\nserver.ssl.key-password=password\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Runs the Angular development server and provides the local URL for accessing the application. The server automatically reloads when source files are changed.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Enabling JSR 250 Method-Level Security in Spring Configuration\nDESCRIPTION: Configuration class that enables JSR 250 annotations for method-level security in a Spring application. This allows the use of annotations like @RolesAllowed to secure methods.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/065. Seguridad a nivel de método en tu aplicación con Spring Boot/spring-security-method/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableGlobalMethodSecurity(jsr250Enabled = true)\npublic class MethodSecurityConfig {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Access Denied for Insufficient Permissions\nDESCRIPTION: This test verifies that a user with insufficient permissions receives an access denied error. It simulates a user with ROLE_USER trying to access an admin-only resource.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Test\n@WithMockUser(roles = \"USER\")\npublic void testAdminPageWithUserRole() throws Exception {\n\tmvc.perform(get(\"/admin\"))\n\t\t.andExpect(status().isForbidden());\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes the project's unit tests using Karma as the test runner. This command is used for verifying the correctness of individual components and services.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Applying Jackson JSON Views to Model Class Properties\nDESCRIPTION: This snippet demonstrates how to apply JSON View annotations to a model class (Product) to control which properties are visible to different user roles.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/085. Cómo filtrar la salida de tu API REST según el rol de usuario de Spring Security/spring-security-jsonview/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class Product {\n\n    @JsonView(Views.User.class)\n    private Long id;\n\n    @JsonView(Views.User.class)\n    private String name;\n\n    @JsonView(Views.Admin.class)\n    private float price;\n\n    // getters, setters\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Schema Generation Properties\nDESCRIPTION: Hibernate-specific configuration for database schema generation using ddl-auto property and SQL import scripts.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/045. Cómo generar tu esquema de base de datos con Spring Data JPA/spring-data-jpa-schemagen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nspring.jpa.hibernate.ddl-auto=create\nimport.sql\nspring.jpa.properties.hibernate.hbm2ddl.import_files=import_employees.sql\n```\n\n----------------------------------------\n\nTITLE: Markdown Header - Spring Cloud Stream Processor Setup\nDESCRIPTION: Title header defining the project scope for a Spring Cloud Stream processor implementation with Apache Kafka\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/100. Spring Cloud Stream/spring-cloud-stream-processor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Cloud Stream Processor con Apache Kafka\n```\n\n----------------------------------------\n\nTITLE: Creating PersistentTokenRepository Bean for Remember-Me Service\nDESCRIPTION: Configuration method to set up a JdbcTokenRepository bean for persistent token storage. This method configures the data source for token storage and automatically creates the required database table on application startup.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/064. Implementa un mecanismo de Remember me en tu aplicación web con Spring Boot/spring-security-remember-me/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic PersistentTokenRepository persistentTokenRepository() {\n    JdbcTokenRepositoryImpl tokenRepositoryImpl = new JdbcTokenRepositoryImpl();\n    tokenRepositoryImpl.setDataSource(dataSource);\n    tokenRepositoryImpl.setCreateTableOnStartup(true);\n    return tokenRepositoryImpl;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Secured Endpoint Access with Anonymous User\nDESCRIPTION: This test verifies that an anonymous user cannot access a secured endpoint. It uses MockMvc to perform a GET request and expects a redirect to the login page.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testSecuredPageAnonymous() throws Exception {\n\tmvc.perform(get(\"/secured\"))\n\t\t.andExpect(status().is3xxRedirection())\n\t\t.andExpect(redirectedUrlPattern(\"**/login\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SCDF in Windows PowerShell\nDESCRIPTION: Sets environment variables for SCDF and Skipper versions, as well as mount paths for Docker. These variables are used in the Docker Compose setup.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/101. Spring Cloud Data Flow/batchsamples/billsetuptask/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:DATAFLOW_VERSION=\"2.9.2\"\n$Env:SKIPPER_VERSION=\"2.8.2\"\n$Env:HOST_MOUNT_PATH=\"~/.m2\"\n$Env:DOCKER_MOUNT_PATH=\"/home/cnb/.m2\"\n```\n\n----------------------------------------\n\nTITLE: Java Class for H2 Stored Procedures\nDESCRIPTION: Java class containing static methods that serve as H2 database stored procedures. These methods perform operations like retrieving all students, counting students in a grade, and updating student information.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/040. Cómo invocar procedimientos almacenados con Spring Data JPA/spring-data-jpa-procedure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.openwebinars.procedimientos;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * Clase que recoge los métodos que implementan procedimientos en H2\n * @author OpenWebinars\n *\n */\npublic class AlumnoProcedimiento {\n\n\t/**\n\t * Método estático que devuelve un ResultSet con todos los alumnos de la base de datos\n\t * @param conn\n\t * @return\n\t * @throws SQLException\n\t */\n\tpublic static ResultSet todosLosAlumnos(Connection conn) throws SQLException {\n\t\tPreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM ALUMNO\");\n\t\tResultSet rs = pstmt.executeQuery();\n\t\treturn rs;\n\t\t\n\t}\n\t\n\t/**\n\t * Método estático que devuelve el número de alumnos dado un código de grado\n\t * @param conn\n\t * @param codigoGrado\n\t * @return\n\t * @throws SQLException\n\t */\n\tpublic static int numAlumnosEnGrado(Connection conn, String codigoGrado) throws SQLException {\n\t\tPreparedStatement pstmt = conn.prepareStatement(\n\t\t\t\t\"SELECT COUNT(*) AS TOTAL FROM ALUMNO WHERE GRADO_ID = ?\");\n\t\tpstmt.setString(1, codigoGrado);\n\t\tResultSet rs = pstmt.executeQuery();\n\t\tif (rs.next()) {\n\t\t\treturn rs.getInt(1);\n\t\t} else\n\t\t\treturn 0;\n\t\t\n\t}\n\t\n\t/**\n\t * Método que inserta una fila en la base de datos, y nos devuelve \"OK\" si todo ha ido bien\n\t * @param conn\n\t * @param dni\n\t * @param first\n\t * @param last\n\t * @param email\n\t * @param grado\n\t * @return\n\t * @throws SQLException\n\t */\n\tpublic static String procedimientoActualizar(Connection conn, \n\t\t\tString dni, String first, String last, String email, String grado) throws SQLException {\n\t\tPreparedStatement pstmt = conn.prepareStatement(\n\t\t\t\t\"UPDATE ALUMNO SET FIRST_NAME=?, LAST_NAME=?, EMAIL=?, GRADO_ID=? WHERE DNI=?\");\n\t\tpstmt.setString(1, first);\n\t\tpstmt.setString(2, last);\n\t\tpstmt.setString(3, email);\n\t\tpstmt.setString(4, grado);\n\t\tpstmt.setString(5, dni);\n\t\tint result = pstmt.executeUpdate();\n\t\treturn (result == 1) ? \"OK\" : \"ERROR\";\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Statement for Creating Remember-Me Token Table\nDESCRIPTION: SQL query used by Spring Security to create the persistent_logins table for storing remember-me tokens. This table maintains the username, series, token, and last used timestamp for persistent remember-me authentication.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/064. Implementa un mecanismo de Remember me en tu aplicación web con Spring Boot/spring-security-remember-me/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncreate table persistent_logins (\n    username varchar(64) not null,\n    series varchar(64) primary key,\n    token varchar(64) not null,\n    last_used timestamp not null\n);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up SCDF Docker Environment\nDESCRIPTION: Stops and removes all SCDF-related Docker containers, including the main services and individual application containers.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/101. Spring Cloud Data Flow/batchsamples/billsetuptask/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n\ndocker rm dataflow-app-import-task\ndocker rm dataflow-app-import-stream\ndocker rm dataflow-server\ndocker rm dataflow-mysql\ndocker rm dataflow-kafka-zookeeper\ndocker rm dataflow-kafka\ndocker rm skipper\n```\n\n----------------------------------------\n\nTITLE: Defining Gradle Dependencies for Spring WebFlux and MongoDB\nDESCRIPTION: This snippet shows the Gradle dependencies required for a Spring WebFlux project with MongoDB and Kotlin. It includes Spring Boot, WebFlux, MongoDB Reactive, and Kotlin-specific dependencies.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/090. Implementa una API Reactiva con Spring WebFlux y MongoDB con Kotlin/spring-webflux-mongo-reactive-kotlin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencies {\n\timplementation(\"org.springframework.boot:spring-boot-starter-webflux\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-data-mongodb-reactive\")\n\timplementation(\"com.fasterxml.jackson.module:jackson-module-kotlin\")\n\timplementation(\"io.projectreactor.kotlin:reactor-kotlin-extensions\")\n\timplementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n\timplementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n\timplementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-reactor\")\n\ttestImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n\ttestImplementation(\"io.projectreactor:reactor-test\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Full Stack Project Structure with Spring Boot and Vue.js\nDESCRIPTION: This Markdown snippet outlines the basic structure of a full stack project using Spring Boot for the backend and Vue.js for the frontend. It provides a high-level overview of the project components.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Full Stack con Spring + Vue\n\n* Backend con Spring Boot\n* Frontend con Vue\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Provides access to Angular CLI help documentation and directs to the official Angular CLI overview and command reference page.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Services\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This command simplifies the creation of new Angular artifacts.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Exchanging Authorization Code for JWT Token\nDESCRIPTION: HTTP request using httpie to exchange an authorization code for a JWT token. The request includes the grant type, authorization code, client ID, client secret, and redirect URI.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/094. Implementa la seguridad de tu API REST con Spring Boot, OAuth2 y Okta/spring-oauth-okta/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp -f https://dev-xxxxxx.okta.com/oauth2/default/v1/token \\\ngrant_type=authorization_code \\\ncode=KB8ru-UEndXHnkmc7vPxDutOAfcjSPbiADBPvTDbCzQ \\\nclient_id=0oa6npgtqpbuHrcoX5d7 \\\nclient_secret=4Vu5BPze3E5UdS41u6vJ1z1H6qU2EGTpiHhuLcmy \\\nredirect_uri=https://oidcdebugger.com/debug\n```\n\n----------------------------------------\n\nTITLE: Listing Testing Dependencies for Spring Boot\nDESCRIPTION: This snippet lists the key components included in the spring-boot-starter-test dependency for unit testing in Spring Boot applications. It specifically mentions JUnit 5 and Mockito as the primary testing frameworks.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/011. Testing unitario de tu aplicación con Spring Boot, Junit y Mockito/spring-testing-unitario/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring: Testing unitario\n\nTesting unitario con spring-boot-starter-test\n\n* JUnit 5\n* Mockito\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production with npm run build\nDESCRIPTION: Creates a production-ready build of the React application in the 'build' folder. The command bundles React in production mode, optimizes for performance, and minifies the code with filenames that include hashes for cache busting.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Keycloak Docker Setup and Configuration Steps\nDESCRIPTION: A list of steps to set up Keycloak using Docker, create a realm, client, and user for Spring Security integration. It includes accessing the Keycloak admin console and configuring essential components.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/092. Implementa una API REST segura con Spring Boot y Keycloak/spring-security-keycloak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPasos:\n\nhttps://www.keycloak.org/getting-started/getting-started-docker\n\n1. Crear contenedor docker con keycloak\n2. Entrar en localhost:8090\n3. Crear realm: realm1\n4. Crear cliente: (client1) añadir url de redirección http://localhost:8080/*\n5. Crear usuario: user1\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Repository Interface in Spring Data JPA\nDESCRIPTION: Example of creating a custom repository interface for implementing methods that can't be defined using Spring Data's query methods or JPA query language.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/038. Customiza tus repositorios con Spring Data JPA/spring-data-jpa-custom-repositories/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface CustomEmpleadoRepository {\n    \n    public Empleado findEmpleadoAndSueldoMax();\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Keycloak Docker Setup Command with Spring Security\nDESCRIPTION: A URL reference to the Keycloak Docker setup guide, followed by step-by-step instructions for configuring Keycloak for Spring Security integration, including realm creation, client setup, and user management.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/093. Implementa la seguridad de tu API REST con Spring Boot, OAuth2 y Keycloak/spring-security-oauth-keycloak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://www.keycloak.org/getting-started/getting-started-docker\n\n1. Crear contenedor docker con keycloak\n2. Entrar en localhost:8090\n3. Crear realm\n4. Crear cliente: \n   * añadir url de redirección http://localhost:8080/*\n   * Client authentication: ON\n5. Crear usuario\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Data JPA Schema Initialization\nDESCRIPTION: Spring Data JPA configuration for database schema initialization using SQL scripts with platform-specific file naming conventions and custom locations.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/045. Cómo generar tu esquema de base de datos con Spring Data JPA/spring-data-jpa-schemagen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.sql.init.mode=always\nspring.jpa.defer-datasource-initialization=true\n\nschema.sql\ndata.sql\n\nschema-h2.sql\ndata-h2.sql\n\nschema-mysql.sql\ndata-mysql.sql\n\nspring.sql.init.schema-locations=classpath:db/schema-mysql.sql\nspring.sql.init.data-locations=classpath:db/data-mysql.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring JPA Schema Generation using persistence.xml\nDESCRIPTION: JPA configuration approach for database schema generation using persistence.xml file with properties for loading SQL scripts.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/045. Cómo generar tu esquema de base de datos con Spring Data JPA/spring-data-jpa-schemagen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\njavax.persistence.sql-load-script-source\njakarta.persistence.sql-load-script-source\n```\n\n----------------------------------------\n\nTITLE: Project Structure Documentation in Markdown\nDESCRIPTION: A markdown document that defines the technology stack for a full stack application. It specifies Spring Boot for the backend and Angular for the frontend components.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Full Stack con Spring + Angular\n\n* Backend con Spring Boot\n* Frontend con Angular\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Handler for Spring Cloud Function in Java\nDESCRIPTION: This snippet specifies the fully qualified class name for the AWS Lambda handler when using Spring Cloud Function. It uses the FunctionInvoker class from the Spring Cloud Function AWS adapter package.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/102. Spring Cloud Function/spring-cloud-function/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Amazon Linux 2\nDESCRIPTION: Commands to update the system, install Docker, and configure it to start on boot for an Amazon Linux 2 EC2 instance.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/073. Despliega tu aplicación Spring Boot en AWS EC2/spring-docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum update -y\nsudo amazon-linux-extras install docker\nsudo service docker start\nsudo usermod -a -G docker ec2-user\nsudo chkconfig docker on\n```\n\n----------------------------------------\n\nTITLE: Generating Server1 Keystore and Certificate using Keytool\nDESCRIPTION: Commands to generate a keystore for server1 with an RSA key pair and export the certificate. The keystore is created in PKCS12 format with a validity of 365 days.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkeypair -alias server1 -keyalg RSA -keysize 2048 -dname \"CN=server1\" -validity 365 -storetype PKCS12 -keystore s1_ks.p12 -storepass admin123\n\nkeytool -exportcert -alias server1 -storetype PKCS12 -keystore s1_ks.p12 -file s1_cert.cer -rfc -storepass admin123\n```\n\n----------------------------------------\n\nTITLE: Defining Spring Data JPA Repository Testing Project in Markdown\nDESCRIPTION: This snippet defines the project title and provides a brief description of the content, focusing on testing Spring Data JPA repositories.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/030. Testea la persistencia de tu aplicación con Spring Boot/spring-data-jpa-testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Spring Testing de repositorios\n\nTesting de repositorios Spring Data JPA.\n```\n\n----------------------------------------\n\nTITLE: Generating Server2 Keystore and Certificate using Keytool\nDESCRIPTION: Commands to generate a keystore for server2 with an RSA key pair and export the certificate. The keystore is created in PKCS12 format with a validity of 365 days.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkeypair -alias server2 -keyalg RSA -keysize 2048 -dname \"CN=server2\" -validity 365 -storetype PKCS12 -keystore s2_ks.p12 -storepass admin123\n\nkeytool -exportcert -alias server2 -storetype PKCS12 -keystore s2_ks.p12 -file s2_cert.cer -rfc -storepass admin123\n```\n\n----------------------------------------\n\nTITLE: Importing Server2 Certificate into Server1 Truststore\nDESCRIPTION: Command to import the server2 certificate into the server1 truststore. This enables server1 to trust connections from server2 during mutual TLS handshake.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -importcert -alias server2 -storetype PKCS12 -keystore s1_ts.p12 -file s2_cert.cer -rfc -storepass admin123\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm start\nDESCRIPTION: Starts the React application in development mode, launching a local server that enables hot reloading. The app becomes accessible through a web browser at localhost:3000.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing Server1 Certificate into Server2 Truststore\nDESCRIPTION: Command to import the server1 certificate into the server2 truststore. This enables server2 to trust connections from server1 during mutual TLS handshake.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -importcert -alias server1 -storetype PKCS12 -keystore s2_ts.p12 -file s1_cert.cer -rfc -storepass admin123\n```\n\n----------------------------------------\n\nTITLE: Spring API Rate Limit Project Header\nDESCRIPTION: Markdown header indicating the project focus on implementing API rate limiting with Bucket4j in Spring applications\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/051. Implementa un rate-limit en tu API REST con Spring Boot/spring-rest-apirate-limit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring API Rate Limit con bucket4j\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security Test\nDESCRIPTION: This code snippet demonstrates how to import and set up the Spring Security Test module in a Spring Boot test class. It shows the required annotations to configure the test environment for security testing.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/066. Utiliza Spring Security en los test de tu aplicación con Spring Boot/spring-security-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class SecurityTest {\n\n\t@Autowired\n\tprivate MockMvc mvc;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Spring REST Validation Project Title\nDESCRIPTION: This markdown snippet outlines the project title and main focus, which is validating REST controllers using spring-boot-starter-validation in a Spring Boot application.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/007. Validación de datos en tu aplicación web con Spring Boot/spring-rest-validation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring: Validación REST\n\n* Validación con spring-boot-starter-validation en controladores REST\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes Resources\nDESCRIPTION: Commands for cleaning up Kubernetes resources, including two options for deleting services and deployments, as well as stopping and deleting the Minikube container.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete service app1\nkubectl delete deployment app1\n\nkubectl delete -f deployment.yaml\n\nminikube stop\n\nminikube delete\n```\n\n----------------------------------------\n\nTITLE: Working with Kubernetes ConfigMaps\nDESCRIPTION: Commands for creating and managing Kubernetes ConfigMaps. This includes creating a ConfigMap from a YAML file, listing ConfigMaps, and deleting a specific ConfigMap.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f deployment-config.yaml\n\nkubectl get configmaps\n\nkubectl delete configmap app1\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project for production. The compiled files are stored in the 'dist/' directory.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Managing Kubernetes Services\nDESCRIPTION: Commands for managing Kubernetes services, including getting service information and exposing the service through Minikube.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/099. Despliega tus microservicios con Spring Cloud Kubernetes/spring-cloud-kubernetes/app1/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get services\n\nminikube service app1\n```\n\n----------------------------------------\n\nTITLE: Listing Spring Ecosystem Components in Markdown\nDESCRIPTION: A markdown list highlighting three core components of the Spring ecosystem: Spring Framework, Spring Boot, and Spring MVC.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/022. Spring vs. Spring Boot vs. Spring MVC/spring-vs-springboot-vs-springmvc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Ecosistema Spring\n\n* Spring Framework\n* Spring Boot\n* Spring MVC\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Launches the Angular development server and provides the local URL for accessing the application. The server automatically reloads when source files are changed.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Compiles the Angular project for production. The compiled files are output to the 'dist/' directory, ready for deployment.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Spring Data MongoDB Reactive\nDESCRIPTION: A markdown heading that indicates the topic of the document is about reactive repositories with Spring Data MongoDB Reactive.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/056. Implementa repositorios reactivos con Spring Data MongoDB Reactive/spring-data-mongodb-reactive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Repositorios reactivos con Spring Data MongoDB Reactive\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for Local Testing on Windows\nDESCRIPTION: Instructions for modifying the hosts file on Windows to map server1 and server2 hostnames to the localhost IP address, allowing the applications to resolve each other by hostname.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Windows\\System32\\drivers\\etc\\hosts\n\n127.0.0.1 server1 server2\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite with npm test\nDESCRIPTION: Launches the test runner in interactive watch mode, which automatically reruns tests when code changes are detected. This command is used for testing components and functionality in a React application.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Registering with Okta CLI\nDESCRIPTION: Command to register with Okta using the Okta CLI tool. This is part of Option 1 for Okta integration.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/094. Implementa la seguridad de tu API REST con Spring Boot, OAuth2 y Okta/spring-oauth-okta/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ okta register\n```\n\n----------------------------------------\n\nTITLE: Spring Event Class Reference\nDESCRIPTION: Reference to the Spring ApplicationEvent class that is used for creating custom events in Spring applications\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/023. Introducción a la programación dirigida por eventos con Spring/spring-events/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\norg.springframework.context.ApplicationEvent\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Project - Latest Version\nDESCRIPTION: Initializes a new Vue.js project using the latest version\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm init vue@latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Spring and Thymeleaf Email Functionality\nDESCRIPTION: Markdown heading that describes the topic of sending emails using Spring framework with Thymeleaf templating engine.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/058. Cómo enviar un email basado en una plantilla de Thymeleaf con Spring Boot/spring-thymeleaf-email/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring + Thymeleaf: envío de emails\n```\n\n----------------------------------------\n\nTITLE: Markdown Spring Pagination Title\nDESCRIPTION: Markdown header defining the topic of Spring REST pagination implementation using Pageable.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/009. Paginación de resultados en tu API REST con Spring Boot/spring-pagination-rest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring: Paginación de resultados (REST)\n\n* Paginación con Pageable en aplicación REST\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for Local Testing on Linux/MacOS\nDESCRIPTION: Instructions for modifying the hosts file on Linux/MacOS systems to map server1 and server2 hostnames to the localhost IP address, allowing the applications to resolve each other by hostname.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/096. Autenticación X.509 con Spring Security/spring-mtls/server1/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Spring Data JPA QueryDSL Markdown Header\nDESCRIPTION: Markdown header identifying the tutorial topic about Spring Data JPA queries using QueryDSL\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/080. Consultas usando QueryDSL con Spring Data JPA/spring-data-jpa-querydsl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Data JPA: consultas con QueryDSL\n```\n\n----------------------------------------\n\nTITLE: Displaying Spring Cloud Microservices Architecture Title\nDESCRIPTION: This markdown snippet displays the main title of the document, introducing Spring Cloud and its relation to microservices architecture.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/075. Mejora tus microservicios con Spring Cloud usando Resilience4j/spring-cloud/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Cloud: arquitectura de microservicios\n```\n\n----------------------------------------\n\nTITLE: Markdown Header - Spring Reactive Security\nDESCRIPTION: Main header defining the project scope as reactive security implementation in Spring framework\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/054. Spring Security Reactive/spring-security-reactive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Seguridad reactiva en Spring\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI Globally\nDESCRIPTION: Installs the Vue CLI tool globally for creating and managing Vue.js projects\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @vue/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Initial setup command to install all project dependencies defined in package.json\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Starts the development server with hot-reload capability for local development\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: MongoDB Repository Query Title\nDESCRIPTION: A README file describing MongoDB query functionality in Spring Data repositories\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/017. Consultas con Spring Data MongoDB/spring-data-mongodb-consultas/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Consultas Spring Data MongoDB\\n\\nConsultas en repositorios con spring-boot-starter-data-mongodb\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Compiles and minifies the project for production deployment\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Linter\nDESCRIPTION: Executes the linter to check and fix code style issues\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Spring Data Redis Header\nDESCRIPTION: Project header and basic description for Spring Data Redis implementation with spring-boot-starter-data-redis\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/015. Introducción a Spring Data Redis/spring-data-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Data Redis\n\nCreación y guardado de entidades en Redis con spring-boot-starter-data-redis\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Executes end-to-end tests for the Angular project. Requires a package implementing end-to-end testing capabilities to be added first.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/071. Despliega con Docker Compose tu aplicación Spring Boot + Angular + PostgreSQL/spring-docker-compose/frontend/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Building Spring Cloud Task Application\nDESCRIPTION: Cleans the project and installs the JAR file in the local Maven repository.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/101. Spring Cloud Data Flow/batchsamples/billsetuptask/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Spring Data JPA QueryDSL Project Header\nDESCRIPTION: Project title in markdown format indicating the focus on Spring Data JPA filtering with QueryDSL\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/081. Crea un filtro para tu API REST con Spring Boot/spring-data-jpa-rest-querydsl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Data JPA: filtros en API REST con QueryDSL\n```\n\n----------------------------------------\n\nTITLE: Starting SCDF Docker Containers\nDESCRIPTION: Launches the SCDF Docker containers in detached mode using Docker Compose.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/101. Spring Cloud Data Flow/batchsamples/billsetuptask/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Registering Application in SCDF\nDESCRIPTION: File path for registering the billsetuptask application JAR in SCDF.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/101. Spring Cloud Data Flow/batchsamples/billsetuptask/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfile://home/cnb/.m2/repository/io/spring/billsetuptask/0.0.1-SNAPSHOT/billsetuptask-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: JSON Views Header in Spring REST API\nDESCRIPTION: Markdown heading defining the topic of JSON Views with Jackson in Spring REST APIs\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/053. Utiliza JSON Views para mejorar las respuestas de tu API REST con Spring Boot/spring-jackson-jsonview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Json Views con Jackson en API REST de Spring\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Spring Data MongoDB\nDESCRIPTION: Title heading for a document about Spring Data MongoDB projections and aggregations\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/050. Proyecciones y Agregaciones con Spring Data MongoDB/spring-data-mongodb-proj-agg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spring Data MongoDB: Proyecciones y agregaciones\n```\n\n----------------------------------------\n\nTITLE: Viewing Azure Spring App Deployment Console Output\nDESCRIPTION: Console output showing the successful deployment of a Spring application named 'app3' to Azure Spring Apps. The output includes creation confirmation, deployment status updates, and the public URL for accessing the deployed application.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/098. Despliega tus microservicios con Spring Cloud Azure/spring-cloud-azure/app1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nStart creating app(app3)...\nApp(app3) is successfully created.\nStart updating deployment(default)...\nDeployment(default) is successfully updated.\nGetting deployment status...\nDeployment succeeded but the app is still starting, you can check the app status from Azure Portal.\nGetting public url of app(app3)...\nApplication url: https://app2-app3.azuremicroservices.io\nDeploy succeed!\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm run eject\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies directly into the project. This one-way operation gives full control over the build tools but cannot be reversed.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/frontend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Listing Project Components in Markdown\nDESCRIPTION: A simple Markdown list outlining the main components of the full stack application. It specifies the use of Spring Boot for the backend and React for the frontend.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Full Stack con Spring + React\n\n* Backend con Spring Boot\n* Frontend con React\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Runs end-to-end tests using the configured e2e testing framework. Note that a package implementing e2e testing capabilities must be added to the project first.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Project - CLI Method\nDESCRIPTION: Creates a new Vue.js project using the command line interface\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/026. Desarrolla una aplicación con Spring Boot y Vue.js/spring-vue/frontend/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvue create myproject\n```\n\n----------------------------------------\n\nTITLE: Spring Course List - Markdown Content\nDESCRIPTION: A markdown formatted list of Spring Framework related courses and tutorials covering various aspects of Spring ecosystem including web applications, security, data access, testing, and microservices.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Formaciones Spring\\n\\n- Introducción a Spring Framework\\n- Tu primera aplicación web con Spring Boot\\n- Introducción a Spring Data JPA\\n- Tu primera API Rest con Spring Boot\\n- Introducción a Spring Security\\n[...remaining course list content...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that allows all user agents (*) full access without any disallow rules. This setup permits web crawlers to access and index all content.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/025. Desarrolla una aplicación con Spring Boot y React/spring-react/frontend/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Displays help information for Angular CLI commands and directs users to the comprehensive Angular CLI documentation for detailed reference.\nSOURCE: https://github.com/openwebinarsnet/spring/blob/main/024. Desarrolla una aplicación con Spring Boot y Angular/spring-angular/frontend/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```"
  }
]