[
  {
    "owner": "mswjs",
    "repo": "data",
    "content": "TITLE: Describing Data Model with factory\nDESCRIPTION: This code snippet demonstrates how to use the `factory` function to model data. It imports `factory` and `primaryKey` from `@mswjs/data` and defines a 'user' model with properties like `id`, `firstName`, and `lastName`. The `id` is marked as a primary key.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// src/mocks/db.js\nimport { factory, primaryKey } from '@mswjs/data'\n\nexport const db = factory({\n  // Create a \"user\" model,\n  user: {\n    // ...with these properties and value getters.\n    id: primaryKey(() => 'abc-123'),\n    firstName: () => 'John',\n    lastName: () => 'Maverick',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Factory function example\nDESCRIPTION: This code demonstrates how to create a database model with the `factory` function. It defines a 'user' model with properties such as `id`, `firstName`, and `age`, specifying their types using JavaScript constructors.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n    age: Number,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key with primaryKey\nDESCRIPTION: This code snippet shows how to define a primary key for a model using the `primaryKey` function.  The `id` property of the `user` model is declared as the primary key, enforcing uniqueness for each user entity.  The primary key is a String.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nfactory({\n  user: {\n    id: primaryKey(String),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using primaryKey Function\nDESCRIPTION: This code demonstrates how to use the `primaryKey` function to mark the 'id' property of a model as a primary key. Subsequently, it shows how to create a new user with a specified ID using `db.user.create`.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n  },\n})\n\n// Create a new \"user\" with the primary key \"id\" equal to \"user-1\".\ndb.user.create({ id: 'user-1' })\n```\n\n----------------------------------------\n\nTITLE: Creating an entity\nDESCRIPTION: This code demonstrates creating a new entity for the 'user' model using the `create()` method. It creates a user with default values based on the model's property getters. It also demonstrates creating an entity with partial initial values for the entity properties.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst user = db.user.create()\n```\n\nLANGUAGE: js\nCODE:\n```\nconst user = db.user.create({\n  firstName: 'John',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Fake Data with MSWjs Data Factory and Faker in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Faker library in combination with @mswjs/data's factory to define a data model that generates fake user data. Faker is seeded to ensure reproducibility of generated values. The user model includes an id generated via faker.datatype.uuid as the primary key and a firstName generated via faker.name.firstName. Dependencies include @faker-js/faker and @mswjs/data. This setup is useful for generating consistent mock datasets for testing.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { faker } from '@faker-js/faker'\nimport { factory, primaryKey } from '@mswjs/data'\n\n// (Optional) Seed `faker` to ensure reproducible\n// random values of model properties.\nfaker.seed(123)\n\nfactory({\n  user: {\n    id: primaryKey(faker.datatype.uuid),\n    firstName: faker.name.firstName,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @mswjs/data\nDESCRIPTION: Instructions for installing the @mswjs/data library as a development dependency using npm or yarn. This is a prerequisite for using the data modeling and querying features.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @mswjs/data --save-dev\n# or\n$ yarn add @mswjs/data --dev\n```\n\n----------------------------------------\n\nTITLE: Generating REST API Mock Handlers with MSWjs Data Factory in TypeScript\nDESCRIPTION: This snippet illustrates creating a data factory model for users and generating REST API request handlers automatically using the model's .toHandlers('rest') method. The handlers support standard CRUD operations mapped to HTTP verbs and URL patterns defined by the model name and primary key. It sets up an MSW Node server with these handlers to intercept API calls. Dependencies include msw, msw/node, and @mswjs/data. Input is the model definition; output are REST handlers connected to respective model CRUD methods for mocking backend responses.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setupServer } from 'msw/node'\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n})\n\nconst handlers = [...db.user.toHandlers('rest')]\n\n// Establish requests interception.\nconst server = setupServer(...handlers)\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL API Mock Handlers with MSWjs Data Factory in TypeScript\nDESCRIPTION: This snippet demonstrates creating a factory model for users and generating GraphQL API request handlers via the .toHandlers('graphql') method. These handlers expose standard GraphQL queries and mutations matching the model's CRUD functionality, including querying single/multiple users, creating, updating, and deleting users. The MSW Node server is set up with these handlers to mock GraphQL API interactions. Dependencies include msw, msw/node, and @mswjs/data. Inputs are the model and GraphQL queries/mutations; outputs are mocked data responses.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setupServer } from 'msw/node'\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n})\n\nconst handlers = [...db.user.toHandlers('graphql')]\n\n// Establish requests interception.\nconst server = setupServer(...handlers)\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Generating REST Handlers\nDESCRIPTION: This code demonstrates how to use the `toHandlers` method to generate REST API request handlers for a given model. These handlers are designed to work with Mock Service Worker (MSW) and enable CRUD operations against the mocked database. It takes one argument, the type of the handlers.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n})\n\n// Generates REST API request handlers.\ndb.user.toHandlers('rest')\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Handlers\nDESCRIPTION: This code demonstrates how to use the `toHandlers` method to generate GraphQL API request handlers for a given model. These handlers are designed to work with Mock Service Worker (MSW) and enable CRUD operations against the mocked database. It takes one argument, the type of the handlers.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n})\n\n// Generates GraphQL API request handlers.\ndb.user.toHandlers('graphql')\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship\nDESCRIPTION: This code demonstrates how to create a one-to-many relationship between two models using the `manyOf` function.  The `user` model has a one-to-many relationship with the `post` model through the `publications` property.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey, manyOf } from '@mswjs/data'\n\nfactory({\n  user: {\n    id: primaryKey(String),\n    publications: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(String),\n    title: String,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet shows how to define a one-to-many relationship between two models.  In this example, a 'user' can have many 'posts'.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, manyOf } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    // \"user.posts\" is a list of the \"post\" entities.\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(String),\n    title: String,\n  },\n})\n\nconst posts = [\n  db.post.create({ title: 'First' }),\n  db.post.create({ title: 'Second' }),\n]\n\nconst user = db.user.create({\n  // Assign the list of existing posts to this user.\n  posts,\n})\n\nuser.posts // [{ title: \"First\" }, { title: \"Second\" }]\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-One Relationship with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a many-to-one relationship using MSW Data.  Here, both 'user' and 'car' have a 'country', representing that many users and cars can belong to one country.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, oneOf } from '@mswjs/data'\n\nconst db = factory({\n  country: {\n    name: primaryKey(String),\n  },\n  user: {\n    id: primaryKey(String),\n    country: oneOf('country'),\n  },\n  car: {\n    serialNumber: primaryKey(String),\n    country: oneOf('country'),\n  },\n})\n\nconst usa = db.country.create({ name: 'The United States of America' })\n\n// Create a \"user\" and a \"car\" with the same country.\ndb.user.create({ country: usa })\ndb.car.create({ country: usa })\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship\nDESCRIPTION: This code demonstrates how to create a one-to-one relationship between two models using the `oneOf` function.  The `user` model has a one-to-one relationship with the `userGroup` model through the `role` property.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey, oneOf } from '@mswjs/data'\n\nfactory({\n  user: {\n    id: primaryKey(String),\n    role: oneOf('userGroup'),\n  },\n  userGroup: {\n    name: primaryKey(String),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Relationship with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet illustrates how to define a one-to-one relationship between two models in MSW Data. Here, a 'post' has one 'author' (a 'user').\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, oneOf } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n  post: {\n    id: primaryKey(String),\n    title: String,\n    // The \"post.author\" references a \"user\" model.\n    author: oneOf('user'),\n  },\n})\n\nconst user = db.user.create({ firstName: 'John' })\nconst post = db.post.create({\n  title: 'My journey',\n  // Use a \"user\" entity as the actual value of this post's author.\n  author: user,\n})\n\npost.author.firstName // \"John\"\n```\n\n----------------------------------------\n\nTITLE: Getting all entities\nDESCRIPTION: This code demonstrates how to use the `getAll` method to retrieve all entities of a given model. It retrieves all users from the 'user' model.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst allUsers = db.user.getAll()\n```\n\n----------------------------------------\n\nTITLE: Using Faker with primaryKey\nDESCRIPTION: This code snippet shows how to use Faker to generate unique IDs for the primary key. It imports `faker` and uses `faker.datatype.uuid` as the getter function for the `id` property, ensuring each user has a unique UUID.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { faker } from '@faker-js/faker'\n\nfactory({\n  user: {\n    id: primaryKey(faker.datatype.uuid),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Finding Many Entities\nDESCRIPTION: This code demonstrates how to use the `findMany` method to retrieve all entities that satisfy a given query. The query uses the `where` option to filter by the `followersCount` property with a `gte` (greater than or equal to) condition.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst users = db.user.findMany({\n  where: {\n    followersCount: {\n      gte: 1000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Entity\nDESCRIPTION: This code demonstrates how to use the `update` method to modify the first entity that matches the query. It updates the entity with the `id` equal to 'abc-123', setting the `firstName` property to 'John' and updating the `role` property using a function that derives the next value from the previous one and the unmodified entity.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst updatedUser = db.user.update({\n  // Query for the entity to modify.\n  where: {\n    id: {\n      equals: 'abc-123',\n    },\n  },\n  // Provide partial next data to be\n  // merged with the existing properties.\n  data: {\n    // Specify the exact next value.\n    firstName: 'John',\n\n    // Alternatively, derive the next value from\n    // the previous one and the unmodified entity.\n    role: (prevRole, user) => reformatRole(prevRole),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Finding First Entity\nDESCRIPTION: This code demonstrates how to use the `findFirst` method to retrieve the first entity that satisfies a given query. The query uses the `where` option to filter by the `id` property with an `equals` condition.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst user = db.user.findFirst({\n  where: {\n    id: {\n      equals: 'abc-123',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Relationships with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet shows how to define nested relationships within an MSW Data model.  The example defines a nested 'country' relationship within the 'billing' address of a 'user'.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfactory({\n  user: {\n    id: primaryKey(String),\n    address: {\n      billing: {\n        country: oneOf('country'),\n      },\n    },\n  },\n  country: {\n    code: primaryKey(String),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Collocated Nested Updates with MSWjs Data Factory in JavaScript\nDESCRIPTION: This snippet shows how to perform collocated nested updates on related entities using the update method with an updater function. It defines two models, 'post' and its relational 'revision', with primary keys and properties. When updating a post's title, the related revision entity is simultaneously updated by calling its update method inside the post's update data callback. This approach ensures predictable updates across parent and related child entities in one transactional operation. Required dependencies are @mswjs/data. Inputs include the id filter for the post to update and the data including new title and revision updater function; output is an updated post with a refreshed revision.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { factory, primaryKey, oneOf } from '@mswjs/data'\n\nconst db = factory({\n  post: {\n    id: primaryKey(String),\n    title: String,\n    revision: oneOf('revision'),\n  },\n  revision: {\n    id: primaryKey(String),\n    updatedAt: () => new Date(),\n  },\n})\n\ndb.post.update({\n  where: {\n    id: { equals: 'post-1' },\n  },\n  data: {\n    title: 'Renamed post',\n    // The next value of the \"post.revision\"\n    // is returned from this updater function.\n    revision(prevRevision, post) {\n      // Update this post's revision as you'd do usually,\n      // but nested within the post's update operation.\n      return db.revision.update({\n        where: {\n          id: { equals: post.revision.id },\n        },\n        data: {\n          updatedAt: Date.now(),\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Structures with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define nested objects within an MSW Data model to represent complex data structures. It allows creating and querying data based on nested properties, including using `nullable` on nested fields.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, nullable } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    address: {\n      billing: {\n        street: String,\n        city: nullable(String),\n      },\n    },\n  },\n})\n\n// You can then create and query your data\n// based on the nested properties.\n\ndb.user.create({\n  id: 'user-1',\n  address: {\n    billing: {\n      street: 'Baker st.',\n      city: 'London',\n    },\n  },\n})\n\ndb.user.update({\n  where: {\n    id: {\n      equals: 'user-1',\n    },\n  },\n  data: {\n    address: {\n      billing: {\n        street: 'Sunwell ave.',\n        city: null,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Data with String Operators in mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates querying data based on string properties using various operators like `equals`, `notEquals`, `contains`, `notContains`, `in`, and `notIn`. It showcases a basic example of setting up a database schema and querying posts.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = factory({\n  post: {\n    id: String,\n    likes: Number,\n    isDraft: Boolean,\n  },\n})\n\n// Returns the list of `post` entities\n// that satisfy the given query.\nconst popularPosts = db.post.findMany({\n  where: {\n    likes: {\n      gte: 1000,\n    },\n    isDraft: {\n      equals: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Criteria with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates sorting query results by multiple criteria.  It uses an array of objects within the `orderBy` option, allowing to specify sorting order for each criterion. Direct and relational properties can be combined.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ndb.post.findMany({\n  orderBy: [\n    {\n      title: 'asc',\n    },\n    {\n      views: 'desc',\n    },\n  ],\n})\n\ndb.post.findMany({\n  orderBy: [\n    {\n      title: 'asc',\n    },\n    {\n      author: {\n        firstName: 'asc',\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting by Relational Properties with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet illustrates sorting query results based on properties of related entities. It shows how to sort posts by the first name of the author, using the `author.firstName` field in the `orderBy` option.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = factory({\n  post: {\n    id: primaryKey(String),\n    title: String,\n    author: oneOf('user'),\n  },\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n  },\n})\n\n// Return all posts in the \"Science\" category\n// sorted by the post author's first name.\ndb.post.findMany({\n  where: {\n    category: {\n      equals: 'Science',\n    },\n  },\n  orderBy: {\n    author: {\n      firstName: 'asc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Scoping Handlers\nDESCRIPTION: This code shows how to scope the generated handlers to a specific base URL using the optional second `baseUrl` argument in the `.toHandlers()` method for REST and GraphQL APIs.  Handlers will only intercept requests to the given base URL.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ndb.user.toHandlers('rest', 'https://example.com')\ndb.user.toHandlers('graphql', 'https://example.com/graphql')\n```\n\n----------------------------------------\n\nTITLE: Manual API Mock Integration with MSWjs Data Factory and MSW in JavaScript\nDESCRIPTION: This snippet presents a manual integration approach of MSWjs data with MSW HTTP handlers for custom mocking scenarios such as authentication. It defines a 'post' model and a POST /post handler that checks authorization headers to permit or deny post creation. If authorized, a new post entity is created using the factory and returned as JSON with status 201; otherwise, a 403 response is returned. Dependencies include msw, msw/node, and @mswjs/data. Inputs include HTTP requests with headers and body; outputs are mocked HTTP responses integrating business logic.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { http, HttpResponse } from 'msw'\nimport { setupServer } from 'msw/node'\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  post: {\n    id: primaryKey(String),\n    title: String,\n  },\n})\n\nconst handlers = [\n  http.post('/post', (req, res, cxt) => {\n    // Only authenticated users can create new posts.\n    if (req.headers.get('authorization') === 'Bearer AUTH_TOKEN') {\n      return new HttpResponse(null, { status: 403 })\n    }\n\n    // Create a new entity for the \"post\" model.\n    const newPost = db.post.create(req.body)\n\n    // Respond with a mocked response.\n    return HttpResponse.json({ post: newPost }, { status: 201 })\n  }),\n]\n\n// Establish requests interception.\nconst server = setupServer(...handlers)\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to sort query results using the `orderBy` option in the `findMany` method.  The example sorts posts in the 'Science' category by title in ascending order.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = factory({\n  post: {\n    id: primaryKey(String),\n    title: String,\n  },\n})\n\n// Return first 10 posts in the \"Science\" category\n// sorted by the post's \"title\".\ndb.post.findMany({\n  where: {\n    category: {\n      equals: 'Science',\n    },\n  },\n  take: 10,\n  orderBy: {\n    title: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Nullable Relationship with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a nullable relationship, which allows instantiating and updating relationships to null. The `nullable` function is used with both `oneOf` and `manyOf`.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, oneOf, nullable } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    invitation: nullable(oneOf('invitation')),\n    friends: nullable(manyOf('user')),\n  },\n  invitation: {\n    id: primaryKey(String),\n  },\n})\n\nconst invitation = db.invitation.create()\n\n// Nullable relationships are instantiated with null.\nconst john = db.user.create({ invitation }) // john.friends === null\nconst kate = db.user.create({ friends: [john] }) // kate.invitation === null\n\ndb.user.updateMany({\n  where: {\n    id: {\n      in: [john.id, kate.id],\n    },\n  },\n  data: {\n    // Nullable relationships can be updated to null.\n    invitation: null,\n    friends: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using nullable function\nDESCRIPTION: This code demonstrates how to use the `nullable` function to mark a model property as nullable.  The `title` property of the `user` model is set as nullable, meaning it can be assigned a `null` value.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, primaryKey, nullable } from '@mswjs/data'\n\nfactory({\n  user: {\n    id: primaryKey(String),\n    // \"user.title\" is a nullable property.\n    title: nullable(String)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Properties with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a nullable property in an MSW Data model using the `nullable` function. A nullable property can be explicitly set to `null` during object creation and updates.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, nullable } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    firstName: String,\n    // \"user.age\" is a nullable property.\n    age: nullable(Number),\n  },\n})\n\ndb.user.create({\n  id: 'user-1',\n  firstName: 'John',\n  // Nullable properties can be explicit null as the initial value.\n  age: null,\n})\n\ndb.user.update({\n  where: {\n    id: {\n      equals: 'user-1',\n    },\n  },\n  data: {\n    // Nullable properties can be updated to null.\n    age: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Properties with mswjs/data (TypeScript)\nDESCRIPTION: This code snippet illustrates how to define a nullable property in an MSW Data model using TypeScript, specifying the type of the property when it cannot be inferred otherwise.  The `nullable<number>(() => null)` syntax ensures type safety and default null values.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factory, primaryKey, nullable } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    age: nullable<number>(() => null),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Entities\nDESCRIPTION: This code demonstrates how to use the `updateMany` method to modify multiple entities that match the query. It updates the entities with `id` values in the array ['abc-123', 'def-456'], setting the `firstName` property to its uppercase version.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst updatedUsers = db.user.updateMany({\n  // Query for the entity to modify.\n  where: {\n    id: {\n      in: ['abc-123', 'def-456'],\n    },\n  },\n  // Provide partial next data to be\n  // merged with the existing properties.\n  data: {\n    firstName: (firstName) => firstName.toUpperCase(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset-Based Pagination with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet illustrates how to implement offset-based pagination when querying data. The `take` and `skip` options are used to specify the number of results to retrieve and the number of results to skip, respectively.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = factory({\n  post: {\n    id: primaryKey(String),\n    category: String,\n  },\n})\n\ndb.post.findMany({\n  where: {\n    category: {\n      equals: 'Science',\n    },\n  },\n  take: 15,\n  skip: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Counting Entities\nDESCRIPTION: This code demonstrates how to use the `count` method to retrieve the total number of records in a model. It shows counting all records and counting records after filtering them with the `where` option to filter by the `role` property with an `equals` condition.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ndb.user.create()\ndb.user.create()\n\ndb.user.count() // 2\n```\n\nLANGUAGE: js\nCODE:\n```\ndb.user.count({\n  where: {\n    role: {\n      equals: 'reader',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet demonstrates cursor-based pagination using MSW Data. The `cursor` option in the `findMany` query expects a primary key value to start the pagination from. It is useful for efficient pagination in large datasets.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = factory({\n  post: {\n    // The `id` primary key will be used as a cursor.\n    id: primaryKey(String),\n    category: String,\n  },\n})\n\nconst firstPage = db.post.findMany({\n  where: {\n    category: {\n      equals: 'Science',\n    },\n  },\n  take: 15,\n  cursor: null,\n})\n\nconst secondPage = db.post.findMany({\n  where: {\n    category: {\n      equals: 'Science',\n    },\n  },\n  take: 15,\n  // The second page will start from the last post\n  // of the `firstPage`.\n  cursor: firstPage[firstPage.length - 1].id,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Relationship with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet shows how to define a unique relationship, ensuring that a referenced entity can be assigned to only one entity. An invitation cannot be assigned to multiple users, enforcing uniqueness.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey, oneOf } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n    invitation: oneOf('invitation', { unique: true }),\n  },\n  invitation: {\n    id: primaryKey(String),\n  },\n})\n\nconst invitation = db.invitation.create()\n\nconst john = db.user.create({ invitation })\n\n// Assigning the invitation already used by \"john\"\n// will throw an exception when creating this entity.\nconst karl = db.user.create({ invitation })\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Entities\nDESCRIPTION: This code demonstrates how to use the `deleteMany` method to delete multiple entities that match the query. It deletes all user entities with `followersCount` less than 10.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst deletedUsers = db.user.deleteMany({\n  where: {\n    followersCount: {\n      lt: 10,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity\nDESCRIPTION: This code demonstrates how to use the `delete` method to delete the first entity that satisfies the given query.  It deletes the user entity with `followersCount` equal to 0.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst deletedUser = db.user.delete({\n  where: {\n    followersCount: {\n      equals: 0,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode for Queries with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet explains how to use strict mode when querying data.  If no entity is found that matches the query and strict mode is enabled, the query operation will throw an exception. Requires `factory` and `primaryKey` from `@mswjs/data`.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, primaryKey } from '@mswjs/data'\n\nconst db = factory({\n  user: {\n    id: primaryKey(String),\n  },\n})\n\ndb.user.create({ id: 'abc-123' })\n\n// This will throw an exception, because there are\n// no \"user\" entities matching this query.\ndb.user.findFirst({\n  where: {\n    id: {\n      equals: 'def-456',\n    },\n  },\n  strict: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fetch to Create User via Generated REST API Handler in JavaScript\nDESCRIPTION: An example showing how to use the Fetch API to send a POST request to the mocked '/users' REST endpoint created by the MSWjs data factory REST handlers. The request includes JSON body with user id and firstName, illustrating how client code can interact with the mocked API to create new data records. Inputs include URL, HTTP method, headers, and JSON payload; output is the server's response handled by MSW.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a new user in the database.\nfetch('/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    id: 'abc-123',\n    firstName: 'John',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Created User with Apollo Client GraphQL Hook in JavaScript\nDESCRIPTION: This example shows how to use Apollo Client's useQuery hook with a GraphQL query to invoke the mocked createUser mutation generated by MSWjs data factory GraphQL handlers. It sends a UserInput payload with firstName and expects a response containing firstName, demonstrating client-side querying of the mocked GraphQL API. Dependencies include @apollo/client and the MSWjs mocked GraphQL handlers. Inputs are GraphQL mutation and variables; output is queried data from mocked API.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { gql, useQuery } from '@apollo/client'\n\nconst CREATE_USER = gql`\n  query CreateUser($initialValues: UserInput!) {\n    createUser(data: $initialValues) {\n      firstName\n    }\n  }\n`\n\nuseQuery(CREATE_USER, {\n  variables: {\n    initialValues: {\n      firstName: 'John',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping all entities in database\nDESCRIPTION: This code demonstrates how to use the `drop` function to delete all entities within a specific database instance. It takes the database instance as an argument and clears all the data.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { factory, drop } from '@mswjs/data'\n\nconst db = factory(...models)\n\ndrop(db)\n```\n\n----------------------------------------\n\nTITLE: Dropping the Database with mswjs/data (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `drop` function to delete all entities from a given MSW Data database.\nSOURCE: https://github.com/mswjs/data/blob/main/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { factory, drop } from '@mswjs/data'\n\nconst db = factory({...})\n\ndrop(db)\n```"
  }
]