[
  {
    "owner": "ratatui",
    "repo": "ratatui",
    "content": "TITLE: Handling Ambiguous Type Inference with Line in Rust\nDESCRIPTION: Example showing how to resolve type inference issues that may arise due to Line now implementing From<Cow<str>>, which adds an extra conversion path and can create ambiguity in previously working code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// given:\nstruct Foo { ... }\nimpl From<Foo> for String { ... }\nimpl From<Foo> for Cow<str> { ... }\n\nlet foo = Foo { ... };\nlet line = Line::from(foo); // now fails due to now ambiguous inferred type\n// replace with e.g.\nlet line = Line::from(String::from(foo));\n```\n\n----------------------------------------\n\nTITLE: Initializing ListState and Rendering Stateful List Widget in Rust\nDESCRIPTION: Shows how to initialize a ListState, create a List widget with items, render it as a stateful widget, and select an item in response to events. This replaces the previous SelectableList widget.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_198\n\nLANGUAGE: rust\nCODE:\n```\n// State initialization\nlet mut state = ListState::default();\n\n// In the terminal.draw closure\nlet list = List::new(&[\"Item1\", \"Item2\", \"Item3\"]);\nf.render_stateful_widget(list, area, &mut state);\n\n// In response to some events\nstate.select(Some(1));\n```\n\n----------------------------------------\n\nTITLE: Basic Ratatui Hello World Application\nDESCRIPTION: A minimal Ratatui application that demonstrates the core structure of a TUI app. It initializes a terminal, renders \"hello world\", and exits when any key is pressed.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse color_eyre::Result;\nuse crossterm::event::{self, Event};\nuse ratatui::{DefaultTerminal, Frame};\n\nfn main() -> Result<()> {\n    color_eyre::install()?;\n    let terminal = ratatui::init();\n    let result = run(terminal);\n    ratatui::restore();\n    result\n}\n\nfn run(mut terminal: DefaultTerminal) -> Result<()> {\n    loop {\n        terminal.draw(render)?;\n        if matches!(event::read()?, Event::Key(_)) {\n            break Ok(());\n        }\n    }\n}\n\nfn render(frame: &mut Frame) {\n    frame.render_widget(\"hello world\", frame.area());\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical and Horizontal Layout\nDESCRIPTION: Shows how to create vertical and horizontal layouts using the vertical! and horizontal! macros with area calculations.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::{vertical, horizontal};\n\nlet area = Rect { x: 0, y: 0, width: 10, height: 10 };\n\nlet [main, bottom] = vertical![==100%, >=3].areas(area);\n\nassert_eq!(bottom.y, 7);\nassert_eq!(bottom.height, 3);\n\nlet [left, main, right] = horizontal![>=3, ==100%, >=3].areas(area);\n\nassert_eq!(left.width, 3);\nassert_eq!(right.width, 3);\n```\n\n----------------------------------------\n\nTITLE: Initializing TableState and Rendering Stateful Table Widget in Rust\nDESCRIPTION: Demonstrates how to initialize a TableState, create a Table widget with headers and rows, and render it as a stateful widget. Also shows how to select a table row in response to events.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_197\n\nLANGUAGE: rust\nCODE:\n```\n// State initialization\nlet mut state = TableState::default();\n\n// In the terminal.draw closure\nlet header = [\"Col1\", \"Col2\", \"Col\"];\nlet rows = [\n  Row::Data([\"Row11\", \"Row12\", \"Row13\"].into_iter())\n];\nlet table = Table::new(header.into_iter(), rows.into_iter());\nf.render_stateful_widget(table, area, &mut state);\n\n// In response to some event:\nstate.select(Some(1));\n```\n\n----------------------------------------\n\nTITLE: Splitting Rects in Rust using Layout\nDESCRIPTION: Demonstrates how to split a Rect using the Layout struct and array destructuring to get individual Rects. This allows for more flexible layout creation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_44\n\nLANGUAGE: rust\nCODE:\n```\nuse Constraint::*;\nlet layout = &Layout::vertical([Length(1), Min(0)]);\nlet [top, main] = area.split(&layout);\n```\n\n----------------------------------------\n\nTITLE: Adding WidgetRef and StatefulWidgetRef Traits in Rust\nDESCRIPTION: This snippet introduces new traits WidgetRef and StatefulWidgetRef, which allow rendering widgets by reference. It enables rendering boxed widgets and provides more flexibility in widget composition.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_57\n\nLANGUAGE: rust\nCODE:\n```\nstruct Parent {\n    child: Option<Child>,\n}\n\nimpl WidgetRef for Parent {\n    fn render_ref(&self, area: Rect, buf: &mut Buffer) {\n        self.child.render_ref(area, buf);\n    }\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet widgets: Vec<Box<dyn WidgetRef>> = vec![Box::new(Greeting), Box::new(Farewell)];\nfor widget in widgets {\n    widget.render_ref(buf.area, &mut buf);\n}\nassert_eq!(buf, Buffer::with_lines([\"Hello        Goodbye\"]));\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Strings as Widgets in Ratatui\nDESCRIPTION: This example demonstrates how to render plain strings (without explicit styling) as widgets in Ratatui. The implementation allows both &str and String types to be used directly with render_widget.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nterminal.draw(|f| f.render_widget(\"Hello World!\", f.size()))?\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Position in Ratatui Frame\nDESCRIPTION: Illustrates how to use the new cursor management API introduced in v0.10.0. Shows a conditional approach to cursor positioning based on application state and automatically hiding the cursor when not needed.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_191\n\nLANGUAGE: rust\nCODE:\n```\nfn draw_input(f: &mut Frame, app: &App) {\n  if app.editing {\n    let input_width = app.input.width() as u16;\n    // The cursor will be placed just after the last character of the input\n    f.set_cursor((input_width + 1, 0));\n  } else {\n    // We are no longer editing, the cursor does not have to be shown, set_cursor is not called and\n    // thus automatically hidden.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Layout with Percentage Constraints in Rust\nDESCRIPTION: Demonstrates how to create a horizontal layout with two equal-width columns using percentage constraints. This new syntax simplifies layout creation by allowing direct specification of direction and constraints.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_100\n\nLANGUAGE: rust\nCODE:\n```\nlet layout = Layout::new(Direction::Horizontal, [\n    Constraint::Percentage(50),\n    Constraint::Percentage(50),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Terminal::try_draw() for Fallible Rendering in Rust\nDESCRIPTION: Shows how to use the new Terminal::try_draw() method that enables the use of the ? operator for handling errors within the drawing closure, making it easier to write fallible rendering methods.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nterminal.try_draw(|frame| {\n    some_method_that_can_fail()?;\n    another_faillible_method()?;\n    Ok(())\n})?;\n```\n\n----------------------------------------\n\nTITLE: Implementing FromIterator for Line and Text Types in Rust\nDESCRIPTION: This code demonstrates how to create Line and Text instances from iterators of Span and Line instances using the FromIterator implementation. It shows examples of both direct from_iter calls and collect() method usage.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nlet line = Line::from_iter(vec![\"Hello\".blue(), \" world!\".green()]);\nlet line: Line = iter::once(\"Hello\".blue())\n    .chain(iter::once(\" world!\".green()))\n    .collect();\nlet text = Text::from_iter(vec![\"The first line\", \"The second line\"]);\nlet text: Text = iter::once(\"The first line\")\n    .chain(iter::once(\"The second line\"))\n    .collect();\n```\n\n----------------------------------------\n\nTITLE: Defining Table Column Widths Using Constraints in Rust\nDESCRIPTION: Demonstrates how to use Constraint instead of integers to specify the widths of Table widget columns, allowing for more responsive tables.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_199\n\nLANGUAGE: rust\nCODE:\n```\nTable::new(header, row)\n  .widths(&[\n    Constraint::Length(15),\n    Constraint::Length(15),\n    Constraint::Length(10),\n  ])\n  .render(f, chunk);\n```\n\n----------------------------------------\n\nTITLE: Using cargo-generate for Ratatui Templates\nDESCRIPTION: Command for generating a new project using Ratatui templates. This is used to quickly scaffold a new project with Ratatui boilerplate code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo generate ratatui/templates\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Into<Constraint> for Widths in Rust\nDESCRIPTION: Shows how to create Tables using the new constructors that accept any type implementing Into<Constraint> for column widths. This simplifies table creation by allowing direct use of integers for fixed column sizes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_53\n\nLANGUAGE: rust\nCODE:\n```\nTable::new(rows, [1,2,3])\nTable::default().widths([1,2,3])\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Construction in Rust with Ratatui\nDESCRIPTION: Demonstrates the changes to Layout construction in Ratatui. The new constructor now accepts direction and constraint parameters directly, while the previous syntax using method chaining is still supported via Layout::default().\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nlet layout = layout::new()\n  .direction(Direction::Vertical)\n  .constraints([Constraint::Min(1), Constraint::Max(2)]);\n// becomes either\nlet layout = layout::default()\n  .direction(Direction::Vertical)\n  .constraints([Constraint::Min(1), Constraint::Max(2)]);\n// or\nlet layout = layout::new(Direction::Vertical, [Constraint::Min(1), Constraint::Max(2)]);\n```\n\n----------------------------------------\n\nTITLE: Creating Layouts with Into<Constraint> in Rust\nDESCRIPTION: Shows how to create Layouts using the new constructors that accept any type implementing Into<Constraint>. This simplifies layout creation by allowing direct use of integers for fixed sizes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\nLayout::new(Direction::Vertical, [1, 2, 3]);\nLayout::horizontal([1, 2, 3]);\nLayout::vertical([1, 2, 3]);\nLayout::default().constraints([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Padding to Lists in Ratatui\nDESCRIPTION: This snippet shows how to implement scroll padding in a List widget, which keeps a specific number of ListItems visible above and below the currently selected item while scrolling.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nlet list = List::new(items).scroll_padding(1);\n```\n\n----------------------------------------\n\nTITLE: Using Span as a Widget in Rust\nDESCRIPTION: Shows how to use Span as a standalone widget, allowing for more flexible text rendering and styling within the Ratatui framework.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\nframe.render_widget(Span::raw(\"Hello, world!\"), area);\n// or\nSpan::raw(\"Hello, world!\").render(frame, area);\n// or even\n\"Hello, world!\".green().render(frame, area);\n```\n\n----------------------------------------\n\nTITLE: Collecting Iterator of ListItem into List in Rust\nDESCRIPTION: This snippet demonstrates how to collect an iterator of items convertible into ListItem into a List. It allows for more flexible creation of List widgets.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_56\n\nLANGUAGE: rust\nCODE:\n```\nlet list: List = (0..3).map(|i| format!(\"Item{i}\")).collect();\n```\n\n----------------------------------------\n\nTITLE: Implementing a minimal Ratatui application with ratatui::init() and restore()\nDESCRIPTION: A simplified hello world example using the new ratatui::init() and restore() methods. This code initializes a terminal with crossterm backend, draws \"Hello World!\" to the screen, and exits when any key is pressed.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui:{\n    crossterm::event::{self, Event},\n    text::Text,\n    Frame,\n};\n\nfn main() {\n    let mut terminal = ratatui::init();\n    loop {\n        terminal\n            .draw(|frame: &mut Frame| frame.render_widget(Text::raw(\"Hello World!\"), frame.area()))\n            .expect(\"Failed to draw\");\n        if matches!(event::read().expect(\"failed to read event\"), Event::Key(_)) {\n            break;\n        }\n    }\n    ratatui::restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Span Creation Examples\nDESCRIPTION: Demonstrates creating raw and styled spans using the span! macro with different styling options.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::span;\n\nlet name = \"world!\";\nlet raw_greeting = span!(\"hello {name}\");\nlet styled_greeting = span!(Style::new().green(); \"hello {name}\");\nlet styled_greeting = span!(Color::Green; \"hello {name}\");\nlet styled_greeting = span!(Modifier::BOLD; \"hello {name}\");\n```\n\n----------------------------------------\n\nTITLE: Adding Direction Attribute to Barchart Widget in Ratatui\nDESCRIPTION: Adds a direction attribute to the barchart widget, enabling horizontal bar rendering for more efficient space utilization.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_156\n\nLANGUAGE: text\nCODE:\n```\n* feat(barchart): Add direction attribute\n\nEnable rendering the bars horizontally. In some cases this allow us to\nmake more efficient use of the available space.\n```\n\n----------------------------------------\n\nTITLE: Using Material Design Colors in Rust\nDESCRIPTION: Demonstrates how to use the new Material Design color palette in Ratatui for styling components. This provides a standardized set of colors for consistent UI design.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui::style::palette::material::BLUE_GRAY;\nLine::styled(\"Hello\", BLUE_GRAY.c500);\n```\n\n----------------------------------------\n\nTITLE: Adding Weak Constraints for Rectangle Sizing in Ratatui\nDESCRIPTION: Implements weak constraints to make rectangles closer to each other in size and adjusts the priority of Max and Min constraints for better layout control.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_163\n\nLANGUAGE: text\nCODE:\n```\nAlso make `Max` and `Min` constraints MEDIUM strength for higher priority over equal chunks\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterators for Text in Rust\nDESCRIPTION: This snippet adds iterator functionality to the Text struct, allowing for easier iteration over Lines. It implements iter and iter_mut methods, as well as IntoIterator for Text, &Text, and &mut Text.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_54\n\nLANGUAGE: text\nCODE:\n```\nThis allows iterating over the `Lines`s of a text using `for` loops and\nother iterator methods.\n\n- add `iter` and `iter_mut` methods to `Text`\n- implement `IntoIterator` for `Text`, `&Text`, and `&mut Text` traits\n- update call sites to iterate over `Text` rather than `Text::lines`\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Cursor Position with Backend and Terminal in Rust\nDESCRIPTION: Shows how to use the new get_cursor_position() and set_cursor_position() methods on Backend and Terminal structs, which accept either Position objects or (u16, u16) tuples.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nbackend.set_cursor_position(Position { x: 0, y: 20 })?;\nlet position = backend.get_cursor_position()?;\nterminal.set_cursor_position((0, 20))?;\nlet position = terminal.set_cursor_position()?;\n```\n\n----------------------------------------\n\nTITLE: Converting Values to SparklineBar in Rust\nDESCRIPTION: Example of how to modify code to accommodate the change in Sparkline::data method which now takes IntoIterator<Item = SparklineBar> instead of &[u64]. Shows how to use explicit type conversion with u64::from().\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nlet value = 1u8;\n- Sparkline::default().data(&[value.into()]);\n+ Sparkline::default().data(&[u64::from(value)]);\n```\n\n----------------------------------------\n\nTITLE: Adding Selection Constraint Option to Table Widget in Ratatui\nDESCRIPTION: Introduces an option to configure selection layout changes in the table widget, preventing layout shifts when selecting or unselecting rows.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_162\n\nLANGUAGE: text\nCODE:\n```\n* feat(table): add option to configure selection layout changes\n\nBefore this option was available, selecting a row in the table when no row was selected\npreviously made the tables layout change (the same applies to unselecting) by adding the width\nof the \"highlight symbol\" in the front of the first column, this option allows to configure this\nbehavior.\n\n* refactor(table): refactor \"get_columns_widths\" to return (x, width)\n\nand \"render\" to make use of that\n\n* refactor(table): refactor \"get_columns_widths\" to take in a selection_width instead of a boolean\n\nalso refactor \"render\" to make use of this change\n\n* fix(table): rename \"highlight_set_selection_space\" to \"highlight_spacing\"\n\n* style(table): apply doc-comment suggestions from code review\n```\n\n----------------------------------------\n\nTITLE: Rendering Line as a Widget in Rust\nDESCRIPTION: Shows how to use Line as a standalone widget, allowing it to be rendered directly or used as a child of other widgets. This provides more flexibility in widget composition.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\nframe.render_widget(Line::raw(\"Hello, world!\"), area);\n// or\nLine::raw(\"Hello, world!\").render(frame, area);\n```\n\n----------------------------------------\n\nTITLE: Migrating Bottom-to-Top List Direction\nDESCRIPTION: Shows how to update code that previously used Corner::BottomLeft with List::start_corner to use the new ListDirection::BottomToTop with List::direction instead.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n- list.start_corner(Corner::BottomLeft);\n// becomes\n+ list.direction(ListDirection::BottomToTop);\n```\n\n----------------------------------------\n\nTITLE: Creating a List with String Items in Rust\nDESCRIPTION: Demonstrates how to create a List widget using an array of strings, which are automatically converted to ListItems.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_98\n\nLANGUAGE: rust\nCODE:\n```\nList::new([\"Item 1\", \"Item 2\"])\n```\n\n----------------------------------------\n\nTITLE: Converting Display Types to Ratatui Text Components\nDESCRIPTION: Example demonstrating how to convert numeric types implementing Display trait to Line and Text components in Ratatui for easy text creation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nlet line = 42.to_line();\nlet text = 666.to_text();\n```\n\n----------------------------------------\n\nTITLE: Layout Split Function Refactoring\nDESCRIPTION: Documentation of layout split function simplification and improvements\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_170\n\nLANGUAGE: text\nCODE:\n```\n* test(layout): add tests for split()\n\n* refactor(layout): simplify and doc split()\n\nThis is mainly a reduction in density of the code with a goal of\nimproving mainatainability so that the algorithm is clear.\n```\n\n----------------------------------------\n\nTITLE: Terminal Layout Rendering in Rust with Ratatui\nDESCRIPTION: Demonstrates rendering of bordered blocks in a terminal using vertical and horizontal layouts with spacers. Shows how to draw double-bordered blocks with configurable spacing between elements.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nterminal\n    .draw(|frame| {\n        let [upper, lower] = Layout::vertical([Fill(1), Fill(1)]).areas(frame.area());\n\n        let (segments, spacers) = Layout::horizontal([Length(10), Length(10), Length(10)])\n            .flex(Flex::Center)\n            .split_with_spacers(upper);\n\n        for segment in segments.iter() {\n            frame.render_widget(\n                crate::widgets::Block::bordered()\n                    .border_set(crate::symbols::border::DOUBLE),\n                *segment,\n            );\n        }\n        for spacer in spacers.iter() {\n            frame.render_widget(crate::widgets::Block::bordered(), *spacer);\n        }\n\n        let (segments, spacers) = Layout::horizontal([Length(10), Length(10), Length(10)])\n            .flex(Flex::Center)\n            .spacing(-1) \n            .split_with_spacers(lower);\n\n        for segment in segments.iter() {\n            frame.render_widget(\n                crate::widgets::Block::bordered()\n                    .border_set(crate::symbols::border::DOUBLE),\n                *segment,\n            );\n        }\n        for spacer in spacers.iter() {\n            frame.render_widget(crate::widgets::Block::bordered(), *spacer);\n        }\n    })\n    .unwrap();\ndbg!(terminal.backend());\n```\n\n----------------------------------------\n\nTITLE: Using Rect Positions Iterator in Rust\nDESCRIPTION: Demonstrates how to use the new Rect::positions iterator to perform an action on all cells in a particular area of a buffer.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\nfn render(area: Rect, buf: &mut Buffer) {\n   for position in area.positions() {\n        buf.get_mut(position.x, position.y).set_symbol(\"x\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Constraints from Various Length Specifications in Rust\nDESCRIPTION: Showcases helper methods for creating layout constraints from different types of length specifications, including fixed lengths, ratios, percentages, minimums, and maximums.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_101\n\nLANGUAGE: rust\nCODE:\n```\n// a fixed layout\nlet constraints = Constraint::from_lengths([10, 20, 10]);\n\n// a centered layout\nlet constraints = Constraint::from_ratios([(1, 4), (1, 2), (1, 4)]);\nlet constraints = Constraint::from_percentages([25, 50, 25]);\n\n// a centered layout with a minimum size\nlet constraints = Constraint::from_mins([0, 100, 0]);\n\n// a sidebar / main layout with maximum sizes\nlet constraints = Constraint::from_maxes([30, 200]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Border Symbols for Blocks\nDESCRIPTION: Documentation for a feature that allows specifying custom symbols for block borders, including two new border types that use Unicode quadrant characters to create border effects resembling half block pixels.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_116\n\nLANGUAGE: text\nCODE:\n```\nAdds a new `Block::border_set` method that allows the user to specify\nthe symbols used for the border.\n\nAdded two new border types: `BorderType::QuadrantOutside` and\n`BorderType::QuadrantInside`. These are used to draw borders using the\nunicode quadrant characters (which look like half block \"pixels\").\n\n```\n▛▀▀▜\n▌  ▐\n▙▄▄▟\n\n▗▄▄▖\n▐  ▌\n▝▀▀▘\n```\nFixes: https://github.com/ratatui/ratatui/issues/528\n\nBREAKING CHANGES:\n- BorderType::to_line_set is renamed to to_border_set\n- BorderType::line_symbols is renamed to border_symbols\n```\n\n----------------------------------------\n\nTITLE: Line Creation Examples\nDESCRIPTION: Shows how to create lines containing multiple spans using the line! macro.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::line;\n\nlet name = \"world!\";\nlet line = line![\"hello\", format!(\"{name}\")];\nlet line = line![\"bye\"; 2];\n```\n\n----------------------------------------\n\nTITLE: Updating Paragraph Text in Rust with Ratatui\nDESCRIPTION: Demonstrates the need for explicit type annotations when creating Paragraph widgets with string literals in Ratatui, due to the introduction of the Masked type.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n- let paragraph = Paragraph::new(\"\".as_ref());\n// becomes\n+ let paragraph = Paragraph::new(\"\".as_str());\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Text Structures with Spans and Lines in Ratatui\nDESCRIPTION: Example of creating richly styled Text components using Spans and Lines with various text styles, which can now be more easily debugged with improved debug view implementations.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nText::from_iter([\n    Line::from(\"Hello, world!\"),\n    Line::from(\"How are you?\").bold().left_aligned(),\n    Line::from_iter([\n        Span::from(\"I'm \"),\n        Span::from(\"doing \").italic(),\n        Span::from(\"great!\").bold(),\n    ]),\n]).on_blue().italic().centered()\n```\n\n----------------------------------------\n\nTITLE: Adding Titles to Block Widgets in Rust\nDESCRIPTION: Shows how to add titles to the top and bottom of a Block widget using the new title_top and title_bottom methods.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\nBlock::bordered()\n    .title_top(Line::raw(\"A\").left_aligned())\n    .title_top(Line::raw(\"B\").centered())\n    .title_top(Line::raw(\"C\").right_aligned())\n    .title_bottom(Line::raw(\"D\").left_aligned())\n    .title_bottom(Line::raw(\"E\").centered())\n    .title_bottom(Line::raw(\"F\").right_aligned())\n    .render(buffer.area, &mut buffer);\n```\n\n----------------------------------------\n\nTITLE: Testing Layout Construction in Ratatui\nDESCRIPTION: Example of creating and testing a layout with the new overlap feature that allows segments to share pixels, introduced through the Spacing enum and enhanced Layout::spacing method.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_layout() {\n    use crate::layout::Constraint::*;\n    let mut terminal = crate::Terminal::new(crate::backend::TestBackend::new(50, 4)).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Updating Axis::labels() Usage in Rust\nDESCRIPTION: Example showing how to modify code to accommodate the change in Axis::labels() method, which now accepts IntoIterator<Into<Line>> instead of Vec<Span>, requiring changes to type inference.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- Axis::default().labels(vec![\"a\".into(), \"b\".into()])\n+ Axis::default().labels([\"a\", \"b\"])\n```\n\n----------------------------------------\n\nTITLE: Converting between Crossterm and Ratatui types using new traits\nDESCRIPTION: Demonstrates how to convert between Crossterm and Ratatui color and attribute types using the new FromCrossterm and IntoCrossterm traits introduced in 0.30.0.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ use ratatui::backend::crossterm::{FromCrossterm, IntoCrossterm};\n\nlet crossterm_color = crossterm::style::Color::Black;\n- let ratatui_color = crossterm_color.into();\n- let ratatui_color = ratatui::style::Color::from(crossterm_color);\n+ let ratatui_color = ratatui::style::Color::from_crossterm(crossterm_color);\n- let crossterm_color = ratatui_color.into();\n- let crossterm_color = crossterm::style::Color::from(ratatui_color);\n+ let crossterm_color = ratatui_color.into_crossterm();\n\nlet crossterm_attribute = crossterm::style::types::Attribute::Bold;\n- let ratatui_modifier = crossterm_attribute.into();\n- let ratatui_modifier = ratatui::style::Modifier::from(crossterm_attribute);\n+ let ratatui_modifier = ratatui::style::Modifier::from_crossterm(crossterm_attribute);\n- let crossterm_attribute = ratatui_modifier.into();\n- let crossterm_attribute = crossterm::style::types::Attribute::from(ratatui_modifier);\n+ let crossterm_attribute = ratatui_modifier.into_crossterm();\n```\n\n----------------------------------------\n\nTITLE: Updating Stylize Usage for Strings in Rust with Ratatui\nDESCRIPTION: Shows the change in Stylize implementation for Strings in Ratatui, where style methods now consume the String instead of borrowing it, requiring cloning for multiple uses.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\n- let s = String::new(\"foo\");\n- let span1 = s.red();\n- let span2 = s.blue(); // will no longer compile as s is consumed by the previous line\n// becomes\n+ let span1 = s.clone().red();\n+ let span2 = s.blue();\n```\n\n----------------------------------------\n\nTITLE: Adding Line Alignment Support to Table Widget in Ratatui\nDESCRIPTION: Implements support for line alignment in the table widget, including enforcement of alignment during rendering and addition of alignment render tests.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_161\n\nLANGUAGE: text\nCODE:\n```\n* feat(table): enforce line alignment in table render\n\n* test(table): add table alignment render test\n```\n\n----------------------------------------\n\nTITLE: Repeated Constraints Example\nDESCRIPTION: Shows how to use the constraints! macro with repetition syntax to create multiple equal ratio constraints.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::constraints;\n\nassert_eq!(\n    constraints![==1/4; 4],\n    [\n        Constraint::Ratio(1, 4),\n        Constraint::Ratio(1, 4),\n        Constraint::Ratio(1, 4),\n        Constraint::Ratio(1, 4),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Style Creation in Rust Documentation\nDESCRIPTION: Examples showing the preferred concise way to create styles using the Stylize trait, compared to the more verbose default style setters.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet style = Style::new().red().bold();\n// not\nlet style = Style::default().fg(Color::Red).add_modifier(Modifiers::BOLD);\n```\n\n----------------------------------------\n\nTITLE: Updating Buffer::filled Method Call in Ratatui\nDESCRIPTION: Shows how to update code using Buffer::filled which now takes Cell directly instead of by reference. The change involves removing the reference operator when passing Cell::new.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-Buffer::filled(area, &Cell::new(\"X\"));\n+Buffer::filled(area, Cell::new(\"X\"));\n```\n\n----------------------------------------\n\nTITLE: Advanced Text Styling with Block in Ratatui\nDESCRIPTION: Demonstrates various approaches for styling Block titles using the new text styling primitives introduced in v0.10.0. Shows simple styling, full styling, and mixed styling approaches.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_192\n\nLANGUAGE: rust\nCODE:\n```\n// A title with no styling\nBlock::default().title(\"My title\");\n// A yellow title\nBlock::default().title(Span::styled(\"My title\", Style::default().fg(Color::Yellow)));\n// A title where \"My\" is bold and \"title\" is a simple string\nBlock::default().title(vec![\n    Span::styled(\"My\", Style::default().add_modifier(Modifier::BOLD)),\n    Span::from(\"title\")\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Constraints Macro\nDESCRIPTION: Demonstrates usage of the constraints! macro for defining layout constraints with different types and values.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::constraints;\n\nassert_eq!(\n    constraints![==50, ==30%, >=3, <=1, ==1/2, *=1],\n    [\n        Constraint::Length(50),\n        Constraint::Percentage(30),\n        Constraint::Min(3),\n        Constraint::Max(1),\n        Constraint::Ratio(1, 2),\n        Constraint::Fill(1),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Table Construction with Mandatory Widths Parameter\nDESCRIPTION: Shows how to update code that uses Table::new() followed by .widths() to the new API that requires specifying widths directly in the new() method, or alternatively using Table::default().rows().\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n- Table::new(rows).block(block).widths(widths);\n// becomes\n+ Table::default().rows(rows).widths(widths)\n```\n\n----------------------------------------\n\nTITLE: Using Full and Empty Border Sets in Ratatui\nDESCRIPTION: Example demonstrating how to use the new FULL and EMPTY border sets with Block widgets. FULL uses a full block symbol while EMPTY uses spaces, allowing for various border styling options.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui::{symbols::border, widgets::Block};\nlet block = Block::bordered().title(\"Title\").border_set(border::FULL);\nlet block = Block::bordered().title(\"Title\").border_set(border::EMPTY);\n```\n\n----------------------------------------\n\nTITLE: Style Patching in Ratatui\nDESCRIPTION: Shows how to use the new style patching capability introduced in v0.10.0 to combine multiple style modifiers without overriding previous settings.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_194\n\nLANGUAGE: rust\nCODE:\n```\nlet style = Style::default().modifier(Modifier::BOLD);\nlet style = style.patch(Style::default().add_modifier(Modifier::ITALIC));\n// style.modifier == Modifier::BOLD | Modifier::ITALIC, the modifier has been enriched not overridden\n```\n\n----------------------------------------\n\nTITLE: Migrating from List::start_corner to List::direction\nDESCRIPTION: Demonstrates how to replace deprecated List::start_corner method with the new List::direction method and ListDirection enum. Shows how different corner values map to direction values.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- list.start_corner(Corner::TopLeft);\n- list.start_corner(Corner::TopRight);\n// This is not an error, BottomRight rendered top to bottom previously\n- list.start_corner(Corner::BottomRight);\n// all becomes\n+ list.direction(ListDirection::TopToBottom);\n```\n\n----------------------------------------\n\nTITLE: Incremental Styling in Ratatui Block\nDESCRIPTION: Shows the before and after approach for styling UI elements with the improved incremental styling system in v0.10.0. Demonstrates how to combine styles without overriding previous properties.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_193\n\nLANGUAGE: rust\nCODE:\n```\nBlock::default()\n    .style(Style::default().bg(Color::Green))\n    // The style is not overridden anymore, we simply add new style rule for the title.\n    .title(Span::styled(\"My title\", Style::default().add_modifier(Modifier::BOLD)))\n```\n\n----------------------------------------\n\nTITLE: Using simplified Bar::text_value method with Into<String>\nDESCRIPTION: Shows how to use the updated Bar::text_value method which now accepts Into<String> instead of requiring explicit conversion.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- Bar::default().text_value(\"foobar\".into());\n+ Bar::default().text_value(\"foobar\");\n```\n\n----------------------------------------\n\nTITLE: Migrating List Widget to ListItem API in Ratatui\nDESCRIPTION: Demonstrates how to update code to use the new List API introduced in v0.10.0, which supports items with variable heights and complex styling through the ListItem wrapper.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_195\n\nLANGUAGE: rust\nCODE:\n```\n// Before\nlet items = vec![\n  \"Item1\",\n  \"Item2\",\n  \"Item3\"\n];\nList::default().items(items.iters());\n\n// After\nlet items = vec![\n  ListItem::new(\"Item1\"),\n  ListItem::new(\"Item2\"),\n  ListItem::new(\"Item3\"),\n];\nList::new(items);\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget for Widget References in Rust\nDESCRIPTION: This snippet implements the Widget trait for references to widgets, allowing for immutable rendering of widgets. It enables reusing widgets without consuming them when calling Frame::render_widget().\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_55\n\nLANGUAGE: rust\nCODE:\n```\n// this might be stored in a struct\nlet paragraph = Paragraph::new(\"Hello world!\");\n\nlet [left, right] = area.split(&Layout::horizontal([20, 20]));\nframe.render_widget(&paragraph, left);\nframe.render_widget(&paragraph, right); // we can reuse the widget\n```\n\n----------------------------------------\n\nTITLE: Updating Paragraph Wrapping in Ratatui\nDESCRIPTION: Shows how to migrate from the boolean-based text wrapping to the new Wrap struct in Paragraph widget, which offers more control over text wrapping behavior including whitespace trimming.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_196\n\nLANGUAGE: rust\nCODE:\n```\n// before\nParagraph::new(text).wrap(true)\n// after\nParagraph::new(text).wrap(Wrap { trim: true }) // to have the same behavior\nParagraph::new(text).wrap(Wrap { trim: false }) // to use the new behavior\n```\n\n----------------------------------------\n\nTITLE: Adding Selection Column Width Option to List Widget in Ratatui\nDESCRIPTION: Introduces an option to always allocate the 'selection' column width in the list widget, preventing layout changes when selecting or unselecting items.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_158\n\nLANGUAGE: text\nCODE:\n```\n* feat(list): add option to always allocate the \"selection\" column width\n\nBefore this option was available, selecting a item in a list when nothing was selected\npreviously made the row layout change (the same applies to unselecting) by adding the width\nof the \"highlight symbol\" in the front of the list, this option allows to configure this\nbehavior.\n\n* style: change \"highlight_spacing\" doc comment to use inline code-block for reference\n```\n\n----------------------------------------\n\nTITLE: Simplifying Tabs Creation with IntoIterator\nDESCRIPTION: Demonstrates how to simplify code by removing unnecessary collect() calls when creating Tabs widgets, as Tabs::new() now accepts any type implementing IntoIterator with items that can be converted to Line.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- let tabs = Tabs::new((0.3).map(|i| format!(\"{i}\")).collect());\n// becomes\n+ let tabs = Tabs::new((0.3).map(|i| format!(\"{i}\")));\n```\n\n----------------------------------------\n\nTITLE: Debug Output Example for Text/Line/Span/Style in Rust\nDESCRIPTION: This example demonstrates the more concise Debug output for Text, Line, Span, and Style components. It shows how to create complex text structures with various styling options and the resulting debug output format.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nText::from_iter([\nLine::from(\"without line fields\"),\nLine::from(\"with line fields\").bold().centered(),\nLine::from_iter([\nSpan::from(\"without span fields\"),\nSpan::from(\"with span fields\")\n.green()\n.on_black()\n.italic()\n.not_dim(),\n]),\n])\n```\n\n----------------------------------------\n\nTITLE: Using Vertical and Horizontal Layout Constructors in Rust\nDESCRIPTION: Demonstrates the use of new vertical and horizontal constructors for the Layout struct, allowing for easier creation of common layout patterns.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_46\n\nLANGUAGE: rust\nCODE:\n```\nlet layout = Layout::vertical([\n    Constraint::Length(10),\n    Constraint::Min(5),\n    Constraint::Length(10),\n]);\n\nlet layout = Layout::horizontal([\n    Constraint::Length(10),\n    Constraint::Min(5),\n    Constraint::Length(10),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Colors in Rust\nDESCRIPTION: Shows how to use the Tailwind color palette in Ratatui for styling components. This allows for easy integration with Tailwind-inspired color schemes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_51\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui::style::palette::tailwind::SLATE;\nLine::styled(\"Hello\", SLATE.c500);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Barchart Implementation in Ratatui\nDESCRIPTION: Simplifies the internal implementation of the barchart by replacing 'remove_invisible_groups_and_bars' with 'group_ticks'. This new function calculates visible bar length in ticks and filters out invisible groups and bars.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_129\n\nLANGUAGE: text\nCODE:\n```\nReplace `remove_invisible_groups_and_bars` with `group_ticks`\n`group_ticks` calculates the visible bar length in ticks. (A cell contains 8 ticks).\n\nIt is used for 2 purposes:\n1. to get the bar length in ticks for rendering\n2. since it delivers only the values of the visible bars, If we zip these values\n   with the groups and bars, then we will filter out the invisible groups and bars\n```\n\n----------------------------------------\n\nTITLE: Adding is_empty() Method to Rect for Simplified Checks\nDESCRIPTION: Documentation for a new Rect::is_empty() method that checks whether either height or width equals zero, simplifying common checks. Also includes refactoring of Rect into a separate file without changing the public API.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_120\n\nLANGUAGE: text\nCODE:\n```\n- add `Rect::is_empty()` that checks whether either height or width == 0\n- refactored `Rect` into layout/rect.rs from layout.rs. No public API change as\n   the module is private and the type is re-exported under the `layout` module.\n```\n\n----------------------------------------\n\nTITLE: Creating Colors from HSL Values in Rust\nDESCRIPTION: Implementation of the Color::from_hsl function that converts HSL (Hue, Saturation, Lightness) values to RGB colors. HSL provides a more intuitive way to work with colors where Hue ranges from 0-360 degrees, and Saturation and Lightness from 0-100%.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_58\n\nLANGUAGE: rust\nCODE:\n```\nlet color: Color = Color::from_hsl(360.0, 100.0, 100.0);\nassert_eq!(color, Color::Rgb(255, 255, 255));\n\nlet color: Color = Color::from_hsl(0.0, 0.0, 0.0);\nassert_eq!(color, Color::Rgb(0, 0, 0));\n```\n\n----------------------------------------\n\nTITLE: Fixing Unicode Rendering for Barchart Value Labels in Ratatui\nDESCRIPTION: Corrects a bug where the width of value labels with unicode characters was incorrectly calculated using byte length instead of character count.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_124\n\nLANGUAGE: text\nCODE:\n```\nAn earlier change introduced a bug where the width of value labels with\nunicode characters was incorrectly using the string length in bytes\ninstead of the unicode character count. This reverts the earlier change.\n```\n\n----------------------------------------\n\nTITLE: Accessing Buffer Cells with New Index Operations in Rust\nDESCRIPTION: Demonstrates the new buffer cell access methods including index operators and the safer cell() and cell_mut() methods that return Options instead of potentially causing panics. These methods accept Into<Position> for more ergonomic usage.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet mut buffer = Buffer::empty(Rect::new(0, 0, 10, 10));\n\nlet cell = buf[(0, 0)];\nlet cell = buf[Position::new(0, 0)];\n\nlet symbol = buf.cell((0, 0)).map(|cell| cell.symbol());\nlet symbol = buf.cell(Position::new(0, 0)).map(|cell| cell.symbol());\n\nbuf[(0, 0)].set_symbol(\"🐀\");\nbuf[Position::new(0, 0)].set_symbol(\"🐀\");\n\nbuf.cell_mut((0, 0)).map(|cell| cell.set_symbol(\"🐀\"));\nbuf.cell_mut(Position::new(0, 0)).map(|cell| cell.set_symbol(\"🐀\"));\n```\n\n----------------------------------------\n\nTITLE: Converting Palette Colors to Ratatui Colors\nDESCRIPTION: Examples showing how to convert colors from the palette crate to Ratatui's Color type using the palette feature flag, supporting both Srgb and LinSrgb color formats.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nuse palette::{LinSrgb, Srgb};\nuse ratatui::style::Color;\n\nlet color = Color::from(Srgb::new(1.0f32, 0.0, 0.0));\nlet color = Color::from(LinSrgb::new(1.0f32, 0.0, 0.0));\n```\n\n----------------------------------------\n\nTITLE: Increasing Layout Cache Size in Example\nDESCRIPTION: Improves performance by increasing the layout cache size, especially beneficial for scrolling operations. Serves as a demonstration of proper cache usage.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_63\n\nLANGUAGE: text\nCODE:\n```\nThis was causing very bad performances especially on scrolling.\nIt's also a good usage demonstration.\n```\n\n----------------------------------------\n\nTITLE: Enhancing Barchart Rendering for Small Sizes\nDESCRIPTION: Documentation for an improvement to barchart rendering that allows charts smaller than 3 lines to display properly, addressing issues with bar values not showing when the width and height are limited.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_115\n\nLANGUAGE: text\nCODE:\n```\nThe bar values are not shown if the value width is equal the bar width\nand the bar is height is less than one line\n\nAdd an internal structure `LabelInfo` which stores the reserved height\nfor the labels (0, 1 or 2) and also whether the labels will be shown.\n\nFixes ratatui#513\n```\n\n----------------------------------------\n\nTITLE: Offsetting a Rect in Rust\nDESCRIPTION: Shows how to create a new Rect by offsetting an existing one. This is useful for manual layout tasks, allowing movement in both positive and negative x and y directions.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_99\n\nLANGUAGE: rust\nCODE:\n```\nlet rect = area.offset(Offset { x: 10, y -10 });\n```\n\n----------------------------------------\n\nTITLE: Updating Canvas Marker in Rust with Ratatui\nDESCRIPTION: Shows the change in behavior of Marker::Block and the introduction of Marker::Bar in Ratatui for rendering block characters in Canvas widgets.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\n- let canvas = Canvas::default().marker(Marker::Block);\n// becomes\n+ let canvas = Canvas::default().marker(Marker::Bar);\n```\n\n----------------------------------------\n\nTITLE: Adding Text Elements with Operator Overloading in Rust\nDESCRIPTION: Demonstrates the new Add and AddAssign implementations for Line, Span, and Text components, allowing for more intuitive composition of text elements with different styles.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet line = Span::raw(\"Red\").red() + Span::raw(\"blue\").blue();\nlet line = Line::raw(\"Red\").red() + Span::raw(\"blue\").blue();\nlet line = Line::raw(\"Red\").red() + Line::raw(\"Blue\").blue();\nlet text = Line::raw(\"Red\").red() + Line::raw(\"Blue\").blue();\nlet text = Text::raw(\"Red\").red() + Line::raw(\"Blue\").blue();\n\nlet mut line = Line::raw(\"Red\").red();\nline += Span::raw(\"Blue\").blue();\n\nlet mut text = Text::raw(\"Red\").red();\ntext += Line::raw(\"Blue\").blue();\n\nline.extend(vec![Span::raw(\"1\"), Span::raw(\"2\"), Span::raw(\"3\")]);\n```\n\n----------------------------------------\n\nTITLE: Improving Table Rendering for Missing Widths\nDESCRIPTION: Changes the behavior of Tables without specified widths to render with equal column widths instead of not rendering any content. Fixes issue #510.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_66\n\nLANGUAGE: text\nCODE:\n```\nPreviously, if `.widths` was not called before rendering a `Table`, no\ncontent would render in the area of the table. This commit changes that\nbehaviour to default to equal widths for each column.\n```\n\n----------------------------------------\n\nTITLE: Implementing LruCache for Layout Caching in Ratatui\nDESCRIPTION: Replaces the unbounded HashMap with an LruCache for layout caching, limiting it to 16 entries by default. Adds a new method to initialize the cache size.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_121\n\nLANGUAGE: text\nCODE:\n```\nThe layout cache now uses a LruCache with default size set to 16 entries.\nPreviously the cache was backed by a HashMap, and was able to grow\nwithout bounds as a new entry was added for every new combination of\nlayout parameters.\n\n- Added a new method (`layout::init_cache(usize)`) that allows the cache\nsize to be changed if necessary. This will only have an effect if it is called\nprior to any calls to `layout::split()` as the cache is wrapped in a `OnceLock`\n```\n\n----------------------------------------\n\nTITLE: Placing Documentation Comments Above Macros in Rust\nDESCRIPTION: Demonstration of the correct placement of documentation comments above macros in Rust code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// doc comment\n#[derive(Debug)]\nstruct Foo {}\n```\n\n----------------------------------------\n\nTITLE: Updating Scrollbar Symbol Imports in Rust with Ratatui\nDESCRIPTION: Demonstrates the relocation of Scrollbar symbols to the symbols module and the privatization of the widgets::scrollbar module in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n- use ratatui::{widgets::scrollbar::{Scrollbar, Set}};\n// becomes\n+ use ratatui::{widgets::Scrollbar, symbols::scrollbar::Set}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Multi-line Highlight Symbols in Rust\nDESCRIPTION: Demonstrates how to create a Table with a multi-line highlight symbol using the Text type. This allows for more complex and visually appealing table row highlighting.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nlet table = Table::new(rows, widths)\n    .highlight_symbol(Text::from(vec![\n        \"\".into(),\n        \" █ \".into(),\n        \" █ \".into(),\n        \"\".into(),\n    ]));\n```\n\n----------------------------------------\n\nTITLE: Styling McGugan Wide Border Set in Rust\nDESCRIPTION: Example of manually styling the McGugan wide border set, which creates tighter borders. This code sets the style for each cell in the border with appropriate colors and reversed display attributes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_59\n\nLANGUAGE: rust\nCODE:\n```\nlet main_color = color_for_constraint(*constraint);\nlet cell = buf.get_mut(block.x, block.y + 1);\ncell.set_style(Style::reset().fg(main_color).reversed());\nlet cell = buf.get_mut(block.x, block.y + 2);\ncell.set_style(Style::reset().fg(main_color).reversed());\nlet cell = buf.get_mut(block.x + block.width.saturating_sub(1), block.y + 1);\ncell.set_style(Style::reset().fg(main_color).reversed());\nlet cell = buf.get_mut(block.x + block.width.saturating_sub(1), block.y + 2);\ncell.set_style(Style::reset().fg(main_color).reversed());\n```\n\n----------------------------------------\n\nTITLE: Styling McGugan Tall Border Set in Rust\nDESCRIPTION: Example of manually styling the McGugan tall border set. This code iterates over each cell in the top and bottom borders, applying appropriate styles to create a visually distinct border design.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_60\n\nLANGUAGE: rust\nCODE:\n```\nlet main_color = color_for_constraint(*constraint);\nfor x in block.x + 1..(block.x + block.width).saturating_sub(1) {\n    let cell = buf.get_mut(x, block.y);\n    cell.set_style(Style::reset().fg(main_color).reversed());\n    let cell = buf.get_mut(x, block.y + block.height - 1);\n    cell.set_style(Style::reset().fg(main_color).reversed());\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Rust Documentation Comments\nDESCRIPTION: Examples of proper formatting for Rust documentation comments, including summary, blank line, and detailed description.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Summary\n///\n/// A detailed description\n/// with examples.\nfn foo() {}\n```\n\n----------------------------------------\n\nTITLE: Updating layout::Alignment imports in Rust\nDESCRIPTION: Example showing how to update imports after layout::Alignment was renamed to layout::HorizontalAlignment in version 0.30.0.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- use ratatui::layout::Alignment;\n+ use ratatui::layout::HorizontalAlignment;\n\n- use Alignment::*;\n+ use HorizontalAlignment::*;\n```\n\n----------------------------------------\n\nTITLE: Updating Scrollbar Track Symbol in Rust with Ratatui\nDESCRIPTION: Shows the change in Scrollbar::track_symbol() method to accept an Option<&str> instead of &str in Ratatui, making the track symbol optional.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\n- let scrollbar = Scrollbar::default().track_symbol(\"|\");\n// becomes\n+ let scrollbar = Scrollbar::default().track_symbol(Some(\"|\"));\n```\n\n----------------------------------------\n\nTITLE: Using Flex::Legacy for Backward Compatibility in Layout\nDESCRIPTION: Shows how to maintain backward compatibility with layouts that depended on the previous default behavior by explicitly specifying Flex::Legacy mode in Layout horizontal or vertical methods.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- let rects = Layout::horizontal([Length(1), Length(2)]).split(area);\n// becomes\n+ let rects = Layout::horizontal([Length(1), Length(2)]).flex(Flex::Legacy).split(area);\n```\n\n----------------------------------------\n\nTITLE: Updating Prelude Imports in Rust\nDESCRIPTION: Example showing how to update code after changes to the prelude where some items were removed and others were added, requiring explicit imports for removed items and potential disambiguation for types with similar names.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n// if your app uses Styled::style() or Styled::set_style():\n-use ratatui::prelude::*;\n+use ratatui::{prelude::*, style::Styled};\n\n// if your app uses symbols::Marker:\n-use ratatui::prelude::*;\n+use ratatui::{prelude::*, symbols::Marker}\n\n// if your app uses terminal::{CompletedFrame, TerminalOptions, Viewport}\n-use ratatui::prelude::*;\n+use ratatui::{prelude::*, terminal::{CompletedFrame, TerminalOptions, Viewport}};\n\n// to disambiguate existing types named Position or Size:\n- use some_crate::{Position, Size};\n- let size: Size = ...;\n- let position: Position = ...;\n+ let size: some_crate::Size = ...;\n+ let position: some_crate::Position = ...;\n```\n\n----------------------------------------\n\nTITLE: Complex Text Composition\nDESCRIPTION: Shows how to compose complex text using combinations of span!, line!, and text! macros.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::{span, line, text};\nlet name = \"Bye!!!\";\nlet text = text![line![\"hello\", \"world\".bold()], span!(Modifier::BOLD; \"{name}\")];\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization - Buffer Cell\nDESCRIPTION: Implements SSO technique using CompactString for Cell::symbol field to reduce memory allocations.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_91\n\nLANGUAGE: text\nCODE:\n```\nUse CompactString instead of String to store the Cell::symbol field.\nThis saves reduces the size of memory allocations at runtime.\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-generate for Ratatui Templates\nDESCRIPTION: Commands for installing cargo-generate and generating a new Ratatui project from templates. This allows users to quickly create a new Ratatui project with boilerplate code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked cargo-generate\ncargo generate ratatui/templates\n```\n\n----------------------------------------\n\nTITLE: Using Color::from_hsl with palette Feature in Rust\nDESCRIPTION: Example of updating code to use the new Color::from_hsl method that now accepts a palette::Hsl value instead of individual f64 parameters and is gated behind the palette feature flag.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- Color::from_hsl(360.0, 100.0, 100.0)\n+ Color::from_hsl(Hsl::new(360.0, 100.0, 100.0))\n```\n\n----------------------------------------\n\nTITLE: Replacing List::new() with Empty Vector\nDESCRIPTION: Shows how to fix compilation errors when using List::new() with empty vectors by using List::default() instead, addressing the change to List::new() that now accepts IntoIterator<Item = Into<ListItem<'a>>>.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- let list = List::new(vec![]);\n// becomes\n+ let list = List::default();\n```\n\n----------------------------------------\n\nTITLE: Using simplified BarGroup::label method with Into<Line>\nDESCRIPTION: Shows how to use the updated BarGroup::label method which now accepts Into<Line> instead of requiring explicit conversion.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- BarGroup::default().label(\"bar\".into());\n+ BarGroup::default().label(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Using FrameExt trait with unstable-widget-ref feature\nDESCRIPTION: Shows how to use the FrameExt trait introduced in 0.30.0 for rendering widget references, which requires enabling the unstable-widget-ref feature.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui::{\n    layout::Rect,\n    widgets::{Block, FrameExt},\n};\n\nlet block = Block::new();\nlet area = Rect::new(0, 0, 5, 5);\nframe.render_widget_ref(&block, area);\n```\n\n----------------------------------------\n\nTITLE: Example Update - Table Component\nDESCRIPTION: Updates table example with scrollbar, color palette improvements, and interactive color changing functionality.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_84\n\nLANGUAGE: text\nCODE:\n```\nIn table.rs\n- added scrollbar to the table\n- colors changed to use style::palette::tailwind\n- now colors can be changed with keys (l or →) for the next color, (h or\n←) for the previous color\n- added a footer for key info\n\nFor table.tape\n- typing speed changed to 0.75s from 0.5s\n- screen size changed to fit\n- pushed keys changed to show the current example better\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Widget States in Rust\nDESCRIPTION: Demonstrates how to use serde to serialize and deserialize TableState, ListState, and ScrollbarState. This allows for saving and restoring application state.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]\nstruct AppState {\n    list_state: ListState,\n    table_state: TableState,\n    scrollbar_state: ScrollbarState,\n}\n\nlet app_state = AppState::default();\nlet serialized = serde_json::to_string(app_state);\n\nlet app_state = serde_json::from_str(serialized);\n```\n\n----------------------------------------\n\nTITLE: Fixing Style Bug in Buffer Component\nDESCRIPTION: This fix prevents a panic in set_style when the area to be styled is outside the buffer's bounds.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_61\n\nLANGUAGE: text\nCODE:\n```\nThis fixes a panic in set_style when the area to be styled is\noutside the buffer's bounds.\n```\n\n----------------------------------------\n\nTITLE: Migrating from Block::Title to Line in Rust\nDESCRIPTION: This snippet shows how to migrate from the deprecated block::Title to using Line directly. The Title struct is being removed in favor of using Line to represent titles, eliminating an unnecessary layer of wrapping.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nBlock::new().title(Title::from(\"foo\"));\n// becomes any of\n\nBlock::new().title(\"foo\");\n\nBlock::new().title(Line::from(\"foo\"));\n\nBlock::new().title(Title::from(\"foo\").position(Position::TOP));\n// becomes any of\n\nBlock::new().title_top(\"foo\");\n\nBlock::new().title_top(Line::from(\"foo\"));\n\nBlock::new().title(Title::from(\"foo\").position(Position::BOTTOM));\n// becomes any of\n\nBlock::new().title_bottom(\"foo\");\n\nBlock::new().title_bottom(Line::from(\"foo\"));\n```\n\n----------------------------------------\n\nTITLE: Block Border Style Improvement\nDESCRIPTION: Demonstrates the difference between old and new syntax for creating bordered blocks.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n- Block::default().borders(Borders::ALL);\n+ Block::bordered();\n```\n\n----------------------------------------\n\nTITLE: Updating Table Widths Method in Rust\nDESCRIPTION: Changes the Table::widths() method to accept AsRef<[Constraint]>, allowing for more flexible input types including arrays, slices, and Vecs of constraints.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_102\n\nLANGUAGE: rust\nCODE:\n```\nTable::new(rows).widths([Constraint::Length(5), Constraint::Length(5)]);\nTable::new(rows).widths(&[Constraint::Length(5), Constraint::Length(5)]);\n\n// widths could also be computed at runtime\nlet widths = vec![Constraint::Length(5), Constraint::Length(5)];\nTable::new(rows).widths(widths.clone());\nTable::new(rows).widths(&widths);\n```\n\n----------------------------------------\n\nTITLE: Example Update - List Component\nDESCRIPTION: Updates the list example to a todo list with improved visual design and functionality for changing todo status.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_82\n\nLANGUAGE: text\nCODE:\n```\nThis PR adds:\n\n- subjectively better-looking list example\n- change list example to a todo list example\n- status of a TODO can be changed, further info can be seen under the list.\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs Type Inference for Breaking Change with Option Support\nDESCRIPTION: Example showing required changes due to Tabs::select() now accepting Into<Option<usize>> instead of usize, which allows tabs to be deselected by passing None but breaks existing code using parameter type inference.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet selected = 1u8;\n- let tabs = Tabs::new([\"A\", \"B\"]).select(selected.into())\n+ let tabs = Tabs::new([\"A\", \"B\"]).select(selected as usize)\n```\n\n----------------------------------------\n\nTITLE: Converting Color from u32 Format in Rust\nDESCRIPTION: Shows how to create Color objects from 32-bit unsigned integers in 0x00RRGGBB format.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\nlet white = Color::from_u32(0x00FFFFFF);\nlet black = Color::from_u32(0x00000000);\n```\n\n----------------------------------------\n\nTITLE: Supporting Saved Offsets in List Component\nDESCRIPTION: Modifies the List component and its example to save the last selected item and honor its offset. This prevents the list from resetting when a user unselects a StatefulList.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_64\n\nLANGUAGE: text\nCODE:\n```\nThe current `List` example will unselect and reset the position of a\nlist.\n\nThis PR will save the last selected item, and updates `List` to honor\nits offset, preventing the list from resetting when the user\n`unselect()`s a `StatefulList`.\n```\n\n----------------------------------------\n\nTITLE: Updating Terminal Module Imports in Rust\nDESCRIPTION: Example showing how to update imports after the ratatui::terminal module was made private, with its types now exported from the root of the crate to avoid naming clashes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- use ratatui::terminal::{CompletedFrame, Frame, Terminal, TerminalOptions, ViewPort};\n+ use ratatui::{CompletedFrame, Frame, Terminal, TerminalOptions, ViewPort};\n```\n\n----------------------------------------\n\nTITLE: Example Refactoring - Demo2\nDESCRIPTION: Simplifies demo2 example with better code organization, state management, and error handling improvements.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_81\n\nLANGUAGE: text\nCODE:\n```\nSimplified a bunch of the logic in the demo2 example\n- Moved destroy mode to its own file.\n- Moved error handling to its own file.\n- Removed AppContext\n- Implemented Widget for &App. The app state is small enough that it\n    doesn't matter here and we could just copy or clone the app state on\n    every frame, but for larger apps this can be a significant performance\n    improvement.\n- Made the tabs stateful\n- Made the term module just a collection of functions rather than a\n    struct.\n- Changed to use color_eyre for error handling.\n- Changed keyboard shortcuts and rearranged the bottom bar.\n- Use strum for the tabs enum.\n```\n\n----------------------------------------\n\nTITLE: Implementing Half Block Marker for Canvas Widget\nDESCRIPTION: Documentation for a new half block marker implementation for the Canvas widget, which uses terminal half blocks to create a grid of square pixels, allowing for higher resolution graphics in terminal applications.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_117\n\nLANGUAGE: text\nCODE:\n```\n* feat(canvas): implement half block marker\n\nA useful technique for the terminal is to use half blocks to draw a grid\nof \"pixels\" on the screen. Because we can set two colors per cell, and\nbecause terminal cells are about twice as tall as they are wide, we can\ndraw a grid of half blocks that looks like a grid of square pixels.\n\nThis commit adds a new `HalfBlock` marker that can be used in the Canvas\nwidget and the associated HalfBlockGrid.\n\nAlso updated demo2 to use the new marker as it looks much nicer.\n\nAdds docs for many of the methods and structs on canvas.\n\nChanges the grid resolution method to return the pixel count\nrather than the index of the last pixel.\nThis is an internal detail with no user impact.\n```\n\n----------------------------------------\n\nTITLE: Single Constraint Usage\nDESCRIPTION: Demonstrates using the constraint! macro for defining a single length constraint.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::constraint;\n\nassert_eq!(\n    constraint!(==50),\n    Constraint::Length(50),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Layout::init_cache Usage with NonZeroUsize in Rust\nDESCRIPTION: Example of modifying code to accommodate the change in Layout::init_cache method, which now takes a NonZeroUsize instead of usize and no longer returns a boolean.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- let is_initialized = Layout::init_cache(100);\n+ Layout::init_cache(NonZeroUsize::new(100).unwrap());\n```\n\n----------------------------------------\n\nTITLE: Updating Frame Parameter in Rust with Ratatui\nDESCRIPTION: Demonstrates the removal of the generic Backend parameter from Frame in Ratatui, simplifying function signatures that work with Frame instances.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\n- fn ui<B: Backend>(frame: &mut Frame<B>) { ... }\n// becomes\n+ fn ui(frame: Frame) { ... }\n```\n\n----------------------------------------\n\nTITLE: Improving Chart Legend Rendering\nDESCRIPTION: Fixes legend display in charts by excluding datasets with no name from the legend and hiding the legend entirely when no datasets have names.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_62\n\nLANGUAGE: text\nCODE:\n```\nA dataset with no name won't display an empty line anymore in the legend.\nIf no dataset have name, then no legend is ever displayed.\n```\n\n----------------------------------------\n\nTITLE: Example Update - Gauge Component\nDESCRIPTION: Enhances the gauge example with colored gauges, improved visual design, and better demonstration of ratio/percentage and unicode features.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_80\n\nLANGUAGE: text\nCODE:\n```\n- colored gauges\n- removed box borders\n- show the difference between ratio / percentage and unicode / no unicode better\n- better application approach (consistent with newer examples)\n- various changes for 0.26 featuers\n- impl `Widget` for `&App`\n- use color_eyre\n\nfor gauge.tape\n\n- change to get better output from the new code\n\n---------\nFixes: https://github.com/ratatui/ratatui/issues/846\nCo-authored-by: Josh McKinney <joshka@users.noreply.github.com>\n```\n\n----------------------------------------\n\nTITLE: Using Table::default() Instead of Table::new() with Empty Containers\nDESCRIPTION: Shows how to address type inference issues with empty containers by using Table::default() and the widths method instead of Table::new() with an empty vector.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n- let table = Table::new(vec![], widths);\n// becomes\n+ let table = Table::default().widths(widths);\n```\n\n----------------------------------------\n\nTITLE: Table Module Documentation and API Cleanup in Text\nDESCRIPTION: A comprehensive description of refactoring the table module to improve readability, adding new methods, and making internal adjustments.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_110\n\nLANGUAGE: text\nCODE:\n```\n- Refactor the `table` module for better top to bottom readability by\nputting types first and arranging them in a logical order (Table, Row,\nCell, other).\n\n- Adds new methods for:\n  - `Table::rows`\n  - `Row::cells`\n  - `Cell::new`\n  - `Cell::content`\n  - `TableState::new`\n  - `TableState::selected_mut`\n\n- Makes `HighlightSpacing::should_add` pub(crate) since it's an internal\n  detail.\n\n- Adds tests for all the new methods and simple property tests for all\n  the other setter methods.\n```\n\n----------------------------------------\n\nTITLE: Fixing Layout Flex with Spacing and Proportional Constraints\nDESCRIPTION: Resolves a bug in layouts when using spacing on proportional constraints, ensuring proper element sizing and positioning.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_67\n\nLANGUAGE: text\nCODE:\n```\nThis PR fixes a bug with layouts when using spacing on proportional\nconstraints.\n```\n\n----------------------------------------\n\nTITLE: Adding Line::raw Constructor for Text Components\nDESCRIPTION: Documentation for a new Line::raw constructor that complements existing Span::raw and Text::raw methods, ensuring symmetry across text components. Multi-line content is converted to multiple spans with newlines removed.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_119\n\nLANGUAGE: text\nCODE:\n```\n* feat(line): add `Line::raw` constructor\n\nThere is already `Span::raw` and `Text::raw` methods\nand this commit simply adds `Line::raw` method for symmetry.\n\nMulti-line content is converted to multiple spans with the new line removed\n```\n\n----------------------------------------\n\nTITLE: Implementing Sixel Support with Voluntary Skipping in Ratatui\nDESCRIPTION: Adds support for Sixel bitmap graphics in terminals by implementing a voluntary skipping capability for cells, allowing proper rendering of Sixel graphics without overwriting.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_157\n\nLANGUAGE: text\nCODE:\n```\n> Sixel is a bitmap graphics format supported by terminals.\n> \"Sixel mode\" is entered by sending the sequence ESC+Pq.\n> The \"String Terminator\" sequence ESC+\\ exits the mode.\n\nThe graphics are then rendered with the top left positioned at the\ncursor position.\n\nIt is actually possible to render sixels in ratatui with just\n`buf.get_mut(x, y).set_symbol(\"^[Pq ... ^[\")`. But any buffer covering\nthe \"image area\" will overwrite the graphics. This is most likely the same\nbuffer, even though it consists of empty characters `' '`, except for\nthe top-left character that starts the sequence.\n\nThus, either the buffer or cells must be specialized to avoid drawing\nover the graphics. This patch specializes the `Cell` with a\n`set_skip(bool)` method, based on James' patch:\nhttps://github.com/TurtleTheSeaHobo/tui-rs/tree/sixel-support\nI unsuccessfully tried specializing the `Buffer`, but as far as I can tell\nbuffers get merged all the way \"up\" and thus skipping must be set on the\nCells. Otherwise some kind of \"skipping area\" state would be required,\nwhich I think is too complicated.\n\nHaving access to the buffer now it is possible to skip all cells but the\nfirst one which can then `set_symbol(sixel)`. It is up to the user to\ndeal with the graphics size and buffer area size. It is possible to get\nthe terminal's font size in pixels with a syscall.\n\nAn image widget for ratatui that uses this `skip` flag is available at\nhttps://github.com/benjajaja/ratatu-image.\n```\n\n----------------------------------------\n\nTITLE: Example Refactoring - Tab Components\nDESCRIPTION: Updates to the Tabs example implementing new features from version 0.26 including ref widgets, text rendering, and dividers/padding with improved application approach and styling.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_79\n\nLANGUAGE: text\nCODE:\n```\n- Used a few new techniques from the 0.26 features (ref widgets, text rendering,\n    dividers / padding etc.)\n- Updated the app to a simpler application approach\n- Use color_eyre\n- Make it look pretty (colors, new proportional borders)\n\n![Made with VHS](https://vhs.charm.sh/vhs-4WW21XTtepDhUSq4ZShO56.gif)\n\n---------\nFixes https://github.com/ratatui/ratatui/issues/819\nCo-authored-by: Josh McKinney <joshka@users.noreply.github.com>\n```\n\n----------------------------------------\n\nTITLE: Using the RatatuiLogo Widget in a Terminal UI Application\nDESCRIPTION: Example of how to use the new RatatuiLogo widget to render the Ratatui logo in a terminal application, which can be used in help or about screens.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui::{Frame, widgets::RatatuiLogo};\n\nfn draw(frame: &mut Frame) {\n    frame.render_widget(RatatuiLogo::tiny(), frame.area());\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Needless Borrows in Table::widths Method\nDESCRIPTION: Shows how to update code to fix clippy warnings about needless borrows when passing slices to the Table::widths method, which now accepts any type implementing IntoIterator<Item = AsRef<Constraint>>.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n- let table = Table::new(rows).widths(&[Constraint::Length(1)]);\n// becomes\n+ let table = Table::new(rows, [Constraint::Length(1)]);\n```\n\n----------------------------------------\n\nTITLE: Making SpaceBetween with One Element Behave Like Stretch\nDESCRIPTION: Modifies the SpaceBetween layout behavior to act the same as Stretch when there's only one element, providing more consistent layout behavior.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_68\n\nLANGUAGE: text\nCODE:\n```\nWhen there's just one element, `SpaceBetween` should do the same thing\nas `Stretch`.\n```\n\n----------------------------------------\n\nTITLE: Running the Ratatui Table Demo using Cargo\nDESCRIPTION: Command to execute the table component example from the Ratatui project. This launches the demo application that showcases how to create and interact with tables in a terminal user interface.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/table/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p table\n```\n\n----------------------------------------\n\nTITLE: Converting Mutable Line::patch_style to Fluent API Style\nDESCRIPTION: Shows how to update code that uses mutable references with patch_style to the new fluent API style that takes ownership of self and returns it. This applies to Text, Line, and Span types.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n- let mut line = Line::from(\"foobar\");\n- line.patch_style(style);\n// becomes\n+ let line = Line::new(\"foobar\").patch_style(style);\n```\n\n----------------------------------------\n\nTITLE: Describing Scrollbar Implementation Improvements\nDESCRIPTION: Explains the simplification of the scrollbar implementation with more proportional thumb size calculation relative to visible content.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_70\n\nLANGUAGE: text\nCODE:\n```\nImplementation was simplified and calculates the size of the thumb a\nbit more proportionally to the content that is visible.\n```\n\n----------------------------------------\n\nTITLE: Enhancing Buffer::with_lines to Accept IntoIterator\nDESCRIPTION: This improvement allows Buffer::with_lines to accept any IntoIterator instead of requiring a Vec. It enables more ergonomic usage, such as directly passing string slices without needing to call collect() first.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_97\n\nLANGUAGE: text\nCODE:\n```\nThis can make it easier to use `Buffer::with_lines` with iterators that\ndon't necessarily produce a `Vec`. For example, this allows using\n`Buffer::with_lines` with `&[&str]` directly, without having to call\n`collect` on it first.\n```\n\n----------------------------------------\n\nTITLE: Adding Default Line Style Field to Struct Initialization\nDESCRIPTION: Shows how to update code that creates Line structs directly to account for the new style field. Options include adding ..Default::default() to the initialization or using constructor methods.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n  let line = Line {\n      spans: vec![\"\".into()],\n      alignment: Alignment::Left,\n+     ..Default::default()\n  };\n\n  // or\n\n  let line = Line::raw(vec![\"\".into()])\n      .alignment(Alignment::Left);\n```\n\n----------------------------------------\n\nTITLE: Running the Ratatui Flex Layout Demo with Cargo\nDESCRIPTION: Command to run the interactive flex layout demonstration example using Cargo. This command executes the flex package which shows how to implement and use flex layouts in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/flex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p flex\n```\n\n----------------------------------------\n\nTITLE: Implementing Stylize for String in Ratatui\nDESCRIPTION: Adds Stylize implementation for String, allowing Stylize methods to be called on temporary Strings. This is a breaking change that may affect existing code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_128\n\nLANGUAGE: text\nCODE:\n```\nAlthough the `Stylize` trait is already implemented for `&str` which\nextends to `String`, it is not implemented for `String` itself. This\ncommit adds an impl of Stylize that returns a Span<'static> for `String`\nso that code can call Stylize methods on temporary `String`s.\n\nE.g. the following now compiles instead of failing with a compile error\nabout referencing a temporary value:\n\n    let s = format!(\"hello {name}!\", \"world\").red();\n\nBREAKING CHANGE: This may break some code that expects to call Stylize\nmethods on `String` values and then use the String value later. This\nwill now fail to compile because the String is consumed by set_style\ninstead of a slice being created and consumed.\n\nThis can be fixed by cloning the `String`. E.g.:\n\n    let s = String::from(\"hello world\");\n    let line = Line::from(vec![s.red(), s.green()]); // fails to compile\n    let line = Line::from(vec![s.clone().red(), s.green()]); // works\n\nFixes https://discord.com/channels/1070692720437383208/1072907135664529508/1148229700821450833\n```\n\n----------------------------------------\n\nTITLE: Using simplified Bar::label method with Into<Line>\nDESCRIPTION: Shows how to use the updated Bar::label method which now accepts Into<Line> instead of requiring explicit conversion.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- Bar::default().label(\"foo\".into());\n+ Bar::default().label(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Updating Terminal Options for Viewport in Rust with Ratatui\nDESCRIPTION: Shows the change in Terminal::with_options() method to use an enum Viewport instead of a struct, supporting inline viewports in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nlet terminal = Terminal::with_options(backend, TerminalOptions {\n-    viewport: Viewport::fixed(area),\n});\n// becomes\nlet terminal = Terminal::with_options(backend, TerminalOptions {\n+    viewport: Viewport::Fixed(area),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Labels to Barchart Widget in Ratatui\nDESCRIPTION: Implements horizontal labels for the BarChart widget, which were missing in the initial implementation of the horizontal mode.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_123\n\nLANGUAGE: text\nCODE:\n```\nLabels were missed in the initial implementation of the horizontal\nmode for the BarChart widget. This adds them.\n\nFixes https://github.com/ratatui/ratatui/issues/499\n```\n\n----------------------------------------\n\nTITLE: Layout Flex Configuration in Rust\nDESCRIPTION: Example of using Legacy flex mode in layout configuration.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\nLayout::vertical([Length(25), Length(25)]).flex(Flex::Legacy)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Frame by Removing Generic Backend Parameter\nDESCRIPTION: Documentation for a breaking change that simplifies UI code by removing the generic Backend parameter from the Frame type, instead directly storing viewport area and buffer references provided at creation time.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_118\n\nLANGUAGE: text\nCODE:\n```\nThis change simplifies UI code that uses the Frame type. E.g.:\n\n```rust\nfn draw<B: Backend>(frame: &mut Frame<B>) {\n    // ...\n}\n```\n\nFrame was generic over Backend because it stored a reference to the\nterminal in the field. Instead it now directly stores the viewport area\nand current buffer. These are provided at creation time and are valid\nfor the duration of the frame.\n\nBREAKING CHANGE: Frame is no longer generic over Backend. Code that\naccepted a Frame<Backend> will now need to accept a Frame.\n```\n\n----------------------------------------\n\nTITLE: Background Color Generic Implementation\nDESCRIPTION: Explanation of making the background color method generic to accept any value convertible to Color.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nThis PR makes `.bg(color)` generic accepting anything that can be\nconverted into `Color`; similar to the `.fg(color)` method on the same\ntrait\n```\n\n----------------------------------------\n\nTITLE: Correcting Chart Top Line Rendering Style in Ratatui\nDESCRIPTION: Fixes a rendering bug where the top line of the chart used the chart style instead of the dataset style. Now only sets the style for the text width.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_125\n\nLANGUAGE: text\nCODE:\n```\nA bug in the rendering caused the top line of the chart to be rendered\nusing the style of the chart, instead of the dataset style. This is\nfixed by only setting the style for the width of the text, and not the\nentire row.\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests for Canvas Line in Ratatui\nDESCRIPTION: This snippet describes the addition of unit tests for the line feature in the canvas widget of Ratatui, along with a new constructor for simplifying line creation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_180\n\nLANGUAGE: text\nCODE:\n```\nAlso add constructor to simplify creating lines\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Track Symbol to Scrollbar Widget in Ratatui\nDESCRIPTION: Introduces an optional track symbol for the scrollbar widget, simplifying composition with other widgets. This is a breaking change.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_160\n\nLANGUAGE: text\nCODE:\n```\nThe track symbol is now optional, simplifying composition with other\nwidgets.\n```\n\n----------------------------------------\n\nTITLE: Spans Deprecation Documentation\nDESCRIPTION: Details about the removal of deprecated Spans type and its replacement with Line type.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_150\n\nLANGUAGE: text\nCODE:\n```\nThe `Spans` type (plural, not singular) was replaced with a more ergonomic `Line` type\\nin Ratatui v0.21.0 and marked deprecated but left for backwards compatibility. This is now\\nremoved.\\n\\n- `Line` replaces `Spans`\\n- `Buffer::set_line` replaces `Buffer::set_spans`\n```\n\n----------------------------------------\n\nTITLE: Explaining Window Size Implementation for Backend\nDESCRIPTION: Documentation for a backend feature that provides window size information, useful for image support (sixel, iTerm2, Kitty) to handle graphics in terms of rectangular areas and assist with image sizing and positioning.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_114\n\nLANGUAGE: text\nCODE:\n```\nFor image (sixel, iTerm2, Kitty...) support that handles graphics in\nterms of `Rect` so that the image area can be included in layouts.\n\nFor example: an image is loaded with a known pixel-size, and drawn, but\nthe image protocol has no mechanism of knowing the actual cell/character\narea that been drawn on. It is then impossible to skip overdrawing the\narea.\n\nReturning the window size in pixel-width / pixel-height, together with\ncolumns / rows, it can be possible to account the pixel size of each cell\n/ character, and then known the `Rect` of a given image, and also resize\nthe image so that it fits exactly in a `Rect`.\n\nCrossterm and termwiz also both return both sizes from one syscall,\nwhile termion does two.\n\nAdd a `Size` struct for the cases where a `Rect`'s `x`/`y` is unused\n(always zero).\n\n`Size` is not \"clipped\" for `area < u16::max_value()` like `Rect`. This\nis why there are `From` implementations between the two.\n```\n\n----------------------------------------\n\nTITLE: Replacing Block::title_on_bottom with Title::position\nDESCRIPTION: Shows how to migrate from the deprecated Block::title_on_bottom method to using Block::title with Title::position to set a title at the bottom of a block.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- block.title(\"foobar\").title_on_bottom();\n+ block.title(Title::from(\"foobar\").position(Position::Bottom));\n```\n\n----------------------------------------\n\nTITLE: Improving Documentation Examples with Prelude Imports\nDESCRIPTION: Commit message about adding prelude::* imports to documentation examples for simplicity and to highlight the use of the prelude.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_143\n\nLANGUAGE: text\nCODE:\n```\nThis commit adds `prelude::*` all doc examples and widget::* to those\nthat need it. This is done to highlight the use of the prelude and\nsimplify the examples.\n\n- Examples in Type and module level comments show all imports and use\n  `prelude::*` and `widget::*` where possible.\n- Function level comments hide imports unless there are imports other\n  than `prelude::*` and `widget::*`.\n```\n\n----------------------------------------\n\nTITLE: Layout Gap Fix Description\nDESCRIPTION: Details about fixing gaps between chunks in layout implementation\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_166\n\nLANGUAGE: text\nCODE:\n```\nPreviously the layout used the floor of the calculated start and width\nas the value to use for the split Rects. This resulted in gaps between\nthe split rects.\n\nThis change modifies the layout to round to the nearest column instead\nof taking the floor of the start and width. This results in the start\nand end of each rect being rounded the same way and being strictly\nadjacent without gaps.\n\nBecause there is a required constraint that ensures that the last end is\nequal to the area end, there is no longer the need to fixup the last\nitem width when the fill (as e.g. width = x.99 now rounds to x+1 not x).\n\nThe colors example has been updated to use Ratio(1, 8) instead of\nPercentage(13), as this now renders without gaps for all possible sizes,\nwhereas previously it would have left odd gaps between columns.\n```\n\n----------------------------------------\n\nTITLE: Adding Color and Modifiers Examples in Ratatui\nDESCRIPTION: This snippet describes the addition of examples showcasing available colors and modifiers in Ratatui, including an implementation of Display for Color.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_173\n\nLANGUAGE: text\nCODE:\n```\nThe intent of these examples is to show the available colors and\nmodifiers.\n\n- added impl Display for Color\n\n![colors](https://vhs.charm.sh/vhs-2ZCqYbTbXAaASncUeWkt1z.gif)\n![modifiers](https://vhs.charm.sh/vhs-2ovGBz5l3tfRGdZ7FCw0am.gif)\n```\n\n----------------------------------------\n\nTITLE: Constraints Simplification\nDESCRIPTION: Documentation about simplifying constraints by using bare arrays instead of array refs/Vecs.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_151\n\nLANGUAGE: text\nCODE:\n```\nUse bare arrays rather than array refs / Vecs for all constraint\\nexamples.\n```\n\n----------------------------------------\n\nTITLE: Refactoring WidgetRef implementation to Widget\nDESCRIPTION: Shows how to update widget implementations after the removal of blanket WidgetRef implementation, requiring widgets to implement Widget for references instead.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-impl WidgetRef for Foo {\n-    fn render_ref(&self, area: Rect, buf: &mut Buffer)\n+impl Widget for &Foo {\n+    fn render(self, area: Rect, buf: &mut Buffer)\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Span Alignment Methods in Rust\nDESCRIPTION: Deprecates to_*_line methods and replaces them with into_*_line methods to better follow Rust naming conventions for consuming methods.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nSpan::to_centered_line\nSpan::to_left_aligned_line\nSpan::to_right_aligned_line\n```\n\nLANGUAGE: rust\nCODE:\n```\nSpan::into_centered_line\nSpan::into_left_aligned_line\nSpan::into_right_aligned_line\n```\n\n----------------------------------------\n\nTITLE: Adding Feature Flag for Underline Color in Ratatui Backend\nDESCRIPTION: Introduces a feature flag for the underline color attribute to support Windows 7. The feature is enabled by default but can be disabled using cargo flags.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_122\n\nLANGUAGE: toml\nCODE:\n```\nratatui = { version = \"0.24.0\", default-features = false, features = [\"crossterm\"] }\n```\n\n----------------------------------------\n\nTITLE: Describing Breaking Style Method Changes\nDESCRIPTION: Details the breaking changes to patch_style and reset_style methods in Text, Line, and Span to make them consistent with the fluent setter pattern used elsewhere in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_77\n\nLANGUAGE: text\nCODE:\n```\nPreviously, `patch_style` and `reset_style` in `Text`, `Line` and `Span`\n were using a mutable reference to `Self`. To be more consistent with\n the rest of `ratatui`, which is using fluent setters, these now take\n ownership of `Self` and return it.\n```\n\n----------------------------------------\n\nTITLE: Updating Terminal Module Import Path in Rust\nDESCRIPTION: Example showing the breaking change in how terminal module types should be imported after making the terminal module private. The types are now exported from the root of the crate instead of the terminal module.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n- use ratatui::terminal::{CompletedFrame, Frame, Terminal, TerminalOptions, ViewPort};\n+ use ratatui::{CompletedFrame, Frame, Terminal, TerminalOptions, ViewPort};\n```\n\n----------------------------------------\n\nTITLE: Buffer Testing Enhancement Documentation\nDESCRIPTION: Documentation about allowing with_lines to accept Vec<Into<Line>> for simplified unit testing without manual style setting.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_144\n\nLANGUAGE: text\nCODE:\n```\nThis allows writing unit tests without having to call set_style on the\\nexpected buffer.\n```\n\n----------------------------------------\n\nTITLE: Enhancing Custom Widget Example with Button Functionality\nDESCRIPTION: Commit message noting the transformation of the custom widget example into a button with mouse support.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_134\n\nLANGUAGE: text\nCODE:\n```\nThe widget also now supports mouse\n```\n\n----------------------------------------\n\nTITLE: Updating BorderType Methods in Rust with Ratatui\nDESCRIPTION: Shows the renaming of BorderType::line_symbols() to border_symbols() and the introduction of a new struct symbols::border::Set for custom border settings in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\n- let line_set: symbols::line::Set = BorderType::line_symbols(BorderType::Plain);\n// becomes\n+ let border_set: symbols::border::Set = BorderType::border_symbols(BorderType::Plain);\n```\n\n----------------------------------------\n\nTITLE: Calendar Optimization\nDESCRIPTION: Performance improvement for calendar functionality by using const fn and optimizing comparisons without type casting.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nAlso, do the comparison without `as u8`. Stays the same at runtime and\nis cleaner code.\n```\n\n----------------------------------------\n\nTITLE: Describing Terminal Type Extraction\nDESCRIPTION: Notes the extraction of types from the terminal module into separate files and changes to field visibility.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_76\n\nLANGUAGE: text\nCODE:\n```\nFields on Frame that were private are now pub(crate).\n```\n\n----------------------------------------\n\nTITLE: Migrating from Spans to Line in Rust with Ratatui\nDESCRIPTION: Illustrates the replacement of the deprecated Spans type with Line in Ratatui, affecting how text is set in buffers.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\n- let spans = Spans::from(some_string_str_span_or_vec_span);\n- buffer.set_spans(0, 0, spans, 10);\n// becomes\n+ let line - Line::from(some_string_str_span_or_vec_span);\n+ buffer.set_line(0, 0, line, 10);\n```\n\n----------------------------------------\n\nTITLE: Documentation Method Organization\nDESCRIPTION: Adds an overview of relevant methods organized under Constructor Methods, Setter Methods, and Other Methods subtitles.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_78\n\nLANGUAGE: text\nCODE:\n```\nAdd an overview of the relevant methods under `Constructor Methods`, `Setter Methods`, and `Other Methods` subtitles.\n```\n\n----------------------------------------\n\nTITLE: Barchart Empty Groups Fix Description\nDESCRIPTION: Explanation of handling empty groups in barchart to prevent panic and incorrect rendering\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_164\n\nLANGUAGE: text\nCODE:\n```\nThis unlikely to happen, since nobody wants to add an empty group.\nEven we fix the panic, things will not render correctly.\nSo it is better to just not add them to the BarChart.\n```\n\n----------------------------------------\n\nTITLE: Updating Table Widget Implementation in Rust\nDESCRIPTION: Demonstrates the migration required for the breaking change in the Table widget API in v0.14.0. Shows how to update Row construction, header implementation, and styling to align with the new API.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_190\n\nLANGUAGE: diff\nCODE:\n```\n    let failure_style = Style::default()\n        .fg(Color::Red)\n        .add_modifier(Modifier::RAPID_BLINK | Modifier::CROSSED_OUT);\n-    let header = [\"Server\", \"Location\", \"Status\"];\n     let rows = app.servers.iter().map(|s| {\n         let style = if s.status == \"Up\" {\n             up_style\n         } else {\n             failure_style\n         };\n-        Row::StyledData(vec![s.name, s.location, s.status].into_iter(), style)\n+        Row::new(vec![s.name, s.location, s.status]).style(style)\n     });\n-    let table = Table::new(header.iter(), rows)\n+    let table = Table::new(rows)\n+        .header(\n+            Row::new(vec![\"Server\", \"Location\", \"Status\"])\n+                .style(Style::default().fg(Color::Yellow))\n+                .bottom_margin(1),\n+        )\n         .block(Block::default().title(\"Servers\").borders(Borders::ALL))\n-        .header_style(Style::default().fg(Color::Yellow))\n         .widths(&[\n             Constraint::Length(15),\n             Constraint::Length(15),\n```\n\n----------------------------------------\n\nTITLE: Layout Memory Optimization\nDESCRIPTION: Optimization to avoid unnecessary memory allocation when using Layout split ergonomic utilities.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nDon't create intermediate vec in `Layout::areas` and\n`Layout::spacers` when there's no need for one.\n```\n\n----------------------------------------\n\nTITLE: Implementing Cargo-nextest for Running Tests in CI\nDESCRIPTION: This commit replaces the standard Rust test runner with cargo-nextest in the CI workflow. It also updates the Makefile to run library tests before documentation tests.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_94\n\nLANGUAGE: text\nCODE:\n```\n* chore(ci): use cargo-nextest for running tests\n\n* refactor(make): run library tests before doc tests\n```\n\n----------------------------------------\n\nTITLE: Refactoring List Direction in Rust\nDESCRIPTION: Shows changes to replace deprecated 'start_corner' with 'direction' for List widget, and removal of Corner enum.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- list.start_corner(Corner::TopLeft);\n- list.start_corner(Corner::TopRight);\n// This is not an error, BottomRight rendered top to bottom previously\n- list.start_corner(Corner::BottomRight);\n// all becomes\n+ list.direction(ListDirection::TopToBottom);\n\n- list.start_corner(Corner::BottomLeft);\n// becomes\n+ list.direction(ListDirection::BottomToTop);\n```\n\n----------------------------------------\n\nTITLE: Documentation about List Widget Components in Text\nDESCRIPTION: A note about documentation improvements for the List widget and its subcomponents like ListState and ListItem.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_104\n\nLANGUAGE: text\nCODE:\n```\nAdds documentation to the List widget and all its sub components like `ListState` and `ListItem`\n```\n\n----------------------------------------\n\nTITLE: Improving Scrollbar Documentation in Ratatui\nDESCRIPTION: This snippet describes the addition of documentation for the 'scroll' offset in the paragraph widget of Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_178\n\nLANGUAGE: text\nCODE:\n```\n* style(paragraph): add documentation for \"scroll\"'s \"offset\"\n\n* style(paragraph): add more text to the scroll doc-comment\n```\n\n----------------------------------------\n\nTITLE: Running the WidgetRef Container Demo in Ratatui using Cargo\nDESCRIPTION: Command to run the widget-ref-container demo application using Cargo. This will execute the demo showing how to use WidgetRef to store widgets in a container.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/widget-ref-container/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p widget-ref-container\n```\n\n----------------------------------------\n\nTITLE: Fixing Broken Tests in Table Component\nDESCRIPTION: Repairs broken tests in the table.rs file and improves test implementation by using default instead of raw values.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_69\n\nLANGUAGE: text\nCODE:\n```\n* fix: broken tests in table.rs\n\n* fix: Use default instead of raw\n```\n\n----------------------------------------\n\nTITLE: Text Creation Examples\nDESCRIPTION: Demonstrates creating text blocks using the text! macro with basic strings.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::{span, line, text};\n\nlet name = \"world!\";\nlet text = text![\"hello\", format!(\"{name}\")];\nlet text = text![\"bye\"; 2];\n```\n\n----------------------------------------\n\nTITLE: Installing Ratatui Macros with Cargo\nDESCRIPTION: Command to add ratatui-macros as a dependency to a Rust project using cargo.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add ratatui-macros\n```\n\n----------------------------------------\n\nTITLE: Adding Tests for TestBackend in Ratatui\nDESCRIPTION: This snippet describes the addition of tests for the TestBackend in Ratatui to catch potential future bugs in the test backend.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_183\n\nLANGUAGE: text\nCODE:\n```\nThese are mostly to catch any future bugs introduced in the test backend\n```\n\n----------------------------------------\n\nTITLE: Describing UI Improvements in Constraints and Flex Examples\nDESCRIPTION: Outlines UI improvements made to the layout examples, including color schemes, block rendering, scrollbar addition, panic handling, and general readability enhancements.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_72\n\nLANGUAGE: text\nCODE:\n```\nThis PR is a follow up to\nhttps://github.com/ratatui/ratatui/pull/811.\n\nIt improves the UI of the layouts by\n\n- thoughtful accessible color that represent priority in constraints\nresolving\n- using QUADRANT_OUTSIDE symbol set for block rendering\n- adding a scrollbar\n- panic handling\n- refactoring for readability\n\nto name a few. Here are some example gifs of the outcome:\n\n\n![constraints](https://github.com/ratatui/ratatui/assets/381361/8eed34cf-e959-472f-961b-d439bfe3324e)\n\n\n![flex](https://github.com/ratatui/ratatui/assets/381361/3195a56c-9cb6-4525-bc1c-b969c0d6a812)\n\n---------\n```\n\n----------------------------------------\n\nTITLE: Running the Todo List Demo with Cargo\nDESCRIPTION: Command to execute the todo list example application using Cargo. This will build and run the todo-list package which demonstrates a simple todo list implementation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/todo-list/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p todo-list\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmarks for Block Widget in Ratatui\nDESCRIPTION: This snippet describes the addition of benchmarks to the block widget in Ratatui to uncover potential performance issues.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_179\n\nLANGUAGE: text\nCODE:\n```\nAdded benchmarks to the block widget to uncover eventual performance issues\n```\n\n----------------------------------------\n\nTITLE: Row Creation Examples\nDESCRIPTION: Demonstrates creating table rows using the row! macro with basic cell content.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::row;\n\nlet rows = [\n    row![\"hello\", \"world\"],\n    row![\"goodbye\", \"world\"],\n];\n```\n\n----------------------------------------\n\nTITLE: Example Simplification - Layout Methods\nDESCRIPTION: Updates examples to use new Layout::horizontal and vertical constructors with Rect::split_array.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_86\n\nLANGUAGE: text\nCODE:\n```\nUse the new `Layout::horizontal` and `vertical` constructors and\n`Rect::split_array` through all the examples.\n```\n\n----------------------------------------\n\nTITLE: Display and FromStr Traits Implementation\nDESCRIPTION: Documentation noting the use of strum for trait implementations with some manual implementations and tests.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_187\n\nLANGUAGE: text\nCODE:\n```\nUse strum for most of these, with a couple of manual implementations,\nand related tests\n```\n\n----------------------------------------\n\nTITLE: Describing Scroll Addition to Flex Example\nDESCRIPTION: Details the addition of scroll functionality to the flex example along with UI improvements and additional constraint interaction examples.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_73\n\nLANGUAGE: text\nCODE:\n```\nThis commit adds `scroll` to the flex example. It also adds more examples to showcase how constraints interact. It improves the UI to make it easier to understand and short terminal friendly.\n\n<img width=\"380\" alt=\"image\" src=\"https://github.com/ratatui/ratatui/assets/1813121/30541efc-ecbe-4e28-b4ef-4d5f1dc63fec\"/>\n\n---------\n```\n\n----------------------------------------\n\nTITLE: Aligning Table Default and Constructor Implementations\nDESCRIPTION: Fixes inconsistency between Table::default() and Table::new() implementations by ensuring both set the same default values for column_spacing and segment_size fields. This is a breaking change.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_65\n\nLANGUAGE: text\nCODE:\n```\nIn https://github.com/ratatui/ratatui/pull/660 we introduced the\nsegment_size field to the Table struct. However, we forgot to update\nthe default() implementation to match the new() implementation. This\nmeant that the default() implementation picked up SegmentSize::default()\ninstead of SegmentSize::None.\n\nAdditionally the introduction of Table::default() in an earlier PR,\nhttps://github.com/ratatui/ratatui/pull/339, was also missing the\ndefault for the column_spacing field (1).\n\nThis commit fixes the default() implementation to match the new()\nimplementation of these two fields by implementing the Default trait\nmanually.\n```\n\n----------------------------------------\n\nTITLE: Terminal Layout Output Example\nDESCRIPTION: Shows the ASCII art output of the terminal layout rendering, demonstrating how borders are drawn and intersect between blocks.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: plain\nCODE:\n```\n┌────────┐╔════════╗╔════════╗╔════════╗┌────────┐\n└────────┘╚════════╝╚════════╝╚════════╝└────────┘\n┌─────────┐╔════════╔════════╔════════╗┌─────────┐\n└─────────┘╚════════╚════════╚════════╝└─────────┘\n```\n\n----------------------------------------\n\nTITLE: Documenting BarChart Widget\nDESCRIPTION: Commit message noting the addition of documentation to the BarChart widget and its sub-modules.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_130\n\nLANGUAGE: text\nCODE:\n```\nAdd documentation to the `BarChart` widgets and its sub-modules.\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Demo with Termion Backend\nDESCRIPTION: Command to run the demo example using the Termion terminal backend, explicitly disabling default features and enabling termion\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p demo --no-default-features --features termion\n```\n\n----------------------------------------\n\nTITLE: Hash Trait Implementation Documentation\nDESCRIPTION: Documentation about Hash trait implementation and field ordering conventions.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_189\n\nLANGUAGE: text\nCODE:\n```\nReorder the derive fields to be more consistent:\n\n    Debug, Default, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash\n\nHash trait won't be impl in this PR due to rust std design.\nIf we need hash trait for f64 related structs in the future,\nwe should consider wrap f64 into a new type.\n```\n\n----------------------------------------\n\nTITLE: Example Update - Tabs Design\nDESCRIPTION: Enhances the tabs example with improved visual design and implementation of Tailwind colors.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_83\n\nLANGUAGE: text\nCODE:\n```\nThis PR adds:\n\nfor tabs.rs\n\n- general refactoring on code\n- subjectively better looking front\n- add tailwind colors\n\nfor tabs.tape\n\n- change to get better output from the new code\n\nHere is the new output:\n\n![tabs](https://github.com/ratatui/ratatui/assets/30180366/0a9371a5-e90d-42ba-aba5-70cbf66afd1f)\n```\n\n----------------------------------------\n\nTITLE: Layout Documentation - Split Methods\nDESCRIPTION: Documents the differences between split methods in the layout system.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_87\n\nLANGUAGE: text\nCODE:\n```\n* docs(layout): document the difference in the split methods\n\n* fix: doc suggestion\n```\n\n----------------------------------------\n\nTITLE: Running the Constraints Demo in Ratatui using Cargo\nDESCRIPTION: Command to run the constraints demo example from the Ratatui project. This executes the constraints package to demonstrate different types of layout constraints in the terminal UI.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/constraints/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p constraints\n```\n\n----------------------------------------\n\nTITLE: Documenting Terminal Module\nDESCRIPTION: Commit message noting the addition of documentation to the terminal module and reorganization of the implementation blocks.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_138\n\nLANGUAGE: text\nCODE:\n```\n- moves the impl Terminal block up to be closer to the type definition\n```\n\n----------------------------------------\n\nTITLE: Running the Chart Demo with Cargo\nDESCRIPTION: Command to execute the chart rendering example using Cargo. This will run the chart demo package which demonstrates different chart types in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/chart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p chart\n```\n\n----------------------------------------\n\nTITLE: Running the Tracing Example in Ratatui\nDESCRIPTION: Shell commands for running the tracing example that demonstrates logging to a file, with options for setting different log levels via environment variables.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example tracing\nRUST_LOG=trace cargo run --example=tracing\ncat tracing.log\n```\n\n----------------------------------------\n\nTITLE: Running Inline Viewport Demo in Ratatui\nDESCRIPTION: Command to execute the inline viewport demo using Cargo. The demo showcases rendering in a specific screen area using Ratatui's inline viewport feature.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/inline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p inline\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Demo2 Example using Cargo\nDESCRIPTION: Command to execute the Demo2 example using Cargo package manager. This runs the demo2 package which demonstrates core Ratatui TUI functionality.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/demo2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p demo2\n```\n\n----------------------------------------\n\nTITLE: Updating Block Example in Ratatui\nDESCRIPTION: This code snippet shows an updated GIF for the Block example in the Ratatui project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_174\n\nLANGUAGE: text\nCODE:\n```\n![Block example](https://vhs.charm.sh/vhs-5X6hpReuDBKjD6hLxmDQ6F.gif)\n```\n\n----------------------------------------\n\nTITLE: Adding Breaking Changes Documentation\nDESCRIPTION: Commit message about adding a document to track breaking changes across versions, manually curated from the changelog.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_141\n\nLANGUAGE: text\nCODE:\n```\nDocument the breaking changes in each version. This document is\nmanually curated by summarizing the breaking changes in the changelog.\n```\n\n----------------------------------------\n\nTITLE: Running the RGB Colors Demo with Cargo\nDESCRIPTION: Command to execute the RGB colors animation demo using Cargo, which demonstrates the full range of RGB colors in the Ratatui library.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/colors-rgb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p colors-rgb\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Examples with Cargo\nDESCRIPTION: Command to run specific examples from the Ratatui examples collection using Cargo's workspace features. Replace 'example-name' with the name of the example you want to run.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p example-name\n```\n\n----------------------------------------\n\nTITLE: Running the Ratatui Tracing Demo in Shell\nDESCRIPTION: Command to execute the tracing demonstration example from the Ratatui project. This runs the specific example package that demonstrates how to use the tracing crate for logging to a file.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/tracing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p tracing\n```\n\n----------------------------------------\n\nTITLE: Replacing LineGauge::gauge_style with filled_style and unfilled_style\nDESCRIPTION: Shows how to migrate from the deprecated LineGauge::gauge_style method to the new LineGauge::filled_style and LineGauge::unfilled_style methods for more granular styling control.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nlet gauge = LineGauge::default()\n- .gauge_style(Style::default().fg(Color::Red).bg(Color::Blue)\n+ .filled_style(Style::default().fg(Color::Green))\n+ .unfilled_style(Style::default().fg(Color::White));\n```\n\n----------------------------------------\n\nTITLE: Documentation Organization - Link Updates\nDESCRIPTION: Reorganizes and updates documentation links for better accessibility and logical ordering.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_90\n\nLANGUAGE: text\nCODE:\n```\nLink to the contributing, changelog, and breaking changes docs at the\ntop of the page instead of just in in the main part of the doc. This\nmakes it easier to find them.\n\nRearrange the links to be in a more logical order.\n\nUse link refs for all the links\n\nFix up the CI link to point to the right workflow\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Demo with Crossterm Backend\nDESCRIPTION: Command to run the demo example using the Crossterm terminal backend\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p demo\n```\n\n----------------------------------------\n\nTITLE: Running the Canvas Demo in Ratatui\nDESCRIPTION: Command to execute the canvas demo using Cargo. This will run the specific example package for canvas rendering.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/canvas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p canvas\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Demo with Termwiz Backend\nDESCRIPTION: Command to run the demo example using the Termwiz terminal backend, explicitly disabling default features and enabling termwiz\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/demo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p demo --no-default-features --features termwiz\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Ratatui Project with cargo-xtask\nDESCRIPTION: Instructions for setting up the Ratatui project locally using git clone and cargo-xtask for building.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ratatui/ratatui.git\ncd ratatui\ncargo xtask build\n```\n\n----------------------------------------\n\nTITLE: Updating Rect::inner Usage with Margin in Rust\nDESCRIPTION: Example of modifying code to accommodate the change in Rect::inner method, which now takes a Margin directly instead of a reference to Margin.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-let area = area.inner(&Margin {\n+let area = area.inner(Margin {\n     vertical: 0,\n     horizontal: 2,\n });\n```\n\n----------------------------------------\n\nTITLE: Documentation Update - Template Links\nDESCRIPTION: Updates links to reference the templates repository.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_88\n\nLANGUAGE: text\nCODE:\n```\nThis PR updates links to the `templates` repository.\n```\n\n----------------------------------------\n\nTITLE: Running Advanced Widget Implementation Demo in Ratatui\nDESCRIPTION: This command runs the advanced widget implementation demo using Cargo. It specifies the package name 'advanced-widget-impl' to execute the correct example.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/advanced-widget-impl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p advanced-widget-impl\n```\n\n----------------------------------------\n\nTITLE: Running Color Explorer Demo with Cargo\nDESCRIPTION: Shell command to execute the color explorer demo using Cargo package manager\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/color-explorer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p color-explorer\n```\n\n----------------------------------------\n\nTITLE: Running the Ratatui Scrollbar Demo with Cargo\nDESCRIPTION: Command to run the scrollbar demonstration example which shows how to render different types of scrollbars in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/scrollbar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p scrollbar\n```\n\n----------------------------------------\n\nTITLE: Complex Row Composition\nDESCRIPTION: Shows how to create complex table rows using combinations of span!, line!, text!, and row! macros.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::{span, line, text, row};\nlet name = \"Bye!!!\";\nlet text = row![text![line![\"hello\", \"world\".bold()]], span!(Modifier::BOLD; \"{name}\")];\n```\n\n----------------------------------------\n\nTITLE: Running the Ratatui Input Form Example in Shell\nDESCRIPTION: Command to run the input form example using Cargo. This executes the input form example project within the Ratatui framework.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/input-form/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p input-form\n```\n\n----------------------------------------\n\nTITLE: Running the Constraint Explorer Demo with Cargo\nDESCRIPTION: Command to run the interactive constraint explorer demo from the Ratatui project. This demo allows users to experiment with different layout constraints for widgets.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/constraint-explorer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p constraint-explorer\n```\n\n----------------------------------------\n\nTITLE: Installing ratatui-widgets with Cargo\nDESCRIPTION: Command to add the ratatui-widgets crate to a Rust project using Cargo. This is the recommended installation method for including the widget library in a project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-widgets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add ratatui-widgets\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Hello World Demo in Shell\nDESCRIPTION: This command runs the Hello World demo using Cargo, Rust's package manager and build system. It specifies the 'hello-world' package to be run.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/hello-world/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p hello-world\n```\n\n----------------------------------------\n\nTITLE: Running the Weather Demo Application in Rust\nDESCRIPTION: Command to execute the weather demo application using Cargo. This runs the weather package which demonstrates the barchart widget functionality in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/weather/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p weather\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmarks for List Widget in Ratatui\nDESCRIPTION: This snippet describes the addition of benchmarks for the list widget in Ratatui, testing rendering and half-scrolled rendering.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_181\n\nLANGUAGE: text\nCODE:\n```\nAdded benchmarks for the list widget (render and render half scrolled)\n```\n\n----------------------------------------\n\nTITLE: Running Mouse Drawing Demo with Cargo\nDESCRIPTION: Command to execute the mouse drawing demo application using Cargo package manager\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/mouse-drawing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p mouse-drawing\n```\n\n----------------------------------------\n\nTITLE: README Bug Fix Reference in Text\nDESCRIPTION: A note referring to a bug fix for the demo2 example that couldn't run, with a link to the relevant GitHub issue.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_106\n\nLANGUAGE: text\nCODE:\n```\nFixes https://github.com/ratatui/ratatui/issues/594\n```\n\n----------------------------------------\n\nTITLE: Running Async GitHub Demo with Cargo\nDESCRIPTION: Command to run the async GitHub demo example using Cargo package manager. The demo is packaged as 'async-github'.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/async-github/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p async-github\n```\n\n----------------------------------------\n\nTITLE: Running Calendar Explorer Demo with Cargo\nDESCRIPTION: This command runs the calendar explorer demo using Cargo, the Rust package manager. It specifically targets the 'calendar-explorer' package within the project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/calendar-explorer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p calendar-explorer\n```\n\n----------------------------------------\n\nTITLE: Running Ratatui Modifiers Demo in Shell\nDESCRIPTION: Command to run the modifiers demo example using Cargo. This will execute the example project that demonstrates different types of modifiers available in the Ratatui library.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/modifiers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p modifiers\n```\n\n----------------------------------------\n\nTITLE: Fixing Gauge Widget Colors in Ratatui\nDESCRIPTION: Removes a workaround for gauge background colors that is no longer necessary with updated versions of VHS / TTYD.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_127\n\nLANGUAGE: text\nCODE:\n```\nThe background colors of the gauge had a workaround for the issue we had\nwith VHS / TTYD rendering the background color of the gauge. This\nworkaround is no longer necessary in the updated versions of VHS / TTYD.\n\nFixes https://github.com/ratatui/ratatui/issues/501\n```\n\n----------------------------------------\n\nTITLE: Updating Rect::inner Method in Rust\nDESCRIPTION: Changes the Rect::inner method to take Margin directly instead of a reference, which is a breaking change.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-let area = area.inner(&Margin {\n+let area = area.inner(Margin {\n     vertical: 0,\n     horizontal: 2,\n });\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Symbols Refactoring\nDESCRIPTION: Documentation of moving scrollbar symbols to dedicated symbols module\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_167\n\nLANGUAGE: text\nCODE:\n```\nThe symbols and sets are moved from `widgets::scrollbar` to\n`symbols::scrollbar`. This makes it consistent with the other symbol\nsets and allows us to make the scrollbar module private rather than\nre-exporting it.\n```\n\n----------------------------------------\n\nTITLE: Running Custom Widget Demo in Ratatui\nDESCRIPTION: Command to run the custom widget demonstration example using Cargo. This will execute the custom-widget package which contains the interactive widget implementation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/custom-widget/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p custom-widget\n```\n\n----------------------------------------\n\nTITLE: Running Hyperlink Demo in Ratatui\nDESCRIPTION: Command to execute the hyperlink demo using Cargo. This runs the 'hyperlink' package, which is likely a binary target within the Ratatui project demonstrating the hyperlink functionality.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/hyperlink/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p hyperlink\n```\n\n----------------------------------------\n\nTITLE: Running the User Input Demo with Cargo\nDESCRIPTION: Command to run the user input demo example using Cargo. This will execute the binary from the user-input package within the Ratatui project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/user-input/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p user-input\n```\n\n----------------------------------------\n\nTITLE: Updating Rustdoc for Termion Compatibility in Ratatui\nDESCRIPTION: Modifies documentation to prevent rustdoc failures on Windows due to Termion incompatibility. Replaces TermionBackend link with a non-failing alternative.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_126\n\nLANGUAGE: text\nCODE:\n```\nWindows cannot compile termion, so it is not included in the docs.\nRustdoc will fail if it cannot find a link, so the docs fail to build\non windows.\n\nThis replaces the link to TermionBackend with one that does not fail\nduring checks.\n\nFixes https://github.com/ratatui/ratatui/issues/498\n```\n\n----------------------------------------\n\nTITLE: Layout Split Function Optimization\nDESCRIPTION: Further simplification of the split function implementation\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_171\n\nLANGUAGE: text\nCODE:\n```\nRemoves some unnecessary code and makes the function more readable.\nInstead of creating a temporary result and mutating it, we just create\nthe result directly from the list of changes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Layout Constraints Example in Ratatui\nDESCRIPTION: This code snippet shows a GIF demonstrating how layout constraints interact visually in the Ratatui project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_172\n\nLANGUAGE: text\nCODE:\n```\nShows the way that layout constraints interact visually\n\n![example](https://vhs.charm.sh/vhs-1ZNoNLNlLtkJXpgg9nCV5e.gif)\n```\n\n----------------------------------------\n\nTITLE: Moving Example GIFs to GitHub\nDESCRIPTION: Commit message explaining the relocation of example images to a GitHub branch named 'images'.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_135\n\nLANGUAGE: text\nCODE:\n```\n- A new orphan branch named \"images\" is created to store the example\n  images\n```\n\n----------------------------------------\n\nTITLE: Building and Recording Demo with VHS\nDESCRIPTION: Commands for building the demo example and recording a demonstration gif using the VHS tool for project documentation\nSOURCE: https://github.com/ratatui/ratatui/blob/main/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --example demo2\nvhs examples/demo2.tape\n```\n\n----------------------------------------\n\nTITLE: Running the Panic Demo with Cargo\nDESCRIPTION: This command runs the panic demo example using Cargo. It specifies the package name 'panic' to execute the specific example within the Ratatui project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/panic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p panic\n```\n\n----------------------------------------\n\nTITLE: Updating Theme for Examples to Aardvark Blue\nDESCRIPTION: Commit message about updating the theme in examples to Aardvark Blue for better visual presentation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_133\n\nLANGUAGE: text\nCODE:\n```\nThis is a nicer theme that makes the colors pop\n```\n\n----------------------------------------\n\nTITLE: Buffer Filling Implementation\nDESCRIPTION: Simplified Buffer::filled implementation using vec![] macro for better optimization. Used in Terminal::with_options and Terminal::insert_before.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nThe `vec![]` macro is highly optimized by the Rust team and shorter.\nDon't do it manually.\n\nThis change is mainly cleaner code. The only production code that uses\nthis is `Terminal::with_options` and `Terminal::insert_before` so it's\nnot performance relevant on every render.\n```\n\n----------------------------------------\n\nTITLE: Running Gauge Demo in Ratatui\nDESCRIPTION: Command to execute the gauge demo in the Ratatui project. This runs the specific example package for gauges.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/gauge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p gauge\n```\n\n----------------------------------------\n\nTITLE: CI Pull Request Action Configuration\nDESCRIPTION: Configuration details for semantic pull request action and merge group settings.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_145\n\nLANGUAGE: text\nCODE:\n```\n- Use [`action-semantic-pull-request`](https://github.com/amannn/action-semantic-pull-request)\\n- Allow only reading the PR contents\\n- Enable merge group\n```\n\n----------------------------------------\n\nTITLE: Explaining Codegen Units Optimization\nDESCRIPTION: Description of how codegen units affect benchmark optimization in Rust, explaining that the default 16 codegen units can influence benchmark results based on code organization.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nCodegen units are optimized on their own. Per default bench / release\nhave 16 codegen units. What ends up in a codeget unit is rather random\nand can influence a benchmark result as a code change can move stuff\ninto a different codegen unit → prevent / allow LLVM optimizations\nunrelated to the actual change.\n\nMore details: https://doc.rust-lang.org/cargo/reference/profiles.html\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation for Title and Position\nDESCRIPTION: Commit message about adding documentation for the Title and Position components.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_139\n\nLANGUAGE: text\nCODE:\n```\nThis adds documentation for Title and Position\n```\n\n----------------------------------------\n\nTITLE: User Input Unicode Fix\nDESCRIPTION: Solution for handling multi-byte UTF-8 characters in user input example.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nThis is the proposed solution for issue #1068. It solves the bug in the\nuser_input example with multi-byte UTF-8 characters as input.\n```\n\n----------------------------------------\n\nTITLE: Documentation Style - GitHub Admonition\nDESCRIPTION: Updates README.md to use GitHub admonition syntax and adds stable release link.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_89\n\nLANGUAGE: text\nCODE:\n```\n* docs: GitHub admonition syntax for examples README.md\n\n* docs: Add link to stable release\n```\n\n----------------------------------------\n\nTITLE: GitHub Maintainer Update Notification in Text\nDESCRIPTION: A notification about onboarding a new maintainer to the Ratatui project.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_105\n\nLANGUAGE: text\nCODE:\n```\nonboard @Valentin271 as maintainer\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions and Updating Theme in Examples\nDESCRIPTION: Commit message about adding descriptions to examples and implementing the OceanicMaterial theme consistently.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_136\n\nLANGUAGE: text\nCODE:\n```\n- Use the OceanicMaterial consistently in examples\n```\n\n----------------------------------------\n\nTITLE: Buffer Debug Formatting Fix\nDESCRIPTION: Fix for panic in Buffer Debug implementation when width is zero and correction for overridden symbols output.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nFix panic in `Debug for Buffer` when `width == 0`.\nAlso corrects the output when symbols are overridden.\n```\n\n----------------------------------------\n\nTITLE: Importing Ratatui Macros\nDESCRIPTION: Shows how to import the main macros from the ratatui-macros crate.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-macros/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse ratatui_macros::{\n    constraint,\n    constraints,\n    horizontal,\n    vertical,\n    span,\n    line,\n};\n```\n\n----------------------------------------\n\nTITLE: Security Policy Documentation Update in Text\nDESCRIPTION: Description of updates to the security policy documentation with creation and update of SECURITY.md file.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_107\n\nLANGUAGE: text\nCODE:\n```\n* docs: Create SECURITY.md\n\n* Update SECURITY.md\n```\n\n----------------------------------------\n\nTITLE: Explaining Half Block Rendering Example in Text\nDESCRIPTION: A brief description of an example demonstrating how to render big text using half blocks in the Ratatui library.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_103\n\nLANGUAGE: text\nCODE:\n```\nThis is a fun example of how to render big text using half blocks\n```\n\n----------------------------------------\n\nTITLE: Describing Widget Implementation on Mutable References in colors_rgb Example\nDESCRIPTION: Details the refactoring of the colors_rgb example to implement the Widget trait on mutable references, allowing state updates during rendering and adopting a consistent app pattern.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_71\n\nLANGUAGE: text\nCODE:\n```\nThis commit refactors the colors_rgb example to implement the Widget\ntrait on mutable references to the app and its sub-widgets. This allows\nthe app to update its state while it is being rendered.\n\nAdditionally the main and run functions are refactored to be similar to\nthe other recent examples. This uses a pattern where the App struct has\na `run` method that takes a terminal as an argument, and the main\nfunction is in control of initializing and restoring the terminal and\ninstalling the error hooks.\n```\n\n----------------------------------------\n\nTITLE: Example Documentation - Compatibility Notice\nDESCRIPTION: Adds documentation about example compatibility with unreleased API changes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_85\n\nLANGUAGE: text\nCODE:\n```\nExamples often take advantage of unreleased API changes, which makes\nthem not copy-paste friendly.\n```\n\n----------------------------------------\n\nTITLE: Converting From Ambiguous Types to Line Using String in Rust\nDESCRIPTION: Example of a breaking change in Line implementation that adds From<Cow<str>> support, which requires explicit type conversion for ambiguous inferred values due to multiple conversion paths.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// given:\nstruct Foo { ... }\nimpl From<Foo> for String { ... }\nimpl From<Foo> for Cow<str> { ... }\n\nlet foo = Foo { ... };\nlet line = Line::from(foo); // now fails due to ambiguous type inference\n// replace with\nlet line = Line::from(String::from(foo));\n```\n\n----------------------------------------\n\nTITLE: Implementing Automated Nightly Releases for Ratatui\nDESCRIPTION: Adds functionality for automated nightly releases of the Ratatui project, including workflow renaming and release calculation simplification.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_159\n\nLANGUAGE: text\nCODE:\n```\n* feat(release): add automated nightly releases\n\n* refactor(release): rename the alpha workflow\n\n* refactor(release): simplify the release calculation\n```\n\n----------------------------------------\n\nTITLE: Running Demo2 with Destroy Mode\nDESCRIPTION: Command to run the demo2 example with crossterm and widget-calendar features enabled.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example demo2 --features=\"crossterm widget-calendar\"\n```\n\n----------------------------------------\n\nTITLE: Updating Examples README\nDESCRIPTION: Commit message describing updates to the examples README, including removal of VHS bug information and improvements to the instructions.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_132\n\nLANGUAGE: text\nCODE:\n```\nremove VHS bug info, tweak colors_rgb image, update some of the instructions. add demo2\n```\n\n----------------------------------------\n\nTITLE: Commit Message Template Configuration\nDESCRIPTION: Template showing the commit message format for changelog generation, including details about breaking changes and new functionality implementation.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_184\n\nLANGUAGE: text\nCODE:\n```\nThis allows someone reading the changelog to search for information\nabout breaking changes or implementation of new functionality.\n\n- refactored the commit template part to a macro instead of repeating it\n- added a link to the commit and to the release\n- updated the current changelog for the alpha and unreleased changes\n- Automatically changed the existing * lists to - lists\n```\n\n----------------------------------------\n\nTITLE: Installing Ratatui Core with Cargo\nDESCRIPTION: Command to add ratatui-core as a dependency to a Rust project using cargo\nSOURCE: https://github.com/ratatui/ratatui/blob/main/ratatui-core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add ratatui-core\n```\n\n----------------------------------------\n\nTITLE: Describing Layout Type Reorganization\nDESCRIPTION: Lists layout-related types being moved to separate files for better code organization.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_74\n\nLANGUAGE: text\nCODE:\n```\n- alignment -> layout/alignment.rs\n- corner -> layout/corner.rs\n- direction -> layout/direction.rs\n- size -> layout/size.rs\n```\n\n----------------------------------------\n\nTITLE: Buffer Index Caller Tracking\nDESCRIPTION: Error tracking explanation for incorrect x/y coordinates in buffer indexing.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nThe caller put in the wrong x/y -> the caller is the cause.\n```\n\n----------------------------------------\n\nTITLE: VHS Demo Documentation\nDESCRIPTION: Documentation about switching to VHS for demo gif rendering after fixing braille rendering bug.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_188\n\nLANGUAGE: text\nCODE:\n```\nThe bug that prevented braille rendering is fixed, so switch to VHS for\nrendering the demo gif\n\n![Demo of Ratatui](https://vhs.charm.sh/vhs-tF0QbuPbtHgUeG0sTVgFr.gif)\n```\n\n----------------------------------------\n\nTITLE: YAML Syntax Fix Documentation\nDESCRIPTION: Documentation noting YAML syntax requirements regarding tab usage outside of strings.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_185\n\nLANGUAGE: text\nCODE:\n```\na yaml file cannot contain tabs outside of strings\n```\n\n----------------------------------------\n\nTITLE: Refactoring Color Module and Documenting True Color Support\nDESCRIPTION: Commit message explaining the refactoring of the Color module and documentation of true color support.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_131\n\nLANGUAGE: text\nCODE:\n```\n* refactor(style): move Color to separate color mod\n\n* docs(color): document true color support\n```\n\n----------------------------------------\n\nTITLE: Describing Table Module Splitting\nDESCRIPTION: Explains the splitting of the large table widget module into multiple files for better maintainability, including refactoring of the rendering code.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_75\n\nLANGUAGE: text\nCODE:\n```\nAt close to 2000 lines of code, the table widget was getting a bit\nunwieldy. This commit splits it into multiple files, one for each\nstruct, and one for the table itself.\n\nAlso refactors the table rendering code to be easier to maintain.\n```\n\n----------------------------------------\n\nTITLE: Documenting Alpha Release Process\nDESCRIPTION: Commit message noting the documentation of the alpha release process, addressing an existing issue.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_140\n\nLANGUAGE: text\nCODE:\n```\nFixes https://github.com/ratatui/ratatui/issues/412\n```\n\n----------------------------------------\n\nTITLE: MSRV Update Documentation\nDESCRIPTION: Documentation of minimum supported Rust version (MSRV) bump to 1.67.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_186\n\nLANGUAGE: text\nCODE:\n```\n* chore(toolchain)!: bump msrv to 1.67\n```\n\n----------------------------------------\n\nTITLE: Debug Output Format for Text Components in Rust\nDESCRIPTION: The resulting debug output format for the Text component example, showing a more concise representation that includes styling information, alignment properties, and nested structures.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nText [Line [Span(\"without line fields\")], Line { style: Style::new().add_modifier(Modifier::BOLD), alignment: Some(Center), spans: [Span(\"with line fields\")] }, Line [Span(\"without span fields\"), Span { style: Style::new().green().on_black().add_modifier(Modifier::ITALIC).remove_modifier(Modifier::DIM), content: \"with span fields\" }]]\n```\n\n----------------------------------------\n\nTITLE: Removing Squashing Commits Requirement from CONTRIBUTING File\nDESCRIPTION: This commit removes the requirement to squash commits from the CONTRIBUTING file, as GitHub now automatically squashes commits when merging. This helps streamline the contribution guidelines.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_93\n\nLANGUAGE: text\nCODE:\n```\nRemoves the part about squashing commits from the CONTRIBUTING file.\n\nWe no longer require that because github squashes commits when merging.\nThis will cleanup the CONTRIBUTING file a bit which is already quite\ndense.\n```\n\n----------------------------------------\n\nTITLE: Barchart Calculation Optimization\nDESCRIPTION: Optimization of barchart label rendering calculations\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_169\n\nLANGUAGE: text\nCODE:\n```\nCalculating the label_offset is unnecessary, if we just render the\ngroup label after rendering the bars. We can just reuse bar_y.\n```\n\n----------------------------------------\n\nTITLE: CI Lint Check Optimization\nDESCRIPTION: Documentation about reorganizing CI checks to prioritize formatting and documentation checks.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_153\n\nLANGUAGE: text\nCODE:\n```\nPutting the formatting and doc checks first to ensure that more critical\\nerrors are caught first (e.g. a conventional commit error or typo should\\nnot prevent the formatting and doc checks from running).\n```\n\n----------------------------------------\n\nTITLE: LRU Dependency Update Documentation\nDESCRIPTION: Details about updating the LRU dependency requirements and related changes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_146\n\nLANGUAGE: text\nCODE:\n```\nUpdates the requirements on [lru](https://github.com/jeromefroe/lru-rs) to permit the latest version.\\n- [Changelog](https://github.com/jeromefroe/lru-rs/blob/master/CHANGELOG.md)\\n- [Commits](https://github.com/jeromefroe/lru-rs/compare/0.11.1...0.12.0)\\n\\n---\\nupdated-dependencies:\\n- dependency-name: lru\\n  dependency-type: direct:production\\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Benchmarking in Text\nDESCRIPTION: An explanation of disabling default benchmarking behavior to resolve issues with unrecognized criterion benchmark arguments.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_112\n\nLANGUAGE: text\nCODE:\n```\nDisables the default benchmarking behaviour for the lib target to fix unrecognized\ncriterion benchmark arguments.\n\nSee https://bheisler.github.io/criterion.rs/book/faq.html#cargo-bench-gives-unrecognized-option-errors-for-valid-command-line-options for details\n```\n\n----------------------------------------\n\nTITLE: Running Popup Demo with Cargo\nDESCRIPTION: Command to execute the popup demonstration example from the Ratatui project using Cargo package manager.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/popup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p popup\n```\n\n----------------------------------------\n\nTITLE: Table Unit Tests Fix\nDESCRIPTION: Documentation of fixes for table unit tests affected by rounding changes\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_168\n\nLANGUAGE: text\nCODE:\n```\nThe merge of the table unit tests after the rounding layout fix was not\nrebased correctly, this addresses the broken tests, makes them more\nconcise while adding comments to help clarify that the rounding behavior\nis working as expected.\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Checkout Update\nDESCRIPTION: Documentation of the actions/checkout dependency update from version 3 to 4.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_147\n\nLANGUAGE: text\nCODE:\n```\nBumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.\\n- [Release notes](https://github.com/actions/checkout/releases)\\n- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)\\n- [Commits](https://github.com/actions/checkout/compare/v3...v4)\\n\\n---\\nupdated-dependencies:\\n- dependency-name: actions/checkout\\n  dependency-type: direct:production\\n  update-type: version-update:semver-major\\n...\n```\n\n----------------------------------------\n\nTITLE: Module Syntax Modernization\nDESCRIPTION: Documentation about updating to modern module syntax by moving mod.rs files.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_152\n\nLANGUAGE: text\nCODE:\n```\nMove xxx/mod.rs to xxx.rs\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation Version Fix in Text\nDESCRIPTION: A note about moving layout::new change documentation to the unreleased section and adding table changes to the breaking changes document.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_111\n\nLANGUAGE: text\nCODE:\n```\nMoves the layout::new change to unreleasedd section and adds the table change\n```\n\n----------------------------------------\n\nTITLE: Running Minimal Ratatui Demo\nDESCRIPTION: Command to execute the minimal demo application using Cargo. The -p flag specifies the 'minimal' package to run.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/examples/apps/minimal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p minimal\n```\n\n----------------------------------------\n\nTITLE: Adding Examples README with GIFs in Ratatui\nDESCRIPTION: This snippet describes the addition of a README to the examples directory, including GIFs for each example and modifications made to improve visibility and functionality.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_175\n\nLANGUAGE: text\nCODE:\n```\nThis commit adds a readme to the examples directory with gifs of each\nexample. This should make it easier to see what each example does\nwithout having to run it.\n\nI modified the examples to fit better in the gifs. Mostly this was just\nremoving the margins, but for the block example I cleaned up the code a\nbit to make it more readable and changed it so the background bug is not\ntriggered.\n\nFor the table example, the combination of Min, Length, and Percent\nconstraints was causing the table to panic when the terminal was too\nsmall. I changed the example to use the Max constraint instead of the\nLength constraint.\n\nThe layout example now shows information about how the layout is\nconstrained on each block (which is now a paragraph with a block).\n```\n\n----------------------------------------\n\nTITLE: CodeCov Configuration Adjustment in Text\nDESCRIPTION: A note about adjusting CodeCov threshold and noise settings with a reference to the corresponding GitHub issue.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_113\n\nLANGUAGE: text\nCODE:\n```\nFixes https://github.com/ratatui/ratatui/issues/612\n```\n\n----------------------------------------\n\nTITLE: Makefile Termion Dependency Update\nDESCRIPTION: Documentation about limiting Termion dependency to non-Windows targets in doc lint.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_154\n\nLANGUAGE: text\nCODE:\n```\nOnly build termion on non-windows targets\n```\n\n----------------------------------------\n\nTITLE: Updating Project Description in Ratatui\nDESCRIPTION: This snippet shows changes made to improve the project description and simplify the library description in Ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_177\n\nLANGUAGE: text\nCODE:\n```\n* docs(project): make the project description cooler\n\n* docs(lib): simplify description\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub repository remotes from ratatui-org to ratatui\nDESCRIPTION: Shell command to update the repository remote URL to reflect the organization name change from ratatui-org to ratatui.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit remote set-url origin https://github.com/ratatui/ratatui\n```\n\n----------------------------------------\n\nTITLE: Makefile Format Target Addition\nDESCRIPTION: Documentation of new formatting targets and lint command reorganization in Makefile.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_155\n\nLANGUAGE: text\nCODE:\n```\n- add format target to Makefile.toml that actually fixes the formatting\\n- rename fmt target to lint-format\\n- rename style-check target to lint-style\\n- rename typos target to lint-typos\\n- rename check-docs target to lint-docs\\n- add section to CONTRIBUTING.md about formatting\n```\n\n----------------------------------------\n\nTITLE: Extracting Feature Documentation in Ratatui\nDESCRIPTION: This snippet shows the process of extracting feature documentation from Cargo.toml, making document-features an optional dependency, and documenting the serde feature.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_176\n\nLANGUAGE: text\nCODE:\n```\n* docs(lib): extract feature documentation from Cargo.toml\n\n* chore(deps): make `document-features` optional dependency\n\n* docs(lib): document the serde feature from features section\n```\n\n----------------------------------------\n\nTITLE: Removal of Simple-TUI-RS Reference in Text\nDESCRIPTION: An explanation for removing a reference to simple-tui-rs from the project documentation due to maintenance issues.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_108\n\nLANGUAGE: text\nCODE:\n```\nThis has not been recently and doesn't lead to good code\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmark for Sparkline Widget in Ratatui\nDESCRIPTION: This snippet describes the addition of a benchmark for the sparkline widget in Ratatui, testing basic rendering with different amounts of data.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_182\n\nLANGUAGE: text\nCODE:\n```\nAdded benchmark for the `sparkline` widget testing a basic render with different amount of data\n```\n\n----------------------------------------\n\nTITLE: Commenting on Reverting GitHub Action Bot Removal\nDESCRIPTION: A comment regarding the potential reversal of a commit that removed a GitHub action bot for nudging commit signing. It mentions waiting for a specific pull request to be merged before considering reverting.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_39\n\nLANGUAGE: text\nCODE:\n```\nWe can consider reverting this commit once this PR is merged:\nhttps://github.com/1Password/check-signed-commits-action/pull/9\n```\n\n----------------------------------------\n\nTITLE: Making Library and README Documentation Consistent\nDESCRIPTION: Commit message explaining the generation of README content from library documentation using cargo-rdme for consistency.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_142\n\nLANGUAGE: text\nCODE:\n```\n* docs: make library and README consistent\n\nGenerate the bulk of the README from the library documentation, so that\nthey are consistent using cargo-rdme.\n\n- Removed the Contributors section, as it is redundant with the github\n  contributors list.\n- Removed the info about the other backends and replaced it with a\n  pointer to the documentation.\n- add docsrs example, vhs tape and images that will end up in the README\n```\n\n----------------------------------------\n\nTITLE: Package Categories Update\nDESCRIPTION: Addition of package categories field to Cargo.toml for better package metadata and clippy compliance.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nAdd the package categories field in Cargo.toml, with value\n`[\"command-line-interface\"]`. This fixes the (currently non-default)\nclippy cargo group lint\n`clippy::cargo_common_metadata`.\n\nAs per discussion in [Cargo package categories\nsuggestions], this lint is not suggested to be run by default in CI, but rather as an\noccasional one-off as part of the larger\n`clippy::cargo` lint group.\n```\n\n----------------------------------------\n\nTITLE: Improving Documentation for Style Shorthands\nDESCRIPTION: Commit message describing the addition of documentation comments to the style module to make the Stylize trait more discoverable.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_137\n\nLANGUAGE: text\nCODE:\n```\nThe Stylize trait was introduced in 0.22 to make styling less verbose.\nThis adds a bunch of documentation comments to the style module and\ntypes to make this easier to discover.\n```\n\n----------------------------------------\n\nTITLE: Example Code Refactoring\nDESCRIPTION: Documentation of example code simplification using Duration::saturating_sub.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_148\n\nLANGUAGE: text\nCODE:\n```\n* chore(examples): Simplify timeout calculation with `Duration::saturating_sub`\n```\n\n----------------------------------------\n\nTITLE: Automatic Alpha Release Versioning for Breaking Changes\nDESCRIPTION: This commit implements automatic detection of breaking changes based on commit messages to appropriately bump the alpha release version number. It ensures version numbers properly reflect the nature of changes.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_95\n\nLANGUAGE: text\nCODE:\n```\nAutomatically detect breaking changes based on commit messages\nand bump the alpha release number accordingly.\n\nE.g. v0.23.1-alpha.1 will be bumped to v0.24.0-alpha.0 if any commit\nsince v0.23.0 has a breaking change.\n```\n\n----------------------------------------\n\nTITLE: Testing Enhancement - Layout Tests\nDESCRIPTION: Converts layout tests to use rstest for parameterized testing.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_92\n\nLANGUAGE: text\nCODE:\n```\nThis PR makes all the letters test use `rstest`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Ratatui v0.30.0-alpha.2\nDESCRIPTION: A markdown formatted changelog entry detailing feature additions and modifications for the Ratatui project, including layout changes, new macros, and color palette updates.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## ratatui - [0.30.0-alpha.2](https://github.com/ratatui/ratatui/compare/ratatui-v0.30.0-alpha.1...ratatui-v0.30.0-alpha.2) - 2025-03-01\n\n### Features\n\n- [be8def9](https://github.com/ratatui/ratatui/commit/be8def963956c605bca28bcd8df673bd7ec3740b) *(layout)* Use *= instead of =* (#45) by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652) [**breaking**]\n\n- [f33d51e](https://github.com/ratatui/ratatui/commit/f33d51e7d9ccf9fe52ec3289d04d97c722d9ee17) *(text)* Add raw! and styled! macros (#4) by @joshka in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [d441520](https://github.com/ratatui/ratatui/commit/d4415204e1eb3aed2a74a722aeaaa274975dd2d7) *(uncategorized)* Add ratatui-macros crate by @joshka in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [3855c3a](https://github.com/ratatui/ratatui/commit/3855c3a84a77037aeee40dbe9e52454fb1f9afee) *(uncategorized)* Add text! macro (#36) by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [8ecdd89](https://github.com/ratatui/ratatui/commit/8ecdd892f53d7db95bbb53a61700d36e3fcefdd4) *(uncategorized)* Add fill constraint (#34) by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [a0c35f1](https://github.com/ratatui/ratatui/commit/a0c35f1d7bcce10e092582b95f5b0a3f20ad7bf3) *(uncategorized)* Replace raw! and styled! with span! macro (#30) by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [9a7467b](https://github.com/ratatui/ratatui/commit/9a7467b30576d5cb7491ea6e09efcae97eadf9bb) *(uncategorized)* Add `line!` attribute macro (#29) by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [39bd72b](https://github.com/ratatui/ratatui/commit/39bd72b1f702dadb1ebbaf4e77ad2fada166ac49) *(uncategorized)* Add pub visibility to color ✨ by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n\n- [29edc3a](https://github.com/ratatui/ratatui/commit/29edc3a7a38c512611a80cf5d8d42027558419b2) *(uncategorized)* Add color palette based on tailwindcss ✨ by @kdheepak in [#1652](https://github.com/ratatui/ratatui/pull/1652)\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Intermittently Failing Layout Tests\nDESCRIPTION: This commit disables tests in the layout module that occasionally fail in both local and CI environments. The issue will be addressed in a future PR that focuses on constraint weights.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_96\n\nLANGUAGE: text\nCODE:\n```\nThese fails seem to fail on occasion, locally and on CI.\n\nThis issue will be revisited in the PR on constraint weights:\nhttps://github.com/ratatui/ratatui/pull/788\n```\n\n----------------------------------------\n\nTITLE: Dependabot Configuration\nDESCRIPTION: Documentation of Dependabot configuration file creation and updates.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_149\n\nLANGUAGE: text\nCODE:\n```\n* chore: Create dependabot.yml\\n\\n* Update .github/dependabot.yml\n```\n\n----------------------------------------\n\nTITLE: Cargo Paste Version Requirement\nDESCRIPTION: Explanation of minimum version requirement for paste dependency\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_165\n\nLANGUAGE: text\nCODE:\n```\nratatui is using features that are currently only available in paste 1.0.2; specifying the minimum version to be 1.0 will consequently cause a compilation error if cargo is only able to use a version less than 1.0.2.\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs::select() Usage in Rust\nDESCRIPTION: Example of modifying code to accommodate the change in Tabs::select() method, which now accepts Into<Option<usize>> instead of usize, requiring explicit type conversion for parameter type inference.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/BREAKING-CHANGES.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nlet selected = 1u8;\n- let tabs = Tabs::new([\"A\", \"B\"]).select(selected.into())\n+ let tabs = Tabs::new([\"A\", \"B\"]).select(selected as usize)\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Formatting in Documentation Comments in Text\nDESCRIPTION: An explanation of enabling rustfmt's format_code_in_doc_comments option to improve documentation consistency, especially for fluent setters.\nSOURCE: https://github.com/ratatui/ratatui/blob/main/CHANGELOG.md#2025-04-23_snippet_109\n\nLANGUAGE: text\nCODE:\n```\nThis enables more consistently formatted code in doc comments,\nespecially since ratatui heavily uses fluent setters.\n\nSee https://rust-lang.github.io/rustfmt/?version=v1.6.0#format_code_in_doc_comments\n```"
  }
]